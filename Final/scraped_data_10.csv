URL,Author,Author Description,Publication Date,Votes,Review
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,David Jeske,"Computer Engineer, former Google Engineer Director.",2017,3.6K,"As a former Google Engineering Director, I can offer some insight.
Agile means many things to many people. The simple high level Agile Manifesto is something I think is close to the way Google engineers think about software development.
Individuals and interactions over processes and tools
Working software over comprehensive documentation
Customer collaboration over contract negotiation
Responding to change over following a plan
However, once you get past these high level ideas into details, the agreement starts to fade. Agile has some good ideas but it also has problematic elements which are too centered around short-term thinking for working on revolutionary engineering projects done at companies like Google. Without getting buried in details, let’s look at the themes in Principles behind the Agile Manifesto.
Let’s start with the shared ideas. Google development style exemplifies the type of individual empowerment talked about in the principles. The specific principles which are most in-line-with and probably inspired by Silicon Valley include:
Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.
The best architectures, requirements, and designs emerge from self-organizing teams.
At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.
Continuous attention to technical excellence and good design enhances agility.
Simplicity - the art of maximizing the amount of work not done - is essential.
These principles are almost common sense for smart engineers. I argue Silicon Valley created the culture of empowerment and trusting individuals that these are centered around.
However, there are other parts of the principles which are not a part of Google-style development culture. These are the parts which have led to the short-term focused Scrum process. They seem suited to particular types of development, most notably consulting or contract programming, where the customer is external to the organizations, runs the show because they are paying for development, and can change their mind at any time:
Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.
Business people and developers must work together daily throughout the project.
The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.
Welcome changing requirements, even late in development. Agile processes harness change for the customer’s competitive advantage.
Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.
This style of short-term planning, direct customer contact, and continuous iteration is well suited to software with a simple core and lots of customer visible features that are incrementally useful. It is not so well suited to software which has a very simple interface and tons of hidden internal complexity, software which isn’t useful until it’s fairly complete, or leapfrog solutions the customer can’t imagine.
Companies like Google write revolutionary software which has never been written before, and which doesn’t work until complex subcomponents are written. Bigtable and Borg immediately come to mind. Bigtable is a widely copied design for a distributed database, and Borg was one of the first extremely large scale cluster/cloud managers. This type of innovation takes significant up-front design time, and working on components over longer than one week iterations. Because the projects have such simple external interfaces, and so much internal complexity, much of the work is not even visible to “customers”, so there is no way to write customer visible stories about it. This type of software takes 8–20 months to deliver the first working version to the customer.
Projects like Bigtable and Borg are the anti-scrum. They represent extremely long term thinking on the part of the technical leaders. Instead of working on something that would meet a small need this week, they were laying a foundation for a fundamental shift in the way cluster software was developed. That investment has not only reaped incredible rewards at Google, but has influenced the entire industry.
Other industries have similar analogs. From tax-accounting software to computer games, some software is not suited to give to end customers when partially finished.
If I was asked to rewrite the above agile principles to be more in-line with Google style development, they might be more like:
Our highest priority is to increase customer (and programmer) productivity and access to information. Work on the biggest, most frequently used problems you can find, and create the largest net impact. Don’t give the customer what they ask for; understand them, and revolutionize their world.
Developers should create a Google Design Document (a fairly minimal, but structured design doc), explaining the project, what goals it hopes to achieve, and explains why it can’t be done in other ways. This document should be circulated with stakeholders, to get early feedback before the project gets underway. The written record is essential, as it assures there is a clear and agreed understanding of when the project is a success and how it aims to get there.
At all phases of the project, critical design elements for larger components should be concisely explained and captured in a design document.
Innovate in leapfrogs. It’s more important to finish and deploy a leapfrog than to attempt perfection. There is no perfection. Instead be flexible, and plan to constantly reinvent at every level of the stack.
Deliver working software as soon as is reasonably possible, and no sooner. “Dogfood” projects internally before they are shipped externally. Make sure products meet high quality standards before shipping. The quality of the product is more important than the time it takes to achieve it.
While the high level Agile Manifesto is flexible enough to work with these principles, these are very different than the short-iteration low documentation Agile/Scrum process which has become synonymous with the word Agile."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Imtiaz Mohammad,"Google, Ex-Microsoft, IITK CSE, Cracking Interviews Trainer",2018,343,"Agile is advocated and driven by people who no longer design and code, let alone debug nasty issues that are part of development. On top of it, they don't trust their engineers to do the right things (either their hiring is broken or their culture is or both).
They begin with wishful deadlines as they don't know how much hands-on work can be done in a day. When they see that the team is ‘falling behind’ within 48 hours of project start, they declare the team is not aggressive enough.
Everyone is then ordered to show up at 9 am from the next day, do a stand up meeting, design and develop in a conference room to improve collaboration. We need to be more agile, not less, they proclaim. They can't see how it is equivalent to thrashing in operating systems.
The creative type of engineers see how brain dead this whole idea is and how they are being taxed for failure of the system and some lazy engineers in the team. But, where will they go? The whole world has become hopelessly agile."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Assistant,Bot,2024-08,183,"Some developers at strong companies like Google may consider Agile development to be ""nonsense"" for several reasons, often stemming from their experiences with its implementation, the principles behind Agile, and the specific context of their work environments. Here are some common critiques:
Misinterpretation of Agile Principles: Some teams may adopt Agile methodologies superficially, focusing on rituals (like daily stand-ups or sprint planning) without understanding the underlying principles of flexibility, collaboration, and continuous improvement. This can lead to a perception that Agile is ineffective or merely a set of bureaucratic processes.
Overemphasis on Process: In some cases, Agile can become overly process-oriented, with teams bogged down by too many ceremonies and documentation requirements, which contradicts the Agile manifesto’s emphasis on working software over comprehensive documentation.
Scaling Challenges: Agile methodologies, particularly Scrum, can struggle when scaled to larger projects or organizations. Developers may find that the frameworks do not adapt well to complex systems or large teams, leading to frustration and inefficiency.
Inconsistent Implementation: Different teams within the same company may implement Agile differently, leading to confusion and inconsistency. This variation can make it difficult to collaborate across teams or to have a unified approach to project management.
Focus on Short-Term Goals: Agile’s iterative approach can sometimes prioritize short-term deliverables over long-term planning and architecture. Developers might feel that this leads to technical debt or compromises in code quality, as pressure mounts to deliver features quickly.
Cultural Fit: In some strong engineering cultures, particularly at tech giants, there may be a preference for more structured approaches to software development. Developers might feel that Agile does not align with their company’s values or the complexity of the projects they work on.
Burnout and Stress: The rapid pace of Agile iterations can lead to burnout among developers, especially if they feel pressured to meet constantly shifting priorities or deadlines. This can foster resentment toward the Agile framework itself.
Lack of True Collaboration: Agile emphasizes collaboration, but in practice, teams may still operate in silos, undermining the collaborative spirit that Agile intends to promote. This can lead to frustration and a belief that Agile is not delivering on its promises.
In summary, while Agile development has many advocates and can be very effective when implemented correctly, its pitfalls and the way it is sometimes applied can lead to skepticism and criticism from experienced developers."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Chris Travers,Database Administrator at Adjust.com (2021–present),2019,77,"My experience here working in teams of different sizes and projects of different sizes is this:
Where agile sucks:
Agile is built for business applications where requirements are subject to change, and productive use of agile assumes a stable platform on which to iterate quickly. The more of your stack is agile with frequently changing software contracts, the more you will sink your time into fixing stuff instead of building stuff. Put another way, successful use of agile requires that it be applied to limited sections of code at the top level of the software stack of a project. This is because you want to be able to rapidly change things without breaking other things in subtle ways your tests might not properly catch.
API stability is an important thing when building software, and rapid iteration around API semantics is going to cause headaches once the API is used in production.
An important aspect of API stability is API documentation. API documentation is a forward-looking document that says specifically what APIs are still guaranteed to do in the future. Disregard it and you can no longer reason carefully about what specifically needs to be fixed in order to fix a bug.
Why Agile is still Invaluable:
While the overall rapid iteration/code flexibility goal of Agile does not work well for components where the overall problems are reasonably well understood on an interface level, there are certain industry changes that Agile has brought to the industry that really must be preserved. These include:
Instead of division of labor by speciality (particularly design and testing), the idea that design, implementation, and testing should be initially done by the same people is indispensable. You might still have QA folks but most QA work should be done by the developers themselves.
Small interdisciplanery teams which are able to bring all the skills together to make components successful are extremely important.
When you are building big systems, Agile ends up being a bit player. As long as you see things as either/or, agile is suitable only for small projects. As the project scale so they are large, managing what is understood and should be well engineered (and stable/documented!) and what is poorly understood (and thus subject to change) is very important. Understanding what is poorly understood (and thus should be expected to become less agile over time) vs what is subject to change (and thus will remain agile forever) is also very important.
In other words, Agile is not a magic bullet for software development. PostgreSQL, the Linux Kernel, and other foundational projects should not use it. ERP programs will probably use it in some areas and not in others. Public apps will again typically see a mixture. So there is a clear and well understood point that Agile is not only not for everything but not for most things. But I don’t think you will see push-back to agile usage where it is actually appropriate."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jasmine Adamson,Rocket Programmer,2016,2.4K,"Agile is bullshit, that's why. OK let me qualify... The Agile Philosphy is perfectly fine, and it addresses the physical and psychological aspects of managing software development teams quite well. The bullshit comes in when a team or company makes the statement that ""we are doing Agile"" because they aren't. So, to clarify, Agile itself is a good idea, but when someone says they are ""doing Agile"" that statement is bullshit. Always.
Programmers like things well-defined. When you tell me we're going to ""do The Agile Process"" (it's not a process), I expect an organization that follows these principles: Principles behind the Agile Manifesto
Those principles are well defined, even beautiful. When all of those principles are taken into account and lived every day, you have a well-defined, even beautiful process. When you leave out even one of those principles, it all goes to hell, you're not doing Agile any more, and people who know Agile will recognize that immediately, as I have done in every single shop I've ever worked.
I've worked in ""Agile"" development shops for the past 8 years, so let me tell you the reality, with relation to the principles, and I think you'll understand why ""Agile"" is bullshit...
1. Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. - My customer right now is another business unit. I have never met them and I have no idea what they do. This is the reality in most companies. We don't even know the customer well enough to ""satisfy"" them, and certainly not well enough to make it job one.
2. Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage. - LOL! Nobody accepts changing requirements. It is universally hated, but it's the second Agile principle!
3. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale. - Some companies do this quite well, but most teams aren't managed well enough to break software up into reasonable chunks for Agile time-scales. Delivery schedules are often based on large updates rather than small ones. Big updates isn't Agile.
4. Business people and developers must work together daily throughout the project. - LOL! Again, this isn't really done. I don't think I've ever spoken to any of my customers on my current project. In past projects this has been hit and miss, and mostly based on organizational structure rather than anything meaningful. I can't talk to my customers because ""they are above me"" or ""they are in another state"" or whatever. Developers and business people working together is extremely rare. Most companies have a go-between who is supposed to facilitate this relationship, but it never works very well. I need to talk directly to the person using the application, NOT their manager, who doesn't really use it, and certainly not to the manager of their manager, through my manager - which is the typical case. Requirements are often determined by a person two levels up from the actual users and communicated through representatives, never directly from user to developer.
5. Build projects around motivated individuals. - Most people don't know what this means. What it means is low level employees typically have the best ideas for software, and they are typically motivated to solve those problems because it will make their lives easier. Projects should be structured around those desires, which will affect the company bottom line directly by making workers more effective. Have you ever worked in a company where the lowest level employees are deciding what software should be built? Don't make me LOL, again.
5a. Give them the environment and support they need, and trust them to get the job done. - This is about developers here. Have you ever worked anywhere that you had all the tools, all the access permissions, and all the gadgets you needed to be most effective? Getting a good set of monitors is worse than a trip to the dentist in most companies. In one of my recent positions, it took three weeks to get me a computer that could run Visual Studio, and that was after I had told them two weeks before my start date, the exact specs of the computer I would need. Developers are rarely ""trusted"" either - usually we are told exactly what to do and when to do it rather than being given a job and a deadline and left on our own.
6. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. - You mean to tell me we can't do everything with IM and email? Seriously? Yes. Seriously. When a team is spread out all over the world and never looks each other in the eye, it hurts. This is particularly true for interaction between developers, but also important for interacting with customers. My most effective method of improving existing software was to stand behind someone and actually watch them use it. In many companies you just can't do that, even if you know who the customers are, they are ""too busy"" to talk to you, or it's impossible for some other reason. In-person interaction just isn't what it used to be. Companies don't think it's valuable.
7. Working software is the primary measure of progress. - And yet, nobody measures that. What do we measure? Defect rates, hours worked, things like that. We almost never measure the thing that matters - did the customer get a working feature? How many working features did we release? Were they big features, medium ones, or little ones? Nobody knows.
8. Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. - What this means is everyone works 30 hours per week on development and 10 hours on managing themselves and their workload, communicating with others, administrative stuff, etc. This can go on forever. What many companies do is demand overtime occasionally, and what some companies do is demand overtime quite often, and this is not sustainable. An Agile team rarely goes into emergency mode and pulls all-nighters. (You're kind of always in emergency mode)
9. Continuous attention to technical excellence and good design enhances agility. - Most companies do an ok job of this, but technical excellence is often pushed to the side in favor of software that works. This is, in my opinion, the correct trade-off (principle 1 and 7)
10. Simplicity--the art of maximizing the amount of work not done--is essential. - Most teams simply don't spend enough time on this. A sense of urgency often overrides careful planning. The problem here is careful planning makes things get done faster. During the planning stage it feels like you're not getting anywhere, but you are setting up for a quick sprint. This setup is often overlooked, and we end up with not only complicated software, but complicated development habits, complicated code, and generally poor software design. This slows down maintenance and new development, as we try to fit into poorly designed structures that become ingrained and impossible to improve. ""This new feature is poorly designed because the application it integrates with is poorly designed"" can go on forever.
11. The best architectures, requirements, and designs emerge from self-organizing teams. - Teams are organized by management, almost never by themselves. This is just a corporate culture problem, and it's very hard to overcome. Sometimes in startups and younger companies you can promote this idea and have it work, but in most companies it just doesn't work.
12. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. - Many companies do an ok job of this, but it's often in the form of ""performance reviews"" and it doesn't have the flavor we really want. What Agile wants is ""lets all sit down together and look at what we did and how we can be better next time, AS A TEAM"" - but what usually happens is individuals are evaluated against arbitrary and subjective measurements, and teams almost never implement any process improvements based on those evaluations.
So, Agile is bullshit because nobody embraces the principles and puts them to work, but they still say they are doing Agile. This is extremely frustrating because developers know that if we did these things we could be way more effective.
(Maybe that's not what you're looking for but I've been wanting to write that for a long time now)
Update: Some people are taking this the wrong way. This is not a critique of Agile itself, it's an answer within the context of the question. It's an explanation of why programmers ""consider Agile to be nonsense/bullshit"" I'm NOT making the case that the Agile process itself is bullshit. This is just why ""many"" programmers say it is, which is a given of the question. This is, of course, opinion based on my own personal experience but it's clear that many people agree with me on this."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Michael O. Church,Studied at Carleton College,2015,979,"Before I get into why this ""Agile"" stuff is horrible, let's describe where Agile/Scrum can work. It can work for a time-sensitive and critical project of short duration (6 weeks max) that cross-cuts the business and has no clear manager, because it involves people from multiple departments. You can call it a ""Code Red"" or call it a Scrum or a ""War Room"" if you have a physical room for it.
Note that ""Agile"" comes from the consulting world. It suits well the needs of a small consulting firm, not yet very well-established, that lands one big-ticket project and needs to deliver it quickly, despite changing requirements and other potential bad behavior from the client. It works well when you have a relatively homogeneous talent level and a staff of generalists, which might also be true for an emerging web consultancy.
As a short-term methodology when a firm faces an existential risk or a game-changing opportunity, I'm not opposed to the ""Code Red""/""crunch time""/Scrum practice of ignoring peoples' career goals and their individual talents. I have in mind that this ""Code Red"" state should exist for no more than 6 weeks per year in a well-run business. Even that's less than ideal: the ideal is zero. Frequent crises reflect poorly on management.
Now, let us count the sins of ""Agile"" and Scrum in the more common corporate context, where they're permanent working arrangements.
It's a culture of terminal juniority. Product development and architecture aren't the programmer's job, because they take longer than two weeks. Rather, the programmer works on atomized feature-level ""user stories"". This is OK for a junior who's learning the codebase and software engineering principles and may appreciate the guidance, but anyone with more than 5 years of experience is going to find it to be a dissatisfying way to work. There is no place for an actual senior engineer on a Scrum team. The only way to move up is to become a ""Scrum Master"", a bullshit management role that involves responsibility without power. If you don't believe in this stuff yourself (and I don't) then you sure as hell don't want to move up into a role where you're responsible for enforcing it over people who technically answer to someone else.
It's aggressively short-term, by design. These methodologies are designed for scrappy, unproven consulting firms that need to bear down and pass their first high-profile project. In that context, they probably work-- at the expense of technical debt and tired workers. There are two problems here. First, Agile/Scrum is the way that a consulting firm behaves when it's an underdog, but people who join large corporations do so because they don't want to be underdogs. They'd rather be a small part of something stable than a bigger part of something that no one else yet believes in. If they wanted that other deal, they'd be in tiny startups. Second, if you carry this way of working on for months or years, you get a lot of technical debt and you get low morale. Senior engineers are quicker to go, because they usually want something meatier than filling out some other guy's ""user stories"".
It has no regard for the programmers' career needs or desires. See the points above about Agile's short-term orientation. Now, people are willing to give up their career goals to pitch in on a short-term crisis, for two reasons. First, if it's genuinely important to the firm, then it does help their career to do so. Second, a story of having solved a genuine crisis under time pressure can be a career booster. Saying, ""I was in the War Room and had 20 minutes each day with the CEO"" means that you were important and valued. Saying ""I was on a Scrum team"" means ""Kick me"". On the whole, Agile and Scrum expect you to put your career goals on hold, and people will tolerate that during an exceptional short-term crisis (that merits an actual sprint) but not in perpetuity.
It's micromanagement. User stories and backlog grooming are there to control what the engineer works on. The absurdly frequent meetings (and so many different kinds of status meetings!) are to intimidate him into not slacking. The story points are there to track productivity (in some superficial, inaccurate way). The talk of ""removing impediments"" is code for ""spotting slackers"". Even for people who have nothing to hide-- even for people who'd be strong performers in a more sane, relaxed, progress-over-rapidity organization-- a surveillance state is an anxiety state. It sucks, and if you're good at what you do, it's insulting to have to justify days and sometimes even hours of your time, and to be jerked around if these estimates are even slightly displeasing to the ""product owner"".
At identifying low performers, it has an unacceptably high false-positive rate. Let's not kid ourselves. The reason ""Agile"" is so popular is that it carries this mythology of spotting low performers immediately-- in two weeks instead of over months-- and giving objective cause to fire them. (Agile/Scrum is, in essence, a permanent PIP.) I've heard it put this way: ""use Scrum to spot your Scum."" The problem is that it also turns good workers into low performers. Actual problem employees are already visible to the team and manager regardless of whether this nonsense is used. (In many organizations, nothing is done about them because the organization or circumstances may make them hard to fire, but that's a separate issue.) You don't need Scrum for that. When you start playing the perpetual-crisis/surveillance-state game of Scrum, you end up losing a lot of good people. Either they take the perpetual performance review seriously, get stressed out, and start to falter after a while; or they disengage and become minimum-effort players just trying to protect an income.
It punishes R&D, and it hurts the best engineers the most. Corporations tend to value reliability over total productivity. In terms of negative impulses on the company, the emphasis on reliability is correct. When it comes to being ethical, people who are unreliable are disastrous. In terms of positive impulses, you often care more about total productivity (averaged over a year, two years, maybe longer) more than reliability. You'd rather have the variable worker who has some home-run weeks and some false starts than the reliably mediocre one. There is, it turns out, an intrinsic positive correlation between the variability of work (or risk) and the value rendered. Agile and Scrum, however, single out and humiliate anyone who works for 2 weeks and doesn't have something to show for it. This means that there's no room to fail, thus no room to experiment. For senior engineers who already know that they can fulfill user stories and trivial features, this also means that there's no point in going to work.
I have actually seen it kill companies. I can't get too specific here, but I could name a company (once valued over $1 billion) that, following a merger, got neck-deep in Scrum. It lost over 80 percent of its value. The Scrum/Agile mess prevented people from working on what was actually important to the business, and the insulting juniority of the regime pushed away senior engineers in droves. Between the talent bleed and the loss of the engineering organization's ability to identify and fulfill core business needs (since Scrum is all about engineers not thinking for themselves) it got into a state from which I am doubtful that it can recover. This is just one story of an engineering organization killed by Agile, but there are others. Given that the Googles of the world need senior talent to keep themselves running, you can see why they wouldn't want to use it. If you're the back office at a bank, you can take your chances on a senior-level talent bleed and try Agile. (You might even have that as a goal, if you need to cut costs.) You can always hire legacy rescue consultants (at $300/hour, which is chump change to a bank) to cover the mess, later. If you're Google, your problems are just too big to hire those kinds of consultants; losing your seniors can be calamitous.
It's sold dishonestly. This stuff can actually work when you're trying to mobilize an ""emergency team"" around an ill-defined and evolving but time-critical target. It's hard to motivate smart people to put aside their career goals and specialties and bear down on a task that might spit out some hilariously unsexy work. But in a consulting shop, there are a few countervailing motivations that don't exist in typical corporate employment. First, the ""Scrum"" is project-specific and therefore time-limited: getting the project done (actually done, not ""done"" in some corporate sense) and scoring the client and getting a retainer means that people can relax. Second, consulting firms rarely give startup-style equity or options, but they are often more generous in profit-sharing than the hot startups, so senior talent is aligned with the success of the business and 3-6 weeks of grunt work doesn't seem so bad if you're going to get a performance bonus that could be 50% of your salary, and possibly a promotion to the partner level. Those factors don't exist in corporate IT or even in startups. No one's going to put his career goals on hold and work through of a bunch of feature-level tickets for months, just for an average salary or for 0.05% in equity. Where is the dishonesty? Agile/Scrum works in a temporary setting, especially when commanding a just-now-assembled ""emergency team"" with no clear manager. It also works for small consulting shops mobilizing around a do-or-die project. It doesn't work in a permanent context. It's my belief that the ""Agile coach"" consulting shops actually know that it's not sustainable. So why would they sell it as a permanent productivity-enhancer? Because almost no one would buy it if it were sold as what it was: something that works in the short term, does a lot of damage, and will require after-the-fact cleanup effort on the tech-debt and morale fronts. This isn't the first generation to invent ""crunch time"" or ""war rooms"", but this ideal of a permanent ""sprint"" is so appealing to eyes-on-the-scoreboard middle managers that it persists and it sells like it's made out of rainbows and kittens."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Rajaraman Raghuraman,Introvert | Engineer | Self Published Author | Writer | Love Silence,2015,81,"Wonderful answers written here.
A few days back I wrote this answer.
Rajaraman Raghuraman's answer to Is Agile methodology making life worse for developers?
I strongly believe that role of leadership/management in any organization plays a big role in the success of Agile.
The fundamental reason why developers (Not just Google) started hating Agile is that
1. Most organizations have a wrong understanding/implementation of Agile.
In my perspective, No Agile is better than bad Agile. Because it adds a lot to the overhead of an already complex software project. And most importantly it destroys the morale of the employees. Which is why we have this Quora thread in the first place.
2. People especially at the management/leadership levels think that if a team follows Scrum, they are Agile.
Management assume they are agile the moment the teams start doing Daily Standups, Sprint Planning, Retrospectives, etc. They showcase brilliant statistics like 70% of our team are Agile. We can do 100 story points per sprint. etc. etc. which actually makes no sense if you go and talk to the developers/testers in the project.
3. There is an entire industry which is trying to over exaggerate/misguide the Agile movement and make money out of it.
Since they are interested in making money, they end up doing things that make them money instead of doing things that actually benefit organizations. For example, there are a lot of tools which actually don't fit into an existing project context, but still teams are forced to use them. Even popular ones like Version One, JIRA Agile add to the complexity. It's good for reporting who is working on what, check progress of projects, etc. But it is not good for the team.
4. The troubled understanding that Agile is a One Size Fits All kinda thing.
Every project team is different. One team might take it longer to come up with the desired results as there is considerable R&D involved. One team might be great hustlers. And there will be a mixture of these kind in each team. That makes following a process like Scrum, very tricky because inherently we are trying to say that no matter how you work, what your working style is, all you have to do is sacrifice your working style to fit the team's working style. Trying to generalize process across teams is also a major pain. Just because Team A has 7 points in their Definition of Done, it is not necessary to have all for Team B and C.
5. Being in a Fixed Mindset (Anti-Agile).
Why Agile came up in the first place? Because we were poor at estimating large projects. We used to break down each task so minutely and we had to estimate. But everyone knew that it was not working out. Hence the relative sizing with respect to story points. But again, all these bullshit of converting story points to hours. Putting down each task and estimating for each task, etc. so that, we are more clear in our activities to come.
This is what we used to do in the beginning, that didn't work out. But we are again falling for the same trap.
And penalizing if the estimates go wrong, makes things worse. One of the main points of Agile was that there is no Fixed Plan. But what most of the organizations do is exactly the opposite.
I heard a manager that once said ""Since we are doing Agile, I assume that you guys don't come up with additional tasks during the sprint. Otherwise what is the point of doing Sprint Planning, Grooming, etc.""
6. Some teams are already Agile. And for them, Scrum should not be forced.
Some teams are already doing a good job in their engineering practices, routines, etc. So for them, Agile means no sense at all. Because they will ask ""This is what we do on a regular basis, what new this is going to add"". But since other teams are following Scrum, they are also forced to use Scrum. Which may not be a best fit for a team that is already doing well.
7. Scrum by definition doesn't give a damn to the seniority of engineers. Because everyone is a Scrum Team Member.
Good in paper. But it hasn't worked out quite well in practice. As you move up your career ladder, you will obviously might want to work on things that are non-trivial & more challenging. But in Scrum, that can't happen. If there is a task that is not the right fit for a senior engineer, then also he/she is force to take that up. Which will result in hurting their ego. Which is bad.
8. Impediments are not removed. Or worse new impediments crop up when implementing Agile in a bad fashion.
For example, if there is a communication gap / ego clash between engineers and managers in the team or between team members, without removing it, it's going to amplify further in Agile based projects. And results will be affected. Sometimes even worse, doing micromanagement can stir up new troubles for the team as a whole. Agile can't fix which is already broken. Definitely not a solution to all team related problems.
9. Scrum by definition doesn't care about flow state of a programmer.
It has been thoroughly researched that unless a programmer goes into a flow state or the Zone, he will be less productive. Again this depends on the nature and style of the developer. Some can get into the zone fairly quickly. But for some, it takes more time. For example, it can so happen that on a given day, due to some reason or the other, the developer might not get into any sort of rythm. But maybe the next day, he would get rythm and might probably finish more items that he had committed. But in Scrum, he/she is accountable to the entire team about the task that he had committed yesterday. In the daily stand up, people might ask him, ""Why it is taking more time? This can be finished easily"". And that can hurt him/her. That brings unnecessary pressure for the developer and may not be in the best interest of his morale.
It is quite concerning to note that, Agile Principles are losing their value just because of the people who are using them in a way they are not supposed to . I have witnessed that many have started hating Agile, now they think Agile is a bottleneck. Whereas the truth is, Agile was primarily invented with lot of good intentions to prevent lot of bullshits that were happening in the name of Project Management & Requirements Management."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Curtis Poe,"Mostly I write Perl, JavaScript and SQL. Also assembler, C, COBOL, Java, Prolog.",2016,337,"Summary: if you think Scrum and Agile are the same thing, you're more likely to hate Agile.
When I teach Agile classes, it's been my experience that many in the Agile community were never taught the point of Agile, which is reducing the cost of change and uncertainty. In fact, I see from some responses here that people are conflating specific Agile techniques — such as Scrum — with Agile. Teaching Scrum as Agile is like teaching chess by explaining how the pieces move but not mentioning checkmate. Unfortunately, that's what the Agile community is doing today and it's understandable that many people are getting caught in that trap.
When to Use Agile

I think the problem started with the Agile Manifesto: many people who were very good at software development found a way of developing software which was better under the assumption of change. It's that last bit which everyone forgets: under the assumption of change. That's the key and if you don't grasp that, you'll be able to tell people the rules of chess, but look puzzled when they ask you about checkmate.
Agile, in short, is nothing more than lowering the cost of change and uncertainty. If you have little change and uncertainty, Agile is a rubbish choice and you should choose a system optimized for reliability and reproducibility. These are not the same thing, no matter how much many Agile practitioners protest otherwise. For example, do you really want to ""fail fast"" when building a nuclear reactor? Not unless you're an idiot. Reliability and reproducibility are more valuable here. Optimizing for change and uncertainty is probably also bad for, say, accounting. Unless you're Enron, you probably want your accounting results to be reliable and reproducible. You want accounting to be boring, not exciting.
So how do you choose between Agility or Stability? A good rule of thumb is to know where your product is in its life cycle, along with the maturity of the market you're in, and choose Agility for newer products/markets. Products tend to go through a series of transformations in their life-cycle (deliberately numbered in the order the transitions occur):
Novelty (Cool! What can we do with this?)
Stability
Commodity
Utility (Boring! Let someone else do this.)
Novelty: This is for new, exciting ideas. Consider e-commerce: originally we had no idea what we could do with that. It seemed crazy to sell food or cars online, but books and electronic parts? Those seemed possible. And would people trust us with credit card numbers or their bank account numbers? People just didn't know, even though today the answers seem obvious. Everyone was rushing around trying to create these systems and no one was sure if the market was there or what it looked like. The dot-com collapse came about in part because this area grew so fast with so little understanding. A good indicator of this stage is when we're still saying ""that's really cool!"" (and frequently have detractors saying ""that's really stupid"").
Stability: This is when new ideas become stable products. As things settled down in e-commerce, we began to understand the market and started building our own, custom e-commerce systems (I did myself for one company) with a basic understanding of the needed features. A good indicator of this stage is when we shift from talking about what we can build to explaining how we can build it (remember all of those ""How to build a shopping cart?"" articles and books in the late 90s, early 00s?)
Commodity: The market has matured and the products have started to become interchangeable. Now, many companies offer e-commerce software you can buy or download as open source/free software. The good has moved beyond ""stability"" to be a bunch of interchangeable, competing goods which often are forced to compete on price instead of value (but see the note at the end of this response).
Utility: Now the product has been converted into a service you can buy. Now there are plenty of online services which allow you to upload images, add descriptions of your goods, set prices, and kick back and reap the profits (good luck!). For many people this is the most boring step in the product life cycle, but it's also the most exciting because huge changes are built on top of it (think of the myriad industries build on the utilities of cloud computing, or even electricity itself!)
When moving from Novelty to Utility, project management should move from Agile to Lean to Stable (PRINCE2, TQM, ISO9000, etc.). At this point, the reasons should be self-evident. With new markets we don't know where they're going to be in five years, and creating a five year plan (Big Design Up Front) would be about as successful as the Soviet five-year plans and fail for the same reasons: planning when we have the least information. With very mature products, optimizing for change and uncertainty which never arrives is, well, silly (this excludes the Black Swan events we can't plan for, such as owning a taxi company and Uber showing up).
So where is Google? Google largely built many of the markets they're in and today, some of them, such as online advertising, have gone from novelties to utilities. In fact, when Google recently contacted me about being a project manager in site reliability engineering, I had to explain to the recruiter that the project management they wanted didn't fit my Agile background: site reliability is the very definition of ""reliability and reproducibility."" Agile would be silly for many Google projects, but it's very appropriate (and used) for other projects in Google.

Recap: Agile is nothing more than focusing on reducing the cost of uncertainty and change. To understand if that's a worthwhile focus, you need to know both your product and the market. Internally a company will likely have many different departments and some should definitely use Agile (R&D is a great example) and some should definitely not (Accounting). As products/services mature, they should transition from Agile to Lean to more formal methodologies such as TQM, PRINCE2, ISO9000, and so on (interesting that there's no catch-all term for the latter).
If the whole novelty/stability/commodity/utility discussion was interesting to you, I highly recommend reading the following:
An introduction to Wardley (Value Chain) Mapping
Wardley uses some slightly different terminology, but his work is incredibly valuable in helping companies form strategy (and, incidentally, to understand when to be Agile).
Notes:
Commodities: When I discuss commodities, this step sometimes confuses people because there's an assumption that commodities are universally interchangeable, but that's not true. A good is a substitute for another good according to the needs of the individual consumer, not just the market. Coal is coal is coal. However, people point to the differences between Apache, IIS, Nginx, etc., as perfect examples of items that are not commodities. If you can't taste the difference between Coke, Pepsi, or RC Cola, they're perfect substitutes for you and must compete on price. Likewise, if I only need a Web server for hosting my resume/CV, I really don't care which Web server it is: they're interchangeable to me and thus they're commodities to me.
Product evolution: You can apply the above to many areas. Information products evolve faster than physical ones, but many physical products undergo this process. While electricity is often cited as an example, look at the evolution of cars. Originally they came in many shapes and sizes (novelty!), but basic features stabilized into products and many cars today seem virtually indistinguishable to many consumers (commodities). Today Uber, Lyft, and Google self-driving cars are converting the commodity into a utility and people are tremendously underestimating what a seismic shift in the market this is. How much money will households save if they don't need to buy a car or pay for its insurance? How many lives will be saved by fewer accidents? How many lives will be lost because organ donors largely come from car accidents? How will your life be improved by turning your garage into another room? How will job markets adjust when professional drivers become an anachronism?"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,John Smith,Software Architect,2018,79,"Because most methodologies are nonsense. I’ve been developing software for 18 years and worked on countless projects (large, small, traditional, experimental, mission critical, etc). Here is the best way to build software:
Pick a small cross-functional team consisting of real professionals (guys and gals who are really good and passionate about what they do)
Give them proper tools and free them up from other commitments
Make them sit together in one room with a whiteboard
Give them access to the business, clients, customers, users, etc (for both requirement gathering and demos)
Step away and let them prototype, demo, develop, refactor, etc
Iterate until the team reaches the objective"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Miles Fidelman,"Systems Architect, Entrepreneur, and Policy Wonk",2019,184,"Why do some developers at strong companies like Google consider Agile development to be nonsense?
IMHO, because, in practice, “agile” is code for sloppy thinking & lack of design. Code first, think later. It’s also great for giving managers metrics they can report against that sound good (e.g, “tickets closed”), while not having to show real results - like sales, or lawsuits avoided.
Ok, let’s start with the four principles from the Agile Manifesto. The mindset of a hacker, not an engineer. You wouldn’t even think of applying them to a construction project - buildings would be falling down all over the place (if you could get approval to start construction, without detailed plans to approve), and all involved would be spending most of their time in court.
Individuals and interactions over processes and tools: For any complex piece of software, one needs to be very disciplined about pinning down design details (e.g., interfaces), about configuration management, about testing, etc. All of those are process intensive activities. The work can sometimes be reduced by good tools (e.g., a good version control system, automated build/test).
Working software over comprehensive documentation: A rather poor dichotomy. What does “working software” mean, without documented specs? How does one install, use, interface to, or maintain software without comprehensive documentation? Personally, I’m a big proponent of “write the documentation first” - otherwise, you don’t know what you’re building, or buying.
Customer collaboration over contract negotiation: Again, a poor dichotomy. In a lot of cases, contract negotiation IS collaboration, and/or defines the framework for collaboration. If you’re in business, particularly if you’re building custom software, the absolute last thing you want to do is spend a lot of time coding, only to have a customer tell you “that’s not what I meant.” Collaborate over use cases, storyboards, test & acceptance criteria, transition plans – but be damn sure to get to agreement over what goes into a release, and how it’s going to be accepted, before starting to write code - otherwise you’re going to be out of business very, very, soon. (Might I add, that almost all companies try to insulate developers from end users. It’s kind of hard to actually get anything done, if you’re spending all your time responding to support calls, or “can you just change this on thing?”)
Responding to change over following a plan: Yes, things change. But by and large, this says “code first, think later.” That’s just sloppy. If you’re fighting a war, agility is critical (“no plan survives first contact with the enemy”), or if you’re playing basketball. But if you’re writing software, you’re a lot better advised to “plan the work, then work the plan” - and if things change, change the plan. (One might note that most of what pass for “agile methodologies” - such as scrum - are really planning processes, just ones with very short time horizons.)
By and large, “agile” is code for laziness in up-front design. Just fix the bugs & add features in future releases. Sometimes, that works - Microsoft has been very successful in shipping quickly, then fixing things later. It also works fairly well for periodic releases of mature software (fix some bugs, patch some security holes, add a few features). And, it’s absolutely necessary if you’re responding to a security attack, in the moment.
It doesn’t work as well if you’re building buildings, or mission-critical software (no, we can’t recall the spacecraft after it goes off course), or laying rail tracks from the coasts, that have to meet in the middle of the country. Or if you’re a large team, building 100s of module that all have to fit together - you’d better get the architecture, interfaces, and databases all pinned down well before writing a single line of code. Otherwise, you’re just going to have to do lots of re-work down the line, and god help you if you want to add new features, without having well defined hooks built in from the start.
And then there’s: Dilbert Comic Strip on 1993-05-04"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Russell Wark,I was a professional geek before it was cool.,2015,1.1K,"Jasmine said most of what I think. Good answer.
Companies like Google have seen through all the trendy bluster surrounding agile (especially the fetid abomination that is Scrum), they've taken the few bits of the process that work and dumped all the management fad cruft (of which there is rather a lot). They have realised that every developer is different, each developer has their own processes that they work best with, and that the focus should be on the end product, not how to get there.
I'm OK with using a Kanban board. I'm even OK with end user-centric tasks to a certain extent. That's more or less where it ends.
I am not OK with the stupid, asinine terminology. We're developers. Do we really need more rubbish terminology in our lives?
I am not OK with the short-termism of 'sprints' that inevitably end up with you having to refactor code time and time again when the next set of 'user stories' come in.
I am not OK with the lack of strategic thinking when it comes to program design and software architecture.
I am not OK with blatant micromanagement masquerading as 'the next big thing'.
I am not OK with 'story points' or 'planning poker'. These are estimates of effort, not time, and hence utterly useless.
I am not OK with daily standups. The Kanban board should tell everyone what they need to know, not this silly ritual lifted straight from Alcoholics Anonymous.
I am not OK with all the other meetings either. Waste of good development time. Write me a f**king email.
I am not OK with 'agile coaches' - the dev world's evangelical religious zealots peddling their ridiculous creed to companies on the promise of increased productivity, new jobs for increasingly irrelevant middle management (scrum masters and product owners) and the chance to say they do something trendy like 'agile', and then charge the company a fortune for the privilege.
But, most of all, I am not OK with the homogenisation of developers that takes place in Scrum environments. It's extremely hard to be creative and do any out-of-the-box thinking when you're being micromanaged. And there's a whole generation of young developers coming into the workplace and thinking this is how it's supposed to be done. WTF?"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Anonymous,5y,2019,67,"They don’t. Agile appeals to cowboy programmers who hate being told to do things properly. Microsoft loves Agile and calls any type of Best Practices “waterfall” because business owners love anything that cuts corners and makes money faster, so dismiss anything involving standards as “stupid”. Agile is the equivalent of crossing the road without looking both ways, first, because it saves some time.
NASA doesn’t use “Self-organising teams” to build rockets any more than a traffic cop says to motorists at a busy intersection “Sort it out amongst yourselves. It’s my job to manage Planning Poker meetings, not teams of engineers, many of them fresh out of college”.
Companies run by web tycoons love the idea of ditching traditional processes that have enabled people to build bridges and rockets safely and opting for anything-goes processes that have led to massive security breaches in just about every piece of software released by these web companies. It typifies the teenage mentality that everything should be done the way it would be done in a dorm-room by people who “don’t need no education” from “older folks” who have produced software safe enough to run passenger jets.
Google is no different. If Google+ had been built using safety-critical standards it would not have suffered a massive security breach. It wasn’t built like that. It was built to cowboy standards by people who do everything on whiteboards and don’t bother testing things thoroughly.
Quora suffered a massive security breach and we still see people saying “Agile is good. Everyone should use it”. It’s like listening to Climate Change Deniers who are determined to “be right” even when they are hip-deep in rising sea-levels, mainly because they make a lot of money out of fossil fuels and don’t really care how much damage their love affair with profits is causing."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Warren Wise,Works at GL Homes (2018–present),2015,115,"Because they only have experience in ""doing"" agile, rather than in ""being"" agile. Doing agile is cargo cult, while being agile is a conscientious and disciplined application of the scientific method toward software development. Developers are very technical, but I think most fancy themselves artists and craftsmen, not scientists. So much of what developers claim to do, whether at strong"" or ""weak"" companies amounts to developing their own specialized process that was learned through their personal, direct experience.
There is a lot of BS with respect to agile methods, but it's the same kind of BS you find with all shiny new things in software development, from object orientation to service oriented architecture to functional reactive programming to whatever Gartner Group bandwagon software vendors and consultants can jump on next.
The reality is that the so-called Agile methods are primarily the software development equivalent of statistical process control methods originating in the 1950s that were the approach Toyota used to become the leading car manufacturer for decades. It's only now that other automakers have caught up to them with methods of their own, but Toyota has long been an open book showing anyone who would visit their just in time approach to building cars, their intense focus on problem solving and continuous improvement, and their culture of empowering people closest to the actual work to define standard work processes.
If you study the history of the agile methods, you'll easily begin to see what agility is, how it's meant to be used, who's trying to pull the wool over your eyes, and who doesn't know what the hell their talking about (no matter how many years of ""experience"" they claim to have, good OR bad).
A truly agile method is not for an emergency (although agile methods do help minimize risk), but rather, is for product innovation. If used as intended, it can transform an entire organization. Salesforce has used Scrum with XP practices since at least 2007, and it enabled them to create a predictable release cycle that has resulted in more and more impressive features and products being delivered and making an impact in customer businesses on one of the most sophisticated PAAS platforms around. What they do each year is more remarkable than the previous year, so much so that they have been designated the most innovative company in the world the past two or three years by Forbes.
To be clear, Agile methods like Scrum and XP are not a silver bullet. Competent people, hard work, focus and discipline make for excellent software development. Agile methods provide proven tools for bringing any process under control so that its results are predictable, which means they can be systematically altered (i.e., improved). Agile is not magic. It's par for the course in manufacturing. Software development has its fair share of skeptics and snake oil salesmen. Do your homework if it's something you're contemplating; otherwise, you will screw yourself...and blame ""Agile""."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jeff Ronne,"OOP, Java, C++, C, noSQL, WebServices, BigData, automation,",2015,64,"Agile/ scrum promotes the false myth that process can replace product design and architecture.
The management fairytale is that great products can be reliably developed simply by obsessing over process.
Software projects are at risk of failure principally because of improper technical design with insufficient resourcing. Any process imperfections are secondary concerns.
It is impossible to constantly shift major requirements while maintaining schedule and quality.
Software design requires a carefully thought out solid architecture that meets a known set of requirements. Changing basic fundamental requirements late in the schedule always has adverse consequences. The agile process or any other process cannot prevent this.
Valuing process first and software architecture second is a mistake.
The agile type of mindset is similar to the one that made the incompetent Dilbert manager universally famous."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Terry Lambert,Former Sr. Software Engineer at Google (company) (2011–2012),2016,214,"To most people in management, “Agile” means “implementing Scrum”.
There are some key attributes of Scrum, but the major one is that it allows customers to change the specifications. To the customers, this generally means “without consequence”.
A professional engineer calls this alternately scope creep or feature creep.
Both of these are almost as evil as being told:
“the compiler is backordered”
“you’ll have to make do with this 32 bit machine to write the 64 bit code we need written”
“can’t you just use 16G machines to work on this problem that’s going to be deployed on 512G machines?”
“we can only afford one development board, and the guys in Taiwan need it; can’t you just talk them through debugging any problems that come up?”
etc.
In other words: pretty evil.
A good engineer goes in and maps the problem space. This is determined by the project scope, and engineering forward so that nothing you do in 1.0 precludes the features planned for the 2.0 and 3.0 releases.
The basic idea is that, like blowing up a balloon up in a box, you want the design to fill the entire space in which the problem exists.
Now imagine some idiot decides the box needs to be bigger: that’s scope creep; or imagine that some idiot decides that the box needs conic protrusions everywhere: that’s feature creep.
It’s antithetical to good design, because it’s antithetical to design, period.
There are a couple of places you can get away with this; one is on web front ends.
Why can you get away with this on web front ends? Because all the real important stuff is on the back end, and whatever stupid thing someone decides to do to the UI, it doesn’t matter, because the back end database, processing, information interconnects, service attachments, outside data vendors, etc., etc., is safe from it.
In some cases, it’s even an advantage in the web front end code, because it’s all throw-away code anyway: speed matters a lot more than good, and, as long as you don’t cause a security problem: go ahead and make the whole damn thing out of paper mache, spit, and baling wire. It doesn’t matter, because you are going to redo the whole thing next week anyway.
There are problems with other agile practices as well; some are actually good (I rather like pair programming).
But what it comes down to is this…
Really good engineers like to solve problems once. Exactly once. Once solved, they then move on to the next problem.
By the way: IBM Global Services has this down to an art form:
Send in an analyst to drag a customer specification out of a customer; this is what the customer wants
Build exactly what the customer wants, and charge them through the nose for it
When the customer discovers that what they wanted was not what they needed, go to step one
Milk this cow, until the cow itself disappears into a puddle of milk; take that milk, too
P.S.: Ideally, you’d give the customer what they need, up front, and quit futzing with the scope and features."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Gerry Claps,"The ""Pragmatic"" Agile + Lean Practitioner",2015,95,"For three major reasons:
There is an industry around monetizing 'agile' => Obviously not a good sign (it's especially an issue for Scrum).
There is a general misconception about what being 'agile' is => Some teams add in a daily standup, remove a bunch of documentation and call it a day. It's something that's not healthy for those teams.
There is a paradigm shift from co-located to distributed teams => The Scrum framework, sometimes synonymous with agile (refer to ""being agile"" misconceptions above), isn't working as well for those teams.

It's not that agile software development is bad. In fact, it's awesome! When done right...
The issue is that the main values and principles of the Manifesto for Agile Software Development can be easily misused and abused. They're high level values and principles after all.
Consequently, agile software development can get a bad rap with a bunch of engineers who have been successfully building products for years without being 'agile' (although those engineers are probably, ironically, more 'agile' than most agile software teams out there).
If you would like to dig in a bit further, give these articles a read:
Flaws in Scrum and Agile
Why SCRUM Backlogs lead to bad Product Decisions
The Joys and Benefits of Working as a Distributed Team

I hope that helps!"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Andrew McGregor,Former Site Reliability Engineer at Google (company) (2013–2019),2017,70,"Even if you don’t consider it nonsense, you might not choose to use it.
Agile practices can be extremely effective, but like any tool it has its uses and isn’t very helpful if your situation is not one that it is good for.
Google’s organisation is not constructed in a way that Agile, particularly Scrum, helps a lot, except in very particular teams. I’ve done Scrum for years in a previous job, and I cannot see how to apply it to SRE work at all. It just won’t help, and would be very distracting. Kanban, on the other hand, just works, and if you like you can just use it for your own work; it very likely will help your productivity.
Now, is Kanban Agile? If it is, we use that a lot. We even have excellent tool support for both Kanban and Scrum, even though maybe 5% of engineers use Scrum; the place is big enough that 5% is a lot of engineers."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jon Kern,"first public talk in 2000 ""S/W Engineering, an Oxymoron in Your Company?""",2017,35,"Probably a TL;DR...
When I hear of an individual opinion on ""agile"" by some developer(s) at Google. I wonder... Is Google somehow anointed as the Universe's gift to All That Is Great in software development know-how? And even if they were all top-notch awesome, I would need to know more to form my own opinion. What project were they trying agile on? What was their ""agile"" process like? Be inquisitive. (Ok, I suppose posing a Quora question is being inquisitive. Bravo. But, I mean, be inquisitive about the opinion being spouted when you hear it, on the spot.)
Frankly, Waterfall is a great methodology. RUP is great. As long as you do it properly and in the right context -- which, apparently, rarely happened, hence all of the negative opinions and experiences about those ""heavy-weight"" processes. Waterfall and RUP can be completely inane and disastrous, or tailored to be nimble and match the project at hand. Agile is no different. It is great. Or it can be done poorly and also be inane (or be deemed ""nonsense"").
News flash: there is no ""silver bullet"" for software development.
In my humble opinion, ""Agile"" is more of a state of mind than a prescriptive process. So it is foolish to bundle opinions and discussions around that singular term without any sense of context and knowing more details.
""We tried agile, it stank. Pure nonsense, I say, that agile method!""
-- A naive observer
Umm. Okay. That just is not enough detail to confirm or refute that statement.
Bottom line. In software development, you succeed first and foremost because of the people doing the project. A distant second is the process. And a distant third are the tools. Really smart and inquisitive people will likely form their own effective process, and often develop their own tools. Competent and open-minded people could be exposed to a new way of doing development by following some initial prescriptive steps found in agile writings and books (I love Ron Jeffries' book on The Nature of Software Development, FWIW). As they grow comfortable, and gain experience, tailor to suit. Sort of like following a cooking recipe at first, and then adjusting to meet your individual needs.
I would hope that an ""agile"" development process for the embedded software for a life-critical device is a very different sort of ""agile"" than what is practiced on a simple web app for registering agile unconference goers. There is no ""one size fits all"" agile process.
If you look at the simple tenets of the Agile Manifesto, I submit we ""nailed it.""
We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value:
Individuals and interactions over processes and tools
Working software over comprehensive documentation
Customer collaboration over contract negotiation
Responding to change over following a plan
By ""it"" I mean, I feel we got to the crux of human behavior in the realm of software development.
I submit that it is pretty hard to refute those bullets. Nay, it is impossible. They were true in the 90s when I was fighting against the waterfall processes. They were true in 2001 when we wrote them. They are still true today. They will be true in 2025.
If your Google engineer(s) think they are nonsense, well, everyone is entitled to their own opinion.
History
Way back in the annals of ancient software history, at the time of the writing of the Agile Manifesto...
Many of us were coming from backgrounds of countering the heavyweight, in vogue, processes of the day. We had embraced lighter-weight processes that seemed more adept at being a more cost-effective, flexible, solution to delivering software faster. Personally, I was mentored by Peter Coad, and the mantra was ""Frequent, tangible, working results."" I had also experienced doing heavyweight, DOD-sanctioned, MIL-STD 2167 inane processes. (Well, I actually created lightweight processes in the early to mid-90s to skirt around that insanity -- and save tax payers money!)
From that grounding, and our group's diverse background, the 4 bullet points in the Agile Manifesto adroitly captured the common features of successful, light-weight processes, yet left ""wiggle room"" by the mere phrasing of ""We value X over Y."" That is, we did not say X is always right, and Y is always wrong.
Since being a ""light-weight"" process evangelist sounded, well, ""98-pound weakling-esque,"" we sought a better term, hence ""Agile"" was born. (Coincidentally, I was working on Agile Fighter R&D, X-39, Cobra maneuver, and what not.)
Four measly bullets, a happenstance change of a term, and all this Agile Hullabaloo happened."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Todd Topolski,"I am a highly paid IT consultant, worldwide to large companies and governments",2015,35,"Speaking with 22 years experience in this exact industry, agile is mainly nonsense.
First the premise is incorrect, the cause of failed projects isnt a lack of transparency to developers or developers not communicating or developers not sitting together in a room, slapping junk together to see what sticks. The failure is always a lack of design, testing and planning everything correctly. Most important is how the actual business functions are determined.
Always it is a lack of true business context to determine the initial design and most important, to bring up an old concept, the technical debt business causes by demanding too much for too little and never following a schedule, which is too short. The result is, first design is dropped, then testing, followed by documentation.
Projects dont staff correctly, always shorting the beginning of the project of staff and then overloading it at the end in an effort to ""save"" the project.
It is this last part Agile theory is completely wrong. The developers forming a tiger team or similar at the end to get it done, appearing to be communicating together in room and it looks like well if they only did that at the beginning. Problem is that is not good design or development, that is slapping junk together which is my main issue with Agile.
It is in effect slapping junk together and hoping stuff sticks. The quality of this code is always junk. Then over time, it gets worse as more and more junk is trying to be integrated. Then stuff is redesigned at the end to get better, forcing a rework of the first few stories.
bad projects are always a business problem and design problem, followed by a lack of actual testing. Agile not only does not address any of this, it actually tries to be an excuse to not do it. It creates 30% more costs in extra technical debt and while you may get to the first few functions early, it extends the over all project time.
Nonsense like MVP come in as well, which is just an sham concept to try and convince users, the 3 wheeled car will drive, just doesnt have all the parts but you will get it. Only with agile, the 3 wheels there are all different sizes and the engine is in the trunk and the user has to ride on the roof, because the seats were considered not relevant.
One of the biggest unresolved issues in Agile is the lack of reality when it comes to foundational components. What Agile reality claims is if a user has a story, to put that flag pole and flag on a 30 story building, this is declared an easy 2 pt story. Only there is no building only a pile of construction materials, the building itself must be constructed and then the flagpole put on top. Only the Scrum coaches will scream, the construction of the building isn't ""business"" related so therefore is not relevant and should not be done.
Even if they built the building, there is no way to test all of the components because a fully integrated test of all components in Agile is considered irrelevant because magically, the single story Testing during a sprint is supposed to be enough.
The result becomes the developers just play along, they have their standups, point their stories and etc...but behind the scenes they are just getting stuff done.
All of the above though is 100 times worse when people start trying to mix in the waterfall, or the agile in name only projects.
Agile does get some things right. The focus on specific functions is good because developers do tend to try to build to perfection, instead of what is needed. It also does a good job with breaking work down, it is just far far too rigid when dealing with reality, such as full integration tests where it takes an entire sprint just to prep data,let alone test.
Still, I have done completely successful agile projects as much as waterfall. Bottom line is any project will fail if there is no design, no testing and no true business context to begin with."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Andy Mclaughlan,"BSC hons in Software Development, Glasgow Caledonian University (Graduated 2009)",2017,32,Because a lot of smaller companies say they use agile but what they really mean is that they just play it by ear and make it up as they go. With no proper planning or specifications. Basically a recipe for disaster.
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Kurt Guntheroth,"Software Engineer for 40 years, author of book Optimized C++",2017,70,"The problem with “Agile” is that it doesn’t mean any specific thing. Or rather, it means, like Humpty Dumpty said, “just what I choose it to mean.” Almost any development process, no matter how lame, can be described as agile.
My experience with Agile, is that particular organizations ignore key tenets of the Agile Manifesto, most frequently trusting the team, or reflecting and improving.
For the few of you who really care what I think about Agile, I covered it in a couple of blog posts; What I Like About Agile, and What I Hate About Agile."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Gurmeet Singh,"Webpreneur, Thinker",2015,31,"Because the damned agile development is a giant pain in the ass for developers. You will loose sleep, appetite, will hallucinate, go into depression..and will keep on sprinting.
Its only good for the clients who somehow want you to conceive a baby in 3 months no matter how many birth defects the monster might have."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Tim Boudreau,"11 years at Sun Microsystems on NetBeans, consultant, now at Oracle Labs.",2015,27,"What you want to create paralellism in development - to enable adding people to a project to actually get it done faster - is not that different from what you want to create parallelism in code: You want your actors to be able to run full-speed, and minimize points of coordination where they block on each other. Agile adds points of coordination, on the assumption that anybody working for any length of time might be doing the wrong thing - you add excessive coordination to solve the problem of people doing the wrong thing, whether or not people doing the wrong thing is a problem you actually have.
It's a bit like a religion - as in, when agile fails, the solution is always more agile - the equivalent of ""you didn't pray hard enough"" or ""It would have worked but you didn't sacrifice enough virgins"". In a discipline that is critically dependent on doing things that actually work, you're supposed to shut off your critical thinking when it comes to evaluating if the way you're trying to do things works.
There are some problems it really doesn't work for - for example, you can't agile your way around the hard problems of distributed computing - though I've seen people try. Sometimes you *have* to think a priori about what the thing you're building is actually going to demand of what you're deploying it on, and whether or not that makes sense - or you'll wind up with something that looks like it works but can't do the job. It turns problems that should be anticipated into what economists call ""externalities"" - yeah, you're doing 400 SQL queries for each HTTP request (I've really seen that), but look at our velocity!
I've seen it destroy the productivity of teams that have gelled and were quite productive, and I've seen ""agile"" consultants paid a fortune to replace all the ways productivity is measured and then claim a 700% improvement. Being the ""agile guru"" frequently winds up being a career path for mediocre managers - if you're speaking swahili, you can fool people into thinking you're effective. The transparency it offers management is addictive, and it comes at a terrible price.
If you're a senior developer, you avoid most of the problems agile claims to solve because it's common-sense to avoid them (e.g. big-bang integrations, long running projects where nothing works for a long time).
The two ""methodologies"" I've seen work in the real world for highly effective teams are:
- Hire smart people, give them a goal, don't dictate how they reach the goal, and then get the hell out of their way
- Keep team sizes to five people or less"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Sal Ferro,Engineering Manager at Google (company),2019,14,"Lots of great answers but I'll add my 2 cents!
After working in industry for many years, experienced folks typically move into Tech Lead or Management positions, and then try to deploy their knowledge through a bigger team. These best practices are things you *know* work well after years of experience, even if it's unconscious habit. If these folks sit and reflect about their careers, likely they'd codify several patterns that are like Agile, Test Driven Development, architectures, etc. I remember when I first saw a book on Agile and TDD, after working in industry for a while and thought 'A lot of this seems like common sense'
When you have especially a junior development team, these 'Best Practices' are a massive help. They get teams to mature very quickly with less experience.
But at places like Google, you typically have already-experienced engineers. We look to hire a lot of the best and brightest, many are former CTOs, VPs, senior developers, architects. A lot of them feel some principles of Agile and such are more 'common sense', they seem like training wheels / unnecessary process for an experienced team. Working iteratively - the real heart of Agile, is easy to do conceptually, without needing rigid guidelines. So I think it still happens in different forms - as are common sense things like code reuse, code testing, architectures and documentation, etc."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,John Penney,Owner at PPP Milton (2001–present),2019,14,"It’s so funny how the complaints about agile are all NOT about agile, but about some straw-man of a misconception that arises because someone doesn’t take the time to understand what agile means. To wit, quoting from another answer:
“They have realised that every developer is different, each developer has their own processes that they work best with, and that the focus should be on the end product, not how to get there.”
YES, THAT IS AGILE, yet for some reason it’s presented as an argument AGAINST it? I mean, it’s not a personal thing - I’ve heard that sort of argument from LOTS of people, no matter how off base it is.
What Agile is NOT, is a prescription for specific procedures for no reason. What Agile IS, is a set of suggestions for solving common, potential problems that arise in the disconnect between software requirements and the software development process, to be applied IN THE EVENT THEY ARE NEEDED. It’s kind of like the GoF patterns. Sort of “hey, you have a problem - here’s a solution we know works for solving that problem, try that out for a bit and see if it works for you”
For instance, imagine you’re working on a very large code base that takes a while to understand, and in which, for historical reasons there are several chunks of code that should be separate but are interdependent. There, you would bring in unit testing, and use some refactoring practices to slowly pull apart the threads of interdependency. Because of the amount of testing needed to make sure you didn’t break the spaghetti code while you’re untangling it, you need to go slowly at first and make a lot of architectural changes.
In order to keep track of these changes while the software is being used to run the business, you might write some user stories documenting how the legacy software is currently used. Those stories could then be used for a numbers of reasons, from solving live business problems to finding flawed logic in the architecture that has crept in through years of changes, to training new developers more quickly on the system as opposed to handing them an SCM account and saying “read through the code”.
All of those ideas are following AGILE PRINCIPLES. But none of it is PRESCRIBED anywhere - if the ideas work for you, USE them. If not, DON’T. But if you do use them, use them because they work - not because you want to impress some vice president and get your next promotion for having words on your resume.
Agile is a PIECEMEAL approach, with very few overarching prescriptions. Rather it is a TOOLBOX from which you choose the tools that make you faster.
I really wonder if people who can’t figure that out should be developing software at all."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Michael Grier,Former Software Engineer at Google (company) (2015–2017),2015,27,"Strangely, I find myself defending agile here, a little bit. In general it's a pox on the face of software engineering and acolytes to the true religion of agile are as frustrating to discuss the points with as any true believer of any religion.
But it does help with something that's a sore spot for the industry.
Humans are terrible estimators, especially of creative activities. Sure if you're in the process of building your twelfth house, you can lay out the chart of dependencies and availability of tradespeople and have a very realistic schedule.
Software isn't like that. The best estimates are from experienced people who can visualize work of a similar scope that's been done in the past and can extrapolate, top-down. But these high quality estimates are often significantly longer than most planners expected to hear about so they are challenged and then an effort begins to create a bottom-up schedule to justify. Inevitably, bottom-up schedules are compressed since each item is idealistically small so even experienced developers can say things like ""oh yeah I guess that it would only take two days to code up that interface"", while completely forgetting about the interruptions, restarts and just life stuff that happened that really make the project fit more into about a week. (That is, unless the crafty engineer explodes their deliverables to teensy bits and allocates say a half day to each tiny bit but this is (a) very noticable and (b) introduces both compression and expansion error making the estimate just complete baloney.)
Wow, two days vs. a week? That seems like a terrible estimation job? Well it's actually pretty realistic. It makes dev managers want to puke sometimes but realistically in terms of these ""concentrated days"" of work, it's typical to get, on average, 2-3 off the schedule each work week. (In practice, 2.5 is a decent utilization factor as long as you also have some generalized ""buffer time"".)
So what ""inevitably"" happens is that maybe the original schedule was accurate but when challenged to justify it, the bottom-up schedule is probably let's just say half as long. Now the manager feels that they've earned their pay and they did the right thing getting those slackers to do their work, on time.
Then execution is underway. Everyone's behind because you can't really take 5 days off a schedule per week. Quality gets marginalized. There's no ability to deal with changing requirements; with the schedule already compressed rediculously there's no possible way to analyze the downstream impact of a requirements/design change at this point!
This is the world of traditional waterfall scheduling with let's say 18-24 month delivery cadences. It's (part of) why NT5 became Windows 2000 and Vista was ... Vista. (What surprises me is when engineers are in the middle management positions and are forcing the schedule compression but I guess either they are changed by their new responsibilities or have unrealistic memories of ""getting it done by staying up all night hacking"". Or maybe 1st level managers like me were too intimidated by the questioning and gave in and performed the compression to please their management chain.)
Agile is the reaction to this plague. Can't schedule things out for 24 months? That's OK, don't schedule anything, just have a queue and see how far you get! It's funny because basically rather than addressing the ability to do schedule estimation, instead you declare that basically it's an unsolvable problem and you'll get what you get.
I have plenty of bad things to say about agile but foremost I agree with the comment that it has no place for senior people. Everyone's a fungible resource and your value is in reducing the backlog. Yay. Maybe daily standups are loved by The Kids nowadays but I personally like to be able to manage my own time to a reasonable schedule. (My rule of thumb when I was a lead/manager was checkins at least once a week, preferably 2-3/wk, and two weeks was the longest you would want to plan for someone to go dark to work on something complex or subtle. I personally believe that my teams were outstandingly agile but it's because we were realistic and didn't get distracted by shiny objects in our peripheral vision. But then I also didn't get the Big Huge Payout so maybe my point of view is fundamentally flawed or at least not validated.)
The Google process is not subject to these same kinds of extortions and so the schedule inaccuracy problems have not been nearly as major and so there's not been any real support for following (or forcing others to follow) a simplistic set of rules like Agile. (""What's the Google process?"" Well the issue is really more about what the role of product managers with business responsibilities w.r.t. setting review criteria for engineers so it's hard to say that there's one process but more a general emphasis on solid engineering over artificial schedule compression.)"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Glen Cuthbertson,Large scale web development since 1996,2016,20,"Agile[1] and it's associated philosophies are cool, but they are dated. Most modern companies have figured out how to be truly agile in a way which keep them efficient and competitive and that's what matters most at the end of the day.
A recent description I've heard: ""(agile methodology and scrum) it's like training wheels for companies / teams who are not there yet""
In my opinion the growth of Agile (and it's supporting industry) is really there for big companies who want to improve their antiquated and often slow business delivery process to be on par with modern times.
Agile practices mostly stems from principles pioneered by Japanese manufacturing (Kaizen[2]), and even that was inspired by American grocery stores. (Just in time (JIT[3]) stocking of shelves)
It's not unlike the early days of the web when ""putting our business online"" had a vast chasm of variance. In big industry there was this awful term used to describe big business going from ""brick and mortar"" to ""click and mortar"", meaning they were essentially putting some form of the business online while they continue to basically do things the same way.
Companies like Google, Facebook, Github don't really benefit from a conversion strategy, they are already at a velocity where implementing scrum would be overhead.
The trend I've noticed personally is that when teams get good at scrum, realize the real overhead involved in ""sprinting marathons"", and have developed a high velocity team delivering quality products, you don't really need a lot of agile formality to keep that going, in fact it can create it's own overhead which gets old pretty quick.
Having said that, Agile is a lot better than older forms of SDLC[4]; typically a waterfall (think gantt chart[5]) process in which the requirements, priority, and product viability is often obsolete by the time analysis is done and requirements are defined. This type of process, while it may be suitable for some industries, doesn't keep pace with rapidly evolving software development needs. Drinking the Agile cool-aid in this case can do wonders for the culture to ditch old ideas for new ones, and there is good, mature, formalized training and roles you can adopt without endless debating of meaning and purpose before you get started.
Footnotes
[1] Agile software development
[2] What is Kaizen | Definition of KAIZEN | Kaizen Meaning
[3] Just-in-time manufacturing
[4] Systems development life cycle
[5] Gantt chart"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Peter Ho,Former Software Engineer at Google (company),2015,22,"Because any named development methodology is bullshit. A company ought to have a process tailored to its cultural assets and liabilities. All ""strong"" companies know this."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Sachin More,Principle Consultant at Atos (2010–present),2019,8,"There is already one good old post on this topic by David Jeske , but I am adding few more additional points on this topic.Below is the post link.
David Jeske's answer to Why do some developers at strong companies like Google consider Agile development to be nonsense?
I partially in agreement with some of the points here. I work on software with complex internal structure that is not really deployable in increments. I think that adapting scrum/agile to the kind of work you do is critical. If people get too bogged down in dogma it just leads to frustration.
Agile is just an interface, there are many implementations of it. Just do what works for you.I once worked at a small company where we both made software and implemented it for our customers. We didn't have agile, we just fooled around with a project until it was sort of done and changed the software as was needed by whatever the project needed to continue.
Then we got agile and the first thing we did was drop our project manager, because such a role does not exist in agile. We needed a product owner! And we began to work on projects in sprints. We had limited capacity and too many projects which lead to every sprint just having 3 or 4 projects because focus and lots of projects on hold. Needless to say, customers were not happy and they jostled for sprint priority by threatening to tear up contracts. And we realized that our software was old and broken and rather than use our own people who know every inch of our domain we hired an external company who worked in a silo and just made the same mistakes we did, only for a much higher pricetag.
In the end, we had 3 project managers again, a highly unmotivated in house software team, a new unfinished and unusable product, angry customers, investors who pulled the plug and a company that went belly up. It still fascinates me to this day how we could have laughed all the way to the bank and made heaps of cash if management wasn't so ignorant.
Sorry for this rant, but I just wanted to share my horror story of agile gone wrong.
Deployability in parts is an engineering problem. Even most complex systems can be designed to be deployable incrementally. But it often requires deep changes in architecture.
Well, here's one (of possibly many) reasons to not like ""agile"".
Whatever sort of ""agile"" you preach, it usually says that ""stakeholder"" should be involved early on, and their opinion should be heard.Well, suppose now you are developing a B2B product, where the second B is also the people who sponsor you to develop it, then your ""stakeholders"" are the people who have not just a vested interest in your product, they also have some wishes that might be ultimately harmful to the product.
One such wish could be to plainly reduce the cost of the product, leading to the loss of quality. Another such wish could be to want to roll out the product faster, so that the investment can be capitalized on faster. Yet another such wish could be to steer the business model of the product towards the developer being a contractor, a service provider who can be replaced with another one as soon as there is any competition. I'll focus on the last one, since that something I have unfortunate experience with.
Few Points i am completely in disagreement with David.
“Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.”
“Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.”
Agile manifesto explicitly say to deploy frequently.
""Our system is not incrementally deployable because it wasn't designed to be incrementally deployable.""
Nothing in the Agile Scrum manifesto does it say you have to deploy to production every sprint. The definition of Done is defined by the scrum team. If they decide Done means a push to prod, great. If it doesn't, great too."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,John del Rey,i will share with you all my knowledge also how i made it,2023,1,"Unmasking the Mysterious World of Agile Development at Google: Is it a Game-Changer or Just a Geeky Fad?
Picture this: Behind the scenes at Google, where technological wizards brew innovation like a secret potion, there's a whisper about Agile development. Is it the elixir of productivity, or is it just a bunch of tech mumbo-jumbo? Today, we peel back the curtain on this tech-centric tango, revealing why some developers at the tech giant can't decide if Agile is the magic wand they've been waiting for or just another quirky experiment. Buckle up, dear reader, as we journey through the hilarious, the bizarre, and the downright surprising world of Agile at Google.
1. Misadventures in Agile Land: Ever heard of the saying, ""You had one job""? Well, sometimes Agile seems like it has one job: to make things flexible and efficient. But in the wrong hands, it can turn into a tangled web of confusion. It's like trying to teach a cat quantum physics - it's not the cat's fault, but it won't end well.
2. The Resistance Brigade: Developers can be like hobbits; they don't always embrace change with open arms. If you've been using your trusty old sword (read: Waterfall methodology) for years, Frodo-ing your way to success, it's tough to switch to Agile, which feels more like a game of Twister. Right foot on ""sprint,"" left hand on ""daily stand-up."" Awkward.
3. Bureaucracy Blues: Agile is meant to be light and flexible, like a yoga instructor who knows all the poses. But sometimes, it's like your manager is channeling their inner Gandalf, saying, ""You shall not pass without filling out this form!"" If Agile becomes more about paperwork than productivity, it's a bit of a buzzkill.
4. Team Dynamics Drama: Agile thrives on teamwork and communication, but what if your team resembles the cast of a reality TV show? If Sally hates Bob, and Bob thinks Jim's ideas are bonkers, well, Agile won't be the magic potion that makes them besties. It might be more like a recipe for disaster.
5. Big Projects, Big Headaches: Agile is like a compact car, great for zipping around town, but not the best for hauling a grand piano. Some developers think it's too tiny for massive, complex projects. Picture trying to fit an elephant in a Mini Cooper. It might be a bit of a tight squeeze.
6. It's Just Not My Type: It's like dating - you might be into people who love pizza, and Agile is all about sushi. Personal preferences matter. Some developers just prefer a different flavor of development methodology. No judgment; you do you.
In Conclusion: The Agile Riddle at Google
As we conclude our adventure through the Agile landscape at Google, we've uncovered the mysteries and myths that shroud this development methodology. It's a lot like trying to solve a riddle: Agile can be both the answer and the enigma, depending on the context and perspective.
Some view Agile as a game-changing innovation that helps Google's tech wizards thrive in the ever-evolving digital realm. Others, however, see it as a quirky puzzle that doesn't always fit neatly into their world of code and creativity.
In the end, whether Agile is nonsense or the secret sauce to success remains a topic of debate, and perhaps it's meant to be so. After all, in the dynamic world of technology, change is the only constant, and different strokes work for different folks.
So, dear reader, as you step back into your own tech journey, remember that every coder's path is unique, and every methodology has its place. Whether you embrace Agile, dance with Waterfall, or forge a new path, keep innovating, keep coding, and keep the tech magic alive. The world of Google and Agile may be puzzling, but one thing is certain – the adventure is far from over."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,W.A. Baker,Professional 'Splainer Guy,2023,1,"Oh man, you’ll never get a straight answer about this from an engineer. The truth is, Agile was developed separately from industry waterfall scheduling, with all sorts of starry-eyed idealism with regard to social engineering of the workplace. Kind of like object-oriented coding, in a way. “Agile” was gonna make our white’s whiter, etc.
Whereupon techbiz, as it does so, so often…killed Agile in its crib. SV engineering managers used it as an excuse to lay off all their QA engineers and overseas all their support work. Then pocketed the savings. You remember the scene in the LOTR movies where Saruman explains that Orcs were created by torturing and mutilating Elves? Yeah, it was kinda like that with Agile. Introducing smallpox would have been a better idea.
More than a few of us were not fooled. Not enough to ward off yet another SV “new wave” boondoggle. You wanna know why your tech products cost so much? You’re paying for all the sunk capital investment in a lot of dumb product ideas that tanked."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Anonymous,4y,2020,5,"Agile is one of the terrible move by management
In fact hardly 2% of software knows what is agile
Agile focus on quantity so every project and work is broken in to pieces of task and stories
And no one cares the outcome
Applying agile into a hospital . It concentrates only on how many cases you attend and complete . No one worries about how many patients have been cured or even given a first level remedy . And the doctor who attends the maximum patients in 2 weeks will be appreciated.
And since you have only 2 weeks to meet the deadline . You can't imagine something called as helo and professional opinion. So when the patient's been transfered from one department to another there is hardly time to discuss why he's getting transferred and whats his underlying problem. They see the x-rays and mtr report and take a dice and roll and start a treatment based on the dice result :) and always declare the case is either discharged or dead or even in some worst cases forced to commit suicide .
This is exactly how agile software process works.
And it will die when software companies die miserably one day"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Ellie Rice,Account Manager,2019,6,"Well, actually if you Googled it, you would discover that Google DOES use Agile. So I have no idea what you’re all, people, bragging about.
Google is large. It has many teams working on different parts of its products. Some develop Google Maps, some are responsible for super-duper doodles on the front page… you got the idea.
Since the company’s policy is highly against any imposition from above, mainly the teams themselves choose whether they want to use Scrum, Kanban or whatever else. The employees can combine these Agile frameworks or use none, as soon as they are happy and show outstanding results.
In general, as some of the answerers has already pointed out, the values of Agile are very close to Google’s inner spirit:
innovation over sticking to outdated documentation;
people-friendly development process and user-friendly products;
technical excellence and so on.
But let’s pretend I didn’t see that. So why other large companies don't like Agile?
When not to use Agile
I want to stay in the ambient of software development. This methodology is also used in other fields like Human Resources, medicine and whatever. Honestly, I know nothing about that and how on Earth people manage to build Agile banks and nightclubs.
There are cases where Agile is indispensable. I don’t understand those people who say so much shit about it like it’s the completely wrong approach regardless of the problem. That’s not true and don’t try to mislead others with your pseudo-logic.
However, in some situation, Agile is truly not the best choice. Not because it’s erroneous in itself - it just depends on the type of the project!
Large projects
Imagine making Google work was one great project. And they would try to organise the whole company as one team. I wouldn’t be surprised if the company didn’t live a day.
It’s true for all large projects. Agile frameworks actually dictate you how to organise your working process. They all suppose you work in short iterations. And the work should be finished before the next rather small period of time.
It works fine when you aren’t sure where you want to go. Anyway, in a large project, this adds unnecessary complications and promotes ill-thought architecture of the future software.
Not full-stack companies
Imagine you run a company that specialises just in one narrow field of programming.
It doesn’t make sense in the company where you need to outsource 50% of the task to external staff.
Unstable IT agency with the staff leakage
According to Agile, the team should be self-organised. Everybody is aware of what everybody else is doing and bears great part of responsibility. If you have to work for yourself and for a couple of guys, who left the room, you are demotivated. And with the newcomers, your pressure is even harder.
Also, the less experienced the person is, the more he tends to overestimate his knowledge and quality of work. This is very serious when it comes to the project assessment, and can lead to total chaos.
Distant workers
Even though the modern technologies let us be in touch with each other 24/7, Skype calls and messengers are still not the same as real life presence. Surely, you’ve heard stories about distant designers, developers or whoever that were unreachable in the crucial moment or disappeared in the middle of the project.
All in all, I think Agile is great in many cases. It demands experience and high-motivation from the team, so it’s definitely a plus if the vendor has a possibility to work by Agile. Here I found a case for your that shows: sometimes Agile can literally save you from a total failure. Feel free to check it out.
But it’s even better when the company can switch between different approaches and the team can choose the best option for themselves."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Liz Laurents,Author has 2K answers and 8.1M answer views,2015,9,"Because good programmers just use the approaches embodied in ""agile"" while crappy programmers talk about using ""agile"" as though it will make their work better, ipso facto ... it won't; instead it will probably render them incapable of remembering what they're supposed to be working on."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Onimisi Onipe,I'm a FullStack Developer...get over it,2015,11,"No organization does Agile... they are only using the term to intimidate themselves. In as much as development is science... it is more of art and craft.. you don't and can't manage artists.. this is the same with developers of all kinds. And any attempt at managing developers leads to low quality products. The problem is most of these Agile nonsense are prominent among those in Java and .Net Enterprise world or whatever. And trust me, those developers or those business developers don't in any way encourage or even motivate upcoming developers. The corporate world or the corporate world we created is full of its shit, maybe we should learn to define and understand creativity, we should learn to avoid rigid and stupid rules and let flexibility take the lead instead of relying on some manager's stupid version of Agile.
The best of the best developers are not the ones that sit down 15hrs a day to write codes. Talented developers don't like your Agile, they don't like your precious Corporate meeting and you are going to kill their talent if you keep insisting on your Agile.
Personally, I feel this kind of setting is common to organizations where the decisions makers(Managers) are not good developers or were not good developers."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,David Chidakel,Diverse engineering background.,2015,10,"Google has clearly used Agile in software development - to what extent, it is difficult to say. If some of its project leaders aren't convinced, it shows that Google hires smart, independent thinkers who aren't afraid to challenge orthodoxy .
That's the way it should be."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Chip Frank,Works at Computer Programming (1998–present),2015,9,"""Agile"" is a modern business buzzword. It's more of a resume & sales-pitch, or ""I'm an expert, hire me for my services to make you agile,"" type of term.
Agile, as intended by the founders, does not make sense in it's modern business-oriented implementation and interpretation, such as the business-oriented buzzword it has become.
I've gone-on about this before in past answers, but, for example, I'll put the first ""Agile"" point first and foremost again:
""Individuals and interactions over processes and tools""

Question: How do most businesses implement Agile?
Answer: With a process or tool.
That's not negative or cynical, that's a raw, bottom-line FACT.
Pivotal, RallyDev, Atalassan, etc... pick your ""Agile"" consultant, preference & implementation. Go to a conference or workshop and come back to work and start singing Cranberries songs: ""Everyone else is doing it, so why don't we.""
Even Microsoft's new VisualStudio namespace does the same as everyone else.
Factually & Pragmatically speaking:
You need this. Businesses need some reasonable way to keep priorities in order. It is not ""Agile.""
""Agile,"" by dictionary definition, is the ability to adapt. Set processes, tools, policies, procedures, and conformance to any other measure of crap to ensure any degree of compliance with staying or being ""Agile,"" is, by definition, NOT AGILE.
""Agile,"" as defined by the modern business world, on the heels of the Agile Manifesto founders, is extremely inappropriate and inaccurate.
Lastly, ""Agile,"" is a frame of mind, and, not everyone embodies it. The bureaucratic monkey / junkie mindset (protective of his/her job though policy, including adaptataion to that tool or process to implement ""Agile"") DOES NOT embody truly being ""Agile.""
It has become a corrupted term. Plain & simple.
In addition, I'd like to note that I e-mailed Martin Fowler a while back. I never received a response. BUT, that e-mail was specifically about how individuals could sign the Software Craftsmanship Manifesto.
Guess what? The Agile Manifesto website has since allowed other individuals, not just it's founders', to become signatories.
Go figure. It's become a named industry. Because the original names behind it benefit from it... they'll do what they can to protect their interests, excluding certification of an organization to actually be ""agile"" and adapt to changing business needs. (But, I'm almost 100% sure that they'll eventually implement some sort of ""certification"" path for software services you need to pay for as somehow truly, and ironically being ""agile."")
Other factors:
""Working software over comprehensive documentation.""

As the question states, why are some ""Google"" employees against ""Agile,"" maybe because if they don't provide good quality, comprehensive documentation about Google's services, then the software that developers produce to leverage Google's services ends-up NOT being ""working software.
Documentation about Google's software & services becomes KEY in a service-oriented-economy. Else, developer's can't produce ""working software"" for their customers, leveraging Google's services.
And, if you're not agile enough to adapt to changing business needs, AND provide adequate documentation, it all falls on it's face.
Which then either fulfills, or does not fulfill:
""Responding to change over following a plan.""

This stuff is all very basic (for the apt & attentive mind with some degree of experience in such worlds).
But, again, the first argument: How do you force your people to ""conform"" to being ""Agile"" other than some process or tool?"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Walt Karas,Was a programmer before Windows was a gleam in Bill Gates' eye.,2015,9,"In my opinion, all development methodologies are like highly dogmatic religions. They are all irrefutable. They are too inflexible to follow completely. These inevitable ""sins"" can then be blamed for any and all problems with the project outcomes.
A software system can easily be as complex as the plot of ""Oliver Twist"" or ""A Tail of Two Cities"". Yet, somehow, no one ever asks ""why didn't Dickens get together with 9 other authors and write 10 times as many novels!"" Or, suggests that all you have to do is follow a certain procedure to produce novels as good as those of Dickens.
No methodology can reduce the amount of creative problem solving needed in SW development. The worst problems in SW systems come from developers not making an effort to anticipate problems. Developers need to understand what the system is supposed to do. They need to decompose the system into one-developer-sized pieces, and be clear on how their piece fits into the whole. There are lots of tools (like UML) that can be useful. I'm not sure there are any that are useful in all cases. The fact that the developers doing the work need to be pressured to use a tool is a very good sign it's not useful in their project.
I'm a big big believer in scripted testing that is run frequently for regression. Some say it makes sense to compromise that goal, when the end user wants it fast even if it's somewhat buggy. I'm not convinced, as one is always tempted by excuses for laziness. But I'm not sure this isn't true in some cases."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Ulrich Staudinger,Upvote,2015,8,"It's simple.
Agile Development is a methodology. Methodologies help poor managers and poor organizers become half-good managers and organizers - so that things can't go wrong fully.
Great managers understand that your people are your most important resources. And you want your resource to excel with whatever approach is needed, not to drown in a rigid framework."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Andrew Shebanow,Curmudgeon,2015,9,"jasmine's answer is very thorough, and Peter Ho's answer puts it all much more succintly. I'll add this rule of thumb: if you are spelling the name of your methodology with a capital letter (e.g. ""Agile""), then the bullshit meter is off the charts before you even start talking."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Trent Hamilton,Slinging Code since 1987,2017,5,"See, here’s the simple answer.
If some “consultant” is being paid to sell it to management purely for accountability - it’s probably bullshit.
And it is.
I’ve worked in environments that preached Agile and SCRUM to the end of the sky and ones that couldn’t possibly care less about it.
Guess which ones were the most productive and delivered the most results?
Spoiler alert - not the Agile ones.
I still see no use in it other than to give bogus numbers to someone looking for accountability and to be a micro-managing asshole.
But that’s just, like, my opinion, man."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Michael Bolton,Consulting Software Tester at Developsense,2015,6,"I think it might be helpful for those saying ""the reality"" to modify that to ""my reality"", and then ask these two questions: 1) Am I really working in an Agile environment? 2) If I were, would I still think it was nonsense?
For example, Jasmine says ""My customer right now is another business unit. I have never met them and I have no idea what they do. This is the reality in most companies. We don't even know the customer well enough to ""satisfy"" them, and certainly not well enough to make it job one."" Certainly that's her current reality. But is the organization following the principles of Agile development? If it were doing so, would she still think Agile is bullshit? And since an important goal of developing software is providing value to people, is her reality (whether named Agile, Fragile, Rapid, Waterfall, Windfall, Moneyball, or Somersault) a desirable situation?
---Michael B."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Tim Scott,Programmer and Lifelong Learner,2015,12,"I don't have firsthand knowledge of the practices of Google or the other ""strong"" companies the questioner might be referring to. However I challenge the premise of the question. Is it the case that these companies believe the following?
That coding should go on for months before any non-developer might lay hands on any form of working product?
That business requirements must be completely and finally developed before the first coder is introduced to the process?
That detailed design is a contract and, once executed, any deviation is an exception remedied only by a painful bureaucratic amendment (""change request"") process?
That direct communication between developers and product people or actual users is discouraged or even prohibited? In the unlikely case a clarification on final design is needed, that's the job of a specialist.
That periodically reporting ""percent complete"" of months-long bars on a Gantt chart is the best possible way to understand progress and forecast overall project completion.
That complete means complete. Upon completion of an application, the ""new development"" team is disbanded and different maintenance programmers are assigned.
That only people who wrote their last line of code years ago have the ""experience"" needed to choose tools, frameworks, and practices and to layout the overall technical architecture of new applications.
That the best and only feedback mechanism for the individual is the annual performance review and no formal introspection is required for the team and it's methods.
That automated testing is impractical and a waste of time.
This may sound to you like a dystopian fantasy. But it was the prevailing wisdom of how to correctly develop software prior to the Agile Manifesto. I know; I lived it. Unless you're following the above points, you're not shunning agile. You're just shunning some of the worst cargo cult snake, oil perversions and excesses.
This is all to say, these admired companies almost certainly are practicing agile whether they say so or not. Paraphrasing Milton Friedman (in what for him must have a been a devastating admission), We are all Agile now.
These companies are simply clever enough to understand there's no PR benefit to go around trumpeting ""We're agile."" They understand that...
Every great cause begins as a movement, becomes a business, and eventually degenerates into a racket.
-- Eric Hoffer

...and understandably have no desire to be associated with something that's increasingly perceived as a racket."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Randy Terbush,"Former CTO at Lifeguard Health Networks, Inc. (2015–2017)",2015,8,"Agile was an attempt to codify what was happening in the open source development environments in a way that could be packaged and implemented in commercial environments. As some responses to the question have suggested, an ""Agile"" development process CAN work for certain specific circumstances. Here are a few questions that you should consider before applying an ""Agile"" development process to your project. If you answer ""Yes"" to more than one of these questions, you should seriously consider another approach.
1. Do your customers consider your software to be mission critical to their business?
If your customers cannot tolerate a few bugs or incomplete features in your product or service, then you must recognize that you will lose customers as a result of adopting an Agile processes to deliver that product.

Agile, by its definition, means that the very short release cycle will contain bugs and will likely include features that are incomplete or at least have not had any real customer feedback to establish a complete set of user stories (requirements).

2. Is your development team for this product more than 20 people?
The number ""20"" is somewhat arbitrary. The point being made here is that the team must be relatively small in order to remain ""Agile"".

3. Does this product have integration dependencies on other products not following an Agile development methodology?
Agile teams will struggle to work with other application teams not working at the same pace. Even individual Agile product teams will more than likely be on their own schedules, so expect that there will be misses between the teams. The good news is that the development cycles are short enough that you might resolve the issue before anyone notices.

4. Are any of your functional teams not co-located?
""functional teams"" are defined as your development team, test team, product management team, operations team, etc.
It would be bending the rules a bit to not have everyone in the same building. That said, it can work if at least the functional teams are in the same building and your interactions between the functional teams are effective remote working relationships.
This question will knock out most large organizations since some component of a development team is often ""off-shored"" or the product serves multiple divisions of the business, each with their own product management duties for that customer segment.

5. Are any of your functional teams not using the Agile process?
It is nearly imperative that every functional team in the chain of the Software Development Life Cycle be using the same development process. This will become painfully obvious if one segment in that chain of responsibility starts using Agile while others do not. Therefore, at least from a standalone product standpoint, a commitment to Agile is an all or nothing endeavor.

If any of this resonates, rest assured that you are not alone. Many large organizations are realizing that being Agile means adopting many other changes to their business that are not necessarily positive change."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,David Rind,Had a pastrami sandwich yesterday and was asked about cheese,2019,3,"Question: “Why do some developers at strong companies like Google consider Agile development to be nonsense?”
I can’t speak to specific companies, but my sense is that what I viewed as the good ideas in Agile development became complete crap in the implementation using “Scrum Masters” and people certified in Agile.
I’ve both developed systems and been a consumer of such development, incidental to other work I’ve done over the years. Some of these have been very large projects that took years of effort.
In general, the interaction between users and developers does not work. When a non-programmer tries to describe what they’d like software to do, it tends to go really badly. Because of issues of lack of knowledge on each side and often completely different personalities and goals, a product ends up being created that does not come close to meeting the desires of the person who wanted the software.
Agile, and related views of the world, make the reasonable point that we can’t expect most users to know and communicate exactly what they want and so less time should be spent on initial specification and more time on iterative design, particularly on designing the user interactions with the system. When we try to specify systems up front, including the user interaction, and then the user doesn’t get to see the interactions until the entire system is built, things pretty much never go well.
However, whatever good there might be in the view of iteration, flexibility, and initial work on user interactions, it has been implemented by people who are the same rigid managers who previously used a waterfall process to tell users, “You can’t complain. Don’t you remember three years ago when we worked on this spec? The system checks every box on that spec and we’ve spent three years building it. If you don’t like it you screwed up back then.” Sigh."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Torgeir Helgevold,Software Engineer,2015,7,"I personally prefer agile projects, but I find that certain agile practitioners can get a bit carried away sometimes. Generally my view is that any methodology you follow as a team will work out as long as you stick to the plan and evolve the process as needed.
No process is prefect, but I find that agile people sometimes put too much stock into metrics like story points and hourly estimates. Incorporating granular data points like hours and points almost suggests that there is some sort of scientific accuracy around the process. People/management can easily be fooled into believing that these metrics are safe projection points and guarantee a predictable release date. My view is that these numbers should be taken with a grain of salt as the accuracy of estimates fluctuates greatly. However, it also appears that over time the errors in estimates average themselves out and arrive at a pseudo reliable metric for progress.
There is also a certain level of exaggeration when agile people compare themselves to other methodologies. This is especially true for comparisons with waterfall projects. Instead of pointing out that there are degrees of waterfall and agile adaptation, some people often compare agile to extreme versions of waterfall when talking about why agile is so much better. In reality many projects run as hybrid solutions heavily influenced by company culture.
I think the real power in agile is not in the estimation process, but rather in its incremental development cycles. Developing a feature incrementally encourages a feedback loop, that over time, may improve the quality of the product dramatically."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,James Simpson,CTO | Sydney Australia | www.analyseIT247.com,2016,5,"This is one of the better threads touching on Agile that I've read here for many months. In particular the answers from Curtis Poe, Russell Wark and Jon Kern capture almost perfectly the sentiment and experiences of the developer community I know.
I can offer 4 points to the question: “why do some developers consider agile to be nonsense?”
When Agile is discussed as the only way to develop software, there will be scepticism because history has shown there are many ways to develop software successfully. Each has a differing set of advantages and disadvantages. You choose the method that suits your conditions. When people say Agile is the ‘only way’ (yes, it happens), other people will think this is nonsense.
At heart Agile is an approach based a small number of common sense ideas about how people work together to build software. From these ideas, an entire industry, and in some places almost a quasi-religion, has been created. When simple ideas are co-opted into what sounds like a fusion of brand and dogma, some people will call this nonsense.
What Agile is particularly good at is helping teams build software in environments where there is significant uncertainty and change. It is not as strong at helping teams (and the businesses that fund them) understand what the likely total costs will be, or the likely time-frames. It is not as strong at developing large scale highly of reliable software for life and mission critical systems. People who develop software in environments that need to worry about these issues, and who are told “Agile is the answer”, will likely say this is nonsense because it is the not the best tool for the job.
Finally, there is a purely emotive reaction that takes place when you try to push something onto people. The industry that has developed around the Agile brand is very good at evangelism. However this strong evangelism also repels some people. The ICT industry is full of contrarian personalities, and when a something is promoted too strongly, they become sceptics. Some of these people will call Agile nonsense for no other reason than to push back against what they feel is a overly energetic fan base."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,J. B. Rainsberger,I began delivering software features professionally in 1997 after having written software as a hobby since the early 1990s.,2015,10,"Probably because they've never seen Agile, but rather, some person's well-meaning-but-point-missing interpretation of Agile as yet another defined process. Not necessarily, but probably.
There are people who genuinely don't value Cash In My Pocket Sooner, but instead, value other things. They probably won't value Agile. People who have seen Agile, thought about it, understand it, and still reject it--I imagine them to be rare indeed."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Marco Fuxa,Former Investor (1997–2016),2015,12,"I think all the answers, while sincere and well argued are entirely missing the point of agile methodologies.
Lets answer the question: Why does Google not employ agile methodologies? Because they got so much money to burn that they can afford to spend all the time they want writing the specification. Then they can pour a gazillion bucks into the execution. And if the business proposition flops, ""oh well... it was a learning experience."" If you are one of those corporations with 50b in bank gathering 2% interest, you can afford to take 1b losses, ""since its not touching the principal"".
For those without the ability to blow a b, the process is entirely different.
The only successful metric is buying customers. But you don't know what the customers want, because they don't know what they want. You ask them what they want, and they tell you abc. Then you deliver abc, and they start huffing and puffing. Then company B comes along, and they say ""don't care what you want, you don't know what you want, this is what works, its XYZ and its within your allocated budget, so suck it up and fax us the signed PO, before we fire you as a customer"". And then XYZ becomes the breakout company of the year.
So agile methodologies allows you to put ""working, sloppy, disgracefully executed product"" in front of paying customers. Then you can ask what kind of value add does it brings the customer. And from there you can make a rational case, that if the software brings the customer 5X his employee's salary in productivity, he should pay you somewhere between 1 and 5 for it. And once you have figured out that only Fortune 100 Cos, will buy the software, then you can take your total development costs, your ongoing servicing costs, your sales costs etc, and divide that by 100. That is the number you need to rationalize. If your total costs are 2X what the the customer can rationally pay for, then you need to abandon the product, while you are three months in. NOT when you are a billion dollars in.
So the point of quick ugly software, I mean agile development, is to make sure there is a market for the product before you pour serious resources into it.
Now lets state the obvious: The yahoos and the googles of this world do not produce innovation. They are not structures designed for that purpose. And the bean counters often get tired of billion dollar sink holes in their balance sheets. They know they are a one trick cash cow. They are in the milk business, do that well.
Innovation occurs in the scrappy messy world of startups, where vulture money, I mean professional risk managers, chase the pops that are getting traction in the market place, and leverage that success with the tools they need to scale. Then the big buck monopoly rent companies can make rational opportunity cost/time to market/execution risk calculations and pay the innovators for their sloppy no good for nothing impossible to scale technologies that customers are buying.
Because agile development is not a specification, followed by brilliant execution, but rather, about the technical feedback loop between business innovators, and potential rational customers.
Most of the answers here revolve around brilliant technical people getting upset at the fact that once they bust their ass delivering what was asked of them, some pip-squeak $200 suit tells them the product is shit and needs to be entirely re-written. Because that is what his customers are telling him, now that the product is built. Because that is the process.
Last point:
Engineers that take pride in their work, will take pride in their tools. Take a look at an engineer's bench, and you can tell the kind of work they do. Take a factory tour, and you can tell what kind of product the factory puts out. You can look at an assembly line and with confidence say ""2% RMA rate, right out of the box...""
By the same token I have seen brilliant engineers take a AAA cell, and take a $3000 Fluke Multimeter to it before deciding what to do with it. Actually a $9 Radio Shack meter would do. So would a pass/fail light bulb. Or just putting new batteries in the damn gizmo and seeing if it fires up.
The competent engineer that takes pride in his work will always demand the Fluke Multimeter, and quickly glance at the NIST Calibration sticker to check the date. That's in his nature.
Technical sales revolves around that issue, most of the time: ""I want a Fluke"". ""No, here is a twenty pack of triple A's"".
And if anybody touches my tools, I promise, with God as my Witness, I will break your arm, right at the elbow."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Christopher Daniel,Worked at IOKI E-volution in Education,2015,8,"There is nothing wrong with Agile. There are just companies that do not know where to not use it.

Agile is very suitable for certain types of projects, but if you happen to work for a company that does a lot of projects and uses only one software methodology, no development method will be suitable for all of them.
Some developers will hate Agile as much as others will hate 6-sigma, because 6-sigma suffers from the same problem - only certain projects are suitable for 6-sigma.
Agile seems to be designed around removing the uncertainty. Iterative, close customer-developers loop is expected to ensure that the software is the best trade-off of cost and value.
Except... very few projects are uncertain enough to be developed in that way. If you have a precise requirements of what is needed by your customer, then there is no need to apply Agile.
Consider f.e. a hypothetical example that you want to be build a burger printer - a printer capable of printing burgers on demand.
If you do this for the very first time, and nobody did that before - you should use Agile, because nobody, literally nobody is able to tell you what challenges are in the front of you, how the machine will look like, how much time it will take... and you can be sure that you will have to make many changes in the product.
However, if your printer works right now, you want to test the market. At this time you need to calculate required investment and profits, but you are not required to be at every stage of production. The team already knows what should be made. Agile is less suitable for that project, 6-sigma is not yet suitable. This is a transitional phase.
Congratulations! You're tests are successful, and now you want to put your printer in every household. Can you imagine building a printer factory with Agile? Without upfront capacity and supply planning? No? Then why do you apply such approach for writing software that is mature enough to be an equivalent of a factory? This is a project for 6-sigma.
More details about choosing right methodology for a project is available at this blog: http://blog.gardeviance.org"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Sergey Babkin,"Author of ""The practice of parallel programming""",2019,2,"The idea of Agile is great: you start with a very limited but working product and keep changing it little-by-little, adding features and changing the internals until you get a large and still working product. And at each stage you can use it in production and receive the feedback on the direction of development.
The problem though is that the formal Agile Methodologies don’t do things like this. All they do is the useless churn without keeping the product stable and getting the actual feedback from the users. And there is ZERO use in the daily meetings. There is no useful thing that can be reliably done in less than a week (yeah, there are small things that can be estimated as “1 day” but in reality if you have 5 of them, you’ll end up spending 2 days on 4 of them, and 3 days on another one because something didn’t work as expected, so estimating all 5 as a week is OK but estimating each one as 1 day is wrong)."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,David Ferguson,25 years of watching/helping developers create important products,2016,4,"Many developers believe Agile development to be nonsense because they’re intimately familiar with nonsensical implementations of the Agile philosophy. Far too many groups believe that daily standups, defined sprints, and the tool du jour means that they’re running an Agile shop.
Quick (and partial) checklist for whether your Agile development model really is:
Is there time (or task) scheduled to create the demo/release?
Does your backlog ever lay dormant for more than two iterations?
Does everybody on the team know who the product owner/customer Rep is?
Do you have individual items that take more than 30% of your interval?
Do you finish an interval with more than 1 item in progress but not done?
Is another team responsible for testing the functionality you created?
If the answer to any of the above is “Yes”, then you are not running an Agile development model. And FAR too many companies claim they’re ‘Agile’ while developers know better."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Tarasekhar Padhy,Engineer,2021,1,"Many developers feel that Agile is just a waste of time. Here are a few reasons:
They “do agile”. Agile is a set of principles that will help you create your own process. If you follow some other team’s or organization’s practices that they have adopted to become agile, then it’s not agile.
Forced status update meetings and mails at the end of day just to fit into the frame of Agile is not agile. If you don’t need to send status update emails every day, then don’t. If you feel that a simple text message is more than enough to update your entire team, then choose that. Agile is about doing whatever works and changing it when it doesn’t.
Choosing practices over principles is one of the biggest mistakes. For example if a company is doing 10-minute-meetings, you need to understand why it works for them. Just copying the act will not at all give you the same result.
Appearing agile on the surface rather than actually being agile. When senior management forces the employees to send detailed reports over email, or some tool, even though a 10-minute informal meeting will do the job, things starts to fall apart. Filling up an EOD report just for the sake of it is never a good idea. Updating your team is important but you need to choose a way which is the most efficient, not what the management believes.
Finally, agile methodology brings a lot of things onto the table. Recently, we have wrote an article about the implementation of agile in eLearning development.
Use Agile methodology to build better elearning courses | zipBoard
Agile has been utilized widely in the software industry for years. Learn why and how to implement Agile while building eLearning courses.
https://zipboard.co/agile-in-elearning/?utm_source=quora&utm_medium=social&utm_campaign=Outbound_quora
Do take a look and let me know if the idea of agile is actually way different than how most developing teams interpret it."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Kirk Burleson,Programmer,2015,5,"Because they're 'A' players and 'A' players don't have to be micromanaged, chased after for deliverables, prodded to do work, or otherwise be restricted within a framework of mediocrity. In other words, they're grown-ups, they're responsible, and they thrive on having the liberty to create and innovate. Oh yeah, and they just don't like all the nonsense."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Juan Van der Dys,Works at Jeppesen,2015,3,"I take issue with organizations that expect a significant positive change by [only] switching software development methodologies (or tools, or company logos). I think this article reflects a symptom of a widespread corporate problem. IMHO it's not about Agile or Waterfall or the next favor of the month. It is about having a shared vision and a meaningful purpose that gets people excited and eager to get the mission done. It's about having an environment where there's trust, open communication and respect in which innovative ideas can flourish. It is about having appropriate tools and practices in place to be able see where you are at, evaluate deviations from your plan, reassess your path forward and continue pushing towards your goal.
Agile is a great framework that may help achieve your desired outcomes. It will help set up a good environment. But it is not a substitute for good organizational leadership or strong technical knowledge."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Spence Murray,"Worked on the Netscape browser team, then starting hacking sites on the side.",2015,4,"Well, let's summarize by saying that our industry is evolving, and as such, processes need to evolve with it.
At my first few companies, teams were smaller, and communication was easy. We informally talked each morning about status & such, and things moved along. Everyone was fairly senior, since a lot of things had to be built by hand -- libraries, infrastructure. It was a team full of experts a lot of the time. Most folks knew a lot about what needed to be done already.
Key point: we were often building new things, for the first time, and it took as long as it took. We were highly motivated to see it come together, but done ""right"". So we collaborated closely, checked each others work, and spoke frankly about things.
Nowadays, there are many more companies, many more devs, many more users...processes, plans and products are dramatically different. One difference I find interesting is the user-focus of stories as a project management tool.
On the one hand, it's insightful to keep in mind how your user will interact with, and benefit from, your solution. Whether or not that customer is a real end user, or another software system, there's strong correlation in terms of value to that customer.
Then the benefits gradually diminish, depending on the project, people, etc. Interestingly, I observed this particular change in the industry as a result of the overwhelming popularity of website development, and later, mobile dev. There were suddenly orders of magnitude more developers, but the flavor and definition of that role was diversifying. No longer was it mostly near research-level people creating algorithms and systems for highly technical problems (hacking Unix directly, writing drivers or complex algorithms, low-level networking systems for highly constrained applications)....there were new realms of directly end-user facing software dev that did not require lower level understanding of the underlying system or network.
This was a amazing! Programming evolving into a mature industry!
...and then things really started to change.
Managing developers evolved in the direction of the print world, or a design studio...I recall the moment when a software work environment essentially became a hectic newsroom right before my eyes. Literally, in the span of a few years, an industry in which we worked and focused and concentrated in offices changed into a chaotic open room in which critical decisions were made as quickly and as ad hoc a fashion as less consequential ones... and work was condensed into bite-size chunks. Unfortunately, this model doesn't work for many projects or people.
There was a great leveling of talent and creative autonomy along with it. It best served industry to homogenize these crazy untamed programmer types, in order to better fit business models and financial forecasts.
Agile development and other concepts evolved right alongside.
Now, there are two sides to every coin, and there are benefits to every change I've mentioned. I've been in the trenches with many of them.
I pick the meat off processes like agile, kanban, etc, there's useful stuff to apply. The key is to make your choices with clarity -- realize every product, project, team, individual is different. Think in terms of making your efforts maximally worthwhile, no matter what your job is... and assist others to do so.
This can mean...
...if your team really knows what its doing, that will become clear very quickly with daily check-ins (stand-ups)
...if your project involves long stretch planning or infrastructure dev, you'd best plan for that -- weekly sprints won't cut it
...inform your lead or team every time you learn something that was unexpected -- let them benefit, and help the planning to evolve with reality
...regardless of your position, treat your area like it needs all the help from you that it can get...and that there's greater benefit in collaboration when everyone thinks that way
Whatever you do, don't get comfortable, it's the death grip for a project or company. Focus on creating the best work possible, and make the processes serve you -- not the other way around."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Matt J,Director at a digital agency,2015,7,"Agile to me is like Communism, a concept of great merit that just cannot work in the real world.
In reality what we get is a sort of Agile - lite, where we define a spec, deliver a product then tweak it at the end when the customer doesn't quite get what he specified."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Varun K,Solution Architect with JAVA & Oracle Specialisation,2017,3,"I have 11+ yrs of IT experience and have delivered almost every project (of all sizes) in non-agile model till this year. Once I started working in Agile mode, I noticed that each developer had their there own way of coding without any documentation whatsoever.
Personally, I feel that a project’s conceptualization and design phase shouldn’t be in agile. We can which to Agile once we have a laundry list of tasks and ways to do it (no. of modules and functionalities, design patterns etc., ) then agile can be followed. Without it, what happens in Agile is, developers think on their own and may override/forget the design principles and patterns to merely achieve the weekly target. Once the finished product comes, it becomes hard to support and maintain. Scrum Masters don’t understand this."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,David Ringsell,9y,2015,3,"That's how you can express Agile Development, humor wise."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Nick Geller,9y,2015,2,"I believe the reason behind certain level of disdain for Agile is best described by Albert Camus in the following quote ""... I admire that diligence, the methodical patience! When one has no character one has to apply a method."" (The Fall). The agile manifesto has some prescriptive elements that are reinforced by strong notions such as ""best practices"" and ""highly motivated individuals"" but in practice we treat the 12 prescribed principles (through SCUM and such) as if they are the 12 commandments. When you don't have character (in the original greek definition of the word, the impression something makes on another thing) you do not morph between the principles to achieve an impression that is Agile.
When I am asked about Agile or SCRUM I remember the following joke told to me by an old C programmer: ""Object Oriented Programming is a masqueraded attempt at communism""."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Kelly Iriye,Works at ASAP,2015,2,"We love to use Agile project management whenever we can, but there is definitely a time and place for it. Your typical business owner doesn't want to 'grow' their product, they just want their product created. While this has lots of issues by itself, it is important to know the distinctions between when to use the regular, 'ol fashioned way and when agile might be an option.
To keep this short, I'll just go over when to use the agile methods.
When your client has a steady income. This is not to say they have 6 figure they're willing to blow. But agile management (the way we at Webity, do it) is to build additions as they are thought up or found out. We'll create a an outline of what is expected, but as things show up and testing is conducted, the path changes with the product. A steady income allows for endless changes until the clients says 'we're done'!
When your clients Trusts you. ""We want to help you get the best product"" says every business ever. This is the biggest key. If your client doesn't trust you, then agile management will flop. You'll get frustrated because you're client wont tell you all the details and they wont tell you all the details because in the back of their mind, you're just a contractor and they know best. This typically means you'll have to start a relationship with them for a few jobs and then present the agile management process.
The project warrants agile management. A lot of ideas can be developed using agile management, but there are projects that work best by setting rigid milestones and sticking with it. You client typically let's you know which one based on their idea's and how open they are to change. If they don't like change, it's best to stick with milestones.
Ok, these are the top 3 we look for when we're going to present the Agile management process. All this to say, the reason Google and the Big Guy's don't like Agile comes down to company size. Working in agile means learning a lot about your client and having a solid, trusting relationship with them before you start the project. For the bigger companies, it's not worth the effort to work one-on-one with a client and create a product over time. Rather, saying ""we can do Y"" and that's that is much more efficient to serve a lot of clients at once.
Agile management seems to work best in smaller companies or startups, when the time and effort can be focused on creating things that matter to the client."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Karel Tejnora,Developer (2016–present),2015,2,"IMHO we must differentiate between gluers and innovators. For gluers it works very well ( see I put a glue here and there, do you like it?), yet for the innovators not so much. And if you doubt that, look up something from the neuroscience ( focussed vs diffused mode of the brain). Gluers needs to focus to put the glue right. But I don't know personally a manager who is ever happy to pay very high salary to somebody for staring onto the wall. Yet there it is were the 'Next Big Thing' comes from.
Henry Ford said that if he would ask what people (customer) wants the reply would be faster horses!"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Hemant Desai,engineering enterprise scale applications for more than a decade and a half.,2015,2,"Thank you for asking this question.
It needs to be asked to the entire industry of software, including the programmers, managers, customers.
Too often, Agile is pushed as the silver bullet that will help all in either the software dev org. or the customer which maybe a non-software business.
Would like to add just one point to the fantastic answers of Jasmine Adamson and Michael O Crunch, incase they have not already covered it.

Based on organisation structure / design, culture and requirements, the best fit for Agile applicability is Startups."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Warren Postma,Senior Geek,2015,2,"Every movement devolves into a meaningless series of fetishes. Agile is at the end of the day, what we make of it. The founders of the movement meant it to be a good thing. So did every founder of every buzzword laden movement in this profession. As a person who has sincerely tried to see the good in it, and who has also been unable to ignore the pattern where developers seize on things, pervert and subvert every good thing in them, and cling to practices because they're Agile, rather than because they work, Agile has descended into cargo cult and fetish, and abandoned pragmatism, practicality, and has little to show for itself."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Tansu Dasli,Works at Sigortam.net,2019,1,"For greenfield products, you need wolves (software engineers) and prototyping paradigm is the best.
If you use agile, for a greenfield product, limit goes to infinity. That becomes an endless story.
once you have the product, you can deliver it to dogs (software developers), which is more crowded than wolves), and agile paradigm is much better. They can adapt change faster and business side involvement increases so they can not blame IT and transparency increases by the way..
in time, agile manifesto has forgotten and there is so many applications now."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jack Mullaney,Author has 78 answers and 66.8K answer views,2015,4,"Back in the day, there was a problem with software development called management. Management knew that the 'way' was to thoroughly plan, then thoroughly develop, then thoroughly test. So that was the environment. Then Sales said, Hurry Up! and We Need That Bit Changed!
So along came a new philosophy. It said 'Quickly develop a simplification of the requirement, then get the marketing feedback (which changes the requirement), then iterate, improving the product and reducing the negative feedback along the way. This worked because marketing didn't really know what they wanted until they saw the result of what they had said they wanted. And not only that, it seemed that this way of developing was strangely faster and inbedded an 'easy to change' flavor to the product.
Then management said 'Lets call this Agile Development' so we can write and hype about it. Well, you know what happens when management begins to 'get' development and knows how to 'improve' it. Deja Vu."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Luis Espinal,Working as a computer scientist since 1994,2019,1,"Maybe because Google has its own requirements and cultures that are distinct from, say, an enterprise software shop (in very fundamental ways.)
With that said, I will say without equivocation that I am very suspicious of anyone who says Agile/Scrum/whatever is nonsense.
That’s dogmatic, just as it is dogmatic for many Scrum/Agile bible-thumpers for whom any deviation is a cardinal sin.
Engineering lies in compromise and adjustment And we compromise according to the requirements. And we adjust and tailor the tools at our disposal for the job at hand (or manufacture new ones out of asses if necessary.)
So when people say ‘X sucks’, what the hell does that mean? How can such an assertion be considered an intelligent, objective one?
Our industry is unlike a hard engineering discipline in that it has … no discipline. It’s not regulated, like a civil engineering practice would. It’s the wild west.
An agile or scrum manifesto or what have you is a good set of guidelines and processes that when applied with prudence and discipline, it improves the creation of software value in the general case.
Problem starts with process evangelists who balk at deviations from these practices, which are necessary for adoption in industries and business cultures.
The technical, business and cultural requirements for developing software for avionics or medical equipment are quite distinct from those developing in-house enterprise systems (which are not products.)
And these are quite distinct from companies that produce actual products (from shrink wrapped COTS to, say, embedded systems.)
And those are distinct from very large companies that provide bleeding edge software services (Google, Amazon, etc.)
So it is absolutely impossible to use one set of software guidelines for all. Adjustments and deviations are needed.
If a shop finds it better *for them* to hold a scrum session only twice a week, or that they do not implement unit tests for every single class they produce, are they all of the sudden *not agile.*
Or does that mean that *agile* is rubbish?
Both of these two rhetorical questions have a resounding *NO* for an answer because such questions are extremely subjective and inchoate (sometimes with a lot of ego behind them.)
We act like stupid children incapable of compromising, and it is from that emotional handicap that we make such pronouncements (this is rubbish or that is garbage.)
Even when a very extremely intelligent person were to find actual, objective shortcomings with a methodology, a pronouncement such as this immature and does not convey objective information. This is a reality regardless of how intelligent the person might be.
A a far more useful pronouncement is to say “X approach has this and this and this short comings for these specific cases. For those cases, Y approach is more suitable because this and this and this.”
** Sources: me, having worked in Agile, Scrum, Kanban, Waterfall (mandated by law and contract for some projects), Iterative/Spiral and a whole bunch of mutations from this methodology bestiary."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Murat Can Alpay,Former Developer,2018,1,"Because agile is dead.
Agile evolved into a product, that is marketed, rather than a set of values and principals that software development pioneers agreed upon at 2001.
Martin Fowler, one of those pioneers, defines it as “semantic diffusion”. Dave Thomas has a talk titled “Agile Is Dead”."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Adam McClure,"Real Estate Developer/Broker, former techie CTO.",2016,1,"Sorry but isn’t it the product manager’s job to manage the customer and translate requirements to the team? The scrum manager just keeps the features popping out the other end of the process. The product manager keeps the customer prioritizing based on the scrum team’s constantly adjusting estimates to complete requested features. Scrum was invented to solve the “boil the ocean” engineering mentality that drives the CEO batshit crazy. Try being a CxO for a day and you will really see why the Waterfall is DOA in today’s world. People who say Agile is nonsense don’t understand the purpose of it is to be responsive to the market/customer. Without a responsive process you’re building in a vacuum according to what the engineer thinks is needed not what the customer actually wants. The prime fallacy is in assuming the customer can even give you real specifications without a running prototype. They really can’t. That’s why iteration is essential and iteration is the core of Agile starting with the Minimum Viable Product (MVP) which follows directly from the initial business case. So bottom line is I wouldn’t pay the large salary to hire such an engineer away from /Google/Apple/Facebook/blah/etc/hosts. They can keep their nicely feathered nest. I would rather take engineers who want to learn how to build product and company in parallel and build the process and product together, iteratively.
I’ve been out of tech for nearly 15 years now and I can’t believe this argument is still even relevant. Apparently, I haven’t missed much. Sorry if I offend."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Vivek P,Author has 136 answers and 533.1K answer views,2016,1,"Agile is an adjective which has been thoroughly misused!
Please view this Goto talk once, one of the inventors of Agile will tell you how agile is being misinterpreted and misused because this is what it isn't made for.
View:
Hope this helps."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Kris Nuttycombe,Upvote,2015,2,A great answer to this question has just been posted on Michael O. Church's blog: https://michaelochurch.wordpress.com/2015/06/06/why-agile-and-especially-scrum-are-terrible/
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Brian Knapp,"Christian, Software Developer, INFJ, Troublemaker",2017,1,"Because agile is not supposed to be a static process. It's supposed to be one of continuous improvement and change to fit your current situation. Almost no team does retrospectives after every sprint. Their process gets stuck at one place and it sucks.
Agile means changing direction quickly as the situation changes. I've only ever worked with one team that di..."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Andrew McDonagh,Upvote,2015,1,"..because some developers, are wrong.
The Agile principles are used in most companies like Google, Salesforce, Facebook, Twitter, etc.
There's Agile values and principles, then there's Agile methodologies like Scrum, XP, Lean Software Development, FeatureDrivenDevelopment, Crystal, SAFe, Disciplined Agile Delivery, etc.
Most often, people don't adopt a methodology, they cherry pick a few easy to adopt practices. This at best leads to some minor gains, at worse, failures which are then attributed to ""Agile"", instead of the team."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jay Beat,"Artist, free thinker",2015,1,"Agile/scrum is misunderstood and misused because most companies may think they have scrum/agile by just sending a bus load of their employees to scrum training but not the managers and their bosses or even the HR department . The result is the managers are clueless and wrongly believe scrum is a way to squeeze more productivity out of the poor overworked engineers. Worse yet, they linear interpolate the scrum volocity from one team and apply to the rest of the company. The managers love scrum burn graphs because they put in reports for their bosses. They do not know the numbers are useless outside the team. The worst of all, the clueless managers and HR use velocity metric to evaluate engineer performance. HR and managers still use old method to evaluate employee performance which weighs heavily on individual accomplishments. Scrum encourage team and try and error approach. If one does not complete his or her backlog/task. But It is ok, actually expected because estimating is pretty difficult. Hopefully the team can do a better next time. Clueless managers may instead blame on the task owner. This is one of the reasons people hate scrum"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Ken Benneth,founder,2015,5,"For starters, Agile was never designed for large software houses. It is primary addressing enterprise software development.
In software houses, the task is very often defined with significant precision. Say ""produce a JVM JIT compiler"" is a complete definition, yet will take more than 3 weeks to complete.
A lot of things Agile champions are bragging about, like automated testing, have been fixtures of software houses for a couple of decades before Agile.
Actually, Google obsession with A/B testing is an element of ""Agile"" whether they know it or not.
The biggest flaw of most Agile approaches is the reliance on that all-knowing all-deciding on-site stakeholder. Such person rarely exists, someone close enough never available for more than 1 hour per week, and even then the chances of such person sending the whole project on the wrong way are high.
Have you noticed that eXtreme Programming first project, the Chrysler payroll system, failed? The resident stakeholder was fired, and the project terminated. That is that fundamental flaw - the person they got as a stakeholder was the one true stakeholders didn't need for other things.
These days Agile projects focus on quantified visualization of progress instead of on users' approval, bringing them even closer to what software houses were doing for three decades."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Darin Caggiano,Works at Information Technology,2015,1,"Agile in my experience, which is limited, is mostly about inclusion, communication, and organization. If your business (and by business I mean your company/division/etc in it's entirety) needs help in those areas, parts of the agile process may help.
If those aren't issues, you don't need agile. Having said that, there are plenty of situations where companies do need some aspect of agile, but are focusing on the wrong thing. Stand-ups won't help with time-management, and a Kanban board won't do a whole lot for communication. What processes you implement need to directly reflect the deficits your group has and also need to be flexible enough to reflect your working environment.
If you're building a numerical library, you probably won't need daily stand-ups, but weekly or bi-weekly may help depending on your customer. If you're having problems with changing requirements, you need way more communication. Etc....
Like almost everything else, it depends on the situation."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Russ Reese,Studied at Computer Programming,2015,2,"Many programmer think like computers. It's only natural, you hang around with computers long enough and you start to think like them. So many programmers get to a point where (like a computer) they want every bit of input to perfect and complete, otherwise they return the proverbial ""that does not compute"" response.

Agile programming (IMO) allows for incomplete and imperfect inputs. And then you just act on that incomplete and imperfect knowledge and you iterate. With each iteration you hope that the input improves and thus the output improves.

Again, many (if not most) programmers are not built that way - they want something at least close to perfect up front. Some specification or blueprint that allows for planning rather than reacting to new information all the time.

There is probably room for both styles of software development (blueprint reading and reactive/agile). It just depends on what you're doing but I'm fan of agile because I did the blueprint method back in the 90's and I've done agile since 2001 and agile works better for me (and I think for the end users)."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Thammanoon Kawinfruangfukul,Studied at King Mongkut's Institute of Technology Ladkrabang,2015,1,"There is no one-size-fit-all software process. Adopting it without considering a nature of your people, products, organization, and goals would not bring you to where you want."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Raul Castro,Ol' school guy. Learning the newest all the time. Because I have to.,2015,2,"It can be called nonsense when the whole organization doesn't work in Agile style. Agile is not just an individual or team decision. It is a way teams work inside themselves, but also a way they connect with the rest of its organization and (the most important) with its users.
Agile itself makes sense, as soon as it is really followed all along the SW life-cycle. And beyond it.
If nobody beyond some development teams follow the Agile Manifesto, that's complete bullshit, for sure."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Petr Lepilov,Upvote,2015,5,Because it is
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Justin Myatt,"Sailing fan, racing means fixing it, knows stuff about IT",2015,15,"I think the problem is when people end up trying to pigeon hole things all the time (which is not always unreasonable as if I want to save a url in my browser I typically have to pick which folder - I just pigeon holed it).
Problem is that generally speaking each project, team, and client are different so each time we should look in our various tool boxes to work out what mix of techniques are most likely to help us succeed.
Be flexible and through out the project check if you need to change any thing. More than anything thing I think getting the right mix of properly motivated people (and keeping them) is the key to success, everything else is a bonus."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Gary MacGregor,Upvote,2015,0,"Dogmatic allegiance to any process (concept, ideal) isn't going to work.
I liked Michael Church's comment, peppered with slags on the consulting world, 'cause he basically said- if it suits the need use it.
No - that's not right. Probably more like - if it suits the situation - use it.
Agile, etal, can be the right approach, at times.
Don't get caught with only a hammer if you have to put in screws."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Peter Banka,Works at Fastly (company) (2017–present),2015,3,"Funny, what exactly is the alternative to Agile that is so much better? If Agile is nonsense then what do other people prefer? The only other real methodolgy out there is Waterfall. Are all of you who write three-page polemics on the evils of Agile wanting to return to the good old days of waterfall?
To paraphrase what Winston Churchill (allegedly) said about Democracy: ""Agile is the worst way to run a software development shop, except for all the others."""
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Joseph Chang,"Startups, IT and Software Technologist",2016,5,"DISCLAIMER: This is an oversimplification, but offers an quick summation alternate to the lengthier answers.
Scrum is quite popular with startups because it's generally a use case that is understood, although the actual development is best done incrementally. So you have your meetings everyday, iterate, repeat, at the expense (somtimes) of a super-well though out plan. But in these cases, you don't want one.
A group that's got a general idea of what they're trying to solve, and also not sure of how it's getting built, benefits from adopting practices of a Lean Startup. Start thinking MVPs, customer feedback, malleable vision.
If you know exactly what needs to be built, and are 100% sure of how to build it, what steps to take, in what order, Waterfall starts to be interesting. If you were porting an application to another platform, maybe waterfall works better? Fewer meetings, but better have some airtight specifications and tech design!
Kanban one is weakest in this chart, but if you've some technology in search of a problem (see DotCom 1.0), with no product/business owner, then breaking the solution up into flashcards so your engineers can keep on building makes sense. You do have some flexibility to change course if you've finally figured out what the market for your gizmo is.
Again, oversimplification, so don't take this to be 100%. But it does make the argument that the answer isn't always Scrum, or Agile, or Kanban. Know what tenets each stresses, and how each tries to reduces risk and increases predictability and efficiency.
*This chart is not mine, it was found in Jeff McKenna's Agile Class."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jordi Noguer,"web/app full stacker: C/C++, javaScript, HTML/CSS, postgreSQL, nginx, memcached",2016,15,"It is true that every author understands Agile in her particular way.
That is why I did a research to find the real origin of the word Agile and the real meaning of the Manifesto contents that here I share with you:
Agile word is nothing but a synonym for Lightweight.
When Waterfall methodology was dominating, which was considered heavyweight -because relied in heavy specifications written by the software analysts according to customers wills that developers had to strictly follow-, some dissatisfied software engineers started inventing many lightweight principles and practices for modeling and documenting software systems in they own way, far from Waterfall rules:
Rational Unified Process (RUP)
Dynamic Systems
Development Method
Essential Unified Process (EssUP)
Extreme Programming
Feature Driven
Development
Open Unified Process
Scrum
Velocity Tracking
Waterfall had the problem that to prevent the implementators to get stuck without knowing how to continue without inventing themselves a specification, all documentations should be very detailed and nothing could to be forgotten by the analyst.
The signatory of the Manifesto simple converted this bunch of lightweight principles already popular into a solemn methodology at the same level as Waterfall. They gave it the name Agile because lightweight sounded non-serious, non-professional, non-complete, etc.
Another misunderstanding is the contents of the Manifesto itself. Basically it enumerates the problems that Waterfall created in that time and gave a solution for them. Here I translate it into plain English:
Individuals and interactions over processes and tools: what is the use of magnificent processes and tools without a good team to apply and adapt them? (including the customer in the team)
Working software over comprehensive documentation: what is the use in relying on heavy specifications documentation, even if no detail is missing, and not get working software until the end of the development when maybe it is not what the customer wanted to get because the analyst did not catch all the needs or the customer changed her mind?
Customer collaboration over contract negotiation: what is the use of negotiating prior to code if maybe the customer forgot an important issue in the negotiation?
Responding to change over following a plan: what is the use of following a strict plan that will not bring you where the customer really wanted to go? (maybe because the customer discovers that her program has no market after many weeks of development)
With all this in mind, to me, among all the lightweight principles and practices that involve Agile methodology, Extreme Programming and Scrum are the most useful.
Besides its iterations, Scrum is a good tool to guess when something will be finished. Coding is very unproductive and there is a huge uncertainty when trying to estimate the time needed to complete a development. Scrum comes to the rescue with the assignment of Fibonacci sequence difficulty-score to every ‘story’ (snippet job to do) that composes an iteration. Adding scores permits to determine the end day of a work with quite a good predictability.
Some coders do not like to work in a tight schedule and hate seeing the forecast end day coming closer. Scrum is useful to compare different coders performance, and comparisons are odious."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Tom Rose,Software development is how I earned a living for 30+ years,2016,1,"You ask: “Why do some developers at strong companies like Google consider Agile development to be nonsense?”
The answer is in the question … it is because Agile IS nonsense."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Arunthep Sangvareethip,"Over a decades of Lean/ Agile transformation practitioners, good listener",2017,0,"I believe Agile is just values and it is up to people to interpret. scrum doesn't equate agile.
The offer of changing the principles is just amplify it based on your context.
If you ask me on Return on Time investment for reading this, I give it 2 out of 5. (5 is the high end of value to me)"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jim Price,"Lives in Broken Arrow, Oklahoma (1981–present)",2017,1,"Many companies have IT Departments so FUBAR that even Agile would be an improvement. Of course the real challenge for bad IT departments is how to get away with keeping their old methods and still call it Agile.
Then again many companies have excellent IT Departments. I’ve seen both, and the good ones take a lot from Agile but are just not locked into it’s paradigm."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Vijay Rangari,IT QA Manager,2018,0,True agile works. I was doing it at GEC Marconi in the 90s…. Before it was called Agile. However since then everywhere I worked that said they use Agile has just been a joke. Most projects failed or failure covered up.
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jordan Park,"Software Engineer, Mobile App Developer",2019,15,"Some might view active involvement of user which is key in ensuring the delivery of the right product as a con associated with agile development methodology. Other might think that very less amount of information is available to a new entrant in the team who will work on important feature development of the application.
In an agile process, every feature needs to be done 100% in all the iterations. This might be a bit tiring sometime but is that a solid enough reason to quit agile development model. Well if that is the case can anyone suggest me an awesome alternative
These people need to see the other side of the coin. Agile means delivering what the user wants as well as spending the least possible development time in the wrong direction. In this methodology, user won't have to wait for several months rather they can see what would their product look like within weeks.
It also helps developers to implement process so smoothly that will ensure seamless cooperation of various scrum teams. Agile is useful in development of status tracking that can be shared in between team located at different geographic locations.
The best part about Agile approach is it allows the client to get engaged with the project where he can be a part of taking decision about which feature needs to be iterated on priority basis. The involvement of client into the development process will allow developers to better understand about client mindset and what is most important for client."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jide Delano,Full Stack Web Developer (2018–present),2019,0,"Agile sounds great in theory but there is no conclusive data to backup the claims of the benefits. For this reason, serious software development companies do not pay too much attention to it.
Scrum masters will try to tell you it’s the greatest thing since sliced bread, but don’t take it too seriously. Instead, approach agile the same ware you would approach one of those detox/cleansing diets … it’s nonsense.
www.webdevelopers101.com"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Rodrigo Fernando Durá Espinoza,"Bachelor in Systems Engineering & Technology, Universidad Privada De Tacna (Graduated 2008)",2020,15,"Most devs are versed in open-source development methodology which translates into the git platform and its most notorious web platform Github. Software tends to be collaborative, wide and its maturity depends on interested parties or individuals who will contribute or fork depending on situations. It also secludes software development of market variables that affect and even hurt the software industry. Agile is just on of those methodologies the market created as a common ground between software developers and management personnel who are more prompted to production and quality over time measured by finished projects which usually lead to burnouts and not necessarily in high-quality software."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Manish Mandal,Associate VP - Operations at Brainium Information Technologies (2014–present),2020,0,"Agile is good when you want to show (or impress) clients by portraying a continuous progress, which most clients wants these days - fast.
It is possible to manage a continuous progress when doing off the mill works.
When developing something new/different you don't know where you will get stuck for the time of multiple sprints, causing many clients to become unhappy/panicked/concerned/angry."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Haasya Johi,Digital Marketer at SprintsQ (2023–present),2023,15,"While Agile methodologies have been successful in many small and medium-sized companies, they may not be as well-suited for larger organizations for a few reasons:
Complexity: Large companies often have more complex systems and processes in place, which can make it difficult to implement Agile methodologies.
Big family: Larger organizations often have more layers of management.
Resistance to change: Agile methodologies often involve significant changes to the way an organization operates, which can be met with resistance from employees and management.
Budget: Agile methodologies can be costly to implement and may not be seen as a viable option for larger companies with limited budgets.
Difficulty in measuring progress: Agile methodologies rely on sprints and milestones which can be difficult to measure for large company with multiple projects and different teams.
Agile can be implemented in large company with the right approach and the right mindset. It's not impossible, but it's not easy either. It needs a lot of planning and preparation.
Agile methods offer their own unique advantages. But it’s all applicable in small and medium sized companies."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Mohammed,"B.Sc in B. Sc. Computer Science, Higher Education (Graduated 2017)",2023,0,"There is no one answer to this question as different people may have different reasons for why they think it is important to be professional. Some may believe that being professional demonstrates a commitment to one’s job or career, and shows that one is serious about their work. Additionally, acting professional can help build trust and credibility with clients, customers, or colleagues. Finally, behaving in a professional manner can set a positive example for others to follow.
M-coding · February 2, 2023
Programming Solutions for Your Tasks
Your ideas deserve to come alive. Trust us to bring them to life with passion and care. Save time and focus on what you do best while we handle the programming for you. Let's turn your vision into reality. Click here to learn more about our services and get a quote today! Visit our website now
https://qr.ae/prkdkk"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Muhammad Ali,"M.B.A in Project Management, University of Northampton (Graduated 2017)",2023,0,"Some developers at strong companies like Google may consider Agile development to be nonsense because they may prefer the traditional waterfall model of development, where one phase must be completed before progressing to the next. Agile development is a more iterative process that may be seen as too chaotic or difficult to manage by some developers. Additionally, some developers may find that Agile development is too focused on short-term goals and does not provide enough time for long-term planning or strategy."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Innovation Insighter,Knows English,2023,0,"Some developers at strong companies like Google may consider Agile development to be nonsense because they may feel that it is not necessary and that traditional methods of development are more effective. They may also feel that Agile development is too complex and time consuming, or that it does not provide enough structure and direction. Additionally, they may feel that Agile development is too focused on the short-term and does not provide enough long-term planning."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Sophie Thomas,Owner (2017–present),N/A,15,"People who no longer engage in design, coding, and debugging in the development process advocate and drive Agile. Additionally, they lack trust in their engineers' abilities, suggesting issues with their hiring process, company culture, or both. These individuals set unrealistic deadlines, unaware of the actual amount of hands-on work that can be accomplished in a day. If the team appears to be falling behind within 48 hours of starting a project, they conclude that the team lacks aggression. As a solution, they enforce a 9 am start time, stand-up meetings, and collaborative development in a conference room, claiming it will make the team more agile. However, experts in creativity within engineering recognize the flawed nature of this approach, realizing they are being burdened due to system failures and some unproductive team members. Unfortunately, there seems to be no escape from the overwhelmingly prevalent agile mindset in the world today."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Ariel Scarpinelli,9y,2015,1,"Look at the Google interview process. Look at how many questions about it are there in this site... What Google encourages is people that is kin for algorithmic problems.
Agile is often sold as a mindshift, and that mindshift is tend to believed to be for the ""management""; but before that is the development team the one who should embrace it. And that basically means care solving customer issues and focusing on having working software for people.
Most ""algorithmic solvers"" like to be isolated in a room working code puzzles, away as possible from ""customers"". That is NOT agile, and that is the kind of people big companies search for; hence people there considers Agile a nonsense. And they have the point to. (Of course is a company decision to look for those, but a big company can do whatever they want to).
For Agile to work, coders must be in the frontline with marketing, sales and all the other parts of the company. They must own the product. They must face to face with customers. They must be able to object and suggest alternatives to everything that is presented to them. They must strive for the smallest/shortest but yet amazing product. That is all developer stuff and has nothing to do with coding."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Steve Castle,"Technologist, Launching Small Businesses",2015,1,Dead on. Agile is a wonderfully meaning philosophy. The majority of companies however are using this word agile as a feel good smokescreen for more of the same old and behaving just as badly as before. Real cultural change is way harder than hiring a consultant and using new buzzwords
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,John Bint,"BA (Hons) in Physics & Computer Programming, University of Oxford (Graduated 1976)",2015,0,"At its best, it seems Agile is supposedly good for internal developments where the requirements and the total cost get fleshed out as the project proceeds. For client-facing work, or anything else you need to define and give a price to before the development commences, Agile seems completely inappropriate: it just can't be used to give a full specification and a cost before the work starts."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Florin Jurcovici,Author has 123 answers and 132.3K answer views,2015,1,"Because developers at large companies like Google live in a bubble.
Some rules were laid out in the very beginning of Google about how development has to happen. Especially for age-old Googlers those are the bible. They haven't had brutal contact with the reality outside Google in years, and even if they had, Google's size and financial power acts like a dampener on any shock. 99% or more of their professional interaction is with fellow Googlers who work and live by the same rules. Nothing ever motivates them to change. Whoever wants to introduce change is a heretic.
Agile is all about managing change. Large corporations, not just Google, are all about how to keep the status quo."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Yury Skanavy,been around writing code for a while...,2016,15,"Perhaps because it is (and I do realize the wrath I will probably inflict upon myself for saying this).
I have worked individually and in teams of brilliant engineers since Agile was a mere word in the English language and scrum would sound as a vaguely insulting slang word.
My take is this. When you have a bunch of expienced, dedicated and passionate engineers you need none of that process in place. It just happens via ad-hoc peer to peer connection as well as clear managerial input. If people are not aware of the issues, unable to respect the deadlines, caged or unable to communicate than you have bigger issues that your process. You need to fix people, not the process.
This is not to say that planning, task breakdown and time reporting is not a good thing. But definitely not daily, at least not with senior people.
So how about this. We drop Agile and other things (while keeping rigorous project management in place or perhaps beefeing it up even), hire a phychologist permanently and let him or her help people communicate and cooperate. Often, an open exchange will normalize relationships, clear misconceptions and basically make things better.
Also why don't we establish a forum where a deep cerebral exchange is ongoing. This will help people be aware of future project conceptual pitfalls and so on."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Wim Hoogenraad,"Founder, Owner and Author of https://en.itpedia.nl",2017,1,"In Agile development is there are two problems.
1. You never know when a project is finished.
2. You never know what it will cost so it is hard the get a budget for the next year.
More about this at http://www.itpedia.nl/2011/09/19/agile-systeemontwikkeling/ (translate with Google Translate from Dutch)."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Andrew Douglas Hope,Knows German,2018,15,"Agile is a symptom, not a cure.
The best guarantee of success in any project is absolute clarity of vision, yet (as any experienced designer will confirm) deep design insight comes only with long exposure to the most challenging of domain problems, and with the freedom to prototype (play), reorder and experiment.
Modern software development has drawn design thinking in the direction of the selective and quickly “monetized”, as opposed to the systematic and evolutionary.
Because it is built around short-term and opportunistic thinking, Agile is -in the most essential, potentially most sustainable elements- unplanned. It also inherently addresses the lowest of hanging fruit, which often represent the most trivial of problems.
In end effect: speed and short term advantage over longevity.
In committing to early commercial exposure, Agile carries a high risk of locking resources into untenable path. The ensuing organizational train wreck is a fair guarantee it will be more difficult to re-equip for another try. Ultimately this bars designers from gaining those essential and grindingly difficult deeper insights.
The other facet of Agile is that in the haste for results, development focus is quickly dominated by available off-the-shelf implementation technologies, rather than by the inherent domain problems. As a result, these tools (SDKs, libraries and frameworks) tend either either towards visionless bloat, or focus on the tritely cosmetic. In both cases, the core issues: evolution and longevity are left unaddressed.
To my mind, Agile can be paraphrased with “I don’t know what I want but I want it now”.
End product? Churn."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Simon Powers,You can read more about me here: http://www.adventureswithagile.com/simon-powers,2015,0,"Ok, so I would question whether they do in the aggregate. Individuals always have differing opinions based on experience and context. In general, at those companies and others, most developers once they have been in a good Agile team (regardless of flavour) would never go back. There are always the odd person, but that is what is glorious about us all. We are all individuals.
What are you actually refering to, this questions feels like it is loaded?
Simon"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Steven Koh,Works at GovTech (Government Technology Agency of Singapore),2019,0,"Because the agile manifesto and principles are common sense. Unfortunately, common sense remains a precious commodity in the noisy world we live in. Thus, the obvious is spoken repeatedly until it becomes a buzzword.
Even more unfortunately, agile development does not guarantee success because there remains infinite ways to screw up, The biggest myth of agile development — faster, cheaper and better outcome. It’s frustrating when people outsource thinking to processes."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jim Pruitt,"Senior Editor at VMEdu, Inc. parent company of SCRUMstudy",2015,1,"I am not familiar with individuals in these comapnies who consider Agile nonsense, so I cannot answer your question. (I couldn't find the ""decline"" button on this question's page, that is where I usually give this type of answer.)"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Steve O'Connor,"Have been writing multi-user systems, every day for over 35 years now.",2016,6,"Because the point of Agile is to “reduce the cost of change and uncertainty”, by providing processes for managing the churn.
The point of Design may be said to “reduce the need for change and uncertainty, by getting it right the first time”.
The first approach is ideal if you are running a consulting gig that charges hapless corporate clients by the hour.
The second approach is ideal if you are trying to build something that will perform, and last a for a while.
… to answer the OPs question, Google is in the “lets build it” game, not the consulting game."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Mike Dahmus,Transportation crackplogger in Austin; software dev/manager,2015,1,"Well, agile isn't complete bullshit, but most of the claims of agile practitioners are. It's really simple - if 'all waterfall projects inevitably fail', which you get out of most agile zealots if you push hard enough, then go through their tools with them one by one and see if you can find one, even one, that wasn't built with waterfall. It's a fun exercise."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Robert Galt,3y,2021,15,"One of the main problem with Agile it is based on a fallacy, a false dilemma. They think that you can either have working software or documentation, not both. And this is a big lie, similar to thinking you can either go to the supermarket or get a bath. Of course you can get good working and documented software. In fact, documentation, as well as well designed software is vital if producing a good working applications because most of the time developers spend is not writing code, is trying to understand what's already there when doing a new feature and maintaining old code when there's no new features to be done. Here comes documentation and good design to the rescue.
The other thing about Agile it thinks 10 Witch-doctors make for a health scientist. No, you can't substitute a senior developer with 5 junior undergraduated boys. You can't substitute the knowledge and importance of the Software Architect with a bunch of guys endlessly talking.
Ironically, Agile is designed for small teams and pretty bad in larger teams. But all they do is compensate for the lack of quality and experience with more non-experienced guys"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Edward Coast,Linux software engineer,2022,1,"Because Agile lowers the quality of the product. Agile is used to fool management that things can be done more quickly, but in reality people spend hours each day feeding the tool instead of leading a team and getting real work done. There are no published respectful unbiased metrics that shows Agile is better than Waterfall. It is a fantasy that you can remove the qual..."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,GMS,Updated Feb 28,2024-02,15,"I have been working for tens of years throughout multiple companies. In theory Agile is good for both business and developers, but in practice, they are actually horrible to be honest. What I experienced from Agile practice is that we have a fixed timeline that is defined by management. If you want to adjust the timeline to be longer time, they will ask you a lot of questions for you to justify, why this why that why and why??? Sometimes we have to go through a tight deadline while we still have to maintain high quality software. Because of tight deadline, we have to work overtime without getting overtime pay. Sometimes there are DevOps issues in the deployment pipelines and we have to allocate extra time for manual deployment and manual checks without being reported for our extra time allocation. Sometimes the code review step requires us refactor a lot of code for a new feature to be able to work while we cannot adjust our time allocation predefined in advance. Besides that, we still have to input a time tracker individually of how we allocate time of at least 8 hours a day. If there is production issue, be prepared to be the one who gets blamed and scolded, and you must fix it immediately at present. The management is using Agile report to point out who underperform and use it as a tool for every individual and team KPI. In conclusion, what we call Agile development in practice is actually Agile and Lean practice from business perspective that focus on reducing inefficiency, increasing productivity BY ANY MEANS, including inhumane treatment.
So yes, you are right, I strongly agree with some developers consider Agile is nonsense and bu11-sh1t."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,MD Rashed,"BBA in Accounting & English (language), National University (Graduated 2018)",2019,1,"As a past Google Engineering Director, I can offer some understanding.
Adroit techniques various things to various people. The essential strange state Agile Manifesto is something I accept is close to the way in which Google engineers think about programming headway.
Individuals and participations over methods and devices
Working programming over sweeping documentation
Customer joint exertion over contract game plan
Responding to change over after a course of action
In any case, when you move past these irregular state considerations into nuances, the assention starts to obscure. Able has some keen musings yet it also has dubious segments which are exorbitantly rotated around fleeting thinking for managing dynamic building adventures done at associations like Google. Without getting canvassed in nuances, we should look at the themes in Principles behind the Agile Manifesto.
We should start with the basic considerations. Google progression style epitomizes the kind of individual reinforcing talked about in the models. The express measures which are most as per and likely stirred by Silicon Valley include:
Make stretches out around motivated individuals. Give them the earth and support they need, and trust them to put everything in order.
The best structures, requirements, and plans ascend out of self-dealing with gatherings.
At standard between times, the gathering thinks about how to twist up dynamically reasonable, by then tunes and alters its lead in like way.
Industrious respect for particular flawlessness and incredible structure updates deftness.
Ease - the specialty of intensifying the proportion of work not done - is major.
These measures are moderately good judgment for sharp engineers. I fight Silicon Valley made the lifestyle of fortifying and trusting in individuals that these are rotated around.
In any case, there are distinctive parts of the models which are not a bit of Google-style enhancement culture. These are the parts which have incited the transient focused Scrum process. They have all the earmarks of being suited to explicit sorts of enhancement, most strikingly directing or contract programming, where the customer is external to the affiliations, runs the show since they are paying for headway, and can modify their feeling at whatever point:
Our most shocking need is to satisfy the customer through appropriate on time and incessant transport of productive programming.
Experts and creators must participate step by step all through the endeavor.
The most capable and fruitful system for passing on information to and inside a progression aggregate is eye to eye discourse.
Welcome advancing essentials, even late being produced. Flexible systems saddle change for the customer's high ground.
Pass on working programming a great part of the time, from a little while to a couple of months, with a tendency to the shorter timescale.
This style of transient orchestrating, organize customer contact, and consistent accentuation is proper to programming with a fundamental focus and piles of customer obvious features that are relentlessly profitable. It isn't so suitable to programming which has an astoundingly fundamental interface and gigantic measures of concealed internal multifaceted nature, programming which isn't useful until the point that it's really aggregate, or bounce plans the customer can't imagine.
Associations like Google form dynamic programming which has never been made, and which doesn't work until complex subcomponents are made. Bigtable and Borg immediately ring a chime. Bigtable is an extensively repeated arrangement for a flowed database, and Borg was one of the foremost significantly gigantic scale pack/cloud boss. This kind of improvement takes significant ahead of time plan time, and tackling parts over longer than multi week cycles. Since the endeavors have such essential external interfaces, in this way a lot inward eccentrics, an incredible piece of the work isn't even detectable to ""customers"", so there is no genuine method to create customer indisputable stories about it. This sort of programming takes 8– 20 months to pass on the fundamental working version to the customer.
Exercises like Bigtable and Borg are the counter scrum. They address an incredible degree whole deal thinking regarding the particular pioneers. As opposed to tackling something that would meet a little need this week, they were setting up a structure for a basic move in the manner in which assemble writing computer programs was made. That hypothesis has gotten personality blowing benefits at Google, and additionally has influenced the entire business.
Diverse organizations have relative analogs. From obligation accounting programming to PC redirections, some item isn't suited to accommodate end customers when for the most part wrapped up.
If I was asked for to redo the above facilitated models to be more as per Google style headway, they might be logically like:
Our most imperative need is to extend customer (and engineer) proficiency and access to information. Work on the best, most a great part of the time used issues you can find, and make the greatest net impact. Do whatever it takes not to give the customer what they ask for; fathom them, and change their world.
Specialists should make a Google Design Document (a truly irrelevant, yet composed structure doc), elucidating the endeavor, what goals it might want to achieve, and illuminates why it is unimaginable in various ways. This document should be coursed with accomplices, to get early analysis before the endeavor gets in advancement. The made record is essential, as it ensures there is a sensible and agreed understanding of when the undertaking is a triumph and how it means to arrive.
At all times of the undertaking, essential arrangement parts for greater portions should be minimally elucidated and gotten in a structure report.
Create in hops. It's logically basic to finish and send a hop than to try faultlessness. There is no faultlessness. Or maybe be versatile, and plan to dependably reconsider at each element of the stack.
Pass on working programming when is sensibly possible, and no sooner. ""Dogfood"" stretches out inside before they are sent remotely. Guarantee things meet extraordinary rules already conveying. The idea of the thing could undoubtedly contrast with the time it takes to achieve it.
While the strange state Agile Manifesto is adequately versatile to work with these benchmarks, these are through and through not the same as the short-cycle low documentation Agile/Scrum process which has ended up being synonymous with the word Agile."
