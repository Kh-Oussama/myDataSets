URL,Author,Author Description,Publication Date,Votes,Review
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Carol Anderson,Software Engineer | 25 Years of Expertise,2024-09,0,"Agile software development, though highly effective for small to medium projects, may struggle with large-scale initiatives. The primary challenge is the complexity of coordinating multiple teams and tasks. With large-scale projects, it becomes difficult to maintain seamless communication and flexibility across all teams, leading to potential misalignment and delays. Additionally, Agile relies on quick iterations, which can be hard to manage when there are numerous stakeholders and departments involved.
In large projects, rigid deadlines and detailed planning are often required, which can conflict with Agile’s adaptive, flexible nature. Moreover, scaling Agile across a large organization requires extensive resources, including skilled coaches and tools, to ensure smooth implementation.
An Agile Software Development Company, like Impressico Business Solutions, emphasizes that for massive projects, hybrid models combining Agile and traditional approaches may offer a more structured path to success, balancing flexibility with the detailed coordination required.
Agile is fast, but big projects need a roadmap."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Steve Baker,Senior Software Engineer (2013–present),2022,5,"It certainly doesn’t work when you have a large “flat” organization.
However, if you can organize into teams of no more than a dozen people each - each of which has a fairly self-contained piece of some overall product - then Agile can work very well.
Each team - can use standard Agile techniques.
Then you have to form teams-of-teams which attend scrumm-of-scrumms - and have higher level projects which they manage.
A team-of-teams can have a dozen teams of a dozen people each and remain manageable up to around 150 people.
If the project is even larger than that - then you can make another layer - a team-of-teams-of-teams - and now you’re up to around 1,800 people.
But with each layer you add - you add a layer of communications delay.
So you have a scrumm - 12 engineers and a manager show up - one of the engineers raises a problem that spans beyond the team’s ability to handle it.
So the manager takes that and presents it to the team-of-teams at their scrumm-of-scrumms…the outcome of that meeting is to decide which other teams need to be involved - and their representatives from the scrumm-of-scrumms take it to their scrumms where plans are made.
So if (as is often the case) the individual scrumms happen first thing in the morning - and the scrumm-of-scrumms happens 30 minutes later - then it’s an entire DAY before the information gets propagated back down to the other teams - and another entire day before the answer gets back to the original team that had the problem.
If you have a scrumm-of-scrumms-of scrumms - then you have two days for the information to propagate across all of the layers and two more days for it to propagate back
This might be acceptable for some kinds of problem - but it’s clearly not a good thing.
So at some point, the answer is that you have to schedule a cross-team meeti...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Steve Baker
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Stuart Banks,Self Employed Electrician at Your Electrical Solution (2010–present),2021,1,"Agile software development is often not found to be suitable and successful in large scale projects of business enterprise because :-
Large scale projects predominantly employ large workforces making effective, efficient and timely communications more of a challenge when frequent Agile software training, introduction and adaptation is essential.
Agile policies of business management to work successfully have to be reviewed, amended and introduced frequently, seamlessly and immediately if they are going to change a poor level of effectiveness and efficiency in business adaptivity to change and productivity into an acceptable one.
Large scale projects of business enterprise require excellently predictive, accurate and successful, forward strategic planning in order to operate and make tactical change options when circumstances demand to succeed which does not have the same ability and capability to react to unknown and unanticipated changes that are required in agile policies of product and service control management."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Assistant,Bot,2024-08,0,"Agile software development can be very effective, but it may face challenges when applied to large-scale projects. Here are some reasons why Agile might be less suitable for such scenarios:
Coordination Complexity: In large projects, multiple teams may be working on different components. Coordinating their efforts can become complex, leading to integration issues and misaligned priorities.
Scaling Frameworks: While there are frameworks like SAFe (Scaled Agile Framework) and LeSS (Large Scale Scrum) designed to scale Agile, they can introduce additional layers of complexity and bureaucracy that may dilute the core Agile principles.
Stakeholder Management: Large projects often involve many stakeholders with varying interests and requirements. Managing and aligning these diverse expectations can be challenging in an Agile environment, where quick iterations and feedback loops are essential.
Documentation and Compliance: Large-scale projects, especially in regulated industries (like finance or healthcare), often require extensive documentation and compliance checks. Agile’s emphasis on working software over comprehensive documentation can conflict with these requirements.
Cultural Resistance: Transitioning to Agile in a large organization can encounter cultural resistance, especially if teams are accustomed to traditional project management methodologies. This resistance can hinder the adoption and effectiveness of Agile practices.
Resource Allocation: Agile practices typically focus on cross-functional teams. In a large project, resource allocation might be more rigid, making it difficult to form the necessary teams to embrace Agile fully.
Dependency Management: Large-scale projects often have many dependencies between components. Managing these dependencies effectively in an Agile framework can be challenging, as teams may be working in iterative cycles that do not always align.
Longer Feedback Loops: While Agile promotes rapid feedback, in large projects, the time taken to gather feedback from all stakeholders can extend the iteration cycles, undermining the Agile principle of quick adjustments based on user input.
Conclusion
While Agile can bring many benefits to software development, its principles may need to be adapted or supplemented with additional practices when applied to large-scale projects. Organizations often need to find a balance between Agile flexibility and the structured approach that large projects typically require."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Lambros Photios,CEO at Station Five,2021,0,"Agile software development is arguably more suitable for large scale projects, which is why it has been adopted by large organisations for their large scale projects. Even the likes of Facebook use an agile methodology for their core product (being the web and mobile applications of Facebook).
The drawback with agile is not in the methodology, but in the poor perception that agile means less planning or structure. A well implemented agile methodology has tight processes and robust structures, which actually takes longer to establish and educate a team on when compared with waterfall. The benefit of agile actually comes in the medium and long term, as opposed to the common misconception that agile wreaks short term benefits. It doesn’t. Agile in the short term is expensive due to education, the requirement to form new standard operating procedures, and to reinforce processes that are unfamiliar.
Don’t be misguided that agile is not suitable for large scale projects though, it leads to grander success in the medium and long term due to its ability to publish micro releases and adopt a nimble approach to software development even in larger organisations.
All the best."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Pascal Bernard,President at Projeqtor (2015–present),2021,2,"Large companies have heavy hierarchic structure, and each top level required for commitment on what will be done. Agile methods are not good at that.
Agile methods need small teams. So the work must be split into small parts to manage them with Agile Methods. This is not always possible with very large projects and sometimes effort spend to split the tasks and to merge the results is more than what Agile Methods cound bring
Agile methods require highly autonomous team members, with great experience. Large companies ofter hire newbies, that are cheaper and more easy to enrole in the enterprise way of doing things."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Jos Buurman,Worked Agile/Lean since long before they became hype,2019,1,"Agile works for large projects, but first we need to establish what Agile is.
You can read my explanation in this answer: Jos Buurman's answer to What the four values outlined in the Agile Manifesto?
In brief this answer showed an agile bed developer who discovers that the customer has sleep apnoea which it impossible to sleep regardless of the mattress.
When it comes to large project we are not talking about a bed, but about rebuilding an entire home. And when you view it this way you directly realise that everything is connected. Your decision where to put the water pipes has direct influence on where the shower and kitchen can be and can’t be. The size of the sleeping room has a large influence on the size and shape of the bed.
There are interdependencies everywhere.
Agile works perfect in the discovery phase, but you cannot expect the shower to be according to customer wishes when the water pipes are not even decided upon.
But you can agree on a temporary shower and kitchen which allows for bare necessities while the actual house is designed and build. And we all know it’s temporary because the customer is directly involved in these decisions.
What might not work is a particular process or tool.
When you try to implement Scrum as a process (it’s not!) you will fail. Scrum is nothing more than the contractors coming together in the morning: yesterday I should have delivered the gas connection, but we didn’t finish. Oh, then I cannot place the kitchen today, I need the gas connection! What if we work together on this, we can solve it in one or two hours right?
And this improved the development process right on the spot: review, forward view, adjust.
When it becomes even larger, an entire town area needs to be developed, things become even more complex. More logistics, more dependencies. No, you can’t plan everything, you should be able to adapt when the cement truck is stuck in a mud pool blocking the road for a day.
When Agile is not working in large projects it’s not an Agile project."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Curtis Tsang,Over 20 Year of Agile Software Development Experience,2021,0,"Agile (i.e. scrum aims at smaller processes with a development team size of 5-9)
In Scrum, for complex projects,
Break down the scope into several small projects and carry out them in order of priority
You can accomplish these tasks in parallel, but you may need more experience and even more risks to coordinate these tasks and then integrate them together.
Use some large scaled scrum framework,
i.e. LeSS, Nexus, SaFe framework and etc.
Learn more about large scale Scrum and agile approches: (here)"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Alpesh Vasant,Director and Principal Trainer (www.gacademy.in) (2010–present),2022,0,"Thanks for A2A
Well, A general statement that Agile Methods not be suitable for large companies may not be completely correct.
If large companies have a proper Agile Environment, Agile Team and equally responsible and Agile ready client then Agile can be suitable method for them.
More than a size of company it is the mindset of the people and culture of the organization that matters the most. Agile is a combined efforts by both project executor and client. So if they are in sink then even large organizations are good to go for Agile.
Another aspect is what kind of product the client wants to develop?
If client has clear picture (atleast 70 to 80%) regarding the product, it’s features and basic and supporting requirement right even before the start of the project then Waterfall is the better method.
However if the client has the idea about the basic features and then have wish list but not having enough clarity about them then Agile is the better method to adopt.
So in nutshell, in order to confirm the suitability of Agile, more than size there are other parameters which will contribute towards the decision regarding the methodology for the project execution.
With Regards,
Alpesh Vasant
(www.gacademy.in)"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Osama Asif,Chief Technology Officer at ENOU Labs (2017–present),2022,2,"I think the first thing to understand is that agile software development isn't a specific set of processes or methodologies, but rather a philosophy. Agile is all about making sure that developers and product owners can easily adjust their plans on the fly. It's all about keeping things flexible, so you can adapt to change as needs arise.
This is why it's not suitable for large-scale projects: it doesn't work well with very rigid timelines or requirements. You can't keep changing your deadlines every time something goes wrong, or add new features as they become available—because then you'll never get anything done!
The other issue with agile development is that it's best suited for small teams of developers working on relatively small projects. If you're working on something that requires more than one developer, you'll need to find someone who can coordinate all of them effectively and make sure everyone knows what they're doing at any given time. This can get tricky pretty fast if there are more than two or three people involved!
In agile software development, the goal is to deliver small pieces of functionality as quickly as possible. This is done by breaking down large projects into small, achievable tasks, and prioritizing them based on their value to the company.
The main advantage of this approach is that it lets you see how much work you've actually done at any given time. You can stop working if you're not making progress towards your goals, which means you don't waste time on work that doesn't matter.
However, this kind of workflow isn't suitable for large scale projects because it relies on the client or manager being able to break down the project into small tasks that can be completed within a short amount of time. If they aren't able to do this effectively then they can't prioritize correctly and ensure that important features are getting enough attention while less important ones aren't being neglected entirely.""
Want a custom website or software project done? Contact us!"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Bernie Kahn,"Former IT Project Manager, IT Systems Administrator, CSM",2024-01,101,"for agile teams to perform well, they need to work in an atmosphere of psychological safety; in many large companies or lines of business, this does not exist.
In large companies, there are often interdependencies between different initiatives; in agile, no one is usually tasked with communicating outside the team, so the interdependencies start to become risks.
Large companies are more likely to have large projects; Scrum, the most common form of agile, does not scale well; it is oriented around small teams. (4–12 people).
The values of many large companies are explicitly in conflict with the values stated in the Agile Manifesto. e.g., Some companies value documentation over working software."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Chuck Cobb,Agile Project Mgt Author and Instructor (Over 200K Students),2019,5,"It does work for large projects but it requires some skill to know how to scale it to large, complex projects. “Out of the box” Agile/Scrum is designed for small, simple, single-team projects. As soon as you get into multiple teams,
An additional layer of coordination and integration is needed
Some level of project/program management may also be needed
Integration with the company’s business objectives and other related projects or applications may also be needed
There are models for scaling Scrum but all of those things require some additional knowledge and skills beyond the basics of doing Scrum."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Tod Harter,Technical Architect (2017–present),2022,1K,"Why are various myths told about IT? lol. Go look at SAFe, it is a perfectly good example of a set of practices designed to do agile at scale. The answer you probably seek is to say that Agile Teams, such as SCRUM teams and XP teams, are small, and that these methodologies do not address techniques for coordinating between teams. So, an XP ‘two pizza team’ can obviously only reach a specific finite velocity due to the limit on team size. If that is insufficient to deliver the project in the required timeframe, then the methodology is insufficient. That is not the same as ‘not suitable’ because XP/SCRUM/etc. do not rule out additional mechanisms, and SAFe (there are others) supplies those.
TBH, this old canard exists to serve those who are not willing to adapt."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Joe Termine,Principal Software Architect at A Fintech Firm,2020,2,"I’d argue that it doesn’t work for small projects either, when it is applied poorly.
The trouble is that it is really hard to run Agile projects properly. When “Agile” ideas are applied poorly, they often lead to more interference with developers, less time to do the work, higher pressure, and demands to “go faster”.
Agile requires a great deal of team cohesiveness and routine communication. It’s hard to get that if you have a lot of people working on a project. It results in a lot of chatter and not enough work."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Martin Ingram,"Freelance software engineer, team lead and process coach.",N/A,0,"I’d say it’s because it’s not that there’s a problem with adopting an “agile” mindset. The problem is that the project is “large”.
One of the major issues that is somewhat addressed by adopting an “agile approach” is that requirements and priorities almost inevitably change over six months or more. If your project is likely to take longer than that, there’s a high risk that the deliverables will be at least in part irrelevant, and the project becomes a death march.
Agile is all about accepting the world that we live in, and that’s a world where things move really quickly."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Petri Heiramo,Certified Scrum Trainer at Scrum Alliance (2008–present),2021,5,"There is no reason why Agile couldn’t be used for large scale.
But large scale projects suffer from one big malady, regardless of whether we want to use Agile or traditional approaches - they are large. Everything is harder to do at “large”. There are just so many people and ideas to communicate that it is very difficult to do it. Also the sheer size of the software itself will start to present its own problems.
The reason Agile may seem hard to do at scale is mainly because most people still don’t know how to do Agile even in the small. There’s a lot of “Agile” projects that do so many things wrong. So many people are still using very traditional approaches, despite calling what they do with a different name. And if you scale something that doesn’t work in the small, how could it ever work in the large? With waterfall, at least we have people working in a constructive way. But what is the problem with waterfall, especially in the large? It is sloooow, expensive, and creates a lot of crappy software. But for a lot of people, that’s the only way they still know how to create any software.
However, we might actually want to present a case that Agile is the only approach that can succeed in the large. Two of the key problems in scaling up are coordination between teams and integration of all that software into a working whole. Agile provides a solution to both of those, in a way that can be made to scale, if just done right.
Good Agile seeks to minimize coordination between teams by using cross-functional teams that can independently take a piece of functionality and deliver it from zero to 100%, seeking to minize the technical and task coordination between teams. We are still left with coordinating the features, but it’s an easier challenge, since we can often find functionally meaningful segments in large projects.
The integration is “solved” by combining extensive test automation and automation of build & deployment. Any change done by any team can immediately be tested against the latest know working codebase, allowing any team to immediately confirm that their code is in alignment with everyone else’s. Instead of long-time separate branches, with high chance of compilation errors, we have an almost minute to minute knowledge of the state of the system. Any integration errors are likely to be very minor and can be handled immediately by the culprits. To enable this, we also need architectures that allow separation of code into independent units with clear rules of collaboration and coordination (see e.g. microservices).
There are other things, too, but those two things are the keystones of making anything work in large scale. And look for evidence. Check out what Google and Amazon are doing. Or Apple, or Facebook, or Netflix, or Salesforce, or so many other really big names in Internet and software business. Look at the myriad of all other companies that are striving to emulate what they have done. All of those have realized that waterfall doesn’t work, at least not in the large."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Chuck Cobb,Agile Project Mgt Author and Instructor (Over 200K Students),2021,1,"It is not accurate to say that “Agile software development is not suitable for a large scale project?” however, there definitely are some challenges that need to be overcome to scale Agile/Scrum to large, complex projects. Here is a response on that:
Chuck Cobb's answer to Why is it difficult to scale agile methods so that they can be used for very large software projects?"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Chuck Cobb,Agile Project Mgt Author and Instructor (Over 200K Students),2022,1,"Agile was originally developed around small, single-team projects and scaling Agile for larger, multi-team projects can be difficult. However, a lot of progress has been made in scaling Agile and it is being used for large projects. There is also a possibility of using a hybrid Agile approach."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Andy,Knows English,2022,0,"Because it requires far more dicipline, significant number of capable people, huge dependency management and trust that don’t exist in most organizations.
It takes years to build cohesive and capable teams and project is a temporary endeavor."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Naman Hover,Career Consultant at MSys Technologies (2012–present),2020,0,"To exacerbate the situation, members refered to absence of the board backing and reluctance of group to follow spry as reasons their coordinated activities fizzled. Since dexterous involves extensive changes like quicker discharge cycles and nonstop improvement, having assets and backing is basic to its prosperity."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Anatoly Spektor,"Founder of DefineAgile.com, Host of ""The Unusual Jobs Show""",2019,0,"The better question is: Who gave you that idea ? I have just finished working with a department of Fortune 500 company, that has 300 people in a department or working together doing Agile amazingly well. So my question to you: Why do you think so ?"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Stacy,Knows English,2021,0,"The required time is calculated based on the fact that the development speed is always constant. But, as we already understood, it is not. Therefore, even if everything else is done correctly, the time error can reach 100 percent or more when the planned amount of work is large enough."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Christopher Jefferson,Knows English,2021,0,"Possibly the biggest reason why agile projects fail in large enterprises is the fact that people just don't have experience with the methodology or how to integrate it. However, without the adequate knowledge, chances of failure in these cases are much higher.
#panlearn"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Miles Fidelman,"Systems Architect, Entrepreneur, and Policy Wonk",2022,1,"Agile Considered Harmful
I've been inundated with one too many articles/blogs/emails/..
https://www.linkedin.com/pulse/agile-considered-harmful-miles-fidelman/"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Anuj Shrivastava,Project Manager at Knorr-Bremse (2014–present),2021,2,"Thats a myth. Agile can be used for any project but offcourse there are challenges with the team
Agile development can work miracles not just for the SW, but for the HW, manufacturing or any type of the project
There is something called as Scaling of Scrum where different teams work together. The impedements are scaled to the highest level daily if its not solved.
Let me explain this in simple way
Eg: You are manufactuing a car. You will have smaller Scrum teams working on individual components or to start with you can have teams baseds
Each team will have a Scrum Master and they will meet in SoS (Scrum of Scrums) and similarly will the POs . PO cycle will help to align the most important valuable MVP to be priortise, not just at team level and also at organisational level
Similarly SM cycle will solve the impedements, cross team dependecies or waiting for each other
Finally there can be an EAT (Executive action team) who can present the status of project daily based on the Scrum cycles and development in just 5 min to the Project manager and MD/CEO or Sterring commitee of the Project who have to now support the team
Usually the problem today is most of the teams work as a single teams and not cooridinate or connect each other. Also the mails and reporting for what so ever reasons are just based on fromats and non sense data.
“Scaling Scrum and Cross functional team integration” is the key to make Agile development sucessful irrespective of the type of industry"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Don Taylor,"B.S. in Computer Science & Mathematics, The Ohio State University",2021,1,"Who said it isn’t? The onus is on them to explain why. Agile is simply a means for delivering the most value for your project’s budget.
What we really need to look at is why is Agile not suitable for really small projects? And that’s because any project management methodology is too much overhead to be tolerated for such projects. As it is, most projects funded by business are significantly larger than the projects you were assigned at University so some form of project management is needed. As I said, Agile is simply a means for delivering the most value for your project’s budget."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Anup Dash,Digital Transformation in Customer Experience,2021,101,"I may disagree with your opinion that
“Agile software development not suitable for a large scale project”.
I would say this in the following in the support:
SCRUM is used widely across every kind of industry as well as for projects of different scale.
There is no restrictions on the adaptation of the framework. Its purely driven by the organizational culture and implementation methodology.
Scrum has been used to develop software, hardware, embedded software, networks of interacting function, autonomous vehicles, schools, government, marketing, managing the operation of organizations and almost everything we use in our daily lives, as individuals and societies.
As technology, market, and environmental complexities and their interactions have rapidly increased, Scrum’s utility in dealing with complexity is proven daily. Scrum proved especially effective in iterative and incremental knowledge transfer. Scrum is now widely used for products, services, and the management of the parent organization.   
Scrum is:
Lightweight
Simple to understand
Difficult to master
Thanks for reading my answer and hope this was helpful."
