URL,Author,Author Description,Publication Date,Votes,Review
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Assistant,Bot,2024-08,0,"While Agile development has many advocates, there are several reasons some programmers express dissatisfaction with it:
Misimplementation: Agile principles can be misunderstood or poorly implemented. Some teams focus more on following rituals (like daily stand-ups) than on the core values of Agile, leading to frustration.
Pressure and Pace: Agile emphasizes frequent iterations and rapid delivery, which can create pressure to meet tight deadlines. This can lead to burnout and a perception that quality is sacrificed for speed.
Overhead: Agile methodologies often involve extensive meetings, planning sessions, and constant communication, which some programmers feel detracts from actual coding time.
Changing Requirements: While Agile is designed to accommodate changing requirements, constant changes can disrupt workflow and lead to feelings of instability among developers.
Team Dynamics: Agile relies heavily on teamwork and collaboration. In teams where communication is poor or where there are conflicting personalities, Agile can exacerbate issues rather than resolve them.
Lack of Documentation: Agile often prioritizes working software over comprehensive documentation, which can lead to knowledge gaps, especially for new team members or when revisiting projects.
Inflexibility in Practice: Some teams rigidly adhere to Agile practices without adapting them to their specific context, which can make the process feel dogmatic rather than flexible.
Management Misalignment: Sometimes, management may not fully understand Agile principles, leading to unrealistic expectations or a lack of support for the team’s needs.
These factors contribute to a perception among some programmers that Agile can be more of a hindrance than a help, especially when it is not implemented thoughtfully and adaptively."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Arno Brevoort,designing and writing code has paid the bills for over 20 years,2017,90,"Agile done right, is the way a band of programmers would organize their work. Once everyone is on location, before you get into the thick of things, brew a pot of coffee and have a quick chat. How are you getting on, did you run into any trouble, what shall we do today. Help / advice is offered where necessary and you carry on with the day. The programmers are talking to each other and helping each other out. Work is done as a team.
Agile done wrong, is a micro-managers’ dream. You can instantly pick on “failing” programmers, harp on why things haven’t been done, blame people. Instead of a collaborative meeting to plan the day ahead, it turns into a daily “progress report”, a “triage”, or a “crisis planning meeting”. The sign of this is the programmers no longer talking to each other in the meeting, keeping their heads down, and “reporting” up the command chain to a “scrum master” / “project manager” who is no longer involved in actually writing code.
The first Agile is a fantastic way to work. The second “Agile” is hell on earth."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Darryl Wagoner,Author has 1.3K answers and 544.7K answer views,2023,28,"What is Agile?
Scrum?
Kanban?
something else?
I really dislike Scrum and I am a Certified Scrum Master. Scrum will sooner or later end up with poor software. In ways, it is anti-agile because there are so many “processes”. The worst thing in my mind is the 2-week sprints. Programmers start out doing good work the first week of a 2-week spring, then start feeling the pressure to meet their sprint commitments and start rushing the work. Never ends well. What ends up happening is they pad the amount of time a task takes. So we spend time guessing at effort instead of doing the work.
Kanban, on the other hand, solves many of these problems, by removing some of the processes and working from a prioritized backlog (scrum does as well), but programmers take the highest priority task and work on it until done. No stand-ups, sprint planning, etc. Management hates it because they don’t ha...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Darryl Wagoner
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Jerry Westrick,CEO at Software House Merida (2016–present),2020,10,"Part one:
The “Agile Manifesto” which first coined the term “Agile”, starts off saying:
This is a study of some of the things that Small teams have used to achieve large results. Pick and use the things that work for you.
This is a far cry from “you have to …”, “You must …” as implemented in most companies.
Agile as I see it consists of workers who do undefined work using undefined methods. And a leader who’s sole purpose in life is to enable the workers.
Everything else is a big company trying to force structure and form on a process which was chosen because programming is so much faster without it.
Part Two:
I have seen many “agile projects” fail for the simple reason that the people ordering the software did not understand what was going on. If you are going to implement an “iterative” development process, please do yourself a favor and make sure your “Owners”, “Stake holders”, or “End Users” know exactly what they are doing.
I cannot tell you the number of times I have heard “Ready for Production” from the “End Users” when all major back end work is still “Simulated” by “End User” priorities. It is very difficult to keep your “End Users” expectations realistic when the screen looks perfect and seems to work."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Jacky Jackson,Software Engineer,2018,32,"Agile Manifesto and the four values
• Individuals and interactions over processes and tools
Resulted in endless interruptions while nobody bothers to write their thoughts down
• Software products over comprehensive documents
Results in ball of mud products with no documentation on what the hell the creators were thinking, and what it should be about. I wants those comprehensive documents back! Please.
• Customer collaboration over contract negotiation
Śo we accept collaboration in customers changing their minds every two weeks, and do not force them to make up their minds.
• Response to changes over observing plans
So we refuse to write anything down in a plan and just ‘do agile ‘ because it is ‘hip'…..
YES I TOTALLY AND TOTALLY HATE HATE HATE HATE HATE AGILE!!! I SPIT ON IT, I P!SS ON IT."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Joe Seabreeze,Programming for many years,2019,12,"Because it doesn’t work for every company/team for various reasons:
If you have bad project/product management from the start, Agile isn’t going to fix it. It will likely make things worse.
Some companies try to institute Agile practices even if their business model doesn’t require it.
Many managers don’t really understand what Agile is, so they’ll sometimes use it as a way to micro-manage. It’s easy to use an agile process for micro-management, which is a very stressful and unproductive way to manage a team.
It’s not easy for a service-oriented and reactive business to execute Agile development. How can a developer get anything done in a static sprint when they’re getting pulled into meetings and answering emails half the time? Basically, your development work slips every week, putting too much pressure on the developer.
If your business is highly regulated, it’s not easy to incorporate Agile development. Part of Agile is to reduce unnecessary documentation. With a highly regulated business, it’s all about documentation.
If your software platform has a large code base and doesn’t have a modular architecture, 2 week sprints are practically impossible. And once you start heading into one month sprints, well, Agile stops having any benefit.
If your whole organization doesn’t support Agile, then it will likely break down in the smaller teams that do. It’s not easy to work in Agile teams when your work environment as a whole isn’t agile.
The tagline for Agile at its inception was “For Developers”. In more cases than none, it has been the opposite. Poor Agile execution and micro-management puts way too much pressure on developers, so developers feel betrayed by a system that was suppose to be for them.
In the end, there are just way too many factors that can mess things up when using Agile. So it’s likely that low quality and emotional stress will outweigh any of the benefits that Agile is supposed to provide."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Jeff Gib,Author has 1.2K answers and 3.8M answer views,2019,15,"Scrum erases some of the essential activities of projects, mostly design decisions, necessary evils, getting things clarified so that the right decisions are made (RnD stuff). Here are a couple of examples:
Should we use RDB or NoSQL or combination of both? Ok, which implementation of those should be use? (Just examples…_) MongoDb + MySQL? How does Mongo handle our input or query needs. Hmmm, not very well. Why? Should we switch or tune?
What’s the best way to handle that data widget? Pre-process it once a day? Do it on the fly? Let’s pre-process every day at 4am. (Implement that but… by 4pm it’s too stale). Let’s re-implement it to do it on the fly. But we’ll need another server and interface for that.
How are we going to do auth/auth? What are the capabilities of that geo-spatial library? Does that API in XYZ allow us to do that? What’s a work around for that?
You get the picture. In scrum there’s supposed to be a story worked that you can demonstrate at the end of the sprint. Yeah, yeah, I’ve heard it all before about having stories to do these things. And that WOULD be fine if software dev professionals were running the show. I personally would have a story for each one of the above. The developer would then demonstrate / explain results at the end of the sprint to the team, NOBODY ELSE. But my Direct experience has been, as soon as one of these stories is in the backlog, along comes Joe Scrum Master or Product Owner or Manager and we start arguing about whether that’s a story. Here comes the time wasting nonsense - Can’t we work it into this or that? Or, what can we demo when that story is done because that’s the only way we show progress. You can’t demo THAT! It’s endless nonsense on the dogma that has become scrum.
There’s alot more wrong including how to handle defects flowing in from customers and previous iterations, how to refactor something, etc. I’ve heard the answers from scrum “professionals” and it’s like we’re trying to find the answer to a car question in a yoga manual, i.e. I’m fixing a headlight but that needs to be done in the downward dog position. Everything but the simple stories are unnatural.
Oh, and don’t forget the daily status meetings. Don’t even try to convince me they are Anything But. That’s what they are, that’s what they will always be. A way better way to handle that is a dev is supposed to have responsibility to report potential slippage. If somebody isn’t doing that - then THAT’s when a manager should pop their head in.
It’s a very unnatural, babysitting-like environment."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Gniewomir Świechowski,"Full-stack developer, occasionally tech lead",2021,6,"I can speak only for myself, but it may be representative for at least part of wider group of so-called “agile-hating developers” so I will be using plural. :)
We do not hate agile. We despise how companies are often smuggling waterfall under agile disguise.
Problem with current understanding of what agile is that people in charge often associate it with particular implementation. Scrum for example. They expect that we will religiously adhere to some arbitrary set of rules with disregard of them working or not for our use case - which is exact opposite of being agile and constantly looking for what works best!
At the same time, when you are “agile” - in aforementioned way, you are still expected to provide waterfall-like estimations for things months away, which you rarely can reason about - without being a prophet, as the same people will change their requirements multiple times, without giving you space for changing guesstimation, they forced you to make before.
It is even more problematic, as this kind of being “agile” is very popular in businesses outside tech sector (most of them!), which means that whatever they have is probably in state of disrepair, obscure for any reasoning about it and very, very fragile. Which makes even 2 week predictions about what we will be able to do at best unreliable and at worst pure fantasy. But don’t expect to be given much space to remediate this problem.
So “agile”(note quotes) lovers create teams that chase this arbitrary deadlines (re-implemented from waterfall) with disregard for technical debt, basic hygiene (understood as CI/CD, automated testing, developer experience, developing common language with business etc.) and quality (re-implemented from waterfall) but with shitload of often unproductive meetings (re-implemented from waterfall).
Teams that are as much “agile”, as the where 20-yrs ago, but more frustrated because all of the bullshit pretending around.
What we hate is when people grab sexy buzz-word and slap it on waterfall-like process without any understanding there are not many canned answers in this field.
To be truly agile everybody in organization have to accept, embrace this constant state of flux every business and every code base is in and act on it - implementing more iterative process, not cling to illusions of predictability under disguise of being “agile”.
We love being agile, we hate being “agile”."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Amir Hakim,8y,2016,18,"Is nuclear power the biggest evil ever invented ? or is an incredible source of energy ?
Answer: it depends on how you use it!
Currently: Scrum is anti-engineering.
Scrum like everything on earth is a powerful noble idea that capitalism took and turned into an evil monetisation tool, just like Christmas and Vegetarianism. The way it’s usually used, makes it nothing more than continues rapid prototyping while ignoring the technical debt, to generate your first sale and may be sell off the company, then the horrible code base becomes someone’s else problem. It is used by non-technical bosses to drive developers and work them to the bone. To micromanage everything and ask you to log every minute of your day. All the accumulated technical debt doesn’t matter because all you need is to show your feature to sell them. Then once you do, you blame the current heroic development team for the bugs and you replace them with others. It is used so your trade code monkey are driven to produce, while the engineering talent is suppressed. It pushes Devs to choose the fastest solution to implement, not the best solution, because who has time to research and implement that new library or framework that will make you future proof, when you can hammer out few lines now, then when a change comes along, you delete that crap and start from zero. Why try to abstract and code re-use, when you can simply copy-paste. Because when you over or under estimate your user story, management look at you as either a thief, or lazy, or both. Because when you try to object and raise concerns about being hampered by all the tracking and estimation, management says: light process is a privilege that you have to earn. And don’t blame the scrum master for being a management puppet that is only there to spy on the team because he is not trained, but we don’t have the budget for real scrum training. But we are scrum.
Others agree as well
Why do some developers at strong companies like Google consider Agile development to be nonsense?"
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Tom Rose,Studied at King's College London (KCL),2020,10,"Agile is fine. We should all try to be agile
SCRUM is not Agile, never was, never will be. It goes against the most important Agile principle, “People and Interactions over tools and process”
It might be a good methodology for some projects [it is!]. It is most certainly not the one and only good method for everything.
It often takes away the pleasure in work that used to be felt by many excellent programmers that for decades delivered good quality software without the help of SCRUM. That is enough to treat it with suspicion. And it is true of both “real” SCRUM and the cargo-cult variety.
I have never yet met a programmer that asked be part of a SCRUM team. So far as I can see it is always imposed from above by control freaks with the word “manager” or “director” in their job title, but with a complete lack of any ability to manage or capable only of directing in the wrong direction."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Jeff,"developer, author: 5 books; Clean Code contributor; geek",2019,4,"As Robert Garrett suggests, it’s the specific implementations and trappings of agile—not the underlying values or principles themselves—that can be the problem. The values of agile might seem motherhood & apple pie, and most people wouldn’t dispute them. The principles have a bit more meat in terms of describing how to begin implementing agile. If you’re not familiar with them, take a few minutes to read them; most people similarly won’t disagree with much here.
Some examples of things that people think are “agile” but are specific to some implementation:
Stand-up meetings / daily scrums—perhaps the one thing that’s most universally botched. They are intended to be a quick touchpoint and plan for the day, but devolve into boring, glorified status meetings for many teams (mostly because most teams aren’t truly collaborating like agile says they should). There’s really no standard set of questions, but too many teams somehow have fallen into the “what’d you do yesterday, what are you doing today” rut.
Pair programming. Comes from XP. Many devs really hate this idea, though for those who aren’t vehemently averse to it, it can be enjoyable and highly productive.
Specific story format. “As a / I want to / so that…” A nice idea. Not an absolute must.
SAFe. A big bloated thing with lots of buzzwords. It might be beneficial to larger organizations with the need to coordinate many projects. Don’t do it unless you know you need it (and then, consider something else like LESS). Don’t do it until you’ve learned how to get at least one agile team to click, and really click well.
Agile implemented in a rote way involves lots of meetings—something we wanted to get away from 20 years ago when I learned about XP. The meetings ain’t the thing. I understand why the typical developer reaction is that it’s meeting heavy.
Further turning people away: The proliferation of the Agile Expert—sometimes a ScrumMaster—someone who’s learned all the basics & buzzwords, just enough to be dangerous, dogmatic, and annoying.
Agile can and does work very well, and in a way that’s enjoyable and not off-putting. And standup meetings, pair programming, story formats, and iteration planning meetings can all be valuable tools, particularly to a team new to agile. But learning how to make them effective and not onerous is also important, as is learning when something better is called for."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Vatsalya Jain,Studied Marketing & Information Technology at Symbiosis,N/A,1,"One fundamental challenge I see is the emphasis of ‘doing’ Agile and lot of focus of the Scrum Master and Project Managers to ensure things are done to adhere to the agile guidlines.
For eg: Agile speaks about estimating a story in terms of story points, which is a comparative analysis for a developer vis a vis the development he has done in the past.
However, many of the scrum masters I speak to during interviews state that
they follow the logic of 8hrs = 1 story point
When I probe them how would this hold true for Person A ( who is a developer ) vs Person B ( who is an architect) , the answers are not there yet.
While Agile is a framework for the teams to enable to work efficiently, the governance around the measurements mechanisms and the lack of understanding of true agile principles is the biggest challenge."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Bob MacNeal,Software Product Development (1989–present),2018,3,"We don’t…at least those of us who’ve been doing this for a while.
Agile has been a given on virtually any software team for a least a decade. But, like one’s political views, or one’s religious beliefs, one doesn’t wear one’s agility on their sleeve.
Seasoned developers simply have assimilated the relevant guidance from the agile manifesto, and it’s predecessor XP, and moved on.
If one behaves like a clue-challenged clown (e.g., referring to anything in the “Scrum Guide”, or mindlessly engaging in the gratuitous ceremonies of various “methods” as if anything in software could possibly be applicable to all situational contexts), seasoned developers will politely ignore you.
It’s not that seasoned developers dislike agile — I’ve yet to work with a developer who’d disagree with the guidance in the agile manifesto — it’s simply that there’s a whole industry of charlatans, mountebanks, and overpaid coaches who’ve sprung up around “the agile” that stokes our ire."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Peter Pang,Studied at Corning Community College,2019,11,Why hate Agile? It is a great opportunity to micromanage the developers and keep their noses on the grindstone at all times. It is yet another management fad which the humanity will survive. It is as simple as that.
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Robert Garrett,Independent I.T. Consultant,2019,3,"Because they're finally wising up. It's not that the underlying principles of “Agile” ( which actually should be called agile development ) are flawed, they aren't. They're actually quite good. The problem lies in how the majority of organizations have gone about implementing (I should say TRYING to implement) them. They've turned what should be a set of simple ideas into a monstrous behemoth of regimentation, rules, endless meetings, and mindless obscure jargon that is anything BUT “agile” and is now in the process of collapsing under its own weight. Which is exactly what SHOULD happen."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Mario Ray Mahardhika,Engineering Manager at SIRCLO (2022–present),2021,2,"Like everything else in this world, given enough population, every competing options will have supporters, and the other way around, haters.
Not all developers dislike agile. I don’t. I just think it shouldn’t be run as is, but adjusted to your environment, including your customers. For example, scrum sacred sprint mechanism isn’t acceptable for customers when they face a bug that can both be identified and analyzed quickly with one line fix that should be done in 5 minutes, they have to wait for 1–2 weeks. This is a common case...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Mario Ray Mahardhika
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Robin Dymond,"CST, Expert trainer and coach in Scrum Agile and Lean. 26 yrs in software.",2021,2,"Before asking why, ask if.
In a large scale transition to Agile from waterfall at a top US bank, morale was surveyed before the transition and after 6 months of working in an Agile way. The survey was given to everyone who was transitioning to a Scrum team. The survey found a marked improvement in morale and job satisfaction. In a healthcare software company in the EU with 400 developers we found the morale improved and people were happier.
In working with companies across the US, EU and Canada in Agile transitions the large majority of people doing the work like the change to Agile and don't want to go back to waterfall.
Calling waterfall traditional is a bit silly. The first Scrum project was in 1993, the first paper in 1995 and the Agile manifesto was created in 2001. So Agile isn't new, especially when compared to the speed at which technology changes."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Chuck Cobb,Agile Project Mgt Author and Instructor (Over 200K Students),2021,2,"Not all developers dislike Agile:
Some developers like to simply sit in their cube and write code without interacting too much with anyone (either members of the project team or business users). Anyone who thinks that way will probably not like Agile.
A more mature developer recognizes that developing sophisticated software solutions is something that requires teamwork and collaboration not only with other team members but also with the ultimate business users. More mature developers who have that attitude will appreciate why Agile makes so much sense and enjoy the additional responsibiliities of an Agile environment.
The role of a developer in an Agile environment goes beyond simply writing code and some developers do not want that additional responsibility. Here’s an article with more detail on that:
What Is an Agile Developer? How Is the Role Different?
The role of an Agile Developer in an Agile project is not well-understood and many developers may have difficulty making this transition.
https://managedagile.com/what-does-it-mean-to-be-an-agile-developer/"
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Miles Fidelman,"Systems Architect, Entrepreneur, and Policy Wonk",2016,25,"Because it's broken. For incremental changes, to small projects, it works fine. For large, complex systems, it ignores anything resembling well thought out architectural design - leading to truly hideous systems."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Sneha Gangan,Studied at LFS,2015,15,First of all the time Limit. It stops the creative process that takes time to develop.
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Anthony Minessale,"Founder, CEO at SignalWire (2018–present)",2015,23,Software development is chaos. Agile is an attempt at order. Order can be brought to chaos only temporarily. Anyone who hates on it probably is being forced to follow it at all times. Its good to have guidelines but rules are meant to be broken when the chaos is at a maximum. The secret that takes most 10+ years to learn is to avoid religous affinty to any one style or practice for anything to do with tech but be willing to borrow from any of it.
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Aniket Kulkarni,Former Senior Director of Engineering at Rackware (2019–2022),2019,1,"In my personal opinion, agile is used half baked way, most times. Most companies use it to just short circuit good development processes as they want product ‘now’. Such partial and meaner agile adoption to not compromise on time burns out developers. Depending on company size, most times, developers may not even get a proper say in deciding estimat..."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Anthony Atkielski,Author has 28.2K answers and 13.1M answer views,2021,1,"They don’t all dislike Agile; some worship it.
Agile is designed to make poorly managed projects look like well managed projects, by lending an illusory legitimacy to a number of bad practices. It provides an excuse to do the wrong things and call them the right things, because the wrong things are enshrined in a formal gospel. It provides disguises for “developers” who are lazy or incompetent. It makes busy work for people who are not developers or prefer to play games with others rather than code.
Needless to say, I don’t like Agile."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Jos Buurman,Worked Agile/Lean since long before they became hype,2021,1,"We can view Agile, as written down in the Manifesto and elaborated in principles, as a problem solving process: how do we prevent not delivering valuable software to customers?
Management of organisations often have different problems such as: how do I achieve my targets and how do I manage my budget constraints?
This often leads to top down mandated “Agile” where agile is nothing more than a way to keep track of progress and trying to speed things up.
Keeping track and speeding up then become the goal, instead of these two being the result of delivering valuable software to customers.
It’s mainly this kind of pseudo-agile which is loathed.
Another facet of the problem is that agile working does not suit every kind of work. It fits development with a fair amount of uncertainty and no hard deadline. If a mandated regulatory change hits you, to be delivered in x months time, you might want to resort to a more planned approach such as PRINCE2/waterfall.
Organisations which attempt agile in such circumstances might find that it doesn’t work well and blame agile."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,David Hayden,30 years of professional programming.,2021,6,"Agile is “software development as project managers want it done.” It solves one problem and creates another.
The problem is solves is one where the software never gets finished, doesn’t work, doesn’t meet the customer’s needs, etc. These are real problems in some organizations and Agile will definitely solve them.
The problem it creates is that it values code over design, and functionality over maintainability. The idea is to get it working and ship it out. Unfortunately, the real cost in software isn’t in the initial implementation but in the maintenance. If you don’t have a solid design and good design documentation then you’ll paint yourself into a corner is no time.
I work in an organization that did “waterfall” development very successfully for many years. High level management came along and imposed Agile on us to solve a problem that we didn’t have."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Ryan Mattes,I use several different languages on a daily basis,2018,3,"Because its most common uses are destructive micro-management, forcing developers to work long hours, and avoidance of proper planning.
That's not what it was intended for, and it can work well when implemented appropriately, but that's mostly how it's used today."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Steve Manning,Software Engineering Manager (1996–present),2021,4,"By and large I dont think we hate agile. We hate agile ceremonies and realize that most of agile has nothing to do with programming software. If we were to stop pretending to do agile today all that means is that I wouldn’t have a standup tomorrow morning. I still write the same software.
Just remember… agile isnt for the developers. Its for the people who care what the developers do."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Ray Gardener,Author of Vacant Fire (inspired by Blade Runner),2021,2,"Because of the way Agile is misimplemented. It's a textbook example of something that works great in theory but terribly in practice, because it doesn't take human nature into account."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Acko Manah,I am the miserable father of a Gen Z,2024-02,0,"Because it is bull. Really in a different context a report was described by Stormin Norman as: ""bovine scatology.""
He wasn’t talking of Agile but it applies. imagine having scrum each morning at war!
Agile tries to replace people with process. It is impossible to replace a dedicated team of skilled people with a good team leader with process. You are wasting time any paying a scammer. Design and development of software is part engineering; part art."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Chuck Cobb,Agile Project Mgt Author and Instructor (Over 200K Students),2021,2,I don’t believe your supposition that “software developers hate Agile” is correct. There probably are some software developers who don’t like Agile because it imposes additional responsibilities and accountability on them beyond simply writing code. They have to take full responsibility for their own work and collaboratively work with a team of developers and business people to develop effective business solutions. Many developers see the increased responsibility and empowerment as very challenging and motivational bug some people just want to write code.
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Sanket,Lead Engineer,2019,0,"It's not the Agile which made developers turn against it , it's the way you implement/adopt in your project .
People have lot of misconceptions about the process and when they apply it to project its becomes very hard to maintain.
Agile is their to simplify , but doesn't mean it has fit in to all kind of projects .
Basic thing is to identify whether the kind of projects which you involved is good enough to adopt Agile.
It's not mandatory to fit into agile for every project you do .sometimes waterfall model works best ."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Chuck Cobb,Author has 15.8K answers and 8.7M answer views,2019,2,"What evidence do you have to support that assertion? I doubt that is the case. If developers do turn against Agile, it is more than likely because Agile increases the level of responsibility of a developer significantly beyond simply writing code and many developers may not want that additional responsibility. Here’s an article with more detail on that:
What is an Agile Developer? How is the Role Different?"
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Greg Beutler,26 yrs as a systems engineer,2021,1,"dunno , could be they have had a bad implementation
or poor training, worked for us at the last 3 companies I worked at"
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Chuck Cobb,Agile Project Mgt Author and Instructor (Over 100K Students),2021,1,Probably because a lot of software developers just want to sit in their cubes with their headsets on listening to tunes and write code. Agile forces then to interact with other people and take on additional responsibilities beyond just coding.
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Dale N Reynolds,Studied Mathematics & Computer Science (Graduated 1965),2021,2,I know of no software developers who do not like agile much better than traditional. I know hundreds of software developers.
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Luis Espinal,Working as a computer scientist since 1994,2019,1,"Because we are emotional creatures deeply set in our ways.
On the one hand, we have undiscipline cowboys that will hate anything that makes them change their way (Agile included.)
On the other hand, we have developers that have run into institutions that have some horrible process that they call “agile”, and, in some perverted form of Pavlov’s conditioning, they have developed an aversion to the term (never knowing or bothering to know if that was actually “agile.”)
Don’t get me wrong, there are issues with Agile. But most of the hate (or love) for Agile is just emotional, uneducated non-sense."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Andy Brandt,"PST with Scrum.org, Agile practitioner since 2006.",2018,0,Because these days many of them experience all kind of idiocy and dysfunction under that label and many are too lazy to actually read or attend a class or a meetup to actually try and understand what it is about. You would be amazed how few Scrum Masters read the Scrum Guide let alone a book about the subject.
