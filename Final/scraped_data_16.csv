URL,Author,Author Description,Publication Date,Votes,Review
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Andre Theus,VP Marketing at ProductPlan (2015–present),2018,3,"I do not support the statement that agile software development is unsuccessful in large organizations. There are plenty of examples of large organizations that successfully practice agile today, like Amazon, Google, etc.
But in general, large organizations are just having a harder time to implement agile principles. And I would say that this is primarily the case for 3 reasons:
Herding lots of people is a slow process.
Breaking human habits is extremely hard.
The table stakes are higher for long standing organizations.
I recently moderated an expert panel on the topic of driving innovation in large organizations. During the webinar the panelists uncovered 8 ways to use agile principles to drive innovation:
Trust and autonomy empowers teams to innovate
Access to customers reduces innovation risk
Retrospectives drive continuous improvement
Communicate with stakeholders more frequently
Align on the fact that priorities will change
Remove specific dates from your product roadmap
Talk in broad themes rather than features
Evangelize the “Why”"
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Bruno C Furtado,Agile Coach at Itaú (2016–present),2018,1,"Change management is not trivial for large enterprises. It takes a lot of effort to adjust the current processes and practices, maintaining everyone's safety, aligning enterprise-wide clear drivers, and measuring progress on this journey.
A large enterprise Agile transformation has a much more complex set of challenges than startups when it's existing culture is based on command-and-control, fear of failure, and micromanagement. Add this to the complexity of communication throughout the whole company! Definitely, not a piece of cake!
However, this set of challenges can be overcome when you have clear expected outcomes (responding more promptly to market shifts, delivering value in smaller batches and more frequently, etc.) and work with both C-level executives (top-down approach) and analysts/operations (bottom-up approach) in order to reduce friction."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Pascal Bernard,President at Projeqtor (2015–present),2021,2,"Large companies have heavy hierarchic structure, and each top level required for commitment on what will be done. Agile methods are not good at that.
Agile methods need small teams. So the work must be split into small parts to manage them with Agile Methods. This is not always possible with very large projects and sometimes effort spend to split the tasks and to merge the results is more than what Agile Methods cound bring
Agile methods require highly autonomous team members, with great experience. Large companies ofter hire newbies, that are cheaper and more easy to enrole in the enterprise way of doing things."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Chris Cochran,Agile Coach (2013–present),2020,3,"Many times when done properly, Agile doesn't fail at big companies.
But when it does, there are at least 3 possible reasons: inappropriate agile methodology or framework, poor alignment, and not strong enough upper management support. Please allow me to discuss in a bit more detail below.
Selecting the wrong agile methodology or framework: You can use a knife to cut a steak, that is the correct ‘tool' for the job. You can actually use a pair of scissors, but it won't be appropriate nor would it be efficient. On the other end of the spectrum, you can also use an electric saw, but that would be overkill (not to say, will most likely cut your steak into shreds). So we need to select the correct tool for the job. Too often, we see people force one form/type of Agile Methodology that is not a good fit for the situation and then blame agile “when it doesn't work.”
Poor alignment: Many times as well, I've observed that certain organizations 'allow' the development teams to practice Agile Methodologies but don't provide proper guidance and feedback mechanisms on what to develop. You can have teams (and teams of teams for that matter) that work agile, but if what their working on and their resulting output is not aligned with the following a) market conditions, b) what the client really needs, and c) the management & company priorities are, then it really doesn't matter much. If the end product is not properly aligned with addressing the real problem and providing value to the bottom line, then it doesn't really matter how we work under the hood.
Management support is a major contributory factor for Agile to work in big companies. These companies already have an established standard way of doing things, they have departments and groups that specialize work, there is a value stream as well as a financial process that needs to be respected (or at least taken into great consideration). We can't just change things, revamp the way we work → suddenly do things Agile' with utter disregard for its effects on the rest of the organization. Agile transformation needs a sponsor in upper management, not just to fund and give it blessing to continue (or even start the transformation). It also needs somebody high enough in the corporate ladder to coordinate the impact of the Agile transformation. If we change the way we work towards Agility but nobody is sponsoring our change and coordinating our changes with the other departments then roadblocks and saboteurs will be harder to address.
A number of agile scaling frameworks are also available for big companies. But we also need to look at it from a pragmatic point of view and tweak those as and where needed for a custom fit. We can't be too dogmatic and force a square peg on a round hole. Out of the box it seldom works when applied as is right away. For some company contexts, a transition state may need to be identified before that can fully transition to the final state described in the chosen scaling frameworks. Similar to point number one above, we also have to choose the best fit scaling framework for the company (which depends on many things, including current agile maturity, hierarchical structure, among others).
I've tried to provide as much detail. But if you would like more details for the points I mentioned, we can discuss more in the comments section. I hope this answer helps."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Chris Lukassen,Author of the Product Samurai,2019,144,"Because it is not a method but a way of thinking. Allow me the following metaphor:
If karate were a method, one could simply mimic the moves and become karate, if judo were a method we could study the mechanics and instantly be able to breakfall, if jiu-jitsu were a method we would be able to attend a two day training and counter any assailant.
If you want to become proficient you need to practice until it becomes the new self and you behave in this fashion without thinking about it. You may never become as good as someone with more talent and there is always more to learn.
Agile fails at big companies because it is treated like a trick or something you can install, and not as the behavioural change that it is.
P.S. for those not into martial arts, replace with: painting, ballet, cooking, golf etc."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Alpesh Vasant,Director and Principal Trainer (www.gacademy.in) (2010–present),2022,0,"Thanks for A2A
Well, A general statement that Agile Methods not be suitable for large companies may not be completely correct.
If large companies have a proper Agile Environment, Agile Team and equally responsible and Agile ready client then Agile can be suitable method for them.
More than a size of company it is the mindset of the people and culture of the organization that matters the most. Agile is a combined efforts by both project executor and client. So if they are in sink then even large organizations are good to go for Agile.
Another aspect is what kind of product the client wants to develop?
If client has clear picture (atleast 70 to 80%) regarding the product, it’s features and basic and supporting requirement right even before the start of the project then Waterfall is the better method.
However if the client has the idea about the basic features and then have wish list but not having enough clarity about them then Agile is the better method to adopt.
So in nutshell, in order to confirm the suitability of Agile, more than size there are other parameters which will contribute towards the decision regarding the methodology for the project execution.
With Regards,
Alpesh Vasant
(www.gacademy.in)"
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Don Taylor,Decades of Software Development Experience,2020,101,"Momentum. Isaac Newton defined momentum as the product of mass and velocity. In a company the people are the mass and all the current project initiatives and business operations are the momentum. How many times have you heard someone say “but that’s the way we’ve always done it!” That’s momentum.
According to Newton if you want to change the direction of an object, in this case an organization, then you need a force. Force is the product mass and acceleration and acceleration is the change of velocity. Putting it all together force is the change of momentum over unit time. The more momentum you have then the more force that’s required to change your direction.
Now look at our big company. Lots of momentum. Takes a lot of force to change that. People almost always underestimate the force required to change that momentum and so they fail. Even people who know that underestimate the force required and still end up failing.
Organizational change is hard. Real hard."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Nivedita,MBA from Indian Institute of Management Calcutta (Graduated 2020),2020,2,"Firstly, let me introduce the great Manifesto for Agile Software Development
Individuals and interactions over processes and tools
Working software over comprehensive documentation
Customer collaboration over contract negotiation
Responding to change over following a plan
I have been practicing agile for the past 7.5 years and in my free time I study about various case studies in Agile. This bring me to the next question : how did agile gain prominence? In a world of software where hardware and software are in an never ending race to be most sophisticated, Companies wanted to have a competitive advantage in term of
Computing power,
Goto market speed
And knowledge management
That’s why agile became popular.
But what to big companies ( that mostly followed waterfall model ) forgot was Agile is a framework and frameworks get your thought process organised so that you get to the solution faster. People assumed that being agile will help them accomplish a task which is not at all right.
There has to be CEO buy-in when it comes to being Agile. In big companies where executive team consists of more than 25 leaders (combine directors , VPs, SVPs, President, CEO) unless the top leadership is convinced on implementing agile and there is a strong execution team in place, following agile becomes difficult.
Thirdly, in big companies there is heavy reliance on the requirement document. It is expected that the requirement document should cover every use case under the sun. This h is not possible because products are primarily built to solve customers needs or cater to their preferences and we all know that needs and preferences change.
There are many other points that are covered under the following links:
Agile and DevOps are Failing in Fortune 500 Companies - Plutora
Top 8 Reasons Why Agile Fails in Large Enterprises - DZone Agile
Why Agile Fails in Large Enterprises .
Hope this helps, Thanks
Nivedita | IIM Calcutta"
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Sai Goutam,Manager-IT & Analytics,2021,1,"Yes, I does work.
But the catch is it requires meticulous planning, stakeholder commitment and an agile team that is self managed and cross-functional.
The notion of Agile doesn't work for large software projects is changing as many large organizations are embracing Agile for their Digital Transformation exercise, which are typically large.
Few Reasons for failure:
Stakeholders buy-in.
2. Lack of getting in right team.
3 .Enterprises seem agile as theoretical approach."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Bernie Kahn,"Former IT Project Manager, IT Systems Administrator, CSM",2024-01,101,"for agile teams to perform well, they need to work in an atmosphere of psychological safety; in many large companies or lines of business, this does not exist.
In large companies, there are often interdependencies between different initiatives; in agile, no one is usually tasked with communicating outside the team, so the interdependencies start to become risks.
Large companies are more likely to have large projects; Scrum, the most common form of agile, does not scale well; it is oriented around small teams. (4–12 people).
The values of many large companies are explicitly in conflict with the values stated in the Agile Manifesto. e.g., Some companies value documentation over working software."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Jos Buurman,Worked Agile/Lean since long before they became hype,2019,1,"Agile works for large projects, but first we need to establish what Agile is.
You can read my explanation in this answer: Jos Buurman's answer to What the four values outlined in the Agile Manifesto?
In brief this answer showed an agile bed developer who discovers that the customer has sleep apnoea which it impossible to sleep regardless of the mattress.
When it comes to large project we are not talking about a bed, but about rebuilding an entire home. And when you view it this way you directly realise that everything is connected. Your decision where to put the water pipes has direct influence on where the shower and kitchen can be and can’t be. The size of the sleeping room has a large influence on the size and shape of the bed.
There are interdependencies everywhere.
Agile works perfect in the discovery phase, but you cannot expect the shower to be according to customer wishes when the water pipes are not even decided upon.
But you can agree on a temporary shower and kitchen which allows for bare necessities while the actual house is designed and build. And we all know it’s temporary because the customer is directly involved in these decisions.
What might not work is a particular process or tool.
When you try to implement Scrum as a process (it’s not!) you will fail. Scrum is nothing more than the contractors coming together in the morning: yesterday I should have delivered the gas connection, but we didn’t finish. Oh, then I cannot place the kitchen today, I need the gas connection! What if we work together on this, we can solve it in one or two hours right?
And this improved the development process right on the spot: review, forward view, adjust.
When it becomes even larger, an entire town area needs to be developed, things become even more complex. More logistics, more dependencies. No, you can’t plan everything, you should be able to adapt when the cement truck is stuck in a mud pool blocking the road for a day.
When Agile is not working in large projects it’s not an Agile project."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Eric Litovsky,Principal Software Engineer at Grey Swan Inc (2014–present),2020,183,"In general, it doesn’t. That is to say, most large organizations understand the process and bring highly skilled, competent managers to administer it.
In those cases where Agile fails, it can be due to several components:
Customers: Cannot always commit to a feature set, or are in a constant state of discovery and revision. Too many stakeholders often muddy the requirements and cause sprints to fail, or simply extend the length of time it requires to answer questions from the dev team and product owner.
Management: They interfere in the Agile/Scrum process and either insert themselves directly into the process, or demand behavior that is contra-indicated in Agile. Some managers need to exert control and be included in every decision which is the opposite of what Agile aims to do.
Scrum: It’s a lifecycle management system which has not evolved very much in over 24 years. In contrast, just look at everything that has happened to the software industry in the same 24 years. Almost everything else has changed. Scrum does not always adapt well to modern paradigms, and is often a forced fit. Those who believe in it and practice it are also constrained by it. The key to Agile is adapting only what works, but scrum is usually an all-in approach. Very few organizations are willing to bend the scrum guide to better fit the team which leads to the next point:
Engineers: These are practical people mostly focused on technical outcomes. They need to feel empowered in their domain to make meaningful technical decisions and allocate their time with a sense of priority and impact. They have a workflow that is technical, often fragmented, and loaded with dependencies and precedence constraints. This means they need freedom to optimize and refactor when they see an opportunity to do so. Scrum strictly forbids this. This drives many engineers crazy. One of my biggest problems with Scrum is that it constrains what I can and cannot work on. This makes it very hard to innovate, and even harder to optimize. An optimization which may have minimal impact often gets pushed in favor of feature/story commitment and by the time it’s in the sprint the scope of impact has grown substantially.
Agile is getting pretty long in the tooth, and may not be around in it’s current form for much longer. There are better ways to manage project lifecycle which conform to the way the team prefers to work (Mobbing comes to mind) and creates better outcomes for customers with fewer metrics and charts."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Joe Termine,Principal Software Architect at A Fintech Firm,2020,2,"I’d argue that it doesn’t work for small projects either, when it is applied poorly.
The trouble is that it is really hard to run Agile projects properly. When “Agile” ideas are applied poorly, they often lead to more interference with developers, less time to do the work, higher pressure, and demands to “go faster”.
Agile requires a great deal of team cohesiveness and routine communication. It’s hard to get that if you have a lot of people working on a project. It results in a lot of chatter and not enough work."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Martin Ingram,"Freelance software engineer, team lead and process coach.",N/A,0,"I’d say it’s because it’s not that there’s a problem with adopting an “agile” mindset. The problem is that the project is “large”.
One of the major issues that is somewhat addressed by adopting an “agile approach” is that requirements and priorities almost inevitably change over six months or more. If your project is likely to take longer than that, there’s a high risk that the deliverables will be at least in part irrelevant, and the project becomes a death march.
Agile is all about accepting the world that we live in, and that’s a world where things move really quickly."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Chuck Cobb,Agile Project Mgt Author and Instructor (Over 200K Students),2019,5,"It does work for large projects but it requires some skill to know how to scale it to large, complex projects. “Out of the box” Agile/Scrum is designed for small, simple, single-team projects. As soon as you get into multiple teams,
An additional layer of coordination and integration is needed
Some level of project/program management may also be needed
Integration with the company’s business objectives and other related projects or applications may also be needed
There are models for scaling Scrum but all of those things require some additional knowledge and skills beyond the basics of doing Scrum."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Trun Nguyen,Project Manager at NFQ Asia (2020–present),2023,0,"Do you really think so? Agile is a mindset. In another view, it is just a tool. So the success or fail is totally depended on the skill and capacity of the one who use it."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Robert Garrett,Independent I.T. Consultant,2020,0,"Agile itself, or at least the concepts of Agile, don’t fail. What fails is the way the large organizations go about implementing something that they pretend is Agile. Instead of being a lean, relatively simple, and responsive set of ideas and practices, they build a behemoth of additional bureacracy, jargon, and fl..."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Christopher Jefferson,Knows English,2021,0,"Possibly the biggest reason why agile projects fail in large enterprises is the fact that people just don't have experience with the methodology or how to integrate it. However, without the adequate knowledge, chances of failure in these cases are much higher.
#panlearn"
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Chuck Cobb,Agile Project Mgt Author and Instructor (Over 200K Students),2019,0,"Because if is very difficult to do and requires a lot of training to do it effectively. It can also require some level of organizational transformation. Some companies just take a “slam dunk” approach, attempt to do it mechanically without really understanding the principles and values behind it at a deeper level and they don’t do any organizational transformation to make it work at an enterprise level."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Naman Hover,Career Consultant at MSys Technologies (2012–present),2020,0,"To exacerbate the situation, members refered to absence of the board backing and reluctance of group to follow spry as reasons their coordinated activities fizzled. Since dexterous involves extensive changes like quicker discharge cycles and nonstop improvement, having assets and backing is basic to its prosperity."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Richard Dolci,"Certificate in Legal Assistant & History, St. Louis Community College (Graduated 1981)",2019,0,"The main reasons Agile software development fails in large organizations is unfamiliarity with the methodology of that software and how to integrate the new software.
Information in this answer is from “Why Agile Fails in Large Enterprises” by InfoQ."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Anatoly Spektor,"Founder of DefineAgile.com, Host of ""The Unusual Jobs Show""",2019,0,"The better question is: Who gave you that idea ? I have just finished working with a department of Fortune 500 company, that has 300 people in a department or working together doing Agile amazingly well. So my question to you: Why do you think so ?"
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Stacy,Knows English,2021,0,"The required time is calculated based on the fact that the development speed is always constant. But, as we already understood, it is not. Therefore, even if everything else is done correctly, the time error can reach 100 percent or more when the planned amount of work is large enough."
