URL,Author,Author Description,Publication Date,Votes,Review
https://www.quora.com/Do-programmers-really-like-Scrum,Alexandra Balean,Software Developer (2014–present),2019,44,"Just like it is sometimes said about communism: it depends on implementation. No, I’m joking. Scrum is awful, for me at least. I had witnessed only 2 implementations of scrum in my professional life, and both turned out to be highly bureaucratic and reduced productivity by wasting a lot of the developers’ time, and by inhibiting their creativity and autonomy. Some negative aspects include, and are not limited to:
1. It is advertised to empower business people - faster, more regular deliveries, they get to pick (and change at any moment) what gets worked on, they get estimates, therefore they can make more informed decisions, and also have a tracking system where they can see anyone’s progress on each item. But in practice, the non-advertised side - technical people are put into surveillance mode, forced to keep statuses on task tracking systems like Jira or TFS. They are asked to justify if estimations are too high or if a task took more than expected. It can even come out as an insult when a non-technical person minimizes the complexity of a technical task by saying something like “but it’s just a text, it’s not that hard, is it?” So as an end result, yes. It empowered managers and business people, but at the cost of more stress rolled down to the technical team.
2. Transparency gets even lower. Exhausted by the multitude of meetings that come into the middle of their creative flow, or by numerous changes in priorities, developers can get distracted, and forget to change statuses of tickets, or end up needing more time to finish tasks. One of the natural answers to exhaustion and stress is procrastination. By the other side, things seem to get worse too. Product owners (PO) have the ability to change developer’s work item by item, person by person, with no need to justify their decision. It gets frustrating if you’re a person who likes to finish what you started. Also, assuming you accurately update the task board, there’s no task board for POs and business people for developers to see. So how can transparency work if it’s just on one-side? If only developers are asked to keep a visible track of the work using task boards, and often put to repeat what’s on the task board in meetings, it seems to me that the underlying message is that developers are not trustworthy.
3. Meetings are useless - developers are not made to just sit and listen business jibber-jabber for hours (I’d like to think they were restless kids in school, and always hated to just sit, listen and turn off thinking). Even essential information could be lost in the ocean of irrelevant stuff people talk about in meetings, and let’s not even count the boredom that sometimes make us tune out. So in the end, for the essential information people will still end up bothering each other with 1 on 1 conversations, asking for topics covered in meetings to be repeated. Which makes the meeting time wasting, in my opinion. I’d rather focus on short, insightful dialogues between individuals (when needed) than going to collective, mandatory meetings and swim through irrelevant info.
4. Any longer, complex task will be abandoned for ever. POs and managers are afraid of things that take very long to do or are estimated too high in “story points” (another irrelevant unit of measure for work but which sounds fancy to use in meetings). So developers would end up working on bite-size changes, with very little impact on the product and also very little impact on their technical expertise. Everything in scrum has to be small, low risk, low work hours, but high impact. With that in consideration, most of the work will be based on the visual side of the software product (changing button colors, adding color themes), or on the commercial side of the product - changes to price schemes, discounts, promotions etc. New, interesting functionalities that need research and innovation will be always “not a priority”. Even though they could help developers assume ownership of the code, and help them be more engaged. Simply put - if it takes more than 1 sprint, it will never be done.
5. It glorifies an emergency state. The vocabulary in scrum teams is often composed of bits like: “top priority”, “urgent”, “focus”, “before end of sprint”, “ X days until end of sprint” etc. You can believe these words for a while, until you remember that the past sprint was also urgent, the same with second past sprint, etc. If there’s an emergency every day, you will at some time conclude that none of them is an emergency. If there’s hard to see any reward or impact for finishing some menial tasks in a fixed time box, what happens?. If a company started non-scrum and adopted scrum at some point, will they fire people for not completing sprints in time? Highly doubt it. So no reward, no risk, no nothing. Just some extra pressure and stress on developers. It’s easy to forget that sprints are just some abstract “boxes” people put over their time. What was ok to be finished in 3 weeks before is now not allowed, because this means more than 1 sprint.
6. If you’ll state an anti-scrum opinion, you could be served with an argument of flexibility. These will be anecdotal, but thought they’re worth sharing. When in a discussion with business people I said how a certain practice violates scrum and also burdens my work, I was told something like “Ow, but scrum is flexible, WE need to adapt it to our needs, we’re not following it by heart”. Sure, everybody wants to be special. But only if they get all the rewards and the necessary effort for them goes to someone else. Second argument is that YOU need to be more flexible about new practices. (subtext - even annoying, time wasting ones, that make you feel more disposable than before). Flexibility is a dangerous word that can hide a lot of malicious practices.
I would not accept any scrum working environment any more. I know that people should stay generally optimistic about new things and changes, but not everything new is automatically good. You can consider these ideas if it comes a time when your company proposes this process. Try to be prepared with arguments, and research more on the internet about how different people saw scrum implementations and what possible outcomes they had."
https://www.quora.com/Do-programmers-really-like-Scrum,Jeremy Stafford,Software Engineer/Architect,2021,84,"I’ve always felt that the biggest problem with Scrum isn’t Scrum. It’s non-engineer type people trying to bastardize Scrum into something that works for them. We’ve had an uprising and have kicked managers out of the Scrum process and it has been amazing, so here’s my opinion on it:
Scrum is a development process, not a people management process
In short, separate the Scrum process from project management. Leaders will coordinate with each other, but they shall not intermingle processes, and engineers will only be involved with the parts in which they have a stake (like grooming or system design). As I mentioned, in my experience, the moment that management tries to change Scrum to meet their needs, it falls apart and turns into a complete shit show with which most of us are quite familiar. We’ve basically drawn the line around something like “If you’re not the product owner, scrum master, or engineer, then you have no part in the Scrum process. Your contribution is typically part of a different process. End of story.” When those within this inner circle (so to speak) carry a conflict of interest, we just stay vigilant to identify and call out when we feel non-Scrum processes are beginning to leak in. For example, when a manager or project manager acting as a scrum master. It took a while to get certain parties to accept that approach, but we’re there and it’s working now. Side note: the unforeseen benefit was that it gave each party more bandwidth to focus on their particular part of the machine.
Basically, get good at identifying what is a Scrum problem vs. what is a management (project, product, team, etc.) problem, and do everything you can to keep them separate. Figure out the bridge between Scrum and management and develop it. Life will be good.
While one can argue that Scrum is a form of management, your focus and attitude towards it will greatly affect how you solve problems. That said, Scrum needs to be focused on development, not management. It is a team concept for software creation where all of the members worth together as one whole to deliver the sprint commitments and perform retrospectives on what they have learned every sprint so that they can grow from it. It’s not about pushing deadlines. The only deadline the team should ever care about is the end of the current sprint. True story.
WTF, you say?! How can you say that a team should only care about the sprint commitment and not the deliverable date?? It’s not that we don’t care. It’s just that it doesn’t help anyone to focus too far into the future knowing that things will always change. A team can only push out so much in given period of time before things start to fall apart. If you’re going to do Scrum, then you have to accept that a team’s velocity won’t change much after it is established and they will work at about that speed, always, and project planning and prioritization needs to operate around that fact. That said, this highlights the fact that larger deadlines are someone else’s problem. What I mean by that is that you focus on grooming the backlog, and the team has a part in that. After that, it is a management problem OUTSIDE of the Scrum process to line up the priorities and play with projected delivery dates etc. It is their responsibility to realize when some deadlines cannot be met without additional resources based on the teams (or multiple teams) velocity. If you can accept that, then this gets much easier. Fail to accept that and you will fall into a cycle of denial, where you try to get clever with how things are split up and instead of delivering more things on time, you’ll really just have more things in-flight that may or may not ever get delivered, or they’ll be delivered in effed up states and you’ll spend even more time trying to get it straightened out, effectively taking far LONGER than it would have to just accept the truth of velocity. I think this is the biggest struggle I’ve had to deal with many times in the past — denial.
Micromanaging the time of engineers and using Scrum as a whip with which to beat them is the ANTI-Scrum. It accomplishes nothing other than pissing people off and it is a large portion of why people generally hate Scrum.
When Scrum is executed correctly and without the management stank on it, I actually like it. I like that:
Stories aren’t arbitrary. They are fully functional slices of functionality that add value to a product. They are written from an end-user point of view and they focus on solving a problem and providing value, not technical details. I used to hate hearing this over and over until it finally clicked how to make it work.
The team is forced to work together finish and deliver complete entire stories instead of being scattered in terms of “tasks” being doled out.
Teams are self-organizing instead of having managers tell them specifically what to work on on the day-to-day.
During the sprint, communication between team-members is an obvious must, but they’re supposed to be also interacting with the product owner. If the product owner isn’t easily accessible by the team, then the setup is wrong. I should literally be able to turn around and say “hey look at this, is that what you were thinking?”
At the end of a sprint, during ceremonies there is a demo of this functionality and everyone gets to feel accomplished on a short iteration (e.g. 2 weeks). People complain about the ceremonies being a waste of time, but they’re not (they’re actually extremely important) so long as they’re being implemented correctly. It’s supposed to be your short turnaround feedback session - one session for the stakeholders, one session for the devs. This is what keeps everyone on the same page for more of the time.
It establishes a pretty reliable cadence of delivery. Everyone knows what to expect and everyone knows what is expected of them.
To me, proper Scrum should feel like a small group of friends trying to bring to life an idea they had over lunch. If each sprint doesn’t feel like that, you’re probably not doing it right.
If you’re drowning in process like timekeeping and managing dependencies, then you’re probably not doing it right.
If it feels like a whip with which the team is beaten, then you are certainly not doing it right.
If you’re writing stories that are estimated for a single person to accomplish, then you’re not doing it right. A story is a story — the team will decide how it is worked and by whom.
If you find that you’re constantly writing stories with particular people in mind or if you’re trying to adjust the points based on how many people would work on it, then you’re not doing it right. This is tough to get your head around, but it is true. Points are effort/complexity, not collective punch cards.
If the result of a finished story can’t be used/tested by someone, then you’re not doing it (writing the story) right.
If you find yourself constantly splitting stories up to deal with dependencies between teams (e.g. there’s a front-end story and a back-end story) then you’re not doing it right. If you’re doing that, then your team isn’t cross-functional.
Extra *wrong* points if you’re splitting stories and then adding the effort estimates together. One deliverable is one deliverable. Splitting it into a 3 point frontend story and a 5 point backend story does NOT equal 8 points. In all reality, it is likely a single 5 point story. You’re probably thinking of two people working them, therefore you need to learn to parallelize. If it’s a single person, then it’s probably a single 8 point story or it’s simply too big for a single deliverable. If you’re thinking to yourself “well that sounds nice on paper but…” then you have some more learning to do.
If you’re not delivering the result of a sprint to QA, you’re not doing it right. The end of a sprint should produce testable deliverables, even if it’s not ready to deploy into production.
If you’re equating effort estimates (that Fibonacci pattern) to time spent on a story, then you’re not doing it right. If you’re tracking hours as an indicator of progress, you’re not doing it right.
If it feels like a compressed waterfall, then you’re not doing it right.
To be honest, if you’re doing just about any of the things that people are complaining about here on this thread (as being a reason they hate Scrum) then you’re not doing it right. Most shops aren’t doing it right. It’s not really Scrum that’s the problem. As per usual, it’s management that is the problem.
It can be challenging at times to write proper stories, and that’s on the Product Owner. For example, size/scope is always an issue, but discovering dependencies is probably even more complicated (do we incorporate it as part of the story, or is there a large technical effort that needs to be accomplished to lay out some infrastructure, for example). During these times, they should work with the team lead and anyone else that should have input on it. They should improve over time as the team equalizes.
At my company, we cut management completely (other than the scrum master and product owner of course) out of the Scrum process and it has been FANTASTIC. We brought it back to basics: what are we building and why, and what do we need to do in order to make it happen. To make sure management is still getting what they need, they have management meetings which do not involve the engineers. In those meetings, they can beat each other up over deadlines and projected dates etc. This also goes for team management. If there are weak links on the team, everyone already knows who they are. Dealing with them has nothing to do with Scrum. Those are management processes and you should deal with them separately of the Scrum process. When it comes to the Scrum process, the team is who manages the team, point blank.
“But my certified SCRUM coach said…” — listen, I’m going to be honest with you. Out of dozens of certified SCRUM coaches that I’ve worked with or interviewed, with their MBAs or PhDs etc. in project management or what have you, 9 out of 10 of them came from a strictly project management background and have only worked for the same company’s that keep screwing up SCRUM in ways we just talked about. Very few of them actually had any real experience developing software, let alone actually working on a SCRUM team. So personally, I’d say having a coach is probably better than not having a coach, but take their input with a grain of salt and remember the Agile Manifesto (if it ain’t Agile, then it can’t be Agile Scrum) and call them out on their BS when they start imposing their business speak on you. Ultimately, the business wins, but if you really want to mature to the most productive team you can be, you need to push back.
The philosophy we use as guide rails is basically just to allow engineers to focus on engineering, and that is the most important part."
https://www.quora.com/Do-programmers-really-like-Scrum,Parantap Samajdar,"Automation Architect, Pre-Sales consultant",2020,1.5K,"Scrum, like open workspaces or day long requirement gathering meetings, is one of those things that is never liked by anyone who actually needs to participate in it. Only people who likes it are (1) people who gets employment because of it, e.g. professional scrum master (whatever that means) or agile coaches (it does not mean anything - another free money role like diversity champion); or (2) People who needs the visual and perception of lot of work being done, without having to care about what actually is being done.
So business analysts, developers, testers hate scrums with a passion. But senior managers love them, because it creates a better perception when things are happening weekly or daily v/s quarterly. If the things that are happening is is not adding value, it is easy to blame the developers or testers. But if nothing is happening, the managers get the blame. So ..
The root cause of the problem with scrum or agile in general is somewhat similar to communism. The core idea is too beautiful for any sane person to reject. Every single implementation that has happened so far are so horrible that no sane person can accept it.
Agile manifesto was written to address challenges with commercial end user facing applications which could not possibly support the old extremely bureaucratic and lengthy development process. It works perfectly for the type of applications that it was designed to deliver. However, when morons took over the keyword (much like AI more recently), they twisted the concept into something that even the original authors could not recognize.
There is no way to escape Dilbert when talking about Scrum / Agile. They are so true to the real life that we sometimes don’t know if we are laughing or crying."
https://www.quora.com/Do-programmers-really-like-Scrum,Stephen Burns,Developing product for 25+ years,2019,17,"I’m ambivalent when Scrum is done tolerably well. I’ve yet to experience it being done very well. In practice, it’s typically a little better than waterfall. In theory it should be a lot better.
Some issues with Scrum:
it can be an enabler for micro-management. Everything the team is working on has to be visible on the board. Really? This can act as a brake on some pro-active behaviors. Never mind logging time against stories etc. so we can claim those R&D tax offsets
Ceremonies? c’mon are we in a frickin’ cult?
does the whole team have to attend every ceremony? Really?
it relies on open and honest feedback (e.g. retrospectives); and most people aren’t great at this. Either we’re unwilling to be honest or we’re crap at giving constructive feedback. The sad thing is most of us crave honest feedback.
it’s a bit of a license for mediocrity - some creativity goes into excuses rather than the software
can introduces waste by splitting stories down too small.
too many refuctorings as work is split across multiple mini-waterfalls
it doesn’t seem to scale. It can work quite well for a team. Then you either allow teams to drive their own culture (good) or you get some clown who thinks that there should be uniformity across teams
scrum masters can be ex project managers. The best scrum teams I’ve worked on had no scrum masters. They had POs who wore the scrum master hat
BS about Cynefin and how scrum is the true agile framework for software cos it’s so complex. Typically most stories are straight-forward CRUD and lots of agile approaches will work.
like most methodologies Scrum brings everyone down to a nice level of mediocrity that leads to better perceived predictability
the end product doesn’t seem any better than if we’d used a different framework/methodology
On the positive side
the daily scrum where we sync and have those effective speed-dating post stand-up conversations. But really, that’s just an admission that we’re crap at communicating.
Retrospectives are awesome when they lead to effective actions. Sometimes they end up leaning towards therapy. Additionally, we should be agile and do them in timely fashion; not every second Tuesday at 2 PM.
Exposing problems early. We’re encouraged to ask for help and/or flag blockers as early as possible. This is the redeeming quality of the stand-up
experimenting with new technologies is easier and less risky. Doesn’t work out? Just replace it with an alternative in the next sprint or two
it enables us to react quickly to changing conditions; it does not as some people think allow us to get shit done quicker
Waterfall sucked - there was no Internet to make live updates back in the day - but one of the good points was you could easily steal a day or two to clean up some shit that was bugging the hell out of you and benefited your colleagues. In Scrum everything should be justified, in particular to the PO and scrum/iteration master - we can only ask for forgiveness so often.
Agile, as it was originally proposed, on the other hand. Love it. This was all about getting feedback as early as possible - from your customers, from your peers, from your tests - so you could be the best you for your customer.
TL;DR
Arts and trades have a time-worn master-apprentice practice - we wandered on to that path 20 or more years ago with practices like pair programming that brought us all up a level as we paired up with each of our colleagues. Now we have scrum masters.
Nothing compares to a well gelled team of collaborative competent engineers. Certainly not Scrum."
https://www.quora.com/Do-programmers-really-like-Scrum,Andrew Arnott,Been playing in metal bands for over 30 years now,2022,17,"It does not matter one little bit whether you call the person breathing down your neck a scrum master, project manager, product owner, or Second Lord of the Admiralty.
If you are doing scrum, you are more than likely being subjected to a culture of micromanagement that prioritises short cuts and sloppy coding in order to achieve short term goals, because the burn down chart is far more important than the actual quality, robustness and maintainability of the product.
On top of this, there are all the pointless, pointless meetings that leave you with even less time to try to deliver on the totally unrealistic promises the sales team - without consulting anyone on the technical side - made to the customer.
And you can bleat all you want that “this isn’t scrum, this isn’t scrum being done properly, no true Scotsman, etc., etc.”. In the real world, this is scrum. Every. Single. Time."
https://www.quora.com/Do-programmers-really-like-Scrum,James Barton,"50 years of Software Development, IT Architecture, and R&D.",2019,33,"There are many software tools and standard practices that facilitate rapid development. If you put a competent technically-adept project manager or tech-lead in charge of the team, and if they have experience with similar projects, they will be able to deliver optimumly, in terms of both time and quality. They may or may not use an approach such as Scrum, but it is best to let the person with expertise select the paradigm that has worked for them in such cases.
Scrum is most useful when there are no experienced leaders on the team so you need to impose some kind of well-defined methodology. Otherwise it's like herding cats, as they say. Scrum is also useful if you are technically challenged and don't have confidence in your ability to identify and hire the right person to lead the team.
Scrum is more about exposing progress to those outside the team and letting the business feel like they're in control than it is about expediting delivery. I'm fact, if anything, it impedes rapid development.
Forty years ago we were doing agile development. It just wasn't called that. We had experienced and competent people leading the teams and they understood what worked and what didn't. So your methodology doesn't need a “name” in order to be effective.
TL;DR;
As a programmer with experience in both management and software architecture, I never advocate the use of Scrum. I would much rather hire somebody with appropriate experience to lead the team than to impose a bureaucratic Scrum Master on them any day. It's faster, better, and cheaper in the long run. And the programmers will be happier as well."
https://www.quora.com/Do-programmers-really-like-Scrum,Clancy Merrick,"B. Sc (Honours) in Computer Science, University of Sydney",2019,93,"Well, I can only speak for myself as a programmer (or rather a Software Developer) who has (tried) to work in at least 2 Scrum teams.
No, I don’t really like Scrum.
I really detest Scrum.
I observed so many flaws in the Scrum process/manifesto that it was literally painful.
Some, but not all, were:
The lie that Scrum would enable either faster delivery, more transparency or a better end product. The reality was that it seriously impeded delivery speed, encouraged less transparency and almost never produced any product at all (both projects were “cancelled” by executives).
The extremist fundamentalist attitudes and beliefs of the so-called Scrum Master. I think that word “Master” messed with their headspace. They would insist that if we weren’t following the Scrum manifesto to the letter with all the pointless (a deliberate pun) rituals and hours of time wasted in meetings, then we weren’t doing Scrum at all. That’s just so black and white and unworkable.
Forcing top shelf developers (especially those who worked on the visible parts of the product such as the user interface) to have to expose/present half-finished or even just-started work to the business at the end of every sprint. The number of times that some “genius” in the business has pointed-out to me such things as “Hey, that button doesn’t look right or it’s not in the proper position” etc. due exclusively to the interface being presented in an incomplete state & the ignorance of said genius is uncountable but always extremely annoying.
The estimation process where I was regularly able to prove that the team were not providing estimates based on “points” but rather estimates based on “hours”, so much so that it motivated the Scrum Master to conjure up an equation that converted points into hours that then became the basis of all estimation (and was just as useless and inaccurate).
The rituals themselves were the main impediment to faster delivery. If the developers could have avoided all the usually chaotic “meetings” and focused their time on cutting code then more code would have been cut and the products would have had a much better chance of being delivered on time (if at all).
My favourite - the “retro”. A classic case of rinse and repeat. I cannot recall any retro which was even vaguely different from all the prior retros, was not a complete waste of everyone’s time or which actually improved anything. They would always quickly degenerate into rampant blamestorming.
The concept of agile development is mostly better than the concept of waterfall development but even then, only within a limited scope of product types.
The entire concept of agile development evolved out of methodologies used in the manufacturing sector where they worked very well, mainly because the product didn’t change. It was just manufactured over and over again.
For agile methodologies to be applied to a dynamic product (like software) rather than a static product (like a doll, spanner, screwdriver or even a box of candy) then it’s much, much better to evaluate the best practices in the multiudes of rigid lock-in agile methodologies and cherry-pick a combination of those that are most applicable to each individual software project.
Sure, this will cause Scrum fundamentalists (and and fundamentalists of any other formal agile methodology) to throw hissy fits and claim the intellectual high-ground but I personally suggest that you ignore such fits and tantrums and get on with what you were hired to do and what you do best."
https://www.quora.com/Do-programmers-really-like-Scrum,Eric Litovsky,Principal Software Engineer at Grey Swan Inc (2014–present),2019,19,"Let’s try a thought experiment:
Imagine a band like TOOL, Steely Dan, Pink Floyd, or Frank Zappa recording an album under a scrum master? Walk yourself through that exercise in your mind. Imagine a 15 minute standup every morning in the studio where each member has to report on progress, present the charts they notated the previous day, quantify soundbooth hours, time on tape, edits committed.
Each song on the album is broken down into a user story. Each part of the song, it’s own task, each member of the band has to provide estimates in hours or story points for how long each task would take to accomplish.
Now let’s imagine a recording session where a lead guitarist comes up with an awesome new guitar solo that leads into a new motif but needs 16 bars of the song to fully express it instead of the assigned 12 bars.
Let’s end this absurdity here. Can a band record an album using scrum? Yes.
Will that album be total shit? Also yes.
But do you know who would totally love this approach? It is literally a Label executives wet dream. With the power of scrum, the recording industry could concisely budget each and every album, accurately compute ROI, and best of all, project that ROI into future projects to best mitigate potential risk and express revenue in big pretty graphs they can present as powerpoint slides to their investors and shareholders.
This is the raw, naked truth of what SCRUM is all about. It’s a way for a very select few to feel (and yes it’s all about feels) better about a project."
https://www.quora.com/Do-programmers-really-like-Scrum,Alan Mellor,Used Agile methods since 2005,2019,405,"I’m not a fan, I must say.
I loved the original agile manifesto.
To me, that directly addressed the problems of uncertain, unpredictable development by attacking its root causes. Extreme Programming (XP) seemed to make a lot of sense.
These were ideas devised by programmers for programmers to help them program.
And then the project managers came along.
Scrum, with its planned sprints, seems to me to simply discard the agile manifesto. It splits a project into two week waterfalls and hijacks the term ‘agile’.
There is nothing in the agile manifesto that says we can make software more predictable. It’s all about handling and making transparent the unknowns that we face during every bit of the development process: requirement details, libraries, legacy cruft and people. Instead of pretending we can predict those before they hit us.
But by all the same tokens, your project manager is going to love Scrum. It’s a way to rein in those pesky agile programmers who make it up as we go along. On paper.
I’ve been part of successful Scrum projects. But the agile manifesto/XP way of delivering software has always felt a much better, more productive fit."
https://www.quora.com/Do-programmers-really-like-Scrum,Behdad Forghani,Master Software Engineer,2020,12,"Very few software engineers that I know like Agile software development.
Agile methodology is OK for tasks that are very well defined and are narrow in scope.
In my opinion Agile tends to focus people on the very short term and stifles creativity and innovation that do not align with the artificial Sprint boundaries, the same way stock prices focus companies on short term returns at the expense of long term strategies and goals.
Another problem with implementation of Agile methodology that I have often seen is the irrelevant metrics that Agile tools produce. Most measurements on performance of the team are based on points burnt and timeliness and not the value produced. I have seen many teams that are champions of the most points burnt without delivering anything new or of value.
You can hope that in the long run teams that manage to produce value get rewarded. But, often, the Agile results in dead on arrival software because the focus was improving metrics like burning points and performing the rituals of scrum meetings."
https://www.quora.com/Do-programmers-really-like-Scrum,James H. Kelly,Former Principal Software Developer at Spokeo (2019–2021),2019,20,"I’m sure some do, but in my experience, most don’t, especially as they get more senior.
Most programmers like to program. They want to know what needs to be done, that their work is contributing to the overall project and that no one else is doing the same thing, but after that they want to be left alone to program. Any group decisions are generally best made in chat (Slack) or in short, small meetings with only the people who need to be involved.
What they don’t like are useless meetings with Uno cards trying to predict the effort needed to do tasks full of unknows. What they don’t like is trying to cram features into arbitrary timeframes like sprints. And they all know that trying to gauge “velocity” based on past work is useless because every problem is different."
https://www.quora.com/Do-programmers-really-like-Scrum,Shailendra Malik,Senior Executive at Banking,2020,5,"Wow, this is a loaded question, so the answer will also be loaded with riders. I request you read in full.
One word answer to this is a resounding NO. But it is not because of the poor methodology, but because of shoddy implementation of the concept in the real world.
Please bear in mind that Agile Manifesto was formed with the inputs given by the top practitioners in the tech space back in 2001. The research on the topic started way back in 1994 and the first research paper on it was published in 1995 by Jeff Sutherland and Ken Schwaber.
The whole reason for moving in this direction was to cut the middleman from the overall process and avoid the requirements getting lost in the translation where multiple layers of managers or analysts twist the actual requirements and distort the overall outcome of the project which used to get visible only after a significant time of 6–12 months due to the waterfall development cycle.
This was done by exposing the developers directly to the person who needs the feature or product to be delivered, which saves time in requirement gathering and avoids the chances of miscommunication in requirements.
Coming back to why people hate it now, is simply the fact that more and more roles have been created again in the past 20 years in Agile to create that middleman layer by many companies trying to build their flavor of Agile and many so-called Agile coaches and Agile consulting companies twisting the whole essence of Agile.
Even the basic roles of Product Owner got transformed into 5 types of Product owners (Read- Types of Scrum Product Owners), purely because of many times senior business stakeholders who want the feature to be built see Product Owner as a low-level role and assign a junior resource to perform the role, creating the layer of middleman inadvertently.
I hope this sheds some light on the current state of affairs in the Agile setups in various organizations."
https://www.quora.com/Do-programmers-really-like-Scrum,Pete Oliver-Krueger,"Developer, architect, manager since 1995; agile since 2008",2019,7,"If I could clarify the question first? Are you asking if programers specifically like Scrum? Or Agile in general?
### The short answer
If specifically about Scrum, I myself did when I was developer, though I leaned more towards Kanban in actual practices. I liked looking forward for a few weeks, breaking things down into short term chunks, regular integration, and looking at our process and making changes on a regular basis.
I coach a lot of teams, and have found the same pattern holds up. Developers tend to lean towards Kanban, with regular planning and retro opportunities. Similar to other posters, I find that Scrum specifically gets a stronger following from managers.
I think this is for good reason. This is a very simplistic summary… but Scrum has more techniques for looking ahead into the future months, something managers are tasked with doing. Kanban, again in very simplistic terms, focuses more on what to do in the current iteration, the main focus of developers. Usually I find that the better teams merge the two, to help everybody, with a both short-term and long-term focus.
### The Long answer
If you’re asking about Agile in general? (Most people initially get taught that Agile is Scrum, Scrum is Agile, and so I often get the question “Do developers like Scrum?” when they really are asking, “Do developers like Agile?”)
Here the answer is also yes, with the caveat that only if they’ve been taught Real Agile. As one of the other posters mentioned, he really liked working according to the Agile Manifesto principles, but hates working in his company’s Scrum process. But if his company’s Scrum process doesn’t follow the Agile Manifesto, it’s not really agile! And it’s not doing Scrum either.
I find the brain science behind this fascinating. There’s a biological reason for this split. Our brains pattern match 95% of the time. When companies take a class without followup coaching, they see each technique and say, “I know what that is! See, I knew we should have been doing that! We’re doing that starting tomorrow!” or something like that. Sometimes they’re right, but more often the agile version of that technique is significantly different than the non-agile version.
### Examples
This is why most organizations that take an agile class start off by just rearranging their existing practices to “look” more agile without actually being agile. I spend the vast majority of my time fixing fake agile.
Planning Poker - Most developers hate Planning Poker …until I teach them the rules. Then by the end of the next planning session they wouldn’t go into a new sprint without it. Planning Poker is not an estimating technique. You don’t do it to determine how long it will take to do something. That’s old world project planning. The rules of Planning Poker are critical. If you don’t follow the rules, you will not understand why. Everybody must play. You must describe the story and answer all unanswered questions first. If the answer isn’t in the room, you have to put that story aside until you can get an answer. If you don’t you’re wasting everybody’s time. If no unknowns, then everybody (who actually does the work) must pull a card. Estimate the entire work, research, development, testing, and sign off. If you only estimate your time, you’re wasting time. Then you must pull your card WithOUT showing it to anybody. If you show your cards, you’re wasting time again. Count down “3, 2, 1” and show all cards at once. If they’re not the same, discuss why. No averages. No majorities. No “executive decisions”. If you don’t discuss, you’re wasting everybody’s time.
Planning Poker is actually all about the conversations. The discussions and debates are designed to surface assumptions that get us into trouble halfway through the sprint. We all make assumptions, but we don’t all make the same assumptions. One person assumes it will be easy to test. When they find out it won’t be, they know to deliver it to the testers early in the sprint, not on the last day. Another person assumes we have data, or a database, and finds out that they’re right or wrong. Another assumes a larger scope and finds out that they only have to do half as much work as they would have done before asking the question. My favorite short cut question is starting at the extremes and asking, “[3’s] are you willing to come up? If not, why not?” Our ""[13’s] are you willing come down? If not, why not?” This exposes the right assumptions to challenge.
And some assumptions are fantastic. I had one 3 vote that refused to come up. She had trouble saying why, but during debate the team realized that they had already built the story in question 6 months ago as part of another project, and never deployed it, saving the team 2 months of unnecessary rework.
### Summary
This is why developers think they hate Scrum, Agile, or planning poker. Because they weren’t actually doing Scrum, Agile, or Planning Poker. Scrum and Agile (and planning poker) were created by developers for developers. They really work, significantly better, and make life so much easier and more fulfilling. And the standard Agile practices were tested over multiple teams. If they're annoying to you and your team, honestly, you’re probably doing them wrong. Go ahead and stop doing what you’re doing, and reach out to an agile coach that you, or someone you know, trusts, and ask them to explain what’s wrong, what is making what you’re doing annoying. Or try an Agile conference."
https://www.quora.com/Do-programmers-really-like-Scrum,José Santana,Studied Computer Science,2019,14,"I am a programmer, and I don’t like scrum at all…instead of being “agile”, scrum turned into a whole lot of formalistic “ceremonies”"
https://www.quora.com/Do-programmers-really-like-Scrum,Petri Heiramo,Certified Scrum Trainer at Scrum Alliance (2008–present),2019,3,"The sentiment here is, unfortunately, pretty correct. It’s a statistical average. It also represents the statistical average of well-done Scrum vs. poorly done Scrum.
When done right, it does give trust and authority to the programmers. It increases motivation and effectiveness. It does require that the team learns new skills (which may be uncomfortable for some people), but once those skills become more natural, they further increase the team’s ability. In these teams, the ScrumMaster is a liked person and really does help the team improve and get things done better & smarter. The ScrumMaster would also help the Team to apply some other framework, like Kanban, when that is appropriate.
When not done right, it is often misery for the Team. Scrum becomes an excuse for micromanagement or dogmatic adherence to process (without any real justification for why). ScrumMaster is the new project manager, though a bad one. We might say, this is ”Scrum on traditional mindset”. Unfortunately, this is still more common :(.
There is a middle ground. In these, the Scrum is really just waterfall with two week planning cycle. Yes, there are dailies, but they are mostly empty rituals. The worst of bad Scrum is avoided, but none of the real benefits are gained, either. Sometimes, over time, people learn and improve. Sometimes don’t. Many of the people in my trainings come from these teams, and I get a lot of comments like ”we’re doing Scrum, but now I see we’re not”.
I feel we are in a transition. More and more people (and orgs) become excited (or desperate) to apply Agile, but most still lack skills and insight. Yet, more and more people and orgs also do get it. In my 13 years of Agile, I have seen a massive change, and the change will continue."
https://www.quora.com/Do-programmers-really-like-Scrum,Gandalf Hudlow,Software Developer and Manager,2020,3,"Scrum works for about 15% of software endeavors, yet it is applied like the proverbial hammer to everything that might have seen a nail once. Programmers are smart people and can easily recognize when they are being asked to do dumb things that are a waste of time. So no, they don't like scrum about 85% of the time.
The #1 problem in scrum is the non-customer product owner anti-pattern. Scrum works well when there is a savvy customer who will engage and learn what good looks like. The reason this works well is that team has coupled itself to a reliable source of truth so they can iterate into the right thing that the customer really needs and wants. Most traditional companies are resistant to changing their ways to iterate with customers, and easily fall into the smart trap of standing up a silo to handle Ideation, an Idea Silo if you will. In my experience Idea Silo members behave like any other silo member and focus on pleasing their boss, which is usually not helpful for creating industry leading software solutions."
https://www.quora.com/Do-programmers-really-like-Scrum,Tim Broberg,Software developer with 30+ years experience.,2020,2,"Like communism, true scrum has never been tried.
Everybody seems to do some bastardized process they call scrum, which they hate.
When I was first introduced to the concept, we were pretty gung ho about it. People actually tried to size tasks properly, groom backlog, break stories into tasks, and track the progress of stories toward completion within the sprint. The manager always had a burndown chart on his wall.
This took some getting used to, and consumed significant overhead, but there were a few things I really liked:
Code reviews
There was a functional, cohesive product all along, not a bunch of pieces sailing toward integration that may or may not fit.
Testing kept up with development.
I knew exactly how much work I had to finish on any given day to finish on time.
In the end, increasing demands for repeated rounds of code review followed by documentation and test from a separate test group made it nearly impossible to get 1 point of development work done in a sprint. The 8 day payload of the sprint was just too short."
https://www.quora.com/Do-programmers-really-like-Scrum,Jan Fischbach,"Consultant for More Agility at Common Sense Team GmbH,Scrum Events (HLSC GmbH)",2019,6,"Yes and no. Good Scrum is fast easy and fun (Quote of Jeff Sutherland). Programmers love good Scrum.
I saw companies where Scrum was used to force people working faster and producing more low quality stuff. Nobody likes that. Scrum makes problems in a company transparent. If there is no one who solves problems nothing happens. Nobody likes that."
https://www.quora.com/Do-programmers-really-like-Scrum,Harriet Louis,Studied Master of Business Administration Degrees,2017,1,"I work in software development - methodologies can be implemented in various industries, so this is relevant to mention, as my answer will centre around software development.
I also assume that the OP is familiar with the literature about Scrum, and don’t need us to cover that.
Our team has been practicing Scrum for a couple of years now. We were all trained to use Scrum by a professional coach, and I was impressed that Scrum addressed many of the problems I could identify during my years developing. At the time of adoption our team was not really implementing any of the traditional Waterfall methodologies, and not really Agile either. It was just some random processes we’ve followed and somehow it worked to some degree, taken from years of experience, somewhat of a hybrid approach.
Our team is relatively small, about 10 people, and we’ve all been working together for more than +/- 7 years.
What Agile did for us? It gave us as developers more of a voice in the direction we take as a team. Many of the bad practices made by individuals who find themselves in leading roles are much more visible. In my case we have some established products we maintain and make enhancements to. Requirement elicitation was always a problem, and also autonomous decision making by the powers that be. Within the team, we often had silos of people “specialising” in a certain areas of development.
Agile really exposed these problems, and gave us as developers the power to voice our collective concerns. If the majority is unhappy about the same problem being caused by a minority, surely there is a problem and they need to be listened to.
However Agile does not provide the solutions to the problem, if anything, the fact that Agile processes are so loosely defined, makes it easier for some to bullshit their way through project execution, hiding their incompetencies and lack of structured approach to planning and development. Also, if people want to work in silos, nothing is going to stop them, least of all a methodology. They will just find a clever way of doing it within that framework.
Our daily scrum meetings have become more of a report back to the manager, than a constructive meeting to solve immediate problems. In the hands of a micro-manager, scrum and its continuous focus on regular feedback, can become an effective way to incriminate and point fingers.
The loosely defined processes can be easily manipulated for scope creep, and changes too late in the cycle. Requirement gathering can become a joke, with requirements such as “make it work”, which carries no details for a developer to work from, and puts the added stress of having to run from one person to the next to figure out the details.
How I feel about Scrum at this point, is that it gives individuals the opportunity to get away with improper planning, which eventually heightens the risk for project failure.
There is a fine line between planning the minimum to get started with and to just let the requirements reveal itself as one goes along.
When I was doing my thesis, I interviewed a few companies who’ve employed some form of Scrum; It was amazing to see how different organisations implement Scrum. You get organisations who are very process heavy, to organisations who are very light on processes. Of course they can justify their decisions and in an interview situation would probably paint the best picture. But as an experienced developer you just know that no process / methodology is perfect."
https://www.quora.com/Do-programmers-really-like-Scrum,Wouter Van Ooijen,Head Lecturer Computer Engineering,2021,2,"No, programmers generaly like Agile (which means roughly remove all unnessary protocol and give the programmers the freedom they need to be productive). Scrum as I have seen it in practice is anti-Agile: it is a fixed set of rules, which makes the (good? bad?) old waterfall method seem like total anargy."
https://www.quora.com/Do-programmers-really-like-Scrum,Alok Dimri,Director at Benzne Consulting (2019–present),2022,3,"Many programmers take the scrum practices and principles at face value and thus end up viewing them as an overhead with respect to getting things done. This I feel is because they don't see the purpose of aforementioned elements and value it could bring to the work they do. I believe programmers appreciate Scrum once they go beyond their technical blinkers, to understand the ‘Whys’ of the framework.
Please check more about Scrum and Agile at https://benzne.com"
https://www.quora.com/Do-programmers-really-like-Scrum,Chris Falter,Senior Lead Scientist (2010–present),2021,1,"I have decades in the industry and experience with multiple methodologies. Scrum is by far my favorite.
However, like any methodology it can be abused, and Scrum is easier to abuse than most. It requires a lot of discipline, just as being a member of a crew team requires individual and collective discipline.
Some people think you can just call your daily meeting a “stand-up” and suddenly you’re doing Scrum. I have seen this more than once, and it’s worse than waterfall. Most of the criticism of Scrum seems like visceral reactions to the fake “stand-up-only” version, in my opinion.
If you want the benefits of Scrum, you need to exercise the disciplines. You can’t just work all sprint, have 2 hours for sprint review, retrospective, and sprint planning, then start your next sprint. In the middle of the current sprint you need to do the following:
Groom the backlog with a for reals product owner.
Prepare stories for the next sprint.
These require hours, maybe even a day (distributed over the current sprint) to do well.
You also have important activities that do not necessarily need to get done every sprint and therefore can easily fall by the wayside:
Update just-in-time architecture deliverables, explore future architecture needs.
Gather downstream requirements, create skeletal stories for the backlog.
Coordinate with stakeholders (clients, senior management). Yep, you do a lot of standard project management when you’re doing scrum.
Take stock of technical debt and create epics and stories to address it. You can’t just do feature development in Scrum, although far too many teams try.
There’s nothing better then Scrum when you have
a reasonably self-organizing team
that is reasonably well-trained team
that is supported by reasonably informed management and
engaged with reasonably informed customers
But if one of those conditions does not pertain, your life is going to be hard under any methodology. Scrum is not a silver bullet."
https://www.quora.com/Do-programmers-really-like-Scrum,Andrew,CIO of Collagia and Snr Director of MLB at Major League Baseball,2020,1,"It’s strange how pervasive SCRUM has become as the agile standard. Out of all the methodologies I have ever participated in, it is consistently presented the worst way to engineers. Which is exactly the same way as it was presented to executives.
I personally believe that having a methodology is better than no methodology. In contrast I am not particularly fond of any of them. I don’t precisely dislike them equally but I am not sure the differences in dislike matter. So I am not exactly anti-scrum.
I do believe we need some consistency to figure out what to work on and how to organize that work. Doing this in small regular increments of time is better than huge increments of time. It’s a good idea to have some organized time set aside to check in with teammates and customers so we can make adjustments along the development life cycle. Finally, those who write the checks are entitled to effective communication that promotes trust. I can do all this with any meth...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Andrew
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/Do-programmers-really-like-Scrum,Geovane Piccinin,PHP Programmer (2015–present),2019,1,"I think it is overestimated.
As a developer I get the feeling that people think they are following the principles than everything is perfect, while it is not and the consequences fall over developers.
I will just give an example from my own experience.
We were working in a project building an app intended to be used by adults. As a developer, the idea of the app and its requirements came to me only by the voice of the product owner. We built as she suggested until a meeting with possible users. In that meeting it became clear that she didn’t understand very well what was the demand and what the users expected. She had followed the process of creating personas, we followed the rituals and etc. But we are failing in the most basic thing which was to try to understand more deeply what the users wanted. I think they just got too comfortable with the idea of change that they didn’t worry in understanding things well, they just start building expecting that it can be changed later. But, as developer, it gets very frustrating that you are building something with so low chance to be really used. Furthermore, when they realized that it was not good enough we had to rebuild the software in a very short time.
Conclusion: on one side we have waterfall trying to predict the outcome before any development. In the other side, we have people start building things randomly and deliver things that don’t make any sense just to create an illusion of productivity and justifying that change is absolute normal, while, in fact, it was just poor analysis. Leaving the impression that they do it because the real consequences fall over the developers.
Sometimes I hear people talking about agile and scrum and it just seems they are talking about magic. I think there is so much marketing behind it that it became a cool item in the culture and the people who want to look cool just go repeating the same stuff.
Of course it has its benefits and qualities, but, as everything that get popular, it will have a lot of people exaggerating its value as a way to inflate their own value."
https://www.quora.com/Do-programmers-really-like-Scrum,Gullivan,Former Senior Architecht,2019,1,Yes we do as long as it's implemented in the proper way. I've seen many companies using Scrum just to micromanage developers. They use daily stand up as a reporting meeting. Most companies know the buzz words but not the roots of Agile. Agile it's a developer team methodology and not management tool. It's purpose is to take people as the most important resources rather than process. It came up alongside start ups during the Web 2.0 boom. I've managers and product people hijacking Scrum tools and that is too non-sense. Another start up term Scrum suppose to help is pivoting. Changing what was planned out of sudden. A person should read Lean Start Up by Eric Evans before starting using it.
https://www.quora.com/Do-programmers-really-like-Scrum,Dmitri Koulikoff,20+ years of the professional software development.,2019,1,I do not and consider it the waste of the resources.
https://www.quora.com/Do-programmers-really-like-Scrum,Bret Sheeley,Senior Software Engineer at Emerson Ecologics (2018–present),2019,1,"As a senior developer, I absolutely love it… went it is done right. Unfortunately I’ve seen too many cases where it is half-implemented or Product is willing to break process at the drop of a hat. When done correctly, it allows for stories to be set to a pace that helps encourage proper planning and discussions around the user-stories in order to ensure things are broken down to their smallest valuable components, detailed out to a minimum set of requirements, and then lets the development team build and test in a reasonable period of time.
Every time I’ve seen things go wrong in a Scrum environment, it’s usually due to a pressure being placed on a team to take too much in, implement poorly defined or vague stories, or have constantly shifting commitments forced upon the team far too often than needed.
For me, as a developer, I need that period to understand what’s coming down the pipeline and give feedback. I need the sense that unless there is a real shift in priorities, I have room to work on what I know is coming up next; and if there is a real to shift priorities, the new goals are clearly spelled out and discussed before coding begins.
Outside of that environment, more often than not I just see the goals and plans constantly shifting to the point where whatever I rushed to get in next ASAP was no longer important because the next emergency needed to get done NOW! Then that gets de-prioritized by the next emergency spurred on by some last phone call an exec was in. Then, in the end, you’re stuck with a bunch of poor quality hacks tangled together, of which a large chunk was never truly important in the long run.
With Scrum, I get into a steady pace of putting out quality work that in the long run is much more beneficial to the company and allows me to look back on my work with more pride.
Moving into a good Scrum environment from other processes is night and day for me, so long as the process is held to far FAR more often than not. I have not encountered a framework like it, and I would be hard-pressed to take a job that wasn’t in a Scrum Team."
https://www.quora.com/Do-programmers-really-like-Scrum,Kirill Sukhomlin,Web Developer (2006–present),2019,0,"I wouldn’t argue with existing trend and instead say that many developers actually don’t care mostly. Unless it’s really awful, they are more interested in technical challenges rather than such things.
Like do you care if brand color of the product you are working, is red or blue? Well, you might have preference, but it’s not important at all. The same with scrum."
https://www.quora.com/Do-programmers-really-like-Scrum,Animesh Yadav,Upvote,2019,0,"Of course yes, many programmers are like scrum rather they are also using the work related to scrum. Well, I know to be a good scrum master certified we need to do the proper course & also this is needed for programmers. I would suggest “tryScrum” for the best training."
https://www.quora.com/Do-programmers-really-like-Scrum,Bruce Wells,Studied at Ithaca College,2020,1,"Scrum is a management management tool. It has nothing to do with Agile development. It was invented by developers to manage their management. Agile was just a ruse to convince them to try it.
If you need to manage your management, then you should use Scrum. And please, never tell management this, or you will never get control of the development process."
https://www.quora.com/Do-programmers-really-like-Scrum,Sean Hoegaarden,"Developer, Product Owner, Scrum Master, Team Leader, BA",2020,1,"The answer depends on the individual and on the environment.
Starting with the environment is easy, there is a nice article on ‘Dark Scrum’ which details how to entirely mess up and deteriorate all concepts of agile and Scrum. Another problematic point is that most Scrum Masters get their role based on a 2 days training which makes them certified. Barely enough to get the basics. This is a very thin background if your mission is to change the mindset and behaviour of an entire organization. There are unlimited options to make Scrum painful for developers. Just keep in mind that managers have a lot more experience in turning situations to their favour than developers have, that is why they are managers.
Another factor is the developer’s personality. Working as a member of a team is not for everyone. When someone is in the habit of full code-ownership, starting the development process with designing architecture, full data and object models, and elaborating the rest later, then agile will never be a comfortable alternative. Regardless of whether it is ‘done right’. Even though, for such people, among all agile frameworks, Scrum is one of the friendliest choices."
https://www.quora.com/Do-programmers-really-like-Scrum,Aneesa Amin,Co-founder at Skillier (2019–present),2022,141,"There's no simple answer to this question - it depends on the programmer. Some programmers love Scrum because it helps them to stay organized and focused, while others find it too restrictive and prefer to work in a more flexible environment. There are also those who find Scrum to be a helpful tool in some situations but not in others. Ultimately, it's up to the individual programmer to decide whether or not Scrum is right for them. However, there are some things that all programmers can agree on: Scrum can be challenging, and it's not always easy to stick to the rigid structure that it requires. But if you can master Scrum, it can be an incredibly powerful tool for getting your work done efficiently and effectively."
https://www.quora.com/Do-programmers-really-like-Scrum,Shubham Soni,SDE 4 at Broadcom (company),N/A,141,"I personally don't like Scrum overall but, somehow management think it can do magic.
Things that I appreciate in Scrum:
Iterative process.
Pitfalls of Scrum:
It is slow. Unless you have very short sprint. You do more meeting than actual work and spend time in non technical discussions.
Difficult to track feature as one feature gets broken into many small stories which often seems unrelated to a feature.
Vague. There are no concrete definations of things so everyone interpret things differently.
Doesn't honor special skill of a person. Often a team consists of Subject matter experts and a certain kind of task can be done by a particular person but Scrum assumes everyone to have similar skills.
It discourage a technical person. Things gets very vague in sprint and someone who has tendency to be definitive about terms are not comfortable and end up demotivated.
There are many more practical problems with scrum which management doesn't realize but developer face at the end.
I always believe that Kanban is much straightforward and simple process. yet management are sold on idea of scrum and developer has to follow."
https://www.quora.com/Do-programmers-really-like-Scrum,Manjunatha Gopalakrishna,Another Ubiquitous Software Engineer,2024-09,141,"Mostly no. In my opinion its due to the mindset rather than Scrum itself. Below is what I have observed
The kind of people who are responsible for Scrum adoption
It is unfortunate that majority of the Scrum Masters or coaches who introduce it or accountable for its right adoption themselves have very limited or skewed understanding of it. They tend to use it to manage/assign/track the work rather than assessing progress towards an outcome or a goal. This can cause frustration for a person who would like to focus on the job at hand. Coupled with senior management or executives who look for some quick numbers, the environment is set for a toxicity which results in programmers, testers and other people who do the ground work not liking Scrum/Agile, as they feel its the “cause” of the problem.
This is true with waterfall or any other way of working where too a fair bit of programmers did not like one thing or the other because of supervisors demands…
Work Philosophy of Programmers
Most of the crowd in the software world are demotivated or not passionate about the work they do. You will hear most programmers hating going to work on Monday or waiting out the week to enjoy a weekend. I agree with if you say that its not just true for software, its the same in other industries too! A big chunk of working professionals actually hate what they do..
When you are not deeply driven about the work you do, you would not be a big fan of transparency which is elevated when you correctly adopt any Agile framework. Scrum would become the quick bait here..
Culture of “Individual”s
Programmers generally would like to focus on “coding” when working and learning programming languages when they want to skill/re-skill. This is because its better incentivized in any organization over collaboration or team work. They also tend to measure their worth with the number of lines of code they have written not by what was not needed to be written. Quality is parked for regression cycles or hardenings and there too its about my code v/s your test. In short, outputs are valued over outcomes which sorts of wires the brain to dislike anything which encourages or fosters outcomes..
Push v/s Pull
Lastly, the need to do Scrum v/s the want to do it! Most of the organizations are into maintenance or enhancements of existing features and the software Engineers are part of such teams. This kind of work does not require Scrum and at best requires borrowing few Agile practices. When there is not much unknown or experimentation is not the way to get better, Scrum does not fit the bill. However, the urge of few decision makers results in Scrum being pushed which becomes burdensome and its only a matter of time when its loathed by the people who do the work…"
https://www.quora.com/Do-programmers-really-like-Scrum,Michael Lloyd Lee,Former Over priced consultant at Government,2020,141,"Used well, for the right sort of project, it works well and I like what it brings. That is starting point fixed concepts can help bring people on board with agile as well as give a good set of starting points for a team. It is also fairly good at highlighting when something doesn’t work.
The most important part of any agile process is the introspection part, Scrum is not some fixed thing that remains in a static state for all eternity. It changes as the team evolves and works out what works for them, this means by definition Scrum is not the same for each team nor is it a single course that you learn and blindly apply to a team.
Scrum, as a base line to start working with can be a good thing, Scrum as the end goal of Absolute Perfection is not Scrum.
Scum does not work when attempting to apply it to an existing well performing team. Nor does Scrum work well when you don’t have a natural cadence. In both cases, done well, Scrum (or indeed any agile process) should highlight that it is not working quickly.
I like Scrum. It is a good tool to have in your belt, it should not be your only tool however."
https://www.quora.com/Do-programmers-really-like-Scrum,Jaanis Kruumins,Lived in Tokyo,2020,141,"I liked it when I was a programmer, I like it now as a consultant helping to manage projects.
Would disagree with the statement that scrum is an utopian methodology. Agile is challenging to implement and Scrum isn’t an exception. Not only it can be counter-intuitive, but also because it raises questions regarding the whole process. It’s always easier to shove the questions under the carpet, but it won’t be Agile anymore. That is why we have so many pseudo-agile-scrums, but judging about Scrum based on these implementations is alike to judge the opera by a friend singing it through the landline.
As a programmer I liked scrum, because the problems were mostly conveniently cut into the fairly manageable pieces and the high involvement of the project manager was beneficial as well: the problems were quickly identified by others if I was unable to do that and I felt so much less stress under Scrum than I did working under other methodologies.
As a consultant I like scrum because it’s a strict methodology, where B follows the A, and it’s somewhat easy to make a well-manageable project plan if you follow the rules. It is worth mentioning again that it is difficult to implement: not only the mindset takes time to change, it takes time to put the whole process flow straight. However, well-implemented scrum or other agile methodology is nice to have around. It doesn’t disconnect the development team from the business side of the project and it fosters improving the whole process, which makes work of everyone involved a bliss."
https://www.quora.com/Do-programmers-really-like-Scrum,Victor Sergienko,20 years of programming,2020,1,"You will not get a good answer here.
Because:
1. A selection bias. People normally don’t go to the Internet to tell the world things are working fine.
2. In English-speaking programmers culture, I observe a much more individualistic approach. People’s ideal workplace is a personal room with a window and a noise isolating door. One really needs some training before they can become an efficient team member, and it’s not everybody’s piece of cake. The individualism here is taken to its extreme: many programmers won’t talk to their colleagues about the implementation details of their work for weeks, months even.
3. Very often, as far as the answers state, “we’re agile” is just a way to say “we don’t know how to plan/manage/what product to create”. Calling these cases “agile development” is a big stretch, yet a lot of negativity comes from experiencing such an environment. Naturally, people’s reaction to “agile” afterwards will be “never again”.
4. My guess is those traumatized by “agile” from paragraph 3 have never even read a book on it, and thus never knew how a healthy agile development process looks."
https://www.quora.com/Do-programmers-really-like-Scrum,John Deeth,Studied at University of Life (Graduated 2019),2021,141,"Unfortunately, the answer is no.
Scrum is an instance of Agile and the thing we do during Scrum is followed by 4 Values and 12 principles of Agile.
Like the picture, we see Agile is Mindset, which are characteristics we have to change if we are different from it. Not easy for anyone to change themselves and fix with a new mindset.
Disclaimer:
The answer programmers don’t like Scrum is not absolutely number. It depends on my experience and they take the majority.
Scrum and Agile have different instances in every team or organization. So depends on their circumstances, the characteristics of Agile culture are different. But 4 values and 12 principles should be considered and comply with."
https://www.quora.com/Do-programmers-really-like-Scrum,Cristiano Costantini,I was part of a team successfully and happily adopting scrum,2020,141,"I love scrum: it was really satisfying to implement it when with my Self-organized team and we adopted it starting ~2010. We all five developers enjoyed it and got mature in using it. Then the team expanded and maybe the new comers did not enjoy as much as we - the initial members - did.
After some years and after being enlightened by Dave Thomas’s talk (he is one of the authors of the manifesto), I realize that the main reason the newcomers didn’t like was probably because they didn’t participate to self-organizing it. We, older members acted as experts.
Similarly, I think that many developers hating scrum today do hate it because it was used - by other team members, managers or product people - as way to pretend saying what to do and how, which violate in my opinion at least 5 of the 12 principles behind the manifesto. Other answers to this question reinforce my idea…
Please note that scrum authors are both original authors of the manifesto for agile software development, so if by adopting scrum you violate its funding principles there is something more than wrong on the way you (or the people who imposed scrum to you) do it.
This is sad because, as an happy Scrum adopter, I found great value in its ideas and it gave to my team great satisfaction…
But the way it is nowadays imposed is moving people away from it, and developers are missing an opportunity for a well balanced, sustainable and effective approach to software development.
I can only recommend to developers to own their scrum if they want to adopt it with satisfaction: set aside the chickens (time ago the scrum guide used an effective metaphor to describe who is just involved and who is really committed in the scrum processes) and eventually find support from an Agile Coach (not an expert that tell you what to do, one who help you to implement agile by yourself).
…but if you disregard Scrum because you had a bad experience with it, you are missing an opportunity."
https://www.quora.com/Do-programmers-really-like-Scrum,Alpesh Vasant,Director and Principal Trainer (www.gacademy.in) (2010–present),2022,2,"Are you a disciplined person?
Would you like to make or contribute in decision making and own the decision?
Are you self organized ?
Are you ready to allow yourself to be cross skilled?
Are you a more of team player rather than lone wolf?
Are you the person who do not believe in too much bureaucracy and believe in open and frank discussion and communication?
Are you really passionate about programming, testing , designing and contributing in architecture of software?
And the most importantly , are you really a flexible with mind and body??
If answer to 90% of these questions by a Programmer is TRULY YES, then I am sure he/she would love Scrum.
Else he/she is going to keep struggling and will keep hating Scrum (and still be the part of it most of the time)
Sorry if I am sounding bit blunt or rude here, however these all are the reality of Scrum and frank and open communication is the very base of Scrum.
With Regards,
Alpesh Vasant"
