URL,Author,Author Description,Publication Date,Votes,Review
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Assistant,Bot,2024-07,0,"There are a few key reasons why some developers dislike Agile methodologies:
Rigid Processes and Ceremonies: Agile frameworks like Scrum involve a lot of prescribed processes, meetings, and ceremonies that some developers find overly bureaucratic and constraining. The frequent sprints, standups, retrospectives etc. can feel like unnecessary overhead.
Lack of Long-Term Planning: Agile's focus on short iterations and responding to change can make it challenging to do extensive upfront planning and design. Some developers prefer more traditional waterfall-style planning with clear requirements and roadmaps.
Frequent Context Switching: The rapid transition between different tasks and features during sprints can lead to frequent context switching, which many developers find disruptive to their flow and productivity.
Pressure and Micromanagement: The visibility and frequent progress reporting in Agile can feel like increased pressure and micromanagement from project managers, which clashes with developers' preferences for autonomy.
As alternatives, some developers may prefer more lightweight or hybrid project management approaches:
Kanban - Focuses on workflow visualization, work-in-progress limits, and continuous delivery rather than strict iterations.
Lean Development - Emphasizes reducing waste, optimizing flow, and incorporating customer feedback incrementally.
Extreme Programming (XP) - Prioritizes practices like pair programming, test-driven development, and continuous refactoring.
Disciplined Agile Delivery (DAD) - Provides a more flexible, scalable, and enterprise-aware version of Agile.
Waterfall-Agile Hybrid - Combining upfront planning and design with iterative development and feedback loops.
The key is finding a methodology that balances the developers' need for autonomy and focus with the organization's need for visibility, coordination, and responsiveness. A one-size-fits-all approach is unlikely to work for every team and project."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Miles English,I'm a programmer.,2016,3.7K,"This story is 100% true.
I got hired onto a team of construction workers to build a house. We set up a meeting with Management to find out what kind of house they wanted us to build, where’s the floor plan, what it’s going to be used for, who it’s for, etc. Management said that they didn’t know all that, we should just get started. They told us that we were going to use “Agile” which means that we just work on small deliverables and build the thing incrementally.
The developer team lead argued that we at least need to know how big the thing is going to be so that we can get started pouring the foundation, but Management told him they just don’t know. “What we do know,” Management said, “is that the house is going to have a bathroom. Just start there, and we’ll know more when it’s done. You have two weeks.”
So we just bought a port-a-potty, and screwed around on the internet for two weeks. Management was outraged. “You call this a house? This is the worst house ever! It doesn’t even have a tv!”
So we bought a tv and put it in the port-a-potty, attached to an outdoor generator. We were going to buy a a dvd player and get it hooked up to cable, but Management rejected the expense request, saying that they didn’t know if we needed it, and we’d come back to that later.
Management decided that we definitely need storage space, so we bought a boxcar and duct-taped the port-a-potty to it. Then to our horror they set up some desks and put a few miserable business interns in there. It went on like this…
After a few years the boxcar grew into a huge, ramshackle complex. It floods, leaks, it’s frozen in the winter and an oven in the summer. You have to get around in a strange maze of cardboard tubes, ladders and slides. There are two equally horrible separate buildings. We’re still using just the one outdoor generator for all power, so electricity is tightly rationed.
Communication between the buildings was a problem. For one of them, we use a complex series of flag signals. For the other we write notes on paper, crumple the paper up, and toss it over. Both of these methods were suggested as jokes, but Management really liked them for some reason. The buildings mostly talk to each other but they have to talk through us, so most of what we do is pass messages on.
It was suggested that we use paper airplanes instead of crumpled up balls, but the fat, awkward fingers of the Business Majors who inevitably take those jobs couldn’t be trained to make them. I built an awesome automatic paper airplane folder, but once again they couldn’t be trained to use it, so they just went back to crumpling the notes up in balls.
The worst part of all this is that it’s working. Everyone is miserable, but the business is making money. The bright side is that this nightmare complex is done so now we know what kind of building they actually needed in the first place, so we can start work on it. Obviously we can’t tell Management anything about what we’re doing until it’s finished. They noticed the gigantic hole in the ground where the foundation is coming in, but we told them that it’s a cache reset, and they mostly ignore it except when the occasional customer falls in.
I’ll probably be out of here before the new building gets finished. I could get a 50% raise by switching jobs, but Management still doesn’t think I should get a raise because I missed a couple sprints."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Russell Wark,"Lived in Croydon, England (2012–2016)",2016,150,"""Agile"" in and of itself, isn't a bad thing. Deliver regularly, with small, achievable milestones, the minimum of overhead and with the capacity to accommodate change across a team. This side of the whole thing is fine. The ""spirit"" of the Agile Manifesto. That's what a lot of us were doing anyway.
Then the ""scrum coaches"" came and fucked it all up. The evangelical religious zealots of the development world. ISIS with a smile and a MacBook.
Our employers paid these fucking charlatans loads of money to weigh this simple, flexible process down with so much additional baggage, so much additional jargon and with so little appreciable improvement in productivity that they ruined the whole thing.
And what's with all the meetings? What a waste of time. Some of us aren't confident standing up in front of a roomful of people and talking, that's just how we are. Just send us an email or Slack message if you want our input and I'll answer you when I can down tools - you're throwing off my groove. I work asynchonously.
Taking all this additional bullshit into account slowed us all down, made previously productive developers unproductive and turned the process of software development into a buzzword-ridden, micromanaged, homogenised manufacturing process. No wonder some of us hate it. Scrum coaches - you can take your stories, points, burndowns and fucking planning poker and stick them up your collective arses (sideways if possible) and employers - trust your developers to know what they're doing, that's why you hired us."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Stefano Emiliozzi,I have been writing code since I was 8 years old.,2016,53,"In a nutshell Agile makes many assumptions that are unrealistic in most real case scenarios:
every engineer in a team can work on any task at the same speed/quality than anyone else
backlog items can be broken down almost indefinitely so they can fit 2–3 weeks sprint
the product should be in a deliverable state at the end of each sprint
a team scrum every day is a useful way to track sprint progression
If (and it’s a big IF) all these assumptions work in your case then probably Agile is the way to go.
Unfortunately most of the companies you’ll work for fail to meet some of all of the above, and Agile just turns into a burden that slows you down.
A few things that agile fails to capture IMHO:
different engineers have different skillset, so you can’t assign abstract story points to backlog items ignoring that
breaking backlog items in a myriad of smaller pieces to fit a sprint brings in additional complexity
90% of complex software cannot be in a deliverable state every two weeks
engineers hate meetings which are not absolutely necessary
R&D and design stages are fundamental in any project
In my experience, solid engineers are pretty good in self organizing and in delivering good quality software, discussing technical aspects in meetings only when necessary, and providing decent estimates.
On the contrary, mediocre engineers will provide subpar deliverables no matter which methodology they follow."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Michael Croft,MS in Software Engineering,2016,41,"About 8 years ago, a company I was at was acquired by a larger company. We were told we could either use the official Waterfall model of our new parent or we could adopt Agile.
Our VP, being no fool, chose Agile. He hired an Agile Consultant to come in. That’s where things started going wrong. Said consultant promised the VP that we would be “ten times as efficient” using Agile than we had been before. He taught us the rituals and methods and we had all the roles assigned and we all dug in to our backlogs and came up with estimates. The Consultant and the VP and his Directors were appalled by how long we thought it would take us to do what they considered “easy” work.
So we used their estimates, which coincidentally would’ve resulted in us being about ten time as efficient as we knew we were. With no other infrastructure or institutional change to make it happen. The first Sprint gets done and nobody has a deliverable, because nobody had a task small enough for us to get done in that time box.
“Why weren’t we ten times as efficient?”, the VP asked the Consultant. “It is because your developers are untalented hacks, who can’t do their jobs.”
So, yeah, that must be it. It couldn’t be a poorly-planned and poorly implemented transition with no room for learning. It couldn’t be the Consultant promised things he was never going to deliver. It was us. We just were bad at our jobs, and resistant to change.
Do I dislike Agile? Actually, no. It’s possible to do it well, to follow Agile principles from the bottom up and get some results. Turns out that almost any process improvement methodology will yield results, because people who are concentrating on it will make improvements in areas that are pain-points. You could implement waterfall at a poorly-working Agile site and make improvements.
Just be careful about the consultants."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jim Thomason,"Time Traveler, but I Only Know How to Go Forward",2018,25,"I’m going to claim credit for coining this mocking phrase many years ago, though I wouldn't be surprised if I merely independently came up with it.
“The process isn’t important. What’s important is that we have a process!”
It summed up so much crap at so many jobs with so many awful managers. Where someone higher up the ladder would buy into the concept of The Process and then define something in some manner—sometimes they’d buy a pre-packaged kit of consultants and training courses, sometimes they’d make it up on their own, sometimes they’d cobble together some new piece of garbage from the previous two.
And The Process™ didn’t necessarily fit reality. So exceptions would be made. Sure, in this one special case, we’d do an exception to get something done, but we’d all feel really bad about it because we should be following The Process®, but we will next time. We never did. There were always exceptions, changes, modifications, because The Process© didn’t follow reality. I’d scream and jump around and wave my arms and suggest maybe, just maybe, we should change The Process© so that it reflected reality and we actually did something we needed to do, in a rigorous well defined fashion instead of using some BS that we couldn’t follow and would constantly need to special case. It always fell on deaf ears.
All of these places treated Agile as The Process™ that would make things perfect and magical and great and solve all of our issues. Several assumptions were always made:
We don’t need to write specs. We’re agile! We need to develop and iterate quickly!
Figuring out what we want in advance is a waste of time. We’re agile! We need to get changes done this sprint and then we’ll figure out after the fact if we did what we need. If we didn’t, we’ll do another sprint to fix it. We’re agile that way!
We don’t need to write documentation! We’re using Agile Processes and so our code is all self documenting as we quickly run through a sprint.
We don’t need to write tests! We’re using Agile Processes, and since we’re only writing small bits of code at a time we can be sure that it works!
We’re not going to have our users get together and document what they need or how the software should work, because that isn’t Agile! Instead, we’re going to start coding as fast as we can and give it to them and then listen to feedback after the fact.
We don’t have time to solicit a lot of user feedback after a sprint, since we’re busy starting the next sprint. What are we building in the next sprint? Why the new features, of course! And what are those new features supposed to do? We’ll figure it out as we go along. We’re Agile!
Needless to say, I’m a little bitter about how “Agile” is implemented most of the time. A lot of companies like to use it as an excuse for not writing any documentation or specs in advance, just vaguely demanding that the programmers create something within two weeks and refining it after the fact.
The sick thing is that the business side tends to be very happy with this. It’s minimal work for them (“Go build the spline reticulater! See you in two weeks!”), and they see the developers writing lots of code and giving them something quickly which they can comment on at the end of the sprint (“No. Not like that. Do it different.”), so it sure feels to them like their dev staff is being productive. And hey, they’re giving feedback and designing the process! And they only need to be on a couple of quick 15 minute conference calls every two weeks and not waste their time creating user stories or tech specs! Look at all the time they’ve saved! Agile!
The programming staff then races as fast as possible to churn out something that’s poorly defined and usually of poor quality as a result, but small in scope. There’s no documentation to refer back to exactly what they were supposed to build or what the user wanted. But as long as you can iterate fast, it’s cool.
Don’t get me wrong—I’m not an advocate for having your analysts spend 6 months locked in a conference room creating The Big Blue Binder full of tech specs, detailed written APIs, and UML documents. Those are an awful time sink that don’t adapt to changing needs and prevent a lot of development from occurring until the last minute.
It’s awesome to break apart a big task into a series of small ones. If your goal is solely “Build New Operating System”, it’s impossible to measure or report any progress. If you’ve got 5000 separate goals then you can carve it up. You can have one team doing design and spec writing for one piece, another team doing coding for the last bit, a third team evaluating the already produced code to ensure it still fits needs and creating change requests to adapt to business needs, and so on.
You need some sort of spec beyond a 5 minute vague phone call and less than The Comprehensive Total Document That Is Carved In Stone. But you still need the spec for what you’re working on, docs on how the individual pieces fit together, and a clear goal of what the final product should be (with the understanding that the business may change while it’s being built and the final product may be slightly different than what you started with). Most places don’t seem to want to do it that way.
If you’re really using agile methodologies to break tasks into small chunks, write clear specs for those pieces, get prototypes to stakeholders fast and adapt to their feedback, and put it all together into a product that your customer wants and not merely what you thought you were going to build, then you’re in great shape and it can work really well.
If you think you’re “Agile” because you don’t want to write any specs or follow any plan, but it’s okay because The Process© says that you should have a two week sprint no matter what, then you’re doing it wrong."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Bob MacNeal,"Writer, Thinker & Software Product Developer.",2016,41,"Developers are makers. Today we have creatives, like developers, who make stuff, the makers…and then you have everybody else…the non-makers.
What emerged from the 2001 conference in Snowbird were lightweight guiding principles…by the makers, for the makers.
The Agile manifesto is a beautiful thing. Revolutionary then. Influential today.
Few work days go by without one or more of the guiding principles influencing my perspective, or my approach, to the mission at hand.
What’s made “Agile” increasingly toxic is that over the years the non-makers have manufactured supercilious ancillary activities like user story estimating, planning poker sessions, ponderous tracking software, burn-down charts, and 30-person stand-ups for a 4-developer team (real world example), that have little or nothing to do with growing a software product.
The guiding principles have always worked very well for the makers. Unfortunately the non-makers have turned exquisitely lightweight guidance into a ball & chain of process that the team, makers and non-makers alike, must drag along with each iteration.
I hope this helps your understanding.
The Alternative
The alternative is to have 2–4 experienced developers who are laser-focused on the product, empathetic with user experience, and steeped in the guiding principles of the manifesto who are given product direction, unfailing support, and enthusiastic encouragement from a benevolent dictator."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Harold Treen,Former Agile Software Engineer @ Pivotal Labs,2016,154,"This is a really good talk given by Dave Thomas, one of the original creators of the “Agile Manifesto”. It’s titled “Agile is Dead”.
Agile is Dead?! This is coming from one of the people who helped create the whole thing! What’s going on?
In the video he makes a good point: Agile has been coopted into something it was never meant to be.
It has been turned into a process that an entire industry has been built around. Scrum master training, Agile conferences, etc., etc.
So now when people think of “Agile” they think of some process that’s being sold. “Follow this process and you will build the best possible software!”. But no process or system is absolute. Maybe scrum will work for some teams, but for others it won’t. And when you sell people things that don’t work, that’s really frustrating for them.
This is a slide from Dave Thomas’s talk where he talks about what Agility is really meant to be:
That definition actually makes a lot more sense!
So in a nutshell:
Agile has become this bloated system that teams across the globe have been sold as the solution to everyone’s problems. Nothing is absolute though and the best paradigm is going to be different depending on the team.
Agility is the process of iterating quickly, reflecting on changes and using those discoveries to get yourself closer to where you want to be. Most of the other stuff is marketing and stuff people started selling to cash in on the hype."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Brad Bass,"Java, C#, ASM and PVX+ (dont ask how that fits in there, lol)",2015,9,"Scrum 'masters', daily meetings, change.. Stats become more important than the code itself. We hate it for the reasons weak programmers love it. They love it because they dont really have to think (they are given a list of tasks to complete), theyre basically capped on how much work they can do during an iteration, the focus is on the 'team', so they tend to be able to get away with/hide their mistakes.. We hate it because we dont like being told how to do our jobs and especially not by some SCRUM 'master' who most likely has never written a line of code in their life. I suppose for the most part it just seems like Agile causes us to waste a lot of time to produce less quality work over shorter periods of time."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,John Test,8y,2016,75,"I am really glad someone asked this question because some of my friends/colleagues and I were going to start an IT job board only for positions that DO NOT use Agile. Or at least not a bastardized spawn of it.
The problem as some others have mentioned already is the framework that gets attached to Agile. Normally this is Scrum. Now Scrum has different ways to do it but the most common version requires daily stand-ups, bi-weekly Sprints/planning, retrospective (for f*ck’s sake), demos etc.
I have now been through 3 companies in the last 7 years that started Agile/Scrum combo exactly the same way and did not have a single happy developer after this.
This is how it starts:
PM: Hey man how about this Agile thing. Everyone is using it these days.
Director: Oh that sounds great! I’ve been hearing a lot about it and devs are going to be really happy!
PM: Well instead of getting updates once a week we will be getting them daily! and.. and.. we will be able to see a demo bi-weekly! :) :) :)
… he’s got this sadistic look in this eyes that this will allow him to **truly** rule the dev team and if he has the Director on board, no one can challenge him …
Director: I keep loving this thing!
… at this point the PM and Director already have the impression that this one specific way of doing Agile/Scrum is loved and cherished by all devs in the world…
… they are double excited since they got told “it was created by developers for developers” …
… news is broken to Sr. Devs and TLs
Dev: hmm I’ve never done Agile before but sure.
… being very careful not to offend the PM or director, they ask subtle questions …
Dev: so Agile is a broad idea, how exactly are we implementing it?
PM: Well the best practice (he’s laughing in his head, sleazy bastard) entails daily scrum and bi-weekly demos/planning. But hey what’s better being in constant communication with the stakeholders/customers/management.
Dev: hmmmm. [ thinking: is it time to look for another job? ]
… the company goes and hires a scrum master….
SM: so how do you guys want to do this?
PM: well how about daily scrum and bi-weekly demos?
SM: well that’s one way of doing it but maybe we should talk to the team?
PM: no need. myself and Director assjack prefer it this way.
… SM being newly hired doesn’t want to argue…
Initially all the devs, devops, QA in the team are patient while the spoiled child PM is driving sexual gratification from all these added meetings. The post-scrum parking lot turns into an hour meeting daily as the spoiled child really has nothing else to do so he is wasting everyone else’s time as well.
After a few months most devs are tired. Some have already left. Couple jumped ship immediately after Agile was announced. The ones that are sticking around are due to camaraderie, nostalgia, unmarketable, or some other reason.
Ask them if they are happy.
The answer will always be a RESOUNDING YES!
Ask them if they are ok with the management
The answer will always be a RESOUNDING YES!
Ask them if they are ok with Agile
The answer will always be a RESOUNDING YES!
But if you listen real close, you can hear the bleak reality in the daily calls, demos and planning sessions. You can hear it in the increased sick time or other personal leaves. You can see it in demoralized attitude of the team.
The developers (especially Sr.) do not feel respected or trusted when they are asked to say “What did you do yesterday and what will you do today?”. This is the most demeaning question you can ask someone important to the bottom line of your company.
F*ck Agile!
F*ck Scrum!
Update: I mean no disrespect to any PMs, SMs, or Directors in general. The story I wrote is a very generic form of how the Agile process is started in a company. It could be suggested by a PM, VP, Manager etc."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Mark Flory,Owner (2016–present),2016,234,"I was first introduced to the concepts of Agile I want to say in 2002, but I could be wrong but that seems way early on. Where I worked at the time we were not Agile, not Waterfall, we were using classic Clusterfuck. I had spent a few years at a very Waterfall shop and what I found I preferred Cf. After all, when all the documents were signed, sealed, and delivered the way things tended to proceed was straight to Clusterfuck with a lot more meetings and documents that needed to be corrected to reflect what actually happened.
My initial biggest takeaway from Agile was iterative development, which was a concept I already favored from reading Steven McConnell’s book Rapid Development. It made sense to work quickly, show the work quickly, fix what was broken, rinse, repeat. Internally when I develop software that is how I work. I find some work, I code it, I test it, I fix it, I test it again, I then look for some more work.
I liked the concepts I saw but I also remember my initial thought was. THEY are going to completely fuck this up. If you don’t know who THEY is, it’s this guy.
<There once was a somewhat relevant (but a Quora Image Violation) cartoon here you can see here >
I also tried making my own…I think I will stick with programming.
Over the years I have noticed an increasing amount Agilishness at the places I, my wife, and my friend’s worked. It was becoming more and more prevalent and I was beginning to see traces of the problem. THEY had turned it into a religion and the religion was going to save us.
I invited to a group discussion with some senior level software developers one time and we talked about Agile. We came up with our own working statement:
Overall, we like agile conceptually and we will adopt the practices we like as we see fit. Our approach to agile will be agile.
What we don’t like is Agile, which is the doctrinal approach to Agile. It’s the religion.
One guy said it very simply, I don’t like big A Agile.
I work with a lady now who has the religion in a big way. To her a project can only succeed if it operates in one way.
In a nutshell, as requested, what I dislike about Agile is that it’s practitioners are anything but. They are rigid and conformist and believe you must be too."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Robert Rapplean,Works at Software Engineering,2016,30,"There are numerous long-winded responses on here (with images), but I figured I’d summarize my experiences with Agile.
Agile is a methodology that only works if everybody cooperates and assumes that everyone else is going to put in their best effort. This is extremely hard for most managers to accept.
The default management styles presume that the engineers can do better if given a little “encouragement”. Managers can grow out of it over time, but it is very, very hard for them to feel that they are providing value unless they are making their reports work harder/smarter. That type of manager will take any opportunity they can find to “provide value”, which is to say, encourage the employees to work harder.
Thus, the daily scrums turn into a daily report to management. End-of-sprint turns into an opportunity to fail instead of a time to re-examine the work load. If your team doesn’t meet its goals, it looks bad in your manager’s regular report to HIS managers, and then bad things roll downhill. This means that an unfortunate percentage of agile developers are being rated on how well they can guess how long something is going to take instead of on the quality and effectiveness of their engineering skills.
The burn-down chart is another opportunity to fail. Scrum teams spend a lot of time figuring out how to re-arrange their workload in order to optimize the burn-down instead of optimizing productivity. The unfortunate results here involve context shifting, checking in work that’s incomplete in order to mark it done, and creating stories with a vague enough scope that the developers can call it done at a certain time instead of at a certain degree of completion.
A second issue is that CxO’s really hate to be told “no, this is what I committed to, so this is what I’m doing.” When presented this way, they look for other ways to fit their pet project in, which results in shorter iterations, which results in more time spent in meetings and ceremonies, which eats into productivity."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Oliver Dolan,10 Years Commercial Software Engineering,2017,46,"There are lots of answers here but I feel my views differ enough to be of value to you. So without hesitation lets begin.
Why do a lot of developers dislike agile?
Firstly agile is a super broad term and often people have issues with some parts of the methodology more than others
For example:
Most developers agree on continuous integration and automated testing being of value
Less developers see merit in pair programming
A big concern I have seen is the time spent in meetings.
It's a fair concern, the ideal team size is somewhere around 8. That would mean in a 2 week sprint:
Daily stand up = 8*15 mins * 5 = 600 minutes
Sprint planning = 8*45 = 360 minutes
Backlog grooming 8*120 = 960 minutes
Sprint Demo = 8*45 mins = 360 minutes
Sprint retrospective = 8*45 mins = 360 minutes
This would total: 2640 minutes or 44 man hours of time spent on meetings in 2 weeks with conservative estimates on time.
I think we can all agree this is quite a significant amount.
I have experienced many concerns against the stakeholders prioritisation choices
Timescales are squeezed
By design agile methodologies squeeze timescales to reduce ineffeciencies and improve responsiveness of the business.
Stress levels rise
Due to always needing to release and demonstrate
Sometimes MVP’s are not up to scratch but are still released and shown to many people.
This can cause anxiety over peoples opinion on the poor quality of the work delivered.
Project managers are often replaced with scrum masters.
These two skillsets are not replaceable one for one, they have subtle but significant differences.
Lack of need to communicate outside the local team meaning isolation and internal group think
This can also lead to conflict within the organisation as a culture of us vs them can emerge
Feeling like a cog in a machine
Plan, Do, Check & Act
Plan, Do, Check & Act
Plan, Do, Check & Act
Plan, Do, Check & Act
Repeating this sequence ad-infinitum can make developers feel like they are in a rut or just using up time like on a hamster wheel.
Technical leads having limited influence
Often product owners and stake holders are given more weight when making decisions and what they decide is generally final and overruling of the technical lead.
Product owners have limited control and bow to stakeholders
This can lead to short term thinking in the perceived hope of obtaining customer satisfaction
MVP and lean delivery seen as not high enough quality product
This can make developers not feel proud of the work they are producing
Developers lose commitment as they don't feel identified with the work or business
This can propagate into a lack of vision or warm feelings for the long term
These lead to concerns over job security
Cross functional teams also reduce job security
The development team can often feel inadequate for not meeting the perceived potential.
The team is often under budget or resource constraints but are consistently reminded of what there capped velocity is via information radiators
The constant search for looking for defects, waste or errors can aid developers in forgetting about the positives
Developers can also dislike the complexity of the process
Agile is quite involved, collaborative and requires communication. Developers in the past have tended to be introverted in nature.
Some compare the current agile methodology to waterfall and would just prefer to receive a specification and task list and be left to do the work.
It is often difficult to trust the product owner when they dont have direct access to the end customers.
I have seen in big business to business sales organisations the product owner has limited access to the customer base and likely never even speaks with someone who uses the software.
This undermines there credibility and the effectiveness of the agile model.
Im sure there are plenty more but these would be the most common I have experienced.
Hopefully it helps
Good Luck
Oliver Dolan"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Carsten Saager,Programming for the better part of my life,2018,27,"Because of this
“Agile has to be done right” - It only seems is rarely the case, because it of the inherent instability the cartoon illustrates.
After some years I figured that agile methods have their place and are successful if some conditions are met.
Consensus of The Big Picture
The Big Picture has to be clear to anyone and there must not be different interpretations. It is very inefficient and frustrating to reinvent the wheel each time a new requirement is injected that questions previous assumptions. There is a difference between over-engineering and non-engineering in the end.
The right size
There must be a reasonable number of stories and resources. The process must be adapted to the size. It is not reasonable to create 20000 stories and just try to fit them into the sprint windows. You will never have consensus on the priorities ever. As bad as it it sounds, such projects are better segmented in milestones that focus on a few major functions.
Don’t be religous
A few tasks are too complex to fit into sprints, trying to reduce them in size to fit in promotes dangerous short cuts. I saw enough evolutions being shelved because the sprint cycle was always too short to implement it.
The right Client
Their must be real client that works actively with you and not against you. “Agile” is not a quality criterion, some clients fall for that. The client also has to understand it and be able to give you timely and consistent feedback."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Imtiaz Mohammad,"Google, Ex-Microsoft, IIT Kanpur, 25 years of CSE",2018,57,"Once upon a time there was a class teacher named Mr. Screw U All. One morning, he had a bad start due to two flat tires. He reached school with great difficulty and went straight to his class. Some kids were making a lot of noise and throwing chairs at each other. Of course, they all stopped the moment they saw their angry teacher at the door.
Now, Mr. All decided to fix things and punish the mischievous kids. But, he didn’t know who exactly was responsible for the mess. So, he made the entire class kneel for next 30 minutes. Over a period of time, this became a standard practice to discipline students.
That is Agile methodology in a nutshell. You punish everyone due to some slackers at the workplace. There is nothing to like about it. Unless, you are the bully who enjoys seeing others kneeling along with you."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Gerry Claps,"Product Manager, prev. PO and Scrum Master",2016,40,"In my personal experience, software developers dislike Agile methods when they’re applied incorrectly.
Software development is a creative craft. Time and time again, I’ve seen chunks of work assigned to developers to build software that disregards:
Overall system architecture
Enough time to iron out bugs
Utilizing feedback in the next iteration of work
Time for creative thinking around the problem
and, so on.
Currently, the best paradigms around software development are ‘lean’ and ‘agile’ thinking. It’s their misapplication that leads to problems."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Arno Brevoort,designing and writing code has paid the bills for over 20 years,2017,90,"Agile done right, is the way a band of programmers would organize their work. Once everyone is on location, before you get into the thick of things, brew a pot of coffee and have a quick chat. How are you getting on, did you run into any trouble, what shall we do today. Help / advice is offered where necessary and you carry on with the day. The programmers are talking to each other and helping each other out. Work is done as a team.
Agile done wrong, is a micro-managers’ dream. You can instantly pick on “failing” programmers, harp on why things haven’t been done, blame people. Instead of a collaborative meeting to plan the day ahead, it turns into a daily “progress report”, a “triage”, or a “crisis planning meeting”. The sign of this is the programmers no longer talking to each other in the meeting, keeping their heads down, and “reporting” up the command chain to a “scrum master” / “project manager” who is no longer involved in actually writing code.
The first Agile is a fantastic way to work. The second “Agile” is hell on earth."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Richard Waters,"professional software developer for 20 years, keen amateur cook and singer in a passable covers band.",2016,94,"I've been following this question for a while now; there are some great answers here and an awful lot of anger directed at ‘Agile’, whatever that may be.
Shall we start with this: Manifesto for Agile Software Development this is the Agile manifesto and the 12 principles? Notice what this is and (more importantly) what it isn't: no mention of scrum, no mention of daily meetings or sprints. It's still possible to disagree with these statements, of course, but I think they represent a laudable set of goals for building good software in many situations.
To create good, useful software we need to do 2 things:
Agree what the software has to do
Write good software that does that
It's important to realise that both of these tasks are hard, not just the second one. Writing a good, accurate, detailed spec for a complex system is a really hard job; its roughly as hard as writing the software because in the end software is just a very, very detailed, executable specification of the problem. Particularly if the developers who will work on the project don't know the problem space you need an incredible level of detail in the spec and it still won't be enough to inform every micro decision the coders have to make. On top of this you have change to manage. Over the course of a long project the specification needs to change. That causes problems as well.
Historically, lots of projects have failed because of bad or incomplete specifications. Lots still do.
The Agile Difference
The main aim of Agile (IMHO) was to try and change the approach to reduce the number of failures and the scale of those failures. Instead of a detailed specification there would be small iterations of development each of which should produce something that could run and be observed by the ‘business people’. This way, you could catch problems and misunderstandings earlier in the process and it would be easier for non-technical business people to look at the software running and explain what they wanted in that context.
For this to work you need a number of related things to happen:
Constant, quality access to the business people or end users so questions can be asked and answered without delay
Flexible development methods; with no up front detailed spec you can't have a detailed up front design either. That changes the way you build the software. Refactoring becomes more regular and you need automated testing to support that.
A willingness on all sides to accept that you don't know in advance exactly when you are going to deliver what, beyond the current iteration.
These things are hard, especially the last one. That final point causes massive friction if a development team or group tried to be agile when the rest of the business doesn't understand and buy into that.
Agile isn't perfect by any means and to do it well does involve a massive organisational change and not just in the development teams. However, in many cases it will deliver better results than trying to produce up front specifications and working from them.
Why do developers hate Agile?
Bad management is rife. It's probably more common than good or even average management. Most organisations would claim they were doing Agile, even when they are not (does anyone work in an environment where detailed specifications and design documents are written up front? Not many, I guess). So, much bad management is associated with Agile. It's not agile that's the problem. It's the management.
Finally - an example
I just wanted to end with an example (completely invented) of how Agile can be done right.
A company decided to build a new online project planning and management tool. They put together a good team of developers and QA to work on it.
At an initial team meeting, the management explain that they are targeting a beta launch 12 months from now and explain how they hope the product can be a big revenue winner for the company and explain the gap in the market they think they've found.
They then introduce Martha who they've hired from Microsoft where she worked on the Microsoft Project team as a product manager and she gives a presentation on her vision for the product and explains how an online tool can beat what's already available. She commits to being available to the developers in the office 3 days a week and on email the other 2 when she's out helping with marketing.
The team agree to spend a first 2-week iteration setting up continuous integration, investigating some different database technologies and selecting a framework to use. During this time Martha gives a series of talks on the basics of project management tools for anyone who wants to attend and produces some sample possible screenshots as guides. The team are all given a licence for Microsoft Project and encouraged to spend some time using it to get familiar with it.
At the end of this 2 weeks they agree that the next 2 weeks will be setting up Dev and Uat environments and implementing a simple web ui to define a task and set its properties. They’re off.
Every 2 weeks there's a meeting to review the past 2 weeks and to discuss anything that's slowing down progress. Martha is there to answer questions and give some feedback on her meetings with potential clients; not normally technical stuff because that's being sorted out as it arises. The manager listens and makes sure blockers are handled; maybe the build server needs some more memory to run a big regression test - his job to sort it.
6 months in the team decide their framework is an issue. The xml config files it needs are becoming a problem; too complex, too hard to understand and a bottleneck. They decide to move away from the framework and use a code-based dependency injection system instead. A sub-team reckons they can write a one-off code generator to replicate a lot of the xml config with code and commits to doing that in the next 2 week iteration on a branch. The test framework allows them to make this big change with confidence. It's 2 weeks spent, but will make the whole team more productive so the team agrees to the plan.
6 weeks from the beta launch the team realise their core data model can't support many-to-many task linkages. They discuss this, agree a different data model and consider the amount of work needed to change it, but realise that this means a key feature can't be ready for the beta. Martha reluctantly agrees that it's better for the beta to go ahead without the feature, but asks for an enhancement release 4 weeks into the Beta to add it after the data model change. The team agree and commit to getting the data model change done in the next 2 weeks to help ensure this can happen even though they accept it really ought to take longer.
Is that an unrealistic example? I don’t think so. I think it’s an example of how development can be done well. Agile isn’t the problem - it can work, but it can also fail - particularly in the hands of the incompetent, the arrogant or the greedy."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jeremy Stafford,Software Engineer/Architect,2021,84,"I’ve always felt that the biggest problem with Scrum isn’t Scrum. It’s non-engineer type people trying to bastardize Scrum into something that works for them. We’ve had an uprising and have kicked managers out of the Scrum process and it has been amazing, so here’s my opinion on it:
Scrum is a development process, not a people management process
In short, separate the Scrum process from project management. Leaders will coordinate with each other, but they shall not intermingle processes, and engineers will only be involved with the parts in which they have a stake (like grooming or system design). As I mentioned, in my experience, the moment that management tries to change Scrum to meet their needs, it falls apart and turns into a complete shit show with which most of us are quite familiar. We’ve basically drawn the line around something like “If you’re not the product owner, scrum master, or engineer, then you have no part in the Scrum process. Your contribution is typically part of a different process. End of story.” When those within this inner circle (so to speak) carry a conflict of interest, we just stay vigilant to identify and call out when we feel non-Scrum processes are beginning to leak in. For example, when a manager or project manager acting as a scrum master. It took a while to get certain parties to accept that approach, but we’re there and it’s working now. Side note: the unforeseen benefit was that it gave each party more bandwidth to focus on their particular part of the machine.
Basically, get good at identifying what is a Scrum problem vs. what is a management (project, product, team, etc.) problem, and do everything you can to keep them separate. Figure out the bridge between Scrum and management and develop it. Life will be good.
While one can argue that Scrum is a form of management, your focus and attitude towards it will greatly affect how you solve problems. That said, Scrum needs to be focused on development, not management. It is a team concept for software creation where all of the members worth together as one whole to deliver the sprint commitments and perform retrospectives on what they have learned every sprint so that they can grow from it. It’s not about pushing deadlines. The only deadline the team should ever care about is the end of the current sprint. True story.
WTF, you say?! How can you say that a team should only care about the sprint commitment and not the deliverable date?? It’s not that we don’t care. It’s just that it doesn’t help anyone to focus too far into the future knowing that things will always change. A team can only push out so much in given period of time before things start to fall apart. If you’re going to do Scrum, then you have to accept that a team’s velocity won’t change much after it is established and they will work at about that speed, always, and project planning and prioritization needs to operate around that fact. That said, this highlights the fact that larger deadlines are someone else’s problem. What I mean by that is that you focus on grooming the backlog, and the team has a part in that. After that, it is a management problem OUTSIDE of the Scrum process to line up the priorities and play with projected delivery dates etc. It is their responsibility to realize when some deadlines cannot be met without additional resources based on the teams (or multiple teams) velocity. If you can accept that, then this gets much easier. Fail to accept that and you will fall into a cycle of denial, where you try to get clever with how things are split up and instead of delivering more things on time, you’ll really just have more things in-flight that may or may not ever get delivered, or they’ll be delivered in effed up states and you’ll spend even more time trying to get it straightened out, effectively taking far LONGER than it would have to just accept the truth of velocity. I think this is the biggest struggle I’ve had to deal with many times in the past — denial.
Micromanaging the time of engineers and using Scrum as a whip with which to beat them is the ANTI-Scrum. It accomplishes nothing other than pissing people off and it is a large portion of why people generally hate Scrum.
When Scrum is executed correctly and without the management stank on it, I actually like it. I like that:
Stories aren’t arbitrary. They are fully functional slices of functionality that add value to a product. They are written from an end-user point of view and they focus on solving a problem and providing value, not technical details. I used to hate hearing this over and over until it finally clicked how to make it work.
The team is forced to work together finish and deliver complete entire stories instead of being scattered in terms of “tasks” being doled out.
Teams are self-organizing instead of having managers tell them specifically what to work on on the day-to-day.
During the sprint, communication between team-members is an obvious must, but they’re supposed to be also interacting with the product owner. If the product owner isn’t easily accessible by the team, then the setup is wrong. I should literally be able to turn around and say “hey look at this, is that what you were thinking?”
At the end of a sprint, during ceremonies there is a demo of this functionality and everyone gets to feel accomplished on a short iteration (e.g. 2 weeks). People complain about the ceremonies being a waste of time, but they’re not (they’re actually extremely important) so long as they’re being implemented correctly. It’s supposed to be your short turnaround feedback session - one session for the stakeholders, one session for the devs. This is what keeps everyone on the same page for more of the time.
It establishes a pretty reliable cadence of delivery. Everyone knows what to expect and everyone knows what is expected of them.
To me, proper Scrum should feel like a small group of friends trying to bring to life an idea they had over lunch. If each sprint doesn’t feel like that, you’re probably not doing it right.
If you’re drowning in process like timekeeping and managing dependencies, then you’re probably not doing it right.
If it feels like a whip with which the team is beaten, then you are certainly not doing it right.
If you’re writing stories that are estimated for a single person to accomplish, then you’re not doing it right. A story is a story — the team will decide how it is worked and by whom.
If you find that you’re constantly writing stories with particular people in mind or if you’re trying to adjust the points based on how many people would work on it, then you’re not doing it right. This is tough to get your head around, but it is true. Points are effort/complexity, not collective punch cards.
If the result of a finished story can’t be used/tested by someone, then you’re not doing it (writing the story) right.
If you find yourself constantly splitting stories up to deal with dependencies between teams (e.g. there’s a front-end story and a back-end story) then you’re not doing it right. If you’re doing that, then your team isn’t cross-functional.
Extra *wrong* points if you’re splitting stories and then adding the effort estimates together. One deliverable is one deliverable. Splitting it into a 3 point frontend story and a 5 point backend story does NOT equal 8 points. In all reality, it is likely a single 5 point story. You’re probably thinking of two people working them, therefore you need to learn to parallelize. If it’s a single person, then it’s probably a single 8 point story or it’s simply too big for a single deliverable. If you’re thinking to yourself “well that sounds nice on paper but…” then you have some more learning to do.
If you’re not delivering the result of a sprint to QA, you’re not doing it right. The end of a sprint should produce testable deliverables, even if it’s not ready to deploy into production.
If you’re equating effort estimates (that Fibonacci pattern) to time spent on a story, then you’re not doing it right. If you’re tracking hours as an indicator of progress, you’re not doing it right.
If it feels like a compressed waterfall, then you’re not doing it right.
To be honest, if you’re doing just about any of the things that people are complaining about here on this thread (as being a reason they hate Scrum) then you’re not doing it right. Most shops aren’t doing it right. It’s not really Scrum that’s the problem. As per usual, it’s management that is the problem.
It can be challenging at times to write proper stories, and that’s on the Product Owner. For example, size/scope is always an issue, but discovering dependencies is probably even more complicated (do we incorporate it as part of the story, or is there a large technical effort that needs to be accomplished to lay out some infrastructure, for example). During these times, they should work with the team lead and anyone else that should have input on it. They should improve over time as the team equalizes.
At my company, we cut management completely (other than the scrum master and product owner of course) out of the Scrum process and it has been FANTASTIC. We brought it back to basics: what are we building and why, and what do we need to do in order to make it happen. To make sure management is still getting what they need, they have management meetings which do not involve the engineers. In those meetings, they can beat each other up over deadlines and projected dates etc. This also goes for team management. If there are weak links on the team, everyone already knows who they are. Dealing with them has nothing to do with Scrum. Those are management processes and you should deal with them separately of the Scrum process. When it comes to the Scrum process, the team is who manages the team, point blank.
“But my certified SCRUM coach said…” — listen, I’m going to be honest with you. Out of dozens of certified SCRUM coaches that I’ve worked with or interviewed, with their MBAs or PhDs etc. in project management or what have you, 9 out of 10 of them came from a strictly project management background and have only worked for the same company’s that keep screwing up SCRUM in ways we just talked about. Very few of them actually had any real experience developing software, let alone actually working on a SCRUM team. So personally, I’d say having a coach is probably better than not having a coach, but take their input with a grain of salt and remember the Agile Manifesto (if it ain’t Agile, then it can’t be Agile Scrum) and call them out on their BS when they start imposing their business speak on you. Ultimately, the business wins, but if you really want to mature to the most productive team you can be, you need to push back.
The philosophy we use as guide rails is basically just to allow engineers to focus on engineering, and that is the most important part."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Sheldon Shi,Writing software since 90s.,2016,43,"It means Agile development is done wrong. In a wrong way, for the wrong purpose.
I’ve seen both sides of the coin. Teams became a lot more productive, a lot happier and less stressful when Agile was done right; and teams became totally chaos and demoralized when it was done wrong.
How developers feel when Agile is done right:
When Agile is done wrong:
Here is how agile can be done wrong:
Organizations skimp careful planning and push all uncertainties to dev teams, and hope shortening development iterations and having daily sync-up would magically cure all evils and make things right. Software development is an incredibly front-loaded process, meaning a lot of thoughts have to be put into deciding what to build, how to build, before actually building it. Applying Agile process doesn’t change that. It just make it easier to adapt to changes. When thoughtful planning and design are skimped, no methodology in the dev process can save the day. But dev teams end up getting the blame because they are supposed to deliver the end product.
Management view agile development as a way to manage day-to-day activities of dev teams and squeeze the last drop of juice out of developers. First and foremost, agile development is about empowering developers to deliver better and more relevant software, while being proactive about it and not being stressed out. It is not a tool for management to put dev teams under microscope daily and push to the extreme. Agile is best done organically through strong leaderships within the teams, not through some top-down directives or third-party injections.
Only pay attention to “How”, without asking “Why”. It is easy to implement some superficial formalities and declare it “Agile”. But having a daily sync-up doesn’t make it agile. It’d be just be a waste of time if developers don’t feel empowered from these meetings. Having a shorter iteration doesn’t magically make development faster, or with fewer bugs. It may just add more overhead from the more frequent interruptions. Agile is about adapting to changes. This applies to the dev process too. Teams should take a holistic approach and try different things, until they find sweet spots. This invariantly involves active participations from product, design, QA and dev teams, buy-in from all stakeholders, a disciplined approach, best practice principals, some light-weighted toolset, and once in a while good retrospects.
In the end, Agile is done right if developers are happy and productive, and not if developers become grumpy and demoralized."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jeff Gib,Author has 1.2K answers and 3.7M answer views,2019,15,"Scrum erases some of the essential activities of projects, mostly design decisions, necessary evils, getting things clarified so that the right decisions are made (RnD stuff). Here are a couple of examples:
Should we use RDB or NoSQL or combination of both? Ok, which implementation of those should be use? (Just examples…_) MongoDb + MySQL? How does Mongo handle our input or query needs. Hmmm, not very well. Why? Should we switch or tune?
What’s the best way to handle that data widget? Pre-process it once a day? Do it on the fly? Let’s pre-process every day at 4am. (Implement that but… by 4pm it’s too stale). Let’s re-implement it to do it on the fly. But we’ll need another server and interface for that.
How are we going to do auth/auth? What are the capabilities of that geo-spatial library? Does that API in XYZ allow us to do that? What’s a work around for that?
You get the picture. In scrum there’s supposed to be a story worked that you can demonstrate at the end of the sprint. Yeah, yeah, I’ve heard it all before about having stories to do these things. And that WOULD be fine if software dev professionals were running the show. I personally would have a story for each one of the above. The developer would then demonstrate / explain results at the end of the sprint to the team, NOBODY ELSE. But my Direct experience has been, as soon as one of these stories is in the backlog, along comes Joe Scrum Master or Product Owner or Manager and we start arguing about whether that’s a story. Here comes the time wasting nonsense - Can’t we work it into this or that? Or, what can we demo when that story is done because that’s the only way we show progress. You can’t demo THAT! It’s endless nonsense on the dogma that has become scrum.
There’s alot more wrong including how to handle defects flowing in from customers and previous iterations, how to refactor something, etc. I’ve heard the answers from scrum “professionals” and it’s like we’re trying to find the answer to a car question in a yoga manual, i.e. I’m fixing a headlight but that needs to be done in the downward dog position. Everything but the simple stories are unnatural.
Oh, and don’t forget the daily status meetings. Don’t even try to convince me they are Anything But. That’s what they are, that’s what they will always be. A way better way to handle that is a dev is supposed to have responsibility to report potential slippage. If somebody isn’t doing that - then THAT’s when a manager should pop their head in.
It’s a very unnatural, babysitting-like environment."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Alex Rogachevsky,"Expert ""coder"" refusing to be ""outsourced"", startup founder/CTO",2017,35,"In the perfect world, Agile was invented in, by developers and for developers - as you may recall from the Agile Manifesto…
A number of things didn’t exist in that world:
The headcount aka bodyshop-supplied “body” fraud to staff always unneeded always failing (at the infamous 70–90% IT failure rate) corporate IT projects, used to “spend” excess profits otherwise lost in taxes. Can’t play that kickback game with servers and switches. The obscure “human capital” however is the perfect smelly pond with its murky water. With the certain overpopulated country providing the unlimited number of “bodies”.
“Offshore” “outsourcing” aimed at suppressing wages and capping engineering careers.
The redundant - compared to the actual “functional” managers with decision power… institute of clueless non-technical Project Managers tasked solely with hour counting and reporting to even more detached from reality PMO (“O” stands for office).
Speaking of #1, I am going to go with the conservative 10x estimate stated in one of the Quora posts on the difference between the senior developer and a code monkey. Anyone not working by the book (myself) should have more aggressive e.g. 100x and higher productivity after eliminating the glue code. Note, it is just the technology alone - doing the heavy lifting. Not the “project management” or any other mythical MBA “communication” and “collaboration” magic.
Going with 10x, if you replace a typical 20-developer team with just two people, a lot of IT “coordinators” and “facilitators”: namely PMs will lose their jobs too. Several times more third-party middlemen forming the enormous IT Consulting Food Chain would lose their cut. I feel for them… not really. In any case, how much “project management” such two-people team needs?
Speaking of #2, accelerated and efficient software development becomes nothing, but slavery, in that context. Greedy bosses diluting your effective hourly rate through unpaid overtime and other tricks against you fighting back by fooling those clueless non-technical bosses with padded estimates. Also, think for a moment, what kind of work the proper project management is supposed to make more efficient in a typical “IT organization”: the same needless IT commotion and visibility of work e.g. bug fixes of spaghetti code produced by keyboard banging code monkeys of the certain geographic origin: otherwise replaced 10 to 1 or 100 to 1, as explained above.
With no more career future, explained in simple terms as rewarding someone’s increasing contribution with increasing salary, the trust has been lost forever. Any attempt to optimize engineering work is not just viewed, but really is a hostile activity to squeeze more money out of the already low (compared to Google) salary.
And speaking of #3, let me tell you a story of one financial company I spent a year at - notorious for their employees laziness and incompetence. My team had a PM, alright. And a couple of business analysts aka BSAs. I don’t remember all of the details of that project’s misery. It was part of the typical 90% failure rate if you are wondering - dead even before I was hired.
However I do remember the typical shuffle that ensued after it was officially pronounced dead. I witnessed it several times before. A moronic BSA was “demoted” (reassigned with the same pay) to the PM of another project. Which of course failed a year after. That should tell you where PMs tasked with running Scrums are in the IT hierarchy.
Better “project management” alternatives? No PMI certified project managers at all. Look at distributed (to say the least) open-source teams - from little GitHub projects to Linux. No corporate overhead. No PMs. No MBAs trying to “facilitate” “communication” and “collaboration”. Just engineers doing their job. Why such compulsive-obsessive desire to “organize” and improve old practices like “waterfall”? Chances are, if you come from the same bureaucratic (defense, government, Fortune 100) background, you’d end up with the same crap. Read above on the glue code. I didn’t try to “optimize” it via a cute persistence aka “I/O” framework like Grails or Play. I discarded it by choosing a different paradigm.
Needless to say, and I feel for you as a “manager”, one cannot magically compensate for the low salary with phony “perks”, motivational speeches, or great work environment/process, that inspires engineers to work hard by allegedly making it “enjoyable”. Anyone’s motivation starts with the proper (monetary) reward. Only then you can add perks like beer dispensers and work/life balance. Project Management cannot be used to cover for CFO’s greed. Nothing can “align” someone’s interests with the company’s, if you are not paying that person well or offering the career future. Pay the fair wage, and we, college-educated professionals, will surely figure out what to do in which sequence."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Parantap Samajdar,"Automation Architect, Pre-Sales consultant",2020,1.5K,"Scrum, like open workspaces or day long requirement gathering meetings, is one of those things that is never liked by anyone who actually needs to participate in it. Only people who likes it are (1) people who gets employment because of it, e.g. professional scrum master (whatever that means) or agile coaches (it does not mean anything - another free money role like diversity champion); or (2) People who needs the visual and perception of lot of work being done, without having to care about what actually is being done.
So business analysts, developers, testers hate scrums with a passion. But senior managers love them, because it creates a better perception when things are happening weekly or daily v/s quarterly. If the things that are happening is is not adding value, it is easy to blame the developers or testers. But if nothing is happening, the managers get the blame. So ..
The root cause of the problem with scrum or agile in general is somewhat similar to communism. The core idea is too beautiful for any sane person to reject. Every single implementation that has happened so far are so horrible that no sane person can accept it.
Agile manifesto was written to address challenges with commercial end user facing applications which could not possibly support the old extremely bureaucratic and lengthy development process. It works perfectly for the type of applications that it was designed to deliver. However, when morons took over the keyword (much like AI more recently), they twisted the concept into something that even the original authors could not recognize.
There is no way to escape Dilbert when talking about Scrum / Agile. They are so true to the real life that we sometimes don’t know if we are laughing or crying."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Harsh Gupta,Make $$$ listening to b2b sales pitches on fozzie.io,2022,16,"There are a lot of developers who dislike Agile because it is difficult to change the project management paradigm when things don't go as planned. Some alternatives to Agile include Waterfall, Scrum, and Crystal Clear.
The waterfall is a traditional project management methodology that involves developing a plan, executing the plan, and monitoring results. This method can be time-consuming and rigid, making it difficult to adapt to changes in the project.
Scrum is an agile framework that was designed to address some of the problems with Waterfall. It focuses on creating product backlogs and sprint backlogs, which are lists of tasks that need to be completed during each iteration of the project. The team members work together to complete these tasks as quickly as possible while maintaining quality standards.
Crystal Clear is a new project management methodology that combines aspects of both Waterfall and Scrum. It allows for more flexibility in terms of changes to the plan, but also maintains quality standards throughout the entire process."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Joe Termine,Principal Software Architect at A Fintech Firm,2020,28,"As a programmer, I generally hate all meetings, because meetings are dull and ineffective. There are exceptions, but most meetings could be skipped if someone just wrote a clear memo or the two people in conflict talked to each other and not the whole universe. Scrum meetings in particular are the worst kinds of meetings because they are “meetings by tradition” instead of “meetings out of need.” They are like the dreaded weekly staff meeting where everyone goes through the motions of a meeting to appease “the boss” but don’t get any real value.
Of course nearly every SCRUM practitioner will disagree. call me a heretic and say prescripted bland things like “only if SCRUM is done improperly” or “it was that way with waterfall but not now.” Same with the Six Sigma worshippers, and they double down on this insanity by giving their useless meetings names that all seem to have cryptic abbreviations — “the FMEA Process Review Meeting.” What it comes down to is that folks who don’t have anything valuable to do need to have meetings to create work for others so that they can show value."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Peter Pang,Studied at Corning Community College,2019,11,Why hate Agile? It is a great opportunity to micromanage the developers and keep their noses on the grindstone at all times. It is yet another management fad which the humanity will survive. It is as simple as that.
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Michael Daconta,"Software Engineer for 32+ years, Author of 14 books",2017,62,"Simply stated, Agile swung the pendulum too far away from the waterfall methodology. Its first incarnation was “eXtreme Programming” and some of its practices retain those extreme roots:
* Pair programming is overkill for 80% of programming tasks but is useful for the right 20%. Do you really need a co-pilot to pull the car into the garage? In other words, not every software task is akin to brain surgery or flying a 747.
* Giving short-shrift or lip-service to requirements analysis, architecture and design is short-sighted. Proof of this is that epic agile failure called healthcare.gov. See: Feds say agile development contributed to Healthcare.gov failure
Also see: 6 Software Development Lessons From Healthcare.gov's Failed Launch
And finally: https://gcn.com/blogs/reality-check/2013/11/healthcare-agile.aspx
* Test-Driven development relies too heavily on unit testing. See: TDD is dead. Long live testing.
* Stand up meetings can be used as a punishment and are very easy to do wrong.
Having said the above, some aspects of agile work well: Refactoring, Small iterations, Collaboration, Daily builds, Continuous integration.
So, my recommendation is to take the best parts of agile and combine them with spiral development in a hybrid approach!
Best wishes!"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Darryl Wagoner,Author has 1.3K answers and 535.3K answer views,2023,28,"What is Agile?
Scrum?
Kanban?
something else?
I really dislike Scrum and I am a Certified Scrum Master. Scrum will sooner or later end up with poor software. In ways, it is anti-agile because there are so many “processes”. The worst thing in my mind is the 2-week sprints. Programmers start out doing good work the first week of a 2-week spring, then start feeling the pressure to meet their sprint commitments and start rushing the work. Never ends well. What ends up happening is they pad the amount of time a task takes. So we spend time guessing at effort instead of doing the work.
Kanban, on the other hand, solves many of these problems, by removing some of the processes and working from a prioritized backlog (scrum does as well), but programmers take the highest priority task and work on it until done. No stand-ups, sprint planning, etc. Management hates it because they don’t have a clue about dates (they never did, but thought they did).
In software, you can never be sure how long a task is going to take. I am not saying you can’t make a good guess, because you can and do. However, you can also blow the time budget really badly. I know I picked up a defect to fix and was expecting it to take minutes to fix. It took weeks. Scrum is not forgiving for tasks."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Vatsalya Jain,"Vice President, Software Engineering (GenAI)",N/A,3,"One fundamental challenge I see is the emphasis of ‘doing’ Agile and lot of focus of the Scrum Master and Project Managers to ensure things are done to adhere to the agile guidelines.
For eg: Agile speaks about estimating a story in terms of story points, which is a comparative analysis for a developer vis a vis the development he has done in the past.
However, many of the scrum masters I speak to during interviews state that
they follow the logic of 8hrs = 1 story point
When I probe them how would this hold true for Person A ( who is a developer ) vs Person B ( who is an architect) , the answers are not there yet.
While Agile is a framework for the teams to enable to work efficiently, the governance around the measurements mechanisms and the lack of understanding of true agile principles is the biggest challenge."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Miles Fidelman,"Systems Architect, Entrepreneur, and Policy Wonk",2016,25,"Because it's broken. For incremental changes, to small projects, it works fine. For large, complex systems, it ignores anything resembling well thought out architectural design - leading to truly hideous systems."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Alexandra,Marketing Manager at Onix-Systems (2018–present),2021,14,"Well, Agile is:
Individual over process
Software over documentation
Change over a plan
Basically, Agile is about moving fast, reacting to change, and don’t stumble. Something doesn’t work? Don’t fret, go try something else.
Why is it hated when it seems like a freestyle methodology that lets creativity flow and doesn’t get bothered with tons of documentation?
Lack of understanding. Wrongly understood the concept of Agile often results in implementing structure and hierarchy from the previous experiences. Such a combination makes employees feel like they are slaves rather than freestyle and creative.
Wrong orientation. It is also a result of a lack of understanding. Refused flexibility, strict rule-following, and forcing all that onto employees creates an unhealthy and non-Agile environment which results in disliking the methodology.
Refusing to change. The main reason that makes people violate Agile methodology is human nature. Throughout life, we all are molded to listen and take orders from our superiors - parents, teachers, mentors, bosses, etc. However, when applied in a true sense Agility does not support blaming others and promotes taking responsibility for their actions. This is one aspect that makes individuals dislike Agile."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Bob Kerns,Programmer and language developer for 54 years,2016,29,"I don’t hate Agile.
I hate standups.
I fully support the intended goal.
But they’re a painful synchronization point in an asynchronous process. They’re an interruption and a distraction.
They can be flat-out impossible for a distributed team.
And they’re a point that management injects themselves to micromanage.
I figure the management part is not really the problem. If you’re going to be interrupted daily and forced to all synchronize what you’re doing and where you are, well, management will micromanage anyway; you may as well get it out of the way in the standup!
But management does make them more expensive — because managers attend more than one standup, and have other meetings and interruptions they have to deal with (I’ve been a manager!) we developers end up going “Is the standup happening yet? No? When?” in a cycle, until it happens.
Meanwhile, the communication that should happen in a standup — well, it rarely happens there in my experience. And I don’t even see that as a problem.
I see needing standups as a symptom of inadequate communication and visibility. Standups can be a solution, but they’re not the optimal one.
The thing is, though — that doesn’t make me hate Agile. Agile’s not supposed to be a straightjacket. I’ll do standups, if that’s what it takes to keep management off our backs, or if it makes our team work better.
I’ll just try to find better ways and make them obsolete.
I’m not a fan of pair programming, as a full-time practice, either.
First, management — well, just no. You can’t even discuss it, it’s so far outside their worldview. I’ve never been in an environment in which even a trial stood a snowball’s chance in hell of being considered.
Well, I heard management say “yes” once, but they did “no”. I don’t think even a full man-day was ever spent pair programming.
Second, as a full-time practice, it’s another straightjacket, locking two developers onto the same timeline. One is sick; one has a meeting
It can greatly slow down some tasks. Distraction and communication overhead can impede experimentation and exploration.
That doesn’t sound very agile to me.
But that doesn’t make me hate agile, either. Actually, I wish I could do MORE pair programming, especially at some critical points. Integration. Or after exploring and experimenting a bit, considering where to take it for real, and starting that process, feedback, further exploration with more inputs. Or maybe back to the drawing board — singly or together.
I’m tired of being the only guy on the team who knows this huge mass of code (either mine or inherited) and this even bigger mass of data. Pair programming is a great way to spread knowledge — and coincidentally, develop good teamwork and culture!
The thing is, Agile isn’t really a process. It’s a value. And whether it lets us write better code, or better respond to the unending demands of management who are trying to deal with the unending demands of the market, it’s about ...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Bob Kerns
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Richard Cownie,software developer since 1983,2016,22,"The underlying principles of Agile - know where you’re at, deliver working iterations frequently, accept that the spec is going to change frequently - are fine.
But my experience of it in practice has been that bad software development managers use Agile-derived mechanisms to implement a totally counterproductive level of micromanagement.
So, for example:
The manager doesn’t have time to read the code and understand the technical issues in detail. But they can look at the Kanban board. So he/she thinks the Kanban board is reality.
The Kanban board is a vastly oversimplified, and often totally bogus, model of reality. Reality is the code, and the developers, and the bugs. Mostly the bugs.
The Kanban view, and the story points, and sprints, all encourage the delusion that software development is like bricklaying, i.e. a highly predictable task which can be done at a consistent speed by moderately competent people, with well-specified chunks of work which can be easily subdivided with few dependencies. As long as all the walls are the same height, and meet at the corners, your’re good.
SOFTWARE DEVLOPMENT IS NOT LIKE BRICKLAYING! NOT. LIKE. BRICKLAYING!
Now the manager thinks the Kanban board, and the brief updates in standup meetings, are the reality. And then the manager gets frustrated when the it turns out that the bricklayers aren’t laying bricks at a consistent and predictable rate and the tasks in each sprint aren’t being finished. And the project is behind schedule.
The project is behind schedule, so what happens in the next sprint ? Rather than finding more resources (which is hard), or dropping features (which in Agile methodology is the correct response), the manager decides to a) argue down the point estimates for new tasks (which moves the Kanban view further away from reality); b) put more pressure on developers.
One deep principle of Agile is the importance of resolving issues in face-to-face meetings. But over the last decade bean-counting management have moved towards offshore development with teams in India, China etc. because the cost per hour of bricklayers (sorry, software developers) there is so much cheaper. But a) those teams aren’t available for face-to-face meetings; b) often they’re in timezones such that the working day doesn’t even overlap; c) language/accent and cultural differences can be an obstacle to effective communication; d) those teams are mostly less-experienced bricklayers (sorry, software developers). Of course the manager, who is subject to th delusion that the Kanban board is reality, goes along with this because it’s easy to share the Kanban board of remote teams.
After a year or so of this, the better developers on the team quit and find something less frustrating to do. And then the whole organization is in a death spiral.
I have been thinking that software development should be managed much more like patient care in a hospital, than like bricklaying. The normal state of software is to be deeply unhealthy, with many bugs and performance issues. The primary goal of the development team is to keep the patient alive - i.e. to keep the bugs sufficiently under control that the software can be usable for customers (without crashing, giving seriously incorrect behavior, or going so slow as to be useless). Each particular issue is a symptom for which we may need considerable diagnostic effort/debugging to understand the underlying cause, and then may need to attempt various different therapeutic measures/bugfixes to solve it - and often we don’t know what’s going to work until we try it.
Now, parts of this patient-care process can be managed like bricklaying - e.g. once we’ve decided that certain patients need certain well-understood forms of surgery, then scheduling the OR and the surgeon is simple. But other parts really can’t - if a patient comes in with unusual symptoms, the diagnosis may take a while. Different patients respond well or badly to different treatments.
The real magic of software design comes in figuring how to develop a complex software system in such a way that while it will definitely have bugs, it won’t have a large number of *mysterious* bugs. That requires a certain amount of paranoid coding at major interfaces, and designing/coding for a high level of visibility of the system behavior - patients with a built-in X-ray machine."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jaimi McEntire,Software development manager,2016,20,"The problem with most Agile development implementations (and when I say this, I mean Scrum, as that is what people mostly use) is that it trades Productivity for Predictability. It can feel like you are getting more done and have more freedom, when in actuality for most, you are being micromanaged and getting less done - it’s just more visible. Instead of the old “death march” at the end of the release, it either becomes a series of mini-death marches at the end of each sprint, or the team pads their work, and they run out of work in the middle of each sprint. The nature of an agile team with embedded QA developers is also an issue. Because the work isn’t “done” until it is tested, what you end up with is the QA person having no work at the beginning of a sprint, and being overworked at the end. People suggest all sorts of things to address this - “Have the QA guy work on test scripts. All developers should test.” etc. However, there’s only so many test scripts, and developers should test, but you find there are those who just choose not to.
To address this, I recommend getting OFF the scrum bandwagon. The concept of being “done with all work items” at the end of a sprint is counter-productive. You need to level out the workload, instead of having a bell-curve.
I’m not the first or only person to realize these things. We first started agile development about 6 years ago. It was a slight improvement over our old waterfall process, but the teams were not happy with the cyclical nature and the unbalanced workflow. So I went looking around, and found that many others were unhappy as well. Then I stumbled onto Kanban. Or actually, what is referred to as Scrumban - Scrum with a kanban model. It has the advantages of scrum - working in bitesize chunks - but without the feast-or-famine workflow. We were able to take this model, and fix the scrum process. Our first year saw a 62% increase in productivity. Our second, as people became used to the process, was over 40%. We can take features in, and people can look and say “There’s no way you can get this done in a year”, and we haven’t missed a release or dropped any feature (without replacing it) since the beginning — and that’s 4 release cycles now.
Lean Software Engineering"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Vineel Shah,"software engineering manager, dad",2016,19,"Problem 1 — Agile is Brittle
A good methodology works in most types of organizations, on most kinds of projects, for teams with varying levels of experience. Most orgs that implement a methodology are going to adapt it to the realities of their teams, managers, business clients, industry, schedules, quality levels, etc.
Study the few examples of spectacularly successful Agile projects and you’ll hear a common refrain: “They did Agile right!” They were able to get every part of the company to buy into the way Agile treats requirements, the way Agile treats process, the way Agile treats progress, and the way Agile delivers end results.
Study the overwhelming quantity of not very successful Agile projects — or spectacularly failed Agile projects — and you’ll hear a common refrain: “They did Agile wrong.” Most orgs get at least a few things “wrong” according to Agile — it’s usually that the expectations of the business folks. They never get what they really want and they have to ask for it again and again. Meanwhile, the developers get sick of “failing” and the whole company feels disappointed and angry. Soon they throw out the method or they twist it into something that works mediocrely and they still call it “Agile.”
Problem 2 — Agile is Easy to Say
I can’t tell you the number of managers I’ve seen that couldn’t manage their way out of a box — and adopt Agile as a way to wave their hands and talk a lot to distract people from noticing. Somewhere between the scrums and the burndowns and the point estimates the big picture gets obscured, and a bad manager feels relief.
Problem 3 — The People That Are Good at Agile Could Use Any Methodology
Here’s the only universal truth in software — smart people working in small teams on small projects with clear requirements can make software, regardless of the “process” they adhere to. All the people I know that love Agile build small apps — 10k lines or even less — most of the time. They’re good enough, and the projects are small enough, that they could use Waterfall, or just “Care About What You’re Building and Talk Alot,” and get similar results.
I don’t hate all the ideas in Agile — it came from eXtreme Programming which was some good thinking — but the Agile Religion has caused more harm than good. It’s less and less relevant in a world where one or two people can develop whole systems quickly using today’s powerful frameworks and languages."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Kelly Schrock,Been to China... Once.,2016,19,"To be clear, I think most developers actually like agile development: That is, the practice of engaging the customer/end user(s) and showing them progress on a regular basis, only building what’s needed, and letting requirements take shape as the customer learns more about the system in question. There are many good things about it, the primary benefit being agility.
What developers don’t like is Agile(TM), the branded project-management practice that seemingly stands as nothing more than a tool for micromanaging developers and treating them as slaves in the belly of an oar-driven ship. In the worst cases, it puts extreme pressure on the people doing the actual development work to deliver “tasks” within a specific timeframe, without giving much (if any) thought to the overall design, the fact that bugs will appear and need addressing, and without any input. The one thing the approach lacks the most is agility. This is usually the fault of the people running the project, not the process itself. So Agile(TM) gets much of the blame."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anonymous,"Upvoted by
Marcelo De Zen
, 15+ years as a software developer. and
Alan Mellor
, Started programming 8 bit computers in 1981",2016,20,"In a nutshell, I don't like it because it's nothing more than micromanagement and after nearly 10 years of higher education and another 10 years working , I don't feel the need to explain what I am doing everyday to some koolaid management suck.
Also I highly dislike getting treated like a fungible cog, and flung around to some new shit shovel every two weeks.
As an engineer, I want meaningful work. Nothing meaningful can be completed in two weeks. Also I want to be treated like an adult, like someone who understands their responsibilities.
Sure there are deadlines, that's a thing. Believe it or not we have been trained to handle deadlines. We have had high stake exams throughout university. Dissertations that were peer reviewed, publications, etc. We will generally pipe up if we know the deadline and think we can't make it.
Agile is nothing but insulting, infantilization of engineers. Planning poker?? Post its?? Scrum??? It's a total joke.
I am a software engineer. I write code. That's my fucking update."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Ilya Naoumov,Technical Lead Engineer at OnDeck (2014–present),2017,15,"Sometime Agile can be used to recreate the assembly factory methodology only with software. Product Managers and business stakeholder come up with the features they want implemented (rather, they try to do their best to explain what they want). Then the PM decides the priority of the work, which also comes down from the top of the organization. Some of the senior engineers will work on the design for the application, if it is sufficiently complex. Finally, the work is broken down into tiny tasks that can be accomplished in a two week spring. In the end, the engineer is just left to pick up the task at top of the backlog, and implement whatever s/he has been told to implement.
Generally, in well formed teams, the stack, conventions, and coding style is already well defined. As you can see, all that an engineer has to focus on is implementing the spec in the task, code coverage, and making sure s/he does all that as quickly as humanly possible. The software engineer ends up acting a small cog in the whole process of building out some feature for the business, much like an assembly line worker is tasked to tighten several lug nuts on a car that the factory builds. Ultimately, Agile takes autonomy away from the software engineer, and the engineer could ultimately be implementing a piece of software that s/he doesn’t understand how it fits in the broader picture. It’s all really dehumanizing, if you ask me."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Murray Robinson,Agile practitioner and evangelist.,2017,17,"Agile was created by software developers. Most developers love it. The few who hate agile do so because it's been severely distorted by command and control managers in their organisation to micromanage developers and make them work unpaid overtime. It's not agile they hate, it's horrible management. They just don’t realise it."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Scott Willis,"Embedded developer in Washington State, worked in medical",2016,15,"Agile is all about feedback loops. Distorted feedback causes problems. Would a syntax-highlighting editor that faked its results to make your code look good be helpful to you in any way?
Its very hard for a manager to not try to control what they are responsible for, to not turn what looks like a ""go faster"" or ""cost less"" knob, especially under pressure. When management pressures for low estimates, they are trying to make the project go faster or cost less. Wrong knob!
Perhaps the most important condition required for Agile to work is for management to be clear on the distinction between estimates (a measurement) and features (a control knob) and never push on estimates. Pushing for a low estimate is like pushing a speedometer needle higher: it doesn't make you go any faster, and now you don't know how fast you ARE going. If you punish a messenger who brings you bad (schedule or other) news, better get used to only hearing good news - until the bad news can't be hidden any more. If you want the truth about the state of a project, it had better both be safe and seem safe for people to tell it to you.
The best I've figured out is to ask for slightly pessimistic estimates, ask if there are any resources they need or any barriers that can be helped with, thank people for bringing 'bad' news to my attention, and explaining what I intend to do with the information - ease fears of 'being in trouble' for telling the truth (as they understand it).
Giving distorted feedback to your manager and the team you're working with, in order to look good or in response to pressure, is easy in the moment. Then there are consequences when they use this false feedback to make decisions. Give them the best, most accurate information you can; you'll be living with the results."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Ghost Orange,Author has 18.2K answers and 40.9M answer views,2016,19,"Because it is done incorrectly. My teams love it and Agile is perfect for making games. I’ve also used it on big clinical systems, where waterfall failed.
I totally agree with others here that say the failure is probably due to newer PM’s doing what they learned from lame trainers that never managed a project in their lives, working for certificate mill schools that invent a pile of useless classes to maximize earnings while confusing students. Vampires.
What you need to know is simple. It makes sense. What you need to do is only a little. High gain for low effort, so your effort goes to making software.
Review, plan, develop, repeat. This is not tricky.
Make estimates where 1 dev day = 5 hours on task. Leads task at 3 hours.
Devs calculate their own capacity, subtracting vacation, doctor’s appointments, et cetera. Add it up.
Make your plan by filling 85% of capacity for the period, with the most important remaining things. Commit to a sane plan.
Monitor results daily. No percentage complete allowed - binary, finished or not finished only. Countdown days. Fix any variances or problems as you go.
Make the work complete enough to be reviewable.
Take a hard look at what you got, with all stake holders and developers.
Go again.
This is a mental system, not a software system, not some patented process, not a certificate. I can do this on paper, in Excel, in a bug tracker, in Jira, Word, on a white board, Post-its, whatever. And you can too. Anyone can, that sticks to:
What is the goal?
What is left?
What is next?"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Matteo Ianeselli,both loves and hates computer programming with passion,2017,12,"You ask: In a nutshell, why do a lot of developers dislike Agile?
In my personal opinion, it’s probably because the adoption of Agile techniques can be easily abused as an excuse for software architects (and requirement managers as well) to be able to procrastinate ad infinitum critical architectural choices, thus basically postponing, if not avoiding at all, taking unpopular decisions, and therefore shifting the blame away from them (and for developers operating in a yesmen environment, your main goal shifts from delivering something that actually does and will do the job to avoid being the one who says no).
If you ever watched the humorous video The Expert you’ll understand the kind of environment I’m talking to.
I believe that’s mainly because the continuous refactoring aspect of Agile techniques is often and conveniently dismissed (“because we have no budget/time for that and it brings no visible value to our customer”). This invariably ends in accumulating lots of so-called technical debt that has to be repaid in some way sooner or later.
In some way, it’s just like when function points (unrelated to Agile techniques) are abused to estimate the time required to ship a software product (been there, done that), conveniently ignoring they are not the right tool for that job (at least, they are not the only tool)."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,James Peckham,Software Development and Technology Management (2003–present),2018,8,"Few people like to work hard and Agile software development forces both sides (Customer and Development) to play fairly and continuously together. It’s exhausting.
Most Agile methods, like Scrum will force very detailed visibility. People who are use to lurking in the shadows, doing work the way they want to, are outed. People who provide no value and do things like manipulation and delegation are outed.
Better is relative. The alternative is plan based approaches. They vary from heavy up front requirements (dev centric) to date based approaches (sales/marketing centric). The problem is that one side always loses and usually the pendulum of power swings wildly."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Dan Shappir,Worked at Wix (2014–2021),2017,11,"Two main reasons for me:
Because it’s presented as a silver bullet for fixing any and all process issues. In particular many managers like to embrace it as a means for increasing production without investing more resources
Because many managers try to apply Agile without actually understanding what it means, or even bothering to learn it. Instead, they pick and choose only the specific aspects that they like, and often don’t even follow through with those"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Ori Shalev,a software engineer,2017,8,"Some answers here disregard the phrase “in a nutshell”… I’ll try to be short: writing code is art; I’m going to use an analogy I’ve used before - developers as chefs. If a chef is requested by the restaurant owner to come up with three new recipes (“stories”) a week, and they’re running out of time, they have the following three bad options:
Compromise on quality - makes them feel like bad chefs. They know that in the long term, they’ll pay a personal price for taking shortcuts.
Compromise on quantity - makes them look like they haven’t been productive enough
Work very hard to meet the schedule
Having to make that kind of decisions on daily basis is stressful. It feels like making tough decisions, which used to be the manager’s problem, have shifted to the chef/developer. That feels unfair: not only that developers do the hard work, with Agile they are suddenly responsible for stuff their managers used to offload from them."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Miles Fidelman,"Systems Architect, Entrepreneur, and Policy Wonk",2021,10,"Do they? Most of the developers I know LIKE Agile.
On the other hand, (good) Product Managers, Program Managers, and Systems Engineers are the ones who dislike & distrust Agile. The main reason being that Agile emphasizes incremental development - short bursts of effort that add or enhance functionality. That’s great for maintaining a small piece of code. The larger, and more complex a system you’re building, the more that incrementalism gets you into BIG trouble. You need a lot of up front design to define the pieces (modules) of your system, and how they all fit together, as well as how your system interfaces to the outside world - you know, system & software architecture. Once you have a good architecture & interface specs - then Agile can be effective at building individual modules. But… folks who swear by Agile tend to skip the architecture & design stages and go write to the “let’s build the simple version and then incrementally improve it.” The result is often disastrous - pieces that don’t fit together, software that doesn’t fit into it’s run-time environment, products that don’t work well with other products in the same product family, products that don’t scale and/or are hard to enhance – and lots of time wasted in debugging and re-writing stuff, because it wasn’t thought through in advance.
Agile is like writing a draft of a mystery novel, before actually thinking through the details of the crime, or the backstory of the characters. Or shooting a bunch of scenes of a movie - only to discover that they all have to be reshot because there’s no continuity.
The Waterfall approach can be tedious, but incrementalism can be VERY expensive - particularly when working on mission-critical and safety-critical systems. You don’t really want to add a missing feature, or fix a bug, after an airplane has fallen out of the sky.
Afterthought (8/26/2021): And.. there’s a lot of room to streamline prcess, between classic waterfall, and pure “move fast & break things.” Some good whiteboard architecture, and back-of-the-envelope sizing calculations, can go a LONG way. Along with pinning down data table definitions, and interface specs, early on (and designing them to be modular & extensible)."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anusha Hewage,"Agile Thought Leader, Program and project manager",2018,6,"I do not think developers do not like Agile. If they are really passionate about the development work, they do like Agile .
This is part of the cultural aspect of any change management and it has nothing to do with Agile.
As an example, today if I were writing my code for the task which has been given by my project manager and I would sit and write that code and go home. That is the style I had been practicing and used to.
But tomorrow if some fancy somebody called ‘Scrum Master’ or Agile coach comes and all of a sudden tell me , this is how we are going to do this and lets have a stand up and blah blah blah.. I would first think he is nuts , stupid and then is useless. despite I will still go ahead ( as I need my job) , and will do what ever I was asked to do . And that will not be with my bias.
Developers in general are introverts ( this is an observation and can be wrong ) and if you ask from them to give updates at stand ups and showcases they will be nervous ( I have literally seen developer with shaking hands while giving stand up updates and claiming sick leave on showcase days ) .
This is change management which need to be aligned with empathy and psychology.
This is where ‘good’ Scrum Masters and ‘good’ Agile coaches are required. I stress the word ‘good’. The world is full of Agile coaches and Scrum Masters who are certified with all institutes available on planet earth and has done all the courses in Agile. But a Good Agile coach or scrum master may not have any of those certifications but can be a good leader with good leadership , empathy, coaching skills. We need those people who can understand the situation and help the development team to go though this journey.
However at the end of the day , there will be personal choices that some people are reluctant to change and they are not only developers ."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Ken Benneth,founder,2019,5,"In a nutshell, a lot of developers experienced absolute rubbish peddled under the name “Agile”. A lot of sites adopted Agile rituals without implementing the processes that make them work. Those rituals are rarely adapted to the specific enterprise - you cannot just take what works for a Silicon Valley company and implement it in a bank.
When a good Developer spends a year working on a project with methods that don’t work, does all the rituals that are expected of them, and then the project fails giving all Developers a bad name - the Developer has a right to be furious. And to demand that next time someone provides detailed Requirements, so that he/she can just implelement what’s written there and let someone else take the blame.
I recommend to look at AGILE without MAGIC. Disclaimer - I started it.
Agile is great. It just has to be adequately implemented, with respect to site, available staff, type of project etc."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Mike Simon,Marketing Strategy and Co-Founder at PartnerUpList,2020,4,"There are a lot of serious issues with Agile. But for some reasons, a lot of companies, driven by fancy consulting firms, don’t want want to see it. Here are a few critical points.
Often times, Agile leads to micromanagement when senior engineers with 15 years of experience are being tasked to do the same as junior developers which is very demotivating.
It doesn’t respect knowledge and seniority and it makes developers easily replaceable, which is probably good for the management but really bad for the business because it kills the motivation.
It conflicts with job security idea which a lot of smart people unconsciously follow. It promotes collective code ownership, which in reality fake, because there is always an owner. If the code is truly collectively owned, then it is even worse because it means nobody is responsible.
Agile resource and time planning are horrible. Agile planning is not compatible with any engineering or science principles.
The alternative is traditional project management. If you need, you can use iterative approach to avoid waterfall problems."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Lelanthran Manickum,"MSc in Computer Science & Software Engineering (college major), University of Hertfordshire",2016,8,"To all those answering “You’re using it wrong - that’s not Agile” all I can say is this: if 90% of practitioners cannot get $FOO working correctly, the problem is not with the practitioners, it’s with $FOO.
The problem with Agile is that it aims to be useful when requirements are not well-known in advance, when development is of an exploratory nature and when the project can be broken down into granular units.
If your proposed project cannot adhere to all three of the above requirements then don’t do Agile. IME, most requirements are well-known in advance because the project is a replacement for an existing process. IME, other than startups or academics work is not going to be of an exploratory nature. IME, when you know work can be broken down into granular units you already have the requirements in hand.
The last problem with Agile - it’s unsuitable for any atomic problem that cannot be solved easily. You can’t cross a chasm with two small jumps. Sometimes a big jump is needed."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Eran Kampf,Author has 106 answers and 443K answer views,2017,7,"In a Nutshell:
Because companies tend to adopt an “Agile” methodology as a god-given set of rules to be followed rather than a set of tools and processes to adopt, tweak and adjust over time…
Longer answer:
Because most companies like to say that they’re “Agile” while in reality just using it as an excuse for more meetings, more bureaucracy, micromanagement, time-waste and a lot more pressure (because the Sprint is about to end and you still have to get thinks done with all that overhead)
The reason behind this is that companies treat whatever buzzword methodology they choose as a set of strict rules: We have to have a stand up meeting every morning, and we have to cost everything (even stuff we don't know how to cost) and have a functioning demo to a “consumer” at the end of each sprint.
Not all teams\products are created equal and you have ti be able to take the set of tools Agile provide and be able to fit them into your team in a way that enabled work. Not the other way around.
“Agile” in the hands of the most companies ends up as the exact opposite - a set of strict procedures and beaurocracies to the letter.
Rather than thinking about their process, tweaking and improving it managers tend to delegate to the holy rules written by the gods of SCRUM or whatever…"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jonas,Author has 2.4K answers and 6.2M answer views,2016,9,"In some places agile is mis-sold as “don’t think or plan, just program”. One prominent example is Leslie Lamport, who notoriously has (or had?) this view about agile development. If I was a developer and my boss told me to “stop thinking or planning”, and my coworkers would stop thinking and planning, I would be very unhappy.
(google images)"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,S Markem,Author (S. Markem) of The Wizard Of Trope and more,2017,5,"They don’t. They dislike poorly executed agile. They may have only ever experienced poorly executed agile. They may not even realise its poorly executed agile.
There are so many good answers below and so much information on why agile projects are often bad that I’m going to try and keep my answer tightly focussed on the real root cause. This may then suggest some options for you to explore.
Why is there so much poorly executed ‘agile’?
Since I started with ‘agile’ in 1999 I have observed that:
Very few people who are programmers study it in detail. Rather they get their knowledge, primarily, second hand. The are shown a process but their study is not sufficiently experiential.
Learning ‘agile’ is, I would suggest, akin to learning how to program. Its requires a similar approach and takes about the same amount of dedication.
Very few people have been allowed to implement it fully, without constraint. Therefore very few people can say they have genuinely been on a truly agile project; yet there are tens of thousands of ‘experts’ of one form or another.
Very few people dive deeply into the why and instead focus solely on the how. They follow instructions. Not understanding why the approach is structured in the way it is can lead to a lot of ceremony, dogma and waste.
Everyone ( but management in particular ) just wants an instruction manual. The temptation of the quick fix. They indulge in ‘wishful thinking’.. Do this, do that and then you’ll be agile. I wish it were that simple.
But.. the Number One problem I see is:
Treating programming as production ( manufacturing ). Its is not. Programming is fundamentally a design activity. The goal is usable knowledge. The output is code. Failure to grasp this concept turns agile processes into sausage-machine-dogma… and so it follows… people hate it.
Intelligent programmers are not machines.
And I don’t blame anyone. We all have jobs to do. We’re busy.
It takes a very committed management to provide the necessary time, space and investment to build truly agile cultures.
Hope that is helpful in some way. Its a very good question you raise."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Travis Worley,"Lives in Austin, TX",2018,4,"I wouldn’t say everyone dislikes it, but yes, a lot complain. I think the biggest reason, when it does happen, is b/c Agile, Scrum, and various iterative forms of development are not typically understood extremely well. Many companies don’t have a great process in place. They don’t actually embrace an iterative methodology, even though they think they do. Or they do it sort of half-a**ed.
And that is what many developers will undoubtedly hate. They don’t like it b/c in many manifestations it’s just plain garbage. Agile, or iterative development done right can be amazing. Done incorrectly it can be a nightmare (just like any other paradigm). Developers and engineers are very analytical by nature, so any process that doesn’t seem to follow well defined rules, or has shoddy systems in place, is going to raise flags.
Another issue is that Agile and virtually all software life-cycle methodologies are not perfect systems - there is no perfect system (a system that doesn’t have caveats, areas that require a human touch, or require some slight modification or deviation). That’s the whole point of iterative development (in large part); to address those issues quickly and easily when they arise (so you don’t find a mess later weeks or months down the line). However, that’s *also* something that goes against the grain of typical developers analytical thought processes.
Like some others have already said, one of the most important things, regardless of which process you use, is that you do have *some* decently functioning process in place that everyone follows and understands."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Peter Webb,Lives in Far North Queensland (2023–present),2018,5,"Agile isn’t a project management pattern. Its an “anti-pattern”.
For project managers who don’t know what they are supposed to be building, its the “go to”methodology. You just allocate a programmer to every thought bubble from a sponsor/user, no planning required. And if they change their mind, or it is inconsistent with everything else - well, that’s the beauty of Agile, you can do something else.
For software houses, its God’s gift for eliminating risk. Actual properly specified projects should be able to be done against a fixed price. Which means the vendor carries the risk. But “Agile” has no actual deliverables; it can only be invoiced on a time and materials basis. No risk.
Lets take an Agile approach to building houses. Ring up a whole lot of bricklayers, bricks, carpenters, roofing people, get them to come to your vacant lot, and tell them you want a family home. Don’t worry too much about how many bedrooms or how many stories, lets just start building. We can work out those details later.
Agile. The only alternative if you lack the skills or knowledge to actually write down exactly what you want in advance, and terrific if you are a programming business interested in a contract where you can’t possibly lose money. For everybody else, an expensive waste of time."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Manikandan Selvaganesh,Indian | Geek | Open Source Enthusiast |,2019,5,"Old thread, but cant resist answering.
I personally dislike agile. Agile is too documented and procedural. There are a hell a lot of meetings that unnecessarily happens that waste our time. To be simple, there are a lot of agile ceremonies that sucKs our time which can be done just by interacting to your peers during your free time. People claim work from home options are disruptive in agile(Common, does that really matter). It does not matter if the people who claim that takes. At the end of the day, its all about what development we have done. Whatever, the software engineering model be, it should not be too procedural neither too documented. Stop asking updates every now and then. Give us the freedom and independence to work, and you will see us better. So sad, that I m currently working on this model. I had worked on a company which gave us complete freedom, independence and after all, they gave us the time to work instead of blocking our calendars with all the meetings that they can.
__
A true lazy developer who dislikes agile.
Peace ✌"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Kevin Taylor,Professor | Researcher | Angel Investor,2016,5,"What killed “Agile” is that the project managers and other non-programmers took the reins of the Agile movement and “Scrum” became the dominant version of Agile. This effectively killed off Extreme Programming, which is a highly effective way of producing software.
You could see it at the annual Agile Conference. Each year the Scrum voices got louder and the non-programming focus of the event became more obvious. Eventually I, and many programmer friends, stopped participating and moved on."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Quince Williams,BS Math/CS,2016,5,"The software developers that I consulted with on a project were totally against Agile. They preferred Waterfall. They said that they liked to get all ducks in a row.
Agile methods, especially Scrum, seek feedback with investors/clients every few weeks. The problem is where clients desire an useless feature that they saw somewhere else during the 10th week of development."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Phil Jones (He / Him),Still trying to figure it out,2016,5,"When I first read ""eXtreme Programming"" I was enlightened, and thought ""this is obviously how things should be done""
Then I thought. ""OK. So what's wrong with it?""
And I realized. This was software development organized for the benefit of programmers. But not necessarily convenient for other participants like managers and customers.
I mean I liked it. And as a programmer I believed what was good for me was obviously good for the customers, once they got over their hangups and adapted themselves to me. But I could see how the rest of the management hierarchy would want to see more prediction and control and hard deadlines etc.
Well I never worked on a proper agile project, either waterfalls or extremely small projects, but reading countless articles analyzing ""what went wrong"" it's clear that management / customers did rebel. And changed the practices to something that suited them (giving them more of the (illusion of) control they wanted) and consequently what is now hyped as agile is a perversion of the original understanding and ideals .
Done badly agile just becomes a standard project with very tight deadlines."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Vishal Lahsiv,Author has 61 answers and 480.5K answer views,2016,5,"Don’t get me started…
Agile was probably designed for software (mostly websites) in which the deadlines were defined internally. In most cases that is never true and you don’t get the luxury to define you delivery dates nor will they line up to your sprint ends. If the customer wants it now you give it to him now not after two sprints.
As a developer, what is my incentive to take a long view of the system and invest time in coming up with a robust framework upon which everyone can build. Rather, I am just suppose to deliver pieces of shippable software and we all know what happens when you request management to leave your team alone for a sprint or two to “refactor” and cleanup the old technical debt.
As a developer, what is my incentive to complete more points than someone else in the team? My performance review is not being based on the number of points I complete.
There are areas of concentration that everyone develops. Each individual will know one part of the software better than the other. We don’t have to force everyone to work on everything…it achieves nothing and lowers code quality. If the person leaves we can learn but until then let these domain of expertise remain, it is very natural.
Management and many developers get so carried away by Agile that they don’t realize that the process is not the solution. We cannot ship User Stories or Task boards and the answer to every technical problem is not - Agile.
“StoryPoints/Velocity” - This one just makes me mad. So we now need this abstract unit of measurement which is not really time or man-hours but some obtuse weird notion of complexity which people take more than 15 mins to explain a new comer. Why?
Why or how is Agile different than a simple divide and conquer strategy to solve any complex task? You have a problem (any problem in life), how do you solve it - piece by piece."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Joey Guerra,"Software Engineer, Ex Pole Vaulter",2016,5,"Because they are not the ones deciding to be agile, someone else, who is not a software engineer, is deciding for them and forcing the process. Search the web for “the pig and chicken” story for an analogy. The chickens are the ones deciding, while the pigs have to live with those decisions.
I refuse to answer what methodolgy is better because there are too many parameters to the problem to give a good answer."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Aaron Brady,8y,2016,5,"Agile is way of making things where you accept a large amount of uncertainty about the future and pursue what appears to be most interesting at the moment in exchange for learning quickly from experience, failing more often and deferring decision making to your future selves who are, hopefully, more informed and better able to make decisions about the product.
Some developers dislike the failures that come from the lack of planning in Agile, they say that spending more time mapping out what needs to be done would be a better way of doing things. Sometimes the lack of planning has real consequences, for example building a rocket to the moon probably could not be done through agile methods. if you found out halfway in that you needed to add another stage and hadn’t planned for that all along it would probably be a disaster.
Sometimes the process appears to be Agile, but is actually some other process in the guise of agile. For example having a daily standup when everyone knows what they’re doing may be a waste of time, or having management constantly changing priorities, or not accepting estimates etc. etc. can make developers feel like ‘agile’ is just a tool for management to manipulate you.
The alternative to Agile is to try to plan everything up front in a traditional waterfall manner. Makes sense for bridges, or moonshots, but by trying to do too much planning up front you often have to take guesses (that end up being wrong), and you deny your future self flexibility to adapt to lessons you learning while developing the product. And in the case of software, where the cost of changing directions is so low, the traditional waterfall method ends up being less efficient, and often bogs things down so much that projects grind to a halt (see the healthcare.gov disaster)
My advice is that, if you’re in a situation where people are rejecting ‘Agile’, try to come to an agreement on a process similar to agile where you learn to live with uncertainty, and move forward in the direction that appears to be best for your product rather than falling back on rigid planning.
(I recommend Season 1 for a much better analysis of the two types of project management I discuss here)"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Andreea Visanoiu,Scrum Master | Agile Coach at Mindvalley,2017,9,"Agile is not a framework / methodology, it’s a way of thinking - as the Manifesto for Agile Software Development clearly says. The point is to work around these principles and implement them in your approach to software development. At no moment they say that you drop all the values on the right side and you go build software chaotically.
I’m a Scrum Master, so I obviously work with Scrum. But I’m not anal about it, I see Scrum suggesting a set of tools that I can work with and adapt to fit my teams. This is how we ended up doing Scrumban (Scrum + kanban), because Scrum didn’t exactly fit one of the teams. Another team does Scrum/XP. In other teams I use different approaches, keeping some elements of Scrum (roles, values, self-management, retrospectives mostly). When the case, I give up daily huddles, if the team already has a good communication flow going. On top of it all I’m a big fan of Lean (as it is promoted by Toyota and Mary Poppendieck), and I use ideas from there to increase performance and work better. Otherwise, I’m helping the team become Agile and Lean without getting stuck into frameworks and rules.
Certifications as a business created a big problem and put a lot of people that don’t understand Agile (or the concept of a framework vs a methodology, or the fact that for example using only Scrum is not enough, using Scrum “by the book” doesn’t work for all products or team) in the spotlight. There are tons of Agile Coaches, Scrum Masters, Agile PMs, Scrum POs that have no clue what they’re doing and they don’t understand the mindset. You have to live and breath Agile, and responding to changes and adapting are the first things that are dropped when implementing one of the Agile frameworks. It’s basically implementing Agile without even being agile.
Another issue I see: developers are not listened to. There are Scrum Masters, Product Owners, Agile Project Managers who act like bosses and give orders, set estimates and deadlines and push for work done without considering what the developers think or advice. That’s another big issue with Agile - waterfall gave them the impression of freedom (at least for a period of time they were left alone to work on the product), now a lot of roles are meant to bug them and control their work. This is again agiliy interpreted badly. One of the best parts about Scrum for example is the self-management concept. There is no management, there are no bosses. But it takes a true Servant Leader to understand that, to listen to the team and make sure the choices in process in tools is agreed with the entire team.
My favourite part about Agile is the “people over processes” part. One of my personal metric is the mood / happiness of the team. I take their feedback seriously (from the communication part, to “processes slow me down” part), I listen and I help them find the right tools to work with, I don’t impose (nor exhaust myself trying to convince them). They do the work, they know better. All I am expecting is for them to be open to experimenting, inspect, adapt and continuously improve. Be it Scrum, Scrumban, ScrumXtreme, story points or mandays, user stories or what have they. I don’t make the choices for them.
In the end the fact that the software development effort is guided and managed by someone else but developers is a huge issue. It’s normal for them to hate the Agile part, which may mean they hate the “agile people”. All the roles that are made by inadequate people, that don’t understand the need to change, inspect, and adapt of Agile. Which might mean, for a certain project, for a certain team, adopting waterfall."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Baruch Atta,Upvote,2019,3,"The agile method relieves management from having to develop specs. which means developers must recode and recode until management gives the blessing.
The agile method has little use for documentation - which developers need to support a system.
Developers like best the reiterative waterfall. Complete specs and documentation, while continuously conferring with management at every step."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jeff Wilsbacher,Bay Area Native and lifelong resident,2018,3,"Because “Agile” (note the quote) is often used to micromanage developers in one of a number of ways.
Becoming a software developer you have to spend a lot of time by yourself learning to code. When doing this your most productive/best feeling time is when you’re able to get “in the zone”. Flow (psychology) - Wikipedia.
Agile *requires* you to spend time outside of flow state for meetings, pair programming, user story creation/editing/validation etc.
It may also force you to be in the office at a time when you’re not productive (when their is a bunch of business folks around making noise and asking questions).
“PM paradigms” can be a problem. PM’s are often proxying for stakeholders. If those stakeholders have unreasonable expectations or are micromanagers it doesn’t matter how their message is delivered.
Developers want PMs to leave them alone for blocks of 4+ hours so they can (often with the addition of headphones and good music) get into a flow state.
Agile requires developers to work in a team environment where flow state is more difficult to get into.
“Agile” (note the quotes) frequently discards necessary technical spikes for activities such as research, design, investigation, exploration, and prototyping.
Software estimation is painfully hard. Some developers feel self-conscious about wrong estimates and force themselves into a mountain of hidden overtime so their estimates are (more) correct. While agile addresses this issue its (very) frequently disregarded during actual agile “production”."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jayesh Lalwani,Iterator,2016,6,"I think the core problem in lot of Scrum implementations is the lack of self-organizing teams. Most Agile adoptions fail because they see the SM/PO as a PM that the team is organized around. It works a lot better if you empower the team to figure things out for themselves.
It’s all about power and responsibility. Waterfall models put a lot of control in the hands of the top brass. They get to dictate how the organization is organized. They get to dictate the process. In turn, they take extraordinary responsibilities. The developers essentially are responsible for doing things that they are told to do.
Agile, OTH, requires the managers to delegate power and responsibility. Developers are responsible for managing themselves. All the PO cares about is whether the Agile team is delivering. They don’t care about how the team operates.
(Traditional) Managers hate ceding control. Adopting a Agile model in a large organization that runs waterfall means that the developers will be responsible for making certain decisions. But, Managers don’t trust the developers to make those decisions. So, they come in and micromanage. And if they are not technical, they might dictate process that are not sustainable.
And, to be honest, a lot of developers don’t want control too. Oh they might say they want more freedom, but a majority of developers do not want the responsibility. What they really want is for the manager to go away and let them do what they want to do, and at the same time, be answerable to the client. No, it doesn’t work that way. If you want the freedom, you are answerable. A lot of PMs become punching bags for the developers. End of the day, it’s a lot easier to complain about the PM than to fix the problem."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anonymous,8y,2016,4,"My apologies for posting anonymous but I would definitely get some trouble publicly criticizing our project management if this was showing my name.
The trouble I have seen with agile is that companies, at a high level, hear about this great methodology that will have them developer faster and more reliably which sounds just amazing to them. So they tell their development teams and project managers that they all need to start being agile. However, none of the executives and project managers are willing to let go of the metrics, measures and assurances that their older methods had. They want the project to better meet the client’s expectations but they won’t relent on agreeing to every specification in detail before development starts and they won’t agree to changing the requirements as the project progresses. They want estimates to be better but they won’t agree to start development until every task is broken down and estimated.
They want the benefits of agile without giving up any of the processes that they are comfortable with.
In our current agile methods is that there is nothing agile about them at all. Officially the project managers tell the world we are agile but the reality is we are working on a waterfall method with review meetings every two weeks. The client and business analysts design the specifications to exact details before hand, estimates are given, a release date is agreed to and a contract is signed all before any development begins. Once development starts we can’t change the specification without going through a change request process and testing is all done at the end. The only things we do that makes people believe we are agile is (1) we have a meeting every morning and (2) we have a review with the project manager every two weeks.
People here say they don’t like agile and that agile doesn’t work but the truth is they don’t know anything about agile methods."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Walt Karas,"Software Developer, https://wkaras.github.io/",2016,4,"Software development is a practical activity. Practical activities are activities people expect concrete results from. Software helps you do concrete things, like drive your car or pay your bills online, not nebulous things like improve your general sense of well-being. Principles that help you do practical things should be falsifiable. This is an issue with many methodologies, not just Agile. Agile says you should have a backlog of features, and work on them from high to low priority, and just get as many done as you can in each sprint. No pressure. Since the USSR no longer exists, it would be hard to find an organization where you could strictly follow this principle. Usually, you have lots of high priorities, and you’re trying to guess which ones you can put off without going out of business. You rarely get to work on anything that seem “optional”. Sí pressure. So, whatever goes wrong, your Agile consultant making 3 times as much as you are can always say “well, what do you expect, you’re not following the rules?”. Agile always works, because, in practical terms, it’s impossible to say it doesn’t.
Maybe we should keep our floaties on and stick with methods for now:
Don’t just sit there. If requirements are murky take your best guess. No matter how much throwaway and rework results later, you won’t get less done than you would have doing nothing. Do the OO thang and try to make components that make sense free standing and could perhaps be reused in other efforts.
Writing stuff down about what your doing and trying to do is basically a good idea. Lists of somewhat free-standing points (like this one) are generally more helpful than long paragraphs. If you don’t have tools to make flashy fonts and graphics as easy as making stuff that looks like IETF RFCs, then make stuff that looks like IETF RFCs. Slides that don’t say much of anything without you standing next to them saying what they say are of very limited usefulness.
TDD is generally good if you’re not anal about it.
If experienced team members want to dive into the details of something they anticipate is high risk, let them. That’s often the best way to anticipate and mitigate delays and the need for more resources as early as possible.
Lets not try to rush the day when we’re truly ready for the methodology deep end."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Peter Trudelle,30 years in the bit mines,2018,4,"They hate Agile because their leaders inflicted a project management paradigm on them, and called it “Agile”."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Kostya Stepanov,Founder at Shakuro (2019–present),2022,1,"I think the biggest problems is client’s distrust and dissatisfaction with communication when going agile… When outsourcing, a customer never has full control over what’s happening.
Successful communication increases the probability that a client will be fully satisfied with the final product. It soothes the nerves, creates friendly working relationships, and gives more freedom to a developer.
Building trust is key to regular clients. And that means more profit, reputation, and glory in the end.
These methods worked for me:
Show your client how to work with you
Through smart onboarding and communication guidelines.
It’s very important to clarify what to expect from you after they hit that “send” button. Ideal onboarding provides answers to 3 key questions:
What services do you provide (in details)?
On which principles do you provide those services?
How exactly can your services be useful to a client?
Set realistic deadlines while managing an agile project. Set achievable goals. Communicate with them in a believable way. Teach employees how to deal with clients’ objections and comments.
Update product roadmap
Getting the roadmap right from the start can save time and resources in the future, but development is tricky, and sometimes adjustments are necessary, especially in agile projects.
If you’re adding tasks to your backlog, will the final look change? Will the project help with some other client’s problems, other than the ones you discussed in the beginning? If the answer is yes, update the roadmap. Keep it current and make sure the client knows about it.
Don’t let your perfectionism get the best of you. Being on schedule is more important for a client than introducing new features.
It’s not just sprints and scrums
You should regularly have 2 types of meetings with them: vision-alignment meetings, and retrospective meetings. Schedule them after you finish several sprints.
Vision-alignment meetings are the ones where your team and a client can reassess the state of a roadmap, offer changes to its timeline and budget. When working on an agile project with a client, help her or him make sure that:
A project is heading in the right direction.
There is a unified vision of the final product.
You solve the occurring difficulties before the stage of project delivery.
Retrospective meetings are the ones that allow us to discuss the existing state of affairs. What works? What sucks? That kind of stuff. They are also a great way to receive positive feedback: recognition of teams’ merits by others.
You can see more about my agile methods in my free article on shakuro.com."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Patrick Butterly,Software Engineer,2017,3,"WOW lot of answers! Ill add my own because I dont see it (although it might be there somewhere) the answer is very obvious when you look at it though.
AGILE IS NOT WELL DEFINED!!!!!
People advocating agile will go to great lengths if it isn't working to tell you your doing it wrong. Bottom-line is agile is a abstract concept with loose implementations hat focus around a center theme of “if it isn’t working for you change it”.
Management see it as a fix all but focus on moneymakers and demand deadlines and estimates(for obvious business reasons), this makes it anti-productive and frustrating for development.
Basically a buzz word in the management realm everyone has to use but more often than not wont relinquish control over the process reducing it to time wasting nonsense.
and my answer ran on longer than intended…."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Adrian Olszewski,Principal Biostatistician & Statistical R Programmer at 2KMM,2017,4,"Personally - due to pair programming. I hate working on my code with someone who interrupts me. I like thinking and coding completely alone. Secondly - I don’t like working on someone’s else code (doesn’t matter how easy to read it is) and I don’t like others touching my code. I accept and appreciate code review (to make my code better), but I don’t accept others to modify my way of thinking. Thus - I don’t work for companies where Agile is employed. It doesn’t mean I don’t appreciate Agile as a smart way of making life easier and product better. It only doesn’t work for me."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,James Simpson,CTO | Sydney Australia | www.analyseIT247.com,2016,3,"There are reasonably common things that developers don't like such as:
sustained pressure to work long hours to meet deadlines that they don't subscribe to
being asked to provide status and updates too frequently
being part of a team that is trying to fill expectations that are not realistic
not having the time to develop at a level of quality they feel is ""good""
the need to create reports or communications that feel ""artificial""
You can achieve these things with almost any methodology including Agile. I think it's helpful to look at the root causes behind the points above in a given environment to understand why developers are unhappy. Not always, but often, it comes down to a combination of management values, culture and expectations.
For example: if a point of authority in an organisation holds the value that it is okay to achieve an aggressive goal by simply pressuring people into doing more than they think they can do, and they do this repeatedly, you run the risk of seeing some of the unhappy symptoms above. It doesn't matter which methodology or framework you use.
A particular challenge with Agile is that the way in which it is communicated often promises a lot. And it seems to promise more with each retelling / reselling. This is where it can be helpful to separate the set of ideas called Agile, and the set of expectations created when groups buy into a quasi-product called Agile. Or Scrum. Or Waterfall..."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jasmine Noack,Software Engineer,2016,3,"I work in an agile shop and a lot of people like it, but there are things we all hate about it. Here are two big examples from a conversation last week:
incremental: Just because you say the word incremental doesn’t make the project smaller.
iteration: Sometimes people mean do a shitty job and you can fix it later.
The problem isn’t agile it’s people who act like agile is some kind of magic bullet. It’s not. The work is just as hard as without agile, it’s just organized differently."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Eric Larsen,Former Computer Engineering Silicon Valley (1980–2011),2019,2,"Toward the later stages of my 30+ year programming career, Agile was introduced at the company I worked at. It was a large Silicon Valley tech employer. I do not recall any engineer who disliked Agile. Not everybody was enthusiastic about it, but there were few objections.
There was management overhead, but it was not much better or worse than the previous processes.
The best part of it for me was that it seemed to limit the amount of pain we were subjected to. In the previous system, we would work for about 6–9 months, get behind schedule, the managers would panic, and we would be in for 2–3 months of crunch mode, cracking of the whip, the captain wants to go water skiing, whip the slaves, pull on the oars, nights and weekend work, etc. etc. etc. etc.
With Agile, there might be some pain and agonizing re-appraisal, but it was every two weeks. We get a new plan, try again. If we fail to get things done in two weeks, it becomes visible. It does not get hidden or covered up for months, then finally exposed, and we all get a blowtorch applied to our ass.
I thought it basically worked, I do not know of a better way to manage. There were problems, but it was due to lack of understanding of the team on how to effectively apply the methodology, not anything wrong with the methodology itself. There is no management technique that can compensate for large scale wrong technology choices, lack of programming competence, or mitigate the difficulties caused by dividing a project across time zones, or hiring people who speak different languages."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Rudrangshu Das,"Like to code, love to observe coders.",2016,3,"My 2 cents. 2 disclaimers to start with.
First I have worked in the IT services sector for my almost 10 year long career. Although I have developed enough products for my clients who were product development companies, but I always worked as their vendor. So my view is from that angle. Secondly I will comment on SCRUM as I know of Agile as SCRUM, I am not aware of any other models.
SCRUM in my experience is a model promised to project/product managers or Upper Mgmt in general that makes their team efficient and productive to the optimum level. Most upper mgmt believe in this advertising and go for it. So they often extrapolate this advertisement to mean that a product/project that has been estimated to take 6 months by the architect/developers, the techies can be done in 3 or 4 months if we follow Agile. Even if people don't say this openly I feel this is what they think in their heads
I don't need to explain how unsound that logic is. So often the seeds of discontent is sown early among the developers because they feel they are going to be overworked and the mgmt doesn't trust their judgement.
Now coming to the practical problems I have faced in working in a scrum model.
1) Onshore - offshore development model. I don't know what is the right way for doing sprint planning and daily standups in an onshore offshore model is. But I can comment what I have seen in several of my projects. There is 1 common planning meeting and 1 common daily standup for both onshore & offshore. It doesn't matter if the team is large or small, there is always some communication gap between onshore & offshore. The offshore invariably plays catching up to onshore in terms of requirement and design changes & the vice versa happens in terms of work progress status. So a daily standup call drags on to an hour or sometime more because instead of just work updates we are now discussing requirement changes which were not communicated to offshore before. Now the meeting was scheduled at a time that was conducive to both onshore & offshore. That means start of day for some and end of day for some. For the one whose day is going to start after an hour long meeting in which I spoke for maybe 5 mins, I am already put off. It will take me at least an hour, a cup of coffee, a bit of random internet browsing before I get mentally prepared for coding. For the one who ended the day with such a meeting, I am kind of in a foul mood because I feel I could have gone home early if not for this damn meeting. On the top of it if there were changes in the plan for tomorrow, I can't help but think about it on my drive home although I try my best to shutoff my mind from work at the end of the day.
2) No product/ project plan is perfect at the start. No software design is perfect at the start. There are always unforeseen changes sometimes forced by the business, sometimes forced by technical challenges and non functional requirements. I feel SCRUM makes it harder to accommodate changes. There is always an obligation to plan some work for everyone every sprint. Sometimes its not possible. Sometimes a task is too big to be broken down into chunks that can be done in 1 sprint. But a strict adherence to sprint plan sometimes leads to doing something while fully aware that the work is going to be discarded in a subsequent sprint due to a design change. This can be very annoying and I have faced this multiple times.
Having said that there definitely are some advantages to SCRUM. Productivity is one of them. Developers waste less time if they have to report a daily status. I am trying to think hard about other advantages right ñow... Sorry nothing.
I am a developer ao whatever I wrote is from a developer's standpoint. My view could be narrow and myopic."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Warren Wise,Works at GL Homes (2018–present),2016,6,"An agile approach to software development requires focus. Some developers have difficulty focusing, so they need distractions; otherwise, they’ll get bored. Even though there is information and studies that say multi-tasking slows you down, they need to multi-task, or they’ll be miserable.
Another thing agile development requires is that developers and stakeholders (customers, users, SMEs, managers) work together. Many organizations are structured like silos of mistrust. It’s painful to work with people who don’t trust you, who think you’re incompetent (just because they don’t understand your job or work) and who are disinterested in how their activities impact you.
To be good at agile software development (or at anything at all, really), you need to practice. You need to get better at designing systems, testing, and using your programming language and its libraries. You need to learn different programming languages, programming paradigms and design methods. You need to analyze your work and performance to find weak areas, then find resources (books, training, mentors, user groups) that can help you develop mastery. There are many programmers who are in it mostly for the money. They don’t really like programming enough to try and master it, only enough to not get a bad review from their manager during the performance appraisal process. Agile methods require continuously improving your team’s ability to deliver high-quality software. For someone who’s capable of software development, but who wouldn’t do it as a hobby, all the effort spent figuring out how to be better as a team can be a serious drag.
One last thing I’d like to mention is that it seems to me that a fair number of companies adopt an agile methodology under false pretenses, for the wrong reasons or with a lack of understanding of how agility works. I know a company whose IT department convinced the organization to adopt Scrum for the standard reasons, but one of the IT Architects told me the main reason was so that blame could be placed on the business when things went off the rails, since in Scrum, someone from the business (the Product Owner) is responsible for prioritizing work, and all stakeholders have an opportunity to attend a demo of the software before it’s realeased. If business leadership complained about the software that was released, IT could then simply say they delivered what was asked for and released what was accepted by the business, so it’s not their fault if users don’t like it or it’s not useful.
I find it difficult to imagine that any developer would be opposed to a way of developing software that: valued their knowledge, skill and judgement; gave them frequent feedback on the quality and impact of their work; made the resources they needed to deliver valuable software readily available; gave them time to consider multiple options, and to reflect upon and improve the quality and efficiency of their work. I think developers hate agile methods the most when the company or team in which they work doesn’t value the culture that makes this possible, yet they expect to see the fruits of such a culture. That inconsistency between organizational culture and organizational expectations creates one of the worst feelings in the world of work."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,John Wright,8y,2016,3,"Agile is a bit like nailing jelly to a wall.
When people complain about sprint pressures, velocity etc Agile devotees say “Well, that's not really Agile”
Agile gets a lot of kudos with more senior management because it either offers faster delivery or exposure of issues earlier. Done right it can deliver both.
Unfortunately, Agile still needs people and they often lie, bluster and prevaricate. This leads to inaccurate solutions that need rewriting and reworking. People will just throw in a library they found to get the job done quicker rather than question whether it's the right thing.
Agile is the best methodology if you have a perfect setup. Failing that you need a sensible mixture of Agile and Waterfall: plan, report, estimate, report, develop, report…"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Stephen Johnston,web dev for 20+ years.,2016,3,"In a nutshell: It’s not a project management paradigm, but everyone thinks it is.
The project extends beyond the sprints and team dynamics. Agile, in general terms, deals with the team dynamics to deliver units of result and to some degree units of work. The project is many units of result (vs work). I’m using some traditional terms differently than usual to make a point. A project, the agile thinking, encompasses many results (outputs) from a team. The team organizes in an agile manner to create those results with their work."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Tarasekhar Padhy,Engineer,2021,1,"Because there is a huge difference between “doing agile” and “being agile”.
doing agile: Developers are forced to do standing meetings and send each other detailed EOD status reports even though it could be a simple conversation or a message. Agile requires each of the team members to be on the came page and status reports are a great way to do that but if there is a better, easier and a hassle-free way to do it, then adopt that. Agile suggests whatever works, use it. If just a text message or something is enough to update everyone in the team, then these “orthodox practices” are not necessary. It just clutters the inboxes and calendars of the developing team.
being agile: Create a strategy, build a small part of the product, test that small part, get reviews, pivot or persevere. In a nutshell, that is what being agile means. Being reactive to external changes and adopting the course of development as necessary is the soul of agile which the management has successfully crushed. True agile is a state, not a process that you follow or set of predefined rules you abide by. The rules and process are developed along the way based on what works and what doesn’t.
principles>practices: most of the organizations have created a set of practices, steps, rules; that the developers need to follow to “do agile”. This entire belief system and theory is against agile’s core values and principles in the first place. The practices to “be agile” should evolve along they way and the way to be at the right place is to understand the core principles of agile truly.
only coding is agile: I believe this is the most prevalent one. If the marketing strategy, distribution strategy and management operations are conducted in a non-agile way, the effects will not be visible at all. In fact, just making one phase in the entire process of product development is detrimental to the overall process.
There are many more reasons for which developers despise the version of agile that they are forced to follow. We have a free eBook that suggests how agile can be applied to any workflow, true to it’s principles:
Understanding Agile for eLearning - Free eBook for download - zipBoard
A free eBook which will help you understand the challenges in the eLearning industry and how Agile could just save the day.
https://zipboard.co/understanding-agile-for-elearning-free-ebook-for-download/?utm_source=quora&utm_medium=social&utm_campaign=Outbound_quora
Do check the eBook out and let me know how it is. I also feel that if agile can be applied in the software industry and also in the eLearning industry, it can be applied in most of the industries. The answers dropped by fellow quorans are also quite informative as it helps me understand what is actually wrong.
The reality of the matter is, most of the development teams have adhered to “fake-agile” instead of real one. Besides, if you feel that agile is not working for you, drop it because that’s what the principles of agile also point at!"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Richard Leddy,Have been programming computers more than 35 years.,2016,2,"The picture that James Grenning has looks like a club of past managers I was assigned to. Being that I would rather spend most of my time with attractive young women, you can imagine that I did not get along with many of my past managers.
That said, the time that I had a fairly good experience with something like agile was a long time ago. I don’t think the term was invented yet as a name: ‘agile’. We had an issues burn down list that was a FileMaker Pro application that this kid did. The director of marketing and I could war over issues by reseting their priority. This process almost became emotional. But, it worked well to produce quality product.
But, what about the sprint stuff? Well BS BS BS. In fact the first thing I did was create a design for software that allowed a more well defined creation of unit. The software design was something that I threw at this little consulting group and they let me run for a few weeks making it. I made a byte code interpreter of a sort of task language that I made up. The program compiled and ran the language. The task language was made to work fairly well with the unit descriptions from a content team made up the marketing director and an education planner. So, I could translate the planner’s scripts into the language and compile with medial elements in place. The project manager, a seasoned instruction video developer tract my progress with the first unit made according to the method. He wrote it all done with pencil on a blank piece of paper, which he kept in a manila folder. He kept note of my time on pieces, and then told me about it later.
Then, we did sprints for a unit at a time. This involved making video, doing voice over, flying in people from around the country for talking head videos, placing the media, making the script, compiling and integrating into the final product.
As the units were integrated, the head of marketing and some media boys checked for issues and filled up the priority list. I tried to put plumbing ahead of cosmetics. The others seemed to like cosmetics more. Things came off the list as short time wins, set aside projects, fix media, fix the platform, etc. Short time one were like opportunistic wins. Others, got schedule by priority. Priorities would change when for team members in and out of the work space as well, for resolving issues they had prioritized and could communicate about.
So, the burn down was more a final phase process related quality and show stoppers. At that point there were fewer new units, and at the end no new units just weeks before release.
The process was fairly high pressure for the small group. But, good product came out.
The point is that SCRUM or agile was not applied for the whole project. Sprints were not applied for the whole project. These things were used when the had to do with the progress that fit with them for the part of the project that needed them. Bigger parts of the product were not scrum items. They were definite chunks or sub projects.
Another point is that innovation was needed to create an assembly process. And, the assembly process was subjected to the predictability of a sprint.
Another point is that the team cooperated and argued (at times with fervor) over points using a system for prioritization. And, that system was simple enough we could do it with a home brew DB.
I have been in shops that make the agile thing not be agile. And, the buy overblown expensive “agile” systems with all kinds of reporting features to set up a long list of poorly defined tasks. Some people on the teams associated with these crazy task lists take it seriously, especially the scrum masters. Others stand in the scrum circle and make bad jokes.
And, yes the scrum masters figure out how to use the big “agile” system to plan out political vendettas by making management think a guy is a slacker. “We’ll just split that task and move it to the next sprint. Whadya say?” BS BS BS. (Don’t give the scrum master a gun. )
So, basically, agile when used as it is in the formal way over long periods of time is probably BS. But, a crowd of “Hill Billies” can make their own business process and make it work, although the didn’t know the prescribed way. They only knew the way that worked.
One of these days I’m going to get a bunch of funding for a tick tack toe game. I’m going to write it using Hadoop. And, I’m going to buy Jira and hire a bunch of scrum masters dressed just like the guys in James Grenning’s pictures to work the Jira system and report to the investors about my progress. That would be just like working for a fortune 500 company. Anyone want to be on the project with me?"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Michael Walsh,Works at SAP Concur (product),2016,2,"A lot of developers dislike Agile because instead of being agile it can be used as a magic Process which will fix everything by adding more meetings, doing away with any sort of design concepts and allowing management to change direction 300 times a day so no one has any idea what they are doing.
Then everyone gets yelled at because they missed their ‘sprint goals’.
Agile done right can be wonderful because it improves communication between teams and prevents the ‘you designed it wrong’ 2 years after after starting the waterfall. Agile done wrong can be a great way to line the pockets of Agile Consultants and stress out the developers to the point of quitting.
YMMV."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Alysson Melo,Computer Engineer passionated about start-ups,2016,3,Using Agile you can makes fast anything. The key to improve your product is make the right thing after that you make faster. So in agile sometimes you dont have time to collect the feedback of your last sprint with your final user and other stackholders because you are already doing the next sprint. So you start doing the next Sprint without feedback and if you are on the wrong way you will spend a lot before to discover it specially if you have big cycles like 4 weeks Sprint. Your final target is improve your learning speed about your experiments and yor product. After that you improve the product delivery speed.
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Michael Burrows,12 plus years as a contract software developer.,2016,3,"Because corporate America is much like the military in that it wants everything codified. The idea behind this kind of thinking is making every input(employee) less important than the process. The traditional thinking is that depending on process gives more consistent results. The results might not be as good as relying on talent but that reliance can come at the expense of consistency. While that kind of thinking is reasonable from the business perspective it can conflict with some programmers mentality. Many if not most programmers started programming because they are oriented towards creating things not completing checklists. The idea of working an assembly line gives many programmers night terrors. “Agile” for many programmers can feel like working an assembly line.
Numerous people smarter than myself sing the praises and sins of various methodologies so I won’t argue for either. I’ll just say that I don’t see “agile” disappearing from the landscape anytime soon so programmers will have to make the best of it."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Dmitrii Medvedev,Software Engineer (C++),2016,2,"In short?
Agile == feature creep. Feature creep is bad."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jugdesh Mirwani,Systems Engineer,2016,2,"I don’t like Agile because use of the method is not intuitive with success. It all relies on having a strong person acting in stakeholder role that is proactive in communicating and participation in every aspect of the process. This person must be be able to be held equally or more accountable for end deliverable as compared to development team.
We have all worked with business focals that have been assigned this task that will do this passively and just lay the blame on the development team when the end product is not what is expected. I have had success in such engagements because I can either anticipate or translate the stakeholder requirements in to a workable product based on industry standards.
Leadership can come from anyone working on project from Developer to Lead Developer. Basically you need someone that has worked in environment with a lot of governance process that knows what elements of governance is required while keeping track of that in his or her head rather then with formalized work product.
If nobody is doing this then all you are doing is development by the seat of your pants on the fly and dumping the cost of lost quality of the rest of the support lifecycle of the product.
I would not say never use Agile in favor of alternative. The answer is never to Agile in when inappropriate. I would avoid for commercially distributed software. It is the worst when development team is in vendor relationship. Most SOW/DOU in Agile Arrangement are dollar paid for any hour worked. They have no incentive to produce a quality product on the first pass so they can bill you over and over for rework."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Steven J Owens,Lazy Coder since way back,2016,2,"A great number of reasons, most of which have nothing to do with agile development.
A lot of people talk about agile development, but don’t actually do it.
A lot of people misuse the term agile development (the same sort of people who use “refactoring” to describe any rewriting of code).
A lot of people simply do agile development half-assed (see “We Tried Baseball and It Didn’t Work” by Ron Jeffries, We Tried Baseball and It Didn't Work).
Agile development is demanding; the XP folk, for example like to refer to XP as “low process, high discipline”, the point being that you can get away with a lot less process (and thus a great deal more adaptability) if you hold yourself to a high standard of discipline at several levels. On the low/day to day/hour to hour level there’s using test driven development consistently, using refactoring properly, etc. On the higher, more strategic level there’s staying committed to your iterations and to concepts like velocity and the planning game or whatever else you use. There is a constant temptation to skip steps or cut corners.
Some aspects of agile strike people as weird - pair programming for example, can be incredibly effective, but it freaks people out.
Some aspects of agile are hard - to use the same example, pair programming is a skill, it takes a not-insignificant investment of time and energy to learn to do it well.
Many aspects of agile are useful and effective, but any given aspect or approach to agile doesn’t necessarily fit every project - agile proponents were the first to say that “one size definitely does not fit all”."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Alfredo Alvarez,QBasic -> C++ -> JAVA ->C# -> Python ->C# With html and javascript sprinkled,2020,1,"The big problem that I see is that a core requirement for agile to work is great communication skills and negotiations.
These are only really available on highly experienced teams in which the members have been coached on both technical and soft skills.
When you add product creation support staff (product/QA/QE) they need to be really familiar with realistic expectations in order for this conversations to happen and be done within a short time. In 90% of the cases that is not the composition of the team.
So we are using a process meant for highly skilled and experienced team on neophites with some guidance. This creates a lot of friction and without communication that friction just turns into plain stress.
In my whole career I only think of the teams I’ve been has been fully functional inside agile and we weren’t really using scrum more of an XP team."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Sergey Ch,Studied Computer Science,2020,2,"A lot of developers dislike not the Agile but the Corporate Agile. These are two different beasts to my mind. Agile was created as a practice far better suitable to modern software development than Waterfall methodology. When requirements change many times during the development cycle you cant afford Waterfall anymore. Agile was created by developers as an aid to them.
the core idea of Agile is that everything is agile, also the Agile itself is agile and not strictly defined. You adjust the methodology according to the development stage of your product.
But when Agile is adopted by a large corporation it becomes stiff and embodied in paper business flow, like “you must standup”,”you must assess everything as a user story” etc. So Agile becomes mandatory, every step of it. I have known a corporation that went as far as requiring memorising the agile manifesto by heart and reciting it!
Agile as ideology and methodology was not conceived to be mandatory. All its steps are guidelines rather than something poured in concrete and steel once and forever. But this is exactly what it becomes in a large corporation. I have seen standups of more than 30 random people hailed in by the management because “Agile commandeth thou to stand up” and not because those people were somehow relevant to a standup.
Corporation is about procedures. And they must be mandatory because it does not work otherwise. But Agile requires that developers have a say in adjusting the application of the methodology itself depending on their project. the procedures of agile must be themselves agile and not biblical commandments to be followed blindly.
So lots of developers point out the discrepancy or sometimes outright foolishness of “bureaucratic agile” in large corporations but not the methodology itself."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Claude Wilbur,Programming computers for pay since 1978,2019,1,"A lot of good answers here. I particularly like the answers from Mr Grenning and Mr Green.
I will add a comment and an alternative. The comment is whatever methodology you use, it will not improve anything unless changes are made in company culture. This included everyone from top to bottom being willing to work in an unfamiliar way. Usually this means ceding some aspect of control and responsibility to someone else. Most humans are not OK this, developers included. If you read Winston Royce’s book, it seems reasonable enough. Yet Waterfall became a series of milestones that had to be met on schedule, with no back tracking to fix things that weren't quite right. If you look at books on the different methodologies which became Agile —XP, Scrum, DSDM, Crystal--they don't really advocate “iterations” which are fixed deadlines with no thought for the feedback and rework needed to do a quality job. Even if there were a proven silver bullet (look at some of work of Harlan Mills) it wouldn’t be widely adopted without being distorted to fit the comfort of “them” and “us”.
The alternative is something that was used in a company back in the late 80s. The idea was write the manuals first: tech manual and user manual. Each draft was submitted to all stake holders. Questions would be asked and the manual would have to be updated to reflect the answers. This would continue until all parties agreed that we had everything correctly described. Only then could commitments be made. During the process, developers could start doing any development task they wanted, but no delivery commitments were made until all participants were happy with manuals. Same for management, marketing, everyone. Everyone knew that whatever they did was tenuous and could be totally upended by the next edition of manual.
It worked surprisingly well. Not all was goodness and light, there was head-butting, wounded egos, and back-to-square-one. Nevertheless we always felt that each revision was forward progress, and the current state of the project was widely visible. Testing of the project consisted of evil people trying to show that the product was not as described in the manual.
We had two advantages the helped us regardless of methodology. One is that it was a small business (150 employees over two timezones). The other was that nobody copped out on their responsibility to answer outstanding questions. No “that situation will never arise”, or “surely no user would due that”.
I've no idea if this could be scaled up to the latest project at MegaCorp. To this day I feel pretty good about the final product. This is in spite of my present realization of the degree to which we were all naive, inexperienced, and ignorant."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Ilya Bibik,Author of the book - How to kill the Scrum Monster,2019,1,"They don't dislike Agile, they dislike what is presented to them as Agile. Agile often is not implemented correctly. Scrum Masters often don't have experience and clear understanding what they are doing. As result teams try to execute rituals that do not have a clear purpose in they context."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,John Penney,Owner at PPP Milton (2001–present),2019,1,"We don’t. We just hate the Name, the meetings (which no one ever does correctly, so they’re not agile), the scrum master (who have 2 hour “scrum” meetings once a month) and the sprints (which take 5 months and never have any of the features of a sprint).
agile is the way I’ve always developed software. agile is the way EVERYONE develops software. it’s like science, which is different from Science. People who hate Science just don’t understand that it’s different from science.
Everyone loves agile, they just don’t know it yet."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anupama Kasturi,Product Management Head at Jile,2018,1,"Developers dislike ‘Agile’ methodologies only when they are not practiced the way they are supposed to be.
In Agile; people doing the work make the estimates and commit to work. However this does not happen; managers make commitments and then thrust the same on the teams to commit to their timelines.
If Agile is practised the way it has to be then developers will love it because; because teams are at the centre; Focus for People :-
They directly understand the need, vision and goals and would hence contribute towards the right solution
They make estimates and commitment based on their capacity; they are empowered for the same
They are motivated as they focus towards outcome rather then output"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Thangaraja,"Lives in Chennai, Tamil Nadu, India",2018,1,"I will use scrum instead of agile as scrum is the subset of agile and it’s easy to understand
A proper scrum team consists of developer,product owner and scrum master. As per scrum, the developer denotes the person who is involved in building the product. So it includes software developer, tester. Product owner is the own who is reposnsible of maintaining backlog items, priotize stories. Scrum master is the one who helps the team for better interaction, resolve conflicts.
So why lot of developers dislike Agile?
Lack of communication. As per agile manifesto, business people and developers must work together in all the phases. Business people puts all their effort without consulting with developers prepare the requirements and send to developer. The developer rejects or asks for extra time to build it due to technical difficulties. Business people do not accept it as they have spent lots of time and effort. So this will be escalated to next level. Most of the time business people win because the company always put business first as they bring money.
Most of the business people either do not or don’t want to understand technology. So most of the time they underestimate the effort required for building something and it directly hits the developers. This is again due to lack of communication.
Misusing the principle and change requirements frequently . Agile is meant for welcoming change requirements. This is one of the wildly misunderstood principle and business people take it as granted. Business team comes with the feature, developer builds it in sprint-3 and then in sprint-7, the business team realize that this could have been done in another way. So the completed feature will be removed and build again in sprint-8. Same will continue multiple times.
Project managers: There is no concept of having project managers for agile. But sadly most of the companies still have. Due to inclusion of managers they except status for everything. Most of the time this will lead to frustrations. This point is applicable for all not just for developers.
Not giving importance to user stories related to technical improvements: Business people expects a feature to be released in every sprint. This will not always happen. Every software product needs technical advancement. Business team don’t understand this.
Not giving importance to testing/documentations: Testing and documentation are equally as important as development and these must be done along with development parallely. This will save lots of time during maintanence phase. But developers don’t get enough time to do this and when problem occurs they will be questioned for not doing it.
Its definitely not the agile which developer dislike but it’s the way the agile is misused."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Mingzhu He,User Researcher at Quora (company) (2018–present),2018,2,"In theory, Agile is Iterative Improvement as applied to software development. It is meant to shorten the ideation to product life cycle to reduce risks and to increase a product’s adaptability to balance changes in business, user, and/or technical requirements.
In practice, Agile is a set of rituals designed by a team for a team within their context to collaborate efficiently to reach effective continuous improvement of a software product.
In my limited experience, the varied ways in which practical implementation and theoretical ideals diverge are what cause headaches on Agile teams. Some examples include:
Rituals being too rigid or too undisciplined
Communication breakdowns
Unbalance-able constraints (business, technical, and/or user)
Lack of true Iterative Improvement mindset
Number 4 being the root of the issue.
So while Agile is the keyword that encompasses both the Theory and Practice of Iterative Improvement and each team can interpret it differently in context and will all meet challenges along the way, the ones with a growth mindset open for collaboration and Iterative Improvement of both the product and process are the most sustainable ones in the long run.
P.S.Iterative Improvement is not unique to software, it has been and is becoming a universally embraced concept in manufacture (Toyota), hardware, management, design (Design Thinking) and even education (Improvement Science) as it follows the natural progression of change and innovation."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Eljay Love-Jensen,nerd,2017,1,"These are two good questions, and the answers have been high quality awesome!
> In a nutshell, why do a lot of developers dislike Agile?
Because Agile™ is unrelated to agile as per the Manifesto for Agile Software Development.
> What are better project management paradigms alternatives?
Umm, agile isn’t a project management paradigm. I’m going to use Scrum as that’s the only agile-based methodology I have any familiarity with.
Scrum, as originally conceived, is both a project management paradigm and software engineering best practices. Somewhere along the way, the software engineering best practices got lost from Scrum.
Scrum used to have a very low barrier to entry. It used to be super-easy to do. Kelly Waters describes how to adapt to Scrum in his “How To Implement Scrum in 10 Easy Steps”. <How To Implement Scrum in 10 Easy Steps> But since then (that was 2007), it seems that Scrum has morphed into a bizarro anti-agile version of its former self.
I’m not sure why it has evolved that way, but I’m pretty sure that contributes to developers disliking Agile™. (On this forum itself, some lucky developers have had great experiences with Scrum. So it doesn’t have to be bad.)
I think the thing to keep in mind is that agile is a set of four value and twelve principles. To me, that makes agile a cultural thing, not a project management paradigm thing.
If the individual developer, the team, even the company has not embraced and internalized those values & principles… well, in the words of Mr. Mackey “You’re going to have a bad day.”
That’s when bizarro-based Scrum has flipped/twisted all four values and twelve principles of the Manifesto for Agile Software Development.
Exercise for the reader: rate each agile value & principle on a scale from “meh” (1 star) to “yay!” (5 stars) for how your team is doing. Those concerns should be front and center for your sprint retrospective.
And if the team, or management, or the company is antithetical to those values & principles, it will undermine the methodology due to corporate antibodies. Even if the methodology is, ostensibly, agile-based.
My 2¢. YMMV."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Debbie Madden,www.stride.build Agile Software Development Consultancy,2017,3,"I’ve been running Agile consulting shops in NYC for 14 years. I’ve personally talked with thousands of developers across hundreds of companies about this exact topic. Here’s my take:
Developers value empowerment and autonomy. When a stakeholder uses Agile as a framework to remove empowerment and autonomy from the developers, developers get angry. This leads to the perception that developers don’t like Agile. But, what they actually dislike is the lack of autonomy. In fact, when implemented correctly, Agile is the most empowering framework out there.
Agile is too often set up to fail. Let’s say you have a project that’s at risk of going over budget. Someone has the idea to use Agile to solve this problem. And then chaos ensues. Agile isn’t a magic bullet that’s going to take a failing project and right the ship overnight. It’s a set of practices that, when used correctly over time, lead to high functioning teams that deliver on a predictable cadence with predictable quality. It’s not a life raft.
It’s not a replacement for communication across teams. As companies scale, the biggest roadblock to growth is communication. People try to lean on Agile at scale to solve things, but at the end of the day, the humans on the teams are responsible for effective team communication.
So, I’ll push back on this question and say that in my opinion, it’s rare to find a developer that truly dislikes the core of Agile. But rather, it’s the extra external stuff that often tags along under the “Agile will fix things” umbrella that developers dislike."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Dipankar Das,Software Engineer (2016–present),2017,1,"Programming is largely a creative job. Unless it is for fixing simple bugs or extending or repeating existing features or assembling libraries to produce a solution, programming could be as creative as writing a poetry or painting a canvas.
Early stage development has been always agile. Even when people went crazy about waterfall and other methodologies, programmers would have been developing in agile mode. While management and designers did the talking, programmers kept building and rebuilding the POC over and over.
Adoption of “Agile process” as others have mentioned is rooted in mistrust. While some folks are excited to embrace anything that is trending, short sighted management is looking to reap benefits from, “daily roll call”, “micro management” and “release weekends”. People who cheer “anything that is trending” would keep telling others that they are not doing agile the right way. It is like the denial of the religious extremists, not following the holy book the right way.
Software development is still the most widely practiced creative and financially rewarding profession. Unlike construction of a house or bridge you do not need a solid design or framework to start software development. The core architecture of a software can be redesigned and rebuilt with little overhead and with very little casualty.
The literal “Agile Process” every creative developer would love to practice. The corporate branded “Agile Process” is another word for “Micro Management”."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Atif Shahab Qureshi,Worked at Tradekey,2018,2,"Although there are many advantages of agile software development but there are few disadvantages too. Following are the few disadvantages of agile software development:
1. Less predictability.
For some software deliverables, developers cannot quantify the full extent of required efforts. This is especially true in the beginning of the development life cycle on larger products. Teams new to the agile methodology fear these unknowns. This fear drives frustration, poor practices, and often poor decisions. The more regimented, waterfall process makes it easy to quantify the effort, time, and cost of delivering the final product.
2. More time and commitment.
Testers, customers, and developers must constantly interact with each other. This involves numerous face-to-face conversations, as they are the best form of communication. All involved in the project must have close cooperation. Daily users need to be available for prompt testing and sign off on each phase so developers can mark it off as complete before moving on to the next feature. This might ensure the product meets user expectations, but is onerous and time-consuming. This demands more time and energy of everyone involved.
3. Greater demands on developers and clients.
These principles require close collaboration and extensive user involvement. Though it is an engaging and rewarding system, it demands a big commitment for the entirety of the project to ensure success. Clients must go through training to aid in product development. Any lack of client participation will impact software quality and success. It also reflects poorly on the development company.
4. Lack of necessary documentation.
Because requirements for software are clarified just in time for development, documentation is less detailed. This means that when new members join the team, they do not know the details about certain features or how they need to perform. This creates misunderstandings and difficulties.
5. Project easily falls off track.
This method requires very little planning to get started, and assumes the consumer's needs are ever changing. With so little to go on, you can see how this could limit the agile model. Then, if a consumer's feedback or communications are not clear, a developer might focus on the wrong areas of development. It also has the potential for scope creep, and an ever-changing product becomes an ever-lasting one.
Source: The Massive Downside of Agile Software Development
Do you agree with my points Harold Treen"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anoop Aryal,"Jack of all, master of one",2016,1,"I’ve seen Agile projects crash and burn pretty horribly. The leaders involved were from companies that are at the forefront of Agile (let’s leave names out..).
The root cause were two things:
Agile inevitably searches for and finds local minima/maxima. If you think of it as an optimization process, it’s uncannily like a gradient descent algorithm. With the pitfall that it’ll find a local minima/maxima. The case I have in mind was failing in a horrible way. But the team was stuck iterating on incremental improvements - thereby getting stuck in a local minima.
Velocity. WTF is that? It’s far worse than LOC. Upper echelon MBA types stuck to it like glue. It was a quantifiable figure they could stick into excel. They didn’t know what it meant. But it was a number!! Meanwhile, senior devs assigned higher points to stories they get assigned to. Politics galore."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jerry Zornes,Software developer mostly middle tier objects,2016,1,"Agile invariably devolves into measuring velocity by management. I've never met an agile apologist who when faced with someone's agile failure didn't brush it aside as ‘that's not real agile’. Even this thread is full of this type of response. If they are right evidence suggests a methodology with a high propensity for failure. If they are wrong and developers complaints are valid then the negatives represent such a load that agile being a net improvement become questionable.
That's not too say we should throw out the baby with the bath water. Short cycles and smaller units of work certainly benefit developers and management."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Pepijn van de Vorst,Studied Software Engineering and > 20 years experience in diverse roles,2016,3,"I'm not aware that ""a lot"" of developers dislike agile.
The developers I've spoken with about this subject mention:
* Often in organisation that have implemented agile, there are lot of meetings
They have the idea that they would be far more productive without those meetings
* Some developers don't like a shared (team) responsibility for quality
They like the divide between developers creating code and testers testing it
* Some developers don't like the extra tasks they are expected to do from
an agile / DevOps perspective and would rather be programming all day
But most developers I know love agile because of the freedom and responsibility of the team to determine the way to create the solution and to facilitate themselves with effective tooling and processes."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anonymous,8y,2016,1,"I am a Software Product Manager myself, and I was a developer earlier… I will answer this question in a much abstract way than the others did… they provided fine grained answers which I agree also.
The biggest problem I have observed so far is the lack of the “agile development methodology” KNOWLEDGE by the management/business people themselves, and trying to apply it after watching a 10 minutes SCRUM or KANBAN video on youtube.
the sad part is they mix between (iterative/reactive/experimental) business idea/goal generation and development.
In reality the End Goal / Product Vision should be clear for the developers (not the details towards the goal)… but specifically with the rise of the startup era, and glorification of the MVP approach lot of people are trying to apply it in every single project regardless of the various parameters of individual projects.
change of the business vision or the end goal is normal (and in most cases if it doesn’t occur means you are not monitoring the use of your product enough or at all).
BUT at each point in time, devs should know where are they heading to.
A whole industry and 10s of institutions are working on employee motivation and gamification blablabla…. and companies are purchasing systems, hiring feel good managers, creating awesome offices with lots of entertainment… YET FORGETTING THE MOST IMPORTANT intrinsic MOTIVATIONAL DRIVE (THE GOAL).
sorry if I mistyped or have some mistake, just wanted to reply quickly before a Daily Scrum..
Cheers"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Sam Northrop,Human at Earth (planet),2016,2,"The main benefit to Agile is the ability to get a service that meets 80% of the markets needs out the door much faster than would be possible in a traditional waterfall approach. With today’s pace of change, the detailed requirements you put together with traditional waterfall development will be obsolete before the product is out the door. With an agile approach, requirements are more easily modified or replaced to reflect changing market demands. A perfectly developed product whose market has moved is a lot less valuable than one that needs a few additional features in a subsequent release but is otherwise market-ready.
Used as a crutch, agile is a way for business partners to avoid putting real thought into requirements. Garbage In-Garbage Out still applies. If your business partners don’t know what they want/need, or if they don’t invest the time and effort to properly document them, then agile is just a cop-out. The best sailors can’t complete the trip if the captain hasn’t taken the time to figure out where they need to be going.
I have worked on some really good agile projects and some that really sucked. The primary difference in the two is in the business side’s commitment and compliance to the process. A successful agile project requires more time and dedication from the business partners than waterfall. With waterfall, business can concentrate their efforts up front and hopefully, during user acceptance testing. With agile, they need to be active and present for the duration. Not all are able/willing to provide that.
And, to be clear, I am on the business side."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Keith Ensign,"Lives in Wellington, New Zealand",2017,2,"Agile or Scrum cannot fix a bad management culture of CYA, lack of transparency and fear of failure.
Scrum estimates are based on complexity. If the user story is discovered to be more complex during the sprint, tasks or stories are broken off to handle the discovered complexity and the original story carries over to the next sprint.
Burn down does not have to be 100% complete at the end of each sprint. It is an ultimate goal that is strived for as a team manages complexity more efficiently and breaks down features into realistic user stories. Velocity should be consistent, but many outside factors can influence that too.
Minimal Viable Product. This is always the goal.
Accountability and communication ≠ micromanagement. Facts are facts and they cannot be denied. Discovering unaccounted complexity and addressing it is not failure or any form of poor reflection on anyone’s skills. Deal with the complexity and learn from the experience. This will most likely only improve complexity estimates on any task as the team moves forward.
Standups are to be 10–15 minutes. What did you do yesterday, are you blocked, do you need help and if not, what story/task/bug are you going to work on today. This should literally take 1 minute. If you have more complex issues to discuss with other people, do it after the scrum and with only the people that need to be involved.
The most important lessons I have learned over the last 20 years:
If your culture sucks, everything will suck.
Emotional Intelligence is more important than IQ. Maturity is the most important aspect of anyone’s personality and behaviors.
Facts always trump opinion.
Constantly strive to improve your technical knowledge and skills. Learning never stops.
Not only are you accountable to your team, your management, and your company, you are most importantly accountable to yourself.
If you cannot handle being a professional because of meetings, accountability and transparency, you have much larger problems on your hands. Remember, fact trumps opinion and honest communication is always best. If your time is being compromised by meetings and other requests, your project manager NEEDS to know. If you cannot do any actual development work, communicate it. They are as responsible for getting things done as you are.
So again, if your org and its culture are broken, scrum is not going to fix it and in fact it will only surface the dysfunction. If in fact you are truly unhappy where your work, find a better job with better people. You’re in control of your quality of life and you deserve to be happy. Don’t suffer in Sucksville."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Arun J,Studied Software Engineering,2016,1,"It shows the bottlenecks in some teams. Who is not contributing, idling etc etc. Most contributing and teamplayer developers dont mind agile as far as I have seen."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Andrew,I have been programming since the early 80's. I have forgot tons of languages.,2016,0,"I wasn’t aware that a lot of developers disliked Agile. I do think most engineers think it is annoying when SDLC is done poorly. I am not sure engineers would be so silly to think any one methodology is particularly responsible for a bad SDLC implementation.
All engineers know that some kind of SDLC methodology must exist. Which one is used is not really important. All of them to some varying degrees have vices and virtues.
I personally think Agile stresses feedback loops with customers which is a nice. It is a little lightweight on holistic thinking. I am responsible for holistic thinking and I do not need a process to do that for me so that does not bother me.
All SDLC methodologies have cultural rituals associated with them that can be silly when taken to an extreme. Agile is no different.
What I do think has really changed since the 80’s is how many companies ...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Andrew
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Josh Donnelly,"Originally Answered: In a nutshell, why do a lot of developers dislike Agile?",2016,1,"I imagine the same reason why people dislike other management styles…because of the people doing it. Most management structures can have some success if the humans behind them are effective leaders. I don’t have much experience with the process, but have a lot of experience with poor leadership and my guess is that some grasp too strongly to the idea of Agile as being “fast” or “quick” like the standard word is defined, rather than the project being segmented into smaller (quicker) tasks which provide more flexibility to the project."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Mazen Hassan,Author has 190 answers and 880K answer views,2016,0,"AGILE…I truly hate that word because of how much misuse is associated with it.
As a person who spent 20+ years in high-tech, I find no clear value of how agile methodology is used in most companies today."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Dennis Decoene,Python and php developer since wayback,2016,0,"Funny thing, I was a minute ago watching Agile is Dead • Pragmatic Dave Thomas in which he explains why he feels Agile has been misinterpreted. Very much worth watching!"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Johnathan J Hayter,Sr. Full-Stack Engineer at CoStar Group (company) (2017–present),2016,1,"I don’t dislike/hate agile; I do hate/dislike how it is implemented or worse interpreted by a company by tech leads and management.
Agile promotes a highly cohesive collaborative atmosphere which often gets abused ad nauseum to come up to me to ask me questions or request features that would de-rail sprints. Often nicknamed hotfixes, production issues or Executive Priorities these leaks immediate begin draining the defined plan which is not re-evaluated because people are already very ingrained to not do so.
This also segregates a section for programmers that are just plainly not good at articulation yet they are forced to strengthen a weakness that yields practically nothing at behest of the manifesto.
This is where I feel the tech lead is anemic. It is absolutely great to have a ubiquitous language with the business. It is also stellar to be able to draw up summaries with your team but as far as I am concerned it should stop there. Having 4 programmers per tech lead and having the tech leads summarize up to the principal developer which inter turn rolls up to the software director streamlines the entire process with natural aggregations. I have seen this very seldomly in my career and I have personally used it with great success ie being 6 months ahead of a deadline."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anonymous,8y,2016,1,"From what I’ve seen of it, I have found myself disliking the mismatch between the Agile cycle and the let’s call it the Off-Agile cycle.
By way of example, suppose you’re meant to put 60% of your time into Agile cycle work, and the remaining 40% of your time into the rest of your work that doesn’t fit into the Agile projects (ie: 40% Off-Agile projects). Credit where credit is due: this would probably work out really tremendously well if the managers who task out your time naturally have that same 60%-40% split. But you know that “Give a Moose a Muffin” book from way back in the day? I’ve been noticing that managers tend to be quite similar to the moose. Again, credit where credit is due, they haven’t gone and done anything terribly stupid like put 100% of my time into Agile projects, and then a second 100% of my time into Off-Agile projects. It’s been more like 80% Agile, with a supplementary 70% Off-Agile. Not being a mathematician, I can’t really say for sure if that all adds up, but I have been looking at it for a couple of months, and it almost seems like it adds up to more than 100% of my time. Combined with the related details that Agile tends to be used for software development, and that software developers tend to be bossed around about as much as everyone else (ie: quite a lot), that really tends to add up to either a high workload, or high stress, or both.
From where I’m standing, Agile seems to have its major application in “giving management an excuse to think that they’re being more efficient, while really just increasing the demands.” Some day, when they manage to genetically engineer an actually reasonable manager, then I could imagine how Agile would be more efficient. Until then, I’m out of ideas. I’m not a fan of Agile, because it seems to make things worse; but I’m also not a fan of any system that isn’t Agile, because they all seem to make things worse. Almost seems like it’s just the managers who are getting worse, but who can say for certain?"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Naveen Kumar Singh,Confused agile coach but excellent software developer.,2016,0,"I haven’t witnessed it personally so difficult to say why developers hate agile. I think majority of developers like it.
Below are some situations when developers may hate agile.
When management use agile for micromanagement
When management wish developers embrace agility but management not ready to be agile
When developers have fear of getting exposed
When commitment means meeting deadlines"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Clifford Oravec,Author has 97 answers and 171.4K answer views,2016,83,"Wow, this is quite the active question (big surprise, right?)
Like most in the industry, I’ve had my own observations and opinions on the polarity of this subject.
Recently, The Harvard Business Review published an article entitled “Embracing Agile” that advocates the adoption of Agile processes (specifically Scrum) in business as a whole.
Having seen Agile and Scrum both succeed and fail at different organizations throughout my career, I decided to write a response piece detailing the opinions of leading Agile experts and regular Agile practitioners in order to educate readers of the HBR article about the potential pitfalls of implementing Agile/Scrum and how it might not be appropriate for all organizations.
You can find my (fairly thorough) article here: Before “Embracing Agile”, have a chat with its exes.
If you’re interested in the original HBR article, I link out to it from my article as well.
Hopefully this adds some value to the overall conversation.
Best of luck."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Robert Evans,"Lifelong interest in philosophy of science, esp evolution",2017,1,"I don't believe that developers dislike Agile more than, say, waterfall. But what I really don't understand is why management likes it. It give less predictability for work more than a couple of months out. ""When are you going to deliver feature X?"" I have no idea. We haven't analyzed the requirements or the technology. It might take 10 man months, or a 100. (Cf McConnell's classic ""Software Estimation""). What it does do is tell you how you are progressing. But to calculate velocity you need to make careful records of how much engineering time is consumed per story point (or whatever), and that's not always easy to do."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Devaroop Bhattacharya,Practicing it for years,2017,0,"tl;dr
“Because people don’t follow it the way it should be followed”
Agile is a method of management and not micro management. Almost every 2nd company abuses it. I have been a Agile Practitioner at Equal Experts for years now and never disliked it because we do it right. With regards to delivery - We do it the best way possible along with keeping up with latest technologies in the market.
For the developers who dislike it - Speak up if things are incorrect, after all, that’s what Agile is."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Will Stern,"Founder LearnCode.academy, Software Architect at HigherEducation.",2017,2,"For what it’s worth, I’ve yet to be on a team where Agile didn’t make things drastically more enjoyable for developers.
The only times I haven’t enjoyed agile is when the company was extremely “enterprisey” and everything was so serious that development wasn’t fun. (I mean, c’mon, we get to play on computers all day…this is fun by default! If it’s not fun, it’s cause somebody messed it up!)
If someone complains that agile is making things less enjoyable, I tend to think that it’s actually management making things less enjoyable and I’d HATE to see how miserable that management would make a waterfall paradigm feel. I picture using a power drill instead of a screwdriver, but management standing over your shoulder making sure your drill angle is perfect, watching your thumb placement and making sure your RPM’s don’t go over x or under y.
Agile, in itself, is designed to make developer life more enjoyable, while creating a quality product with less bugs."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jeff Cactii,Software Developer (1980–present),2017,0,"For someone like me with 30+ years experience as a Software Developer, Agile is just another bunch of “new age crap” to refer to the same old way of programming since the 80’s. It’s nothing new really, just a method of Managers empowering themselves with new buzz words to justify their jobs. A lot of us have been doing Agile since the 80’s.
For public service/large companies that have a plethora ...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Jeff Cactii
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Glynn Farrow,Former Software Architect at IBM Singapore (company) (2001–2012),2017,0,"Because in large corporations management have hijacked Agile - which was a developer inspired idea originally - and perverted it to produce management statistics to, among other things, push developers into longer hours and tighter schedules."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Radek Baranowski,Developer (2013–present),2017,83,"I can confirm Agile works out well for either developers and the rest only when the whole organization embraces Agile as a way to go. And not only product development team (devs, qa, ba, POs, PMOs) but also, and primarily, the client. You can manifest being agile, but when your business client (internal or external) denies to follow this path, at least to some/large degree, you’re doomed.
In a project which I’m in at the moment, this change of paradigm was fully adopted and accepted from Board Of Directors level, downwards to scrum teams, all along. It has succesfully delivered one of the biggest insurance systems in Europe over the course of 5 years. So Agile can work, even on a big scale, if only _everyone_ accepts the rules of the game.
Now, to why developers might get frustrated. It might happen, and happens, at the point when the agility of organization gives so much confidence in themselves, that they accept any, or most of the changes. As an dev/engineer you need some time to reckon around the piece of system you are expected to modify. If the change of subject happens too often, well, you just find yourself struggling while unveiling complexity of the solution in this very given code package. This might be reduced by following consistent design patterns and clean coding, to some extent, but there will never be a system perfect at this account, and I imagine this might be one of the hate-factors for developers."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jeff Williams,Indepent Leadership and Operations Consultant at Williams Consulting (2009–present),2017,83,"It will all come down to how the efforts are managed and communicated. Dissatisfaction are products of perception and expectation. Often these are unrealistic and need to be foreseen and then managed properly.
The basic tools of Agile methodology are simply that, tools. How those tools are utilized and how flexible you are with meeting true needs is key.
I approach all projects from a hybrid mindset. I'll employ whatever it takes to make things happen.
If the GOAL is to produce something functional and valuable under the constraints of the business then use whatever tool you need to gain satisfaction."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jacky Jackson,Software Engineer,2017,83,"I have been working in an agile environment for two years now. Agile says something like they dislike documents that are never read ….. if I had a quarter for every time I wanted to shout: ‘'Write in down!!!’' I would be a millionaire by now. And it says it prefers inter human interaction above something else.. Cannot remember what even. I would give half of my kingdom for a few hours of silence to work in. I sincerely loath it. But when you dare to criticize it, it is you who are the bad programmer, or have not understood it. Like you are an apostate of a certain religion. I hate it so much, you cannot imagine."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Leonid Shepetovsky,SW Technical Manager and Cloud Architect at Cisco (company) (2018–present),2018,83,"This is a great question! It is actually much greater than someone can think. And so many different and correct answers I see here. I have concerned by this question for many years and may say that the answer can’t be short enough to write it here.
So for anyone who interested in that, I may recommend some links to youtube lectures which were made by people who are directly related to this methodology of Agile SW Development. I found them very exciting, diving deep to the point and really fun to listen. Personally, I agree with every word said there. Enjoy:
GOTO 2015 • Agile is Dead • Pragmatic Dave Thomas
The death of Agile - Allen Holub
#NoEstimates (Allen Holub)"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Robert Garrett,"40+ years, from applications to operating systems.",2018,2,"It’s not that I dislike Agile. In fact I am a big fan of and love the concepts and principles behind Agile: Make small, incremental, contextual changes really quickly that can be both implemented quickly and simply and also likewise backed out. That is everything about the real idea of Agile. There’s nothing more to it than that. It really is that simple. What I positively HATE is the way that companies have gone about implementing the monstrosity that they claim is “Agile” when in reality it is anything but. They’ve gone head over heels with all the trappings and terminology accompanied by endless worthless bureacracy. Daily tag up meetings, scrum, kan ban, epics, stories, projects, issues, swim lanes, run rates, and so on and so on and so on. Morons who have no talent at all for anything ex...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Robert Garrett
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Corey Grusden,Upvote,2019,1,"A lot of developers dislike this and other processes because they simply don’t understand whats happening above them. If developers had an idea for a side-project and had to use their own money to hire a developer the world would be a better place. Developers would know exactly why these tools are in place: because *most* developers go down rabbit-holes and end up spending time on the wrong things. I can prove it, I was one of them until I built a consulting agency and had to manage developers."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Keith Kosmicki,Owner / Computer Consultant at Kosmic eKonsulting (2009–present),2019,0,"Fuck Agile, SOAP and Water! Just get the fucking job done! Who gives a shit about these so called management specs, if you are a good programmer, you don't need these bullshit guidelines."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Aidan Millar-Powell,CTO (2015–present),2019,1,"People dislike it for several reasons:
It’s idealic, not realistic.
It is basically a way for management to perform self-felatio with little to no benefit to anyone
It’s a process built by developers for managment
It’s yet another phase of people getting overly excited about process management, when really developing the management of software should be simple and pragmatic.
The problem with most process management frameworks is that the people designing them, often get so caught up in the management framework itself, that they leave very little room for the actual work to get done. (not referring to the creators of agile manifesto, rather people implementing process management in general).
The other issue with agile (or at least the way it’s being adopted) is that people don’t understand software development. That is a problem not easily solved. Yet process frameworks like this allow people to build a superficial bridge into the dev world and cause all kinds of hell.
This is the manifesto I follow:
Really think about your design, take your time here and give yourself lots of options. Play around with some ideas and see what works, make some rough prototypes to practice the development of this particular product. Then once you have a direction, build and make features. Fix bugs. Automate. Document. Do it well. Do minor releases and major releases when you feel the product is ready. Enable conversation with management and get really good at using analogies. Hunt down customers for feedback. Literally hunt them. Like, literally. I’m not joking, stalk them and subtly strike up a convo at their lunch time coffee hut. Seriously. Actually not even kidding. If you really have to: code faster and compromise on quality, but ONLY if you can and will assign time to refactor later.
If people are good at their job and things work then there is little risk here."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,A.karim Amin,Studied at Alexandria University,2019,83,"According to my experiance, many developers dislike agile because it was not performed correctly in their companies. The majority of complains i heard were :
Too many meetings.
Sometimes Too short sprints (Some companies are strict on one week sprint) not allowing teams to ship any thing with quality after each sprint.
It works fine in small to medium size projects but it gives no time for appropriate architecting , designing , system analysis , planning in big projects.
Customers/Managers would love the early and periodic releases that Agile offers but they are not fully understanding other aspects of Agile (such as time boxing, points, early feedback, pear programming ,Agile contracts …etc) and this always lead to a mix of things rather than adopting a certain Agile methodology on everything in the project.
Sometimes there is no enough envolvment of the customer and his inputs / feedback and other assumptions / conditions that Agile has ."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anonymous,5y,2019,2,"What is Agile ?
It is a tool of the management to get more juice out of already bone dried engineers. Let me explain
Does it bring anything new to table ? No. Does it improve timelines, reduce defects, or enrich people working on it. Answer depends on whom you ask. So what does it achieve
a. It helps management micromanage developers.
b. Pressure is constantly on for every two week deliveries so quality suffers
c. Why do we have gears in your car. Because you cannot drive on top speed all the time. What is true for machine is true for humans. Agile expects workers to run in fastest gear all the time. They want you to sprint, sprint again and again. Result, high wear and tear then collapse.
d. All management cares is the date so that they can make more money. So now do you get why your management is pushing so hard for Agile.
They want to be Scrum masters and make engineers as slaves.
e. It is demoralising ! It all sounds great in begining but instead of being beat up once every six months now I get beat up every two week.
f. Have you seen many instances of poor quality of delivery. It may not be people, it is Agile ! Think again. Agile focuses on micromanaging, modular chunks. It misses the bigger picture, the system regressions, enterprise architecture, designs.
Agile is a loose and often abused concept. You have to build safeguards else risk failing miserably in long term."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Lalit Patel,"PhD Physics, MBA",2019,0,"A lot of developers may be disliking Agile because:
Nothing is perfect. Agile has its shortcomings.
Disliking is easier than liking.
An alternative to Agile can be:
TOPIC Management
which is Management by TOPIC
Tools
Objectives
Priorities
Induction
Collaboration
(Easier said than done!)"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Dino Dini,40 years experience in programming from assembler to C++/C#,2019,0,"All too often what is focused on is the vertical slice. Meanwhile, back from la-la-land, engineers are busy with the horizontal slab that is required to ensure that the project as a whole does not fall over. The horizontal slab is more important than flimsy vertical slices, but agile has no consideration for them at all. At least this is the way it becomes when agile becomes nothing more than a management tool for beating developers with...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Dino Dini
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,The Big Flatino,GM (2013–present),2019,0,"The question is not really posed correctly. I see it all the time so I ask them which principle or value are they opposed to. Delivering software regularly? Constant attention to technical excellence? Taking steps to improve? Working in a sustainable fashion?
Mostly they are referring to “dark scrum"" which is simply micro-management with a $200 agile paintjob."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jason Westbrook,Senor Software Engineer (2000–present),2019,0,"Why do a lot of developers dislike Agile?
- In my experience, Agile seems to purport that it gives the power to the dev teams, that its ‘people over process’ and ‘hey devs, you have a voice now that management has to listen to’.
When in reality, Management ends up pitting one team against the other. Using metrics like ‘Team A does X number of story points, while Team B does X-Y number of story points’. All the while ignoring the fact, that each team determines story points differently."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Roar Test,Upvote,2020,0,"Developers do not dislike Agile way of working because it is not restrained to a tool, methodology or framework, however, it is important to understand that using scrum tools and project management tools restrict the mindset which is the Agile way of working."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,XS Chen,Digital Product Delivery (startup and enterprise settings),2020,83,"There are challenges with textbook Agile in some organizational settings, and forcing Agile in such situations will get people (incl. developers) burned and hating it.
One situation is, many (most) corporate IT organizations, especially with significant in-house developers and large number of legacy business critical applications. The IT team (and many individual developers) often plays multiple roles, production support / application management service, small enhancements and repairs, and sometimes as SME to support major initiatives (either new-build, or changes), also impact analysis & operation planning, etc. The expectation for them to be fully immersed in Agile delivery in a small and dedicated team setting, will certainly cause great deal of headache and juggling.
If the IT organizations are structured in a way with separate teams for operation / AMS and Product / Project delivery functions, Agile delivery may not be that disruptive, and is likely more receptive.
A variation or precursor of Agile can be as effective is JAD (Joint Application Development), where Client (PO), Business Analyst, Designer, Developer are short-circuited for instantaneous feedback loop and most effective communication."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Andy Wootton,Director at System Composition Ltd. (1985–present),2020,83,"There are several common reasons:
They don’t know what they are doing.
They do know what they are doing but it isn’t actually agile.
They are doing agile software development but they prefer to work a different way: e.g. they don’t like working in a team with other people, they don’t like talking to customers and having to work out what they want from the weird things they say, they don’t have the breadth of technical skills necessary or prefer to specialise on a smaller area of software development.
They may prefer to have a clear hierarchy with a career structure they can climb because they don’t actually want to be a developer. The money looked good but it turns out to be quite hard."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Kenneth Barber,"Indie design and development by night, engineering cat herding by day.",2020,83,"As most commonly implemented, Agile (note the big A) processes tend to pull developers away from the act of development.
Some of the adopted ceremonies and tenets can be exhausting and counter creative especially when put on a hurried, auto repeating loop…
There is a lot of bad Agile out there, and a lot of people in Agile who aren’t developers or product domain experts. These people tend to be rigidly adhering to some COTS Agile process that they became certified in such that they can be part of a company’s agile cadre. Development adjacent, with the appearance of technical contribution but not responsible for implementing the solution.
The better PM paradigm is “little a” agile as specified by the manifesto or what some of us call, “Just enough agile”. Incentivize solution analysis and product development over ceremony and box checking.
I will say that the “continuous” paradigm (CI, CD, etc) that is associated with many Agile processes is the real secret sauce and is worth the weight it adds to your process."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Sidney Smith,Upvote,2020,0,"This is one of my favorite topics to disucss but others have said better. I would like to share my fav articles.
The End of Agile - Kurt Kagle is super funny but drives th point
Agile — Culture first, framework next and process last - I feel like this all the time in my company"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anonymous,Upvote,2021,0,"What I've seen from experience about Agile proponents and “Scrum certified” teens is that they are too prone to “No true Scottsman fallacy”
Whenever a project is successful: Yay! That's Agile. Horraah!
Whenever a project fails: No! That's not Agile, no way. Developers did it WRONG! They didn't collaborate!
This is dangerous because 1) proponents shows it the characteristics of cult members. 2) Done this way Agile teams turn toxic rapidly."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Aurelio Bautista,Author has 4.8K answers and 1M answer views,2022,0,"Because it became the mainstream way of doing things. Developers always dislike things that cannot be discussed. In the 1980 and 1990 we disliked waterfall and v-cycle. Then we received Agile with enthusiasm and hope but industry denatured the original thought: not hierarchical, open to change and so to adapting after discussion, simple and based on trust. The better alternative is to rewind to the original Agile values, values not injonctions, methods or obligations. Make the teams mature, trust them and give them the greatest possible autonomy."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Acko Manah,"SB in Computer Science, Massachusetts Institute of Technology",2023,83,"Notice: The company as NOT HP. I have the highest respect for HP.
Because “Agile” is a pile of nonsense. It wants to replace people with “process”. You are never going to be able to do it.
I was at work in a meeting and dared to say:
“Nothing will replace a dedicated team of talented; hard working and loyal people”.
I got called into Human Resources. Because “somebody” had reported me. I found out it was the VP of engineering! The guy reported me to H.R. The purpose of reports is to protect employees from harassment NOT to shield a VP. He might have just asked me in and talked to me. He was minimum 3 levels above me. Then he fires my director. My director was a brilliant woman. I decided to quit.
The “VP” is now running a “Medical Marijuana” place. Perfect fit"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Muhammad Ali,"M.B.A in Project Management, University of Northampton (Graduated 2017)",2023,83,"Many developers dislike Agile because it is often seen as a way of micromanaging their progress and making them accountable for every step of the project. Agile also requires constant communication and collaboration among the development team, which can be time consuming for developers. As an alternative, Waterfall project management is a more traditional approach that allows developers to focus on the development without having to communicate and collaborate with other team members. Furthermore, Kanban and Scrum project management paradigms can also be used to manage projects without micromanaging developers."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Bob Harwood,"MS in Software Engineering, Rensselaer Polytechnic Institute",2023,0,"TLDR; 1) Many have had bad experience with poorly implemented agile approaches. 2) Saying things that run against the grain brings high ratings in social media. 3) Some people don’t study a topic fully, rather read ideas from influencers and then repeat them. This leads to bad info echoing in the halls of the Internet. Now, for the longer response:
It’s currently in-fashion to bash Agile. There’s lots of reasons (a few valid, most not.) Here’s a sampling:
* It hasn’t been implemented well in their company so dev’s got a bad taste. Sadly, this happens too frequently.
* A few laggards don’t like change (change IS hard) and are hoping it’ll go away.
* Remember the game of telephone where a message is relayed from person to person and becomes horribly mangled? Today’s Agile consultants are typically a long way from the originators so those sitting on the far end of the couch mangle it. (Not all, but a good number.) Rightfully so, people don’t like to be misled, especially when they are paying for the service.
* The founders are disgusted with the poor quality of information, practice, and consulting and backed away in the early to mid 2010’s. Dave Thomas, for example, declared agile “dead”. {Some founders have since recanted and now have thier own agile framework.)
* TLDR. Some people just want the short version. Agile is subtle; there’s no two paragraph full-on explanation. It takes work, solid enginering skills, trial and error, continuous exploration, study, persistence. Agile is more like learing golf. Golf’s a wonderful game, but you aren’t going to enter the Masters after a weekend outing with your budies. Long-term study isn’t trendy. I’m hoping, like skinny ties, it’ll come back one day.
* Competition. Between the Agile Alliance, Scrum Alliance, and Scaled Agile, the market’s pretty locked up. It’s a large and potentially lucrative market, so there’s lots of companies and individuals who will take pot-shots at the big 3. (Not to say the big 3 are perfect…)
* Agile gives autonomy but asks for accountability and commitment. A few people like to be anonymous and shirk responsibility like they could in the good ol’ waterfall days. (Thankfully, most aren’t like this; they want autonomy, mastery, purpose, and to be valued for their results and performance.)
* Some advanced groups have moved on and evolved past what’s traditional. Companies like Ping An, Haier, and a few practicing Holocracy well...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Bob Harwood
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Alex Brown,1y,2023,83,"There are a few reasons why some developers may dislike Agile:
1. Lack of structure: Agile is known for being less structured than other project management methodologies, which can be challenging for developers who prefer a more organized approach.
2. Constant changes: Agile encourages changes throughout the development process, which can be frustrating for developers who want to stick to a plan.
3. Emphasis on collaboration: While collaboration is a key aspect of Agile, some developers prefer to work independently.
That being said, there is no one-size-fits-all project management methodology. Some alternatives to Agile include Waterfall, Lean, and Scrum. Each has its own strengths and weaknesses, and the best approach will depend on the specific needs of the project and team. It's important to experiment with different methodologies and find what works best for your team.
Hope this helps the thought/discussion. Check out this board for additional material:
https://pin.it/4dsXlBp
https://pin.it/4dsXlBp"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Innovation Insighter,Knows English,2023,83,"Many developers dislike Agile because it is often seen as a way for managers to micromanage the development process and put too much emphasis on short-term goals at the expense of long-term development goals. Agile also often requires developers to work in a fast-paced environment that can be stressful and difficult to keep up with. Alternatives to Agile include Waterfall, Kanban, and Scrum. Waterfall is a linear project management process that involves completing tasks in a sequential order. Kanban is a visual project management system that focuses on improving workflow efficiency. Scrum is an iterative and incremental project management process that emphasizes collaboration and feedback."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Raghav Agarwal,Student,2023,83,"Many developers sometimes find Agile a bit frustrating because it can feel chaotic. It's like trying to build a puzzle when the pieces keep changing shape. Agile emphasizes flexibility and quick adaptation, which is great for some projects, but not for all.
Some developers prefer more structured approaches, like Waterfall, because they offer a clear plan from the start. Waterfall divides a project into distinct phases, which can feel more orderly.
Another alternative is Kanban, which focuses on visualizing work and improving flow. It's less about strict deadlines and more about maintaining a steady pace."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Agilemania,Agilemania is to be the Preferred Agile Company and partner.,2024-01,83,"As a SAFe SPCT and a Professional Coach. Many developers complain about Agile. And around 20% of the developers have a love-hate relationship with Agile.
Some find the adaptability of Agile a bit overwhelming. They're used to a clear plan, like having a recipe for baking a cake. Imagine suddenly being asked to cook without a recipe; that's how it feels for them.
For some quick changes in Agile, it can be challenging.
Imagine you're building a house. While laying the foundation, someone decides, ""Hey, let's add a rooftop garden!"" This sudden change could leave the builders scratching their heads, right? Well, that's how rapid changes in Agile can feel for some developers.
To make it smoother, think of the construction team having daily huddles. They openly discuss any changes in the plan. If someone says, ""Let's add a rooftop garden,"" everyone is in the loop. They discuss how it affects the foundation, the costs, and the timeline. This constant and clear communication helps everyone stay on the same page, making changes more manageable and less stressful for the team.
Now, think of the development team as chefs in a busy kitchen. While preparing a dish, the head chef says, ""Let's spice things up with a new ingredient!"" Instead of feeling pressured, the team embraces it. They see it as a chance to create something even more amazing. They adapt their recipe, learn about new ingredients, and improve their culinary skills along the way.
So, in the world of Agile, when changes pop up, treating them as opportunities for growth and improvement can turn that pressure into a positive force.
I hope you liked the response! :) Please comment on your hurdles when it comes to Agile."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,EnigmaExplorer,Apr 12,2024-04,83,"Agile, a project management methodology characterized by short development cycles and a focus on adaptability and customer satisfaction, has seen widespread adoption across various industries. However, it has also faced criticism and pushback from developers and project managers alike. One core reason for this dissatisfaction lies in the misapplication and superficial implementation of Agile principles, often referred to as ""Agile in name only."" Teams may adopt Agile terminology and tools without fully committing to or understanding its philosophy, leading to processes that are neither truly Agile nor effective. This half-hearted adoption can result in increased pressure, confusion, and a lack of clear direction for the team, undermining the very benefits Agile aims to provide.
Furthermore, Agile's emphasis on continuous delivery and adaptability can sometimes translate to a perceived lack of stability and predictability in the development process. Developers often find themselves in a cycle of never-ending sprints, where the scope and goals can shift rapidly, leading to burnout and frustration. This relentless pace and fluidity can detract from the quality of work, as the pressure to deliver in short cycles may compromise thorough testing and thoughtful development. The emphasis on immediate customer feedback, while beneficial for product alignment with user needs, can also lead to scope creep and difficulties in managing expectations and workload.
Moreover, Agile's focus on collaboration and frequent communication is not universally fitting for all personalities and work styles. Some developers prefer to work in a more solitary manner, finding the constant meetings and discussions inherent in many Agile frameworks to be disruptive and inefficient. This mismatch between individual work preferences and the demands of Agile methodologies can lead to decreased job satisfaction and productivity.
In response to these challenges, several alternative project management paradigms have gained traction. One such approach is the Waterfall model, which is more linear and sequential, allowing for detailed planning and more predictable timelines. While less flexible, it can provide the structure and stability that some projects and developers prefer. Another alternative is the Kanban system, which focuses on visualizing work, limiting work in progress, and optimizing the flow of tasks. Kanban encourages continuous improvement without the pressure of sprints, making it a more flexible and less intensive option for teams looking for an Agile-like approach with fewer constraints.
Finally, the Lean methodology, with its emphasis on eliminating waste and optimizing efficiency, offers a strategic framework that can complement or substitute Agile practices. Lean focuses on delivering value through understanding customer needs and streamlining processes, which can help teams achieve high-quality results without the drawbacks of sprint-based pressures. Each of these alternatives, along with a thoughtful consideration of team dynamics and project requirements, can provide a viable path for those seeking different solutions to project management challenges."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Wayne Uejio,"computer programmer/mathematician, system architecture, system architect,",2016,0,Bad implementation and people assuming process means good systems. Let me say this: good programmers/sw engineers do not like this. Bad ones cling to this.
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Cynthia Avishegnath,Software janitor,2016,12,"Because …
developers would have no more excuses going on excursions mucking around with their development because now they would have clear, obvious and achievable goals to achieve.
managers who have no idea about agile think it is an efficient way to micromanage their subjects.
developers did not use companion frameworks like UML to provide them with a clear and achievable goals or with means and alerts to quickly backout from an unachieveable goal.
developers do not believe in companion frameworks like test-validated development. Or that they do not understand how such a process works in their favour.
developers do not practice code freeze and versioning.
developers will not use Maven-mentality to code freeze their work, but prefer to have 200 projects concurrently active in their IDEs managed thro the defective framework called OSGI.
OSGI is a means to efficiently allow developers to practice bad habits efficiently.
managers do not believe in backing out of unachieveable goals, hence pressurizing developers to achieve them - making the development atmosphere rancid and unpleasant.
“full-cycle” long-term waterfall or pretend-waterfall “methodologies” allow people to hide their failures which they do not want to believe are failures.
agile exposes failures and the obvious need to abandon too quickly, and people prefer development cycles that provide them with reasonable excuses to continue banging their heads against unachieveable goals.
agile is a means to fit the available resources to the required goals. Agile is a means to make do with the skill set available to a team. And the weaknesses of weak programmers become apparent very quickly.
developers do not understand or believe that exposed weakness of a programmer should not be the sole responsibility of that programmer for improvement.
to be effective, agile requires any developer to honestly confess that they do not have expertise but they are enthusiastic to gain the expertise. Agile does not work well, when an atmosphere exists where every one thinks they should put up a front as though they know a lot.
agile is exactly what Matthew 20 - parable of workers, is all about. That it is a team work. That agile accommodates the weak worker and the late worker as much as it accommodates the strongly expert ones. Developers find this socialist concept unfair and unworthy.
agile requires developers to communicate with each other often. And also congenially spend time discussing irrelevant ideas and showing off irrelevant projects, and to build camaraderie. Many of us hate that.
And managers do not want to allocate time for developers to perform irrelevant tasks.
And they don’t realise such irrelevant tasks and min-projects will one day become handy. Because those in-charge are short-sighted."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Tom Murphy,Studied at Wayne Memorial High School,2016,0,Generally speaking it is about accountability. Many engineers claim it limits their ingenuity when in actuality it increases it because of the team approach to problem solving and solution delivery!
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Joe Gorecki,I had the job title webmaster in the 90s.,2017,0,Because it’s a huge pain in the ass for what almost always turns out to be a completely one sided discussion.
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Scott Allen,Software Engineer (2012–present),2017,1,"Before starting, I want to mentioned that I have been a developer for almost 5 years at a single large IT company. Despite that, I’ve worked on a variety of projects with a variety of people and believe I have some insight to give here.
I’ll also disclose that I am pro-agile, and may well give reasons as we go through.
Change
To me, people dislike change. I’ve seen how easy it can be to not learn for extended periods of time and how cosy developers can be sitting at the same desk, with the same people, doing the same work in the same way. This isn’t necessary a slam at developers, it’s often the job they signed up for and what they have expected.
So firstly I’d say that change is the reason some developers do not like “Agile”.
My opinion here is that “Agile” is not the change, but a necessary response to the change. I believe this is reflected on multiple levels, where some of the higher ones are often overlooked during a developer’s reasoning.
Winning Work
Winning work is important for software companies and equally important for developers who do not want to end up redundant (apart from those in-house teams perhaps). In my experience the ways of winning and offering work is changing;
A growing desire for breaking up big contracts; using multiple companies and a drive from government for SME’s.
A shift of trust from larger companies to smaller niche companies.
This for me is adding a lot of pressure on everyone to be innovative and rapid - with a lot of focus on presenting PoCs during the bidding phase and then the continual visible delivery to maintain confidence and win more of the smaller trickles as opposed to the big mammoths. This causes a growing emphasis on communication, reaction to change and innovation.
Client Demand
Carrying on from ‘winning work’; client demand has grown to embrace what those more competitive companies offer, and this has caused a need for all to react. These demands include:
Adaptable requirements
Frequent releases (or releasable code)
Greater Visibility / Tractability
All of which for me just don’t fit into the traditional waterfall approach.
Technology
Even during my short stay, my view of technology has changed so much to which point where I see the following as crucial to have an understanding of as a software company and a developer;
Open Source Technologies
Cloud Computing
Application Portability
Micro-Service architecture
To me there must be a change the way we work. The Open Source community grows and changes so fast that any team must be able to react rapidly, and the development of cloud-centric applications is simply different and requires a different way of thinking; There are no big application with long release cycles and therefore developers must be able to adapt to different technologies, frameworks and methodologies to keep up with the demand.
I believe a lot of the above changes in the world are often not properly understood by developers, who simply brand the whole shift as ‘Agile’ then fight against it. I’m of the opinion that we cannot fight against this change but only adapt; Agile may not be your ideal scenario but is an attempt to manage these changes in a positive way for IT Companies, Developers and Clients.
Lack of Understanding
Clearly, there’s just simply a lack of understanding. On some levels working in an Agile manner can be very simple, but it also often feels like delicate procedure which requires careful balancing and real commitment.
Daily Stan-Up Calls
Having a call at the start of every day where everyone just blurts out what they’re doing for the sake of it is not Agile.
Stand-ups should be as brief as possible, and this should be supported by the consistency of their occurrence and attendance. They give everyone a chance to highlight (not justify) the work they are doing and highlight issues they are having. This will allow the rest of the team to understand your position, who they need to communicate with for specific queries and ensure that everyone is aware or blockers. Good standups will often result in multiple ‘offline’ discussions taking place afterwards (“oh you’re working on that, maybe you can help with this” or “ah I might be able to help you with that issue”).
To me, having the whole team understanding the position and struggles of the whole team can only be positive.
If your project manager is running your stand-up meetings; you’re going to have a bad time. I find the best way is to rotate who runs them, but always have a strong ‘scrum master’ who can step in if it inevitably goes off track.
Working in Iterations
Being told to get so much done in a given time then meeting up to see if you managed to do it or not is not Agile.
Iterative development is all about learning in my opinion. It’s about learning how much you can comfortably take on in a given time, it’s about learning if you and your client have the same vision, it’s about learning how the process can be changed to improve the experience for all.
The amount of Story Points moved into a sprint isn’t about setting yourself a target to complete, it about learning the velocity of your team and therefore learning what can be expected in a given timeframe. I’ve met so many teams who think they are agile but do not understand Story Pointing - if you’re doing “Agile” but do not use story points, I can’t see how you’ll make it work.
Just the same with Retrospectives - which are an important part of the process but are often overlooked as ‘ceremony for ceremony sake’. I’ve been in retrospectives where people have refused to be thoughtful and some where people are simply scared to challenge the status quo.
Retrospectives are there to give the team a voice; and should be nothing but beneficial to developers. This is a chance to flag things which which you don’t like as much as praising the things you do like. “STOP: Having the PM run the standup calls”, “START: Estimating my own tasks”, “START: Dress-down Fridays”, “STOP: Last-minute meetings”.
Showcases are a given also; I’ve been frustrated many times at spending long periods developing functionality which simply wasn’t what the client really wanted. As a developer I find it much easier to motivate myself when I know I’m adding value. Showcases should be all about making sure you and the client are on the same page (rather than a progress update). This along with backlog pruning should be a developer’s dream in reducing the amount of wasted time.
The Wrong Reaction
I want to finish off by saying that I understand why people are driven to hate “Agile” as a term. Daily updates to the manager, requirement of visual progress every week and micro-managed workloads are all awful and have too easily led to the blips of hatred we can see appear.
The blasphemous use of the term “Agile” to describe some of the above has pulled an illusion over developers eyes, turning something which we should all embrace into something many fear.
This fear has caused developers to run away when “Agile” is mentioned and push back at Management for introducing the buzz-word into their work environment. Yes, “Agile” can be ran awfully and make your lives harder, but if instead of pushing back you take control and champion your company’s / team’s approach to Agile with a real understanding, you’ll find that it’s there for you."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Scott Weiner,"CTO, Strategic Consultant, EBAS, ICP-BAF, CSM, SPC4",2017,0,"I’ve worked with over a thousand developers. I rarely have seen developers that don’t like the Agile mindset. I have seen teams that were not operating in an Agile way and thought they were. Those teams were often miserable because they were getting very little of the benefits and they had all sorts of unreasonable overhead.
In fact I’ve gone into many teams where morale was awful and after creating a shared understanding of Agile the difference in attitude and effectiveness of the team was often incredible. It happens fast when done well.
As for a better paradigm, it completely depends on your needs but for most general purpose application development Agile mindset and some related methodology work...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Scott Weiner
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Clint Potts,Agile trained. Mother approved.,2016,1,"Agile is an environment in which team members look at a board of tasks, and self-assign themselves work. They are then expected to report daily on their progress in short “scrum meetings”. This environment quickly exposes the team members who are not getting their share of the work done and continue to make excuses for being slow. You only get away with that for a few days before you get called on it by your colleagues.
The problem is, if your project lends itself to Agile management, it is the best option. Tried and true project planning allowed developers to hide in the Gannt chart. Agile requires accountability and movement during each sprint.
So what do you do? You work to develop your employee using good ol’ human resource practices. Does the team member need training? Are there problems at home? Can a flexible schedule be accommodated to provide time to address personal concerns? Do we need to engage a HR plan?
Bottom line: team members get held accountable and need to be productive in a Agile team. These are good things!
-Clint"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Nicolau Werneck,Dr. Engineer,2016,4,"Reading this question for me is crazy, I have never met a developer who does not like agile. Maybe this is a thing among some developers out there, but I am certainly distant from those. From what I am reading here, it only happens when people are not actually doing agile, the problems pointed out are just classic bad management practices that agile explicitly fights, such as the idea your “boss” is checking out on your work every day… The daily is a great moment of the day, you talk to your co-workers, you ask for help, you offer help, you get to know what is going on, you share what you have done, you talk about issues affecting your work. If you actually live that once and then move to a place people don't even know what that is, you'll miss it dearly.
What would be the opposite of agile? The main anti-pattern I believe would be to get rid of iterations and instead pretend you can envision your project in a couple of months to deliver a perfect product two years later. This is crazy talk… You need an error feedback loop. And you need a PO who cares about making a product that is relevant, and who is responsible for its success. If you don't have a good PO updating your requirements, you'll soon be working in something that is either pointless or doesn't even make any sense. This is terrible.
The question of testing and of being pushed towards doing low-quality code, or also focusing on front-end stuff and “putting down fires” instead of creating some serious long-term infrastructure, this is a relevant problem, but agile is not to blame. Let's get real: if some code is buggy and nasty, but it is not a real problem for users, then there really is not much of a reason to make the code better or to have it tested. The PO and developers, the whole company must reach a consensus about what matters, where to improve on quality, where to make more tests. Sometimes developers can envision that investing on something will be better long-term. But it must become clear to the rest of the company that this is true and will be relevant. And developers must also understand those superficial and immediate issues do have its importance. A developer cannot be lost creating beautiful code that is not really relevant not now or not ever. You need that reality check.
Agile doesn't really solve that quality problem, but it gives your the opportunity to solve it, by putting people to talk to each other. The business and architectural decisions are beside agile. Agile is about making people look to what is happening, talk to each other, fix problems and getting things done, instead of getting stuck in plans that might become obsolete, and following pointless rules or remain suffering with impediments that are never discussed with anyone."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Stoyan Stoyanov,QA Manager (2020–present),2020,0,"Being smart and understanding the method and tools you are using is the better alternative. A lot of devs. limit themselves by adoring the label ‘dev’ and choosing to be blind for the rest and the modern human knowledge says we have to know the whole process and be cross-functional and scientific.
So my answer is - lack of knowledge leads to misunderstanding of the Agile manifesto and practices. A lot of devs dislike what most human dislike - breaking the homeostasis, doing something more, crawling out of their shell, the usual human stupidity (;"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Sneha Gangan,Studied at LFS,2015,15,First of all the time Limit. It stops the creative process that takes time to develop.
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Dave Voorhis,"Software entrepreneur, engineer, and educator for 35+ years.",2023,359,"The original notion of Agile[1] was:
Individuals and interactions over processes and tools;
Working software over comprehensive documentation;
Customer collaboration over contract negotiation;
Responding to change over following a plan.
I don’t know any developers who dislike that, because it’s about empowering software engineers.
I know some managers disliked its original form, because it implied a lack of managerial control. That’s because software engineers see themselves as the source of software and software excellence, but some managers see themselves as the sole source of software and software excellence and software engineers are — or should be — mere instruments to implement managerial vision, like compilers with eyes and fingers.
So those managers pushed back against Agile in its original form, and came up with what we sometimes see described as “agile”:
Processes and tools over individuals and interactions;
Comprehensive Jira ticket comments and constantly-revised Confluence pages over working software;
Customer interaction via a hierarchy of managers, analysts, and formal processes rather than collaboration with software engineers to build software that works;
Endless changes due to lack of any planning or foresight.
It should be self-evident why people might dislike that kind of “agile.”
Footnotes
[1] Manifesto for Agile Software Development"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Tom Marsh,professional software creator,2015,12,"Even on good agile projects it's easy to feel like you are still under producing or that you are sacrificing quality for speed.
Teams that pair all day sometimes feel like there isn't enough time to reflect. Teams that practice TDD sometimes feel they spend too much time writing or re-writing tests. Some teams feel like they spend too much time estimating, others that they don't spend enough designing. Everyone is upset at the volume of defects.
The real problem is that a good agile process is a compromise between all the actors responsible for the product: Dev, QA and the business. Unfortunately, most good compromises leave all the parties feeling like they lost more than they gained."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Gniewomir Świechowski,"Full-stack developer, occasionally tech lead",2021,6,"I can speak only for myself, but it may be representative for at least part of wider group of so-called “agile-hating developers” so I will be using plural. :)
We do not hate agile. We despise how companies are often smuggling waterfall under agile disguise.
Problem with current understanding of what agile is that people in charge often associate it with particular implementation. Scrum for example. They expect that we will religiously adhere to some arbitrary set of rules with disregard of them working or not for our use case - which is exact opposite of being agile and constantly looking for what works best!
At the same time, when you are “agile” - in aforementioned way, you are still expected to provide waterfall-like estimations for things months away, which you rarely can reason about - without being a prophet, as the same people will change their requirements multiple times, without giving you space for changing guesstimation, they forced you to make before.
It is even more problematic, as this kind of being “agile” is very popular in businesses outside tech sector (most of them!), which means that whatever they have is probably in state of disrepair, obscure for any reasoning about it and very, very fragile. Which makes even 2 week predictions about what we will be able to do at best unreliable and at worst pure fantasy. But don’t expect to be given much space to remediate this problem.
So “agile”(note quotes) lovers create teams that chase this arbitrary deadlines (re-implemented from waterfall) with disregard for technical debt, basic hygiene (understood as CI/CD, automated testing, developer experience, developing common language with business etc.) and quality (re-implemented from waterfall) but with shitload of often unproductive meetings (re-implemented from waterfall).
Teams that are as much “agile”, as the where 20-yrs ago, but more frustrated because all of the bullshit pretending around.
What we hate is when people grab sexy buzz-word and slap it on waterfall-like process without any understanding there are not many canned answers in this field.
To be truly agile everybody in organization have to accept, embrace this constant state of flux every business and every code base is in and act on it - implementing more iterative process, not cling to illusions of predictability under disguise of being “agile”.
We love being agile, we hate being “agile”."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jacky Jackson,Software Engineer,2018,32,"Agile Manifesto and the four values
• Individuals and interactions over processes and tools
Resulted in endless interruptions while nobody bothers to write their thoughts down
• Software products over comprehensive documents
Results in ball of mud products with no documentation on what the hell the creators were thinking, and what it should be about. I wants those comprehensive documents back! Please.
• Customer collaboration over contract negotiation
Śo we accept collaboration in customers changing their minds every two weeks, and do not force them to make up their minds.
• Response to changes over observing plans
So we refuse to write anything down in a plan and just ‘do agile ‘ because it is ‘hip'…..
YES I TOTALLY AND TOTALLY HATE HATE HATE HATE HATE AGILE!!! I SPIT ON IT, I P!SS ON IT."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jerry Westrick,CEO at Software House Merida (2016–present),2020,10,"Part one:
The “Agile Manifesto” which first coined the term “Agile”, starts off saying:
This is a study of some of the things that Small teams have used to achieve large results. Pick and use the things that work for you.
This is a far cry from “you have to …”, “You must …” as implemented in most companies.
Agile as I see it consists of workers who do undefined work using undefined methods. And a leader who’s sole purpose in life is to enable the workers.
Everything else is a big company trying to force structure and form on a process which was chosen because programming is so much faster without it.
Part Two:
I have seen many “agile projects” fail for the simple reason that the people ordering the software did not understand what was going on. If you are going to implement an “iterative” development process, please do yourself a favor and make sure your “Owners”, “Stake holders”, or “End Users” know exactly what they are doing.
I cannot tell you the number of times I have heard “Ready for Production” from the “End Users” when all major back end work is still “Simulated” by “End User” priorities. It is very difficult to keep your “End Users” expectations realistic when the screen looks perfect and seems to work."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Joe Seabreeze,Programming for many years,2020,12,"Because it doesn’t work for every company/team for various reasons:
If you have bad project/product management from the start, Agile isn’t going to fix it. It will likely make things worse.
Some companies try to institute Agile practices even if their business model doesn’t require it.
Many managers don’t really understand what Agile is, so they’ll sometimes use it as a way to micro-manage. It’s easy to use an agile process for micro-management, which is a very stressful and unproductive way to manage a team.
It’s not easy for a service-oriented and reactive business to execute Agile development. How can a developer get anything done in a static sprint when they’re getting pulled into meetings and answering emails half the time? Basically, your development work slips every week, putting too much pressure on the developer.
If your business is highly regulated, it’s not easy to incorporate Agile development. Part of Agile is to reduce unnecessary documentation. With a highly regulated business, it’s all about documentation.
If your software platform has a large code base and doesn’t have a modular architecture, 2 week sprints are practically impossible. And once you start heading into one month sprints, well, Agile stops having any benefit.
If your whole organization doesn’t support Agile, then it will likely break down in the smaller teams that do. It’s not easy to work in Agile teams when your work environment as a whole isn’t agile.
The tagline for Agile at its inception was “For Developers”. In more cases than none, it has been the opposite. Poor Agile execution and micro-management puts way too much pressure on developers, so developers feel betrayed by a system that was suppose to be for them.
In the end, there are just way too many factors that can mess things up when using Agile. So it’s likely that low quality and emotional stress will outweigh any of the benefits that Agile is supposed to provide."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anthony Minessale,"Founder, CEO at SignalWire (2018–present)",2015,23,Software development is chaos. Agile is an attempt at order. Order can be brought to chaos only temporarily. Anyone who hates on it probably is being forced to follow it at all times. Its good to have guidelines but rules are meant to be broken when the chaos is at a maximum. The secret that takes most 10+ years to learn is to avoid religous affinty to any one style or practice for anything to do with tech but be willing to borrow from any of it.
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Alan Mellor,Used Agile methods since 2005,2019,404,"I’m not a fan, I must say.
I loved the original agile manifesto.
To me, that directly addressed the problems of uncertain, unpredictable development by attacking its root causes. Extreme Programming (XP) seemed to make a lot of sense.
These were ideas devised by programmers for programmers to help them program.
And then the project managers came along.
Scrum, with its planned sprints, seems to me to simply discard the agile manifesto. It splits a project into two week waterfalls and hijacks the term ‘agile’.
There is nothing in the agile manifesto that says we can make software more predictable. It’s all about handling and making transparent the unknowns that we face during every bit of the development process: requirement details, libraries, legacy cruft and people. Instead of pretending we can predict those before they hit us.
But by all the same tokens, your project manager is going to love Scrum. It’s a way to rein in those pesky agile programmers who make it up as we go along. On paper.
I’ve been part of successful Scrum projects. But the agile manifesto/XP way of delivering software has always felt a much better, more productive fit."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Amir Hakim,8y,2016,18,"Is nuclear power the biggest evil ever invented ? or is an incredible source of energy ?
Answer: it depends on how you use it!
Currently: Scrum is anti-engineering.
Scrum like everything on earth is a powerful noble idea that capitalism took and turned into an evil monetisation tool, just like Christmas and Vegetarianism. The way it’s usually used, makes it nothing more than continues rapid prototyping while ignoring the technical debt, to generate your first sale and may be sell off the company, then the horrible code base becomes someone’s else problem. It is used by non-technical bosses to drive developers and work them to the bone. To micromanage everything and ask you to log every minute of your day. All the accumulated technical debt doesn’t matter because all you need is to show your feature to sell them. Then once you do, you blame the current heroic development team for the bugs and you replace them with others. It is used so your trade code monkey are driven to produce, while the engineering talent is suppressed. It pushes Devs to choose the fastest solution to implement, not the best solution, because who has time to research and implement that new library or framework that will make you future proof, when you can hammer out few lines now, then when a change comes along, you delete that crap and start from zero. Why try to abstract and code re-use, when you can simply copy-paste. Because when you over or under estimate your user story, management look at you as either a thief, or lazy, or both. Because when you try to object and raise concerns about being hampered by all the tracking and estimation, management says: light process is a privilege that you have to earn. And don’t blame the scrum master for being a management puppet that is only there to spy on the team because he is not trained, but we don’t have the budget for real scrum training. But we are scrum.
Others agree as well
Why do some developers at strong companies like Google consider Agile development to be nonsense?"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Tom Rose,Studied at King's College London (KCL),2020,10,"Agile is fine. We should all try to be agile
SCRUM is not Agile, never was, never will be. It goes against the most important Agile principle, “People and Interactions over tools and process”
It might be a good methodology for some projects [it is!]. It is most certainly not the one and only good method for everything.
It often takes away the pleasure in work that used to be felt by many excellent programmers that for decades delivered good quality software without the help of SCRUM. That is enough to treat it with suspicion. And it is true of both “real” SCRUM and the cargo-cult variety.
I have never yet met a programmer that asked be part of a SCRUM team. So far as I can see it is always imposed from above by control freaks with the word “manager” or “director” in their job title, but with a complete lack of any ability to manage or capable only of directing in the wrong direction."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Alan Mellor,Used Agile methods since 2005,2019,56,"No. I like the stand ups and I appreciate the ideas on planning small sections of work. Both have value.
It is the fact that each Sprint has a commitment based on my wild guess of how long something will take that sucks catastrophically bad.
It’s all a total charade to add a veneer of predictability to something unpredictable."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anonymous,Updated 7y,2017,53,"Yes, as an engineer I have started saying no. Typically I get almost daily emails from recruiters. Many times they send multiple follow up emails
“hi Anon, I just wanted to make sure you saw my email about the life changing opportunity doing exactly what you do now but for less $$”
And then the more obnoxious third email
hi anon , I really it's in your best interest to pursue this incredible opportunity. That you haven't responded tells me one of three things…
Anyways, I always just ignore these emails, but lately I have decided sice they are so demanding of a response to actually give them one.
I will politely inform them that I have no desire to work at a place that practices “agile”. They seem to appreciate this feedback. I also inform them that I am not interested in working at a place with weak technical leadership.
Hey the whole thing is about finding a good fit. This agile witch hunt has to end, but it never will unless we start politely asking for the things we want.
i know for a fact that 90% of engineers dislike agile but many don't even imagine there can be an alternative, and most who do are terrified to say anything. Just look at the other answers to this question, most are from the very non engineers that have imposed this nonsense in the first place.
Edit:
why so I dislike “agile”? Look up Zeno’s paradox …
what are some alternatives? ok this one quite baffles me. I mean what are some alternatives for stepping on a nail?? But I mean really, what significant piece of code or software has ever EVER been developed via this bogus process?? Let's see , no open source projects use it, none of the Microsoft projects from the 90s, so that pretty much eliminates editors, oses and databases how about Google or fb?? Nope they don't use it… it's almost as if by using agile you are admitting that your project is insignificant and subject to the whims of the daily breeze….how about this as an alternative: just have deadlines , designs and detailed plans and let people do their work to try and meet them? Remember? Like we used to before 2007???"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Mourya Venkat,"M. S in Software Engineering, Vellore Institute of Technology, Vellore (Graduated 2017)",2019,10,"Hahaha because people freaking changed its definition.
What's supposed to be a 15 minute scrum, is now getting stretched to 45 min - 1 hr.
Can you just assume, you just start your morning with a very fresh mind and all of a sudden, you will have to move to a suffocated meeting room and spend your 1 hour time just listening to things which doesn't even link with your component.
..."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Aleksandar Atanasov,"Master of Science in Computer Science, Karlsruhe University of Applied Sciences (Graduated 2017)",N/A,3,"Here is my experience with SCRUM. My hope is that people will view it as a cautionary tale and will try to avoid the mistakes I have observed in multiple companies that I have worked at and seen the failure of SCRUM and agile development all together.
First of all there is a difference between the two terms. If Agile is a class, SCRUM is the object that instantiates that class, that is agile development is a philosophy, while SCRUM is the means to enforce that philosophy.
I worked in three companies in a span of several years. Quit all of them due to being extremely dissatisfied with how things were managed. Most if not even all of the time the introduction of new workflows (SCRUM or otherwise) comes outside of the development department and not from the developers themselves. Usually it comes as a suggestion from project management. Why? Well, it’s complicated.
It all starts when a sales person, who gets big bonuses from finishing a sale, goes to a client. Without knowing what actually is possible (or caring, for that matter), they promise the client everything. The client is happy. While more experienced folks will know that there is always quite a bit of snake oil marketing going on, many are more than willing to sign a contract that promises them the stars since 1)it looks great in front of their boss and 2)a contract is legally binding, hence the responsibility is ultimately shifted towards the legal team if something goes wrong.
The sales person and the project manager then sit together and start checking what can be done in the given time frame and budget. Most of the time this is the first place where huge discrepancies are observed but not fixed.
The project manager than goes to the head of the devs and tells them they need to get to work. In the end “something” is shipped to the customer and using various techniques of deception, best case the company, that provided the service/product, gets away with most of the lies they sold to the client. This cycle repeats over and over and gets worse, since the more you manage to barely scrape by, the heavier the push from the top gets. After all if you managed to get the job done 99 times, why not do the same 100 times?
At some point this workflow implodes. People start being demotivated, burned out, getting sick, friction among the dev team rapidly increases and ultimately people pack their stuff and find a new job. The less people you have, the less human resources you have to actually do anything beyond selling and managing projects. This high turnover increases the strain on the rest of the developers. Deadlines start to fail, projects start to crumble.
The project manager sees that something is going wrong. They absolutely have to do something otherwise the deadlines will not be met and they will get into a lot of trouble (mind you, the sales folks seems to be immune to any critique and can continue selling snake oil for quite a while before someone points the finger at them). So they talk to their supervisor and say they need to check how to improve things. Funny enough, they got contacted on numerous occasions by this consulting company that sells training and does workshops in SCRUM, promising to improved the output by a lot. How much they cannot say since specifics are legally binding. ;)
The project manager asks for funding from their supervisor, who gladly coughs up a few thousand USD since it appears to be a good investment. The consulting company that consists of people, who benefit from your company introducing SCRUM and employing them to consult you during the transition, then fill the manager’s head with a different type of snake oil. One that tells them that all of their problems will go away if they use SCRUM and that SCRUM ensures a tight, highly flexible and observable workflow that would make their job in controlling the devs better and will also make the devs happier.
The project manager comes back and immediately starts probing and pushing SCRUM down everyone’s throats. The other managers rapidly jump onto the SCRUM-hypetrain since they are also struggling. Of course no one asks the developers if this would fit the team at all. On top of that the migration period is literally nonexistent. You wake up and all of a sudden you just have to work with SCRUM. Why? Because ongoing projects that are already failing cannot wait for you to get into SCRUM, you just have to employ it because, if anything fails, it’s you that failed and not the methodology.
SCRUM requires discipline, clear vision of your goals, good work ethics and well trained team that endorses it. It cannot fix mismanagement, it cannot miraculously create proper specs out of thin air and you can definitely not push it down a dev’s throat if they see it as something that will 1)benefit you as a project manager but 2)hinder their current workflow."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Robin Dymond,"CST, Expert trainer and coach in Scrum Agile and Lean. 26 yrs in software.",2021,2,"Before asking why, ask if.
In a large scale transition to Agile from waterfall at a top US bank, morale was surveyed before the transition and after 6 months of working in an Agile way. The survey was given to everyone who was transitioning to a Scrum team. The survey found a marked improvement in morale and job satisfaction. In a healthcare software company in the EU with 400 developers we found the morale improved and people were happier.
In working with companies across the US, EU and Canada in Agile transitions the large majority of people doing the work like the change to Agile and don't want to go back to waterfall.
Calling waterfall traditional is a bit silly. The first Scrum project was in 1993, the first paper in 1995 and the Agile manifesto was created in 2001. So Agile isn't new, especially when compared to the speed at which technology changes."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Christopher F Clark,"Yacc++ author, Intel chip designer, ex-Googler",2019,8,"I am a software developer and I don’t hate scrum itself. I do hate the careless TTM (time-to-market) pressures that force it upon us, but scrum is one solution to that problem. It is not a universal solution, not a panacea. However, it does attempt to solve the problem by breaking things down into small measurable tasks, checking on their status regularly, keeping people unblocked, and a host of other things, which should mostly be viewed as positive.
So, yes, TTM itself is a problem. It is one forced upon us by a world where speed matters more than correctness. But, scrum is an attempt at a solution (or at least a mitigation) of that problem.
So, it is not scrum I hate."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Robert Garrett,Independent I.T. Consultant,2020,3,"Because they're finally wising up. It's not that the underlying principles of “Agile” ( which actually should be called agile development ) are flawed, they aren't. They're actually quite good. The problem lies in how the majority of organizations have gone about implementing (I should say TRYING to implement) them. They've turned what should be a set of simple ideas into a monstrous behemoth of regimentation, rules, endless meetings, and mindless obscure jargon that is anything BUT “agile” and is now in the process of collapsing under its own weight. Which is exactly what SHOULD happen."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jeff,"developer, author: 5 books; Clean Code contributor; geek",2020,4,"As Robert Garrett suggests, it’s the specific implementations and trappings of agile—not the underlying values or principles themselves—that can be the problem. The values of agile might seem motherhood & apple pie, and most people wouldn’t dispute them. The principles have a bit more meat in terms of describing how to begin implementing agile. If you’re not familiar with them, take a few minutes to read them; most people similarly won’t disagree with much here.
Some examples of things that people think are “agile” but are specific to some implementation:
Stand-up meetings / daily scrums—perhaps the one thing that’s most universally botched. They are intended to be a quick touchpoint and plan for the day, but devolve into boring, glorified status meetings for many teams (mostly because most teams aren’t truly collaborating like agile says they should). There’s really no standard set of questions, but too many teams somehow have fallen into the “what’d you do yesterday, what are you doing today” rut.
Pair programming. Comes from XP. Many devs really hate this idea, though for those who aren’t vehemently averse to it, it can be enjoyable and highly productive.
Specific story format. “As a / I want to / so that…” A nice idea. Not an absolute must.
SAFe. A big bloated thing with lots of buzzwords. It might be beneficial to larger organizations with the need to coordinate many projects. Don’t do it unless you know you need it (and then, consider something else like LESS). Don’t do it until you’ve learned how to get at least one agile team to click, and really click well.
Agile implemented in a rote way involves lots of meetings—something we wanted to get away from 20 years ago when I learned about XP. The meetings ain’t the thing. I understand why the typical developer reaction is that it’s meeting heavy.
Further turning people away: The proliferation of the Agile Expert—sometimes a ScrumMaster—someone who’s learned all the basics & buzzwords, just enough to be dangerous, dogmatic, and annoying.
Agile can and does work very well, and in a way that’s enjoyable and not off-putting. And standup meetings, pair programming, story formats, and iteration planning meetings can all be valuable tools, particularly to a team new to agile. But learning how to make them effective and not onerous is also important, as is learning when something better is called for."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Dave Voorhis,"Software entrepreneur, engineer, and educator for 35+ years.",2020,29,"I’m not sure what “old people” has to do with it. Indeed, “old people who are still employed as developers” sounds like your question might be more about making a point than seeking knowledge, but let’s ignore that and focus on the issues.
Some people — of all ages — who are opposed to Agile feel that in many organisations, it’s lost its agility.
What should be individuals and interactions over processes and tools has become an almost obsessive focus on heavy-weight processes and the tools to support them. Instead of talking with customers and colleagues about software functionality, we’re talking about how many Jiras we’ve created or completed.
What should be working software over comprehensive documentation has become a barrage of Confluence pages about requirements instead of delivered functionality.
What should be customer collaboration over contract negotiation has become endless meetings about licensing and intellectual property issues.
What should be responding to change over following a plan has become a tedious series of daily stand-up planning meetings to make sure we’re on track with the plan, er, current sprint.
In other words, the core principles of Agile, per the original Agile Manifesto, has in many organisations become the antithesis of agility: a heavy, slow-moving, bureaucratic set of processes that are the exact opposite of what the Agile Manifesto intended."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jacky Jackson,Software Engineer,2017,9,"Frankly…. I do not dare to, still. I have been working with Agile for a few years now, and countless times I wanted to shout it out of my lungs: ‘'write it down’'. But…that is not lean, scrum and agile. I wanted to beg for a few hours of silence to work in…but pair programming is the new and modern way to work. At the moment you dare to criticize agile, it is you who are a bad programmer not being good enough for agile. I totally loath agile!! At least I can write it down here."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,William Hurley,Director of a team of developers,2023,2,"A lot of the hate, I find, comes down to one simple phrase: “in theory, theory and practice are the same; in practice they are not.” Let's start with what agile (small-A) software development is.[1] It's a rejection of the idea that you can document away the complexity of the software development process and arrive at a fixed scope, cost and timeline. Inherent on that is that if you ask enough questions, get enough people to sign on the dotted line (in blood, no doubt), there will be a plan that is inviolable. Which usually ends up with it being, well, ineffable. To misquote Aziraphale in Good Omens:
Best not to speculate. It’s all part of the System Specification Document. It’s not for us to understand. It’s ineffable.
Agile (again, small-A) preaches the acceptance of change, moving in small increments, planning and building what you need and learning while you go. And, above all, trusting the team to execute on the vision and make choices during the process, especially for things that don't really matter.
So, now that that's out of the way, let's talk about Scrum. You'll notice in the previous paragraph nothing talks about how to do this. And that's where people start to have a problem. Because it's all well and good for a team to say, “just tell us what the most important things are and we'll go down the list and we'll get as much done as we can until you tell us to stop,” but that's a much harder sell to most business people. They tend to wonder about, “will we have enough money,” or “will we hit our retail window,” or “how can we tell our client what they're going to get.” So into that void has stepped a number of methodologies, Scrum being one of the most popular.
Scrum is based on the idea that you have to have some bone to throw to the other side. So in that regard there is estimation. But rather than do it in hours or dollars — because that level of granularity is either a fool's errand or costs about the same as actually doing the work — you do it in some abstract, relative metric, usually called “story points,” or something similar. Then, assuming that the team can be somewhat consistent and stick to the idea that the task their estimating is going to be either more complex or less than this thing they already did, over time you can generally predict what's possible during a fixed unit of time. This, combined with the idea of continuous improvement, cross skilling, and an embrace of not changing the thing you are currently trying to do is supposed to prevent the problems with the waterfall method (see paragraph 1).
So, where can we go wrong? Well, there are a lot of ways. Most of them stem from people just using the trappings of Scrum but not actually committing to what it — and agile methodologies in general — preach. A common one is trying to shoehorn hours estimates back into the process. The reason you're supposed to use complexity is to avoid the problem of, “well, Sarah does it it's going to be 3 story points, but if Phil does it we're talking 5.” The team is supposed to self-organize, so basing estimates on pre-assigning tasks is really against the spirit.
Another big one is having stand-ups that don't actually provide any value. If anyone has been in one of these you'll recognize, “this is Ben, I'm working on ticket 2365, same as yesterday; don't have any blockers.” That's just noise. Another big mistake I see is doing too little exploration, assuming that, “we'll figure that out as we go.” Scrum is about the team committing to itself what it's going to accomplish. If you don't know what that is, how can you estimate? If you don't have an accurate (-ish) estimate how can you commit? So you discover what you actually need to do while you're doing it. That's not going to work well. Looking forward is at least as important as working now.
Properly done agile (and Scrum) is hard. You need to balance the now with later. Do enough planning, but not too much and certainly not too little. It also means holding yourself accountable and being willing to accept feedback and change how you are working so the team can be better.
Most people aren't willing to do that.
Footnotes
[1] Manifesto for Agile Software Development"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Peter Vukovic,5 years of experience in agile software development,2016,61,"To understand what is agile development, let’s think about two different ways to climb a rock:
The planning way, and
The learning way.
The planning way
The way to climb a rock this way would start by commissioning a geological survey of the rock to understand it’s composition and determine the best material to use for the spikes.
An additional helicopter survey would be used to scan the rock from all sides and determine the best coordinates to place the spikes during a climb.
A climber would also analyze weather patterns for the past 25 years to forecast the most promising date of the climb.
Finally, he would begin to climb the rock according to the plan.
Let’s assume that he is successful and reaches the top. His cost of reaching the top ranges in tens of thousands of dollars, and at least 60 days in time. Not cheap.
Now let’s consider the learning way to climb a rock, which is the way rock climbing works in practice.
The learning way
A climber will glance at the rock to get an idea of how difficult a task it’s going to be. He will decide on a date, get his gear ready, and start climbing immediately.
As he places his first spike, he will learn about the composition of the rock and whether the spike is strong enough to penetrate. If not, he will use a different type of spike and move on. As he attempts to climb, if any spike appears to be unstable, he can easily fall back to the last stable spike and try a new spot.
Spike by spike, this climber learns about the rock and climbs it at the same time.
His total effort: just one day. His total cost: the cost of the climbing gear.
This is what agile is all about.
With each new move you make, you learn more about the rock you are climbing so you can plan your next move. Instead of trying to figure it out all at once, you embrace the fact that it's okay to learn as you go. This makes you fast and efficient."
https://www.quora.com/Do-programmers-really-like-Scrum,Assistant,Bot,2024-07,0,"Programmers have a range of opinions on Scrum, the popular agile software development framework. Some programmers appreciate the structure and cadence that Scrum provides, such as regular sprint planning, daily standups, and retrospectives. They find that Scrum helps them stay focused, collaborate effectively, and deliver working software incrementally. Other programmers, however, feel that Scrum can be overly rigid and bureaucratic, with too much emphasis on process over substance. They may prefer more lightweight or flexible agile approaches. Ultimately, whether programmers like Scrum tends to depend on factors like their individual work style, the specific Scrum implementation in their organization, and the overall project and team dynamics. There is no universal consensus, as programmers have diverse perspectives on the benefits and drawbacks of Scrum."
https://www.quora.com/Do-programmers-really-like-Scrum,Jeremy Stafford,Software Engineer/Architect,2021,84,"I’ve always felt that the biggest problem with Scrum isn’t Scrum. It’s non-engineer type people trying to bastardize Scrum into something that works for them. We’ve had an uprising and have kicked managers out of the Scrum process and it has been amazing, so here’s my opinion on it:
Scrum is a development process, not a people management process
In short, separate the Scrum process from project management. Leaders will coordinate with each other, but they shall not intermingle processes, and engineers will only be involved with the parts in which they have a stake (like grooming or system design). As I mentioned, in my experience, the moment that management tries to change Scrum to meet their needs, it falls apart and turns into a complete shit show with which most of us are quite familiar. We’ve basically drawn the line around something like “If you’re not the product owner, scrum master, or engineer, then you have no part in the Scrum process. Your contribution is typically part of a different process. End of story.” When those within this inner circle (so to speak) carry a conflict of interest, we just stay vigilant to identify and call out when we feel non-Scrum processes are beginning to leak in. For example, when a manager or project manager acting as a scrum master. It took a while to get certain parties to accept that approach, but we’re there and it’s working now. Side note: the unforeseen benefit was that it gave each party more bandwidth to focus on their particular part of the machine.
Basically, get good at identifying what is a Scrum problem vs. what is a management (project, product, team, etc.) problem, and do everything you can to keep them separate. Figure out the bridge between Scrum and management and develop it. Life will be good.
While one can argue that Scrum is a form of management, your focus and attitude towards it will greatly affect how you solve problems. That said, Scrum needs to be focused on development, not management. It is a team concept for software creation where all of the members worth together as one whole to deliver the sprint commitments and perform retrospectives on what they have learned every sprint so that they can grow from it. It’s not about pushing deadlines. The only deadline the team should ever care about is the end of the current sprint. True story.
WTF, you say?! How can you say that a team should only care about the sprint commitment and not the deliverable date?? It’s not that we don’t care. It’s just that it doesn’t help anyone to focus too far into the future knowing that things will always change. A team can only push out so much in given period of time before things start to fall apart. If you’re going to do Scrum, then you have to accept that a team’s velocity won’t change much after it is established and they will work at about that speed, always, and project planning and prioritization needs to operate around that fact. That said, this highlights the fact that larger deadlines are someone else’s problem. What I mean by that is that you focus on grooming the backlog, and the team has a part in that. After that, it is a management problem OUTSIDE of the Scrum process to line up the priorities and play with projected delivery dates etc. It is their responsibility to realize when some deadlines cannot be met without additional resources based on the teams (or multiple teams) velocity. If you can accept that, then this gets much easier. Fail to accept that and you will fall into a cycle of denial, where you try to get clever with how things are split up and instead of delivering more things on time, you’ll really just have more things in-flight that may or may not ever get delivered, or they’ll be delivered in effed up states and you’ll spend even more time trying to get it straightened out, effectively taking far LONGER than it would have to just accept the truth of velocity. I think this is the biggest struggle I’ve had to deal with many times in the past — denial.
Micromanaging the time of engineers and using Scrum as a whip with which to beat them is the ANTI-Scrum. It accomplishes nothing other than pissing people off and it is a large portion of why people generally hate Scrum.
When Scrum is executed correctly and without the management stank on it, I actually like it. I like that:
Stories aren’t arbitrary. They are fully functional slices of functionality that add value to a product. They are written from an end-user point of view and they focus on solving a problem and providing value, not technical details. I used to hate hearing this over and over until it finally clicked how to make it work.
The team is forced to work together finish and deliver complete entire stories instead of being scattered in terms of “tasks” being doled out.
Teams are self-organizing instead of having managers tell them specifically what to work on on the day-to-day.
During the sprint, communication between team-members is an obvious must, but they’re supposed to be also interacting with the product owner. If the product owner isn’t easily accessible by the team, then the setup is wrong. I should literally be able to turn around and say “hey look at this, is that what you were thinking?”
At the end of a sprint, during ceremonies there is a demo of this functionality and everyone gets to feel accomplished on a short iteration (e.g. 2 weeks). People complain about the ceremonies being a waste of time, but they’re not (they’re actually extremely important) so long as they’re being implemented correctly. It’s supposed to be your short turnaround feedback session - one session for the stakeholders, one session for the devs. This is what keeps everyone on the same page for more of the time.
It establishes a pretty reliable cadence of delivery. Everyone knows what to expect and everyone knows what is expected of them.
To me, proper Scrum should feel like a small group of friends trying to bring to life an idea they had over lunch. If each sprint doesn’t feel like that, you’re probably not doing it right.
If you’re drowning in process like timekeeping and managing dependencies, then you’re probably not doing it right.
If it feels like a whip with which the team is beaten, then you are certainly not doing it right.
If you’re writing stories that are estimated for a single person to accomplish, then you’re not doing it right. A story is a story — the team will decide how it is worked and by whom.
If you find that you’re constantly writing stories with particular people in mind or if you’re trying to adjust the points based on how many people would work on it, then you’re not doing it right. This is tough to get your head around, but it is true. Points are effort/complexity, not collective punch cards.
If the result of a finished story can’t be used/tested by someone, then you’re not doing it (writing the story) right.
If you find yourself constantly splitting stories up to deal with dependencies between teams (e.g. there’s a front-end story and a back-end story) then you’re not doing it right. If you’re doing that, then your team isn’t cross-functional.
Extra *wrong* points if you’re splitting stories and then adding the effort estimates together. One deliverable is one deliverable. Splitting it into a 3 point frontend story and a 5 point backend story does NOT equal 8 points. In all reality, it is likely a single 5 point story. You’re probably thinking of two people working them, therefore you need to learn to parallelize. If it’s a single person, then it’s probably a single 8 point story or it’s simply too big for a single deliverable. If you’re thinking to yourself “well that sounds nice on paper but…” then you have some more learning to do.
If you’re not delivering the result of a sprint to QA, you’re not doing it right. The end of a sprint should produce testable deliverables, even if it’s not ready to deploy into production.
If you’re equating effort estimates (that Fibonacci pattern) to time spent on a story, then you’re not doing it right. If you’re tracking hours as an indicator of progress, you’re not doing it right.
If it feels like a compressed waterfall, then you’re not doing it right.
To be honest, if you’re doing just about any of the things that people are complaining about here on this thread (as being a reason they hate Scrum) then you’re not doing it right. Most shops aren’t doing it right. It’s not really Scrum that’s the problem. As per usual, it’s management that is the problem.
It can be challenging at times to write proper stories, and that’s on the Product Owner. For example, size/scope is always an issue, but discovering dependencies is probably even more complicated (do we incorporate it as part of the story, or is there a large technical effort that needs to be accomplished to lay out some infrastructure, for example). During these times, they should work with the team lead and anyone else that should have input on it. They should improve over time as the team equalizes.
At my company, we cut management completely (other than the scrum master and product owner of course) out of the Scrum process and it has been FANTASTIC. We brought it back to basics: what are we building and why, and what do we need to do in order to make it happen. To make sure management is still getting what they need, they have management meetings which do not involve the engineers. In those meetings, they can beat each other up over deadlines and projected dates etc. This also goes for team management. If there are weak links on the team, everyone already knows who they are. Dealing with them has nothing to do with Scrum. Those are management processes and you should deal with them separately of the Scrum process. When it comes to the Scrum process, the team is who manages the team, point blank.
“But my certified SCRUM coach said…” — listen, I’m going to be honest with you. Out of dozens of certified SCRUM coaches that I’ve worked with or interviewed, with their MBAs or PhDs etc. in project management or what have you, 9 out of 10 of them came from a strictly project management background and have only worked for the same company’s that keep screwing up SCRUM in ways we just talked about. Very few of them actually had any real experience developing software, let alone actually working on a SCRUM team. So personally, I’d say having a coach is probably better than not having a coach, but take their input with a grain of salt and remember the Agile Manifesto (if it ain’t Agile, then it can’t be Agile Scrum) and call them out on their BS when they start imposing their business speak on you. Ultimately, the business wins, but if you really want to mature to the most productive team you can be, you need to push back.
The philosophy we use as guide rails is basically just to allow engineers to focus on engineering, and that is the most important part."
https://www.quora.com/Do-programmers-really-like-Scrum,Parantap Samajdar,"Automation Architect, Pre-Sales consultant",2020,1.5K,"Scrum, like open workspaces or day long requirement gathering meetings, is one of those things that is never liked by anyone who actually needs to participate in it. Only people who likes it are (1) people who gets employment because of it, e.g. professional scrum master (whatever that means) or agile coaches (it does not mean anything - another free money role like diversity champion); or (2) People who needs the visual and perception of lot of work being done, without having to care about what actually is being done.
So business analysts, developers, testers hate scrums with a passion. But senior managers love them, because it creates a better perception when things are happening weekly or daily v/s quarterly. If the things that are happening is is not adding value, it is easy to blame the developers or testers. But if nothing is happening, the managers get the blame. So ..
The root cause of the problem with scrum or agile in general is somewhat similar to communism. The core idea is too beautiful for any sane person to reject. Every single implementation that has happened so far are so horrible that no sane person can accept it.
Agile manifesto was written to address challenges with commercial end user facing applications which could not possibly support the old extremely bureaucratic and lengthy development process. It works perfectly for the type of applications that it was designed to deliver. However, when morons took over the keyword (much like AI more recently), they twisted the concept into something that even the original authors could not recognize.
There is no way to escape Dilbert when talking about Scrum / Agile. They are so true to the real life that we sometimes don’t know if we are laughing or crying."
https://www.quora.com/Do-programmers-really-like-Scrum,Alexandra Balean,Software Developer (2014–present),2019,43,"Just like it is sometimes said about communism: it depends on implementation. No, I’m joking. Scrum is awful, for me at least. I had witnessed only 2 implementations of scrum in my professional life, and both turned out to be highly bureaucratic and reduced productivity by wasting a lot of the developers’ time, and by inhibiting their creativity and autonomy. Some negative aspects include, and are not limited to:
1. It is advertised to empower business people - faster, more regular deliveries, they get to pick (and change at any moment) what gets worked on, they get estimates, therefore they can make more informed decisions, and also have a tracking system where they can see anyone’s progress on each item. But in practice, the non-advertised side - technical people are put into surveillance mode, forced to keep statuses on task tracking systems like Jira or TFS. They are asked to justify if estimations are too high or if a task took more than expected. It can even come out as an insult when a non-technical person minimizes the complexity of a technical task by saying something like “but it’s just a text, it’s not that hard, is it?” So as an end result, yes. It empowered managers and business people, but at the cost of more stress rolled down to the technical team.
2. Transparency gets even lower. Exhausted by the multitude of meetings that come into the middle of their creative flow, or by numerous changes in priorities, developers can get distracted, and forget to change statuses of tickets, or end up needing more time to finish tasks. One of the natural answers to exhaustion and stress is procrastination. By the other side, things seem to get worse too. Product owners (PO) have the ability to change developer’s work item by item, person by person, with no need to justify their decision. It gets frustrating if you’re a person who likes to finish what you started. Also, assuming you accurately update the task board, there’s no task board for POs and business people for developers to see. So how can transparency work if it’s just on one-side? If only developers are asked to keep a visible track of the work using task boards, and often put to repeat what’s on the task board in meetings, it seems to me that the underlying message is that developers are not trustworthy.
3. Meetings are useless - developers are not made to just sit and listen business jibber-jabber for hours (I’d like to think they were restless kids in school, and always hated to just sit, listen and turn off thinking). Even essential information could be lost in the ocean of irrelevant stuff people talk about in meetings, and let’s not even count the boredom that sometimes make us tune out. So in the end, for the essential information people will still end up bothering each other with 1 on 1 conversations, asking for topics covered in meetings to be repeated. Which makes the meeting time wasting, in my opinion. I’d rather focus on short, insightful dialogues between individuals (when needed) than going to collective, mandatory meetings and swim through irrelevant info.
4. Any longer, complex task will be abandoned for ever. POs and managers are afraid of things that take very long to do or are estimated too high in “story points” (another irrelevant unit of measure for work but which sounds fancy to use in meetings). So developers would end up working on bite-size changes, with very little impact on the product and also very little impact on their technical expertise. Everything in scrum has to be small, low risk, low work hours, but high impact. With that in consideration, most of the work will be based on the visual side of the software product (changing button colors, adding color themes), or on the commercial side of the product - changes to price schemes, discounts, promotions etc. New, interesting functionalities that need research and innovation will be always “not a priority”. Even though they could help developers assume ownership of the code, and help them be more engaged. Simply put - if it takes more than 1 sprint, it will never be done.
5. It glorifies an emergency state. The vocabulary in scrum teams is often composed of bits like: “top priority”, “urgent”, “focus”, “before end of sprint”, “ X days until end of sprint” etc. You can believe these words for a while, until you remember that the past sprint was also urgent, the same with second past sprint, etc. If there’s an emergency every day, you will at some time conclude that none of them is an emergency. If there’s hard to see any reward or impact for finishing some menial tasks in a fixed time box, what happens?. If a company started non-scrum and adopted scrum at some point, will they fire people for not completing sprints in time? Highly doubt it. So no reward, no risk, no nothing. Just some extra pressure and stress on developers. It’s easy to forget that sprints are just some abstract “boxes” people put over their time. What was ok to be finished in 3 weeks before is now not allowed, because this means more than 1 sprint.
6. If you’ll state an anti-scrum opinion, you could be served with an argument of flexibility. These will be anecdotal, but thought they’re worth sharing. When in a discussion with business people I said how a certain practice violates scrum and also burdens my work, I was told something like “Ow, but scrum is flexible, WE need to adapt it to our needs, we’re not following it by heart”. Sure, everybody wants to be special. But only if they get all the rewards and the necessary effort for them goes to someone else. Second argument is that YOU need to be more flexible about new practices. (subtext - even annoying, time wasting ones, that make you feel more disposable than before). Flexibility is a dangerous word that can hide a lot of malicious practices.
I would not accept any scrum working environment any more. I know that people should stay generally optimistic about new things and changes, but not everything new is automatically good. You can consider these ideas if it comes a time when your company proposes this process. Try to be prepared with arguments, and research more on the internet about how different people saw scrum implementations and what possible outcomes they had."
https://www.quora.com/Do-programmers-really-like-Scrum,José Santana,Studied Computer Science,2019,14,"I am a programmer, and I don’t like scrum at all…instead of being “agile”, scrum turned into a whole lot of formalistic “ceremonies”"
https://www.quora.com/Do-programmers-really-like-Scrum,Andrew Arnott,Been playing in metal bands for over 30 years now,2022,17,"It does not matter one little bit whether you call the person breathing down your neck a scrum master, project manager, product owner, or Second Lord of the Admiralty.
If you are doing scrum, you are more than likely being subjected to a culture of micromanagement that prioritises short cuts and sloppy coding in order to achieve short term goals, because the burn down chart is far more important than the actual quality, robustness and maintainability of the product.
On top of this, there are all the pointless, pointless meetings that leave you with even less time to try to deliver on the totally unrealistic promises the sales team - without consulting anyone on the technical side - made to the customer.
And you can bleat all you want that “this isn’t scrum, this isn’t scrum being done properly, no true Scotsman, etc., etc.”. In the real world, this is scrum. Every. Single. Time."
https://www.quora.com/Do-programmers-really-like-Scrum,Stephen Burns,Developing product for 25+ years,2019,17,"I’m ambivalent when Scrum is done tolerably well. I’ve yet to experience it being done very well. In practice, it’s typically a little better than waterfall. In theory it should be a lot better.
Some issues with Scrum:
it can be an enabler for micro-management. Everything the team is working on has to be visible on the board. Really? This can act as a brake on some pro-active behaviors. Never mind logging time against stories etc. so we can claim those R&D tax offsets
Ceremonies? c’mon are we in a frickin’ cult?
does the whole team have to attend every ceremony? Really?
it relies on open and honest feedback (e.g. retrospectives); and most people aren’t great at this. Either we’re unwilling to be honest or we’re crap at giving constructive feedback. The sad thing is most of us crave honest feedback.
it’s a bit of a license for mediocrity - some creativity goes into excuses rather than the software
can introduces waste by splitting stories down too small.
too many refuctorings as work is split across multiple mini-waterfalls
it doesn’t seem to scale. It can work quite well for a team. Then you either allow teams to drive their own culture (good) or you get some clown who thinks that there should be uniformity across teams
scrum masters can be ex project managers. The best scrum teams I’ve worked on had no scrum masters. They had POs who wore the scrum master hat
BS about Cynefin and how scrum is the true agile framework for software cos it’s so complex. Typically most stories are straight-forward CRUD and lots of agile approaches will work.
like most methodologies Scrum brings everyone down to a nice level of mediocrity that leads to better perceived predictability
the end product doesn’t seem any better than if we’d used a different framework/methodology
On the positive side
the daily scrum where we sync and have those effective speed-dating post stand-up conversations. But really, that’s just an admission that we’re crap at communicating.
Retrospectives are awesome when they lead to effective actions. Sometimes they end up leaning towards therapy. Additionally, we should be agile and do them in timely fashion; not every second Tuesday at 2 PM.
Exposing problems early. We’re encouraged to ask for help and/or flag blockers as early as possible. This is the redeeming quality of the stand-up
experimenting with new technologies is easier and less risky. Doesn’t work out? Just replace it with an alternative in the next sprint or two
it enables us to react quickly to changing conditions; it does not as some people think allow us to get shit done quicker
Waterfall sucked - there was no Internet to make live updates back in the day - but one of the good points was you could easily steal a day or two to clean up some shit that was bugging the hell out of you and benefited your colleagues. In Scrum everything should be justified, in particular to the PO and scrum/iteration master - we can only ask for forgiveness so often.
Agile, as it was originally proposed, on the other hand. Love it. This was all about getting feedback as early as possible - from your customers, from your peers, from your tests - so you could be the best you for your customer.
TL;DR
Arts and trades have a time-worn master-apprentice practice - we wandered on to that path 20 or more years ago with practices like pair programming that brought us all up a level as we paired up with each of our colleagues. Now we have scrum masters.
Nothing compares to a well gelled team of collaborative competent engineers. Certainly not Scrum."
https://www.quora.com/Do-programmers-really-like-Scrum,James Barton,"50 years of Software Development, IT Architecture, and R&D.",2019,33,"There are many software tools and standard practices that facilitate rapid development. If you put a competent technically-adept project manager or tech-lead in charge of the team, and if they have experience with similar projects, they will be able to deliver optimumly, in terms of both time and quality. They may or may not use an approach such as Scrum, but it is best to let the person with expertise select the paradigm that has worked for them in such cases.
Scrum is most useful when there are no experienced leaders on the team so you need to impose some kind of well-defined methodology. Otherwise it's like herding cats, as they say. Scrum is also useful if you are technically challenged and don't have confidence in your ability to identify and hire the right person to lead the team.
Scrum is more about exposing progress to those outside the team and letting the business feel like they're in control than it is about expediting delivery. I'm fact, if anything, it impedes rapid development.
Forty years ago we were doing agile development. It just wasn't called that. We had experienced and competent people leading the teams and they understood what worked and what didn't. So your methodology doesn't need a “name” in order to be effective.
TL;DR;
As a programmer with experience in both management and software architecture, I never advocate the use of Scrum. I would much rather hire somebody with appropriate experience to lead the team than to impose a bureaucratic Scrum Master on them any day. It's faster, better, and cheaper in the long run. And the programmers will be happier as well."
https://www.quora.com/Do-programmers-really-like-Scrum,James H. Kelly,Former Principal Software Developer at Spokeo (2019–2021),2019,20,"I’m sure some do, but in my experience, most don’t, especially as they get more senior.
Most programmers like to program. They want to know what needs to be done, that their work is contributing to the overall project and that no one else is doing the same thing, but after that they want to be left alone to program. Any group decisions are generally best made in chat (Slack) or in short, small meetings with only the people who need to be involved.
What they don’t like are useless meetings with Uno cards trying to predict the effort needed to do tasks full of unknows. What they don’t like is trying to cram features into arbitrary timeframes like sprints. And they all know that trying to gauge “velocity” based on past work is useless because every problem is different."
https://www.quora.com/Do-programmers-really-like-Scrum,Jan Fischbach,"Consultant for More Agility at Common Sense Team GmbH,Scrum Events (HLSC GmbH)",2019,6,"Yes and no. Good Scrum is fast easy and fun (Quote of Jeff Sutherland). Programmers love good Scrum.
I saw companies where Scrum was used to force people working faster and producing more low quality stuff. Nobody likes that. Scrum makes problems in a company transparent. If there is no one who solves problems nothing happens. Nobody likes that."
https://www.quora.com/Do-programmers-really-like-Scrum,Eric Litovsky,Principal Software Engineer at Grey Swan Inc (2014–present),2019,19,"Let’s try a thought experiment:
Imagine a band like TOOL, Steely Dan, Pink Floyd, or Frank Zappa recording an album under a scrum master? Walk yourself through that exercise in your mind. Imagine a 15 minute standup every morning in the studio where each member has to report on progress, present the charts they notated the previous day, quantify soundbooth hours, time on tape, edits committed.
Each song on the album is broken down into a user story. Each part of the song, it’s own task, each member of the band has to provide estimates in hours or story points for how long each task would take to accomplish.
Now let’s imagine a recording session where a lead guitarist comes up with an awesome new guitar solo that leads into a new motif but needs 16 bars of the song to fully express it instead of the assigned 12 bars.
Let’s end this absurdity here. Can a band record an album using scrum? Yes.
Will that album be total shit? Also yes.
But do you know who would totally love this approach? It is literally a Label executives wet dream. With the power of scrum, the recording industry could concisely budget each and every album, accurately compute ROI, and best of all, project that ROI into future projects to best mitigate potential risk and express revenue in big pretty graphs they can present as powerpoint slides to their investors and shareholders.
This is the raw, naked truth of what SCRUM is all about. It’s a way for a very select few to feel (and yes it’s all about feels) better about a project."
https://www.quora.com/Do-programmers-really-like-Scrum,Clancy Merrick,"B. Sc (Honours) in Computer Science, University of Sydney",2019,91,"Well, I can only speak for myself as a programmer (or rather a Software Developer) who has (tried) to work in at least 2 Scrum teams.
No, I don’t really like Scrum.
I really detest Scrum.
I observed so many flaws in the Scrum process/manifesto that it was literally painful.
Some, but not all, were:
The lie that Scrum would enable either faster delivery, more transparency or a better end product. The reality was that it seriously impeded delivery speed, encouraged less transparency and almost never produced any product at all (both projects were “cancelled” by executives).
The extremist fundamentalist attitudes and beliefs of the so-called Scrum Master. I think that word “Master” messed with their headspace. They would insist that if we weren’t following the Scrum manifesto to the letter with all the pointless (a deliberate pun) rituals and hours of time wasted in meetings, then we weren’t doing Scrum at all. That’s just so black and white and unworkable.
Forcing top shelf developers (especially those who worked on the visible parts of the product such as the user interface) to have to expose/present half-finished or even just-started work to the business at the end of every sprint. The number of times that some “genius” in the business has pointed-out to me such things as “Hey, that button doesn’t look right or it’s not in the proper position” etc. due exclusively to the interface being presented in an incomplete state & the ignorance of said genius is uncountable but always extremely annoying.
The estimation process where I was regularly able to prove that the team were not providing estimates based on “points” but rather estimates based on “hours”, so much so that it motivated the Scrum Master to conjure up an equation that converted points into hours that then became the basis of all estimation (and was just as useless and inaccurate).
The rituals themselves were the main impediment to faster delivery. If the developers could have avoided all the usually chaotic “meetings” and focused their time on cutting code then more code would have been cut and the products would have had a much better chance of being delivered on time (if at all).
My favourite - the “retro”. A classic case of rinse and repeat. I cannot recall any retro which was even vaguely different from all the prior retros, was not a complete waste of everyone’s time or which actually improved anything. They would always quickly degenerate into rampant blamestorming.
The concept of agile development is mostly better than the concept of waterfall development but even then, only within a limited scope of product types.
The entire concept of agile development evolved out of methodologies used in the manufacturing sector where they worked very well, mainly because the product didn’t change. It was just manufactured over and over again.
For agile methodologies to be applied to a dynamic product (like software) rather than a static product (like a doll, spanner, screwdriver or even a box of candy) then it’s much, much better to evaluate the best practices in the multiudes of rigid lock-in agile methodologies and cherry-pick a combination of those that are most applicable to each individual software project.
Sure, this will cause Scrum fundamentalists (and and fundamentalists of any other formal agile methodology) to throw hissy fits and claim the intellectual high-ground but I personally suggest that you ignore such fits and tantrums and get on with what you were hired to do and what you do best."
https://www.quora.com/Do-programmers-really-like-Scrum,Gandalf Hudlow,Software Developer and Manager,2020,3,"Scrum works for about 15% of software endeavors, yet it is applied like the proverbial hammer to everything that might have seen a nail once. Programmers are smart people and can easily recognize when they are being asked to do dumb things that are a waste of time. So no, they don't like scrum about 85% of the time.
The #1 problem in scrum is the non-customer product owner anti-pattern. Scrum works well when there is a savvy customer who will engage and learn what good looks like. The reason this works well is that team has coupled itself to a reliable source of truth so they can iterate into the right thing that the customer really needs and wants. Most traditional companies are resistant to changing their ways to iterate with customers, and easily fall into the smart trap of standing up a silo to handle Ideation, an Idea Silo if you will. In my experience Idea Silo members behave like any other silo member and focus on pleasing their boss, which is usually not helpful for creating industry leading software solutions."
https://www.quora.com/Do-programmers-really-like-Scrum,Alan Mellor,Used Agile methods since 2005,2019,404,"I’m not a fan, I must say.
I loved the original agile manifesto.
To me, that directly addressed the problems of uncertain, unpredictable development by attacking its root causes. Extreme Programming (XP) seemed to make a lot of sense.
These were ideas devised by programmers for programmers to help them program.
And then the project managers came along.
Scrum, with its planned sprints, seems to me to simply discard the agile manifesto. It splits a project into two week waterfalls and hijacks the term ‘agile’.
There is nothing in the agile manifesto that says we can make software more predictable. It’s all about handling and making transparent the unknowns that we face during every bit of the development process: requirement details, libraries, legacy cruft and people. Instead of pretending we can predict those before they hit us.
But by all the same tokens, your project manager is going to love Scrum. It’s a way to rein in those pesky agile programmers who make it up as we go along. On paper.
I’ve been part of successful Scrum projects. But the agile manifesto/XP way of delivering software has always felt a much better, more productive fit."
https://www.quora.com/Do-programmers-really-like-Scrum,Joe Termine,Principal Software Architect at A Fintech Firm,2020,28,"As a programmer, I generally hate all meetings, because meetings are dull and ineffective. There are exceptions, but most meetings could be skipped if someone just wrote a clear memo or the two people in conflict talked to each other and not the whole universe. Scrum meetings in particular are the worst kinds of meetings because they are “meetings by tradition” instead of “meetings out of need.” They are like the dreaded weekly staff meeting where everyone goes through the motions of a meeting to appease “the boss” but don’t get any real value.
Of course nearly every SCRUM practitioner will disagree. call me a heretic and say prescripted bland things like “only if SCRUM is done improperly” or “it was that way with waterfall but not now.” Same with the Six Sigma worshippers, and they double down on this insanity by giving their useless meetings names that all seem to have cryptic abbreviations — “the FMEA Process Review Meeting.” What it comes down to is that folks who don’t have anything valuable to do need to have meetings to create work for others so that they can show value."
https://www.quora.com/Do-programmers-really-like-Scrum,Shailendra Malik,Senior Executive at Banking,2020,5,"Wow, this is a loaded question, so the answer will also be loaded with riders. I request you read in full.
One word answer to this is a resounding NO. But it is not because of the poor methodology, but because of shoddy implementation of the concept in the real world.
Please bear in mind that Agile Manifesto was formed with the inputs given by the top practitioners in the tech space back in 2001. The research on the topic started way back in 1994 and the first research paper on it was published in 1995 by Jeff Sutherland and Ken Schwaber.
The whole reason for moving in this direction was to cut the middleman from the overall process and avoid the requirements getting lost in the translation where multiple layers of managers or analysts twist the actual requirements and distort the overall outcome of the project which used to get visible only after a significant time of 6–12 months due to the waterfall development cycle.
This was done by exposing the developers directly to the person who needs the feature or product to be delivered, which saves time in requirement gathering and avoids the chances of miscommunication in requirements.
Coming back to why people hate it now, is simply the fact that more and more roles have been created again in the past 20 years in Agile to create that middleman layer by many companies trying to build their flavor of Agile and many so-called Agile coaches and Agile consulting companies twisting the whole essence of Agile.
Even the basic roles of Product Owner got transformed into 5 types of Product owners (Read- Types of Scrum Product Owners), purely because of many times senior business stakeholders who want the feature to be built see Product Owner as a low-level role and assign a junior resource to perform the role, creating the layer of middleman inadvertently.
I hope this sheds some light on the current state of affairs in the Agile setups in various organizations."
https://www.quora.com/Do-programmers-really-like-Scrum,Behdad Forghani,Master Software Engineer,2020,12,"Very few software engineers that I know like Agile software development.
Agile methodology is OK for tasks that are very well defined and are narrow in scope.
In my opinion Agile tends to focus people on the very short term and stifles creativity and innovation that do not align with the artificial Sprint boundaries, the same way stock prices focus companies on short term returns at the expense of long term strategies and goals.
Another problem with implementation of Agile methodology that I have often seen is the irrelevant metrics that Agile tools produce. Most measurements on performance of the team are based on points burnt and timeliness and not the value produced. I have seen many teams that are champions of the most points burnt without delivering anything new or of value.
You can hope that in the long run teams that manage to produce value get rewarded. But, often, the Agile results in dead on arrival software because the focus was improving metrics like burning points and performing the rituals of scrum meetings."
https://www.quora.com/Do-programmers-really-like-Scrum,Wouter Van Ooijen,Head Lecturer Computer Engineering,2021,2,"No, programmers generaly like Agile (which means roughly remove all unnessary protocol and give the programmers the freedom they need to be productive). Scrum as I have seen it in practice is anti-Agile: it is a fixed set of rules, which makes the (good? bad?) old waterfall method seem like total anargy."
https://www.quora.com/Do-programmers-really-like-Scrum,Petri Heiramo,Certified Scrum Trainer at Scrum Alliance (2008–present),2019,3,"The sentiment here is, unfortunately, pretty correct. It’s a statistical average. It also represents the statistical average of well-done Scrum vs. poorly done Scrum.
When done right, it does give trust and authority to the programmers. It increases motivation and effectiveness. It does require that the team learns new skills (which may be uncomfortable for some people), but once those skills become more natural, they further increase the team’s ability. In these teams, the ScrumMaster is a liked person and really does help the team improve and get things done better & smarter. The ScrumMaster would also help the Team to apply some other framework, like Kanban, when that is appropriate.
When not done right, it is often misery for the Team. Scrum becomes an excuse for micromanagement or dogmatic adherence to process (without any real justification for why). ScrumMaster is the new project manager, though a bad one. We might say, this is ”Scrum on traditional mindset”. Unfortunately, this is still more common :(.
There is a middle ground. In these, the Scrum is really just waterfall with two week planning cycle. Yes, there are dailies, but they are mostly empty rituals. The worst of bad Scrum is avoided, but none of the real benefits are gained, either. Sometimes, over time, people learn and improve. Sometimes don’t. Many of the people in my trainings come from these teams, and I get a lot of comments like ”we’re doing Scrum, but now I see we’re not”.
I feel we are in a transition. More and more people (and orgs) become excited (or desperate) to apply Agile, but most still lack skills and insight. Yet, more and more people and orgs also do get it. In my 13 years of Agile, I have seen a massive change, and the change will continue."
https://www.quora.com/Do-programmers-really-like-Scrum,Tim Broberg,Software developer with 30+ years experience.,2020,2,"Like communism, true scrum has never been tried.
Everybody seems to do some bastardized process they call scrum, which they hate.
When I was first introduced to the concept, we were pretty gung ho about it. People actually tried to size tasks properly, groom backlog, break stories into tasks, and track the progress of stories toward completion within the sprint. The manager always had a burndown chart on his wall.
This took some getting used to, and consumed significant overhead, but there were a few things I really liked:
Code reviews
There was a functional, cohesive product all along, not a bunch of pieces sailing toward integration that may or may not fit.
Testing kept up with development.
I knew exactly how much work I had to finish on any given day to finish on time.
In the end, increasing demands for repeated rounds of code review followed by documentation and test from a separate test group made it nearly impossible to get 1 point of development work done in a sprint. The 8 day payload of the sprint was just too short."
https://www.quora.com/Do-programmers-really-like-Scrum,Pete Oliver-Krueger,"Developer, architect, manager since 1995; agile since 2008",2019,7,"If I could clarify the question first? Are you asking if programers specifically like Scrum? Or Agile in general?
### The short answer
If specifically about Scrum, I myself did when I was developer, though I leaned more towards Kanban in actual practices. I liked looking forward for a few weeks, breaking things down into short term chunks, regular integration, and looking at our process and making changes on a regular basis.
I coach a lot of teams, and have found the same pattern holds up. Developers tend to lean towards Kanban, with regular planning and retro opportunities. Similar to other posters, I find that Scrum specifically gets a stronger following from managers.
I think this is for good reason. This is a very simplistic summary… but Scrum has more techniques for looking ahead into the future months, something managers are tasked with doing. Kanban, again in very simplistic terms, focuses more on what to do in the current iteration, the main focus of developers. Usually I find that the better teams merge the two, to help everybody, with a both short-term and long-term focus.
### The Long answer
If you’re asking about Agile in general? (Most people initially get taught that Agile is Scrum, Scrum is Agile, and so I often get the question “Do developers like Scrum?” when they really are asking, “Do developers like Agile?”)
Here the answer is also yes, with the caveat that only if they’ve been taught Real Agile. As one of the other posters mentioned, he really liked working according to the Agile Manifesto principles, but hates working in his company’s Scrum process. But if his company’s Scrum process doesn’t follow the Agile Manifesto, it’s not really agile! And it’s not doing Scrum either.
I find the brain science behind this fascinating. There’s a biological reason for this split. Our brains pattern match 95% of the time. When companies take a class without followup coaching, they see each technique and say, “I know what that is! See, I knew we should have been doing that! We’re doing that starting tomorrow!” or something like that. Sometimes they’re right, but more often the agile version of that technique is significantly different than the non-agile version.
### Examples
This is why most organizations that take an agile class start off by just rearranging their existing practices to “look” more agile without actually being agile. I spend the vast majority of my time fixing fake agile.
Planning Poker - Most developers hate Planning Poker …until I teach them the rules. Then by the end of the next planning session they wouldn’t go into a new sprint without it. Planning Poker is not an estimating technique. You don’t do it to determine how long it will take to do something. That’s old world project planning. The rules of Planning Poker are critical. If you don’t follow the rules, you will not understand why. Everybody must play. You must describe the story and answer all unanswered questions first. If the answer isn’t in the room, you have to put that story aside until you can get an answer. If you don’t you’re wasting everybody’s time. If no unknowns, then everybody (who actually does the work) must pull a card. Estimate the entire work, research, development, testing, and sign off. If you only estimate your time, you’re wasting time. Then you must pull your card WithOUT showing it to anybody. If you show your cards, you’re wasting time again. Count down “3, 2, 1” and show all cards at once. If they’re not the same, discuss why. No averages. No majorities. No “executive decisions”. If you don’t discuss, you’re wasting everybody’s time.
Planning Poker is actually all about the conversations. The discussions and debates are designed to surface assumptions that get us into trouble halfway through the sprint. We all make assumptions, but we don’t all make the same assumptions. One person assumes it will be easy to test. When they find out it won’t be, they know to deliver it to the testers early in the sprint, not on the last day. Another person assumes we have data, or a database, and finds out that they’re right or wrong. Another assumes a larger scope and finds out that they only have to do half as much work as they would have done before asking the question. My favorite short cut question is starting at the extremes and asking, “[3’s] are you willing to come up? If not, why not?” Our ""[13’s] are you willing come down? If not, why not?” This exposes the right assumptions to challenge.
And some assumptions are fantastic. I had one 3 vote that refused to come up. She had trouble saying why, but during debate the team realized that they had already built the story in question 6 months ago as part of another project, and never deployed it, saving the team 2 months of unnecessary rework.
### Summary
This is why developers think they hate Scrum, Agile, or planning poker. Because they weren’t actually doing Scrum, Agile, or Planning Poker. Scrum and Agile (and planning poker) were created by developers for developers. They really work, significantly better, and make life so much easier and more fulfilling. And the standard Agile practices were tested over multiple teams. If they're annoying to you and your team, honestly, you’re probably doing them wrong. Go ahead and stop doing what you’re doing, and reach out to an agile coach that you, or someone you know, trusts, and ask them to explain what’s wrong, what is making what you’re doing annoying. Or try an Agile conference."
https://www.quora.com/Do-programmers-really-like-Scrum,Petri Heiramo,Certified Scrum Trainer at Scrum Alliance (2008–present),2020,7,"When done right, it’s a delightful system. When abused, people can create horrible soul-crunching workplaces."
https://www.quora.com/Do-programmers-really-like-Scrum,Alex Skorulis,Works at Thomson Reuters (company),2017,14,"I’ve worked with 2 kinds of scrum masters. Those that were filling the role and those where scrum master was the role.
For those filling in they never referred to themselves as a scrum master. They were just the person who ran the meetings. They focused on being a facilitator to get work done and tried to minimise the time spent doing “scrum”.
Those who were professional scrum masters I’ve always had problems with. Somehow they were always the most difficult person on the team. Rather than trying to minimise overhead, “the process” becomes the focus. “The process” has been derived through numerous case studies and is the solution to all problems. If the team doesn’t understand or like “the process” then meeting as required to explain how and why it works. These scrum masters end up becoming an impediment as other team members jump through the hoops that they create."
https://www.quora.com/Do-programmers-really-like-Scrum,Christopher F Clark,"Yacc++ author, Intel chip designer, ex-Googler",2019,8,"I am a software developer and I don’t hate scrum itself. I do hate the careless TTM (time-to-market) pressures that force it upon us, but scrum is one solution to that problem. It is not a universal solution, not a panacea. However, it does attempt to solve the problem by breaking things down into small measurable tasks, checking on their status regularly, keeping people unblocked, and a host of other things, which should mostly be viewed as positive.
So, yes, TTM itself is a problem. It is one forced upon us by a world where speed matters more than correctness. But, scrum is an attempt at a solution (or at least a mitigation) of that problem.
So, it is not scrum I hate."
https://www.quora.com/Do-programmers-really-like-Scrum,Tim Cowley,Former Senior Software Engineer at Nintendo (company) (2015–2017),2020,3,"Everyone at my workplace loves it. Cooperating instead of backstabbing, sharing instead of hoarding information, and we don’t have to try to cost things years in advance based on ludicrously incomplete models. It’s the way of the future."
https://www.quora.com/Do-programmers-really-like-Scrum,Marcel Britsch,Consultant Business Analyst at Equal Experts (2016–present),2024-02,1,"So as you can see from the other answers, this is a heated topic.
I agree that meetings (scrum or not) are often run badly.
I disagree with the fact, as some other - immature professionals - point out below that all meetings are useless. Good sizeable work is done through collaboration, that requires meetings.
As to Scrum itself, I think
standups are useful IF they are there to inform and unblock the team (not as progress tracking for only the Scrum Masters benefit) - which means they must be and snappy short. Also we never resolve issues IN the standup
Retrospectives are great learning opportunities, but they need to be short and relevant. So resulting actions need to be actioned, and they often could be shorter than they are and maybe even less frequent
Story kick offs I think are useful to make sure we understand and are ready. BUT they only work if the prep has done
Story refinement and planning. Now these are the tricky ones. Planning can be good if you have a mature team and well prepared stories, so that this becomes a very quick exercise of reminding and finally agreeing of what will be worked on next. If this becomes longer than an hour (max!) then the prep work hasn’t been done.
Refinement is similar. This is the one I think is generally done wrong by flushing out story details with the entire team. You really shouldn’t be doing that. Instead work with a smaller group, maybe just pair. Where relevant pull in the team to keep them aligned and informed. BUT NEVER write all ACs as a team."
https://www.quora.com/Do-programmers-really-like-Scrum,Aleksandar Atanasov,"Master of Science in Computer Science, Karlsruhe University of Applied Sciences (Graduated 2017)",N/A,3,"Here is my experience with SCRUM. My hope is that people will view it as a cautionary tale and will try to avoid the mistakes I have observed in multiple companies that I have worked at and seen the failure of SCRUM and agile development all together.
First of all there is a difference between the two terms. If Agile is a class, SCRUM is the object that instantiates that class, that is agile development is a philosophy, while SCRUM is the means to enforce that philosophy.
I worked in three companies in a span of several years. Quit all of them due to being extremely dissatisfied with how things were managed. Most if not even all of the time the introduction of new workflows (SCRUM or otherwise) comes outside of the development department and not from the developers themselves. Usually it comes as a suggestion from project management. Why? Well, it’s complicated.
It all starts when a sales person, who gets big bonuses from finishing a sale, goes to a client. Without knowing what actually is possible (or caring, for that matter), they promise the client everything. The client is happy. While more experienced folks will know that there is always quite a bit of snake oil marketing going on, many are more than willing to sign a contract that promises them the stars since 1)it looks great in front of their boss and 2)a contract is legally binding, hence the responsibility is ultimately shifted towards the legal team if something goes wrong.
The sales person and the project manager then sit together and start checking what can be done in the given time frame and budget. Most of the time this is the first place where huge discrepancies are observed but not fixed.
The project manager than goes to the head of the devs and tells them they need to get to work. In the end “something” is shipped to the customer and using various techniques of deception, best case the company, that provided the service/product, gets away with most of the lies they sold to the client. This cycle repeats over and over and gets worse, since the more you manage to barely scrape by, the heavier the push from the top gets. After all if you managed to get the job done 99 times, why not do the same 100 times?
At some point this workflow implodes. People start being demotivated, burned out, getting sick, friction among the dev team rapidly increases and ultimately people pack their stuff and find a new job. The less people you have, the less human resources you have to actually do anything beyond selling and managing projects. This high turnover increases the strain on the rest of the developers. Deadlines start to fail, projects start to crumble.
The project manager sees that something is going wrong. They absolutely have to do something otherwise the deadlines will not be met and they will get into a lot of trouble (mind you, the sales folks seems to be immune to any critique and can continue selling snake oil for quite a while before someone points the finger at them). So they talk to their supervisor and say they need to check how to improve things. Funny enough, they got contacted on numerous occasions by this consulting company that sells training and does workshops in SCRUM, promising to improved the output by a lot. How much they cannot say since specifics are legally binding. ;)
The project manager asks for funding from their supervisor, who gladly coughs up a few thousand USD since it appears to be a good investment. The consulting company that consists of people, who benefit from your company introducing SCRUM and employing them to consult you during the transition, then fill the manager’s head with a different type of snake oil. One that tells them that all of their problems will go away if they use SCRUM and that SCRUM ensures a tight, highly flexible and observable workflow that would make their job in controlling the devs better and will also make the devs happier.
The project manager comes back and immediately starts probing and pushing SCRUM down everyone’s throats. The other managers rapidly jump onto the SCRUM-hypetrain since they are also struggling. Of course no one asks the developers if this would fit the team at all. On top of that the migration period is literally nonexistent. You wake up and all of a sudden you just have to work with SCRUM. Why? Because ongoing projects that are already failing cannot wait for you to get into SCRUM, you just have to employ it because, if anything fails, it’s you that failed and not the methodology.
SCRUM requires discipline, clear vision of your goals, good work ethics and well trained team that endorses it. It cannot fix mismanagement, it cannot miraculously create proper specs out of thin air and you can definitely not push it down a dev’s throat if they see it as something that will 1)benefit you as a project manager but 2)hinder their current workflow."
https://www.quora.com/Do-programmers-really-like-Scrum,Nishant,Passionate coder,2017,9,"I have been a part of numerous projects practicing scrum methodology.
As a software developer is is obvious that you want to do your job, i.e. to code. A few times you want to discuss about requirements with the business analyst or testing steps with the QA (quality assurance team). But apart from that you just want to code.
I rely on my scrum master to make that happen. In daily stand-ups he/she makes sure that they get over in time and we don’t deviate from the points. He/she constantly reminds the team of the progress in the sprint and takes necessary action i.e. to migrate items to next sprint if it does not look like they are going to get over in time.
But most importantly I need him/her to shield the team from unplanned work from Product owners or support tasks, unless they are a part of the sprint. They need to manage the expectations of others that if we add something in the sprint, we need to take something out.
But having said all that …. if you work in a disciplined like minded team, you don’t need a Scrum Master."
https://www.quora.com/Do-programmers-really-like-Scrum,Harriet Louis,Studied Master of Business Administration Degrees,2017,1,"I work in software development - methodologies can be implemented in various industries, so this is relevant to mention, as my answer will centre around software development.
I also assume that the OP is familiar with the literature about Scrum, and don’t need us to cover that.
Our team has been practicing Scrum for a couple of years now. We were all trained to use Scrum by a professional coach, and I was impressed that Scrum addressed many of the problems I could identify during my years developing. At the time of adoption our team was not really implementing any of the traditional Waterfall methodologies, and not really Agile either. It was just some random processes we’ve followed and somehow it worked to some degree, taken from years of experience, somewhat of a hybrid approach.
Our team is relatively small, about 10 people, and we’ve all been working together for more than +/- 7 years.
What Agile did for us? It gave us as developers more of a voice in the direction we take as a team. Many of the bad practices made by individuals who find themselves in leading roles are much more visible. In my case we have some established products we maintain and make enhancements to. Requirement elicitation was always a problem, and also autonomous decision making by the powers that be. Within the team, we often had silos of people “specialising” in a certain areas of development.
Agile really exposed these problems, and gave us as developers the power to voice our collective concerns. If the majority is unhappy about the same problem being caused by a minority, surely there is a problem and they need to be listened to.
However Agile does not provide the solutions to the problem, if anything, the fact that Agile processes are so loosely defined, makes it easier for some to bullshit their way through project execution, hiding their incompetencies and lack of structured approach to planning and development. Also, if people want to work in silos, nothing is going to stop them, least of all a methodology. They will just find a clever way of doing it within that framework.
Our daily scrum meetings have become more of a report back to the manager, than a constructive meeting to solve immediate problems. In the hands of a micro-manager, scrum and its continuous focus on regular feedback, can become an effective way to incriminate and point fingers.
The loosely defined processes can be easily manipulated for scope creep, and changes too late in the cycle. Requirement gathering can become a joke, with requirements such as “make it work”, which carries no details for a developer to work from, and puts the added stress of having to run from one person to the next to figure out the details.
How I feel about Scrum at this point, is that it gives individuals the opportunity to get away with improper planning, which eventually heightens the risk for project failure.
There is a fine line between planning the minimum to get started with and to just let the requirements reveal itself as one goes along.
When I was doing my thesis, I interviewed a few companies who’ve employed some form of Scrum; It was amazing to see how different organisations implement Scrum. You get organisations who are very process heavy, to organisations who are very light on processes. Of course they can justify their decisions and in an interview situation would probably paint the best picture. But as an experienced developer you just know that no process / methodology is perfect."
https://www.quora.com/Do-programmers-really-like-Scrum,RK Garimella,Polymath in Progress | Blogger @ RKGarimella.com,2019,833,"Having been certified by both ScrumAlliance and Scrum.org and been working as a scrum master for quite some time, I think I'm eligible to answer this question.
I currently work as a Scrum Master for one of the top 10 MNCs and established myself as a credible person across my org. When I first started, I had no certification. I want to gain practical experience first to see if this is the right path for me. Fast forward, I started enjoying what I'm doing and as part of enhancing my skills, I started attending various meet ups, workshops and certification trainings.
Experience with CSM -
Content doesn’t completely comply with the scrum guide and the exam was quite easy. Anybody with very basic knowledge of scrum would clear the certification and claim themselves as Certified Scrum Master.
Another thing with CSM is that in order to be eligible for the exam, you have to attend a two day workshop which is of okay help to improve your knowledge of scrum. Again, it depends on the trainer and how well you ask the right and powerful questions during the workshop.
Experience with PSM (1 & 2) -
Having cleared the CSM, I thought PSM would be on similar terms and gave a shot at it. To be honest, PSM 1 made me humble. I flunked in the first attempt. I didn't feel bad though because I realised there’s loads to learn and all I know is just a drop in the ocean. And how varied people perceptions are w.r.t Scrum.
Pass percentage - 85%
Questions - 80 in 60 mins
My personal journey towards PSM began…
So I began reading more, talk to more people who are experienced, share what I know so that I’ll get opinions from people and tried every possible way to increase my knowledge of Scrum.
I finally attempted the PSM for the 2nd time and I passed with 97.5%. I felt like I achieved something. Surprisingly my interest on scrum has increased. I started reading and experimenting more..
Fast forward few months, finally when I felt like I'm ready to attempt PSM 2, I attended a 2 day training and learnt even more about the role of Scrum master in particular. That training has taught me so many new things and the instructor was so good that he opened up a different dimension of Scrum Master role. How people skills are important for a SM and how to be an effective leader, coach, mentor and guide…One of the best workshops I've attended.
After taking some time and enough practise, I attempted PSM 2 and clear it with 95% which is above par score.
The knowledge, experience, scope, skills, mindset that PSM gives you cannot be compared with other certifications in the market.
Note: There are only 2000 PSM 2 certificate holders toady in the market and you can understand why. It’s of high quality and highly recognised in the industry.
I’m on my way to attempt PSM 3 soon and try to really become the Master of Scrum. I’m excited to learn more…
Good Luck!
If you've found this helpful, Kindly upvote and please lemme know if you have any questions about Scrum. I’ll be happy to help you!"
https://www.quora.com/Do-programmers-really-like-Scrum,Victor Malyavko,QA evangelist | Cherish DEV Founder,2023,4,"One of the most popular practices in Agile is Scrum. Scrum is a scalable Agile technique.
How does it work? Everything starts with a Product owner, who creates a list of work tasks arranged in order of importance, tasks backlog. Then the Scrum Master comes into play, ensuring that all Scrum principles are followed. Together with the product owner, based on the initial tasks backlog, they form a sprint. A sprint is a short time frame (2-4 weeks) during which a Scrum team completes a given amount of work. As part of the sprint, there are small daily meetings where team members talk about their daily update.
The planning of the sprint is followed by its visualization. For example, with the help of a Scrum board, which shows planned, completed and in progress tasks.
The undeniable advantage of Scrum is that it is an iterative development model, and after each iteration, a working product appears. The time frame helps the product owner and the team to be sure when the product will be released (stress levels are reduced). Accordingly, the first trial version of the product is quickly delivered. It is also easy to make changes to the product when the development cycle is short.
However, if used ineptly, Scrum can lead to a low-quality product (due to the speed and work of the team on different features simultaneously).
If you are interested in some other Agile methodologies, read about them in my article
Agile: Practice Wisely
Over the years, Agile has morphed beyond its original framework, evolving into an umbrella term for software development and other business processes. But the basic concepts — where teams develop and release products in short, iterative cycles — have remained relatively unchanged.
https://www.linkedin.com/pulse/agile-practice-wisely-victor-malyavko/"
https://www.quora.com/Do-programmers-really-like-Scrum,Des Cann,"IT Consultant, go player, family man, lover of life.",2020,1,"Forget all the rules and regulations and structures and roles. To me the essence of agile is like this…
Someone write up some thoughts about was is needed
I knock something up quickly to the point where I have a screen or two and it doesn’t fall over
I sit down with someone who will actually use it and show them. The something magical happens
They say things like: I don’t know what that’s for. I like that. Can you make it do this?
I go away make some quick changes and come back an hour or two or may be a day later
They go wow, how did you do that so quick. Could it also do this and this?
After a few iterations I am showing something they really want because it solves their real problems. Of course this is just a prototype. I then have to do the real build. But now I have confidence in what is important and what isn’t.
This is infinitely better than trying to work from a requirements document a Business Analyst has written after a few chats with someone who probably has no great visualisation skills or ability to meta-think.
The user never knows what they want until you give them what they don’t want. Agile at its best solves that problem."
https://www.quora.com/Do-programmers-really-like-Scrum,Doc Norton,Co-Founder at OnBelay (2015–present),2020,0,"Scrum itself is okay. It is iterative development with some relatively light-weight processes for tracking work.
My positive experiences with Scrum have been when the organization pays attention to hands-on-keys software development practices and uses the Scrum framework as general guidance.
My negative experiences with Scrum have been when the organization does not pay attention to hands-on-keys software development practices and/or misuses their interpretation of the Scrum framework as a required stringent standard."
https://www.quora.com/Do-programmers-really-like-Scrum,Isabel Nyo,The Engineering Manager's How-To Guide | gum.co/emhowto,2022,0,"Most developers are used to agile methodology by now so they don’t even think twice about whether they like it or not.
However, here are the things that developers like and dislike that is the effect of applying Agile Methodology.
Likes:
Incremental delivery
Clarity of work
Being involved in thought process via estimation and planning
Dislikes:
Meetings
Being held accountable for estimates when they are supposed to be rough"
https://www.quora.com/Do-programmers-really-like-Scrum,Dave Bailey,"CEO coach, serial founder, angel investor, writer.",2013,15,"No, in most cases it is not necessary for a scrum master to code.
The scrum master role is about looking after the scrum team so they can focus on coding. This involves facilitating the scrum meetings, taking care of any non-technical issues from the team, representing the technical team in non-critical meetings, and managing the product manager and other stakeholders, amongst other things.
The role involves a lot of interaction with both the technical team and non-technical stakeholders, so good communication skills and soft leadership skills are essential.
The technical skills of the scrum master must be enough to be able to effectively communicate with the technical team. Depending on the organisation, it can advantageous for the scrum master to be considered more technical than other senior management to build up credibility.
Since the scrum master role does not occupy a full time position, a scrum master is often a member of the scrum team. However, it need not be and an office manager or analyst can do well in the role. I know some Scrum teams which demand that the role is not a coder.
Remember, Scrum is built around self-managing teams, not scrum master-managed teams."
https://www.quora.com/Do-programmers-really-like-Scrum,William Hurley,Director of a team of developers,2023,2,"A lot of the hate, I find, comes down to one simple phrase: “in theory, theory and practice are the same; in practice they are not.” Let's start with what agile (small-A) software development is.[1] It's a rejection of the idea that you can document away the complexity of the software development process and arrive at a fixed scope, cost and timeline. Inherent on that is that if you ask enough questions, get enough people to sign on the dotted line (in blood, no doubt), there will be a plan that is inviolable. Which usually ends up with it being, well, ineffable. To misquote Aziraphale in Good Omens:
Best not to speculate. It’s all part of the System Specification Document. It’s not for us to understand. It’s ineffable.
Agile (again, small-A) preaches the acceptance of change, moving in small increments, planning and building what you need and learning while you go. And, above all, trusting the team to execute on the vision and make choices during the process, especially for things that don't really matter.
So, now that that's out of the way, let's talk about Scrum. You'll notice in the previous paragraph nothing talks about how to do this. And that's where people start to have a problem. Because it's all well and good for a team to say, “just tell us what the most important things are and we'll go down the list and we'll get as much done as we can until you tell us to stop,” but that's a much harder sell to most business people. They tend to wonder about, “will we have enough money,” or “will we hit our retail window,” or “how can we tell our client what they're going to get.” So into that void has stepped a number of methodologies, Scrum being one of the most popular.
Scrum is based on the idea that you have to have some bone to throw to the other side. So in that regard there is estimation. But rather than do it in hours or dollars — because that level of granularity is either a fool's errand or costs about the same as actually doing the work — you do it in some abstract, relative metric, usually called “story points,” or something similar. Then, assuming that the team can be somewhat consistent and stick to the idea that the task their estimating is going to be either more complex or less than this thing they already did, over time you can generally predict what's possible during a fixed unit of time. This, combined with the idea of continuous improvement, cross skilling, and an embrace of not changing the thing you are currently trying to do is supposed to prevent the problems with the waterfall method (see paragraph 1).
So, where can we go wrong? Well, there are a lot of ways. Most of them stem from people just using the trappings of Scrum but not actually committing to what it — and agile methodologies in general — preach. A common one is trying to shoehorn hours estimates back into the process. The reason you're supposed to use complexity is to avoid the problem of, “well, Sarah does it it's going to be 3 story points, but if Phil does it we're talking 5.” The team is supposed to self-organize, so basing estimates on pre-assigning tasks is really against the spirit.
Another big one is having stand-ups that don't actually provide any value. If anyone has been in one of these you'll recognize, “this is Ben, I'm working on ticket 2365, same as yesterday; don't have any blockers.” That's just noise. Another big mistake I see is doing too little exploration, assuming that, “we'll figure that out as we go.” Scrum is about the team committing to itself what it's going to accomplish. If you don't know what that is, how can you estimate? If you don't have an accurate (-ish) estimate how can you commit? So you discover what you actually need to do while you're doing it. That's not going to work well. Looking forward is at least as important as working now.
Properly done agile (and Scrum) is hard. You need to balance the now with later. Do enough planning, but not too much and certainly not too little. It also means holding yourself accountable and being willing to accept feedback and change how you are working so the team can be better.
Most people aren't willing to do that.
Footnotes
[1] Manifesto for Agile Software Development"
https://www.quora.com/Do-programmers-really-like-Scrum,Gana,Lives in India,2020,0,"The answer can be YES and No Both!
Yes- If a programmer (or any team member in general) finds no value out of the scrum meeting - and it is a waste of time!
Key to overcome this problem is each member is respected, heard and participated actively.
(Apart from the above personal or character issues? not to touched upon as part of this answer!)
No- When the team (all the team members) realize its value!"
https://www.quora.com/Do-programmers-really-like-Scrum,Jayadeep Subhashis,Senior Content Writer/Editor at VMEdu.com (2015–present),2017,2,"Keywords: Self-Organization, Empowerment, Scrum Team
Well, to me, this is not a question but basically a dual apprehension that comes to the mind due to the nature of the agile method called Scrum. In a Scrum project, it is the Scrum Team members who are responsible for delivering the desired product or service. The Scrum Team is sometimes referred to as Development Team since they are responsible for developing the product, service or other results. It consists of a group of individuals who uses the user stories in the Sprint Backlog to create deliverable for the project.
One of the essential characteristics of the Scrum team is they are Self-Organized. The scrum team members are motivated individuals who do not wait for their superiors to assign the tasks. They take the responsibility, share the risk, take decision, and work collectively towards a common goal. so here the first apprehension strikes which is lack of delegation of authority. Now to counter this, let us have a look at the benefits of self-organization which is
Team buy-in and shared ownership
Motivation, which leads to an enhanced performance level of the team
Innovative and creative environment conducive to growth
The other factor of the apprehension is the “Empowerment” of the Scrum team.The Scrum Team or the development team is supplied with the required resources to deliver the desired products or services along with the authority to take the decisions. Some might feel, is it safe to allow the Scrum team to take decisions? Now, If the team has only the responsibility but no authority to take decisions, the continuous/iterative development is difficult.
To sum up the above, my personal opinion would be if organizations understand the Scrum principle well,then, they won’t feel any insecurity as such, as far as power is concerned."
https://www.quora.com/Do-programmers-really-like-Scrum,David Posey,"Enterprise Agile coach, Developer, Dev leader",2016,21,"The Scrum Guide is pretty clear on this point. There is no need for the Scrum Master to know how to code. There is no aspect of the defined Scrum Master role that calls for coding knowledge of any kind.
One exception I can think of would be a situation where the team is very small (<5 people). It would be silly to say that the Scrum Master cannot code (assuming they have the skills and inclination). The concern would be that the SM would be trying to fill both the SM role, and participate in the DevTeam. This would be a very difficult situation for a Scrum Team to navigate, because the potential for role confusion would work directly against the role clarity that is a strength of the Scrum framework.
For the sub-questions, the answer is much less clear. The abilities required to fill the Scrum Master role are mostly people-oriented, as opposed to technical. The SM should be a master communicator, able to freely translate from technical to business and vice-versa. They must be perceptive, able to diagnose complex inter-personal issues, and act courageously. The SM is also a bit of a referee on issues regarding the Scrum Framework. What should be unchangeable, and why? What aspects are flexible, and what are the trade-offs? What options has this Scrum team not considered? A good Scrum Master ensures that there are rarely ‘surprises’, due to miscommunication or missed signals.
In my experience, ex-programmers are not inclined to be good Scrum masters. They gravitate to the technical side (as when they chose a programming career path), and may be missing out on business knowledge, communication and inter-personal dynamic skills. Folks with backgrounds like Product Management, Program Management, and Project Management often have a rounded skillset that lends itself to Scrum Master
The SM will be facilitating the DevTeam, and working to resolve their impediments, so some technical acumen is helpful! Best would be for the SM to be a quick study, able to rapidly absorb the key aspects of technical discussions from the DevTeam. They would verify their understanding for correctness, and translate for the Product Owner and other business and technical teams."
https://www.quora.com/Do-programmers-really-like-Scrum,Amofa Baffoe,"MSc. in Project Management, University of Limerick (Graduated 2018)",2021,1,"All you need to discuss during your daily stand up are three basic things- what you've done for the past 24 hours, what you intend doing for the next 24 hours and if you have any blocking issues. It doesnt matter whether you jot it down or not, what matters is your ability to clearly communicate these."
https://www.quora.com/Do-programmers-really-like-Scrum,Damien Filiatrault,I've been programming & managing remote teams for a decade+,2017,8,"Yes, scrum really can work for distributed software development teams. Here at Scalable Path (Disclaimer: I’m the founder) we’re a fully distributed team of over 3000 developers, designers and marketers - all working together using Agile and Scrum Methodology.
We’ve actually been running and improving Distributed Agile and Scrum since 2010. Over 25% of our clients have been running remote teams for at least 18 months, while 80% of our talent has been with us for over 2 years.
For us, creating teams which are productive, distributed and agile is fundamental to client satisfaction and employee retention. It’s also key to delivering valuable applications and projects – on time and on budget.
Here are a few tips to managing distributed Scrum and Agile teams:
COMMUNICATION AND COLLABORATION
Ask any practitioner of agile and they’ll tell you that communication and collaboration are probably the most important attributes to delivering projects on time. With distributed teams, being good at this is even more pronounced. Fortunately, the tools and technologies available today to distributed teams can nearly match the ultimate communication and collaboration tool of meeting face-to-face. Communication and collaboration tools for the Distributed Scrum team include:
Online task tracking and project management tools. Choose your tools wisely. Physical backlogs with sticky notes are great in some cases, but don’t translate well to a distributed team. Use online tools to enable smooth and dynamic project and task management, easy prioritization, visibility and transparency and better collaboration. Project and Task Tracking Tools: Trello, Jira, Pivotal Tracker, Basecamp
Virtual Meetings and Collaboration. In-person exchanges are special, allowing people to be fully in each other’s presence, and communicate with voice, facial expressions and body language. These nuances usually get lost in with emails and text communications, which can lead to miscommunications and disagreements if not handled correctly. However, modern communication tools enable easy and seamless voice and video calls, which means we can approximate in-person meetings with regards to what we hear and see in people’s faces. As a bonus, many tools also enable other forms of collaborative features such as screen sharing, which makes passing around print-outs and huddling around a single computer a thing of the past. The prevalence of these tools is making their cost zero in some cases, meaning that teams and individuals can spin up ad-hoc meetings to resolve issues or discuss a topic. Meeting and collaboration tools: Google Hangouts, GoToMeeting, Skype, appear.in, Room
Group Chat, Not Email. At Scalable Path, we communicate with our clients, teams, and third-parties via Slack instead of email. Slack is one of a new breed of organizational chat tools which allows groups to have text conversations and collaborate in an effective and efficient manner. You can set the context of channels to discuss particular projects or topics, and people can communicate directly if needed. There is also the notion of public channels, where the whole organization can communicate, and private channels, where only invited individuals can chat. Instead of having many email messages and threads, it’s much easier to see the history of a conversation and collaborate. We see an increase in communication and collaboration within organizations where we implement Slack. Check out Slack, it’s free to get started. Another great tool that accomplishes a similar goal is HipChat, but the barrier to entry is larger for organizations. Other Tools: 10 alternatives to Slack
Work with teams with high time zone overlap. Working with teams with significant time zone overlap allows tight collaboration without affecting work-life balance. Having distributed teams with large time differences negatively affects team dynamics and in the long term is unsustainable, and usually requires duplicating leadership for each time-zone isolated team. Scalable Path assembles project teams with healthy overlap in working hours so that teams members can work with each other.
Build self-sufficient teams. Teams should be designed to run autonomously. Direct communication between team members should be encouraged over top-down management. Every team should include people with all of the skills needed to develop the product they are working on. Try avoiding splitting individuals’ time across different teams as this leads to unnecessary bottlenecks and inefficiencies due to context-switching. Teams needing outside support should be free to seek it as long as the impact to other people’s productivity is not affected, or if it is, get the proper approvals. Slack and group chat tools enable easy communication with people outside of the immediate working team.
CULTURE
Doesn’t culture develop from being physically together? Admittedly, it can be difficult for a team to build a positive rapport when members are unable to catch up at lunch or hangout after work. But culture goes beyond meals and libations. It’s also about seeing a vision, aligning to a mission, creating a sense of community and belonging and having loyalty to a project that gets people excited about work. Here are a few tips on building culture with distributed teams.
Get to know people personally. Spend time with your team members before or after calls. Get to know about their interests, books they’re reading, things they’re doing offline. Building personal relationships helps build trust and bridges cultural differences which leads to people being more open about their opinions. It helps build relationships that go a long way in retaining employees. People like feeling appreciated, and sharing their passions. As social media sites like Facebook show us, people are willing to share their lives virtually.
Create a place for people to share interesting or funny online content. At Scalable Path, we have #frontend, #backend, #design, #random and #general channels in Slack where people share ridiculous things and ridiculously interesting things like news, new technology, and ideas. Once we started doing this, a culture started to emerge and people working on different projects started to get to know each other. It’s like having a virtual water cooler where impromptu conversations happen and it’s been great!
Create room for innovation. We encourage everyone within our organization to work on personal projects. Some of our leaders are actually using our developer network to build their side projects. It keeps their creative juices flowing and makes them more effective with client engagements.
Be introspective and iterate. In Agile fashion, organizations should be open to change and ask themselves what’s working and what’s not working, and aim to iterate and improve over time. You are probably not going to get everything right the first time around, but it’s possible to improve over time.
Guest appearances by non-team members. At Scalable Path, we have webinars featuring thought leaders and experts once a month. It helps our team stay abreast with the latest techniques and a gives the team a sense of what’s happening around the world. Within client projects we encourage cameos from other people, for example a VP/CTO/CEO to share updates, insights, news. Best of all, through hangouts, we are able to get thought leaders from across the world to talk about their experiences.
Have once a month inter-team meetings. We have monthly updates with our leadership team to share learnings, developments and goals. It makes everyone feel they’re part of a bigger mission. During these meetings we encourage the sharing of ideas and giving feedback on ways to improve.
Invest in personal development. Offering free trainings and reimbursements for personal growth go a long way in developing culture. It helps employees make leaps within their professional life and keeps them happier.
So there a list of techniques that are helpful for running Distributed Agile teams. It can’t be stressed enough, however, that the most important thing for a team is to have a positive environment where people feel safe to express themselves and try new things. Without the right culture as a foundation, tools and processes won’t get you very far."
https://www.quora.com/Do-programmers-really-like-Scrum,Hans Brinkhof,Senior Java Developer (2017–present),2020,1,"Basically, I knew that we had to use it, the very moment our manager stepped in and said:
From now on, we’ll be using SCRUM.
Most people seem to have a somewhat distorted view of how a software developer’s/analyst/… working day looks like, most likely influenced by the many very “realistic” tv shows and movies where you can see “real IT people” at work.
Yes, we can give our opinions on how we would like to proceed, but if management tells you otherwise, continuing to argument might be warranted, but at least for the time being, is pointless.
Let’s say you’re a software developer. You’ve always worked with the NetBeans IDE. You love working with the NetBeans IDE. You know the insides and the outsides of the tool, not to mention you simply can’t go without the GUI designer tool.
So, you get hired by a company that is looking for a senior developer, maybe even for one that needs to design a UI in Swing (all hail NetBeans!!)
You get hired, and arrive at the job with the confidence of the elephant that just agreed on a Sumo match against a cat, and expect all to be well in the world.
That is when your manager hands you your very own work laptop, which doesn’t have NetBeans, but Eclipse installed, and doesn’t seem to be able to install NetBeans. Upon inquiring with your colleagues, you find out management has decided to blacklist NetBeans because it has terrible memory management and they don’t want the NetBeans UI tool generated code ever to come in their project.
You can start arguing that you feel that you ‘should’ use NetBeans, but you won’t win that one.
It’s the same with methodologies. Let’s just hope that your managers are smart enough to make you work in an agile way, but there are more agile methodologies.
If your management decides you ‘ll use Canban instead of Scrum, because they want your way of working to be in line with that of the other teams, and they all use Canban, you “knowing” that you “should” use Scrum doesn’t mean diddly squat.
Even if you are forced to work waterfall on some projects your management is convinced should be done on waterfall, and not agile.
Again: what you “know you should” do is irrelevant. You can argument with management, but if they don’t budge, you have two options:
Resign and go to work for a company that does use agile
Work in waterfall."
https://www.quora.com/Do-programmers-really-like-Scrum,Henry Robinson,Crypto/DeFi/Web3 Enthusiast,2013,50,"I'm no expert, but I have gone from being an Agile ignoramus to living and breathing the stuff in a very short period of time. I wish someone had written something out like this for me when I started.
The lowdown. In layman's terms.
SCRUM Methodology Principles:
First things first, SCRUM is just one of several agile methodologies.
Release Often
Release small bits of code when they are ready (or on a regular short cadence like 2 weeks or monthly vs. every year).
Think of how a new Windows comes out every 2 years vs. how you get an update of apps on your phone like freaking constantly. The constant updates are coming from companies who use agile. (note, Microsoft or whoever may use agile, and release like waterfall. I understand the difference, but layman's terms remember)
The opposite of agile is waterfall. Waterfall is where you build a bunch of code and wait to release it all at once. Windows 7, Windows 8 etc. vs. nobody has any clue what ""version"" Facebook is on because they update it constantly.
The point of doing it this way is so that you can get constant business and customer feedback and incorporate it into the product as quickly as possible.
Efficient Project Teams:
Project teams usually consist of a small group of engineers, a product manager and a product owner (usually the business owner). They meet regularly for short periods of time and are constantly in communication about the status of the project.
Business, product, engineering should be co-located if possible. The meeting cadence and rules depend on which agile methodology you are using. A lot of it is bullshit, but some things are cool like 15 minute standup meetings. In a 15 minute standup, everyone gets together in the hall or by the water cooler or whatever,and tells everybody else what they are going to accomplish that day. This is where you can ask for help or collaboration from co-workers etc.
Dividing Major Projects into Tiny Tiny bits:
This has to do with the size of features. So for example, if you notice how startup websites come together, they usually have a fully functional, but simplified version of the product first, and then they add tiny features as time goes forward. This is done so that the product team can get constant customer feedback. This is in contrast to waterfall, where the product team goes into hiding for a long period of time, but what they emerge with might not meet the market or customer need anymore.
Milestones and Sprints:
This just describes way project timelines are divided. So milestones are a set period of time, usually 2 weeks and sprints are just tackling a single problem during that 2 week period. There can be multiple sprints in a milestone.
The impetus behind sprints and milestones is that for each sprint, some piece of the final product should be complete. At a milestone, the code should be ready to be shipped.
Regular Product Demos
At the end of each milestone, there needs to be a demo of shippable code. Something that has few bugs and meets the customer need.
Customer and Market Focus
I probably should have listed this first. The whole point of agile is to get constant user and business feedback while the product is being built. This also allows you to experiment more. That way, if you mess something up in the product, the next release is not to far away to fix it. Think Facebook and privacy settings.
Product Backlog:
In Agile, you are supposed to ship product on a regular cadence. All features are added to a product backlog, divided into small projects that fit within a sprint, and then prioritized. The backlog is just a way to keep track of all of the ideas people have, requests from customers, major bugs and other things. It's just a prioritized to do list that is constantly updated by the team. It's designed to keep the user first and make sure everyone is aligned on what to work on next.
The point is to be customer focused, get constant feedback and to ship frequently so you can test and iterate.
There are a whole host of details that I have left out here, but I believe this is enough to know for a marketing person. Feel free to correct any glaring errors. I would love to learn what I don't know."
https://www.quora.com/Do-programmers-really-like-Scrum,Doug Ross,Former Chief Technologist at Alpha Software and other firms,2018,1.6K,"Having written millions of lines of production code, I can only say the following:
The days I was most excited to get out of bed and go to work (once working 43 days in a row) was when I was leading a great team, building world-beating products and… writing code.
I’ve been very fortunate to work on products that have sol..."
https://www.quora.com/Do-programmers-really-like-Scrum,Alan Mellor,Used Agile methods since 2005,2019,56,"No. I like the stand ups and I appreciate the ideas on planning small sections of work. Both have value.
It is the fact that each Sprint has a commitment based on my wild guess of how long something will take that sucks catastrophically bad.
It’s all a total charade to add a veneer of predictability to something unpredictable."
https://www.quora.com/Do-programmers-really-like-Scrum, Thota,Author has 73 answers and 30.1K answer views,2020,0,"Multiple reasons :
Developer doesn't understand “why?” you or your organization or your product using Agile or Scrum for product development.
Developer doesn't have “mindset”
Developer did not show interest in learning something new
Developer did not show interest in experimenting
Developer do not see benefits.
Many other reasons.
Thanks,
Thota
“Did you ask the team?”"
https://www.quora.com/Do-programmers-really-like-Scrum,Murat Cabuk,Computer Engineer from Bogazici University (Graduated 2002),2017,6,"Inside the team
It works with people. Making them human, breakable, fixable, developable, appreciated, caring, cared.
It works by giving people what they need, which are Autonomy, Mastery, Purpose according to Daniel Pink.
It forces the team to fail at early phases and enables the organisation restarting fast and easily, or withdraw from project, package, product completely.
It gives delivery responsibility to the team as a whole!
Outside the team
It forces the organisation to choose one and only one decision maker for what is to be done/not done and changed.
It forces organisation to decide what will be done in the next couple of weeks(this sprint) and freeze that decision.
It enables and forces the organisation to choose, change or even completely trash(change the direction) all the work planned but untapped(the backlog) by the team. That means enabling “Decide as late as possible” which is one of the 7 lean principles.
It doesn’t require and even bans planning all the details of the work upfront. It values only productive work. That means enabling “Eliminate Waste” which is another Lean principle.
It doesn’t punish
the development team “for not guessing the amount of work correctly”
the stakeholders “for not guessing the scope of work correctly”
It doesn’t enable 3rd parties to inflate the projects by pumping “un-needed wants” into the scope just to close a bigger contract.
The item holds true for managers, directors and project managers using bigger projects as a self promotion material in office politics.
There are probably many more reasons for different organisations and teams. The list above nearly holds true for all software projects/packages/products and we can find more if we need."
https://www.quora.com/Do-programmers-really-like-Scrum,Japhia Olson,Developer,2018,1K,"Devs I've met seem to fall into the following groups:
Don’t care that much for programming but like the teams they are in and enjoy seeing the final project/outcome
Dislike programming quite a bit but like the pay
Absolutely love writing code and solving complex problems
#1 and #3 are both fairly common it seems like. I personally am one of those who love the act of programming, and I've definitely met a few other devs who feel that way."
https://www.quora.com/Do-programmers-really-like-Scrum,Ray Samuel,Marketing Manager at Orangescrum (2011–present),N/A,83,"There isn't a one-size-fits-all ""best"" alternative to Scrum, as different methodologies suit different teams and projects based on their unique needs, constraints, and organizational cultures.
Kanban is a lean methodology originating from the manufacturing sector but later adapted for knowledge work, including software development.
Here are some of its characteristics and merits compared to Scrum:
Flexibility:
Kanban offers more flexibility than Scrum. While Scrum has fixed timeboxed iterations (sprints), Kanban doesn't prescribe fixed iteration lengths. Workflows in Kanban are continuous, and work items move through various stages of completion without being constrained by sprint boundaries.
Flow-based:
Kanban focuses on optimizing the flow of work through the system. It emphasizes limiting work in progress (WIP) to prevent bottlenecks and ensure smooth flow. Teams using Kanban visualize their workflow on a Kanban board, which helps them identify areas for improvement and make adjustments accordingly.
Pull-based:
Work in Kanban is pulled into the system based on capacity and demand, rather than being pushed into fixed-length iterations. This approach allows teams to adapt more easily to changing priorities and fluctuating workloads.
Continuous Improvement:
Kanban encourages continuous improvement through the concept of ""kaizen."" Teams regularly review their processes and make incremental changes to optimize efficiency and effectiveness.
Suits Maintenance and Support Work:
While Scrum is often favored for new product development, Kanban is particularly well-suited for maintenance, support, and operations work where priorities may change frequently and where a continuous flow of work is essential.
Less Prescriptive:
Unlike Scrum, which prescribes specific roles, events, and artifacts, Kanban is less prescriptive. Teams can adapt Kanban to fit their specific context and needs without being bound by a predefined set of rules.
The choice between Scrum and Kanban (or any other methodology) depends on factors such as the nature of the project, team size, organizational culture, and the level of flexibility and predictability required. Some teams even combine elements of both methodologies to create a hybrid approach that best suits their needs."
https://www.quora.com/Do-programmers-really-like-Scrum,Jeff Sutherland,Inventor and Co-Creator of Scrum,2019,4,No shippable product at the end of a sprint or more often.
https://www.quora.com/Do-programmers-really-like-Scrum,Alok Dimri,Director at Benzne Consulting (2019–present),2022,3,"Many programmers take the scrum practices and principles at face value and thus end up viewing them as an overhead with respect to getting things done. This I feel is because they don't see the purpose of aforementioned elements and value it could bring to the work they do. I believe programmers appreciate Scrum once they go beyond their technical blinkers, to understand the ‘Whys’ of the framework.
Please check more about Scrum and Agile at https://benzne.com"
https://www.quora.com/Do-programmers-really-like-Scrum,Chris Falter,Senior Lead Scientist (2010–present),2021,1,"I have decades in the industry and experience with multiple methodologies. Scrum is by far my favorite.
However, like any methodology it can be abused, and Scrum is easier to abuse than most. It requires a lot of discipline, just as being a member of a crew team requires individual and collective discipline.
Some people think you can just call your daily meeting a “stand-up” and suddenly you’re doing Scrum. I have seen this more than once, and it’s worse than waterfall. Most of the criticism of Scrum seems like visceral reactions to the fake “stand-up-only” version, in my opinion.
If you want the benefits of Scrum, you need to exercise the disciplines. You can’t just work all sprint, have 2 hours for sprint review, retrospective, and sprint planning, then start your next sprint. In the middle of the current sprint you need to do the following:
Groom the backlog with a for reals product owner.
Prepare stories for the next sprint.
These require hours, maybe even a day (distributed over the current sprint) to do well.
You also have important activities that do not necessarily need to get done every sprint and therefore can easily fall by the wayside:
Update just-in-time architecture deliverables, explore future architecture needs.
Gather downstream requirements, create skeletal stories for the backlog.
Coordinate with stakeholders (clients, senior management). Yep, you do a lot of standard project management when you’re doing scrum.
Take stock of technical debt and create epics and stories to address it. You can’t just do feature development in Scrum, although far too many teams try.
There’s nothing better then Scrum when you have
a reasonably self-organizing team
that is reasonably well-trained team
that is supported by reasonably informed management and
engaged with reasonably informed customers
But if one of those conditions does not pertain, your life is going to be hard under any methodology. Scrum is not a silver bullet."
https://www.quora.com/Do-programmers-really-like-Scrum,Andrew,CIO of Collagia and Snr Director of MLB at Major League Baseball,2020,1,"It’s strange how pervasive SCRUM has become as the agile standard. Out of all the methodologies I have ever participated in, it is consistently presented the worst way to engineers. Which is exactly the same way as it was presented to executives.
I personally believe that having a methodology is better than no methodology. In contrast I am not particularly fond of any of them. I don’t precisely dislike them equally but I am not sure the differences in dislike matter. So I am not exactly anti-scrum.
I do believe we need some consistency to figure out what to work on and how to organize that work. Doing this in small regular increments of time is better than huge increments of time. It’s a good idea to have some organized time set aside to check in with teammates and customers so we can make adjustments along the development life cycle. Finally, those who write the checks are entitled to effective communication that promotes trust. I can do all this with any methodology so it really shouldn’t matter.
Now SCRUM is a particular annoying way to go about this but that is all it is. It is only dangerous if you allow it to compromise team sovereignty. However, you don’t have to implement it in a way that does that. For me I focus on that boundary and redirect any sales talk about promised efficiency to the executives.
PS. The secret to maintaining team sovereignty is trusted delivery."
https://www.quora.com/Do-programmers-really-like-Scrum,Geovane Piccinin,PHP Programmer (2015–present),2020,1,"I think it is overestimated.
As a developer I get the feeling that people think they are following the principles than everything is perfect, while it is not and the consequences fall over developers.
I will just give an example from my own experience.
We were working in a project building an app intended to be used by adults. As a developer, the idea of the app and its requirements came to me only by the voice of the product owner. We built as she suggested until a meeting with possible users. In that meeting it became clear that she didn’t understand very well what was the demand and what the users expected. She had followed the process of creating personas, we followed the rituals and etc. But we are failing in the most basic thing which was to try to understand more deeply what the users wanted. I think they just got too comfortable with the idea of change that they didn’t worry in understanding things well, they just start building expecting that it can be changed later. But, as developer, it gets very frustrating that you are building something with so low chance to be really used. Furthermore, when they realized that it was not good enough we had to rebuild the software in a very short time.
Conclusion: on one side we have waterfall trying to predict the outcome before any development. In the other side, we have people start building things randomly and deliver things that don’t make any sense just to create an illusion of productivity and justifying that change is absolute normal, while, in fact, it was just poor analysis. Leaving the impression that they do it because the real consequences fall over the developers.
Sometimes I hear people talking about agile and scrum and it just seems they are talking about magic. I think there is so much marketing behind it that it became a cool item in the culture and the people who want to look cool just go repeating the same stuff.
Of course it has its benefits and qualities, but, as everything that get popular, it will have a lot of people exaggerating its value as a way to inflate their own value."
https://www.quora.com/Do-programmers-really-like-Scrum,Gullivan,Former Senior Architecht,2019,1,Yes we do as long as it's implemented in the proper way. I've seen many companies using Scrum just to micromanage developers. They use daily stand up as a reporting meeting. Most companies know the buzz words but not the roots of Agile. Agile it's a developer team methodology and not management tool. It's purpose is to take people as the most important resources rather than process. It came up alongside start ups during the Web 2.0 boom. I've managers and product people hijacking Scrum tools and that is too non-sense. Another start up term Scrum suppose to help is pivoting. Changing what was planned out of sudden. A person should read Lean Start Up by Eric Evans before starting using it.
https://www.quora.com/Do-programmers-really-like-Scrum,Dmitri Koulikoff,20+ years of the professional software development.,2019,1,I do not and consider it the waste of the resources.
https://www.quora.com/Do-programmers-really-like-Scrum,Bret Sheeley,Senior Software Engineer at Emerson Ecologics (2018–present),2019,1,"As a senior developer, I absolutely love it… went it is done right. Unfortunately I’ve seen too many cases where it is half-implemented or Product is willing to break process at the drop of a hat. When done correctly, it allows for stories to be set to a pace that helps encourage proper planning and discussions around the user-stories in order to ensure things are broken down to their smallest valuable components, detailed out to a minimum set of requirements, and then lets the development team build and test in a reasonable period of time.
Every time I’ve seen things go wrong in a Scrum environment, it’s usually due to a pressure being placed on a team to take too much in, implement poorly defined or vague stories, or have constantly shifting commitments forced upon the team far too often than needed.
For me, as a developer, I need that period to understand what’s coming down the pipeline and give feedback. I need the sense that unless there is a real shift in priorities, I have room to work on what I know is coming up next; and if there is a real to shift priorities, the new goals are clearly spelled out and discussed before coding begins.
Outside of that environment, more often than not I just see the goals and plans constantly shifting to the point where whatever I rushed to get in next ASAP was no longer important because the next emergency needed to get done NOW! Then that gets de-prioritized by the next emergency spurred on by some last phone call an exec was in. Then, in the end, you’re stuck with a bunch of poor quality hacks tangled together, of which a large chunk was never truly important in the long run.
With Scrum, I get into a steady pace of putting out quality work that in the long run is much more beneficial to the company and allows me to look back on my work with more pride.
Moving into a good Scrum environment from other processes is night and day for me, so long as the process is held to far FAR more often than not. I have not encountered a framework like it, and I would be hard-pressed to take a job that wasn’t in a Scrum Team."
https://www.quora.com/Do-programmers-really-like-Scrum,Kirill Sukhomlin,Web Developer (2006–present),2020,0,"I wouldn’t argue with existing trend and instead say that many developers actually don’t care mostly. Unless it’s really awful, they are more interested in technical challenges rather than such things.
Like do you care if brand color of the product you are working, is red or blue? Well, you might have preference, but it’s not important at all. The same with scrum."
https://www.quora.com/Do-programmers-really-like-Scrum,Animesh Yadav,Upvote,2020,0,"Of course yes, many programmers are like scrum rather they are also using the work related to scrum. Well, I know to be a good scrum master certified we need to do the proper course & also this is needed for programmers. I would suggest “tryScrum” for the best training."
https://www.quora.com/Do-programmers-really-like-Scrum,Bruce Wells,Studied at Ithaca College,2020,1,"Scrum is a management management tool. It has nothing to do with Agile development. It was invented by developers to manage their management. Agile was just a ruse to convince them to try it.
If you need to manage your management, then you should use Scrum. And please, never tell management this, or you will never get control of the development process."
https://www.quora.com/Do-programmers-really-like-Scrum,Sean Hoegaarden,"Developer, Product Owner, Scrum Master, Team Leader, BA",2020,1,"The answer depends on the individual and on the environment.
Starting with the environment is easy, there is a nice article on ‘Dark Scrum’ which details how to entirely mess up and deteriorate all concepts of agile and Scrum. Another problematic point is that most Scrum Masters get their role based on a 2 days training which makes them certified. Barely enough to get the basics. This is a very thin background if your mission is to change the mindset and behaviour of an entire organization. There are unlimited options to make Scrum painful for developers. Just keep in mind that managers have a lot more experience in turning situations to their favour than developers have, that is why they are managers.
Another factor is the developer’s personality. Working as a member of a team is not for everyone. When someone is in the habit of full code-ownership, starting the development process with designing architecture, full data and object models, and elaborating the rest later, then agile will never be a comfortable alternative. Regardless of whether it is ‘done right’. Even though, for such people, among all agile frameworks, Scrum is one of the friendliest choices."
https://www.quora.com/Do-programmers-really-like-Scrum,Aneesa Amin,Co-founder at Skillier (2019–present),2022,83,"There's no simple answer to this question - it depends on the programmer. Some programmers love Scrum because it helps them to stay organized and focused, while others find it too restrictive and prefer to work in a more flexible environment. There are also those who find Scrum to be a helpful tool in some situations but not in others. Ultimately, it's up to the individual programmer to decide whether or not Scrum is right for them. However, there are some things that all programmers can agree on: Scrum can be challenging, and it's not always easy to stick to the rigid structure that it requires. But if you can master Scrum, it can be an incredibly powerful tool for getting your work done efficiently and effectively."
https://www.quora.com/Do-programmers-really-like-Scrum,Shubham Soni,SDE 4 at Broadcom (company),N/A,83,"I personally don't like Scrum overall but, somehow management think it can do magic.
Things that I appreciate in Scrum:
Iterative process.
Pitfalls of Scrum:
It is slow. Unless you have very short sprint. You do more meeting than actual work and spend time in non technical discussions.
Difficult to track feature as one feature gets broken into many small stories which often seems unrelated to a feature.
Vague. There are no concrete definations of things so everyone interpret things differently.
Doesn't honor special skill of a person. Often a team consists of Subject matter experts and a certain kind of task can be done by a particular person but Scrum assumes everyone to have similar skills.
It discourage a technical person. Things gets very vague in sprint and someone who has tendency to be definitive about terms are not comfortable and end up demotivated.
There are many more practical problems with scrum which management doesn't realize but developer face at the end.
I always believe that Kanban is much straightforward and simple process. yet management are sold on idea of scrum and developer has to follow."
https://www.quora.com/Do-programmers-really-like-Scrum,Michael Lloyd Lee,Former Over priced consultant at Government,2020,83,"Used well, for the right sort of project, it works well and I like what it brings. That is starting point fixed concepts can help bring people on board with agile as well as give a good set of starting points for a team. It is also fairly good at highlighting when something doesn’t work.
The most important part of any agile process is the introspection part, Scrum is not some fixed thing that remains in a static state for all eternity. It changes as the team evolves and works out what works for them, this means by definition Scrum is not the same for each team nor is it a single course that you learn and blindly apply to a team.
Scrum, as a base line to start working with can be a good thing, Scrum as the end goal of Absolute Perfection is not Scrum.
Scum does not work when attempting to apply it to an existing well performing team. Nor does Scrum work well when you don’t have a natural cadence. In both cases, done well, Scrum (or indeed any agile process) should highlight that it is not working quickly.
I like Scrum. It is a good tool to have in your belt, it should not be your only tool however."
https://www.quora.com/Do-programmers-really-like-Scrum,Jaanis Kruumins,Lived in Tokyo,2020,83,"I liked it when I was a programmer, I like it now as a consultant helping to manage projects.
Would disagree with the statement that scrum is an utopian methodology. Agile is challenging to implement and Scrum isn’t an exception. Not only it can be counter-intuitive, but also because it raises questions regarding the whole process. It’s always easier to shove the questions under the carpet, but it won’t be Agile anymore. That is why we have so many pseudo-agile-scrums, but judging about Scrum based on these implementations is alike to judge the opera by a friend singing it through the landline.
As a programmer I liked scrum, because the problems were mostly conveniently cut into the fairly manageable pieces and the high involvement of the project manager was beneficial as well: the problems were quickly identified by others if I was unable to do that and I felt so much less stress under Scrum than I did working under other methodologies.
As a consultant I like scrum because it’s a strict methodology, where B follows the A, and it’s somewhat easy to make a well-manageable project plan if you follow the rules. It is worth mentioning again that it is difficult to implement: not only the mindset takes time to change, it takes time to put the whole process flow straight. However, well-implemented scrum or other agile methodology is nice to have around. It doesn’t disconnect the development team from the business side of the project and it fosters improving the whole process, which makes work of everyone involved a bliss."
https://www.quora.com/Do-programmers-really-like-Scrum,Victor Sergienko,20 years of programming,2020,1,"You will not get a good answer here.
Because:
1. A selection bias. People normally don’t go to the Internet to tell the world things are working fine.
2. In English-speaking programmers culture, I observe a much more individualistic approach. People’s ideal workplace is a personal room with a window and a noise isolating door. One really needs some training before they can become an efficient team member, and it’s not everybody’s piece of cake. The individualism here is taken to its extreme: many programmers won’t talk to their colleagues about the implementation details of their work for weeks, months even.
3. Very often, as far as the answers state, “we’re agile” is just a way to say “we don’t know how to plan/manage/what product to create”. Calling these cases “agile development” is a big stretch, yet a lot of negativity comes from experiencing such an environment. Naturally, people’s reaction to “agile” afterwards will be “never again”.
4. My guess is those traumatized by “agile” from paragraph 3 have never even read a book on it, and thus never knew how a healthy agile development process looks."
https://www.quora.com/Do-programmers-really-like-Scrum,John Deeth,Studied at University of Life (Graduated 2019),2022,83,"Unfortunately, the answer is no.
Scrum is an instance of Agile and the thing we do during Scrum is followed by 4 Values and 12 principles of Agile.
Like the picture, we see Agile is Mindset, which are characteristics we have to change if we are different from it. Not easy for anyone to change themselves and fix with a new mindset.
Disclaimer:
The answer programmers don’t like Scrum is not absolutely number. It depends on my experience and they take the majority.
Scrum and Agile have different instances in every team or organization. So depends on their circumstances, the characteristics of Agile culture are different. But 4 values and 12 principles should be considered and comply with."
https://www.quora.com/Do-programmers-really-like-Scrum,Cristiano Costantini,I was part of a team successfully and happily adopting scrum,2020,83,"I love scrum: it was really satisfying to implement it when with my Self-organized team and we adopted it starting ~2010. We all five developers enjoyed it and got mature in using it. Then the team expanded and maybe the new comers did not enjoy as much as we - the initial members - did.
After some years and after being enlightened by Dave Thomas’s talk (he is one of the authors of the manifesto), I realize that the main reason the newcomers didn’t like was probably because they didn’t participate to self-organizing it. We, older members acted as experts.
Similarly, I think that many developers hating scrum today do hate it because it was used - by other team members, managers or product people - as way to pretend saying what to do and how, which violate in my opinion at least 5 of the 12 principles behind the manifesto. Other answers to this question reinforce my idea…
Please note that scrum authors are both original authors of the manifesto for agile software development, so if by adopting scrum you violate its funding principles there is something more than wrong on the way you (or the people who imposed scrum to you) do it.
This is sad because, as an happy Scrum adopter, I found great value in its ideas and it gave to my team great satisfaction…
But the way it is nowadays imposed is moving people away from it, and developers are missing an opportunity for a well balanced, sustainable and effective approach to software development.
I can only recommend to developers to own their scrum if they want to adopt it with satisfaction: set aside the chickens (time ago the scrum guide used an effective metaphor to describe who is just involved and who is really committed in the scrum processes) and eventually find support from an Agile Coach (not an expert that tell you what to do, one who help you to implement agile by yourself).
…but if you disregard Scrum because you had a bad experience with it, you are missing an opportunity."
https://www.quora.com/Do-programmers-really-like-Scrum,Alpesh Vasant,Director and Principal Trainer (www.gacademy.in) (2010–present),2022,2,"Are you a disciplined person?
Would you like to make or contribute in decision making and own the decision?
Are you self organized ?
Are you ready to allow yourself to be cross skilled?
Are you a more of team player rather than lone wolf?
Are you the person who do not believe in too much bureaucracy and believe in open and frank discussion and communication?
Are you really passionate about programming, testing , designing and contributing in architecture of software?
And the most importantly , are you really a flexible with mind and body??
If answer to 90% of these questions by a Programmer is TRULY YES, then I am sure he/she would love Scrum.
Else he/she is going to keep struggling and will keep hating Scrum (and still be the part of it most of the time)
Sorry if I am sounding bit blunt or rude here, however these all are the reality of Scrum and frank and open communication is the very base of Scrum.
With Regards,
Alpesh Vasant"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Assistant,Bot,2024-07,0,"Agile methodology is an iterative and incremental approach to software development that emphasizes collaboration, flexibility, and rapid delivery of working software. The key principles of agile methodology include:
Advantages of Agile Methodology:
Adaptability: Agile allows teams to respond quickly to changing requirements and market conditions, enabling them to adapt their plans and priorities as needed.
Faster Time-to-Market: By breaking down projects into smaller, manageable iterations, agile teams can deliver working software more frequently, often in a matter of weeks or months.
Improved Collaboration: Agile emphasizes close collaboration between the development team, stakeholders, and customers, leading to better alignment and understanding of project goals.
Higher Quality: Agile's focus on continuous testing and integration helps identify and address issues early in the development process, resulting in higher-quality software.
Increased Transparency: Agile methods, such as daily standups and sprint reviews, provide greater visibility into the development process, allowing for better project management and decision-making.
Disadvantages of Agile Methodology:
Resistance to Change: Some organizations and team members may be reluctant to adopt agile practices, especially if they are used to more traditional, waterfall-based approaches.
Lack of Upfront Planning: Agile's emphasis on iterative development can make it challenging to create detailed long-term plans and roadmaps, which some organizations may prefer.
Potential for Scope Creep: The flexibility of agile can also lead to continuous changes in requirements, which can result in scope creep and difficulty in managing project timelines and budgets.
Increased Coordination Effort: Agile requires close collaboration and communication between team members, which can be more challenging in larger, distributed teams.
Potential for Technical Debt: The rapid delivery of working software in agile can sometimes lead to corners being cut, resulting in technical debt that needs to be addressed in the future.
Overall, agile methodology provides a flexible and responsive approach to software development, but it may not be the best fit for all organizations or project types, depending on their specific needs and constraints."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Oliver Dolan,10 Years Commercial Software Engineering,2017,11,"The agile methodology is based around the agile manifesto, the original definition can be seen here: Principles behind the Agile Manifesto
If you navigate through the principles you will see some common themes:
The stakeholders needs are prioritised
To achieve this we must decide who the stakeholders are
Oliver Dolan's answer to Who are your stakeholders in Agile projects?
As well as capture the stakeholders requirements effectively
Oliver Dolan's answer to How do you define a ""feature"" of a software precisely and effectively?
Oliver Dolan's answer to How do I write good user stories and acceptance criteria for web based project?
The management teams get more flexibility in prioritisation and this increases there feeling of engagment
Deliver to stakeholders quickly to obtain feedback
See my answers here on how to ensure you are delivering in an agile manner
Oliver Dolan's answer to How do I get started on a agile project management?
Oliver Dolan's answer to What are the steps in creating a software?
Oliver Dolan's answer to How we can increase corporate agility?
The delivery times are squeezed which aids to identify weak corporate processes
Information learned on the way is visible and accounted for in future plans
Continuous improvement is a big focus using PDCA cycles. (plan, do check & act)
As for the advantages and disadvantages these are often
Subjective
It depends on your view point and where in the organisation you are situated.
Developers tend to favour agile
Project managers or team leaders not so much as there role and importance can become eroded.
Industry specific
Depending on industry agile methodologies will have varied applicability
It was designed for software so its heavily applied in software engineering
We are only now in 2017 starting to see other industries adopt some of the ideas.
Implementation specific - This is huge, infact this might be the most important
Who is commanding the implementation
Obviously if someone is making foolish decisions at a high level of management it can be seen in the results of the business.
What are the best ways to be an effective leader? I have recently been elected the leader of an undergraduate professional marketing organization with about 300 active members.
What is implemented
SCRUM
https://www.quora.com/topic/Scrum-product-development/faq
Oliver Dolan's answer to What is the best way to apply SCRUM principles for an open source project?
Kanban
https://www.quora.com/topic/Kanban/faq
SAFE
Oliver Dolan's answer to What is your review of Scaled Agile Framework (SAFe)?
Oliver Dolan's answer to What is SAFe?
LESS
Large Scale Scrum (LeSS)
Others are listed here:
Agile software development - Wikipedia
How it is implemented
The implementation is very important and will ultimately determine your success. Please see my answer for how I am currently managing my agile projects.
Oliver Dolan's answer to How do I get started on a agile project management?
I also think that the project manager or leader is one of the most important roles when the agile delivery method has been decided.
Oliver Dolan's answer to What core technical skills are needed by an Agile Project Manager?
As for the advantages and disadvantages I have decided to keep this simple and to the point so as to answer the question as best as possible.
Advantages
Faster cycle times
Speed to market
Improving quality through continuous improvement
Enhanced visibility of what teams are doing
Easier to react to business changes
Reduced risk due to greater visibility and more adaptability
Customer satisfaction due to being more involved and listened to
Product market fit becomes more probable due to feedback cycles
Teams often like the process
Teams start performing better due to PDCA cycles
Highlights problems early
True prioritisation as stories are often small enough to do prioritisation effectively
Seeing the benefits of work undertaken sooner
Team feels more united due to team commitments and cross functionality
It allows for identification of wasteful processes
Faster feedback from the stakeholders
Stakeholders are more engaged as they are more likely to get what they want and change it before using too many resources.
Higher quality due to squeezed delivery times
More transparency throughout the value stream
Less documentation to maintain
Higher chance of working solution due to automated acceptance criteria testing
Maintenance is easier
Disadvantages
Oliver Dolan's answer to In a nutshell, why do a lot of developers dislike Agile? What are better project management paradigm alternatives?
Stories can be hard to slice
Customer expectations on quality can be damaged with MVP approach
Micromanagement
Lots of meetings
Agile projects can be hard to agree contractually
Stakeholder dissatisfaction with priorities
The teams doing the work can feel dis empowered
Lack of understanding of the agile methods in depth at different corporate levels
Yearning for the past of agreed specifications and budgets
Lack of clarity on what will be available when
Backlog can be difficult to prioritize
It can also become huge
The terminology can be confusing
Story points, velocity, burndown, value stream etc..
It can abstract the organisation from the team
Listening to the customer is not always in the best interest of the business
It can be hard to distinguish the methodology's and when should be applied.
It is not a magic bullet to solve everything and can be oversold
It can reduce employee morale and satisfaction
It can dis empower individuals
It can be perceived as cultist and egocentric
Scaleability can be difficult to get correct
There are lots of things I could write but these are the main ones I can think of right now.
Hopefully it helps
Good Luck
Oliver Dolan!"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Murray Robinson,Works at IE Digital,2018,48,"Agile is not a methodology. It is a philosophy of work with a set of values, principles, frameworks and methods. Here are what I see are it’s weaknesses.
Agile is open and honest. That makes its bad for managers who get ahead through deceit and manipulation.
Agile empowers the team. This means that its a threat to authoritarian managers who threaten, control and intimidate staff and each other to get what they want.
Agile is about breaking down the barriers between functional silos. So its not good for people who are building an empire of functional specialists
Agile is about working together in co-located, cross functional teams. This makes agile a threat to offshore, outsourcers in developing countries.
Agile is a fundamental change in the philosophy of work which requires changes in an organisations values, principles, frameworks and processes. This means that agile cannot be implemented over night. It needs at least two years to get the full benefits.
When Agile is implemented in one area such as development it immediately exposes serious problems in the areas around development which managers have been successfully hiding for many years. They dont like being exposed and will often push back hard.
If you only implement agile in the dev team you get little benefit from it. You only get the full benefits of agile when you apply it to your whole product development lifecycle.
Agile has been turned into a big money making business by some certification authorities. This has led to Scrum becoming arrogant and dogmatic.
The revenue from Agile consulting has led to a lot of big name, consulting firms selling agile without understanding it. This has led to people like the OP thinking that agile is just another methodology or process."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Ryan Wilcox,Studied at Rochester Institute of Technology,2018,58,"From the perspective of a developer who’s been around the block a few times, Agile has some weaknesses.
Most of these sound like big enterprise problems, but you’d be surprised how often they creep up into even small companies.
It can make human problems more apparent (at least to developers on a team): That team that’s in pure firefighting mode all the time because their boss can’t make up their mind for more than a week - or can’t shelter team from external demands for more than a week). The director level person that manages only by looking at charts that go up-and-to-the-right. The product person that plays “blame the developer” when a feature comes out exactly as they asked but doesn’t give good user experience in the real world (“forget about iterating, we pay you all too much to do that, you should read my mind”). The micromanager that turns the 5 minute daily standup into an hour long thing.
If departments in the organization didn’t talk to each other before, making the developers work in 2 week increments won’t help. In some cases that will mean the developers will outpace the other departments… which is great, but as a developer it’s demoralizing to, 3 weeks after I thought I put a feature to bed, to start getting bug reports on it.
Large organizations try to fit the “2 week iteration” thing into departments where it just doesn’t belong. Your customer support team shouldn’t be doing 2 week iterations, they are a team that reacts to events. But large organizations really want a unified management approach sometimes…
Doing R&D in an Agile organization is hard. “Why can’t you - our one special Innvoation Platform Transformation team - give me estimates and a backlog that details how long this project will take, like the other engineering teams can, kinda?” Putting aside the problems in most of that statement, if you’re in a team that is say using tech unfamiliar to any of the team members and even the rest of the organization, well sometimes there won’t be a nice burndown chart at the end of the sprint, or 5 sprints ahead planned out with every single task. (Yes! Also “not Agile”! But that’s the cultural expectation that evolves all or most of the time!)
Sometimes deveolper problems aren’t boiled up with the respect they deserve. Product people winning the “what goes on this sprint” contest all the time, so broken things aren’t fixed. Developers knowing their organization is broken (“Standups shouldn’t be 1 hour long”) and not getting listened to. Agile implementations theoretically should adapt to what works well for the team, but too often that always means, “The developers should adjust in this way - maybe with more meetings!”. Sure, sometimes that’s fine… but also sometimes the boots on the ground have a point.
Agile is… non-obvious how to scale in the large. If you have 10 Agile teams that need to talk to each other because they are part of a massive release of software… even in 2018 we’re only _starting_ to understand how to do that. How you manage 70–100 developers, say nothing of 700–1000 developers? Only certain organizations have these problems, but this is an actual problem with Agile, not just a cultural problem with organizations running or adopting Agile.
In short: “Agile” isn’t Magic Fairy Dust you can sprinkle on your org and have its people and organizational problems disappear… (But some people think it is, because the marketing is good…)"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Sasha Andrieiev,CEO at Jelvix (2011–present),2020,29,"The core value of Agile development is that it enhances the quality and predictability of the team workflow. It helps to get a quicker return and improves the quality of responsiveness. Scrum and Kanban are the two most widely used Agile methodologies.
Agile software development is based on iterative development. All the requirements and solutions are being developed only through the collaboration between self-organizing cross-functional teams.
About the advantages:
Agile methods or Agile processes help to streamline the project management process;
They are based on such key points as encouraging procurement and adaptation, leadership philosophy, teamwork, and self-organization;
The rapid delivery of high-quality software is facilitated by accountability to best design practices;
This business approach connects development with customer needs and company goals.
Drawbacks of agile methodologies:
More time and commitment. Testers, customers, and developers must constantly interact closely with each other. All participants must be prepared for quick testing and logout at each stage. This guarantees the quality of the product, meanwhile, the team’s workflow will become longer and more difficult;
Greater demands on developers and clients. This system requires a great return on each of the participants to the entire project to ensure success. Customers need to be trained to facilitate product development. Even a minimal lack of customer involvement will affect the quality and success of the software.
If you are still thinking about whether to implement Agile, here is an article on how to implement the most common agile project metrics."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Justin Jackson,founder of MegaMaker,2014,8,"Agile actually defines a group of methodologies that share a similar philosophy (originally defined in the 2001 Manifesto for Agile Software Development).
A core tenet of agile development is to work in short iterations, or sprints. After each sprint, the team should have produced a small new iteration (incremental release). At this point the team can also re-evaluate it's current direction, and make changes if needed.
Other characteristics common to most agile methodologies:

Specs (or requirements) are written simply, often in the format of a user story on a card:
(this screenshot is from Sprint.ly)
Participation of stakeholder (or product owner) in the process
Finish work on one feature before moving on to the next
Lots of team collaboration and cooperation, and strong sense of ownership
Testing is done throughout the process
Types of agile methodologies
Scrum - one of the best known agile methodologies. Illustrated Scrum reference PDF
Lean - adopts lean manufacturing principles for software development. Lean Software Development
Kanban - there are 3 core characteristics: visualize your workflow, limit work-in-progress, prioritize backlog. People following Kanban, will often use a Kanban board that looks like this:
(Blank Kanban board with 3 columns: Backlog, Current, Complete. [Source])
Extreme Programming (XP) - controversial agile practice. Agile Software Development: What is extreme programming?"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Vikash Kodati,"10+ years of exp using Agile methodology. Helped Ameriprise, UHC be successful",2015,3,"That is a broad question. I am sure you will find the specifics online but I ll help you understand the broader stroke. Its a structure that helps realize incremental business value quickly (allowing course corrections) and also lets each role consume the information it needs. The process itself is very flexible and leaves a lot of space of interpretation because of which there are more ""Agile-buts"" (look it up) than pure Agile teams. The important part is for all the team (Developers, BAs, Scrum Master, Business teams, Product Manager) to agree upon a common ground rather than trying to following something that is carved in stone.
We follow a rule that an agile team (developers mainly) should not be larger than what 2 large pizzas can feed :)."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Robert Merrill,Agile project estimator and agile adoption coach since 2004,2015,1,"Agile and its various flavors have been thoroughly defined, so I have nothing to add there.
I think agile's decisive advantage is that it is much more forgiving of estimation errors. When we commit to projects, we do so with the belief that:
The results will be worth more than they cost, and
Cost (nearly always) and time (often) won't exceed constraints.
The go/no decision rests on estimates of cost, duration, and value. These estimates have large (2x-4x or more) ranges, and additional up-front work often doesn't reduce these ranges very much.
By putting the estimation uncertainty in the scope of what will be delivered, and maximizing the value of that as we go, agile eliminates nearly all estimation-related risk."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Ashwin Chandrasekaran,"Scrum practitioner, PMI-ACP, Blogs at http://breatheagile.net",2017,1,"Agile shifts the focus of project management from cost and schedule to delivering value to customer.
How is it done?
Customer Collaboration - All Agile methods encourage customer involvement in all stages of a project. This makes frequent reviews and feedback cycles possible
Incremental Delivery - By developing and delivering features in short cycles, the customer can see the evolution of the final product. This makes course corrections possible in a regular fashion rather than at the end of a project
Continuous Improvement - Using various practices like Retrospective meetings, Agile enables the team to look back frequently and adjust the process as needed
Team Ownership - Agile encourages the team to own their plan, design and commitment to delivery. The responsibility of meeting the project goals shifts from project manager to developers
Quality Focus - Short iterations don’t mean the absence of testing. Agile methods enforce every increment to be well tested
Unambiguous Requirements - Using techniques like User Stories and Epics/Themes, Agile makes the creation and understanding of requirements much easier than traditional BRMs
In short, Agile is a different and more pragmatic way to approach project management."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Jessica Wood,"M.tech in Physics, Chemistry, and Mathematics (science grouping), Thomas Jefferson High School for Science and Technology (TJHSST) (Graduated 2010)",2020,1,"Hi,
Agile is the methodology where the software project is broken into several small stages and these are managed by a team with constant collaboration and continuous iteration and improvement.
In simpler words, it is the iterative approach that effectively focuses on customer feedback, constant changes, collaboration, with rapid releases.
Agile effectively targets software development and follows the shift-left principle. Also, it focuses on functional and non-functional readiness.
There are several benefits that are achieved for enterprises with agile. The most important benefit is that it offers shorter development cycle with enhanced detect detection.
Along with the advantages, there is even other side, i.e. the challenges. Yes, Agile even lays down challenges that should be considered while practice agile testing.
The most important challenge with agile methodology is that it is difficult for the teams to be more productive every time.
Thanks!"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Jeff Sutherland,Inventor and Co-Creator of Scrum,2020,4,"A well implemented Scrum delivers twice the work in half the time. See Amazon.com: Scrum: The Art of Doing Twice the Work in Half the Time (8601410683535): Jeff Sutherland, J.J. Sutherland: Books
The disadvantage is that as a consultant you can only biill 25% of the hours."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Chuck Cobb,Agile Project Mgt Author and Instructor (Over 200K Students),2018,4,"First, to be technically correct, Agile is not a methodology; it is a mindset and a philosophy defined by the Agile Manifesto. Scrum might be considered a methodology although many people would argue that Scrum is a framework, not a methodology.
Many traditional methodologies are well-defined and prescriptive - that’s called a “defined process control model”
Agile methodologies (or frameworks, if you prefer) are meant to be flexible and adaptive - that’s called an “empirical process control model”
From that broad perspective, here are the pro’s and con’s:
Pro - Agile methodologies are better suited for situations with higher levels of uncertainty because they allow taking a flexible and incremental approach to resolve uncertainty as a project is in progress
Con - Agile methodologies are less predictable in determining the cost and schedule for completing a project prior to the start of the project
Pro - Agile methodologies emphasize creativity and innovation to maximize the business value of the solution
Con - Too much emphasis on creativity and innovation can lead to significant changes in scope
Of course, you should realize that this is not a binary and mutually-exclusive choice between “Agile” and “Waterfall” as many people seem to think. It’s a matter of fitting the methodology to the nature of the problem rather than force-fitting a project to one of those extremes. Sometimes that requires blending Agile and traditional plan-driven project management in the right proportions to fit the situation."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Jaimi McEntire,Author has 4.4K answers and 7.6M answer views,2017,2,"The major benefits are that it makes your development more predictable, and there are always work items available, and work items have been recently discussed, so there is less misunderstanding, and constant review to make sure that the development effort matches the business needs.
The major disadvantages are that a sprint is uneven. The load is not balanced. At the beginning of a sprint, the QA team does not have enough work, at the end of the sprint, the development team is winding down, and the QA team has too much work. There are of course ways to address this - the development crew tests at the end, and the (canonical) suggestion is for QA to work on “test scripts” at the beginning. But these have their own issues. Because a team has to bid to complete items, and the sprint is seen as unsuccessful if they do not complete the items, there is a tendency to underbid and sandbag (letting the work fill the time), leading to a decrease in productivity. Even though this is an effort to give developers more say in what and how they work, the constant review and discussion gives some developers the feeling that they are being micro-managed.
We’re an agile team, and we’ve addressed all these issues in various ways, and overall we’re more productive than we were before the switch to agile."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Victor Malyavko,QA evangelist | Cherish DEV Founder,2022,3,"Agile is a software development methodology that emphasizes collaboration, responsibility, and openness. It is a technique for development management that stresses iterative and incremental development, and early delivery of functioning software. The Agile methodology relies on rapid and frequent deliveries of working software that allows teams to respond to changes in requirements, rather than planning everything in advance. The components are adaptive planning, evolutionary progress, and collaborative rewards. The process covers the full software development cycle, from requirements to deployment and maintenance.
Advantages:
Reduced time to market — adaptability and constant communication make the final product as clear as possible, which reduces the time for its testing.
Creativity — using a variety of minds and constantly solving complex problems leads to the creation of innovative approaches to product testing.
Meeting the requirements of the customer and the expectations of the end user — the continuous communication of developers, testers, businessmen and users leads to the creation of an ideal hit on the goals of the product.
Changes even at late stages — this can be achieved as painlessly as possible due to the fact that the testing process is divided into sprints, as well as through communication within the team (each member knows the product well).
Quickly identifying wrong approaches and making quick decisions — this can be achieved through daily communication of team members.
Disadvantages
Creating stress fear of uncertainty — team members can be frustrated knowing that the changes can be made during the last stages of development;
Degradation of quality — Agile is fast and has a large volume, so the quality may become lower.
Long time to implement — Agile is a complex methodology that can be a problem;
Stress for customers — not everyone is ready for daily meetings and problem-solving that they hoped to delegate to others.
Strong motivation of employees and professionalism at the same level are required — QA Engineers must keep up with each other in a rapidly changing, flexible software testing process, and this is difficult to achieve with insufficient motivation and qualifications of at least one of the team.
In my article you’ll find more information about Agile
Agile: Tribute to Fashion or Effective QA Management?
The Agile Methodology is a software development methodology that is implemented to increase software development speed and agility. Touted to be good for the software industry, it is not a novel idea.
https://www.linkedin.com/pulse/agile-tribute-fashion-effective-qa-management-victor-malyavko/"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Henry Robinson,Crypto/DeFi/Web3 Enthusiast,2013,50,"I'm no expert, but I have gone from being an Agile ignoramus to living and breathing the stuff in a very short period of time. I wish someone had written something out like this for me when I started.
The lowdown. In layman's terms.
SCRUM Methodology Principles:
First things first, SCRUM is just one of several agile methodologies.
Release Often
Release small bits of code when they are ready (or on a regular short cadence like 2 weeks or monthly vs. every year).
Think of how a new Windows comes out every 2 years vs. how you get an update of apps on your phone like freaking constantly. The constant updates are coming from companies who use agile. (note, Microsoft or whoever may use agile, and release like waterfall. I understand the difference, but layman's terms remember)
The opposite of agile is waterfall. Waterfall is where you build a bunch of code and wait to release it all at once. Windows 7, Windows 8 etc. vs. nobody has any clue what ""version"" Facebook is on because they update it constantly.
The point of doing it this way is so that you can get constant business and customer feedback and incorporate it into the product as quickly as possible.
Efficient Project Teams:
Project teams usually consist of a small group of engineers, a product manager and a product owner (usually the business owner). They meet regularly for short periods of time and are constantly in communication about the status of the project.
Business, product, engineering should be co-located if possible. The meeting cadence and rules depend on which agile methodology you are using. A lot of it is bullshit, but some things are cool like 15 minute standup meetings. In a 15 minute standup, everyone gets together in the hall or by the water cooler or whatever,and tells everybody else what they are going to accomplish that day. This is where you can ask for help or collaboration from co-workers etc.
Dividing Major Projects into Tiny Tiny bits:
This has to do with the size of features. So for example, if you notice how startup websites come together, they usually have a fully functional, but simplified version of the product first, and then they add tiny features as time goes forward. This is done so that the product team can get constant customer feedback. This is in contrast to waterfall, where the product team goes into hiding for a long period of time, but what they emerge with might not meet the market or customer need anymore.
Milestones and Sprints:
This just describes way project timelines are divided. So milestones are a set period of time, usually 2 weeks and sprints are just tackling a single problem during that 2 week period. There can be multiple sprints in a milestone.
The impetus behind sprints and milestones is that for each sprint, some piece of the final product should be complete. At a milestone, the code should be ready to be shipped.
Regular Product Demos
At the end of each milestone, there needs to be a demo of shippable code. Something that has few bugs and meets the customer need.
Customer and Market Focus
I probably should have listed this first. The whole point of agile is to get constant user and business feedback while the product is being built. This also allows you to experiment more. That way, if you mess something up in the product, the next release is not to far away to fix it. Think Facebook and privacy settings.
Product Backlog:
In Agile, you are supposed to ship product on a regular cadence. All features are added to a product backlog, divided into small projects that fit within a sprint, and then prioritized. The backlog is just a way to keep track of all of the ideas people have, requests from customers, major bugs and other things. It's just a prioritized to do list that is constantly updated by the team. It's designed to keep the user first and make sure everyone is aligned on what to work on next.
The point is to be customer focused, get constant feedback and to ship frequently so you can test and iterate.
There are a whole host of details that I have left out here, but I believe this is enough to know for a marketing person. Feel free to correct any glaring errors. I would love to learn what I don't know."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Anand Kumar,Startup Specialist (2014–present),2021,4,"Agile methodology, in simple terms, means a guidance path for the companies to work efficiently. The idea is to adapt to the change instead of clinging to your plan. It’s about being responsive to the changing market and the customers, adapt and grow.
Yes, just like the word Implies, it can help your work progress quickly and easily. It follows simple four ideas:
Individuals and interactions over processes and tools: Humans perform software development; therefore the quality of interaction between them is vital. Though tools are an important part of software development, focusing more on teamwork regardless of the tools the team uses makes great software.
Working software over comprehensive documentation: For users and coworkers, documentation can be a great resource. However, software development aims to build software that delivers business benefits rather than vast documentation.
Customer collaboration over contract negotiation: The software development team communicates with customers frequently. By listening to and getting their feedback, the team will understand what stakeholders want.
Responding to change over following a plan: In software development, changes are a reality that your software process should reflect. A project plan should be flexible enough to change as the different cases demand.
Now moving on to Agile software development, the best way to explain the process is Divide and Rule. Not the British way of ruling countries, but the humane way of making the work process more efficient.
It works by breaking projects down into a little bit of user functionality, prioritising them, and then delivering them continuously in 2-4 cycles called Sprints or Iterations. In one short Sprint (2-4 weeks), a full development cycle is performed. It includes analysis, design, coding, testing, and product release.
At the end of each Sprint, developers release a working software solution, and the performance is evaluated by the customer. The lessons learned in each Sprint are captured in retrospectives and used in the next iterations.
Advantages
High-quality product
Reduces technical debt
Increased adaptability
User-focused testing
Creates total alignment and transparency
Reduced risks
Increased customer satisfaction
Improves time to market
Early and predictable delivery
Better project control
Disadvantages
Like everything, agile also has its downside. But unlike others, these can be easily mitigated.
It will be challenging to set KPIs because of the see-as-we-go nature of the program.
The documentation in this process doesn’t start from the beginning, but is mostly done just in time before the final output. Hence the resulting document will be less detailed.
The minimal planning at the beginning can easily get sidetracked but can be rectified with sufficient documentation or a clear vision of your final product."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Keshav,Content Writer | Software Developer,2021,0,"Agile methodology is a project management system that relies on incremental development. Each iteration consists of two- to four-week sprints, where each sprint's goal is to build the most important features first and come out with a potentially deliverable product. More features are built into the product in subsequent sprints and are adjusted based on stakeholder and customer feedback between sprints. Whereas other project management methods emphasize building an entire product in one iteration from start to finish, agile scrum methodology focuses on delivering several iterations of a product to provide stakeholders with the highest business value in the least amount of time. Agile methodology has several benefits. It encourages products to be built faster since each set of goals must be completed within each sprint's time frame. It also requires frequent planning and goal setting, which helps the scrum team focus on the current sprint's objectives and increase productivity.
The greatest benefit of agile methodology is its flexibility. With the sprint-based model, the scrum team typically receives feedback from stakeholders after each sprint. If there are any problems or changes, the scrum team can easily and quickly adjust product goals during future sprints to provide more valuable iterations. This way, stakeholders are happier because they get exactly what they want after being involved every step of the way.
Advantages-
1. Superior quality product: In Agile project management, testing is an integrated part of the project execution phase which means that the overall quality of the final product is greater. The client remains involved in the development process and can ask for changes depending on the market realities. Since Agile is an iterative process, project teams keep on learning and growing with time and continue improving.
2. Customer satisfaction: In Agile, the customer is always involved in the decision-making process which leads to greater customer retention. In the traditional framework, the customer is only involved in the planning phase and does not influence execution which affects flexibility and adaptability. By keeping the customer in the loop and making changes according to their feedback, you deliver value to the customer and ensure that the final product is truly according to their requirements.
3. Faster ROI: The fact that agile development is iterative means that the features are delivered incrementally. Therefore, benefits are realized early while the product is in the development process. Long delivery cycles are often a problem for businesses, particularly those in fast-moving markets. Agile means fast product releases and the ability to gauge customer reaction and alter accordingly, keeping you ahead of the competition.
4. People and interactions are emphasized rather than processes and tools. Customers, developers, and testers constantly interact with each other.
5. A result-oriented team: Agile fosters an open culture of idea exchange and cooperation within teams. It spurs lively team collaboration, boosts morale, and clearly defines all the roles and responsibilities. Each and every member is in-the-know when it comes to pressing tasks and priorities.
Disadvantages-
1. Active user involvement and close collaboration are required throughout the development cycle. This is very engaging, rewarding, and ensures delivery of the right product. It’s the fundamental principle in agile that ensures expectations are well managed. And since the definition of failure is not meeting expectations, these are critical success factors for any project. However, these principles are very demanding on the user representative’s time and require a big commitment for the duration of the project.
2. Requirements emerge and evolve throughout the development. This creates the very meaning of agile – flexibility. Flexibility to change course as needed and to ensure delivery of the right product. There are two big flip sides to this principle though. One is the potential for scope creep, which we all know can create the risk of ever-lasting projects. The other is that there is much less predictability, at the start of the project, and during, about what the project is actually going to deliver. This can make it harder to define a business case for the project, and harder to negotiate fixed-price projects. Without the maturity of a strong and clear vision, and the discipline of fixing timescales and trading scope, this is potentially very dangerous.
3. Agile requirements are barely sufficient. This eliminates wasted effort on deliverables that don’t last (i.e. aren’t part of the finished product), which saves time and therefore money. Requirements are clarified just in time for development and can be documented in much less...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Keshav
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Mohanakrishnan Gopalakrishnan,"M Tech in Computer Science, Indian Institute of Technology, Madras (IITM) (Graduated 1987)",2024-06,4,"Let’s try answering this question through a parallel - of building a house in place of software development. Mapping the answers to the software domain should be straightforward.
Agile is like moving into a house while you are building that house. At the outset this might sound crazy, but this has many advantages and of course disadvantages.
Pro : You don’t have to wait for a couple of years to move in, you start enjoying the house early in the development cycle. Also you save on rent while building the house. Con: In the initial phase the house will be quite unliveable, you have to live through that. Also you are more involved in evolving the house on a day to day basis. This takes extra time from you compared to when you totally outsource the building work based on an approved plan.
Pro: You don’t have nasty surprises in the end - you keep finding and fixing issues and discomforts as you keep building
Pro: You don’t need to have a grand plan in the beginning to start building. If you are not a grand plan person, this is your cup of tea. You start discovering what you need as you start living in the house and you keep building the top priority features at that point. This helps you discover the needs as you go by. Con: If you are a grand plan person, you would hate this. Also, if you are really good at dreaming up the ideal house, and won’t have to make much changes to that plan, you will have a more optimal design if you start with the grand plan.
Pro: As a person living in the house, you are able to provide continuous, lived-in feedback every small change that is getting added to the house. This is a million times better than the kind of feedback you would be able to give looking at engineering drawings of the house. Con: If you are too fickle minded, you might keep changing your requirements and you might end up spending much more on scope creep than otherwise."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Maya Misra,Digital Marketer,2021,2,"Here Are Some Pros & Cons of agile methodology :
Pros:
Continuous Improvement
It gets challenging to stick to your plans considering ever-changing client’s requirements and moods. Agile methodology empowers your clients to keep their views amid project development, and you to improvise according to their current state of mind.
2. Client satisfaction
The model allows you to arrange open communication with your clients. With video conferences or calls you can understand minor project requirements and raise tokens should there be any problems. Apart from strengthening relationships, the system gratifies your clients making them feel valued for their opinions. The early working prototype satisfies your customers.
3. Reduced Risks
The changing trends and fickleness of client’s requirements often cost developing companies more than they anticipate. Imagine being at the fourth stage of a cycle, and your client refuses to accept the design. How much would the deconstruction and starting from scratch cost? But the agile model reduces all the risks as you’re keeping them posted at each sprint.
4. Adaptive approach
Need to change a module? The session-based skimming allows your team to travel extra-mile to have the most optimized functionality. The self-organized and motivated teams in the agile web development model help easy adaptation and customization without flattening your wallet.
5. No strict structure
With no strict structure or project scope, the project remains flexible throughout the development phase. You can scale or descale the project too.
cons:
Not useful for small projects
Agile projects have overhead costs in terms of meetings, reviews and retrospectives, daily stand-ups, client interaction, and a lot more. You might not want to go for it for small projects— the projects that won’t ring much of your cash register.
2. Takes more time
With the waterfall model— the probability of changes is 0.5 by the end of the project, i.e., your client may either nod a yes or say a no! But with continuous client engagement and reviewing in the agile web development model— you might have to have regular changes every sprint. Plus iterative meetings and reviewings can consume a lot of time.
3. Needs an expert to take major decisions
The agile approach is not possible without the decisions of the expert in the company. It needs a managing force to arrange meetings, dividing sprints, reviewing work, and interacting with clients. The process may not move if the concerned person goes missing for a few days.
Thank You!!"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Anand Singh,QA Manager,2022,60,"Hi,

Agile Model/Methodology is one of the procedure followed while software development and testing for the products. In short, It is a concept being used in SDLC(Software Development Life Cycle). Agile Methodology is an iterative and incremental approach, where the features keep on adding and as a company should ensure it is flexible enough to handle it and deliver it within a short period of time to gain customer's satisfaction.

Examples of approaches to agile model are:
1) Scrum
2) Kanban
3) Extreme Programming (XP)
4) Feature Driven Development (FDD)
5) Adaptive Software Development Method(ASDM)
In most of the companies providing 'software qa services are using ""Scrum"" and ""Extreme Programming"" methodlogies
It is very common now a days that most of the Software companies follows agile methodology. I have consolidated advantages and disadvantages below:

Advantages/Principles of Agile Method:
1) Product release process will become very fast
2) Requirement changes are allowed at any stage of Agile Model
3) Main Goal is Customer's Satisfaction
4) There will be a good communication between Customers, Business Analyst, Developers and Test Engineers
5) It is a very Easy Model to adapt
Disadvantages of Agile Model:
1) There will be less focus on Designing and Documentation as it plays a major role in Waterfall model.
2) Final product is not released first
3) Long-term projects suffer due to incremental delivery.
4) Difficult to handle
5) Sign-off at every phase is required to allow developers to move forward.
Hope the above information will help you.
Thanks,
Anand"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Mike Fontner,IT-Security Engineer / Application Security (2020–present),2020,1,"One of the disadvantages - that most people are not aware of in the beginning - is that it puts all responsibility much further down in the “food-chain”.
The rule most prevalent I found so far is this one: “You build it, you run it!”
Seems to be simple and logical at the first glance. True it IS simple and logical.
AND it has a TON of implications most managers, expecially in the upper management are absolutely not aware of.
For example: If I’m the one running it, then I also want to know what happens while the system is under production. I also want / need to know how the system is fairing under test. I also … ! You get the drift.
In agile, High Quality DevSecOps is imperative to do your job successfully! No manager can tell you exactly what to do when and how, because they don’t know what you solved how and where.
The whole responsibility is on the team. Therefore the team has to decide what works best … for the teams responsibilities.
In a working agile environment (emphasis is on working!) the role of a manager is not to tell people what to do but to make sure that the team can do what it has to do in order to fullfill it’s responsibilities! That also means to clear obstacles in whatever form they appear, make sure different departments work smoothly together, make sure the proper talent is represented in the team, coaching your people to get the proper education they need if necessary, etc. pp.
The pressure, the responsibility and also the lack of someone else to blame is not for everyone though. You need properly geared people as well who apprechiate such an environment, because nobody will tell you what to do when and how. That’s YOUR (!!) repsonsibility too.
And that’s just one aspect.
A switch to agile is so deep and brings such profound changes in the whole culture, that old silos and management structures within the whole company will either be destroyed in the process or the agile will fail. Because you cannot have only a small agile thingie somewhere in the company while the rest goes “unspoiled”.
It’s an all or nothing decision.
Yes, IF agile is truly implemented, you can reap a LOT of benefits!
BUT on the road to fully get a grip, figure out what works for you and what not, million things can go wrong and nothing will be achieved. Then agility is blamed. It’s not the system though. It’s the change, that people resisted."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Emily Hilton,"Former Blockchain Enthusiast, Business Consultant",2022,1,"Hello,
Let us discuss the pros and cons of Agile methodology from the following points:
The Pros and cons of Agile methodology:
There must be a compelling reason to use the Agile methodology beyond the notion that it’s the ‘latest and greatest
Agile offers flexibility
Agile empowers the team
Time to market is accelerated
Learning is encouraged and embraced
More opportunities for creativity exist.
Product Gets to Market Faster
Better Communication
Immediate Feedback
Embracing Uncertainty
Less Defective Products
In Agile methodology the delivery of software is unremitting.
In this methodology attention is paid to the good design of the product.
Changes in the requirements are accepted even in the later stages of the development.
Customers can have a look of the working feature which fulfilled their expectations.
If the customers has any feedback or any change in the feature then it can be accommodated in the current release of the product.
In Agile methodology the daily interactions are required between the business people and the developers.
Cons of an Agile Methodology:
The outcome and timeline are less predictable
The customer (product owner) must invest time in the project
Documentation is not a deliverable of Agile
A trust relationship must exist between members of the team
Sometimes in Agile methodology the requirement is not very clear hence it’s difficult to predict the expected result.
In few of the projects at the starting of the software development life cycle it’s difficult to estimate the actual effort required.
If you're looking for a better career I personally suggest to go for agile tester certification
If you are wondering where to begin this journey? Then you should check the certificate in agile tester certification
As I have one reference for a Agile Tester Foundation Certification I found one course on google they provide certificates
The certification cost is also affordable here.
Many of the reputed company employees have done this courses from here and give good responses and rated this certificate as the best
To get this certification you have to pass the GSDC Institution certifications.
GSDC's certification is aimed towards sharing a deep understanding of all the advanced l and d certification
The purpose of agile tester certification qualification is to confirm that a candidate has sufficient knowledge and understanding of the benefits of this certification."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Maria Matarelli,Founder & President at Formula Ink,2017,14,"Want To Do Twice The Work In Half The Time? You Need To Know This Framework
Put simply, Agile is an approach that helps people work more effectively. Just like it sounds, Agile is a nimble, flexible, and adaptable way to work. Companies use this approach to better manage work and get to market faster. It’s a methodology based on the Agile Manifesto values and principles (Manifesto for Agile Software Development). Most of us are familiar with the trials and tribulations of project management. Whether a startup or Fortune 500 company, projects often take longer and cost more than expected. That’s where Agile comes in.
Agile improves the speed, transparency, and adaptability of a company’s process by breaking big projects into smaller pieces that are more suitable for release or testing. This can be applied to software development, product development, manufacturing, just about any industry, even marketing. Think of it as “micro-testing” smaller elements of a product being developed, with improved efficiency being the driving goal as you prioritize and deliver small segments of each project.

So for example, if a company needs to launch a new website but can’t wait months for it to be finished, an Agile approach would be to put up a homepage with a nice photo, the company name, mission statement, and phone number. This would be a Minimal Viable Product (MVP). Then, each week, add a page that describes their services, then a page that shows their portfolio of work or customer testimonials, and continuing to add more pages until it’s finished. Break the project into small, manageable tasks and get going. For each website page that is finished, we can make that page go live before the rest of the site is finished. That’s an Agile approach. Many companies see great results in getting to market faster using an Agile approach, often with the Scrum Framework.
So, where does the term Scrum come from? In rugby, Scrum is a method of bringing the ball back in play after a pause in the game. The two teams are huddled together around the ball, all pushing up against each other to see who can gain possession of it—and they have to pass the ball backward in order to then move forward and score. It's a very collaborative approach. So, in Agile, we need everyone on the team working together toward a common goal. And we work in time boxes (either a week or two where we plan to complete something) then iterate upon our product as we release incrementally.
There are many types of Agile approaches including Scrum, Kanban, Extreme Programming (XP), and others. According to a survey done by an Agile software tool company called Version One (11th Annual State of Agile™ Report | What's the State of Agile Today?), Scrum is the most commonly used Agile framework. They do a “State of Agile” survey every year, and recently found that about 58% of companies that use Agile actually use the Scrum approach, while more than 80% use Scrum or a hybrid of Scrum.
Whenever I get too technical about the framework when talking to people, I watch their eyes begin to glaze over. But as soon as I say, “Listen, this will help you do twice the work, but in half the time,” everybody’s response is “I need that. I need that in my life.”
Don’t we all?
This is the simplified message that Jeff Sutherland, one of the creators of Scrum, loves to drive home. He says “Scrum helps you do twice the work in half the time.” However, when done properly, the output is much greater than just double, it really is exponential.
By working in short iterations, informed decisions and improved results in less time means way more bang for your buck.
But here’s the thing: Agile can actually be applied to a whole range of industries, not just marketing or project management. In fact, the same approach can even be applied to your life, your personal habits, and your everyday goals.
How I got interested in Agile says a lot about the impact the process can have on both a business and any individual person.
I have never been the type of person to sit in an office all day, working 9 to 5 and finding fulfillment from just that. That concept of corporate slavery (for lack of a better term) was never the future I imagined for myself. I’ve always believed there is more to life than repeating the same, seemingly meaningless cycles day in and day out.

When I was 22 years old, fresh out of college, I was working in project management already leading $5 million projects at State Farm, while simultaneously managing people twice my age to ensure milestones weren’t being missed.
Now, was this my “be-all-end-all?” Not particularly. But I was fascinated by what I was learning, and I saw the value in it.

I felt a little out of my league at first, being a recent college grad managing such large projects, but I’ve always loved the opportunity to learn on my feet and prove myself. I really never have been one to remain within my perceived comfort zone, because I knew there was greater reward to be found beyond it.

Whatever the task, I always knew I would find a way to figure it out.
It wasn’t long before I began applying the streamlining techniques I had learned within previous roles to reduce State Farm’s yearly budget for an enterprise project from $3 million per year to $1.5 million. With these improvements, we were able to ramp up the project to include three releases per year instead of two, and develop a repeatable process that we could outsource to free up our onsite people for more strategic work within the company.

This was when I discovered my interest in improving project management and began to turn the page into Agile.

Here I was, just a young kid working at a huge company, managing multi-million-dollar projects, learning and adapting as I went, while aligning myself with mentors I knew could guide me in the right direction. Yet, I noticed a common theme across my colleagues: no one wanted to learn this new concept of “Agile”.
Why?
Because it was a new and unfamiliar approach. They were perfectly content sticking to their traditional methods, instead of considering that there might actually be a better way to do things.

My colleagues viewed this change as a threat, but I saw it as an opportunity to become an expert in a new, cutting-edge concept that others in my industry were afraid to touch.
I was ready to break the mold.
Following a few certifications and initial projects, I quickly became the go-to “Agile” person in the company, leading weekly lunch-and-learns to speak on delivering projects more effectively using Scrum.
Now, I speak all over the world on the importance of Agile, and I help train leadership teams and development teams across many countries and industries in implementing these processes into their businesses. I became one of only 220 Certified Scrum Trainers (CSTs) in the world. Then, my team and I discovered that applying Agile to Marketing yields incredible results in generating more revenue the way we see Agile applied to software development resulting in increased speed to market.
By learning and understanding how the Agile process worked, you could say I applied that same methodology to my life. I left the 9 to 5 world, have my own businesses, and get to travel to countries I never before dreamed of being able to visit."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,JOY OF PERFORMING,Helping organizations achieve more,2023,1,"Running a tech team is not easy. When you are new, you cannot just decide to adopt the agile methodology. You must understand your business priorities and critical goals. You have to prepare your team and the customers for this.
Implementing agile practices takes time. Being agile does not mean doing everything fast. It's about doing the right things at the right time more accurately. People have to settle in and allow room for growth as they go.
Pros & Cons of working with agile methodology
Don't think there is a fixed plan for agile practices. It depends on other factors like your team size, projects, clients, resources, etc.
Below are some commonly seen pros and cons of using the agile framework.
Pros
Immediate feedback on the product - Users directly give feedback to the development team.
Elimination of silos - Team members collaborate actively.
Can help you get highly competitive - Software industry is aggressive. It is helpful to have efficient product improvements.
Team gets more autonomy - Agile group gets to take risks and experiment.
Working software versions are tested - Team tests real software with users, not some plan.
Efficient collaboration
Transparency in product enhancement - Users can see the past product roadmap and each improvement.
Lean and productive product development - Cost-cutting and efficient production.
Cons
Lack of purpose - The tasks may be pretty clear, but the overall purpose behind the work may not be communicated and understood.
Can get less holistic - People can get too involved in the processes that they may forget critical priorities or company values.
Easy to misinterpret the methodology - Teams can mistake agile for faster deliveries rather than focusing on quality.
Project management can get messy - If not managed well.
Professionals may get less time to grow - People may get busy and not take time to reflect and analyze their performance.
Can go off-track from critical business goals - Focusing too much on agility may lead people to derail from main goals.
It's always good to work more efficiently, but it all must move your business forward. Be clear about your priorities.
The OKR framework is a very effective methodology to allow your team to focus on critical business priorities. Talk to our OKR experts to know how it will enhance your business.
Got any questions? Please comment."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Noah Jonas,Technical Content Creator & Researcher,2023,60,"In the modern digitalized world, the majority of software development companies follow agile methodology for achieving a more seamless and efficient development process. The agile software development methodology is different from the waterfall as it puts focus on developing software in an incremental and rapid cycle. Thus, for a project which involves repetitive in-between feature additions by the client, this particular methodology can ensure enough flexibility to complete it and deliver it within the specified deadline.
Advantages of opting for agile development methodology:
Increase internal interactions between testers, developers, and business people.
Shifts in the client's needs can still be taken into consideration even at the later stage of development.
The delivery of software is continuous under the Agile methodology.
Good product design is the top priority.
Flaws of agile software development methodology:
The resource requirements and effort required for complicated projects are difficult to estimate.
It is impossible to estimate the actual work required in a few projects at the beginning of the software development life cycle.
Challenge to predict the final outcome as the requirement keeps changing over time.
To know more about agile software development you can read the blog.
Agile Software Development: Best Practices, Challenges, and Solutions - Apptread
Agile methodology in software development projects helps in assuring the timely delivery of highly enhanced software solutions and 100% client satisfaction.
https://apptread.com/blog/agile-software-development-best-practices-challenges-and-solutions/"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Emily Hilton,"Former Blockchain Enthusiast, Business Consultant",2022,60,"Hello,
Let us discuss about agile methodology and the advantages and disadvantages of agile methodology:
An agile methodology is a project management practice that promotes a collaborative, iterative and incremental approach to project management.
It is said to be agile because it estimates both your initial needs and those generated by future changes.
Agile Methodology is a process of software development (such as other software development methodologies – waterfall model, V-model, iterative model, etc.), however, the Agile development model is also a type of incremental model.
Software develops in incremental, rapid cycles. In English, Agile means ‘the ability to move quickly and easily’ and respond to change rapidly – this is an important aspect of Agile software development.
Advantages of Agile Methodology :
In Agile methodology the delivery of software is unremitting.
The customers are satisfied because after every Sprint working feature of the software is delivered to them.
Customers can have a look of the working feature which fulfilled their expectations.
If the customers has any feedback or any change in the feature then it can be accommodated in the current release of the product.
In Agile methodology the daily interactions are required between the business people and the developers.
In this methodology attention is paid to the good design of the product.
Changes in the requirements are accepted even in the later stages of the development.
An Agile/Scrum approach can improve organizational synergy by breaking down organizational barriers and developing a spirit of trust and partnership around organizational goals.
Disadvantages of the Agile Methodology :
In Agile methodology the documentation is less.
Sometimes in Agile methodology the requirement is not very clear hence it’s difficult to predict the expected result.
In few of the projects at the starting of the software development life cycle it’s difficult to estimate the actual effort required.
Because of the ever-evolving features, there is always a risk of the ever-lasting project.
For complex projects, the resource requirement and effort are difficult to estimate.
If you want to make a career into agile scrum foundation then I personally recommend you to do agile scrum foundation certification GSDC Certification
If you're looking for a better career I personally suggest to go for agile and scrum foundation certification training online
If you are wondering where to begin this journey? Then you should check the agile scrum certification
As I have one reference for a agile scrum foundation certification I found one course on google they provide certificates
The certification cost is also affordable here.
The agile scrum foundation certification cost $200. This certification is from GSDC. You can check the syllabus on their official websites.
Cost : $200
Location: Online
The GSDC certification bodies provide courses online and it is valid and accepted globally.
Many of the reputed company employees have done this courses from here and give good responses
To get this certification you have to pass the agile scrum foundation certification Exam from GSDC Institution.
GSDC is globally accredited Agile Scrum Foundation certification validates your knowledge in Agile methodologies and Scrum practices.
The purpose of agile and scrum certification qualification is to confirm that a candidate has sufficient knowledge and understanding of the benefits of this certification.
Grab our year ending delight just in $ 200 and see yourself upskilled before 2022 hits you hard!
Hurry up! This limited period offer is valid till the 31st of this month only."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Aditya Pratap Bhuyan (ଆଦିତ୍ଯ ପ୍ରତାପ ଭୁୟାଁ),Former Consultant at Dell EMC India (2018–2024),2023,1,"There are many advantages of Agile methodology for project management. Agile methods can help teams manage work more efficiently and do the work more effectively while delivering the highest quality product within the constraints of the budget.
While Agile teams work well as a unit and can react better to the inevitable changes that come with most projects, there is one facet of project management that Agile teams often overlook: Visual management.
The Benefits of Agile Development
With visual management, Agile teams can enhance their ability to work effectively by presenting the data in a visual way rather than in list-form on a spreadsheet or in a wiki. This way, it is easier to comprehend project details and to manage change.
Major benefits of visual project management for Agile include:
Visibility of project details
Increased team efficiency
Ability to adapt to changes
Ability to scale
Let’s take a closer look at some key characteristics of an Agile team and explore how visual management can help.
Agile Characteristics
Agile is a method for getting the work done that really matters. For example, instead of spending hours or days building out a detailed project plan that may or may not match the project’s execution, an Agile team would begin with a small portion of work, assess progress, then continue down the path once enough feedback has been gathered to indicate they are on the right path.
Principles of how to work as an Agile team are laid out in the Agile Manifesto, a set of guidelines that were developed by software developers to establish expectations around how to operate. These principles place:
People before processes and tools
Working software over documentation
Collaboration over negotiation
Change management over project planning
One of the primary areas of focus for Agile teams is the ability to work iteratively. Iterative work is completed in short cycles with a small portion of the overall project done at one time.
The main benefit of iterative work is that less work gets wasted. That is, when something changes about the project, the amount of re-work that must be done is minimized. In other words, teams don’t have to go too far down one path, only to find out they must backtrack and start all over again.
The theme of iterative work extends beyond the project level and can be applied by breaking down any amount of work into manageable tidbits that can be clearly represented visually.
One rule of thumb when practicing visual management with iterative work is that all work should be broken down as much as possible, so the team can see the work, prioritize the most important items, and divide and conquer.
It is not uncommon for software development projects to take months or even years to complete. During a project’s timeline, changes can occur either in technology or with the business requirements.
Changes to the business requirements of a project usually mean the project will take more time, and more time means more cost. Because change is the only constant when it comes to project management, incremental work methods like Agile are necessary to help control a project’s final cost. And in the software world, costs can skyrocket quickly and are often a primary driver of a company’s decision on whether to move forward with a project.
Team efficiency
Agile teams are known to be highly efficient at getting work done. Because Agile teams share a collaborative culture, efficiencies tend to have a ripple effect.
Look for an Agile solutions provides insights into delivery trends to remove bottlenecks and adapt workflow processes for improved productivity.
When everyone agrees on what the most important work is, and when each person can focus on the most important work, the entire team moves forward in unison, falling into steady cycles of work production and product releases, which contributes to the predictability of Agile projects.
As you can see by the relationships between efficiency, collaboration and predictability, the characteristics of an Agile team are interconnected so that one characteristic feeds into the next, forming a holistic set of habits that can be described as Agile.
Adaptability of a software development team
Project managers cannot see into the future, but they can impact how easily a team is able to adapt to changes when they occur. The ability to adapt to change is a cornerstone of Agile project management and is one of the key advantages of Agile methodology.
When teams put their time to good use, they can deliver what the stakeholder wants without overspending. This not only makes stakeholders happy, it makes project teams happy to know they have used their skills to deliver a quality product.
Scalability of Agile projects
Time and cost are the main factors in determining whether a company will go forward with a project.
How long will the project take?
What will it cost?
Will it be worth the initial investment to get this project done?
What else could be done with the same resources and team members that may hold more value?
The last question is the most important one related to this article, because it touches on a key point: The larger the company, the greater the need for an Agile project management system.
How best to utilize people and resources is a question that comes up constantly, especially for companies that cannot predict the frequency of projects yet to come. As companies continue to struggle with having too much work and not enough people to do it, new ways of scaling projects have emerged.
Driving agility across teams requires a consolidated view of work priority and project status, whether in the same room or distributed across the globe.
Productivity analyses can help teams understand how the same amount of people can work smarter and produce more without investing in additional resources. Conversely, companies must take care not to commit too many resources to a project only to find the value does not justify the costs associated with getting it done.
Instead of evaluating whether their team members are focusing on the work that holds the most value, some companies skirt the issue by requiring team members to work longer hours. While this may be a short-term solution for a sudden, one-time increase in workload, overworking team members can quickly take a toll, resulting in lowered team morale and decreased productivity.
A key advantage of Agile methodology is that it is a scalable project management tool.
Not only can the principles of Agile be applied across multiple functions within a project team, they can also be applied to multiple project teams and leveraged by project management offices (PMOs) to analyze productivity and identify areas of improvement.
Using Agile project management helps companies pool resources and assign the right people to the right projects according to need or priority.
Predictability for Agile project managers
Companies measure the value of a project in terms of cost and returns. If the returns from a project outweigh the cost, then a company may decide to go forward with that project. But if the cost of a project is unknown, as it is with many projects these days, predicting the outcome of that project in terms of success becomes almost impossible.
For this reason, predictability in projects is important. One advantage of Agile methodology is that when companies take the time on the front end to plan a project using Agile techniques, they can estimate the cost of a project to determine whether they should continue.
There is no single characteristic of Agile that makes it work so well to manage projects. Instead, it is the holistic practice of Agile that makes development teams successful. When project teams choose to practice Agile, they are practicing a concept that is still evolving, making this one of the best ways to work in a culture of continuous improvement.
Source : PlanView"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Rajeev Techexpert,Author has 77 answers and 81.1K answer views,2020,1,"Hi,

First of all lets understand what is agile model?

Agile model is a type of project management process which is mainly used for software development. Where demands and solutions evolve through the collaborative effort of cross-functional teams and customers.

Advantage of Agile model:
- Developers, testers and customer can interact with each other.
- Software is delivered frequently.
- Continuous monitoring to technical excellence and good design.
- Daily coordination and cooperation between business people and developers.
- Adaptation to changing circumstances.
- Even last minute changes in requirements are welcomed.
Disadvantage of Agile model:
- Agile model is not useful for small development projects.
- Project can easily get taken off track if the customer is not clear about final outcome.
- Documentation of the project is less detailed because of the nature of agile.
- Agile Model require more time and commitment as customers, developers and testers must constantly interact with each other.
Above answer is based on my experience in a software app testing company. I hope this will help.
Do let me know in case of any query regarding the same.
Thanks,
Rajeev"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Kevin Goldsmith,"Have used Agile techniques since 2000. Extreme Programming, Scrum, Kanban, Rational, etc.",2019,4,"Plenty of good and extensive answers here. Rather than repeat what has already been said multiple times, I will try to answer what I read as the spirit of your question instead of getting into the details of how Agile and Project Management interrelate. This is based on my experiences working for years in non-agile environments before switching to Agile development. I have a clear bias towards agile to be transparent.
Advantages of Agile for Project Management:
More flexibility - when working against uncertain deliverables or in a new area where you are exploring.
Deliver quickly - Since agile focuses on bringing value to customers faster and focuses on frequent releases it works well if you want to get something to your customers as fast as possible
Better team engagement - Agile focuses on leveraging the whole team for planning and reviewing, so you have better team engagement than in non-agile processes.
Disadvantages of Agile for Project Management:
Less predictable deliverables. If you have signed a contract with a customer for a specific set of functionality on a specific date, agile can be difficult to have confidence in making your commitment because it works forward instead of working backward.
Difficult to coordinate cross-team dependencies. Theoretically, with estimation, velocity and well-groomed public backlogs cross-team dependencies aren’t an issue. In reality, the number of companies trying to figure out how to scale their agile teams says otherwise.
Accountability to deliverables is more challenging. If you have a set of pre-agreed upon milestones and a team misses it then it is clear that they went wrong. In agile, establishing how well is working is its own challenge.
In my experience, the disadvantages all have reasonable solutions in a true agile cultured company. Also in my experience, the non-agile solutions to the disadvantages don’t really solve the problems either, they just make the issues more visible to leadership.
If your company doesn’t have a true agile culture, then the disadvantages are probably overwhelming."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Nabarun Mondal,Engineering Leader with 20 years of Experience,2021,26,"Agile is NOT a methodology. It is a mindset.
Team must deliver faster, simpler, workable code.
The only success criterion of agile is how much time saving it had.
If using other mindset it used to be delivered in X hours,
and Agile can do it in 0.1X hours, agile mindset has own.
Anywhere it is not possible to do, agile is at disadvantage. That includes every possible “serious” Engineering domain.
Agile will not work, does not work anywhere serious Engineering is required - build engine of SpaceX rocket.
If someone is actually developing a kernel - even then I do not think Agile works."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Jessica Wood,"M.tech in Physics, Chemistry, and Mathematics (science grouping), Thomas Jefferson High School for Science and Technology (TJHSST) (Graduated 2010)",2020,1,"Agile methodology has grown to be among the most popularly used development methodologies in today’s world. While its rise has been especially notable in the twenty-first century, agile methodologies have been in use for over twenty years now.
PROS OF AGILE METHODOLOGY
Flexibility
Embracing Uncertainty
Immediate Feedback
Less Defective Products
CONS OF AGILE METHODOLOGY
Lack of Documentation
Scope Creep
Time
Lack of Predictability
Thanks!"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Jonathan Bush,"23 years PM, including PMI PMP , moved into Scrum & Kanban",2023,0,"Agile is great for software development, where functionality is being added to a base. The order is unimportant, allowing the sequence to suit business importance.
Agile is useless for infrastructure projects, because the sequence is critical. You can't install a server without first acquiring it, which first needs planning and designing, approval for the spend, etc. Various parts have to come together ,which means scheduling is critical."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Chandan Prakash Sharma,Scrum Master,2018,10,"A2A
Look this image:
Here if you observe, in both cases we were building same product but difference is in approach.
Case-1:
You need to wait till end to get delivered the product. Till that you just have to wait… And even after that it’s not sure that you will get the product as you expected.
There might be gap in expectation and actual. And it’s obvious… The development team might have understood different as compare to your visualization. Or there might be reason that after so long duration, your requirement itself got changed (earlier you were expecting something but now it’s something else. As during this tenure you might have observed some newly came product in the market or evolved with new ideas in between).
Whatever be the reason but you are not happy with deliverable. Because of that we need to change it again. Which requires cost and time.
So as a whole if we summarize: then we can say till the date product deliver you kept in a blind fold. You are only investing money but not getting any output to use.
Case-2:
In case-2 , you are not required to wait till very end to get deliver the product. As here product development is divided in no. of iteration. So after each iteration you will get something to use. Which makes you start getting benefited from very beginning.
In addition to this, it will provide more advantages, like:
As you are getting deliverable after few days only, so you can re-view and give your feedback if any changes required. Because of that development team can make those changes easily as changing is easier at begging as compare to changing very end when every thing is buildUp. It will cost and time saving.
Margin of difference b/w actual and expectation will be thin.
Implementation cost is less
As you yourself involve from beginning itself so development will go on track
With small team size and resources we can build the product
Proper utilization of resources
Conclusion
As you can see, case-2 having lots of benefits as compare to case-1…
Right ?
This case-2 is nothing but Agile approach of building the product. Whose base line is MVP (Minimum Viable Product).
Agile methodology is iteration based model, dividing big requirements to small-small sub-requirements, prioritizing them (as per MVP) and developing them in phases (nothing but Sprints).
An iteration is the routine of developing small sections of a project at a time.
Each iteration is reviewed and assessed by the development team and client.
Key Features
Lower Cost
Encourages open communication among team members, and clients.
Thanks…
Sources: Google"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Naveen Kumar Singh,Confused agile coach but excellent software developer.,2020,2,"Why to look for advantages or disadvantages? Can model have any such things? It is for the people who practice not the model itself. If you choose wrong model to solve your problem then how can you blame model?
Does waterfall model have any advantages or disadvantages? No if it is use for the purpose it solve. Similarly agile model is to develop software product. What if you try to build house incrementally using agile model? It will fail and become too costly."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Darren Thatcher,Agile Coach + Jira & Confluence expert (2010–present),2019,6,"Hi Jessica,
Thanks for your request for me to answer “What are the advantages and disadvantages of Agile as a project management tool?”
I’m an agile consultant, an agile coach and a scrum master so I should be able to answer this
“Agile” isn’t a project management tool: it’s a way of thinking and behaving, or - as we like to say - “mindset and behaviours”
It’s essentially:
an opening sentence about uncovering better ways of doing something but actually “doing” it as opposed to just talking about it, and in addition “helping others to do” it too
Four value statements
Twelve principles
The advantages are that if these values and principles were common across 17 successful people in the 1990s (the 17 signatories of the Agile Manifesto in 2001) and furthermore it’s stood the test of time since then, then they’re probably applicable today also, in the same way as the Lean principles have also stood the test of time.
I can’t think of any disadvantages. An analogy could be as follows: if a principle of a successful marriage was communication, then what would the disadvantage of communication be?
Agility teaches us certain mindsets and behaviours such as collaboration and valuing individuals and interactions more than valuing processes and tools; for example: before writing that email to your work colleague that sits just behind you, instead go and see if they want a coffee. This actually happened between two project managers that I was an agile coach for back in 2016: one had heard the other did reporting that the stakeholders really valued; when I suggested they talk the first project manager reached for his keyboard to write an email when the other sat just a few meters away. I paused him and said “Watch this…” and then went and invited the other if he fancied a coffee. I got them both talking over a coffee and the knowledge was shared. This was effective because “English language in written form is weak” (one of my many one-liners) and the sample I give in training to demonstrate this is: “I didn’t say I love you” and then I emphasise the various words: I didn’t say I love you; I didn’t say I love you; I didn’t say I love you; I didn’t say I love you; I didn’t say I love you (that last one kinda acts like the punchline to a joke - it always brings about a reaction in my class haha) but the point has been made. This is because communication between humans involves three components: words, voice intonation and body language. i go on to further demonstrate this by inviting my audience to reflect on how they found they’d proof read and correct emails they’d written to get that “perfect” communication, and then it still wasn’t received as the writer intended. Lesson learned: English language in written form is weak.
That last paragraph is just one small part of agility.
Such is the common sense of agility (and another one of my one-liners is “Agile is just a big slap of common sense”)
I still can’t think of any disadvantages :)"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Chuck Cobb,Agile Project Mgt Author and Instructor (Over 200K Students),2018,11,"The biggest weaknesses in Agile/Scrum are not in Agile itself but in how it is implemented:
Agile “Zealotry” - Some people see Agile/Scrum as a “panacea” for any problem you might have and attempt to force-fit all projects to an Agile/Scrum approach. Agile is not a solution for every possible problem you might have.
Agile versus Waterfall Misconceptions - Many people think that there is a binary and mutually-exclusive choice between “Agile” and “Waterfall”. It is sometimes necessary to blend Agile and traditional plan-driven project management principles and practices in the right proportions to fit the situation. That is frequently true when you try to scale Agile to large, complex enterprise-level projects.
Agile requires training and should be done intelligently - Agile is intended to be adaptive and you should fit the approach to the nature of the problem but many people do it rigidly and mechanically because they don’t understand the principles behind it at a deeper level.
Development and Business Perspective - Many people see Agile from a “development perspective” and assume that whatever is good for the development process must be good for the business as a whole. Creating an enterprise-level Agile strategy needs to fit the nature of the company’s business and should be done in that context. It is not simply a matter of just forcing a company to become more Agile in many cases."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Kousalya Mariappan,Feel to ask about testing!,2016,15,"Agile:
It is an incremental and iterative approach, where the requirements keeps on changing and as a Company we will be flexible enough to meet the changes and deliver Quality software to the customer.
The main goal of Agile is Customer Satisfaction by delivering Quality software in short period of time.
Thank you! :)"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Sachin Chauhan,Engineer in making,2021,1,"Agile is B.S.
It's has no advantage, doing work in iterations is a sign of the incompetency of developer and more over the unclear goal of the client.
To avoid these two issues, they have created very cleverly this so called Agile methodology, which if you look closely you will find that it complicates things and kills innovation.
This is just non-sense created by some MBA grads.
This method helps everyone except the people who actually do the damn job.
Purely managerial oriented process.
It is a poor attempt to make demeaning and scut work interesting.
In simple terms, suppose you order a burger at McDonald's. Now, instead of waiting for it patiently outside, you go into the kitchen and follow the process till a bigger is finally made. Just imagine, the ruckus you are gonna create in the kitchen.
Now, you are the client and kitchen workers are the developers. The person at the counter is the manager just facilitating the client to have his way."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,John Lee,Lived in The United States of America,2020,3,"5 Key Disadvantages of Agile Methodology
Poor resource planning
Limited documentation
Fragmented output
No finite end
Difficult measurement"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Harsh Gupta,Make $$$ listening to b2b sales pitches on fozzie.io,2021,16,"Agile is an approach to software development that seeks the continuous delivery of working software created in rapid iterations. Agile Software Development uses adaptive approaches and teamwork to focus on continuous improvement. Agile software development methodologies are all about delivering small pieces of working software quickly to improve customer satisfaction.The underlying values for agile projects are: Individuals and interactions over processes and tools Working software over comprehensive documentation Customer collaboration over contract negotiation Responding to change over following a plan
Agile methods stress working with users throughout the development process, continuing even after deploying a product or system (also called as incremental deployment). They promote evolutionary versus revolutionary changes, which can lead to more improvements in quality and customer satisfaction due to fewer surprises when it comes time for release. Agiles work best in dynamic environments such as construction where new requirements arise from user interaction during the course of the project.
Adaptive development methods seek to deliver business value early, which are the most likely to have a positive return on investment. Adaptive methodologies guide people and groups in iterative cycles to improve products, services, or the process that delivers them. The goal is to refine requirements and scope, adding solutions as appropriate according to what has been learned over time. Agile projects try to minimize waste caused by bad processes or poorly articulated goals at the expense of perfection in detail. Agile models can be applied successfully across different scales of product delivery – from small teams involved with quick design-build-test iterations used for prototyping new ideas through very large multi-disciplinary agile teams that work collaboratively during all phases of an enterprise's IT portfolio from product concept to realization.
Agile projects are more likely to succeed since they deliver working solutions quickly. In contrast, traditional approaches are more likely to fail due to the time and money wasted on projects that need significant reworking or that never produce a product in users' hands. The leading agile methods include Extreme Programming (XP), Scrum, Lean Software Development, Dynamic Systems Development Method (DSDM) and Crystal Methods™ (CMM).
A key advantage of agile over waterfall is its ability to handle change gracefully without having project plans collapse under new requirements. Agile methodologies use adaptive approaches and teamwork to focus on continuous improvement. Agile's flexible approach enables team members to work together with customers during all phases of development, which encourages clients' input as new design solutions are built.
Agile projects involve multiple software developers and other project team members working together in small teams to quickly deliver new functionality, features or products. It could also refer to the skills that a business requires of its employees [to become agile]. Agile thus contrasts with traditional command-and-control forms of organization (that may be called ""waterfall""). A common shorthand used by many agile proponents is that the high cost of change is one of the central challenges faced by organizations executing a traditional approach to IT development, whereas organizations adopting an agile strategy embrace change as a constant factor impacting project success."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Aadarsh Patel,"Lives in Pune, Maharashtra, India (2008–present)",2023,137,"Advantages of Agile Project Management
You can deploy software quicker, so your customer can get value sooner rather than later
You waste fewer resources because you always work on up-to-date tasks
You can better adapt to change and respond faster
Faster turnaround times
You can detect and fix issues and defects faster
You spend less time on bureaucracy and busywork
There's a big community of Agile practitioners with whom you can share knowledge
You can get immediate feedback (which also improves team morale)
Developers can improve their skills based on QA feedback
You don't have to worry about premature optimization
You can experiment and test ideas because its costs are low
Disadvantages of Agile Project Management
Agile has substantial advantages, and it's important to know the disadvantages, limitations, and risks it brings.
Documentation tends to get sidetracked, which makes it harder for new members to get up to speed
It's more difficult to measure progress than it is in Waterfall because progress happens across several cycles
Agile demands more time and energy from everyone because developers and customers must constantly interact with each other
When developers run out of work, they can't work on a different project since they'll be needed soon
Projects can become ever-lasting because there's no clear end
Scope creep and experience rot
Clients who work on a specified budget or schedule can't know how much the project will actually cost, which makes for a very complicated sales cycle (""Until iteration ends,"" is not something clients like to hear)
The product lacks overall design, both from a UX and architecture point of view, which leads to problems the more you work on the product
Teams can get sidetracked into delivering new functionalities at the expense of technical debt, which increases the amount of unplanned work
Features that are too big to fit into one or even several cycles are avoided because they don't fit in nicely into the philosophy
You need a long-term vision for the product and actively work on communicating it
Products lack cohesion, and the user journey is fragmented because the design is fragmented. The more time passes, the more disjointed the software ends up becoming
Short cycles don't leave enough time for the design thinking process, so designers have to redevelop the experience over and over due to negative feedback
Check here for some more Scrum sprint planning anti-patterns and product backlog and refinement anti-patterns"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Peter Trudelle,"Transformational Servant Leader, SF Bay Area",2013,15,"Agile is defined by the four values expressed in the Agile Manifesto, plus their 12 underlying principles. I think that makes Agile a philosophy or mindset, a different way of looking at the software development world. People consciously trying to work by these principles consider themselves Agile. We're a big tent revival tribe!
Nearly everything that you hear about Agile, including frameworks, methodologies and processes, are attempts to apply these Agile values and principles. These things may facilitate agility for one or more people in one more set of circumstances, or they may not; there is no objective criteria. Caveat Emptor."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Agilemania,Agilemania is to be the Preferred Agile Company and partner.,2023,137,"As with other software development approaches (such as the waterfall model, the V-model, the iterative model, etc.), the Agile development model is a methodology for creating software, in addition to being a form of agile method. Software is created in quick, incremental cycles. Agile is an important component of Agile software development and signifies ""the capacity to move swiftly and effortlessly"" and adapt to change quickly in English.
Advantages of Agile Methodology :
In Agile methodology the delivery of software is unremitting.
The customers are satisfied because after every Sprint working feature of the software is delivered to them.
Customers can have a look of the working feature which fulfilled their expectations.
If the customers has any feedback or any change in the feature then it can be accommodated in the current release of the product.
In Agile methodology the daily interactions are required between the business people and the developers.
Disadvantages of the Agile Methodology :
In Agile methodology the documentation is less.
Sometimes in Agile methodology the requirement is not very clear hence it’s difficult to predict the expected result.
In few of the projects at the starting of the software development life cycle it’s difficult to estimate the actual effort required."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,The Next Tech,Works at The Next Tech (2018–present),2023,137,"In API tests, developers use load testing to understand how an API performs with the increased number of calls. This test helps the development team to agree on whether the product can meet certain real-life expectations under a high load.
You can call it “Security Test 2.0” because this process is the next level of security testing. In this type, the testers analyze different attacks on API from an outsider’s point of view. This helps them to design better security for the product.
Security Testing gives the Dev team an overview of how the API will perform against cyberattacks. The process tests an API’s encryption methods and checks how it behaves with permissions and access controls.
The general idea of UI testing is to check whether the API or other integral parts’ user interface is running correctly. In terms of the codebase, UI testing is not a significant part of API testing. However, this process helps measure the health and efficiency of the app’s front-end and back-end."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Aadarsh Patel,"Lives in Pune, Maharashtra, India (2008–present)",2023,1,"Agile Methodology is a people-focused, results-focused approach to software development that respects our rapidly changing world. It’s centered around adaptive planning, self-organization, and short delivery times. It’s flexible, fast, and aims for continuous improvements in quality, using tools like Scrum and eXtreme Programming.
Characteristics of the Agile Development Method
1. Modular Functioning
Modularity is considered one of the key elements of a good process. Modularity is the element that allows the components to break down and that broken component is called activities. The software development process is just the set of activities that frames or transforms the vision of the software system into reality. Agile Software development process makes use of good tools and is wielded with good software craftsman who is well known to apply those at the right place and right time. These can not be utilized for the production line for manufacturing software products.
2. Iteration
The agile software development process acknowledges the working on attempting wrong before its correct. So, for this reason, agile processes focus on small cycles. Each cycle has a task of defined activities and those activities must be completed in a correct manner, these cycles have a time slot of a week, from starting to completing the activities. The iteration i.e single cycle may or may not get a 100 % correct element. Because of this reason one short cycle is repeated several times until the correct result is achieved.
3. Time-Bound
Software development comes with time limits or the development team must give a delivery date to the customer, to keep things under track the iterations play a good role as it keeps time limit between one and six weeks on each iteration and it can be scheduled accordingly. There are higher chances that it may not schedule all activities in a single iteration, else wise only those activities will be attempted which are necessary to achieve the goals which were set at the beginning of the iteration. Rescheduling or functionality reduction can be done to deliver the project on time, on the allotted time.
4. Parsimony
Agile software development is considered an upgraded version of the traditional approach with time constrains add on. Impossible deadlines are not attempted for rapid delivery, each phase of development is kept in mind as this attempt may take away the quality from the product and that’s a big NO. Instead, agile approach focus on parsimony keeps the activities to minimal and only necessary to mitigate risks and achieve their goal.
5. Adaptation
During the development or during iterations there are higher chances of unknown risks they may be exposed; the agile approach is prepared to deal with these unknown risks. If there are changes in different results during the functionality, new activities or functionality can be added to reach the goal.
6. Incremental
Agile system is not built entirely at once, the system is partitioned and look out for increments that can be parallelly developed, at a different time and a different rate. Each increment is tested independently and if found ok then all are integrated into the one system for the result.
7. Convergence
It means that the risks are attacked actively because it is worth to know the risks. This takes the system closer to the results. Risks solving during each iteration is one of the great processes that leads to a successful iteration.
8. People-Oriented
The agile process is known for its priority towards customers over process and technology. The involvement of the customer is done organically. The developers evolve through adaptation and are empowered to raise their productivity and performance. These developers are very aware of dealing with the changes in the system at every stage.
9. Collaboration
The agile process has a very practical approach for discussions that is face-to-face discussion whether it is with the customer or with the team members itself. Good communications play an important role in the success of the project in the software development field. The risk of miscommunication is higher when the system is developed into pieces, it is a must for every member to understand how pieces fit together for creating a final product. The process is more into integration than to communication when individual iterations are completed. Integrating the smaller integrations into larger part developed parallelly requires collaboration with the teams to fix it correctly into the system to get the final product."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Joseph Little,"CST with Scrum Alliance, MBA from NYU",N/A,1,"Hmm. This is a very broad question.
To which I think only a short answer is possible.
If we think of each agile method (in general, we prefer to think of them as light-weight methods rather than (heavy-weight) methodologies)…if we think of them as very roughly 80–200 patterns, then I would say “yes” in the following way. Yes, some patterns from one agile method can in general often be combined successfully with patterns from another agile method. Ex: In software, Scrum people commonly recommend adding XP (Extreme Programming) patterns.
A lot of agile methods already have overlapping patterns. Ex: The Scrum Board (in Scrum) is a kind of Kanban board. And the agile “Kanban Method” of course has a Kanban Board.
One has to discourage the wholesale merging of two different agile methods. Why? The first reason is that even to implement one method, it is already “too big” for most situations. The culture must change, you must explain it, you must get the people to learn to do it professionally. All of these are hard even for one method. These all become even hard when you combine two methods. The result is just too big.
If you mean starting with Scrum and adding a lot of XP, then “yes”. It will take you a while just to do Scrum well. Then I commonly recommend, if you are doing software, to start adding XP patterns. And your team may already have added some patterns unconsciously, but not start adding them consciously.
BE CAREFUL. You are not likely smarter than the communities around each agile method. If a new method does not exist already, it is not likely that you, mushing two methods together, will come up with a very useful new super-method. In fact, it is likely that the new super-method is too heavy.
A more useful follow-up question would be about a fairly specific situation (“we’re building new software in the XYZ industry”) and tell us which more specific things you’d like to combine. If you say “We want to combine Scrum with parts of XP”…you might anticipate my answer, but surely I and others could make more useful, tangible, actionable suggestions and comments.
Good luck!"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Riley Claire,Software Test Engineer | Technophile | Blogger,2023,0,"While incremental delivery might assist get products to market faster, it is also a significant downside of Agile approach. Because when teams work on each component in separate cycles, the overall result typically becomes quite fragmented rather than a coherent entity.
5 Key Disadvantages of Agile Methodology are as follows:
Poor resource planning
Limited documentation
Fragmented output
No finite end
Difficult measurement"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Szabi Kisded,"Founder, WordPress Plugin Developer & Blogger at CodeRevolution (2018–present)",2019,1,"The Agile Method is a particular approach to project management that is utilized in software development. This method assists teams in responding to the unpredictability of constructing software. It uses incremental, iterative work sequences that are commonly known as sprints.
Advantages of Agile Methods are:
1. light weight
2. They are people based rather than plan based
3. It promotes interactions between individuals over processes and tools
4. Developers working software rather than comprehensive documentation
5. Customer collaboration over contract negotiation
6. Responding to change over following a plan"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Cliff G.,"Technologist, Problem Solver, Product Manager, Lawyer, and all-around fun guy.",2018,3,"Absolutely! Agile methodologies like Scrum and Kanban are not silver bullets that just solve everything.
I think the biggest disadvantage of Agile methodologies lies not in the methods or processes themselves, but in the assumptions that underlie them, which many people ignore:
The business is accepting of proceeding with some level of uncertainty in the final outcome;
The development and quality assurance teams are ready to work together closely, rather than in staggered delivery/test/rework cadences;
Stakeholders across the business innately understand the process and how it will affect their delivery and expectations.
There are also some projects that simply aren’t really appropriate to apply an Agile approach against:
Mission-critical, “nine-nines” hardware or software that simply cannot go down, ever due to risk of loss of life or limb.
Regulated hardware that must be fully designed, reviewed, and approved by a state or Federal agency before it can actually be built.
Parallel development of hardware, software, and manufacturing facilities where a change in one causes effects of change in the others.
More often than not, when I’ve seen Agile transitions fail it’s not been because of the practices or methodologies “not working” but rather because people attempt to blindly implement them without really understanding the problems that they’re trying to solve or the impacts that their choices will have throughout the business.
Here are a few blog posts I’ve written on the subject:
Why Isn't Agile Working For Me?
What ""Agile"" Means to the Business
You're not Agile Unless You're ""agile""..."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Jaishree Goutam,"Student at IIT Delhi at Indian Institute of Technology, Delhi (2021–present)",2024-06,4,"Agile project methodology is an adaptive and collaborative approach to managing projects, especially in software development. It focuses on iterative progress through small, manageable increments called sprints. Agile promotes continuous improvement, flexibility, and responsiveness to change. Teams work closely with stakeholders, ensuring frequent feedback and adjustments. This methodology encourages cross-functional teamwork, regular communication, and a strong emphasis on delivering functional components quickly. Agile helps projects stay aligned with customer needs and adapt swiftly to evolving requirements, making it ideal for dynamic and complex environments. Its iterative nature allows for ongoing refinements and improved project outcomes.
Popular Agile methodologies include:
Scrum: Focuses on iterative development through sprints, with defined roles (Scrum Master, Product Owner, and Development Team) and regular meetings (Daily Stand-ups, Sprint Planning, and Retrospectives).
Kanban: Uses visual boards to manage workflow, emphasizing continuous delivery and improving efficiency by limiting work in progress.
Lean: Aims to maximize value by eliminating waste and optimizing processes. It focuses on delivering high-quality products with minimal resources.
Extreme Programming (XP): Enhances software quality and responsiveness with practices like pair programming, test-driven development, and frequent releases.
Feature-Driven Development (FDD): Involves developing software by building and designing individual features.
These methodologies help teams be flexible, responsive, and collaborative.
thanks for reading it"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Thom Snyder,"30 years project management, Writer, Quora contributor",2017,7,"This question seems to be the most perplexing question in the world of developers and one can go crazy reading the myriad of descriptions from several websites that promote themselves as experts on the subject.
Before launching into AGILE, let’s look at SCRUM and see if we can glean any information from that.
Let’s take for instance, information I gathered from ScrumAlliance.org:
What is Scrum? An Agile Framework for Completing Complex Projects - Scrum Alliance
The description of SCRUM was not what I expected, since according to the founders of Scrum, Ken Schwaber and Jeff Sutherland, SCRUM is a methodology. One would assume that ScumAlliance.org didn’t get it right but should know what they are talking about. Then suddenly without warning, everything became a bit cloudier with their closing statement.
Now I was left guessing! Is SCRUM a process, a methodology (as I originally thought it was) or was it a framework?
Without going through the entire list, I’ll plug some additional info from The Definitive List of Software Development Methodologies - NOOP.NL website.
Scrum
Scrum is an agile project management methodology, created by Ken Schwaber and Jeff Sutherland. It all started in 2001 with The Manifesto for Agile Software Development, that defined the skeleton of four core values and twelve distinct agile principles. Throughout the years, Scrum has became the de facto standard for managing agile software development projects. One reason for Scrum’s popularity is that it consists of only a few common sense practices that can be applied in many situations. This also means that Scrum by itself is never enough, and that development teams have to incorporate other methods (usually XP) for additional practices.
Well, seems these people got it right. SCRUM is a methodology. Still, we should point back to the Manifesto for Agile Software Development itself to acquire the recommended enlightenment. Is there an answer in the 12 principles? I used this site as the reference, since it referenced the actual link to the Manifesto.
What's the Difference? Agile vs Scrum vs Waterfall vs Kanban
12 Principles of Agile Methodology
The Agile Manifesto lists 12 principles to guide teams on how to execute with agility. These are the principles:
Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.
Welcome changing requirements, even late in development. Agile processes harness change for the customer’s competitive advantage.
Deliver working software frequently, from a couple of weeks to a couple of months, with preference to the shorter timescale.
Business people and developers must work together daily throughout the project.
Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.
The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.
Working software is the primary measure of progress.
Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.
Continuous attention to technical excellence and good design enhances agility.
Simplicity -- the art of maximizing the amount of work not done -- is essential.
The best architectures, requirements, and designs emerge from self-organizing teams.
At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.
Ok. There is nothing in the principles that distinguishes whether SCRUM or Agile is a methodology or a framework. The principles are nothing more than what they say they are - a manifesto. Google tells us that a manifesto is nothing more than a “… published verbal declaration of intentions, motives, platform or views of the issuer, be it an individual, group, political party or government.”
There is some information neatly tucked into 2 paragraphs on the History: The Agile Manifesto page of the Agile Manifesto which actually mentions SCRUM as a methodology.
“The Agile movement is not anti-methodology, in fact, many of us want to restore credibility to the word methodology. [snipped for brevity] … Those who would brand proponents of XP or SCRUM or any of the other Agile Methodologies as ""hackers"" are ignorant of both the methodologies and the original definition of the term hacker.
[snipped for brevity] … A number (of) these articles referred to ""Light methodologies, such as Extreme Programming, Adaptive Software Development, Crystal, and SCRUM"". In conversations, no one really liked the moniker ""Light"", but it seemed to stick for the time being.”
So I am convinced SCRUM is a methodology but what about AGILE? When we say Agile, are we mentioning a specific method called Agile or are we defining a methodology that is agile ?
The simple answer is: Agile is an umbrella term that includes other processes, like Extreme Programming, Kanban, Crystal, and Scrum. Scrum is Agile, but Agile isn’t Scrum.
Wow - that was a lot of writing. I need coffee."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Jessica Wright,Works at Maxburst,2020,31,"Techtic Solutions Inc Published full information Blog about ""What is agile methodology?""
A Comprehensive Guide On Agile Development Process
Imagine a day in the programmer’s life in the early days of software development. The coding itself used to consume a lot of time, as the computers in those days were slow and heavy.
You had to sit in one place and complete the task. Collaboration was a difficult affair, and debugging could drain the developer completely.
The Agile Manifesto: 12 Principles
The guiding principles
The main priority for any software development company using agile practices is to offer continuous delivery of the software solution to exceed customer expectations.
You should say yes to changing the requirements even if it is suggested at the last minute of the development cycle.
You should ideally keep sending the working software to update the client on the progress. The timelines for that should be as short as possible, ranging from weeks to months.
Collaboration of the developers with the business development team is a must for better development processes and high-quality solutions.
Empower individuals so that they are motivated to complete the jobs. Offer a supportive environment for better delivery.
A face-to-face conversation with your development team is a must if you want to convey changes or communicate some aspect of the development.
A working software that you send to the client will help measure the progress of the project, and give your client an insight into what you are developing.
The development pace should be constant, which is why you need agile processes, as they offer a sustainable development environment.
Your development accelerates when you promote good design and technical superiority
You should incorporate simplicity in your development methods.
If you have a self-organizing team, as in the case of agile development, you will be able to incorporate the best architecture and designs for your project.
It is important to reflect on your actions, and the project to make it better and more effective.
Now that you are aware of the 12 principles of agile manifesto that you need to remember, let’s take a look at the best practices you should incorporate while developing using agile methodology.
Agile Best Practices
#1 Practice a Test-Driven Environment
#2 Constant Communication Through Daily Meetings
#3 Incremental Changes Incorporated
Read Full information about How Automating Business Processes with Digital Solution Equates to Profits"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Dhruv Parmar,Lives in Paris,2023,2,"Agile development model is also a type of Incremental model. Software is developed in incremental, rapid cycles. This results in small incremental releases with each release building on previous functionality. Each release is thoroughly tested to ensure software quality is maintained. It is used for time critical applications.
Extreme Programming (XP) is currently one of the most well known agile development life cycle model.
Diagram of Agile model:
Advantages of Agile model:
Customer satisfaction by rapid, continuous delivery of useful software.
People and interactions are emphasized rather than process and tools. Customers, developers and testers constantly interact with each other.
Working software is delivered frequently (weeks rather than months).
Face-to-face conversation is the best form of communication.
Close, daily cooperation between business people and developers.
Continuous attention to technical excellence and good design.
Regular adaptation to changing circumstances.
Even late changes in requirements are welcomed.
Disadvantages of Agile model:
In case of some software deliverables, especially the large ones, it is difficult to assess the effort required at the beginning of the software development life cycle.
There is lack of emphasis on necessary designing and documentation.
The project can easily get taken off track if the customer representative is not clear what final outcome that they want.
Only senior programmers are capable of taking the kind of decisions required during the development process. Hence it has no place for newbie programmers, unless combined with experienced resources."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,J. J.,Studied Computer Science & Mathematics (Graduated 2007),2019,10,"Yes.
As practiced in the industry, agile is micromanagement.
The litmus test for whether an organization is even possibly using Agile correctly is if you see Pair Programming.
Pair programming can act as an antidote to the tendency to single people out for micromanagement. Plus, allocating resources in such a way shows that the attempt to do Agile properly is an honest one. And not just a convenience label."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Jim Pruitt,"Senior Editor at VMEdu, Inc. parent company of SCRUMstudy",2019,1,"The best answer to your first question is the Agile manifesto: Manifesto for Agile Software Development. Agile is a frame-of-mind for approaching project work—such as software development—and a group of frameworks for managing/ executing projects. It is a business philosophy and a statement of values shared by the group of professionals who wrote it.
The benefits of being Agile include, among other things, not being constantly frustrated by change, keeping up with innovation without losing one’s sense of direction, and developing a sustainable pace for workers while delivering quality products/services/value to customers/users on a timely basis. Along the way, the frameworks associated with Agile develop strong teams and increased team member satisfaction. All of this translates into company profitability.
Thank you for the A2A!"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Julya van Berkel,Scrum and Agile coach since 2006,2017,7,"<sarcasm> Nice, I so love it when I am given only bad choices. </sarcasm>
First of all, Agile is not a methodology, you should research Agile a little more or even look up what a methodology is.
Agile is a mindset, and you either hate it or love it, so I will answer your scale with -10. I really love Agile and Agile Frameworks when done well. I can understand that some people hate it. This usually is not because of Agile or the framework used. It usually is because a company has seen the advantages of Agile and forces it down the throat of their organization.
Nothing forced or done badly is good.
I have been advocating Agile since 2002 and spcifically Scrum since 2005/6 and have seen companies transform into wonderful Agile organizations. I have also seen things go horribly wrong. Usually because bosses want the advantages of Agile without committing to the values and mindset.
Agile is done best when done thoroughly and with the help of people who understand it and help companies not to make the same mistake that others have made.
I hope you end up in an organization where they understand that Agile is based on trust, cooperation and passion. I hope this helps you to not blame mindsets, frameworks or even methodologies.
Good luck."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Mike Graupner,"Progressive Christian, Conservative, Husband and Grandpa",2019,4,"What are the advantages and disadvantages of Agile as a project management tool?
Jesica,
Forgive me but I think the question has some bad assumptions. Project management is the process of management pr Schedule Scope and Cost.
Agile management is the process of managing a iterative development process Agile software development - Wikipedia
So, singe agile and Project management are different beast, the short ans is there are no advantage or disavantages, to the tools since they don’t cover any of the same areas
For example, in agile, schedule (iterations) is fixed which leads cost to be fixed as well. Scope is floating with the “you get what you get” type of approach.
So let's look at the dreaded PMBOK KA and how agile deals with them:
These are the 10 Project Management knowledge areas:
Project Integration Management.
Not sure if this can be mapped
Project Scope Management.
Not needed in agile as the product backlog management is scope management
Project Schedule Management.
- Schedule is fixed by the number of iterations being funded based on a fixed team size
Project Cost Management.
- Since the schedule does not “float” the costs are generally predictable
Project Quality Management.
- Since testing should be built into the iteration by the team quality is not “managed” by a PM
Project Resource Management.
- Fixed resources, no problems
Project Communications Management.
- Ideally the agile team is colocated, communication is face to face.
Project Risk Management.
- Hard to answer, I suggesting reading Who is responsible for risk management in Agile-style deliveries?
For me, I don’t look at the agile/waterfall debate as either one or another. My most successful projects have been blended projects. Agile has a lot of tools as work arounds.
A recent project was time critical and we could not get requirements. But using a agile/rapid prototype process in the front end, were were able to recover the schedule and deliver in on time (requirement were 3 weeks overdue in a 8 week schedule)
This being said, I would suggest you use an Agile tool for agile development and a project management tool for the project management
Hope this helps"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Sundar Raghavan,"Lives in Bengaluru, Karnataka, India",2019,1,"Adapting agile requires mindset and cultural change. We can follow agile, not just in projects even in our life aiding us to embrace changes, adapt to environment, and focus excellence. Agile helps our communication to be transparent and we tend to collaborate better. The outcome are value driven than process driven.
Below stated are major benefits from using agile:
The highest values are delivered first
Working product is a key focus than documentation
Advocates servant leadership and Scrum Master facilitate to remove impediments
Teams are self evolving and improvise themselves
Team trust each other and builds relationship to deliver stronger together
Deliver at regular intervals demonstrate to customer on what is being done from earlier stages onward
Accepts feedback and embraces changes
Reduces silos and breaks hierarchy encourages cross-functional team culture
Promotes continuous integration and delivery as outputs are seen earlier and feedback can be implemented at a later stages
Communication is frequent and regular to support the outcome"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Yogyata Mehtani,Former Contractual Product Manager (2018–2019),2018,2,"There is no such disadvantage of agile that I will mention but yes there are some challenges that can be pretty rigid for your ‘agile’ process.
Miscommunication of information within the team.
Not every member of the team is on the same page.
It is tough to keep the whole team equally dedicated towards the project.
You can handle the project but handling people is always a challenge.
People run behind agile user stories or other deliverable without even understanding them.
Developers and QA have different interpretation of user stories.
We always tend to squeeze things in a sprint but sometimes that effects the quality as well. And if we try to maintain the quality, this compromises the sprint time stamp.
Agile success requires experienced and dedicated team.
Agile is not a one day task or one time exercise, you ace it with the experience and challenges you face.
Removing roadblocks at right time sounds like a miracle only. We always get to know about roadblocks during the sprint not at the very start."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Kamalakshi Naik,Author has 184 answers and 37K answer views,2022,137,"The Agile technique divides a project into many parts and uses these phases to manage the project. Continuous improvement at every stage and ongoing collaboration with stakeholders are required. Teams cycle through a process of planning, carrying out, and assessing once the job starts.
Benefits of the agile methodology:
The customers are satisfied because working software features are delivered to them after every sprint in the Agile process, allowing them to see the working feature that matched their expectations. In this methodology, attention is given to the product's good design.
The Agile Methodology has some drawbacks, including a lack of documentation and perhaps unclear requirements that make it challenging to implement."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Nivedita,MBA from Indian Institute of Management Calcutta (Graduated 2020),2020,3,"I have been practicing agile for 7.5 years now and I can agree without a doubt that Agile so far has not disappointed me.
In my experience an Agile team works in 2-week sprints and delivers an MVP in monthly release cycles. Therefore there is early and continuous delivery of incremental versions of the software to the customer. Consequently, on this version of the software, the customer gives his feedback . This feedback is put into the MVP of the next month’s release cycle and delivered to the customer and the feedback cycle continues. Therefore, through monthly release cycles and delivering incremental versions of the software, agile takes both the development team and the customer to the version of the software that gives the most business value.
So yes, the most important benefit that Agile gives to the customer is maximum possible business value.
Other benefits of agile include
allowing the customer to change requirements
customer is involved throughout the development of the project through monthly demos
incorporating customer feedback enhances the quality of the product
Hope this helps.
Thanks.
Nivedita | IIM Calcutta"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Amy,Former S.D.E III,2022,137,"Agile has several advantages and disadvantages. If you want to decide whether or not to buy this CRM, you must first determine what features you require. The advantages and disadvantages of Agile CRM are listed below.
Pros of Agile:
Reasonable pricing
One of the most excellent email marketing tools
Contact management made simple
Automated sales pipeline system makes it simpler to close business
Easy-to-use configuration and administration interface, even for beginners
Cons of Agile:
For the Starter package, just one integration option is provided
Buggy email capabilities
Third-party integration difficulties
Limited third-party integrations
Limited service automation functionalities
Lack of reporting"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Bob Dobbs,"Motorcyclist, photographer, and software developer",2019,1,"What is Agile? What are the benefits of learning it?
Agile: adj. able to move quickly and easily. Nimble.
If you have no uncertainty about outcomes or how to achieve them, you should not use agile development practices.
Examples: tying shoes. Boiling water.
If you never change priorities, you should not use agile development practices.
Agile development is the process of observing current state, identifying where you think you want to go, making a small change towards that direction, measuring how it affects your goal and if your goal is still valuable, and adjusting.
If you’re using agile as a noun, you’re selling something. It’s an adjective."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Sundar Raghavan,"Lives in Bengaluru, Karnataka, India",2019,137,"The flavors of agile methodologies are
Deliver working software and demonstrate to customers at regular intervals
Promote frequent communication
Build trust and collaborate with customers
Embrace changes and accepts feedback
Maintain simplicity by focusing on highest value first and what is essential
Agile is timeboxed
Business and development teams work together.
Eliminating waste and keep things simple to deliver more with less
Deliver in small incremental or iterations
Team is cross functional
Values are delivered
There are various agile methodologies are available
Scrum
SAFe
Kanban
Lean Development
Extreme Programming
Disciplined Agile"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Tony Li,Professional programmer since 1991,2020,11,Someone told management that it was The One True Way to manage software projects. Non-developer managers are especially easily duped into this scam. Mediocre developers will enthusiastically support it because it means that they don’t have to work hard to deliver.
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Jeff Dalton,Chief Evangelist (2005–present),2019,5,"None. Agile doesn’t have methodologies.
Agile is a way of working together that encourages openness, trust, transparency, visibility, and a focus on business value. To be honest, it merely codifies what working for a great company, with great leaders, and a great team should look like.
Over the years there have been a number of frameworks that have become popular that fit well in such a working environment - Scrum, XP, Kanban for instance.
I don’t really have a favorite, but my teams tend to adopt Scrum along with some techniques that come from XP. Most companies seem to favor a hybrid approach.
For people seeking a more structure, large-scale approach, SAFe, LeSS, and DAD have gained in popularity, but I’m not fan of either of those."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Mark Shead,Mark Shead is a software engineer & agile coach,2019,3,"Agile is a set of values and principles. So basically it is a set of beliefs that people can rally around and say, ""Yes, we are going to use these for the foundation of how we make decisions."" This may sounds simple, but there is great power in having a set of beliefs to go back to in order to guide the entire team on how they are going to get the work done.
There are many practices that have come out of trying to follow the Agile principles, but implementing a practice without being rooted in the principles is not actually being Agile."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Chuck Cobb,Agile Project Mgt Author and Instructor (Over 100K Students),2017,18,"IVVQ (Integration, Verification, Validation, and Qualification) generally takes place incrementally in an Agile project rather than being done at the very end of the project:
Integration - happens continuously throughout the project. As new code is developed, an integration test is typically run to ensure that it is compatible with other code. This is a far better approach than waiting until the very end of the project to see if everything works together.
Verification - typically means compliance with written specifications and written requirements. That is limited in Agile which is also a big advantage. Instead of relying heavily on written requirements documents that are very subject to communications errors, Agile relies much more heavily on direct communication with the customer. That should minimize miscommunication and errors in requirements.
Validation - typically means how well the solution fills the intended need regardless of what the requirements say. That is another area where Agile is very strong. In a traditional plan-driven project, validation might not happen until the very end of the project in the form of a user acceptance test and by that time it may be too late to make significant corrections. In an Agile project, it happens continuously - at least at the end of every sprint if not sooner, the customer sees the feature that is being developed and has an opportunity to accept it or reject it and provide feedback.
Qualification - typically means “beta testing” to actually put the product into operational use (or simulated operational use) and see if it really performs effectively in an operational environment. That is also done much more incrementally in an Agile project where the solution would typically be broken up into incremental releases that can be tested in an operational environment before the entire project is complete.
In simple terms, there is no formal IVVQ process in an Agile environment because instead of being a separate phase, it is completely integrated into the Agile development process and happens incrementally throughout the project which I think can be a much more effective approach.
Chuck Cobb
Author of ""The Project Manager's Guide to Mastering Agile""
Check out: Agile Project Management Training Online for Project Managers"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Yuvaraj Mohite,Agile and Devops Coach,2021,0,The disadvantages are mostly people make it very prescriptive rather than understanding the guiding principles. Also it is a most common excuse to work ad-hoc under the guise of Agility.
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Manish Makhija,Sr. PPC Executive at SRV Media Pvt. Ltd (2021–present),2019,0,"Agile is lightweight approach, it is flexible & adaptable. The disadvantages are it does not suit for any small term project."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Mark Jameson,Author has 60 answers and 98.6K answer views,2015,1,"When you have a proper working Agile team the follow advantages (over traditional waterfall approaches) will become apparent to you:
Teamwork
Agile teams work as one. Everyone on the team has to be committed and not just be involved (see Chicken and Pig fable). There is no hiding in an agile team.
Problems Spotted Early
Because of the nature of small iterations and developing features ready for production any problems are spotted early.
Minimal Disruptions
Agile teams work to a constant heartbeat. Disruptions from outside are easier to control and avoid. Because of tight deadlines and ever watching eyes of the team it is a lot harder for individuals to procrastinate.
Adaptable to changing Requirements
Until work has started on a story agile approaches accept that requirements may change and are open to this.
Effort Minimised
Most Agile methods encourage minimising the work you do.
They use concepts like:
- MVP (Minimal Viable Product)
- MMF (Minimum Marketable feature)
- YAGNI (You aren't going to Need It)
Quality Improved
Having a consistent approach to Acceptance Criteria of stories and definition of done improves quality.
Requirements Prioritised
Agile forces the team and its stakeholders to prioritise requirements and the order that features are worked on.
Most controlling methodology ever!! (In a good way)
If you think Agile is an excuse to cut corners and let developers hack systems togther then think again. A proper Agile team is like a well tuned factory and much more in control than any waterfall project is ever going to be.
Continuous Improvement (Kaizen)
Most agile teams practice the art of Kaizen.
State of the Art Dev Ops.
Agile projects demand state of the art development operations. Continouous Integration, Automated Unit Testing, ...
It is hard to run a proper agile team without using state of the art dev. techniques. Kaizen will eventually lead you to them."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Mark Levison,"Certified Scrum Trainer, Consultant (2009–present)",2021,0,"All work has many risks:
You will discover no one wants the thing you’re building
You will discover your team isn’t capable of doing the work with good quality
..or that their technical skills aren’t up to the job
You will discover that your team doesn’t like working together and you don’t gel.
Agile or not, all knowledge work has these risks. Agile approaches (there isn’t one ‘Agile’) will just force you to deal with them sooner."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Assistant,Bot,2024-07,0,"Some key disadvantages of agile software development include:
Lack of detailed upfront planning: Agile focuses on iterative development rather than comprehensive upfront planning. This can lead to challenges in managing scope, schedule, and resource allocation, especially for large or complex projects.
Potential for scope creep: The emphasis on responding to change in agile can make it easy for the scope to expand over time, leading to projects going over budget or taking longer than expected.
Requirement for high customer involvement: Agile requires active, ongoing participation from customers/stakeholders, which may not always be feasible, especially for external clients.
Technical debt accumulation: The rapid iteration in agile can lead to technical shortcuts being taken that accumulate technical debt over time, requiring more effort to address down the road.
Difficulty scaling: Agile practices are often easier to implement for smaller teams and projects. Scaling agile to large, distributed teams or enterprise-wide initiatives can be challenging.
Loss of documentation: With the focus on working software over comprehensive documentation, there is a risk of important information and design decisions not being adequately captured and shared.
Culture change challenges: Transitioning to agile requires significant changes to processes, roles, and mindsets, which can be difficult for organizations used to more traditional waterfall approaches.
Overall, while agile provides many benefits, organizations need to carefully consider these potential downsides and how to mitigate them when adopting agile software development."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Charan Puneet Singh,Analyst,2015,16,"To know the disadvantages of Agile, it is important to know what Agile software development means. Please refer the Agile Manifesto.
Irrespective of the flavor of agile you decide to chose, there are some industry accepted scenarios where Agile will work and where it will not work.
Agile will not work well unless every member of your team is really good.
Agile will not work well for a team where communication is an issue. It needs open communication for every day stand ups and retros. Your communication should be so good that any developer in your team should be able to pick up any piece of code and start working on it.
Agile will not work in a hierarchy-driven organizational set up. It needs a culture which cannot be developed overnight.
Agile will not work in a scenario where failure is not an option. It is often called FDD for this reason.
Agile may not work very well for a package implementation or a system integration project.
Agile will fail without the right engineering practices in place. Pair Programming, Test Driven Development, Continuous Integration are necessary for agile to work.
Agile is not the goto term for ignoring solution design and code"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Todd Main,30 years of software engineering,2022,4,"The following are my opinions, not statements of fact. Scrum is an extremely popular and successful process. It solves many problems that existed before Agile methodologies came along, and is a great way to introduce teams and companies to Agile, since it is supported by structured training and roles.
On the other hand, it’s not my favorite choice for Lean/Agile processes. You don’t need to add comments to tell me I’m wrong, although you’re welcome to preach to me if you feel that I’m unfairly characterizing some aspects of Scrum. Also note that I am a huge fan of the Agile Manifesto and corresponding principles.
And so, in no particular order, I believe that some of the disadvantages of Scrum are:
The artificial deadline of the “sprint”. The objective is to impart an artificial, imposed deadline on the team, over and over and over. It’s a stick that you force the team to beat themselves with.
One of the traditional complaints of leaders outside of the software team is that they feel that the team lacks a sense of urgency. This sprint is intended to impose this on the team. Rather than inspiring the team, it is an authoritarian whip that is extremely cleverly packaged as empowerment.
Story Point sizing. This complaint is about theory vs. practice. All of the theory around relative sizing sounds so appealing. It just makes so much sense, and again, it’s supposed to empower the team by freeing them from “person hour” estimates. But in practice, I can’t begin to tell you how many times I’ve listened to a Scrum Mater tell a team that they’re getting it wrong - again - and that they need another workshop and another round of “representative stories”. The reality is the humans are completely terrible at sizing things. IMO, a far better approach is the following:
Ask the team if the story is small enough to be delivered in 2 or 3 days
Doesn’t matter if it’s smaller than that
If it is, you’re done
If it isn’t, split the story and repeat. Story splitting can also be a big challenge. My advice to teams that struggle with this is to practice ATDD. You agree on the acceptance tests (not “acceptance criteria”) before sizing. Then, if you need to split the story, use the tests as the “seams” in the story.
Booting the manager out of the team and replacing them with someone (the PO) without a software engineering or management background. This is not the intent of Scrum, but it can easily become the consequence of Scrum, particularly if you the team is trained by someone who also lacks actual software development experience.
The Product Owner’s role is to prioritize the team’s backlog
The team is told to not do any work that isn’t a prioritized story
The manager is sometimes taken aside at some point during the training and told that there is no place for “traditional management” in Scrum and it is important for them to not by an obstacle. I witnessed one company ban managers from Scrum ceremonies.
So how does technical debt get prioritized?
In my experience, the best strategy is to preserve a percentage of the team’s capacity for technical debt and allow them to write and prioritize those stories (subject to team discussion about impact to upcoming releases). However, some organizations insist on a “pure” model (an oxymoron in Agile) and expect the PO to prioritize these stories against their own stories, and make lofty “armchair quarterback” statements like “well, the team should be able to communicate the value of those stories well enough that their priority is obvious”. I’ve heard - on multiple teams at multiple companies - a PO actually say “we don’t have time for test automation”.
Putting the PMO in charge of the software development process. I know, Scrum doesn’t mention anything about the PMO, but in many organizations, the Scrum Master role is filled by a Project Manager who is part of that organization. Here’s an experiment: as a software engineer, attend an Agile conference and count how many software engineers you encounter there. (Hint, you probably only need one or two hands.) And I know, the SM is not supposed to be “in charge” of the process, but that is often the consequence. Three day workshop, pass a test, and BAM, you’re a certified expert who can tell the team why they shouldn’t do something.
Side note: I have a lot of respect for Project Managers who have successfully made the transition to an Agile mindset, and also those who still perform the traditional Project Manager role (as long as it is an active role and not just status reporting). There are a lot of benefits of Agile Project Management. My complaint is when their responsibilities stray into advising Software Engineers on their processes. It is sometimes difficult to get Software Engineers to learn processes enough to evangelize them, but in my experience, it usually works best when the team’s process “sage” has a software development background. I remember overhearing a Scrum Master lecturing a development team on emergent design - it wasn’t pretty.
The end result of the Scrum Master role is to protect the status quo. And again, this was not the intention, but it is often the outcome. The extreme examples are the certified Scrum preachers who have found their religion and are protecting their flock from sin. Even the least extreme examples are the fundamental flaw of having someone who’s job is to help the team with their process while having no actual software development experience.
And a corollary to 4 and 5 are that the Scrum process is fundamentally a project management process, not a software development process. Yet the team usually doesn’t realize this, and so they cede responsibility for decisions to the PO and SM and take no ownership of the way that they operate.
Famously, the lack of any attempt to interface with the rest of the company. This has led to things like SAFe (which I loathe) or often just a lofty attitude that the company needs to “be more Agile”. There is a general lack of training (aside from things like SAFe) in this area, and little guidance on how to accomplish roadmap planning in the Scrum world.
Ironically, another famous Agile process, Extreme Programming (XP) is almost the opposite of Scrum. Again, its intentions are righteous, but the outcome can be a process where the business priorities take a back seat to a (self imposed) authoritarian technical standard of practices that a true believer will defend but that many teams struggle to implement. That doesn’t mean there isn’t value in these practices, but things like TDD are not for the faint of heart and require a lot of repeat guidance and potentially workshops.
My favorite type of process is still a Kanban system. Yes, as with the others, there are imposed rules, and yes, the team members struggle with the rules, but the rules aren’t about who does what job, and they’re actually pretty simple:
if you want the process to work, keep the stories small
enforce WIP limits
as a general guide, start with severe limits and back off only as needed
when you reach a WIP limit, go to the right to find the bottleneck and help out there
The rest aren’t rules, they’re just guidelines:
if you can’t help out with a bottleneck, embrace “slack time” and do some training, automate tests, or research the source of a data issue in production that the team has been seeing lately. Just don’t cheat and do “story work”.
celebrate the WIP limits. They help you see the bottlenecks in your process. Maybe you need a specialist. Maybe you need to reduce the reliance on specialists. Maybe you need more automation. Maybe you have created an artificial bottleneck and you need to evaluate its value. Maybe you need to completely rethink the way that you deliver stories to smooth out the wrinkles. And on and on. The WIP limits are you friend, and every time you hit the limit, your friend is desperately trying to tell you something (and that something is seldom “increase the limit”)
use some process control metrics to help yourselves improve. Lead time and cycle time are the obvious ones to start with, plus the usual like defect rates.
Like any process, the success of a Kanban System depends heavily on having adequately trained leaders. And in my opinion, those leaders should be grown among the software development team, rather than coming from other teams like Product Management or the PMO. This is (IMO) one of the great missed opportunities in companies that train software development managers."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Ashwin Dhakal,Web Designer and Administrator at Tech Unboxin (2015–present),2018,25,"I have answered about the Agile Development after many answer request in this Quora section : Ashwin Dhakal's answer to What is agile development? [ https://www.quora.com/What-is-agile-development/answer/Ashwin-Dhakal ]
This is the graphical representation of the Agile Model I draw for your convenience. Hope you like it :)

Disadvantages of Agile model:
1) This model is very annoying in case of some of the large software, since it is difficult to assess the effort required at the very beginning of the software development life cycle.
2) There is serious absence of emphasis on necessary designing and documentation of the ...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Ashwin Dhakal
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Sachin More,Principle Consultant at Atos (2010–present),2019,5,"Agile > No Agile > Bad Agile
Bad Agile is a horrific experience that I wouldn't wish on my worst enemies.
My worst experience so far:
· Sprint planning - This is where the product owners actually figured out what work they wanted to do. We'd spend several hours discussing nebulous requirements before even getting to prioritization
· Daily meeting - The 30+ minute sit down where everything is re-prioritized, new tasks are added, whole conversations are repeated. The product owners would not listen to the scrum master and stay on track
· Sprint retrospective - These were cancelled because the product owners didn't want to change how they worked and were considered pointless
You can only push back so much before something breaks. In reality, everyone gives up on improving the process to maintain some shred of sanity. Anyone new to Agile joining thinks this is how it's done and henceforth hates it.
I think one problem stems from Agile consultants telling the organization that they should ""Do what fits best"". While technically true, people don't understand the motivations of Agile and therefore interpret it as ""Make up my own process with my 0 years of research/experience""
The “fast” that Agile promises isn’t “fast to finish” but rather “fast to react”.
It promises to minimize the time from receiving information to shipping code to respond to that information.
If you already know all the requirements and design constraints up front, then new information has no value, and Agile won’t save you any time over any other development methodology.
While pressure can make developer productive in the short term, the kind of stress created by those short iteration doesn't. The main issue with it is that it's artificial pressure for most of the time. It's a artificial deadline and the only way to enforce it is with social pressure, which create the worse kind of stress."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Saravana Bharathi,Works at Northwestern Mutual,2014,3,"Agile implementations, be it Scrum, XP, Kanban or mix of these requires a huge shift in culture and thought process. It is not about process, not about standing up everyday and answering three questions.
That being said, most of the time the frustration comes out because of bad implementation, not enough support from your senior management, no training etc. people get stuck with the process instead of understanding value and principles behind it.
Let me give you an real life example. In the past I consulted with a company, I went there middle of crisis. The VPs and big wigs thought scrum is the silver bullet, they said go scrum. The software teams bought into it. But not support teams like contracts. It was a hell. Contracts still wanted suppliers to write down detailed specs, penalties associated with timeline, lengthy MS project, change control process etc. people kept two books. It was a huge strain on supplier. In the end, it was a failure, left with frustrated people. People blamed it on Scrum and the software group head was let go. I could write an entire book about insights from this experience.
If you read the above and give it a thought, most of the times the issues are because of bad implementation and misinterpretation. Sometimes your organization may not be ready for it. Better don't do it. Save the frustration. If you still want to do it, hire an experienced consultant, some one who had done it many times. Interview them personally, do a little bit of research about this guy before bringing him in. stay away from middle tier recruiting / head hunters. 99% of the time they don't know what they are looking for."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Wilson Leung,Software Engineer (2008–present),2018,5,"In my experience, the ‘agile’ part gets too much emphasis.
People do the work, and it’s the people that get the job done.
IMO agile really means is to let the ‘team’ decide what’s best for the customer & product an empower them to do it. Agility is a symptom of this empowerment and it leads to efficiency. But unfortunately the ‘symptom’ is what is being ‘taught’ as the cause of successful projects.
People are left neglected and worse: “Boss, I don’t feel I need to write everything in a sprint, John and I are working quite well together and quite efficiently and we BOTH agree it is of no value” Reply: “Sorry, you need to put it in a sprint plan, and your tasks need to be broken down and reviewed by the rest of the team who are ‘agile’ experts from other companies (not involved in the project), otherwise you are at risk of not understanding a task and you will fail”
My boss just said he didn’t trust my expertise and personal experience with the project, he trusted ‘agility’ more… ironic."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Victor Malyavko,QA evangelist | Cherish DEV Founder,2022,4,"Agile is an effective system, which can improve your processes. However, you’d better be aware that there are some limitations:
Fear of uncertainty that creates stress for the team — the lack of sequential stages and the clear project development plan, the possibility of changes in the last stages of QA testing may become a stress factor.
Degradation of quality — with the inept use of the methodology, due to fastened releases and, accordingly, a larger number of QA tests, the quality may become lower.
Long time to implement — Agile is a complex methodology that can be a problem for QA testers who are used to Waterfall. You will have to develop communication skills, learn to be more responsible and multitask.
Stress for customers — not all clients know exactly what they want. Not all clients have time for daily meetings and problem-solving that they hoped to delegate to others.
Strong motivation of employees and professionalism at the same level are required — QA Engineers must keep up with each other in a rapidly changing, flexible software testing process, and this is difficult to achieve with insufficient motivation and qualifications of at least one of the team.
Read my article for more information about Agile
Agile: Tribute to Fashion or Effective QA Management?
The Agile Methodology is a software development methodology that is implemented to increase software development speed and agility. Touted to be good for the software industry, it is not a novel idea.
https://www.linkedin.com/pulse/agile-tribute-fashion-effective-qa-management-victor-malyavko/"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Nikita Gureev,"B.S. in Software Engineering, Higher School of Economics (Graduated 2016)",2017,5,"Agile development is frequently praised for its flexibility, quick feedback, efficient communication, and frequent releases, however it is not the best methodology for every case. There exist several disadvantages to this model:
Agile is as flexible and accomodating for new requirements, as it is difficult to predict and estimate at the start. Some projects adopting this methodology turn out to be too long-lasting. A reason for that may be lack of project focus and clear vision of the product from the customer;
While frequent communication and involvement from customer can have a huge positive impact on the develoment, there is a potential problem here, as some customers won’t be able to participate so actively in the development;
Agile prioritizes working code over documentation, and while that may be a positive thing, some projects just end up lacking proper documentation. Combine that with high developer turnover rate and you have a recipe for disaster;
Agile practices allow for involvement of different roles early on in the project, which is generally a good thing. However, it increases costs for the project from early on, which people should be mindful of. It is important to mention that this practice mitigates some risks. For instance, continious integration throughout the project may be costly, but it is preferable to high risks of waterfall testing process.
Overall, Agile has many advantages and should be used for a wide range of projects of different scale, however one should be aware of the possible drawbacks this methodology has.
Links:
Disadvantages of Agile Development
Agile software development - Wikipedia
The Massive Downside of Agile Software Development"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Anusha Hewage,"Agile Thought Leader, Program and project manager",2017,2,"I ll try to answer this question targeting software development as the question is formed that way .
Actually it is true that only success is most of the time documented and available to refer . Drawbacks are rarely mentioned .
Issues I have experienced are below.
Developers feel they are micromanaged
Resistance basically starts from the stand ups . Everyday coming for this 15 minutes and giving updates are not a comfort for everybody . Hence they start criticizing and resisting the process which can finally lead to say this process is not good for us. (This is when the scrum master has to show his/her leadership and coaching skills and let the people know the benefits of this 15 minutes )
Leadership team will not get the idea of not having a gantt chart with resource allocations , for a specif period and finally can lead to misjudgment of the progress of the project (Again it is Agile coach’s job to make that right )
If distributed agile is not properly facilitated with logistics, Audio Visual meeting facilities , distributed agile teams can get worst as they will really feel frustrated following the cadence in different locations . (Agile coach and leadership teams should implement proper distrusted agile and should be facilitated with technology and equipment )
If not properly implement dev projects in agile can really increase technical debt .
If the planning is done once in every two weeks (iteration ) then the systems team can really suffer to accommodate the changes. So it can really become messy as they will try to implement to support the two weeks objectives (That is why agile implementation needs to be an enterprise agile exercise from top to bottom. All processes need to be agile. Also continuous integration should be supported , facilitated with the necessary skills, tools"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Jeff Nelson,Invented Chromebook,2015,110,"My main criticism of Agile is that it's become such an all-inclusive term for so many different methodologies.
Scrum is Agile.
Test-driven development is Agile.
Pair programming is Agile.
Open-ended specification is Agile.
It's not a stretch to say even management-by-walking-around and Six Sigma have been relabeled as part of Agile.
Back in the 1990s, we had many terms for many methodologies, software and management. Now, every methodology is just called ""Agile""."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Sagar Rao,Studied Master of Science in Computer Science & Software Engineering (Graduated 2011),2022,137,"Photo by Sebastian Herrmann on Unsplash
Scrum is a modern software development framework. It is an agile methodology that promotes collaboration and transparency by using a cross-functional team approach. As a result, many companies have adopted it, and it has become the de facto standard in the industry.
Time-Conscious
The biggest drawback of the scrum process is that it is highly time-conscious. This means that, on top of the numerous other things that the team has to do, it has to keep track of what is due when, and it has to do this in a timely manner. Furthermore, during the sprint planning stage, the team has to work out how they will integrate all the tasks that they have lined up for themselves, and it also has to do this in a way that keeps the customers happy and the project on track.
Due to all of this, it is clear to see why some companies have resorted to using assistants to help with the planning and the execution of the project. Furthermore, since the task allocation is flexible, you can rest assured that the team will respect your time constraints, and they will ensure that all tasks are completed on time.
Not Suitable For Large Teams
The scrum process is not suitable for large teams. This is mainly because it was designed for smaller teams that are more agile. As a result, when large teams are brought in, they often try to operate in a more structured manner, which can either slow the process down or even put a stop to it altogether. Additionally, having too many cooks in the kitchen means that the food is often overcooked, and quality suffers.
If you are working in a team of more than 10 people, then it is recommended to split the team into smaller sub-teams. This is because, in practice, teams of 5-10 people are more effective and efficient, and it also helps improve quality. If you really want to take it to the next level, then you can even form mini-teams within the team, to tackle specific parts of the project, such as the client-side functionality, the server-side functionality, and so on.
Poor Hand-Off From Design To Development
One of the biggest drawbacks of the scrum process is that it is a very “siloed” process. This means that it is highly isolated, and there is very little cross-communication between the participants. In practice, this often leads to a poor hand-off from design to development. Especially when a team is new to the process, it is very difficult to know where to begin, and it can result in a lot of wasted time.
As a result of this, it is advisable to establish a good process for integrating design and development work, so that both parties know what is expected of them. In this way, everyone involved in the project will be able to act with more purpose and effectiveness. Furthermore, by having a better understanding of what is entailed in the project, both parties can take the necessary time to get everything right.
Limited Scope
One of the biggest drawbacks of the scrum process is that it has very limited scope. Especially when compared to other agile methodologies, like Kanban, the process is fairly linear and does not allow for a lot of “side-tracking”. For example, if you are only working on the user interface and the organization structure of the project, then you will have to either use a pre-existing database scheme or figure out how to structure the files yourself.
Additionally, since it is a fairly straightforward process, there is a limit to how much the team can actually achieve. Especially when working on larger projects, the team may run out of steam, and it can result in a poor quality product being delivered to the customer. Remember, a scrum project is only as good as the team's commitment to it, and if there are any slip-ups, then the customer may end up with a buggy product that is poorly engineered.
Conclusion
In conclusion, not all software development companies will benefit from this methodology. This is because, in some instances, scrum may not be the best fit for a specific project. As such, before adopting any kind of process, you must consider your needs and the project at hand."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Deepali Nagrani,"Lives in Bengaluru, Karnataka, India (2019–present)",2018,2,"Agile focuses on incremental delivery of client specified features.While slicing off a set of features for earlier release may prove beneficial but a lack of full visibility into overall requirements is often the cause of issue related to system behaviour, performance, capability and other crucial attributes.
Such problems typically require costly rework to retrofit important capabilities that weren't identified until the project was halfway through.
Agile projects poses a substantial risk that the team will move too quickly into iterative design and implementation,before the crucial features are sufficiently understood to support right architecture decisions.
There are problems that emerge due to poor architecture design that cannot be easily undone by refactoring.
If crucial aspects aren't acknowledged early on ,the chances are one or more important quality attribute will be ignored that isn't immediately visible and become incompatible with the initial architecture commitments.
This issue happens largely as a result of phenomenon of bounded rationality (A few supporting features that didn't make a cut turn out to be be essential to make the release truly useful).
To address this inherent challenge,all the additional capabilities must be included to complement most valuable feature."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Michael O. Church,Studied at Carleton College,2014,36,"Agility is always a good thing, in theory, but most of ""Agile"" development is an attempt to patch closed allocation, which is broken from the start. Also, enforcing an Agile style of development, communication, and work allocation means adding more management, not less. Usually, it becomes a justification for yet more micromanagement.
Scrum, for example, is probably good for turning the uninitiated into reliable, useful junior developers. For senior developers and higher, it's miserable. After 5 years, if you're any good, you get to a point where you're only interested in longer-term projects with some architectural meat and a long-term focus. People like that don't enjoy working on Scrum teams and, paradoxically, often end up as underperformers because it means they have to suffer under more micromanagement, and typically have less autonomy. Now, your best people feel like they're micromanaged and not learning much except how to game a process, and they tend to get pissed off and leave.
If you want agility, you're better off going to open allocation. If open allocation is not an option-- and sometimes it is not-- then you should, instead, be owning the boring/reliable niche, hiring boring/reliable people, and accepting that agility is not a priority. (It's desirable, but reliability is more important, in that case.)"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Dave Voorhis,"Software entrepreneur, engineer, and educator for 35+ years.",2023,359,"The original notion of Agile[1] was:
Individuals and interactions over processes and tools;
Working software over comprehensive documentation;
Customer collaboration over contract negotiation;
Responding to change over following a plan.
I don’t know any developers who dislike that, because it’s about empowering software engineers.
I know some managers disliked its original form, because it implied a lack of managerial control. That’s because software engineers see themselves as the source of software and software excellence, but some managers see themselves as the sole source of software and software excellence and software engineers are — or should be — mere instruments to implement managerial vision, like compilers with eyes and fingers.
So those managers pushed back against Agile in its original form, and came up with what we sometimes see described as “agile”:
Processes and tools over individuals and interactions;
Comprehensive Jira ticket comments and constantly-revised Confluence pages over working software;
Customer interaction via a hierarchy of managers, analysts, and formal processes rather than collaboration with software engineers to build software that works;
Endless changes due to lack of any planning or foresight.
It should be self-evident why people might dislike that kind of “agile.”
Footnotes
[1] Manifesto for Agile Software Development"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Tony Li,You know that Internet thing? You're welcome. :-),2020,88,"No. Never.
First off, old school is not bad. In fact, old school is far preferable to the Latest Craze.
Agile is not old school. Waterfall is old school. You make a plan. You write down what you’re going to do. You make a Gantt chart of how you’re going to do it. And then you sit down and do the work.
Waterfall works really, really well for many types of projects. True, it’s not the Latest Craze, Agile. The problem is that Agile doesn’t work very well for many types of projects. It’s great if what you’re doing is developing a web page where you need a lot of feedback on the front end and will have to iterate to converge. It doesn’t work so well when you have a tight deadline and cannot afford to iterate. It doesn’t work so well if you have clear requirements and don’t need to iterate.
People are slowly coming back to waterfall methods. Some of us never left.
Old school: good."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Sriram Sridhar,"Entrepreneur, Software Engineer, Technology Evangelist , Marketing Fanatic",2014,10,"I cannot speak for other agile implementations, but I have some experience working in scrums and being a scrum master. The following is the biggest disadvantage I personally experienced with the process.
The biggest problem with scrums is the fact that the tasks included in a scrums are only as good as how well they have been defined. Unfortunately, it is very difficult to define tasks that are new and nobody on the team has a good idea of how long it takes to complete. This is especially true when working on new products or features that do not have precedents. It is also true for tasks that require research and analysis.
By definition, tasks included in a scrum should be completed by the end of that sprint without requiring any rework. This is great in principle but when you throw in tasks that have not been defined properly, it begins to fall apart pretty quickly. Estimating tasks that have never been done before is almost like estimating the run time of a database query without actually executing it. There is always a good chance that the initial estimate turns out to be wrong by several magnitudes. This consequently results in tasks going unfinished in a sprint. But with scrums, the scrum master is not taught to take unfinished tasks into account when pl...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Sriram Sridhar
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Abhinav Manchanda,"Techie for 14 Years, International Trainer.",2020,1,"Agile was originally supposed to be a lightweight set of values and principles. In today’s world, Agile has certifications, processes, tools, and a rigid set of guidelines.
This rigidity has made this bloated version of Agile the opposite of what it was supposed to be. This unfortunately is the biggest disadvantage as of now."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Kavya Tolety,Studied Computer Science and Engineering (Graduated 2020),2020,2,"Hi!
I believe there is always two sides to a story, just like a coin that has two sides.
Before i answer your question, let’s understand What is Agile?
Agile is an iterative based software development approach where the software project is broken down into various iterations or sprints. Every iteration has phases like the waterfall model such as requirements gathering, design, development, testing, and maintenance. The duration of each iteration is generally 2-8 weeks.
So in Agile, you release the application with some high priority features in the first iteration
After its release, the end-users or the customers give you feedback about the performance of the application
The necessary changes are made into the application along with some new features and the application is again released which is the second iteration
This procedure is repeated until the desired software quality is achieved
Some advantages of the agile methodology are:
Because of the high customer involvement, you receive feedback quickly and make decisions on the fly. There’s more frequent communication, more feedback and a closer relationship with your customers
There is a lesser risk since your work output is reviewed at every stage. You also save money and time from unnecessary expenditures, because you’ll be prioritizing providing value for your users
You’ll be improving the quality of your output with each cycle. By breaking down your project into bite-sized pieces, you learn from each iteration. There is a lot of trial and error involved, but for the most part, you’re still focusing on high-quality development, testing, and collaboration
Now, answering your question some downsides of Agile are:
For the approach to work, all members of the team must be completely dedicated to the project. Everyone must be involved equally if you want the whole team to learn and do better on the next run. Because Agile focuses on quick delivery, there might be an issue with hitting deadlines
The approach may seem simple but be hard to execute. It requires commitment and for everyone to be on the same page, ideally, in the same physical space
Documentation can be ignored. Because Agile methodology focuses on working software over comprehensive documentation, things might get lost through each stage and iteration. As a result, the final product can feel different from what was first planned
I hope this helps :) For more information check out this video
All the best!"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Arunchunai Vendan Pugalenthi,Studied Engineering,2017,3,"Its easy to forget what you complete before as the documentation phase is teensy.
Unlike Waterfall, Agile cannot be flexible for Adhoc requests. You will need to groom the backlogs over and over again when Adhoc requests pop up.
Agile is a wonderful software model. To avoid drawbacks of Agile, all you need to do is, analyze the use cases and decide whether Agile will fit or not. One cannot expect a mango from apple tree."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Marcas Neal,BS in Computer Science Education(SUNY) -- 25+ years as a rent-a-CTO,2016,2,"Agile is a reaction, seeking to address what it considers to be wrong with ""waterfall."" That is one of the many ways Agile completely ignores what waterfall got right, like denigration of requirements and design.
News to Agile people: User Stories DO NOT equal requirements and/or design. Most software engineers take a more balanced approach, where we recognize that waterfall was too slow and bureaucratic without throwing the baby out with the bath water!
Some forms of Agile go completely insane, such as the artifical ""definitions of done,"" especially when only one matters, specifically when does the end user use it and will the client pay for it ... thats it! Another extreme is pair programming, which is a complete waste of resources!"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,S Markem,Author (S. Markem) of The Wizard Of Trope and more,2018,2,"No easy way to say this…
Its difficult to ‘do it right’.
It demands experience, intelligence, discipline ( internal ) and professionalism.
It can help encourage these, but it can’t magically turn groups of people without the above characteristics into high functioning teams.
At the moment we still have a severe shortage of programmers of a certain calibre and the median age in the industry overall means inexperience is rife. Even if that were not the case the numbers of developers working 20 years ago is now dwarfed by the numbers that exist now. There isn’t enough quality to go around.
So. Its drawback? Level of competency required."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Muntaha Anjum,Content writer,2022,1,"Nothing is perfect, even the Scrum approach. Scrum is sometimes paired with other project management strategies to help alleviate some of these drawbacks:
Due of the lack of a fixed end-date, Scrum frequently leads to scope creep.
If individuals are not dedicated or cooperative, the odds of project failure are considerable.
Adopting the Scrum framework in big groups is difficult.
Only experienced team members can ensure the framework's success.
Team members might become irritated by daily meetings.
Any team member who departs in the middle of a project might have a significant negative influence on the project.
Quality is difficult to implement until the team goes through a rigorous testing procedure."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Atif Shahab Qureshi,Worked at Tradekey,2018,3,"I second the point of Ashwin Dhakal that Agile is not suitable for large projects. Myself, i am a software engineer and have witnessed this while working on so many projects. Moreover, other disadvantages of Agile approach are as follows:
Documentation tends to get sidetracked, which makes it harder for new members to get up to speed.
It’s more difficult to measure progress than in waterfall because progress happens across several cycles.
Agile demands more time and energy from everyone because developers and customers must constantly interact with each other.
When developers run out of work, they can’t work on a different project because they’ll be needed soon.
Projects can become ever-lasting because there’s no clear end.
Scope creep and experience rot.
Clients who work on a specified budget or schedule can’t know how much the project will actually cost, which makes for a very complicated sales cycle (until iteration ends is not something clients like to hear).
Teams can get sidetracked into delivering new functionality at the expense of technical debt, which increases the amount of unplanned work.
You need a long term vision for the product and actively work on communicating it
Products lack cohesion and the user journey is fragmented because the design is fragmented. The more time passes, the more disjointed software ends up.
Short cycles don’t leave enough time for the design thinking process so designers have to redevelop the experience over and over due to negative feedback.
Reference: Advantages and Disadvantages of Agile Project Management | ActiveCollab Blog"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,David Jablonski,Works at Internet Marketing,2018,2,"Agile, though being a rewarding system has some drawbacks. According to me providing agile software development services requires time and commitment with greater demands of clients and developers. [1]
Footnotes
[1] Belatrix Software: Software Outsourcing South America"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Pepper Hayes,Customer Support at nTask (2014–present),2020,2,"Nothing can give you a 100% output with a 100%input.
Agile has it’s own flaws and pros.
But here are some of the major drawbacks
Projects can easily fall off rails. Agile works best when all the needs of the client are either unknown or they keep changing. Of course, that is not the case with all the projects. The time in between, the team might not have as much to do.
The predictability of the deliverables decreases.
Every team member must have a clear understanding and direction of what are the needs and requirements of the product.
Increased need for constant interaction and communication between the stakeholders.
There is an increased burden on the developers and the client. Any lack or depravity on the part of either would cause a loss of quality of the product
because of the nature of agile, the documentation of the project is less detailed.
These drawbacks should not be of great worry to you, especially if your work coincides well with agile. It is a great disciplined and structured way to get detailed work done."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,John Lee,Lived in The United States of America,2020,3,"5 Key Disadvantages of Agile Methodology
Poor resource planning
Limited documentation
Fragmented output
No finite end
Difficult measurement"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Jeff Darcy,Worked at several startups,2015,6,"Like many others, my main concern is its applicability to all sorts of projects. Agility is about responding rapidly to changing circumstances. That might work well for front-end code with few internal dependencies. I wouldn't know. However, for infrastructure (especially systems) code with many internal dependencies it's solving exactly the wrong problem. There, the problem is not how to change direction quickly but how to maintain direction. It's a bulldozer, not a fleet of bicycles. In my experience, the meetings associated with agile methodologies end up being just distractions where the same slowly-changing information gets rehashed over and over again.
Another problem that we ran into on my current project is that agile methodologies don't mesh well with the ""upstream/downstream"" development model common in open source. That process is something like this:
Developer works on some code in their own branch of the upstream/community codebase.
Developer's code gets merged upstream
Time passes while upstream lurches toward a release, often driven by other features and release procedures completely beyond the agile-using group's control.
After the upstream release, the code is pulled into a downstream/corporate branch.
Developers (often the same ones who developed the features upstream but not necessarily) integrate/backport/etc. the new upstream release into a downstream one.
A downstream release finally occurs.

Agile's assumption of complete and close control of the requirements and development process conflicts with the middle phase where somebody else has complete control. The only way to deal with this is to treat the upstream development and downstream integration as two separate tasks within the agile team, which is a kludge at best. The result only reinforced everyone's perception that agile is a tool specialized for a problem domain other than ours."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Peter Vukovic,5 years of experience in agile software development,2015,3,"The main disadvantage is that it's not a standardized process, but a set of recommendations.
This is almost unheard of in any human activity involving large teams, because process standardization is the only way to control the output.
Because of this, agile is interpreted differently by every software team on this planet and while some subscribe to certain belief systems (i.e Scrum), most are profoundly confused by the whole thing and experience very few real benefits."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Bernie Kahn,"Former IT Project Manager, IT Systems Administrator, CSM",2022,1,"Places a lot of responsibility on the team, often more than some team members are comfortable with (self-organizing, estimating, etc.). Requires a culture supportive of scrum values (people over processes, working software over documentation, etc. ) which can be difficult in some companies. Company culture that fosters competition by individuals does not make for good team collaboration.
Needs a Product Owner to be available, or at least a viable proxy) to the team, on an ongoing basis.
Trad Scrum has challenges in scaling beyond the team level. Even for a team-centric project, dependencies outside the team itself are a challenge - too often left to the SM to deal with. In a similar way, no one has responsibility for communication outside the team.
Risk management is too often neglecting. Dev team might deal with purely technical risk, but even there, they don’t have a risk mindset, not are trained in ways of mitigation or avoidance, and anything outside the technical domain is left for the PO to deal with,"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Kurt Guntheroth,"Software Engineer for 40 years, author of book Optimized C++",2019,290,"Project based work: you are always likely to be laid off between projects. By contrast, accountants have an endless succession of 30-day closings, and are generally among the last let go if a business fails altogether. The last employed person in the world will probably be a mortician. There is always business.
Continuous retraining treadmill: tools evolve fast in software. There’s a significant new version of C++ every three years. There are 10 versions of Java. HTML is on version 5. It can be tiring to keep up, but slowing down risks becoming irrelevant.
Grim schedule death marches: Captains of Industry hate it that software devs make nearly as much as they do. They force us into bruising 24/7/365 work hours. It sucks."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Mike Fontner,IT-Security Engineer / Application Security (2020–present),2020,1,"One of the disadvantages - that most people are not aware of in the beginning - is that it puts all responsibility much further down in the “food-chain”.
The rule most prevalent I found so far is this one: “You build it, you run it!”
Seems to be simple and logical at the first glance. True it IS simple and logical.
AND it has a TON of implications most managers, expecially in the upper management are absolutely not aware of.
For example: If I’m the one running it, then I also want to know what happens while the system is under production. I also want / need to know how the system is fairing under test. I also … ! You get the drift.
In agile, High Quality DevSecOps is imperative to do your job successfully! No manager can tell you exactly what to do when and how, because they don’t know what you solved how and where.
The whole responsibility is on the team. Therefore the team has to decide what works best … for the teams responsibilities.
In a working agile environment (emphasis is on working!) the role of a manager is not to tell people what to do but to make sure that the team can do what it has to do in order to fullfill it’s responsibilities! That also means to clear obstacles in whatever form they appear, make sure different departments work smoothly together, make sure the proper talent is represented in the team, coaching your people to get the proper education they need if necessary, etc. pp.
The pressure, the responsibility and also the lack of someone else to blame is not for everyone though. You need properly geared people as well who apprechiate such an environment, because nobody will tell you what to do when and how. That’s YOUR (!!) repsonsibility too.
And that’s just one aspect.
A switch to agile is so deep and brings such profound changes in the whole culture, that old silos and management structures within the whole company will either be destroyed in the process or the agile will fail. Because you cannot have only a small agile thingie somewhere in the company while the rest goes “unspoiled”.
It’s an all or nothing decision.
Yes, IF agile is truly implemented, you can reap a LOT of benefits!
BUT on the road to fully get a grip, figure out what works for you and what not, million things can go wrong and nothing will be achieved. Then agility is blamed. It’s not the system though. It’s the change, that people resisted."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Gerry Claps,"The ""Pragmatic"" Agile + Lean Practitioner",2016,2,"Here are just a few:
An unfortunately common perception that its methods are to be taken as dogma (e.g. we only do Scrum, Kanban, XP, etc.).
Their emphasis on engineering and delivery, but omission of product development (e.g. there’s no focus on product roadmaps).
The dangerous confusion of thinking 'Scrum' is 'agile software development' (e.g. Scrum is one specific method in the ‘agile’ family)"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Rajeev Techexpert,Author has 77 answers and 81.1K answer views,2020,1,"Hi,

First of all lets understand what is agile model?

Agile model is a type of project management process which is mainly used for software development. Where demands and solutions evolve through the collaborative effort of cross-functional teams and customers.

Advantage of Agile model:
- Developers, testers and customer can interact with each other.
- Software is delivered frequently.
- Continuous monitoring to technical excellence and good design.
- Daily coordination and cooperation between business people and developers.
- Adaptation to changing circumstances.
- Even last minute changes in requirements are welcomed.
Disadvantage of Agile model:
- Agile model is not useful for small development projects.
- Project can easily get taken off track if the customer is not clear about final outcome.
- Documentation of the project is less detailed because of the nature of agile.
- Agile Model require more time and commitment as customers, developers and testers must constantly interact with each other.
Above answer is based on my experience in a software app testing company. I hope this will help.
Do let me know in case of any query regarding the same.
Thanks,
Rajeev"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Daria Bagina,"Master's in Management & Project Management, ESCP Europe (Graduated 2012)",2022,1,"It is quite difficult to implement and will require lots of changes to how you do, track, measure work, how your teams are organized, roles, responsibilities, and more.
If you want to to actually work, you will have to invest in it. You won't be able to do it on your own by sending people to training and that's it. You will need to hire an expert, and that's not cheap.
Some people in your organization will most likely be not willing to change and will be sabotaging the transformation (whether consciously or not). Which means you might have to make some tough decisions.
And, of course, change is hard and takes time, so at the beginning you most likely will see drop in productivity.
But in the end it's worth it. The benefits of Scrum implementations are long term and will support thr organization in the uncertain times much better than traditional approaches would."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Simon Kinahan,Product Engineering Group Director at Cadence Design Systems (company) (2011–present),2014,3,"I'll document my personal experiences. We were very successful in a previous company in moving to an agile model to try to better accomodate changing requirements. However, there are some drawbacks:
1. It can be frustrating for the customers of a product company. Agile methodologies make it hard for customers to plan, because the development team cannot give hard delivery dates for functionality beyond the current iteration. Customers in business where they have manufacturing deadlines cannot live with this, so we had to adopt a semi-agile model where certain functionality had to be estimated, planned and tracked across iterations and engineering time reserved to make sure it made progress even if from a purist agile perspective it was not the highest priority right then.
2. Developers may wait for the customer team to report issues they already know have bad consequences, because its easier than announcing that there is a problem and then trying to persuade the customer side to prioritize fixing it. This led to some accumulation of poor design decisions in the code, which then needed a relatively large not-very-agile effort to rip out and fix.
3. The emphasis on not planning and designing is fine where tests and customer usage will find issues, but with mathematically deep modelling and optimization, its a bad idea. At this level, requirements and approaches have to be carefully spelled out in as much detail (including maths and pseudocode as necessary) as possible to make sure eveyone understands the consequences of the decisions being made. The amount of work in implementing these things has to span iterations, so some up-front effort is needed to ensure the direction is right. Otherwise you end up with very large amounts of code that don't do what was needed, but also cannot realistically be incrementally improved."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Otto Gold,Studied Software Engineering at Charles University in Prague,2023,0,"The main drawback is how many ignorant people claim they practice it. Typically the worst are most vocal about it plus like to ""teach"" others. Come on. Common sense anyone?
The obvious benefit is that the world of today is very fast and ever changing. So being stuck with the waterfall for months only to see it is not a fit or the work is no longer relevant is an expensive mistake."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Raveesh Rai,Product Management,2022,0,"If not implemented in a right setting, i think agile/scrum will do more damage than benefit. The right setting I mean is more around the agile manifesto principles.
Also, if there is a lack of support from leadership, compatibility gap between teams, in-effective clarity of purpose and so on it’ll be more painful to operate in agile than traditional established methods."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Sachin Chauhan,Engineer in making,2021,1,"Agile is B.S.
It's has no advantage, doing work in iterations is a sign of the incompetency of developer and more over the unclear goal of the client.
To avoid these two issues, they have created very cleverly this so called Agile methodology, which if you look closely you will find that it complicates things and kills innovation.
This is just non-sense created by some MBA grads.
This method helps everyone except the people who actually do the damn job.
Purely managerial oriented process.
It is a poor attempt to make demeaning and scut work interesting.
In simple terms, suppose you order a burger at McDonald's. Now, instead of waiting for it patiently outside, you go into the kitchen and follow the process till a bigger is finally made. Just imagine, the ruckus you are gonna create in the kitchen.
Now, you are the client and kitchen workers are the developers. The person at the counter is the manager just facilitating the client to have his way."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Nabarun Mondal,Engineering Leader with 20 years of Experience,2021,26,"Agile is NOT a methodology. It is a mindset.
Team must deliver faster, simpler, workable code.
The only success criterion of agile is how much time saving it had.
If using other mindset it used to be delivered in X hours,
and Agile can do it in 0.1X hours, agile mindset has own.
Anywhere it is not possible to do, agile is at disadvantage. That includes every possible “serious” Engineering domain.
Agile will not work, does not work anywhere serious Engineering is required - build engine of SpaceX rocket.
If someone is actually developing a kernel - even then I do not think Agile works."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Melvin Pérez-Cedano,"M.S. in Software Engineering, Carnegie Mellon University (Graduated 2003)",2015,39,"Most of what could be considered disadvantages of agile software development are typically signs of major essential problems that no single software process framework would make go away. Agile software development helps in making those problems evident, because of the emphasis on delivering working software frequently and the frequent retrospectives.
In other cases, certain annoyances that can be seen as disadvantages are caused when agile software development is used under contexts like regulatory environments (no working software until comprehensive documentation is developed upfront) and predictable projects (unneeded frequent feedback).
I would say though, that adopting agile requires significant organizational changes that until they aren't implemented would undermine the benefits of agile software development and even cause more pain. And this is not strictly a disadavantage of agile software development, but a disadvantage of introducing a new paradigm."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Stacy,Knows English,2021,1,"Disadvantages of Agile software development :
Less predictability. For some software deliverables, developers cannot quantify the full extent of required efforts.
More time and commitment.
Greater demands on developers and clients.
Lack of necessary documentation.
Project easily falls off track."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Steve Baker,Senior Software Engineer (2013–present),2023,124,"These things come and go - they get trendy - then the Next Great Idea appears.
I have never worked at a company that used textbook “Agile” - every single one of them adapted it in some way.
The underlying message of Agile is very good indeed - but some of the specific parts of it are dubious.
I still have a deck of “Planning Poker” cards collecting dust someplace - but we only used them a couple of times about four jobs ago - then dropped it.
I do think that daily scrum meetings are a good idea - I still like the whiteboard full of post-it notes and doing things in 2 week sprints (shorter right before main release - longer during initial development)…but in companies with a lot of people working from home - this is harder to do.
Burndown charts seem an unnecessary intrusion - and they don’t really work…and if you have teams that are SO large that you need multiple scrum meetings and a scrum-of-scrums - then I think you need to re-...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Steve Baker
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Riley Claire,Software Test Engineer | Technophile | Blogger,2023,0,"While incremental delivery might assist get products to market faster, it is also a significant downside of Agile approach. Because when teams work on each component in separate cycles, the overall result typically becomes quite fragmented rather than a coherent entity.
5 Key Disadvantages of Agile Methodology are as follows:
Poor resource planning
Limited documentation
Fragmented output
No finite end
Difficult measurement"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Brad Bass,"Java, C#, ASM and PVX+ (dont ask how that fits in there, lol)",2015,9,"Scrum 'masters', daily meetings, change.. Stats become more important than the code itself. We hate it for the reasons weak programmers love it. They love it because they dont really have to think (they are given a list of tasks to complete), theyre basically capped on how much work they can do during an iteration, the focus is on the 'team', so they tend to be able to get away with/hide their mistakes.. We hate it because we dont like being told how to do our jobs and especially not by some SCRUM 'master' who most likely has never written a line of code in their life. I suppose for the most part it just seems like Agile causes us to waste a lot of time to produce less quality work over shorter periods of time."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Alan Mellor,Consultant Software Engineer (1990–present),2019,21,"I think yes you need some kind of automated testing. Technically no - probably.
You could do iterative development without having any unit tests or end to end tests. You would then use manual testing only.
You get a couple of problems from this.
Obviously, it is slow. Unit tests complete in the order of hundreds per second. No manual tester can achieve that.
But it has a worse structural effect. You get feedback about problems late in the process. You’ve decided on a design, coded it, reviewed it, built and deployed it, ran manual tests - then boom, you find the design you made was wrong.
Agile is all about the ‘shift to the left’ - pulling all feedback to happen earlier.
Development unit testing has two roles in this: it reveals behavioural faults earlier. With true test-first TDD it is an active part of preventing defects; you already have a test before you write any code.
But this also reveals code design defects earlier. Test code is the first live usage of your new code, exercising the ease of use of its API. If it’s hard to test, it’s hard to use.
Without TDD, you are leaving some aspects of feedback to later in the process when it is more effort to do rework. And more effort, as every professional knows, is a euphemism for ‘never gonna happen’.
The professional term is ‘put a tech debt ticket on the backlog’. My, how we all chuckle. You can have a separate trash can for those tickets in certain places.
Obviously, you can still develop code without TDD, people did for decades. It works just fine. It got mankind to the moon and back.
But you are missing an opportunity to make your life easier.
Plus TDD basics are not hard to learn. Have you got 20 minutes to spare? Watch this:
How to write a TDD Unit Test with Java | View from the Code Face"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Tushar Jain,"Agile coach, trainer, author, speaker, eager learner, ...",2017,0,"If there are any drawbacks in short and numerous feedback cycles, trust among team members, always customer present, delivering value incrementally, and evolving requirements the Agile has all of those.
The real question should be how can I use characteristics listed above in my work? The Agile way of working in software development and making a physical bridge over a river will be entirely different."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Agilemania,Agilemania is to be the Preferred Agile Company and partner.,2023,137,"As with other software development approaches (such as the waterfall model, the V-model, the iterative model, etc.), the Agile development model is a methodology for creating software, in addition to being a form of agile method. Software is created in quick, incremental cycles. Agile is an important component of Agile software development and signifies ""the capacity to move swiftly and effortlessly"" and adapt to change quickly in English.
Advantages of Agile Methodology :
In Agile methodology the delivery of software is unremitting.
The customers are satisfied because after every Sprint working feature of the software is delivered to them.
Customers can have a look of the working feature which fulfilled their expectations.
If the customers has any feedback or any change in the feature then it can be accommodated in the current release of the product.
In Agile methodology the daily interactions are required between the business people and the developers.
Disadvantages of the Agile Methodology :
In Agile methodology the documentation is less.
Sometimes in Agile methodology the requirement is not very clear hence it’s difficult to predict the expected result.
In few of the projects at the starting of the software development life cycle it’s difficult to estimate the actual effort required."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Edward G,CSM under Ken Schwaber (15+ years ago),2024-06,0,"Probably that it's much harder to get right than people realize.
You can go through the motions and not get anywhere, like getting into a car and driving it at 10 km/h. Yes, you're in a car and going somewhere, doing all the things drivers do. But you're not making any progress.
Then people give up, get out and kick the tires, and swear cars don't really work."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Paresh B,Project Manager and Scrum Master,2024-08,1,"Here’s a brief comparison between Agile and traditional software development:
Process:Agile: Iterative, incremental cycles (sprints).Traditional: Linear, sequential phases (Waterfall).
Flexibility:Agile: Highly adaptable to changes throughout the project.Traditional: Inflexible; changes are difficult and costly.
Customer Involvement:Agile: Continuous, with regular feedback and early delivery.Traditional: Limited, mostly at the start and end.
Delivery:Agile: Frequent delivery of working software (every 2-4 weeks).Traditional: Final product delivered at the end.
Project Management:Agile: Decentralized, with collaborative, self-organizing teams.Traditional: Centralized, with a Project Manager in control.
Risk Management:Agile: Low risk through continuous testing and feedback.Traditional: Higher risk due to late testing and feedback.
Documentation:Agile: Minimal, focusing on working software.Traditional: Extensive, with detailed documentation at every phase.
Team Collaboration:Agile: High collaboration, cross-functional teams.Traditional: Siloed teams with handoffs between phases.
Quality Assurance:Agile: Continuous testing throughout.Traditional: Testing only after development is complete.
Success Measurement:
Agile: By customer satisfaction and adaptability.
Traditional: By adherence to the original plan and timelines."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Peter Vukovic,5 years of experience in agile software development,2016,61,"To understand what is agile development, let’s think about two different ways to climb a rock:
The planning way, and
The learning way.
The planning way
The way to climb a rock this way would start by commissioning a geological survey of the rock to understand it’s composition and determine the best material to use for the spikes.
An additional helicopter survey would be used to scan the rock from all sides and determine the best coordinates to place the spikes during a climb.
A climber would also analyze weather patterns for the past 25 years to forecast the most promising date of the climb.
Finally, he would begin to climb the rock according to the plan.
Let’s assume that he is successful and reaches the top. His cost of reaching the top ranges in tens of thousands of dollars, and at least 60 days in time. Not cheap.
Now let’s consider the learning way to climb a rock, which is the way rock climbing works in practice.
The learning way
A climber will glance at the rock to get an idea of how difficult a task it’s going to be. He will decide on a date, get his gear ready, and start climbing immediately.
As he places his first spike, he will learn about the composition of the rock and whether the spike is strong enough to penetrate. If not, he will use a different type of spike and move on. As he attempts to climb, if any spike appears to be unstable, he can easily fall back to the last stable spike and try a new spot.
Spike by spike, this climber learns about the rock and climbs it at the same time.
His total effort: just one day. His total cost: the cost of the climbing gear.
This is what agile is all about.
With each new move you make, you learn more about the rock you are climbing so you can plan your next move. Instead of trying to figure it out all at once, you embrace the fact that it's okay to learn as you go. This makes you fast and efficient."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Aadarsh Patel,"Lives in Pune, Maharashtra, India (2008–present)",2023,137,"Advantages of Agile Project Management
You can deploy software quicker, so your customer can get value sooner rather than later
You waste fewer resources because you always work on up-to-date tasks
You can better adapt to change and respond faster
Faster turnaround times
You can detect and fix issues and defects faster
You spend less time on bureaucracy and busywork
There's a big community of Agile practitioners with whom you can share knowledge
You can get immediate feedback (which also improves team morale)
Developers can improve their skills based on QA feedback
You don't have to worry about premature optimization
You can experiment and test ideas because its costs are low
Disadvantages of Agile Project Management
Agile has substantial advantages, and it's important to know the disadvantages, limitations, and risks it brings.
Documentation tends to get sidetracked, which makes it harder for new members to get up to speed
It's more difficult to measure progress than it is in Waterfall because progress happens across several cycles
Agile demands more time and energy from everyone because developers and customers must constantly interact with each other
When developers run out of work, they can't work on a different project since they'll be needed soon
Projects can become ever-lasting because there's no clear end
Scope creep and experience rot
Clients who work on a specified budget or schedule can't know how much the project will actually cost, which makes for a very complicated sales cycle (""Until iteration ends,"" is not something clients like to hear)
The product lacks overall design, both from a UX and architecture point of view, which leads to problems the more you work on the product
Teams can get sidetracked into delivering new functionalities at the expense of technical debt, which increases the amount of unplanned work
Features that are too big to fit into one or even several cycles are avoided because they don't fit in nicely into the philosophy
You need a long-term vision for the product and actively work on communicating it
Products lack cohesion, and the user journey is fragmented because the design is fragmented. The more time passes, the more disjointed the software ends up becoming
Short cycles don't leave enough time for the design thinking process, so designers have to redevelop the experience over and over due to negative feedback
Check here for some more Scrum sprint planning anti-patterns and product backlog and refinement anti-patterns"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Rank Rise,"MSIT in Information Technology, Assumption University (Graduated 2009)",2023,0,"Advantages of Agile
1. Flexibility and Adaptivity
2. Creativity and Innovation
3. Time-to-Market
4. Lower Costs
5. Improved Quality
6. Customer Satisfaction
7. Employee Satisfaction
8. Organizational Synergy
Disadvantages of Agile
1. Training and Skill Required
2. Organizational Transformation
3. Scalability
4. Integration with Project/Program Management"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Charles Brown,Volunteer Leader at RUMC Job Networking (2010–present),2019,3,"In agile, we have many frameworks to choose from that define the processes that we use. Agile is a way of thinking about how we work. (See the AgileManifesto.org). The frameworks define the processes and communications needed to make this work. The first example is Scrum. The website Home | Scrum Guides will allow you to download the PDF that explains it.
Scrum wants us to think smart and communicate effectively with specific roles to make the work effective. I like the book Scrum: The Art of Doing Twice the Work in Half the Time by Jeff Sutherland. It explains the development of Scrum through a series of stories. Starting with using User Stories.
Another Framework, SAFe, the Scaled Agile Framework for the Enterprise, combines Agile ideas with lean processes. There is a good book for explaining SAFe by Richard Knaster, a SAFe Fellow and Dean Leffingwell, the creator of SAFe called, SAFe® 4.5 Distilled: Applying the Scaled Agile Framework® for Lean Software and Systems.
This will help you get better at Agile and be a better person at implementing the agile framework you choose.
Depending upon the framework you choose to implement, the minimum amount of work will be different. In Scrum, you only need to implement the iteration every two weeks, and the retrospective. Then you can add the next piece every iteration, until you have full blown Scrum up and running.
Just do not linger on a half-way point. You have to keep getting better and growing each iteration."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Piers Campbell,"18 years experience in building, coaching and leading teams",2022,137,"There is one key disadvantage to agile that is preventing organisations, teams and individuals from adopting it fully and making lasting improvements to the way it works.
No one really knows what it means.
Which is to say, there are a set of principles that provide a framework in software development to solve a set of problems from twenty years ago, but there is no real consensus on what agile means outside of that context. People with experience of working with an agile mindset, tools and frameworks will have some common ground, but there are other people with literally no understanding of it that will stick the word ‘agile’ in front of any old nonsense to try to make some money out of it.
A lot of time is wasted over discussion of what is or isn’t agile which would be much better spent improving the situation of customers and teams. Or to put it another way, emphasising people and interactions over processes and tools!"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Kevin Bright,Chief Technical Advisor (2019–present),2022,3,"I understand the criticism of agile—I really do. Since it's focused on sprints and short turnarounds, it's hard to see where the quality comes in. It feels like you're getting conveyer belt products instead of tailor-made solutions (if you've read Brian Knapp’s rant, you'll get what I mean).
4mation is a software development company that understands that agile is a mindset. The entire thing is about continuously delivering value to clients in the smallest chunks possible. This thought process allows us to mitigate risks of failure at every step.
Agile fails when it stops being a developer method and becomes a management one. It's when executives latch themselves to a buzzword and flood the market with false promises that agile never made in the first place.
The question is, what do you want to achieve? And do you have the resources to make it happen?
For me? I always want to roll out an MVP as soon as possible for customer response and business value. So what ""actually works"" in this scenario is agile.
When I work with my software development agency, we make it a point to set realistic goals paired with a kickass team. We focus on developing an MVP then take time optimising the product. We get to minimise risk, improve projections, cut down on unnecessary costs, and we don't have developer burnout.
I wouldn't have this with any other method.
If agile isn't working out for you, ask yourself why. Is it because your project is better off with a different process? Or is it because your agency isn't genuinely using agile methods?"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Andreas Blixt,programming since '96,2016,21,"We don't need it.
Let's say we avoid all that is considered Agile and Scrum. Of course, we still want to work in a manner that results in more success than failure over time without great expenditure of resources.
Over time, we'd learn a set of heuristics that let us avoid going down the wrong path. For example, we may realize that a detailed plan of a project for the next year is unlikely to stay accurate so we'll choose to focus on the near-term for details and just plan the big picture for the rest.
After some trial and error we may also realize that a lot of problems in product design only materialize when people get their hands on prototypes. And surprisingly, problems that never occurred to the implementors are big issues for the end-users, so let's make sure we release new versions early and often. It also turns out that people with a stake in your project want to see results sooner and faster.
With all these concerns in mind you might just end up with short development/feedback cycles, short-term detailed planning, ad-hoc adjustments and reactions to feedback.
This is what agile is. It's the collection of heuristics that people in the business have accumulated from their experience (read: trial and error). We don't need Agile, but it can be very helpful."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Chuck Cobb,Agile Project Mgt Author and Instructor (Over 200K Students),2022,0,"A pure Agile approach does not provide a good framework for managing project costs and schedules if that is important. As a result, it is difficult to apply to a contracting situation. However, that does not preclude the use of a hybrid Agile approach. Here’s an article with more detail on that:
Agile Contracts - How Do They Work?
Some people may think that you can't impose typical cost and schedule constraints required by contracts on an Agile project, but it definitely can be done.
https://managedagile.com/agile-contracts/"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Nicolas de Mauroy,Founder at Open Lowcode (2019–present),2022,1,"The agile principles are a useful formalization of one element you need for a great product development: getting customer feedback, and iterating on the product, having frequent, if partial, releases to avoid the tunnel effect.
One challenge is that, in my experience, the main methods for agile development are uselessly complex, and, ironically, rigid. You are probably better off telling your team to get frequent user feedback and releasing often, and let them organize as they wish, than to force them to apply Scrum or whatever trendy method, with their rigid guru and confusing newspeak.
Another challenge is that iteration on user feedback and frequent releases are only one element of what you need to get a great product. There were actually good things in the old waterfall methods: they forced to have a plan, and allowed accountability, as a team was actually committing on a cost and delay for the final business goal. Committing on a goal is a key factor in avoiding useless complexity, gold-plating, and focusing everybody on the objective.
And having a strategy, plan, and overall architecture is necessary for anything with a minimum of complexity. You need to revisit the plan regularly, but, still, having a plan is critical.
So in my experience, you need an organization that is adapted to your team size, and has the minimum elements of agile and top-down planning."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,David Crowe,Works at Starfleet,2022,0,"It forces a change in the way people think about problems. This could make it impossible in some environments, and downright risky in some cultures."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Cliff G.,"Technologist, Problem Solver, Product Manager, Lawyer, and all-around fun guy.",2018,3,"Absolutely! Agile methodologies like Scrum and Kanban are not silver bullets that just solve everything.
I think the biggest disadvantage of Agile methodologies lies not in the methods or processes themselves, but in the assumptions that underlie them, which many people ignore:
The business is accepting of proceeding with some level of uncertainty in the final outcome;
The development and quality assurance teams are ready to work together closely, rather than in staggered delivery/test/rework cadences;
Stakeholders across the business innately understand the process and how it will affect their delivery and expectations.
There are also some projects that simply aren’t really appropriate to apply an Agile approach against:
Mission-critical, “nine-nines” hardware or software that simply cannot go down, ever due to risk of loss of life or limb.
Regulated hardware that must be fully designed, reviewed, and approved by a state or Federal agency before it can actually be built.
Parallel development of hardware, software, and manufacturing facilities where a change in one causes effects of change in the others.
More often than not, when I’ve seen Agile transitions fail it’s not been because of the practices or methodologies “not working” but rather because people attempt to blindly implement them without really understanding the problems that they’re trying to solve or the impacts that their choices will have throughout the business.
Here are a few blog posts I’ve written on the subject:
Why Isn't Agile Working For Me?
What ""Agile"" Means to the Business
You're not Agile Unless You're ""agile""..."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Keith Braithwaite,From firmware for mobiles to enterprise behemoths,2019,7,"The minimum? This:
Buy a pack of sticky notes.
get whomever has the ideas for what to do to write one idea each on a few sticky notes. Ten would be too many.
Arrange your stickies on the wall, the one most wanted at the top, least wanted at the bottom. If you think of a new one, add that. If you’ve learned one is not needed, take it off.
Round up the people who make things, have them talk with the person who wrote the stickies to understand what the one at the top means. Just the one at the top. Go get some more people, if you need them.
Do what’s required to deliver that first idea, and just that one, to the people who can get value from having it, in a couple of weeks. If that can’t be done, try to find a smaller idea to do. Take note of what those people tell you about using the thing.
go to 3."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,James Chau,Worked at Canadian Armed Forces,2022,1,precision is not valued enough
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Ken Gregg,Software Engineering and Management Positions for decades,2023,6,"Not really, but it doesn’t matter either way.
Just as programming languages and programming paradigms should not be judged and chosen based on their age, software development methodologies should not be judged or chosen based on their age. Older is not inherently worse (or better), and newer is not inherently better (or worse). All have their place.
Agile, when properly understood and applied, works well for some types of projects, but not for other types of projects. The same can be said for continuous integration, incremental development, rapid application development, waterfall, spiral, and any other methodologies you can name. In many projects, you see a mix of methodologies that works for that specific project.
There is no silver bullet methodology that works for all possible projects. There never has been. All have strengths and weaknesses and tradeoffs. Those who drop all the existing methodologies in favor of the newest shiniest methodology for all of their projects, without intelligently thinking through all the pros and cons, end up relearning this lesson. There is no silver bullet...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Ken Gregg
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Mark Brown,50+ years working in multiple languages on dozens of apps.,2019,7,"The disadvantages are the same as with any job, long hours, little if any recognition outside your immediate orbit, missed birthdays, school plays, soccer games, and anniversaries. If you’re lucky enough to work on something with a public face you might become known in a very small circle but at least you can point to that page or that report and say you had something to do with it.
There is no particular success path beyond management if you’re not part of a start up with stock options. You’re going to work for someone making wages until you realize you can never make as much working for someone else as you can working for yourself. But then you run into taxes and office supplies you can’t steal from the company and payroll if you need someone to work for you.
And just like music, it takes a lot of tries before you break into the big time and then you might only be a star for a short time and then relegated to the pile of what have you done for me lately’s.
I travelled all over the world, worked for banks, auto distributors, insurance companies, and a nuclear missile site, and achieved a certain status in my little niche, but I’d give it all up for one of my wife’s birthdays I missed when she was still alive."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Richard Greene,30+ years as software developer,2020,2,"Maybe because it is such a general term, that means so many different things to different people. There is an Agile Alliance and the Manifesto for Agile Software Development, but there is no ISO standard, as there is for languages, such as The Standard : Standard C++. It is often said that Agile processes should to be tailored to the team or enterprise, which would be the opposite of standardization.
See this Subway Map to Agile Practices | Agile Alliance. Notice how many “tribes” there are, each with their own practices which may or may not be shared by others."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Yogyata Mehtani,Former Contractual Product Manager (2018–2019),2018,2,"There is no such disadvantage of agile that I will mention but yes there are some challenges that can be pretty rigid for your ‘agile’ process.
Miscommunication of information within the team.
Not every member of the team is on the same page.
It is tough to keep the whole team equally dedicated towards the project.
You can handle the project but handling people is always a challenge.
People run behind agile user stories or other deliverable without even understanding them.
Developers and QA have different interpretation of user stories.
We always tend to squeeze things in a sprint but sometimes that effects the quality as well. And if we try to maintain the quality, this compromises the sprint time stamp.
Agile success requires experienced and dedicated team.
Agile is not a one day task or one time exercise, you ace it with the experience and challenges you face.
Removing roadblocks at right time sounds like a miracle only. We always get to know about roadblocks during the sprint not at the very start."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Dave Voorhis,"Software entrepreneur, engineer, and educator for 35+ years.",2022,21,"It’s supposed to be a lightweight methodology that focuses on:
Delivering working code rather than comprehensive documentation;
People and interactions over processes and tools;
Customer collaboration over contract negotiation;
Responding to change over following a plan.[1]
That’s what it’s meant to be.
Unfortunately, in the same way that “Little John” was a really big guy, and “Military Intelligence” isn’t, sometimes what is called Agile is anything but.
Instead, what was meant to eliminate bureaucracy, managerial interference, and unproductive ceremony sometimes becomes nothing but red-tape, micromanagement, and value-free wheel-spinning.
In other cases, it’s the label incorrectly applied to completely ad hoc, unplanned, unmanaged, hopeless muddles to make them sound like something organised and intended.
Done properly, it is very effective.
Footnotes
[1] Manifesto for Agile Software Development"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Amy,Former S.D.E III,2022,137,"Agile has several advantages and disadvantages. If you want to decide whether or not to buy this CRM, you must first determine what features you require. The advantages and disadvantages of Agile CRM are listed below.
Pros of Agile:
Reasonable pricing
One of the most excellent email marketing tools
Contact management made simple
Automated sales pipeline system makes it simpler to close business
Easy-to-use configuration and administration interface, even for beginners
Cons of Agile:
For the Starter package, just one integration option is provided
Buggy email capabilities
Third-party integration difficulties
Limited third-party integrations
Limited service automation functionalities
Lack of reporting"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Chuck Cobb,Agile Project Mgt Author and Instructor (Over 100K Students),2018,3,"I don’t really believe that there is such a thing as “post-Agile development”. That implies that Agile will become obsolete and something really different will replace it. However, I do believe that the use of Agile methodologies will continue to evolve and mature. Some of the trends that are evident to me are:
Traditional plan-driven project management is beginning to converge with Agile. Agile started out as a revolution against traditional plan-driven project management practices (what many people loosely call “Waterfall”) and that pendulum is starting to swing back to the middle.

People are beginning to recognize that there isn’t really a binary and mutually-exclusive choice between “Agile” and “Waterfall” as many people seem to think. Rather than force-fitting a project to one of those extremes, a better solution is to fit the methodology to the nature of the problem which may require a blend of both approaches.
Learning how to blend those approaches together requires understanding a broader range of methodologies (both plan-driven and Agile) and understanding them at a deeper level.

Many people today do Agile somewhat mechanically “by the book” without really understanding the principles behind it. That results in a somewhat rigid approach to how to apply Agile which is exactly the opposite of the adaptive approach that is intended for Agile.
A very big trend is that many companies and people are attempting to scale Agile to larger and more complex, enterprise-level projects and that will accelerate both of the above trends.

Agile was originally designed around small, simple, single-team projects and it can be difficult to scale without thinking about how to blend it with typical enterprise-level management practices including project/program management, project/product portfolio management, and overall business management.

In some cases, an attempt has been made to force a whole company to be agile in order to adopt an Agile development approach and that just isn’t completely realistic or desirable in some cases. Becoming Agile is not necessarily a goal in itself - it has to be applied in the context of the company’s most critical business objectives - what problem will it solve and how will it solve it?"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Alfredo Pinto,Works at Softtek,2019,137,"To better understand the answer lets first see some history.
Software development exist since the beginnings of 1960s. The way software were created by that time is complete different and formal methodologies make sense at that time since they were created for that kind of development. A lot of developers were needed to write code and projects took a lot of time. It was expensive and only big companies could have the luxury to afford it. There where heavyweight methods.
But then, on the 1980s things change, the PC where invented and new languages come to the playground. Now you don’t need an army of software developers to create software nor big and expensive machines. Team now are a lot more smaller since everything was simplify and soon everybody realize that the old way to make software now is obsolete and overkill.
This was the realize by the developers and during the 1990s, a number of lightweight software development methods evolved in reaction to the prevailing heavyweight methods like Rapid Application Development (RAD) , dynamic systems development method (DSDM), Scrum, Crystal, Extreame Programming(XP) and feature-driven development (FDD). Although these all originated before the publication of the Agile Manifesto, they are now collectively referred to as agile software development methods
In 2001, seventeen software developers met at a resort in Snowbird, Utah to discuss these lightweight development methods, including among others Kent Beck, Ward Cunningham, Dave Thomas, Jeff Sutherland, Ken Schwaber, Jim Highsmith, Alistair Cockburn, and Bob Martin. Together they published the Manifesto for Agile Software Development.
Currently the most usual way to work is Scrum or Kanban and for the software development team they work great since it eliminates all the bureaucracy that previous formal methodologies has, for example, Rational Unified Process (RUP) form IBM, a current formal methodology still used, stands that it is needed a lot of different roles and a lot of different processes to develop software.
TSP/PSP, another formal methodologies used together have less process and roles, and I actually love them, but are heavily load with metrics.
By the other hand, Agile methodologies like scrum eliminates all that and focus on the software development by simplifying the software process, making software projects to last a lot less time with fewer people. This for example is the scrum process.
So, that is the beauty of software methodologies, less time, less people and less difficulty, but it comes with a price.
Agile methodologies don’t have a lot of the safety features the formal methodologies has. Neglected and pour requirements/stories and developers with no experience make projects fail very easily.
Also since Agile methodologies don’t have a design phase, for long projects the lack of planning in this matter make them over time to be more difficult to implement stories, since it needs a lot of code refactor. The bigger the project gets, the difficult it gets to change a lot of code to make a story fit.
A lot of people defend their right to not pay attention to this planning since Agile don’t encourage them, but the funny thing is that they also don’t prohibited.
I have seen that borrowing good practices and models from the formal methodologies makes wanders, but the Agile Orthodox see this as a sin. Once, I didn’t get a job because I say during the interview that I use a mixture of Agile and formal methodologies, the interviewer had the impression that I wasn’t qualify to lead a project.
So, I think Agile methodologies are great but you need to put learn the principals that formal methodologies stand for, improve always the way you do your job even if you feel you are already good at it.
For big and complicate projects I still recommend using formal methodologies since they lower a lot the risk for a project to fail. A lot of people says they don’t work, but actually what they are really saying is that they don’t are properly trained to work on those methodologies."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Sunil Umesh,"Had a rocky career, so I help people avoid mistakes!",2019,6,"Here are the ones I can think of, at this moment:
We are often assumed to be socially awkward nerds with no life outside of programming.
Clients more often than not, come up with unrealistic requirements/deadlines.
Non-technical managers can be a pain in all the wrong places.
People assume we developers are all rich, earning hefty paycheques. In reality, this is only true for those of us having some niche skills, or working in specific locations (such as San Francisco). For the rest of us, wages are just slightly above average.
We are often asked to fix someone’s computer or internet connection. And if we are unable to do it, they ask us “You are a developer, why can’t you fix this”?"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Kavita,Former Quality Assurance,2023,4,"Agile refers to methods for developing software that place an emphasis on incremental delivery, teamwork, ongoing planning, and continuous learning rather to trying to release everything at once near the end.
Agile emphasises maintaining a lean workflow and developing minimum viable products (MVPs) that undergo several revisions before being considered complete. Feedback is continuously received and used, making the process overall much more dynamic and focused on a single objective. Agile software development is one of the most efficient ways to streamline work processes and address customer needs.
A contemporary project management technique called agile software development divides a big project into smaller pieces so that customers can provide feedback at each stage. Customers can experience the product at various stages and provide their feedback thanks to this. A finished product that people genuinely adore is the outcome!
Benefits Of Agile Working
Here are a few benefits of Agile development:
Better customer satisfaction
More adaptability
Better budget and time management
Better teamwork
Increased motivation"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Leon Tranter,11 years working on enterprise IT systems,2023,137,"There are a bunch of pros:
Shorter lead time - people start getting stuff sooner. Instead of spending a long time writing up all the requirements and figuring out all the designs, you work in small batches, so something gets released much earlier.
More and faster feedback - since you are releasing in many smaller chunks rather than one big one, you can get more feedback and get it sooner, which helps you refine the products
Less handoffs - agile favours empowered cross-functional teams who own their technology stack - this means less handoffs, blockers, dependencies, etc.
Cons:
Harder to get stakeholder buy-in… stakeholders want up-front certainty and will struggle with the inherent uncertainty of this system
Architecture is a problem area - since we’re moving fast in small pieces, you figure out the architecture as you go, via “emergent design” - this can sometimes end up with messy architectures and spaghetti systems
Quality needs to be taken very seriously or the wheels will fall off - since you’re moving fast, it’s easy to fall into bad patterns and take shortcuts, leading to quality problems and technical debt."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Eric Litovsky,Principal Software Engineer at Grey Swan Inc (2014–present),2019,6,"Agile is a belief system.
And not unlike many other belief systems, it can often be carried to extremes or simply be subject to interpretation.
And also like many other belief systems, it can also be used to justify some horrendous practices.
As an engineer, I have been through my share of ideology. I started writing software to make myself happy, which involved extreme optimization, endless refactoring, terseness, and immaculate application of patterns and principles. While this made me happy as an engineer who loved showing off his code to other engineers, it had absolutely no added value for customers.
After I matured, gained some insight and perspective, and got severely humbled by some incredibly brilliant minds, my reasons changed. Now I wrote software to make users and customers happy.
I do this not only because it’s what the customer pays me to do, but because I truly relish seeing them delighted. And also, because customers are much easier to impress than fellow engineers.
If the goal driving every decision is customer happiness, then Agile is a guidepost at best. If the customers are already happy, Agile probably won’t add much to your organization.
If the priority and driving purpose behind a software team is less clear, or there is a lot of management interference, then Agile may very well help establish a basis of good practices to help steer the focus back to the customer without the need to re-build the team from scratch.
To answer your question, however, I believe Agile is both. When the team is already properly aligned, it is fluff. It is harmless fluff. Use it if you like, but don’t expect transformative results.
If the team is lost, unfocused or simply too distracted to have synergy, Agile may be the best thing to repair and reinforce their customer relationships."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Darren Thatcher,Agile Coach + Jira & Confluence expert (2010–present),2019,6,"Hi Jessica,
Thanks for your request for me to answer “What are the advantages and disadvantages of Agile as a project management tool?”
I’m an agile consultant, an agile coach and a scrum master so I should be able to answer this
“Agile” isn’t a project management tool: it’s a way of thinking and behaving, or - as we like to say - “mindset and behaviours”
It’s essentially:
an opening sentence about uncovering better ways of doing something but actually “doing” it as opposed to just talking about it, and in addition “helping others to do” it too
Four value statements
Twelve principles
The advantages are that if these values and principles were common across 17 successful people in the 1990s (the 17 signatories of the Agile Manifesto in 2001) and furthermore it’s stood the test of time since then, then they’re probably applicable today also, in the same way as the Lean principles have also stood the test of time.
I can’t think of any disadvantages. An analogy could be as follows: if a principle of a successful marriage was communication, then what would the disadvantage of communication be?
Agility teaches us certain mindsets and behaviours such as collaboration and valuing individuals and interactions more than valuing processes and tools; for example: before writing that email to your work colleague that sits just behind you, instead go and see if they want a coffee. This actually happened between two project managers that I was an agile coach for back in 2016: one had heard the other did reporting that the stakeholders really valued; when I suggested they talk the first project manager reached for his keyboard to write an email when the other sat just a few meters away. I paused him and said “Watch this…” and then went and invited the other if he fancied a coffee. I got them both talking over a coffee and the knowledge was shared. This was effective because “English language in written form is weak” (one of my many one-liners) and the sample I give in training to demonstrate this is: “I didn’t say I love you” and then I emphasise the various words: I didn’t say I love you; I didn’t say I love you; I didn’t say I love you; I didn’t say I love you; I didn’t say I love you (that last one kinda acts like the punchline to a joke - it always brings about a reaction in my class haha) but the point has been made. This is because communication between humans involves three components: words, voice intonation and body language. i go on to further demonstrate this by inviting my audience to reflect on how they found they’d proof read and correct emails they’d written to get that “perfect” communication, and then it still wasn’t received as the writer intended. Lesson learned: English language in written form is weak.
That last paragraph is just one small part of agility.
Such is the common sense of agility (and another one of my one-liners is “Agile is just a big slap of common sense”)
I still can’t think of any disadvantages :)"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Vibhor Chandel,"Executive, Agile & Leadership Coach",2022,4,"Agile as a mindset is implemented through common sense.
For example: Suppose you're driving on your way to work. You have an urgent meeting lined up in 45 minutes. Your Google map shows there's a delay of 30 minutes if you continue on the current highway and provides you an alternate route. If you take the alternate route you are being Agile.
Agile is nothing but the ability to navigate unknown constraints. Be it the constraints you face in everyday life or in a Software project.
Hope that helps."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Kevin Goldsmith,"Have used Agile techniques since 2000. Extreme Programming, Scrum, Kanban, Rational, etc.",2019,4,"Plenty of good and extensive answers here. Rather than repeat what has already been said multiple times, I will try to answer what I read as the spirit of your question instead of getting into the details of how Agile and Project Management interrelate. This is based on my experiences working for years in non-agile environments before switching to Agile development. I have a clear bias towards agile to be transparent.
Advantages of Agile for Project Management:
More flexibility - when working against uncertain deliverables or in a new area where you are exploring.
Deliver quickly - Since agile focuses on bringing value to customers faster and focuses on frequent releases it works well if you want to get something to your customers as fast as possible
Better team engagement - Agile focuses on leveraging the whole team for planning and reviewing, so you have better team engagement than in non-agile processes.
Disadvantages of Agile for Project Management:
Less predictable deliverables. If you have signed a contract with a customer for a specific set of functionality on a specific date, agile can be difficult to have confidence in making your commitment because it works forward instead of working backward.
Difficult to coordinate cross-team dependencies. Theoretically, with estimation, velocity and well-groomed public backlogs cross-team dependencies aren’t an issue. In reality, the number of companies trying to figure out how to scale their agile teams says otherwise.
Accountability to deliverables is more challenging. If you have a set of pre-agreed upon milestones and a team misses it then it is clear that they went wrong. In agile, establishing how well is working is its own challenge.
In my experience, the disadvantages all have reasonable solutions in a true agile cultured company. Also in my experience, the non-agile solutions to the disadvantages don’t really solve the problems either, they just make the issues more visible to leadership.
If your company doesn’t have a true agile culture, then the disadvantages are probably overwhelming."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Steve Baker,Senior Software Engineer (2013–present),2022,5,"It certainly doesn’t work when you have a large “flat” organization.
However, if you can organize into teams of no more than a dozen people each - each of which has a fairly self-contained piece of some overall product - then Agile can work very well.
Each team - can use standard Agile techniques.
Then you have to form teams-of-teams which attend scrumm-of-scrumms - and have higher level projects which they manage.
A team-of-teams can have a dozen teams of a dozen people each and remain manageable up to around 150 people.
If the project is even larger than that - then you can make another layer - a team-of-teams-of-teams - and now you’re up to around 1,800 people.
But with each layer you add - you add a layer of communications delay.
So you have a scrumm - 12 engineers and a manager show up - one of the engineers raises a problem that spans beyond the team’s ability to handle it.
So the manager takes that and presents it to the team-of-teams at their scrumm-of-scrumms…the outcome of that meeting is to decide which other teams need to be involved - and their representatives from the scrumm-of-scrumms take it to their scrumms where plans are made.
So if (as is often the case) the individual scrumms happen first thing in the morning - and the scrumm-of-scrumms happens 30 minutes later - then it’s an entire DAY before the information gets propagated back down to the other teams - and another entire day before the answer gets back to the original team that had the problem.
If you have a scrumm-of-scrumms-of scrumms - then you have two days for the information to propagate across all of the layers and two more days for it to propagate back
This might be acceptable for some kinds of problem - but it’s clearly not a good thing.
So at some point, the answer is that you have to schedule a cross-team meeti...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Steve Baker
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Kevin Bright,Technical Advisor,2022,11,"You don't necessarily need agile software development. You should naturally lean towards it because it's all about trying things out, seeing what works, failing fast and making adjustments to constantly improve.
I’m not saying it isn’t without its pitfalls.
Every business will have a different approach, but 4mation sums up why agile is better than most:
“We prefer agile development because it gives us the flexibility to focus on solutions based on what we can see, rather than being stuck to a fixed plan. Often plans are drawn up at an early stage of a project, where there wasn’t enough opportunity to learn and unpack business problems.”[1]
Around 71% of software developers use agile, and with good reason[2]. It allows developers to innovate with limits while keeping up with business decisions. Risks are identified early enough for it to be managed or mitigated.
Consider the alternative. The waterfall method is sequential. You can't move forward until all parties are 100% satisfied. When executed properly, it can create quality products that require minimal maintenance.
But change? Innovation? Creativity? That is lost.
Developers who should be focusing on creating a solid product will spend more time dealing with the red tape. Plus the risk of failure is constantly kicked down the road, until it piles up right at the very end.
Agile just makes sense, especially when done right. Here are the stand out benefits:
Quality product, driven by innovation
Higher customer satisfaction
Minimal risk
Flexibility for the development team
Great visibility for clients
Better business value overall
Encourages creativity
But there are times when agile software development fails[3]. Take SIREN or Universal Credit as an example. The first was stuck in developmental hell until it was scrapped in 2013. And the second is considered “fundamentally flawed” by most users. Issues always come when people use agile methods on paper, but do not adapt to the agile mindset.
Before you sign off on agile software development, make it a point to collaborate with companies that know when to put it to work. You can check out different businesses and their approach to building custom software on their sites.
I hope this clarified things for you!
Footnotes
[1] Agile development: Our approach to building custom software | 4mation
[2] 20+ Astonishing Agile Adoption Statistics for 2022 (Updated)
[3] 3 Failed agile projects and where they went wrong | 4mation"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Julya van Berkel,Scrum and Agile coach since 2006,2017,2,"Question: What are the drawbacks of Agile?
What is the drawback of discipline?
What is the drawback of flexibility?
What is the drawback of creating value?
Everything has drawbacks, but it comes down to what you use it for, what you are trying to achieve, where you are coming from, etc.
To really answer this question I would need more information. Drawbacks in which situation?
The focus of the question seems to be to find out what is negative about Agile. But what can be negative about a mindset. No one is asking you to adopt the mindset. And you have to offset it to something.
When you come from a more traditional organization the drawback can be that Agile requires the whole organization to change to make the most out of the Agile mindset.
Often Agile is just introduced into a part of the organization. That will lead to misunderstanding and conflicts with the parts of the organization that have not been taken along in the mindset change.
Another possible drawback can be that it is seen as a silver bullet or golden hammer. Agile is a powerful thing and has many passionate fans. The passion can be infectious, though the mindset might not be there yet.
What I also notice is that since Agile is a mindset it is not easy to achieve. Getting Agile requires inspect and adapt and that is hard to teach without help. I see questions about “what is the best online course for Agile” and the like. I am hard pressed to answer those. Agile is best learned in the field, by doing your work in an Agile environment, or work in/with and Agile team. That is hard to learn through books and online information."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Antony Marsh,Agile Coach and entrepreneur based in Indonesia,2015,5,"""Agile"" as described in the Agile Manifesto is really a values-based system, not a methodology. Note that the Manifesto does not prescribe tools, techniques or methologies. It values ""individuals and interactions, not processes and tools"" and values delivering working software sooner, amongst many other things. Two key principles for me are""self-organising teams"" and in particular ""Continuous attention to technical excellence and good design enhances agility"". Think about that last one!
Scrum as a ""type"" of Agile is indeed a methodology. My rule of thumb is to look at the application of a methodology (eg Scrum) in a team and refer back to the Agile Manifesto to see if it's being done right. If the way Agile methodologies are being applied in your team are not consistent with the principles and values, then they are not being applied correctly.
I often hear the ""that's not agile"" or ""he/she doesn't understand agile"" comments which probably miss the point of what agile is. Remember, the Agile Manifesto says nothing about ""sprints"", ""story points"", ""estimations"", ""product backlogs"", etc etc. These are all artefacts of particular methodologies which may or may not work well for your team.
Note that I have nothing against Scrum or other agile methods/processes - I use them myself - but following them slavishly is anti-agile in itself."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Yuvaraj Mohite,Agile and Devops Coach,2021,0,The disadvantages are mostly people make it very prescriptive rather than understanding the guiding principles. Also it is a most common excuse to work ad-hoc under the guise of Agility.
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Raviteja Chirala,Engineer by choice!,2015,10,I am not a big fan of Agile Product Development. The biggest disadvantage of Agile is not following Agile properly. I have seen people pushing engineers to meet deadlines everyday and focus on new task ignoring the most critical parts like Perfection and performance. It's not how fast you finish or saying that you have finished it. Instead one should assess time properly and give reasonably sufficient time to finish off a task.
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Con Bradley,software engineering and product manager,2015,5,"To me Agile is far worse than what is supposed to replace and ironically what does not seem to follow its own declared principles specifically this one: ""We value Individuals and interactions over processes and tools"". Agile is very process heavy and very dogmatic. Consider for example the length of a sprint or the size of a team. These should be flexible but instead are set in concrete by the process masters. Generally I think the principles of Agile are correct but their application is dogmatic, also The Agile principles say nothing about quality which is a serious omission IMHO"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Ganesh,Associate Manager at Virtusa (company) (2019–present),2019,0,There is no drawback If you know which project should follow agile. There are projects which should be done by waterfall.
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Yogesh Sharma,10y,2014,2,"Looks like you are looking for where Agile/Scrum falls, rather than being pragmatic about what is good to what is bad.
I would say that Agile is good if there is a fast paced project and which required delivery with a known set of features/hiccups. Agile is bad when you have a research oriented project with potentially tons of directions to choose from, then again Agile can help if you wish to dedicate a set of resources to pick and execute the possible directions in the form of Proof of Concept, using Scrum Practices.
I know that I am not advocating against Agile/Scrum. Every methodology has its own set of challenges and one need to see for what works for them and what not. It is true that team/individuals who hate sharing the status each day shall hate it, since they don't like micromanagement."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Kimberly Johnson,Software Engineer turned Product Manager,2016,1,"Waterfall methodologies have a ""Ready, Aim, Fire"" approach. You get ready and gather your requirements. You design your software up front to meet all of your requirements to make sure you'll meet that target. You build the software, and you test to make sure you've actually hit your target.
Many criticize Agile for it's ""Ready, Fire, Aim"" strategy, where you haphazardly begin building software without knowing what it's going to look like in the end. Doing this could lead to a less-than-ideal architecture with respect to the final product.
However, Agile is actually ""Ready, Fire, Aim... Fire, Aim... Fire, Aim..."". You build a small piece of the software, make sure it's what the user actually wanted, and continue on from there with the feedback you've received. In waterfall, when you design the system up front and only deliver it to the customer when it's done, it's more expensive to make changes."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Marina Slemender,Content Writer at Kolosek,2020,0,"Some developers dislike Agile and list these things as disadvantages of such philosophy:
daily standups are a moment in which the team decides who they should blame and how little has recently been done,
retrospective planning is here to help them decide who to blame overall,
too much control,
not enough time per Sprint.
Of course, these are personal views of some developers., but the matter is viewed from their perspective, these items should be taken into consideration."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Keshav,Content Writer | Software Developer,2020,39,"Agile software development also referred to simply as Agile is a type of development methodology that anticipates the need for flexibility and applies a level of pragmatism to the delivery of the finished product. Agile software development requires a cultural shift in many companies because it focuses on the clean delivery of individual pieces or parts of the software and not on the entire application.
Benefits of Agile include its ability to help teams in an evolving landscape while maintaining a focus on the efficient delivery of business value. The collaborative culture facilitated by Agile also improves efficiency throughout the organization as teams work together and understand their specific roles in the process. Finally, companies using Agile software development can feel confident that they are releasing a high-quality product since testing is performed throughout development, providing the opportunity to make changes as needed and alert teams to any potential issues.
The four core values outlined in the Agile Manifesto are:
Individual interactions are more important than processes and tools. People drive the development process and respond to business needs. They are the most important part of the development and should be valued above processes and tools. If the processes or tools drive development, then the team will be less likely to respond and adapt to change and, therefore, less likely to meet customer needs.
A focus on working software rather than thorough documentation. Before Agile, a large amount of time was spent on documenting the product throughout development for delivery. The list of documented requirements was lengthy and would cause long delays in the development process. While Agile does not eliminate the use of documentation, it streamlines it in a way that provides the developer with only the information that is needed to do the work -- such as user stories. The Agile Manifesto continues to place value on the process of documentation, but it places a higher value on working software.
Collaboration instead of contract negotiations. Agile focuses on collaboration between the customer and project manager, rather than negotiations between the two, to work out the details of delivery. Collaborating with the customer means that they are included throughout the entire development process, not just at the beginning and end, thus making it easier for teams to meet the needs of their customers. For example, in Agile software development, the customer may be included at different intervals for demos of the product. However, the customer could also be present and interacting with the teams on a daily basis, attending all meetings, and ensuring the product meets their desires.
A focus on responding to change. Traditional software development used to avoid change because it was considered an undesired expense. Agile eliminates this idea. The short iterations in the Agile cycle allow changes to easily be made, helping the team modify the process to best fit their needs rather than the other way around. Overall, Agile software development believes change is always a way to improve the project and provide additional value.
Disadvantages-
Active user involvement and close collaboration are required throughout the development cycle. This is very engaging, rewarding, and ensures delivery of the right product. It’s the fundamental principle in agile that ensures expectations are well managed. And since the definition of failure is not meeting expectations, these are critical success factors for any project. However, these principles are very demanding on the user representative’s time and require a big commitment for the duration of the project.
Requirements emerge and evolve throughout the development. This creates the very meaning of agile – flexibility. Flexibility to change course as needed and to ensure delivery of the right product. There are two big flip sides to this principle though. One is the potential for scope creep, which we all know can create the risk of ever-lasting projects. The other is that there is much less predictability, at the start of the project, and during, about what the project is actually going to deliver. This can make it harder to define a business case for the project, and harder to negotiate fixed-price projects. Without the maturity of a strong and clear vision, and the discipline of fixing timescales and trading scope, this is potentially very dangerous.
Agile requirements are barely sufficient. This eliminates wasted effort on deliverables that don’t last (i.e. aren’t part of the finished product), which saves time and therefore money. Requirements are clarified just in time for development and can be documented in much less detail due to the timeliness of conversations. However, this can mean less information available to new starters in the team about features and how they should work. It can also create potential misunderstandings if the teamwork and communication aren’t at their best, and difficulties for team members (especially testers) that are used to everything being defined upfront. The belief in agile is that it’s quicker to refactor the product along the way than to try to define everything completely upfront, which arguably is impossible. And this risk is managed closely through the incremental approach to development and frequent delivery of products.
Testing is integrated throughout the lifecycle. This helps to ensure quality throughout the project without the need for a lengthy and unpredictable test phase at the end of the project. However, it does imply that testers are needed throughout the project and this effectively increases the cost of resources on the project. This does have the effect of reducing some very significant risks, that have proven through research to cause many projects to fail. The cost of a long and unpredictable test phase can, in my experience of the waterfall, cause huge unexpected costs when a project over-runs. However, there is an additional cost to the project to adopt continuous testing throughout.
Frequent delivery of the product and the need to sign off each feature as done before moving on to the next makes UAT (user acceptance testing) continuous and therefore potentially quite onerous. The users or product owner needs to be ready and available for prompt testing of the features as they are delivered and throughout the entire duration of the project. This can be quite time-consuming but helps drastically to ensure a quality product that meets user expectations.
Finally, common feedback is that agile development is rather intense for developers. The need to really complete each feature 100% within each iteration, and the relentlessness of iterations, can be mentally quite tiring so it’s important to find a sustainable pace for the team."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Anonymous,4y,2020,39,"The practice itself is rubbish
It must been introduced by some human trafficking fool or a idiot who just switches of the lights in chicken farm yo confuse the hens to force them for 2 eggs within 24 hr period
Yea its design to cut cost as much as possible but extract work as long as possible
Agile put a gun on everyone's head : yes in agile there is no relaxation everyday you have to move the task and complete it so people don't have option to relax themselves
Agile only works with team is 100% experts. Since people have only days to finish the task. Everyone need to be a expert to make and understand the things and finish them in hours . It won't work with team mix of Medicare + dumb guys ( that's the forums reality on any software team hardly 1 or 2 guys being experts rest everyone relies on buttering and management courtesy )
Documentation is scrapped . As the main task itself is completed in days people are already frustrated and hardly have time to work on documentation and resources . It leads to hell lot of rework . So some one will work for 2 yrs and create so much of customized setup and decide to leave the team one fine day .. so without documentation the new person can't use and en have the same tool . So he creates his own tools and practices
Lack of control . Agile only makes brand and practice .. but there is hardly any control on scrum master . People just add task and extend it and screw the sprint as the task has multiple third party work associated with them
Agile is fictitious . First of all agile is extremely fictitious as it expect everyone has a ETA yup when u plan to create a apple pie everything has ETA including the apple tree which grows the apple for your pie ( what a foolish practice)
Agile is risky to software . Agile make the work on task based approach .. so people have task and limited time so they just concentrate on completing the task and close it and love to next item . So testing and security validations are literally ignored . So this leads more software is prone to attacks and compromise
Agile has highest disapproval rate . Literally 80% of developers and engineers hate agile and wait when it will collapse .So there is no point of selling a bacon roll in vegan community. But due to the management adamancy and ignorance it will be there for sure"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,William Hruska,Senior Tester at TestingXperts (2014–present),2021,0,"Here are five leading disadvantages of agile software development.
Less predictability. For some software deliverables, developers cannot quantify the full extent of required efforts. ...
More commitment and time.
Greater demands on developers and clients.
Lack of necessary documentation.
The project easily falls off track."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Jessica Wood,"M.tech in Physics, Chemistry, and Mathematics (science grouping), Thomas Jefferson High School for Science and Technology (TJHSST) (Graduated 2010)",2021,0,"Hi,
Below mentioned are some of the disadvantages of agile software development:
• Limited documentation
• Due to less predictability, the projects might fall off track
• Difficulty in measuring the progress of the project
• Requires greater collaboration, commitment, and time
Thanks!"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Harmanpreet Kaur,"M.Sc. in Information Technology, Punjabi University, Patiala (Graduated 2019)",2021,0,"Agile is all the rage these days, but what are its drawbacks? Agile isn't for everyone, it turns out. So, before you embark on a large-scale Agile transformation, keep these Agile drawbacks in mind. Here are some of them:
It can be difficult to estimate the effort needed at the start of the software development life cycle for certain software deliverables, especially large ones.
The importance of required design and documentation is undervalued.
If the customer representative is unclear about the desired end result, the project may quickly become derailed."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Muntaha Anjum,Content writer,2023,39,"Despite its many advantages, Agile is not for everyone. As a result, it is critical to understand the drawbacks of Agile approach. With that in mind, consider the following five major downsides of Agile.
Inadequate resource planning
Because Agile is predicated on the premise that teams will not know what their ultimate product (or even a few cycles of delivery down the line) will look like from day one, predicting efforts such as cost, time, and resources necessary at the start of a project is difficult (and this challenge becomes more pronounced as projects get bigger and more complex).
Documentation is limited.
Documentation occurs throughout an Agile project, and is typically ""just in time"" for generating the output, rather than from the start. As a result, it becomes less detailed and frequently gets pushed to the back burner.
Dispersed output
While incremental delivery might assist get products to market faster, it is also a significant downside of Agile approach. Because when teams work on each component in separate cycles, the overall result typically becomes quite fragmented rather than a coherent entity.
There is no definitive conclusion.
Because Agile involves less preparation at the start, it is simple to become sidetracked in delivering new, unanticipated capabilities. Furthermore, there is no clear concept of what the ""finished product"" looks like, hence initiatives have no end date.
Difficult to measure
Because Agile delivers in chunks, monitoring success necessitates looking across cycles. And because the project is ""see-as-you-go,"" you can not specify many KPIs at the start. Because of the length of the game, tracking progress is tough."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Jacqueline Sanders-Blackman,"Agile, Change Mgmt, Teaming & Project Rescue Podcast, 30y IT",2023,39,"I often tell my client that you will go slower before you go faster. Depending on the extent of the transformation and what is their current state, the transition to agile is like any significant change, and there will be some painful moments.
You can set up the agile framework, but if the team has the wrong mindset or the team is dysfunctional as a team, then agile is going only to give you minimal gains.
Agile is very flexible (Agile does not equal Kanban. There are a lot of frameworks to pick from. You can likely find one or a hybrid of a couple that will work for you.) But many times, people want to implement level 1 (i.e., ceremonies, user stories, pointing) but want the benefits of a level 5 implementation.
Agile has become the catch-all clearinghouse for pre-existing dysfunctional teams, management, portfolios, and company cultures. So even pre-existing issues will get blamed on Agile."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,ProAI,ProAI: Your Intelligent Business Advisor at Pro Business Plans (2012–present),2023,39,"Lack of upfront planning: Agile development relies heavily on incremental delivery and emphasizes flexibility, which can lead to a lack of upfront planning and a lack of clear project scope and objectives.
Difficulties with budgeting and resource allocation: Agile development often involves frequent changes and re-prioritization of requirements, which can make it difficult to accurately budget for and allocate resources.
Lack of documentation: Agile development emphasizes working software over comprehensive documentation, which can lead to a lack of technical documentation and make it difficult for new team members to understand the codebase.
Dependence on self-organizing teams: Agile development relies heavily on self-organizing teams, which can be difficult to maintain and can lead to communication and coordination problems.
Difficulties in managing and measuring progress: Agile development emphasizes rapid delivery of working software, which can make it difficult to measure progress and ensure that all project objectives are met.
Can create confusion and chaos: Agile development can create confusion and chaos, as it can be difficult to understand who is responsible for what, and what the priorities are.
Difficulties in handling change requests: Agile development emphasizes flexibility and the ability to adapt to change, which can make it difficult to handle change requests and keep the project on track."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Holograph Technologies,Your Trusted Atlassian Solutions Partner,N/A,0,"Agile software development, like everything else, has its drawbacks. It can sometimes lead to unclear project scope, making it harder to predict when a project will be finished.
For example, in building a house, changing the design during construction can lead to delays and extra costs. Similarly, in agile, frequent changes can slow down the project and strain resources.
Also, a lack of documentation might make it challenging for new team members to understand the project. So, consider these factors for a balanced approach to agile."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Murray Robinson,Agile practitioner and evangelist.,2014,2,"Agile teams move quickly. When an issue blocks progress they raise it openly and expect management to resolve it quickly so they can continue. If the issue is not resolved the team can experience serious delay costs. This can be embarrassing and frustrating for senior executives who made the decisions that created these blockers and have been dealing with them by ignoring them, denying them and covering them up."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Jayme Edwards,Software Development Consultant & Career Coach,2019,39,"Since agile development means deliver software in a way that’s easy to change, the problems I’ve encountered while working on over 30 projects are:
Management confusion. Most companies are still led by command-and-control management structures steeped in WWII tradition. Making things easy to change means less bureaucracy.
Less predictability. Why use a method that makes things easy to change if you never plan on changing? Once a team commits to agile approaches, they are literally saying “we assume things will change”. This means plans change all the time, so deadlines and estimates become less valuable.
Consequences of perfectionism. Since requirements of what will be built will change, and features that were built before will need to be ripped apart and re-written - refactoring becomes the norm in agile software development. When engineers create designs that are too rigid, or try to make them perfect, they increase the cost of change.
Greed. Because agile is a popular term, and certification companies have emerged that promise “become an agile leader in 3 days!”, the greed of people who want to profit off certifications, and make money doing a job they are inexperience for creates big problems. Working in a way that makes things easy to change is counter to over 50 years of history in society, and this is something that’s not easily learned in a short period of time - especially in an industry as complex as software.
I discuss many of the pitfalls of agile that people don’t like to talk about publicly on my YouTube channel. Here are a couple specific videos that may help you understand this topic:"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Mark Levison,"Certified Scrum Trainer, Consultant (2009–present)",2021,0,"All work has many risks:
You will discover no one wants the thing you’re building
You will discover your team isn’t capable of doing the work with good quality
..or that their technical skills aren’t up to the job
You will discover that your team doesn’t like working together and you don’t gel.
Agile or not, all knowledge work has these risks. Agile approaches (there isn’t one ‘Agile’) will just force you to deal with them sooner."
