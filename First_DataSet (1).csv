Author,Author Description,Publication Date,Votes,Review
Assistant,Bot,2024,0,"There are a few key reasons why some developers dislike Agile methodologies:
Rigid Processes and Ceremonies: Agile frameworks like Scrum involve a lot of prescribed processes, meetings, and ceremonies that some developers find overly bureaucratic and constraining. The frequent sprints, standups, retrospectives etc. can feel like unnecessary overhead.
Lack of Long-Term Planning: Agile's focus on short iterations and responding to change can make it challenging to do extensive upfront planning and design. Some developers prefer more traditional waterfall-style planning with clear requirements and roadmaps.
Frequent Context Switching: The rapid transition between different tasks and features during sprints can lead to frequent context switching, which many developers find disruptive to their flow and productivity.
Pressure and Micromanagement: The visibility and frequent progress reporting in Agile can feel like increased pressure and micromanagement from project managers, which clashes with developers' preferences for autonomy.
As alternatives, some developers may prefer more lightweight or hybrid project management approaches:
Kanban - Focuses on workflow visualization, work-in-progress limits, and continuous delivery rather than strict iterations.
Lean Development - Emphasizes reducing waste, optimizing flow, and incorporating customer feedback incrementally.
Extreme Programming (XP) - Prioritizes practices like pair programming, test-driven development, and continuous refactoring.
Disciplined Agile Delivery (DAD) - Provides a more flexible, scalable, and enterprise-aware version of Agile.
Waterfall-Agile Hybrid - Combining upfront planning and design with iterative development and feedback loops.
The key is finding a methodology that balances the developers' need for autonomy and focus with the organization's need for visibility, coordination, and responsiveness. A one-size-fits-all approach is unlikely to work for every team and project."
Miles English,I'm a programmer.,2016,3.7K,"This story is 100% true.
I got hired onto a team of construction workers to build a house. We set up a meeting with Management to find out what kind of house they wanted us to build, where’s the floor plan, what it’s going to be used for, who it’s for, etc. Management said that they didn’t know all that, we should just get started. They told us that we were going to use “Agile” which means that we just work on small deliverables and build the thing incrementally.
The developer team lead argued that we at least need to know how big the thing is going to be so that we can get started pouring the foundation, but Management told him they just don’t know. “What we do know,” Management said, “is that the house is going to have a bathroom. Just start there, and we’ll know more when it’s done. You have two weeks.”
So we just bought a port-a-potty, and screwed around on the internet for two weeks. Management was outraged. “You call this a house? This is the worst house ever! It doesn’t even have a tv!”
So we bought a tv and put it in the port-a-potty, attached to an outdoor generator. We were going to buy a a dvd player and get it hooked up to cable, but Management rejected the expense request, saying that they didn’t know if we needed it, and we’d come back to that later.
Management decided that we definitely need storage space, so we bought a boxcar and duct-taped the port-a-potty to it. Then to our horror they set up some desks and put a few miserable business interns in there. It went on like this…
After a few years the boxcar grew into a huge, ramshackle complex. It floods, leaks, it’s frozen in the winter and an oven in the summer. You have to get around in a strange maze of cardboard tubes, ladders and slides. There are two equally horrible separate buildings. We’re still using just the one outdoor generator for all power, so electricity is tightly rationed.
Communication between the buildings was a problem. For one of them, we use a complex series of flag signals. For the other we write notes on paper, crumple the paper up, and toss it over. Both of these methods were suggested as jokes, but Management really liked them for some reason. The buildings mostly talk to each other but they have to talk through us, so most of what we do is pass messages on.
It was suggested that we use paper airplanes instead of crumpled up balls, but the fat, awkward fingers of the Business Majors who inevitably take those jobs couldn’t be trained to make them. I built an awesome automatic paper airplane folder, but once again they couldn’t be trained to use it, so they just went back to crumpling the notes up in balls.
The worst part of all this is that it’s working. Everyone is miserable, but the business is making money. The bright side is that this nightmare complex is done so now we know what kind of building they actually needed in the first place, so we can start work on it. Obviously we can’t tell Management anything about what we’re doing until it’s finished. They noticed the gigantic hole in the ground where the foundation is coming in, but we told them that it’s a cache reset, and they mostly ignore it except when the occasional customer falls in.
I’ll probably be out of here before the new building gets finished. I could get a 50% raise by switching jobs, but Management still doesn’t think I should get a raise because I missed a couple sprints."
Stefano Emiliozzi,I have been writing code since I was 8 years old.,2016,53,"In a nutshell Agile makes many assumptions that are unrealistic in most real case scenarios:
every engineer in a team can work on any task at the same speed/quality than anyone else
backlog items can be broken down almost indefinitely so they can fit 2–3 weeks sprint
the product should be in a deliverable state at the end of each sprint
a team scrum every day is a useful way to track sprint progression
If (and it’s a big IF) all these assumptions work in your case then probably Agile is the way to go.
Unfortunately most of the companies you’ll work for fail to meet some of all of the above, and Agile just turns into a burden that slows you down.
A few things that agile fails to capture IMHO:
different engineers have different skillset, so you can’t assign abstract story points to backlog items ignoring that
breaking backlog items in a myriad of smaller pieces to fit a sprint brings in additional complexity
90% of complex software cannot be in a deliverable state every two weeks
engineers hate meetings which are not absolutely necessary
R&D and design stages are fundamental in any project
In my experience, solid engineers are pretty good in self organizing and in delivering good quality software, discussing technical aspects in meetings only when necessary, and providing decent estimates.
On the contrary, mediocre engineers will provide subpar deliverables no matter which methodology they follow."
Harold Treen,Former Agile Software Engineer @ Pivotal Labs,2016,155,"This is a really good talk given by Dave Thomas, one of the original creators of the “Agile Manifesto”. It’s titled “Agile is Dead”.
Agile is Dead?! This is coming from one of the people who helped create the whole thing! What’s going on?
In the video he makes a good point: Agile has been coopted into something it was never meant to be.
It has been turned into a process that an entire industry has been built around. Scrum master training, Agile conferences, etc., etc.
So now when people think of “Agile” they think of some process that’s being sold. “Follow this process and you will build the best possible software!”. But no process or system is absolute. Maybe scrum will work for some teams, but for others it won’t. And when you sell people things that don’t work, that’s really frustrating for them.
This is a slide from Dave Thomas’s talk where he talks about what Agility is really meant to be:
That definition actually makes a lot more sense!
So in a nutshell:
Agile has become this bloated system that teams across the globe have been sold as the solution to everyone’s problems. Nothing is absolute though and the best paradigm is going to be different depending on the team.
Agility is the process of iterating quickly, reflecting on changes and using those discoveries to get yourself closer to where you want to be. Most of the other stuff is marketing and stuff people started selling to cash in on the hype."
Michael Croft,MS in Software Engineering,2016,41,"About 8 years ago, a company I was at was acquired by a larger company. We were told we could either use the official Waterfall model of our new parent or we could adopt Agile.
Our VP, being no fool, chose Agile. He hired an Agile Consultant to come in. That’s where things started going wrong. Said consultant promised the VP that we would be “ten times as efficient” using Agile than we had been before. He taught us the rituals and methods and we had all the roles assigned and we all dug in to our backlogs and came up with estimates. The Consultant and the VP and his Directors were appalled by how long we thought it would take us to do what they considered “easy” work.
So we used their estimates, which coincidentally would’ve resulted in us being about ten time as efficient as we knew we were. With no other infrastructure or institutional change to make it happen. The first Sprint gets done and nobody has a deliverable, because nobody had a task small enough for us to get done in that time box.
“Why weren’t we ten times as efficient?”, the VP asked the Consultant. “It is because your developers are untalented hacks, who can’t do their jobs.”
So, yeah, that must be it. It couldn’t be a poorly-planned and poorly implemented transition with no room for learning. It couldn’t be the Consultant promised things he was never going to deliver. It was us. We just were bad at our jobs, and resistant to change.
Do I dislike Agile? Actually, no. It’s possible to do it well, to follow Agile principles from the bottom up and get some results. Turns out that almost any process improvement methodology will yield results, because people who are concentrating on it will make improvements in areas that are pain-points. You could implement waterfall at a poorly-working Agile site and make improvements.
Just be careful about the consultants."
Robert Rapplean,Works at Software Engineering,2016,30,"There are numerous long-winded responses on here (with images), but I figured I’d summarize my experiences with Agile.
Agile is a methodology that only works if everybody cooperates and assumes that everyone else is going to put in their best effort. This is extremely hard for most managers to accept.
The default management styles presume that the engineers can do better if given a little “encouragement”. Managers can grow out of it over time, but it is very, very hard for them to feel that they are providing value unless they are making their reports work harder/smarter. That type of manager will take any opportunity they can find to “provide value”, which is to say, encourage the employees to work harder.
Thus, the daily scrums turn into a daily report to management. End-of-sprint turns into an opportunity to fail instead of a time to re-examine the work load. If your team doesn’t meet its goals, it looks bad in your manager’s regular report to HIS managers, and then bad things roll downhill. This means that an unfortunate percentage of agile developers are being rated on how well they can guess how long something is going to take instead of on the quality and effectiveness of their engineering skills.
The burn-down chart is another opportunity to fail. Scrum teams spend a lot of time figuring out how to re-arrange their workload in order to optimize the burn-down instead of optimizing productivity. The unfortunate results here involve context shifting, checking in work that’s incomplete in order to mark it done, and creating stories with a vague enough scope that the developers can call it done at a certain time instead of at a certain degree of completion.
A second issue is that CxO’s really hate to be told “no, this is what I committed to, so this is what I’m doing.” When presented this way, they look for other ways to fit their pet project in, which results in shorter iterations, which results in more time spent in meetings and ceremonies, which eats into productivity."
Bob MacNeal,"Writer, Thinker & Software Product Developer.",2016,41,"Developers are makers. Today we have creatives, like developers, who make stuff, the makers…and then you have everybody else…the non-makers.
What emerged from the 2001 conference in Snowbird were lightweight guiding principles…by the makers, for the makers.
The Agile manifesto is a beautiful thing. Revolutionary then. Influential today.
Few work days go by without one or more of the guiding principles influencing my perspective, or my approach, to the mission at hand.
What’s made “Agile” increasingly toxic is that over the years the non-makers have manufactured supercilious ancillary activities like user story estimating, planning poker sessions, ponderous tracking software, burn-down charts, and 30-person stand-ups for a 4-developer team (real world example), that have little or nothing to do with growing a software product.
The guiding principles have always worked very well for the makers. Unfortunately the non-makers have turned exquisitely lightweight guidance into a ball & chain of process that the team, makers and non-makers alike, must drag along with each iteration.
I hope this helps your understanding.
The Alternative
The alternative is to have 2–4 experienced developers who are laser-focused on the product, empathetic with user experience, and steeped in the guiding principles of the manifesto who are given product direction, unfailing support, and enthusiastic encouragement from a benevolent dictator."
Russell Wark,"Lived in Croydon, England (2012–2016)",2016,150,"""Agile"" in and of itself, isn't a bad thing. Deliver regularly, with small, achievable milestones, the minimum of overhead and with the capacity to accommodate change across a team. This side of the whole thing is fine. The ""spirit"" of the Agile Manifesto. That's what a lot of us were doing anyway.
Then the ""scrum coaches"" came and fucked it all up. The evangelical religious zealots of the development world. ISIS with a smile and a MacBook.
Our employers paid these fucking charlatans loads of money to weigh this simple, flexible process down with so much additional baggage, so much additional jargon and with so little appreciable improvement in productivity that they ruined the whole thing.
And what's with all the meetings? What a waste of time. Some of us aren't confident standing up in front of a roomful of people and talking, that's just how we are. Just send us an email or Slack message if you want our input and I'll answer you when I can down tools - you're throwing off my groove. I work asynchonously.
Taking all this additional bullshit into account slowed us all down, made previously productive developers unproductive and turned the process of software development into a buzzword-ridden, micromanaged, homogenised manufacturing process. No wonder some of us hate it. Scrum coaches - you can take your stories, points, burndowns and fucking planning poker and stick them up your collective arses (sideways if possible) and employers - trust your developers to know what they're doing, that's why you hired us."
Carsten Saager,Programming for the better part of my life,2018,27,"Because of this
“Agile has to be done right” - It only seems is rarely the case, because it of the inherent instability the cartoon illustrates.
After some years I figured that agile methods have their place and are successful if some conditions are met.
Consensus of The Big Picture
The Big Picture has to be clear to anyone and there must not be different interpretations. It is very inefficient and frustrating to reinvent the wheel each time a new requirement is injected that questions previous assumptions. There is a difference between over-engineering and non-engineering in the end.
The right size
There must be a reasonable number of stories and resources. The process must be adapted to the size. It is not reasonable to create 20000 stories and just try to fit them into the sprint windows. You will never have consensus on the priorities ever. As bad as it it sounds, such projects are better segmented in milestones that focus on a few major functions.
Don’t be religous
A few tasks are too complex to fit into sprints, trying to reduce them in size to fit in promotes dangerous short cuts. I saw enough evolutions being shelved because the sprint cycle was always too short to implement it.
The right Client
Their must be real client that works actively with you and not against you. “Agile” is not a quality criterion, some clients fall for that. The client also has to understand it and be able to give you timely and consistent feedback."
Jim Thomason,"Time Traveler, but I Only Know How to Go Forward",2018,25,"I’m going to claim credit for coining this mocking phrase many years ago, though I wouldn't be surprised if I merely independently came up with it.
“The process isn’t important. What’s important is that we have a process!”
It summed up so much crap at so many jobs with so many awful managers. Where someone higher up the ladder would buy into the concept of The Process and then define something in some manner—sometimes they’d buy a pre-packaged kit of consultants and training courses, sometimes they’d make it up on their own, sometimes they’d cobble together some new piece of garbage from the previous two.
And The Process™ didn’t necessarily fit reality. So exceptions would be made. Sure, in this one special case, we’d do an exception to get something done, but we’d all feel really bad about it because we should be following The Process®, but we will next time. We never did. There were always exceptions, changes, modifications, because The Process© didn’t follow reality. I’d scream and jump around and wave my arms and suggest maybe, just maybe, we should change The Process© so that it reflected reality and we actually did something we needed to do, in a rigorous well defined fashion instead of using some BS that we couldn’t follow and would constantly need to special case. It always fell on deaf ears.
All of these places treated Agile as The Process™ that would make things perfect and magical and great and solve all of our issues. Several assumptions were always made:
We don’t need to write specs. We’re agile! We need to develop and iterate quickly!
Figuring out what we want in advance is a waste of time. We’re agile! We need to get changes done this sprint and then we’ll figure out after the fact if we did what we need. If we didn’t, we’ll do another sprint to fix it. We’re agile that way!
We don’t need to write documentation! We’re using Agile Processes and so our code is all self documenting as we quickly run through a sprint.
We don’t need to write tests! We’re using Agile Processes, and since we’re only writing small bits of code at a time we can be sure that it works!
We’re not going to have our users get together and document what they need or how the software should work, because that isn’t Agile! Instead, we’re going to start coding as fast as we can and give it to them and then listen to feedback after the fact.
We don’t have time to solicit a lot of user feedback after a sprint, since we’re busy starting the next sprint. What are we building in the next sprint? Why the new features, of course! And what are those new features supposed to do? We’ll figure it out as we go along. We’re Agile!
Needless to say, I’m a little bitter about how “Agile” is implemented most of the time. A lot of companies like to use it as an excuse for not writing any documentation or specs in advance, just vaguely demanding that the programmers create something within two weeks and refining it after the fact.
The sick thing is that the business side tends to be very happy with this. It’s minimal work for them (“Go build the spline reticulater! See you in two weeks!”), and they see the developers writing lots of code and giving them something quickly which they can comment on at the end of the sprint (“No. Not like that. Do it different.”), so it sure feels to them like their dev staff is being productive. And hey, they’re giving feedback and designing the process! And they only need to be on a couple of quick 15 minute conference calls every two weeks and not waste their time creating user stories or tech specs! Look at all the time they’ve saved! Agile!
The programming staff then races as fast as possible to churn out something that’s poorly defined and usually of poor quality as a result, but small in scope. There’s no documentation to refer back to exactly what they were supposed to build or what the user wanted. But as long as you can iterate fast, it’s cool.
Don’t get me wrong—I’m not an advocate for having your analysts spend 6 months locked in a conference room creating The Big Blue Binder full of tech specs, detailed written APIs, and UML documents. Those are an awful time sink that don’t adapt to changing needs and prevent a lot of development from occurring until the last minute.
It’s awesome to break apart a big task into a series of small ones. If your goal is solely “Build New Operating System”, it’s impossible to measure or report any progress. If you’ve got 5000 separate goals then you can carve it up. You can have one team doing design and spec writing for one piece, another team doing coding for the last bit, a third team evaluating the already produced code to ensure it still fits needs and creating change requests to adapt to business needs, and so on.
You need some sort of spec beyond a 5 minute vague phone call and less than The Comprehensive Total Document That Is Carved In Stone. But you still need the spec for what you’re working on, docs on how the individual pieces fit together, and a clear goal of what the final product should be (with the understanding that the business may change while it’s being built and the final product may be slightly different than what you started with). Most places don’t seem to want to do it that way.
If you’re really using agile methodologies to break tasks into small chunks, write clear specs for those pieces, get prototypes to stakeholders fast and adapt to their feedback, and put it all together into a product that your customer wants and not merely what you thought you were going to build, then you’re in great shape and it can work really well.
If you think you’re “Agile” because you don’t want to write any specs or follow any plan, but it’s okay because The Process© says that you should have a two week sprint no matter what, then you’re doing it wrong."
Mark Flory,Owner (2016–present),2016,234,"I was first introduced to the concepts of Agile I want to say in 2002, but I could be wrong but that seems way early on. Where I worked at the time we were not Agile, not Waterfall, we were using classic Clusterfuck. I had spent a few years at a very Waterfall shop and what I found I preferred Cf. After all, when all the documents were signed, sealed, and delivered the way things tended to proceed was straight to Clusterfuck with a lot more meetings and documents that needed to be corrected to reflect what actually happened.
My initial biggest takeaway from Agile was iterative development, which was a concept I already favored from reading Steven McConnell’s book Rapid Development. It made sense to work quickly, show the work quickly, fix what was broken, rinse, repeat. Internally when I develop software that is how I work. I find some work, I code it, I test it, I fix it, I test it again, I then look for some more work.
I liked the concepts I saw but I also remember my initial thought was. THEY are going to completely fuck this up. If you don’t know who THEY is, it’s this guy.
<There once was a somewhat relevant (but a Quora Image Violation) cartoon here you can see here >
I also tried making my own…I think I will stick with programming.
Over the years I have noticed an increasing amount Agilishness at the places I, my wife, and my friend’s worked. It was becoming more and more prevalent and I was beginning to see traces of the problem. THEY had turned it into a religion and the religion was going to save us.
I invited to a group discussion with some senior level software developers one time and we talked about Agile. We came up with our own working statement:
Overall, we like agile conceptually and we will adopt the practices we like as we see fit. Our approach to agile will be agile.
What we don’t like is Agile, which is the doctrinal approach to Agile. It’s the religion.
One guy said it very simply, I don’t like big A Agile.
I work with a lady now who has the religion in a big way. To her a project can only succeed if it operates in one way.
In a nutshell, as requested, what I dislike about Agile is that it’s practitioners are anything but. They are rigid and conformist and believe you must be too."
Arno Brevoort,designing and writing code has paid the bills for over 20 years,2017,90,"Agile done right, is the way a band of programmers would organize their work. Once everyone is on location, before you get into the thick of things, brew a pot of coffee and have a quick chat. How are you getting on, did you run into any trouble, what shall we do today. Help / advice is offered where necessary and you carry on with the day. The programmers are talking to each other and helping each other out. Work is done as a team.
Agile done wrong, is a micro-managers’ dream. You can instantly pick on “failing” programmers, harp on why things haven’t been done, blame people. Instead of a collaborative meeting to plan the day ahead, it turns into a daily “progress report”, a “triage”, or a “crisis planning meeting”. The sign of this is the programmers no longer talking to each other in the meeting, keeping their heads down, and “reporting” up the command chain to a “scrum master” / “project manager” who is no longer involved in actually writing code.
The first Agile is a fantastic way to work. The second “Agile” is hell on earth."
Oliver Dolan,10 Years Commercial Software Engineering,2017,46,"There are lots of answers here but I feel my views differ enough to be of value to you. So without hesitation lets begin.
Why do a lot of developers dislike agile?
Firstly agile is a super broad term and often people have issues with some parts of the methodology more than others
For example:
Most developers agree on continuous integration and automated testing being of value
Less developers see merit in pair programming
A big concern I have seen is the time spent in meetings.
It's a fair concern, the ideal team size is somewhere around 8. That would mean in a 2 week sprint:
Daily stand up = 8*15 mins * 5 = 600 minutes
Sprint planning = 8*45 = 360 minutes
Backlog grooming 8*120 = 960 minutes
Sprint Demo = 8*45 mins = 360 minutes
Sprint retrospective = 8*45 mins = 360 minutes
This would total: 2640 minutes or 44 man hours of time spent on meetings in 2 weeks with conservative estimates on time.
I think we can all agree this is quite a significant amount.
I have experienced many concerns against the stakeholders prioritisation choices
Timescales are squeezed
By design agile methodologies squeeze timescales to reduce ineffeciencies and improve responsiveness of the business.
Stress levels rise
Due to always needing to release and demonstrate
Sometimes MVP’s are not up to scratch but are still released and shown to many people.
This can cause anxiety over peoples opinion on the poor quality of the work delivered.
Project managers are often replaced with scrum masters.
These two skillsets are not replaceable one for one, they have subtle but significant differences.
Lack of need to communicate outside the local team meaning isolation and internal group think
This can also lead to conflict within the organisation as a culture of us vs them can emerge
Feeling like a cog in a machine
Plan, Do, Check & Act
Plan, Do, Check & Act
Plan, Do, Check & Act
Plan, Do, Check & Act
Repeating this sequence ad-infinitum can make developers feel like they are in a rut or just using up time like on a hamster wheel.
Technical leads having limited influence
Often product owners and stake holders are given more weight when making decisions and what they decide is generally final and overruling of the technical lead.
Product owners have limited control and bow to stakeholders
This can lead to short term thinking in the perceived hope of obtaining customer satisfaction
MVP and lean delivery seen as not high enough quality product
This can make developers not feel proud of the work they are producing
Developers lose commitment as they don't feel identified with the work or business
This can propagate into a lack of vision or warm feelings for the long term
These lead to concerns over job security
Cross functional teams also reduce job security
The development team can often feel inadequate for not meeting the perceived potential.
The team is often under budget or resource constraints but are consistently reminded of what there capped velocity is via information radiators
The constant search for looking for defects, waste or errors can aid developers in forgetting about the positives
Developers can also dislike the complexity of the process
Agile is quite involved, collaborative and requires communication. Developers in the past have tended to be introverted in nature.
Some compare the current agile methodology to waterfall and would just prefer to receive a specification and task list and be left to do the work.
It is often difficult to trust the product owner when they dont have direct access to the end customers.
I have seen in big business to business sales organisations the product owner has limited access to the customer base and likely never even speaks with someone who uses the software.
This undermines there credibility and the effectiveness of the agile model.
Im sure there are plenty more but these would be the most common I have experienced.
Hopefully it helps
Good Luck
Oliver Dolan"
Harsh Gupta,Make $$$ listening to b2b sales pitches on fozzie.io,2022,16,"There are a lot of developers who dislike Agile because it is difficult to change the project management paradigm when things don't go as planned. Some alternatives to Agile include Waterfall, Scrum, and Crystal Clear.
The waterfall is a traditional project management methodology that involves developing a plan, executing the plan, and monitoring results. This method can be time-consuming and rigid, making it difficult to adapt to changes in the project.
Scrum is an agile framework that was designed to address some of the problems with Waterfall. It focuses on creating product backlogs and sprint backlogs, which are lists of tasks that need to be completed during each iteration of the project. The team members work together to complete these tasks as quickly as possible while maintaining quality standards.
Crystal Clear is a new project management methodology that combines aspects of both Waterfall and Scrum. It allows for more flexibility in terms of changes to the plan, but also maintains quality standards throughout the entire process."
Brad Bass,"Java, C#, ASM and PVX+ (dont ask how that fits in there, lol)",2015,9,"Scrum 'masters', daily meetings, change.. Stats become more important than the code itself. We hate it for the reasons weak programmers love it. They love it because they dont really have to think (they are given a list of tasks to complete), theyre basically capped on how much work they can do during an iteration, the focus is on the 'team', so they tend to be able to get away with/hide their mistakes.. We hate it because we dont like being told how to do our jobs and especially not by some SCRUM 'master' who most likely has never written a line of code in their life. I suppose for the most part it just seems like Agile causes us to waste a lot of time to produce less quality work over shorter periods of time."
John Test,8y,2016,75,"I am really glad someone asked this question because some of my friends/colleagues and I were going to start an IT job board only for positions that DO NOT use Agile. Or at least not a bastardized spawn of it.
The problem as some others have mentioned already is the framework that gets attached to Agile. Normally this is Scrum. Now Scrum has different ways to do it but the most common version requires daily stand-ups, bi-weekly Sprints/planning, retrospective (for f*ck’s sake), demos etc.
I have now been through 3 companies in the last 7 years that started Agile/Scrum combo exactly the same way and did not have a single happy developer after this.
This is how it starts:
PM: Hey man how about this Agile thing. Everyone is using it these days.
Director: Oh that sounds great! I’ve been hearing a lot about it and devs are going to be really happy!
PM: Well instead of getting updates once a week we will be getting them daily! and.. and.. we will be able to see a demo bi-weekly! :) :) :)
… he’s got this sadistic look in this eyes that this will allow him to **truly** rule the dev team and if he has the Director on board, no one can challenge him …
Director: I keep loving this thing!
… at this point the PM and Director already have the impression that this one specific way of doing Agile/Scrum is loved and cherished by all devs in the world…
… they are double excited since they got told “it was created by developers for developers” …
… news is broken to Sr. Devs and TLs
Dev: hmm I’ve never done Agile before but sure.
… being very careful not to offend the PM or director, they ask subtle questions …
Dev: so Agile is a broad idea, how exactly are we implementing it?
PM: Well the best practice (he’s laughing in his head, sleazy bastard) entails daily scrum and bi-weekly demos/planning. But hey what’s better being in constant communication with the stakeholders/customers/management.
Dev: hmmmm. [ thinking: is it time to look for another job? ]
… the company goes and hires a scrum master….
SM: so how do you guys want to do this?
PM: well how about daily scrum and bi-weekly demos?
SM: well that’s one way of doing it but maybe we should talk to the team?
PM: no need. myself and Director assjack prefer it this way.
… SM being newly hired doesn’t want to argue…
Initially all the devs, devops, QA in the team are patient while the spoiled child PM is driving sexual gratification from all these added meetings. The post-scrum parking lot turns into an hour meeting daily as the spoiled child really has nothing else to do so he is wasting everyone else’s time as well.
After a few months most devs are tired. Some have already left. Couple jumped ship immediately after Agile was announced. The ones that are sticking around are due to camaraderie, nostalgia, unmarketable, or some other reason.
Ask them if they are happy.
The answer will always be a RESOUNDING YES!
Ask them if they are ok with the management
The answer will always be a RESOUNDING YES!
Ask them if they are ok with Agile
The answer will always be a RESOUNDING YES!
But if you listen real close, you can hear the bleak reality in the daily calls, demos and planning sessions. You can hear it in the increased sick time or other personal leaves. You can see it in demoralized attitude of the team.
The developers (especially Sr.) do not feel respected or trusted when they are asked to say “What did you do yesterday and what will you do today?”. This is the most demeaning question you can ask someone important to the bottom line of your company.
F*ck Agile!
F*ck Scrum!
Update: I mean no disrespect to any PMs, SMs, or Directors in general. The story I wrote is a very generic form of how the Agile process is started in a company. It could be suggested by a PM, VP, Manager etc."
Gerry Claps,"Product Manager, prev. PO and Scrum Master",2016,40,"In my personal experience, software developers dislike Agile methods when they’re applied incorrectly.
Software development is a creative craft. Time and time again, I’ve seen chunks of work assigned to developers to build software that disregards:
Overall system architecture
Enough time to iron out bugs
Utilizing feedback in the next iteration of work
Time for creative thinking around the problem
and, so on.
Currently, the best paradigms around software development are ‘lean’ and ‘agile’ thinking. It’s their misapplication that leads to problems."
Richard Waters,"professional software developer for 20 years, keen amateur cook and singer in a passable covers band.",2016,94,"I've been following this question for a while now; there are some great answers here and an awful lot of anger directed at ‘Agile’, whatever that may be.
Shall we start with this: Manifesto for Agile Software Development this is the Agile manifesto and the 12 principles? Notice what this is and (more importantly) what it isn't: no mention of scrum, no mention of daily meetings or sprints. It's still possible to disagree with these statements, of course, but I think they represent a laudable set of goals for building good software in many situations.
To create good, useful software we need to do 2 things:
Agree what the software has to do
Write good software that does that
It's important to realise that both of these tasks are hard, not just the second one. Writing a good, accurate, detailed spec for a complex system is a really hard job; its roughly as hard as writing the software because in the end software is just a very, very detailed, executable specification of the problem. Particularly if the developers who will work on the project don't know the problem space you need an incredible level of detail in the spec and it still won't be enough to inform every micro decision the coders have to make. On top of this you have change to manage. Over the course of a long project the specification needs to change. That causes problems as well.
Historically, lots of projects have failed because of bad or incomplete specifications. Lots still do.
The Agile Difference
The main aim of Agile (IMHO) was to try and change the approach to reduce the number of failures and the scale of those failures. Instead of a detailed specification there would be small iterations of development each of which should produce something that could run and be observed by the ‘business people’. This way, you could catch problems and misunderstandings earlier in the process and it would be easier for non-technical business people to look at the software running and explain what they wanted in that context.
For this to work you need a number of related things to happen:
Constant, quality access to the business people or end users so questions can be asked and answered without delay
Flexible development methods; with no up front detailed spec you can't have a detailed up front design either. That changes the way you build the software. Refactoring becomes more regular and you need automated testing to support that.
A willingness on all sides to accept that you don't know in advance exactly when you are going to deliver what, beyond the current iteration.
These things are hard, especially the last one. That final point causes massive friction if a development team or group tried to be agile when the rest of the business doesn't understand and buy into that.
Agile isn't perfect by any means and to do it well does involve a massive organisational change and not just in the development teams. However, in many cases it will deliver better results than trying to produce up front specifications and working from them.
Why do developers hate Agile?
Bad management is rife. It's probably more common than good or even average management. Most organisations would claim they were doing Agile, even when they are not (does anyone work in an environment where detailed specifications and design documents are written up front? Not many, I guess). So, much bad management is associated with Agile. It's not agile that's the problem. It's the management.
Finally - an example
I just wanted to end with an example (completely invented) of how Agile can be done right.
A company decided to build a new online project planning and management tool. They put together a good team of developers and QA to work on it.
At an initial team meeting, the management explain that they are targeting a beta launch 12 months from now and explain how they hope the product can be a big revenue winner for the company and explain the gap in the market they think they've found.
They then introduce Martha who they've hired from Microsoft where she worked on the Microsoft Project team as a product manager and she gives a presentation on her vision for the product and explains how an online tool can beat what's already available. She commits to being available to the developers in the office 3 days a week and on email the other 2 when she's out helping with marketing.
The team agree to spend a first 2-week iteration setting up continuous integration, investigating some different database technologies and selecting a framework to use. During this time Martha gives a series of talks on the basics of project management tools for anyone who wants to attend and produces some sample possible screenshots as guides. The team are all given a licence for Microsoft Project and encouraged to spend some time using it to get familiar with it.
At the end of this 2 weeks they agree that the next 2 weeks will be setting up Dev and Uat environments and implementing a simple web ui to define a task and set its properties. They’re off.
Every 2 weeks there's a meeting to review the past 2 weeks and to discuss anything that's slowing down progress. Martha is there to answer questions and give some feedback on her meetings with potential clients; not normally technical stuff because that's being sorted out as it arises. The manager listens and makes sure blockers are handled; maybe the build server needs some more memory to run a big regression test - his job to sort it.
6 months in the team decide their framework is an issue. The xml config files it needs are becoming a problem; too complex, too hard to understand and a bottleneck. They decide to move away from the framework and use a code-based dependency injection system instead. A sub-team reckons they can write a one-off code generator to replicate a lot of the xml config with code and commits to doing that in the next 2 week iteration on a branch. The test framework allows them to make this big change with confidence. It's 2 weeks spent, but will make the whole team more productive so the team agrees to the plan.
6 weeks from the beta launch the team realise their core data model can't support many-to-many task linkages. They discuss this, agree a different data model and consider the amount of work needed to change it, but realise that this means a key feature can't be ready for the beta. Martha reluctantly agrees that it's better for the beta to go ahead without the feature, but asks for an enhancement release 4 weeks into the Beta to add it after the data model change. The team agree and commit to getting the data model change done in the next 2 weeks to help ensure this can happen even though they accept it really ought to take longer.
Is that an unrealistic example? I don’t think so. I think it’s an example of how development can be done well. Agile isn’t the problem - it can work, but it can also fail - particularly in the hands of the incompetent, the arrogant or the greedy."
Sheldon Shi,Writing software since 90s.,2016,43,"It means Agile development is done wrong. In a wrong way, for the wrong purpose.
I’ve seen both sides of the coin. Teams became a lot more productive, a lot happier and less stressful when Agile was done right; and teams became totally chaos and demoralized when it was done wrong.
How developers feel when Agile is done right:
When Agile is done wrong:
Here is how agile can be done wrong:
Organizations skimp careful planning and push all uncertainties to dev teams, and hope shortening development iterations and having daily sync-up would magically cure all evils and make things right. Software development is an incredibly front-loaded process, meaning a lot of thoughts have to be put into deciding what to build, how to build, before actually building it. Applying Agile process doesn’t change that. It just make it easier to adapt to changes. When thoughtful planning and design are skimped, no methodology in the dev process can save the day. But dev teams end up getting the blame because they are supposed to deliver the end product.
Management view agile development as a way to manage day-to-day activities of dev teams and squeeze the last drop of juice out of developers. First and foremost, agile development is about empowering developers to deliver better and more relevant software, while being proactive about it and not being stressed out. It is not a tool for management to put dev teams under microscope daily and push to the extreme. Agile is best done organically through strong leaderships within the teams, not through some top-down directives or third-party injections.
Only pay attention to “How”, without asking “Why”. It is easy to implement some superficial formalities and declare it “Agile”. But having a daily sync-up doesn’t make it agile. It’d be just be a waste of time if developers don’t feel empowered from these meetings. Having a shorter iteration doesn’t magically make development faster, or with fewer bugs. It may just add more overhead from the more frequent interruptions. Agile is about adapting to changes. This applies to the dev process too. Teams should take a holistic approach and try different things, until they find sweet spots. This invariantly involves active participations from product, design, QA and dev teams, buy-in from all stakeholders, a disciplined approach, best practice principals, some light-weighted toolset, and once in a while good retrospects.
In the end, Agile is done right if developers are happy and productive, and not if developers become grumpy and demoralized."
Darryl Wagoner,Author has 1.3K answers and 534K answer views,2023,28,"What is Agile?
Scrum?
Kanban?
something else?
I really dislike Scrum and I am a Certified Scrum Master. Scrum will sooner or later end up with poor software. In ways, it is anti-agile because there are so many “processes”. The worst thing in my mind is the 2-week sprints. Programmers start out doing good work the first week of a 2-week spring, then start feeling the pressure to meet their sprint commitments and start rushing the work. Never ends well. What ends up happening is they pad the amount of time a task takes. So we spend time guessing at effort instead of doing the work.
Kanban, on the other hand, solves many of these problems, by removing some of the processes and working from a prioritized backlog (scrum does as well), but programmers take the highest priority task and work on it until done. No stand-ups, sprint planning, etc. Management hates it because they don’t have a clue about dates (they never did, but thought they did).
In software, you can never be sure how long a task is going to take. I am not saying you can’t make a good guess, because you can and do. However, you can also blow the time budget really badly. I know I picked up a defect to fix and was expecting it to take minutes to fix. It took weeks. Scrum is not forgiving for tasks."
Tom Marsh,professional software creator,2015,12,"Even on good agile projects it's easy to feel like you are still under producing or that you are sacrificing quality for speed.
Teams that pair all day sometimes feel like there isn't enough time to reflect. Teams that practice TDD sometimes feel they spend too much time writing or re-writing tests. Some teams feel like they spend too much time estimating, others that they don't spend enough designing. Everyone is upset at the volume of defects.
The real problem is that a good...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Tom Marsh
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
Michael Daconta,"Software Engineer for 32+ years, Author of 14 books",2017,62,"Simply stated, Agile swung the pendulum too far away from the waterfall methodology. Its first incarnation was “eXtreme Programming” and some of its practices retain those extreme roots:
* Pair programming is overkill for 80% of programming tasks but is useful for the right 20%. Do you really need a co-pilot to pull the car into the garage? In other words, not every software task is akin to brain surgery or flying a 747.
* Giving short-shrift or lip-service to requirements analysis, architecture and design is short-sighted. Proof of this is that epic agile failure called healthcare.gov. See: Feds say agile development contributed to Healthcare.gov failure
Also see: 6 Software Development Lessons From Healthcare.gov's Failed Launch
And finally: https://gcn.com/blogs/reality-check/2013/11/healthcare-agile.aspx
* Test-Driven development relies too heavily on unit testing. See: TDD is dead. Long live testing.
* Stand up meetings can be used as a punishment and are very easy to do wrong.
Having said the above, some aspects of agile work well: Refactoring, Small iterations, Collaboration, Daily builds, Continuous integration.
So, my recommendation is to take the best parts of agile and combine them with spiral development in a hybrid approach!
Best wishes!"
Imtiaz Mohammad,"Google, Ex-Microsoft, IIT Kanpur, 25 years of CSE",2018,57,"Once upon a time there was a class teacher named Mr. Screw U All. One morning, he had a bad start due to two flat tires. He reached school with great difficulty and went straight to his class. Some kids were making a lot of noise and throwing chairs at each other. Of course, they all stopped the moment they saw their angry teacher at the door.
Now, Mr. All decided to fix things and punish the mischievous kids. But, he didn’t know who exactly was responsible for the mess. So, he made the entire class kneel for next 30 minutes. Over a period of time, this became a standard practice to discipline students.
That is Agile methodology in a nutshell. You punish everyone due to some slackers at the workplace. There is nothing to like about it. Unless, you are the bully who enjoys seeing others kneeling along with you."
Jeff Gib,Author has 1.2K answers and 3.7M answer views,2019,15,"Scrum erases some of the essential activities of projects, mostly design decisions, necessary evils, getting things clarified so that the right decisions are made (RnD stuff). Here are a couple of examples:
Should we use RDB or NoSQL or combination of both? Ok, which implementation of those should be use? (Just examples…_) MongoDb + MySQL? How does Mongo handle our input or query needs. Hmmm, not very well. Why? Should we switch or tune?
What’s the best way to handle that data widget? Pre-process it once a day? Do it on the fly? Let’s pre-process every day at 4am. (Implement that but… by 4pm it’s too stale). Let’s re-implement it to do it on the fly. But we’ll need another server and interface for that.
How are we going to do auth/auth? What are the capabilities of that geo-spatial library? Does that API in XYZ allow us to do that? What’s a work around for that?
You get the picture. In scrum there’s supposed to be a story worked that you can demonstrate at the end of the sprint. Yeah, yeah, I’ve heard it all before about having stories to do these things. And that WOULD be fine if software dev professionals were running the show. I personally would have a story for each one of the above. The developer would then demonstrate / explain results at the end of the sprint to the team, NOBODY ELSE. But my Direct experience has been, as soon as one of these stories is in the backlog, along comes Joe Scrum Master or Product Owner or Manager and we start arguing about whether that’s a story. Here comes the time wasting nonsense - Can’t we work it into this or that? Or, what can we demo when that story is done because that’s the only way we show progress. You can’t demo THAT! It’s endless nonsense on the dogma that has become scrum.
There’s alot more wrong including how to handle defects flowing in from customers and previous iterations, how to refactor something, etc. I’ve heard the answers from scrum “professionals” and it’s like we’re trying to find the answer to a car question in a yoga manual, i.e. I’m fixing a headlight but that needs to be done in the downward dog position. Everything but the simple stories are unnatural.
Oh, and don’t forget the daily status meetings. Don’t even try to convince me they are Anything But. That’s what they are, that’s what they will always be. A way better way to handle that is a dev is supposed to have responsibility to report potential slippage. If somebody isn’t doing that - then THAT’s when a manager should pop their head in.
It’s a very unnatural, babysitting-like environment."
Peter Pang,Studied at Corning Community College,2019,11,Why hate Agile? It is a great opportunity to micromanage the developers and keep their noses on the grindstone at all times. It is yet another management fad which the humanity will survive. It is as simple as that.
Miles Fidelman,"Systems Architect, Entrepreneur, and Policy Wonk",2016,24,"Because it's broken. For incremental changes, to small projects, it works fine. For large, complex systems, it ignores anything resembling well thought out architectural design - leading to truly hideous systems."
Parantap Samajdar,"Automation Architect, Pre-Sales consultant",2020,1.5K,"Scrum, like open workspaces or day long requirement gathering meetings, is one of those things that is never liked by anyone who actually needs to participate in it. Only people who likes it are (1) people who gets employment because of it, e.g. professional scrum master (whatever that means) or agile coaches (it does not mean anything - another free money role like diversity champion); or (2) People who needs the visual and perception of lot of work being done, without having to care about what actually is being done.
So business analysts, developers, testers hate scrums with a passion. But senior managers love them, because it creates a better perception when things are happening weekly or daily v/s quarterly. If the things that are happening is is not adding value, it is easy to blame the developers or testers. But if nothing is happening, the managers get the blame. So ..
The root cause of the problem with scrum or agile in general is somewhat similar to communism. The core idea is too beautiful for any sane person to reject. Every single implementation that has happened so far are so horrible that no sane person can accept it.
Agile manifesto was written to address challenges with commercial end user facing applications which could not possibly support the old extremely bureaucratic and lengthy development process. It works perfectly for the type of applications that it was designed to deliver. However, when morons took over the keyword (much like AI more recently), they twisted the concept into something that even the original authors could not recognize.
There is no way to escape Dilbert when talking about Scrum / Agile. They are so true to the real life that we sometimes don’t know if we are laughing or crying."
Dave Voorhis,"Software entrepreneur, engineer, and educator for 35+ years.",2023,359,"The original notion of Agile[1] was:
Individuals and interactions over processes and tools;
Working software over comprehensive documentation;
Customer collaboration over contract negotiation;
Responding to change over following a plan.
I don’t know any developers who dislike that, because it’s about empowering software engineers.
I know some managers disliked its original form, because it implied a lack of managerial control. That’s because software engineers see themselves as the source of software and software excellence, but some managers see themselves as the sole source of software and software excellence and software engineers are — or should be — mere instruments to implement managerial vision, like compilers with eyes and fingers.
So those managers pushed back against Agile in its original form, and came up with what we sometimes see described as “agile”:
Processes and tools over individuals and interactions;
Comprehensive Jira ticket comments and constantly-revised Confluence pages over working software;
Customer interaction via a hierarchy of managers, analysts, and formal processes rather than collaboration with software engineers to build software that works;
Endless changes due to lack of any planning or foresight.
It should be self-evident why people might dislike that kind of “agile.”
Footnotes
[1] Manifesto for Agile Software Development"
Alex Rogachevsky,"Expert ""coder"" refusing to be ""outsourced"", startup founder/CTO",2017,35,"In the perfect world, Agile was invented in, by developers and for developers - as you may recall from the Agile Manifesto…
A number of things didn’t exist in that world:
The headcount aka bodyshop-supplied “body” fraud to staff always unneeded always failing (at the infamous 70–90% IT failure rate) corporate IT projects, used to “spend” excess profits otherwise lost in taxes. Can’t play that kickback game with servers and switches. The obscure “human capital” however is the perfect smelly pond with its murky water. With the certain overpopulated country providing the unlimited number of “bodies”.
“Offshore” “outsourcing” aimed at suppressing wages and capping engineering careers.
The redundant - compared to the actual “functional” managers with decision power… institute of clueless non-technical Project Managers tasked solely with hour counting and reporting to even more detached from reality PMO (“O” stands for office).
Speaking of #1, I am going to go with the conservative 10x estimate stated in one of the Quora posts on the difference between the senior developer and a code monkey. Anyone not working by the book (myself) should have more aggressive e.g. 100x and higher productivity after eliminating the glue code. Note, it is just the technology alone - doing the heavy lifting. Not the “project management” or any other mythical MBA “communication” and “collaboration” magic.
Going with 10x, if you replace a typical 20-developer team with just two people, a lot of IT “coordinators” and “facilitators”: namely PMs will lose their jobs too. Several times more third-party middlemen forming the enormous IT Consulting Food Chain would lose their cut. I feel for them… not really. In any case, how much “project management” such two-people team needs?
Speaking of #2, accelerated and efficient software development becomes nothing, but slavery, in that context. Greedy bosses diluting your effective hourly rate through unpaid overtime and other tricks against you fighting back by fooling those clueless non-technical bosses with padded estimates. Also, think for a moment, what kind of work the proper project management is supposed to make more efficient in a typical “IT organization”: the same needless IT commotion and visibility of work e.g. bug fixes of spaghetti code produced by keyboard banging code monkeys of the certain geographic origin: otherwise replaced 10 to 1 or 100 to 1, as explained above.
With no more career future, explained in simple terms as rewarding someone’s increasing contribution with increasing salary, the trust has been lost forever. Any attempt to optimize engineering work is not just viewed, but really is a hostile activity to squeeze more money out of the already low (compared to Google) salary.
And speaking of #3, let me tell you a story of one financial company I spent a year at - notorious for their employees laziness and incompetence. My team had a PM, alright. And a couple of business analysts aka BSAs. I don’t remember all of the details of that project’s misery. It was part of the typical 90% failure rate if you are wondering - dead even before I was hired.
However I do remember the typical shuffle that ensued after it was officially pronounced dead. I witnessed it several times before. A moronic BSA was “demoted” (reassigned with the same pay) to the PM of another project. Which of course failed a year after. That should tell you where PMs tasked with running Scrums are in the IT hierarchy.
Better “project management” alternatives? No PMI certified project managers at all. Look at distributed (to say the least) open-source teams - from little GitHub projects to Linux. No corporate overhead. No PMs. No MBAs trying to “facilitate” “communication” and “collaboration”. Just engineers doing their job. Why such compulsive-obsessive desire to “organize” and improve old practices like “waterfall”? Chances are, if you come from the same bureaucratic (defense, government, Fortune 100) background, you’d end up with the same crap. Read above on the glue code. I didn’t try to “optimize” it via a cute persistence aka “I/O” framework like Grails or Play. I discarded it by choosing a different paradigm.
Needless to say, and I feel for you as a “manager”, one cannot magically compensate for the low salary with phony “perks”, motivational speeches, or great work environment/process, that inspires engineers to work hard by allegedly making it “enjoyable”. Anyone’s motivation starts with the proper (monetary) reward. Only then you can add perks like beer dispensers and work/life balance. Project Management cannot be used to cover for CFO’s greed. Nothing can “align” someone’s interests with the company’s, if you are not paying that person well or offering the career future. Pay the fair wage, and we, college-educated professionals, will surely figure out what to do in which sequence."
Vatsalya Jain,"Former Vice President, Software",2024,3,"One fundamental challenge I see is the emphasis of ‘doing’ Agile and lot of focus of the Scrum Master and Project Managers to ensure things are done to adhere to the agile guidelines.
For eg: Agile speaks about estimating a story in terms of story points, which is a comparative analysis for a developer vis a vis the development he has done in the past.
However, many of the scrum masters I speak to during interviews state that
they follow the logic of 8hrs = 1 story point
When I probe them how would this hold true for Person A ( who is a developer ) vs Person B ( who is an architect) , the answers are not there yet.
While Agile is a framework for the teams to enable to work efficiently, the governance around the measurements mechanisms and the lack of understanding of true agile principles is the biggest challenge."
Joe Seabreeze,Programming for many years,2020,12,"Because it doesn’t work for every company/team for various reasons:
If you have bad project/product management from the start, Agile isn’t going to fix it. It will likely make things worse.
Some companies try to institute Agile practices even if their business model doesn’t require it.
Many managers don’t really understand what Agile is, so they’ll sometimes use it as a way to micro-manage. It’s easy to use an agile process for micro-management, which is a very stressful and unproductive way to manage a team.
It’s not easy for a service-oriented and reactive business to execute Agile development. How can a developer get anything done in a static sprint when they’re getting pulled into meetings and answering emails half the time? Basically, your development work slips every week, putting too much pressure on the developer.
If your business is highly regulated, it’s not easy to incorporate Agile development. Part of Agile is to reduce unnecessary documentation. With a highly regulated business, it’s all about documentation.
If your software platform has a large code base and doesn’t have a modular architecture, 2 week sprints are practically impossible. And once you start heading into one month sprints, well, Agile stops having any benefit.
If your whole organization doesn’t support Agile, then it will likely break down in the smaller teams that do. It’s not easy to work in Agile teams when your work environment as a whole isn’t agile.
The tagline for Agile at its inception was “For Developers”. In more cases than none, it has been the opposite. Poor Agile execution and micro-management puts way too much pressure on developers, so developers feel betrayed by a system that was suppose to be for them.
In the end, there are just way too many factors that can mess things up when using Agile. So it’s likely that low quality and emotional stress will outweigh any of the benefits that Agile is supposed to provide."
Jeremy Stafford,Software Engineer/Architect,2021,84,"I’ve always felt that the biggest problem with Scrum isn’t Scrum. It’s non-engineer type people trying to bastardize Scrum into something that works for them. We’ve had an uprising and have kicked managers out of the Scrum process and it has been amazing, so here’s my opinion on it:
Scrum is a development process, not a people management process
In short, separate the Scrum process from project management. Leaders will coordinate with each other, but they shall not intermingle processes, and engineers will only be involved with the parts in which they have a stake (like grooming or system design). As I mentioned, in my experience, the moment that management tries to change Scrum to meet their needs, it falls apart and turns into a complete shit show with which most of us are quite familiar. We’ve basically drawn the line around something like “If you’re not the product owner, scrum master, or engineer, then you have no part in the Scrum process. Your contribution is typically part of a different process. End of story.” When those within this inner circle (so to speak) carry a conflict of interest, we just stay vigilant to identify and call out when we feel non-Scrum processes are beginning to leak in. For example, when a manager or project manager acting as a scrum master. It took a while to get certain parties to accept that approach, but we’re there and it’s working now. Side note: the unforeseen benefit was that it gave each party more bandwidth to focus on their particular part of the machine.
Basically, get good at identifying what is a Scrum problem vs. what is a management (project, product, team, etc.) problem, and do everything you can to keep them separate. Figure out the bridge between Scrum and management and develop it. Life will be good.
While one can argue that Scrum is a form of management, your focus and attitude towards it will greatly affect how you solve problems. That said, Scrum needs to be focused on development, not management. It is a team concept for software creation where all of the members worth together as one whole to deliver the sprint commitments and perform retrospectives on what they have learned every sprint so that they can grow from it. It’s not about pushing deadlines. The only deadline the team should ever care about is the end of the current sprint. True story.
WTF, you say?! How can you say that a team should only care about the sprint commitment and not the deliverable date?? It’s not that we don’t care. It’s just that it doesn’t help anyone to focus too far into the future knowing that things will always change. A team can only push out so much in given period of time before things start to fall apart. If you’re going to do Scrum, then you have to accept that a team’s velocity won’t change much after it is established and they will work at about that speed, always, and project planning and prioritization needs to operate around that fact. That said, this highlights the fact that larger deadlines are someone else’s problem. What I mean by that is that you focus on grooming the backlog, and the team has a part in that. After that, it is a management problem OUTSIDE of the Scrum process to line up the priorities and play with projected delivery dates etc. It is their responsibility to realize when some deadlines cannot be met without additional resources based on the teams (or multiple teams) velocity. If you can accept that, then this gets much easier. Fail to accept that and you will fall into a cycle of denial, where you try to get clever with how things are split up and instead of delivering more things on time, you’ll really just have more things in-flight that may or may not ever get delivered, or they’ll be delivered in effed up states and you’ll spend even more time trying to get it straightened out, effectively taking far LONGER than it would have to just accept the truth of velocity. I think this is the biggest struggle I’ve had to deal with many times in the past — denial.
Micromanaging the time of engineers and using Scrum as a whip with which to beat them is the ANTI-Scrum. It accomplishes nothing other than pissing people off and it is a large portion of why people generally hate Scrum.
When Scrum is executed correctly and without the management stank on it, I actually like it. I like that:
Stories aren’t arbitrary. They are fully functional slices of functionality that add value to a product. They are written from an end-user point of view and they focus on solving a problem and providing value, not technical details. I used to hate hearing this over and over until it finally clicked how to make it work.
The team is forced to work together finish and deliver complete entire stories instead of being scattered in terms of “tasks” being doled out.
Teams are self-organizing instead of having managers tell them specifically what to work on on the day-to-day.
During the sprint, communication between team-members is an obvious must, but they’re supposed to be also interacting with the product owner. If the product owner isn’t easily accessible by the team, then the setup is wrong. I should literally be able to turn around and say “hey look at this, is that what you were thinking?”
At the end of a sprint, during ceremonies there is a demo of this functionality and everyone gets to feel accomplished on a short iteration (e.g. 2 weeks). People complain about the ceremonies being a waste of time, but they’re not (they’re actually extremely important) so long as they’re being implemented correctly. It’s supposed to be your short turnaround feedback session - one session for the stakeholders, one session for the devs. This is what keeps everyone on the same page for more of the time.
It establishes a pretty reliable cadence of delivery. Everyone knows what to expect and everyone knows what is expected of them.
To me, proper Scrum should feel like a small group of friends trying to bring to life an idea they had over lunch. If each sprint doesn’t feel like that, you’re probably not doing it right.
If you’re drowning in process like timekeeping and managing dependencies, then you’re probably not doing it right.
If it feels like a whip with which the team is beaten, then you are certainly not doing it right.
If you’re writing stories that are estimated for a single person to accomplish, then you’re not doing it right. A story is a story — the team will decide how it is worked and by whom.
If you find that you’re constantly writing stories with particular people in mind or if you’re trying to adjust the points based on how many people would work on it, then you’re not doing it right. This is tough to get your head around, but it is true. Points are effort/complexity, not collective punch cards.
If the result of a finished story can’t be used/tested by someone, then you’re not doing it (writing the story) right.
If you find yourself constantly splitting stories up to deal with dependencies between teams (e.g. there’s a front-end story and a back-end story) then you’re not doing it right. If you’re doing that, then your team isn’t cross-functional.
Extra *wrong* points if you’re splitting stories and then adding the effort estimates together. One deliverable is one deliverable. Splitting it into a 3 point frontend story and a 5 point backend story does NOT equal 8 points. In all reality, it is likely a single 5 point story. You’re probably thinking of two people working them, therefore you need to learn to parallelize. If it’s a single person, then it’s probably a single 8 point story or it’s simply too big for a single deliverable. If you’re thinking to yourself “well that sounds nice on paper but…” then you have some more learning to do.
If you’re not delivering the result of a sprint to QA, you’re not doing it right. The end of a sprint should produce testable deliverables, even if it’s not ready to deploy into production.
If you’re equating effort estimates (that Fibonacci pattern) to time spent on a story, then you’re not doing it right. If you’re tracking hours as an indicator of progress, you’re not doing it right.
If it feels like a compressed waterfall, then you’re not doing it right.
To be honest, if you’re doing just about any of the things that people are complaining about here on this thread (as being a reason they hate Scrum) then you’re not doing it right. Most shops aren’t doing it right. It’s not really Scrum that’s the problem. As per usual, it’s management that is the problem.
It can be challenging at times to write proper stories, and that’s on the Product Owner. For example, size/scope is always an issue, but discovering dependencies is probably even more complicated (do we incorporate it as part of the story, or is there a large technical effort that needs to be accomplished to lay out some infrastructure, for example). During these times, they should work with the team lead and anyone else that should have input on it. They should improve over time as the team equalizes.
At my company, we cut management completely (other than the scrum master and product owner of course) out of the Scrum process and it has been FANTASTIC. We brought it back to basics: what are we building and why, and what do we need to do in order to make it happen. To make sure management is still getting what they need, they have management meetings which do not involve the engineers. In those meetings, they can beat each other up over deadlines and projected dates etc. This also goes for team management. If there are weak links on the team, everyone already knows who they are. Dealing with them has nothing to do with Scrum. Those are management processes and you should deal with them separately of the Scrum process. When it comes to the Scrum process, the team is who manages the team, point blank.
“But my certified SCRUM coach said…” — listen, I’m going to be honest with you. Out of dozens of certified SCRUM coaches that I’ve worked with or interviewed, with their MBAs or PhDs etc. in project management or what have you, 9 out of 10 of them came from a strictly project management background and have only worked for the same company’s that keep screwing up SCRUM in ways we just talked about. Very few of them actually had any real experience developing software, let alone actually working on a SCRUM team. So personally, I’d say having a coach is probably better than not having a coach, but take their input with a grain of salt and remember the Agile Manifesto (if it ain’t Agile, then it can’t be Agile Scrum) and call them out on their BS when they start imposing their business speak on you. Ultimately, the business wins, but if you really want to mature to the most productive team you can be, you need to push back.
The philosophy we use as guide rails is basically just to allow engineers to focus on engineering, and that is the most important part."
Sneha Gangan,Studied at LFS,2015,15,First of all the time Limit. It stops the creative process that takes time to develop.
Alexandra,Marketing Manager at Onix-Systems (2018–present),2021,14,"Well, Agile is:
Individual over process
Software over documentation
Change over a plan
Basically, Agile is about moving fast, reacting to change, and don’t stumble. Something doesn’t work? Don’t fret, go try something else.
Why is it hated when it seems like a freestyle methodology that lets creativity flow and doesn’t get bothered with tons of documentation?
Lack of understanding. Wrongly understood the concept of Agile often results in implementing structure and hierarchy from the previous experiences. Such a combination makes employees feel like they are slaves rather than freestyle and creative.
Wrong orientation. It is also a result of a lack of understanding. Refused flexibility, strict rule-following, and forcing all that onto employees creates an unhealthy and non-Agile environment which results in disliking the methodology.
Refusing to change. The main reason that makes people violate Agile methodology is human nature. Throughout life, we all are molded to listen and take orders from our superiors - parents, teachers, mentors, bosses, etc. However, when applied in a true sense Agility does not support blaming others and promotes taking responsibility for their actions. This is one aspect that makes individuals dislike Agile."
Bob Kerns,Programmer and language developer for 54 years,2016,29,"I don’t hate Agile.
I hate standups.
I fully support the intended goal.
But they’re a painful synchronization point in an asynchronous process. They’re an interruption and a distraction.
They can be flat-out impossible for a distributed team.
And they’re a point that management injects themselves to micromanage.
I figure the management part is not really the problem. If you’re going to be interrupted daily and forced to all synchronize what you’re doing and where you are, well, management will micromanage anyway; you may as well get it out of the way in the standup!
But management does make them more expensive — because managers attend more than one standup, and have other meetings and interruptions they have to deal with (I’ve been a manager!) we developers end up going “Is the standup happening yet? No? When?” in a cycle, until it happens.
Meanwhile, the communication that should happen in a standup — well, it rarely happens there in my experience. And I don’t even see that as a problem.
I see needing standups as a symptom of inadequate communication and visibility. Standups can be a solution, but they’re not the optimal one.
The thing is, though — that doesn’t make me hate Agile. Agile’s not supposed to be a straightjacket. I’ll do standups, if that’s what it takes to keep management off our backs, or if it makes our team work better.
I’ll just try to find better ways and make them obsolete.
I’m not a fan of pair programming, as a full-time practice, either.
First, management — well, just no. You can’t even discuss it, it’s so far outside their worldview. I’ve never been in an environment in which even a trial stood a snowball’s chance in hell of being considered.
Well, I heard management say “yes” once, but they did “no”. I don’t think even a full man-day was ever spent pair programming.
Second, as a full-time practice, it’s another straightjacket, locking two developers onto the same timeline. One is sick; one has a meeting
It can greatly slow down some tasks. Distraction and communication overhead can impede experimentation and exploration.
That doesn’t sound very agile to me.
But that doesn’t make me hate agile, either. Actually, I wish I could do MORE pair programming, especially at some critical points. Integration. Or after exploring and experimenting a bit, considering where to take it for real, and starting that process, feedback, further exploration with more inputs. Or maybe back to the drawing board — singly or together.
I’m tired of being the only guy on the team who knows this huge mass of code (either mine or inherited) and this even bigger mass of data. Pair programming is a great way to spread knowledge — and coincidentally, develop good teamwork and culture!
The thing is, Agile isn’t really a process. It’s a value. And whether it lets us write better code, or better respond to the unending demands of management who are trying to deal with the unending demands of the market, it’s about ...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Bob Kerns
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
Richard Cownie,software developer since 1983,2016,22,"The underlying principles of Agile - know where you’re at, deliver working iterations frequently, accept that the spec is going to change frequently - are fine.
But my experience of it in practice has been that bad software development managers use Agile-derived mechanisms to implement a totally counterproductive level of micromanagement.
So, for example:
The manager doesn’t have time to read the code and understand the technical issues in detail. But they can look at the Kanban board. So he/she thinks the Kanban board is reality.
The Kanban board is a vastly oversimplified, and often totally bogus, model of reality. Reality is the code, and the developers, and the bugs. Mostly the bugs.
The Kanban view, and the story points, and sprints, all encourage the delusion that software development is like bricklaying, i.e. a highly predictable task which can be done at a consistent speed by moderately competent people, with well-specified chunks of work which can be easily subdivided with few dependencies. As long as all the walls are the same height, and meet at the corners, your’re good.
SOFTWARE DEVLOPMENT IS NOT LIKE BRICKLAYING! NOT. LIKE. BRICKLAYING!
Now the manager thinks the Kanban board, and the brief updates in standup meetings, are the reality. And then the manager gets frustrated when the it turns out that the bricklayers aren’t laying bricks at a consistent and predictable rate and the tasks in each sprint aren’t being finished. And the project is behind schedule.
The project is behind schedule, so what happens in the next sprint ? Rather than finding more resources (which is hard), or dropping features (which in Agile methodology is the correct response), the manager decides to a) argue down the point estimates for new tasks (which moves the Kanban view further away from reality); b) put more pressure on developers.
One deep principle of Agile is the importance of resolving issues in face-to-face meetings. But over the last decade bean-counting management have moved towards offshore development with teams in India, China etc. because the cost per hour of bricklayers (sorry, software developers) there is so much cheaper. But a) those teams aren’t available for face-to-face meetings; b) often they’re in timezones such that the working day doesn’t even overlap; c) language/accent and cultural differences can be an obstacle to effective communication; d) those teams are mostly less-experienced bricklayers (sorry, software developers). Of course the manager, who is subject to th delusion that the Kanban board is reality, goes along with this because it’s easy to share the Kanban board of remote teams.
After a year or so of this, the better developers on the team quit and find something less frustrating to do. And then the whole organization is in a death spiral.
I have been thinking that software development should be managed much more like patient care in a hospital, than like bricklaying. The normal state of software is to be deeply unhealthy, with many bugs and performance issues. The primary goal of the development team is to keep the patient alive - i.e. to keep the bugs sufficiently under control that the software can be usable for customers (without crashing, giving seriously incorrect behavior, or going so slow as to be useless). Each particular issue is a symptom for which we may need considerable diagnostic effort/debugging to understand the underlying cause, and then may need to attempt various different therapeutic measures/bugfixes to solve it - and often we don’t know what’s going to work until we try it.
Now, parts of this patient-care process can be managed like bricklaying - e.g. once we’ve decided that certain patients need certain well-understood forms of surgery, then scheduling the OR and the surgeon is simple. But other parts really can’t - if a patient comes in with unusual symptoms, the diagnosis may take a while. Different patients respond well or badly to different treatments.
The real magic of software design comes in figuring how to develop a complex software system in such a way that while it will definitely have bugs, it won’t have a large number of *mysterious* bugs. That requires a certain amount of paranoid coding at major interfaces, and designing/coding for a high level of visibility of the system behavior - patients with a built-in X-ray machine."
Jaimi McEntire,Software development manager,2016,20,"The problem with most Agile development implementations (and when I say this, I mean Scrum, as that is what people mostly use) is that it trades Productivity for Predictability. It can feel like you are getting more done and have more freedom, when in actuality for most, you are being micromanaged and getting less done - it’s just more visible. Instead of the old “death march” at the end of the release, it either becomes a series of mini-death marches at the end of each sprint, or the team pads their work, and they run out of work in the middle of each sprint. The nature of an agile team with embedded QA developers is also an issue. Because the work isn’t “done” until it is tested, what you end up with is the QA person having no work at the beginning of a sprint, and being overworked at the end. People suggest all sorts of things to address this - “Have the QA guy work on test scripts. All developers should test.” etc. However, there’s only so many test scripts, and developers should test, but you find there are those who just choose not to.
To address this, I recommend getting OFF the scrum bandwagon. The concept of being “done with all work items” at the end of a sprint is counter-productive. You need to level out the workload, instead of having a bell-curve.
I’m not the first or only person to realize these things. We first started agile development about 6 years ago. It was a slight improvement over our old waterfall process, but the teams were not happy with the cyclical nature and the unbalanced workflow. So I went looking around, and found that many others were unhappy as well. Then I stumbled onto Kanban. Or actually, what is referred to as Scrumban - Scrum with a kanban model. It has the advantages of scrum - working in bitesize chunks - but without the feast-or-famine workflow. We were able to take this model, and fix the scrum process. Our first year saw a 62% increase in productivity. Our second, as people became used to the process, was over 40%. We can take features in, and people can look and say “There’s no way you can get this done in a year”, and we haven’t missed a release or dropped any feature (without replacing it) since the beginning — and that’s 4 release cycles now.
Lean Software Engineering"
Kelly Schrock,Been to China... Once.,2016,19,"To be clear, I think most developers actually like agile development: That is, the practice of engaging the customer/end user(s) and showing them progress on a regular basis, only building what’s needed, and letting requirements take shape as the customer learns more about the system in question. There are many good things about it, the primary benefit being agility.
What developers don’t like is Agile(TM), the branded project-management practice that seemingly stands as nothing more than a tool for micromanaging developers and treating them as slaves in the belly of an oar-driven ship. In the worst cases, it puts extreme pressure on the people doing the actual development work to deliver “tasks” within a specific timeframe, without giving much (if any) thought to the overall design, the fact that bugs will appear and need addressing, and without any input. The one thing the approach lacks the most is agility. This is usually the fault of the people running the project, not the process itself. So Agile(TM) gets much of the blame."
Vineel Shah,"software engineering manager, dad",2016,19,"Problem 1 — Agile is Brittle
A good methodology works in most types of organizations, on most kinds of projects, for teams with varying levels of experience. Most orgs that implement a methodology are going to adapt it to the realities of their teams, managers, business clients, industry, schedules, quality levels, etc.
Study the few examples of spectacularly successful Agile projects and you’ll hear a common refrain: “They did Agile right!” They were able to get every part of the company to buy into the way Agile treats requirements, the way Agile treats process, the way Agile treats progress, and the way Agile delivers end results.
Study the overwhelming quantity of not very successful Agile projects — or spectacularly failed Agile projects — and you’ll hear a common refrain: “They did Agile wrong.” Most orgs get at least a few things “wrong” according to Agile — it’s usually that the expectations of the business folks. They never get what they really want and they have to ask for it again and again. Meanwhile, the developers get sick of “failing” and the whole company feels disappointed and angry. Soon they throw out the method or they twist it into something that works mediocrely and they still call it “Agile.”
Problem 2 — Agile is Easy to Say
I can’t tell you the number of managers I’ve seen that couldn’t manage their way out of a box — and adopt Agile as a way to wave their hands and talk a lot to distract people from noticing. Somewhere between the scrums and the burndowns and the point estimates the big picture gets obscured, and a bad manager feels relief.
Problem 3 — The People That Are Good at Agile Could Use Any Methodology
Here’s the only universal truth in software — smart people working in small teams on small projects with clear requirements can make software, regardless of the “process” they adhere to. All the people I know that love Agile build small apps — 10k lines or even less — most of the time. They’re good enough, and the projects are small enough, that they could use Waterfall, or just “Care About What You’re Building and Talk Alot,” and get similar results.
I don’t hate all the ideas in Agile — it came from eXtreme Programming which was some good thinking — but the Agile Religion has caused more harm than good. It’s less and less relevant in a world where one or two people can develop whole systems quickly using today’s powerful frameworks and languages."
Anonymous,"Upvoted by
Marcelo De Zen
, 15+ years as a software developer. and
Alan Mellor
, Started programming 8 bit computers in 1981",2016,20,"In a nutshell, I don't like it because it's nothing more than micromanagement and after nearly 10 years of higher education and another 10 years working , I don't feel the need to explain what I am doing everyday to some koolaid management suck.
Also I highly dislike getting treated like a fungible cog, and flung around to some new shit shovel every two weeks.
As an engineer, I want meaningful work. Nothing meaningful can be completed in two weeks. Also I want to be treated like an adult, like someone who understands their responsibilities.
Sure there are deadlines, that's a thing. Believe it or not we have been trained to handle deadlines. We have had high stake exams throughout university. Dissertations that were peer reviewed, publications, etc. We will generally pipe up if we know the deadline and think we can't make it.
Agile is nothing but insulting, infantilization of engineers. Planning poker?? Post its?? Scrum??? It's a total joke.
I am a software engineer. I write code. That's my fucking update."
Ilya Naoumov,Technical Lead Engineer at OnDeck (2014–present),2017,15,"Sometime Agile can be used to recreate the assembly factory methodology only with software. Product Managers and business stakeholder come up with the features they want implemented (rather, they try to do their best to explain what they want). Then the PM decides the priority of the work, which also comes down from the top of the organization. Some of the senior engineers will work on the design for the application, if it is sufficiently complex. Finally, the work is broken down into tiny tasks that can be accomplished in a two week spring. In the end, the engineer is just left to pick up the task at top of the backlog, and implement whatever s/he has been told to implement.
Generally, in well formed teams, the stack, conventions, and coding style is already well defined. As you can see, all that an engineer has to focus on is implementing the spec in the task, code coverage, and making sure s/he does all that as quickly as humanly possible. The software engineer ends up acting a small cog in the whole process of building out some feature for the business, much like an assembly line worker is tasked to tighten several lug nuts on a car that the factory builds. Ultimately, Agile takes autonomy away from the software engineer, and the engineer could ultimately be implementing a piece of software that s/he doesn’t understand how it fits in the broader picture. It’s all really dehumanizing, if you ask me."
Murray Robinson,Agile practitioner and evangelist.,2017,17,"Agile was created by software developers. Most developers love it. The few who hate agile do so because it's been severely distorted by command and control managers in their organisation to micromanage developers and make them work unpaid overtime. It's not agile they hate, it's horrible management. They just don’t realise it."
Scott Willis,"Embedded developer in Washington State, worked in medical",2016,15,"Agile is all about feedback loops. Distorted feedback causes problems. Would a syntax-highlighting editor that faked its results to make your code look good be helpful to you in any way?
Its very hard for a manager to not try to control what they are responsible for, to not turn what looks like a ""go faster"" or ""cost less"" knob, especially under pressure. When management pressures for low estimates, they are trying to make the project go faster or cost less. Wrong knob!
Perhaps the most important condition required for Agile to work is for management to be clear on the distinction between estimates (a measurement) and features (a control knob) and never push on estimates. Pushing for a low estimate is like pushing a speedometer needle higher: it doesn't make you go any faster, and now you don't know how fast you ARE going. If you punish a messenger who brings you bad (schedule or other) news, better get used to only hearing good news - until the bad news can't be hidden any more. If you want the truth about the state of a project, it had better both be safe and seem safe for people to tell it to you.
The best I've figured out is to ask for slightly pessimistic estimates, ask if there are any resources they need or any barriers that can be helped with, thank people for bringing 'bad' news to my attention, and explaining what I intend to do with the information - ease fears of 'being in trouble' for telling the truth (as they understand it).
Giving distorted feedback to your manager and the team you're working with, in order to look good or in response to pressure, is easy in the moment. Then there are consequences when they use this false feedback to make decisions. Give them the best, most accurate information you can; you'll be living with the results."
Ghost Orange,Author has 18.1K answers and 40.8M answer views,2016,19,"Because it is done incorrectly. My teams love it and Agile is perfect for making games. I’ve also used it on big clinical systems, where waterfall failed.
I totally agree with others here that say the failure is probably due to newer PM’s doing what they learned from lame trainers that never managed a project in their lives, working for certificate mill schools that invent a pile of useless classes to maximize earnings while confusing students. Vampires.
What you need to know is simple. It makes sense. What you need to do is only a little. High gain for low effort, so your effort goes to making software.
Review, plan, develop, repeat. This is not tricky.
Make estimates where 1 dev day = 5 hours on task. Leads task at 3 hours.
Devs calculate their own capacity, subtracting vacation, doctor’s appointments, et cetera. Add it up.
Make your plan by filling 85% of capacity for the period, with the most important remaining things. Commit to a sane plan.
Monitor results daily. No percentage complete allowed - binary, finished or not finished only. Countdown days. Fix any variances or problems as you go.
Make the work complete enough to be reviewable.
Take a hard look at what you got, with all stake holders and developers.
Go again.
This is a mental system, not a software system, not some patented process, not a certificate. I can do this on paper, in Excel, in a bug tracker, in Jira, Word, on a white board, Post-its, whatever. And you can too. Anyone can, that sticks to:
What is the goal?
What is left?
What is next?"
Matteo Ianeselli,both loves and hates computer programming with passion,2017,12,"You ask: In a nutshell, why do a lot of developers dislike Agile?
In my personal opinion, it’s probably because the adoption of Agile techniques can be easily abused as an excuse for software architects (and requirement managers as well) to be able to procrastinate ad infinitum critical architectural choices, thus basically postponing, if not avoiding at all, taking unpopular decisions, and therefore shifting the blame away from them (and for developers operating in a yesmen environment, your main goal shifts from delivering something that actually does and will do the job to avoid being the one who says no).
If you ever watched the humorous video The Expert you’ll understand the kind of environment I’m talking to.
I believe that’s mainly because the continuous refactoring aspect of Agile techniques is often and conveniently dismissed (“because we have no budget/time for that and it brings no visible value to our customer”). This invariably ends in accumulating lots of so-called technical debt that has to be repaid in some way sooner or later.
In some way, it’s just like when function points (unrelated to Agile techniques) are abused to estimate the time required to ship a software product (been there, done that), conveniently ignoring they are not the right tool for that job (at least, they are not the only tool)."
James Peckham,Software Development and Technology Management (2003–present),2018,8,"Few people like to work hard and Agile software development forces both sides (Customer and Development) to play fairly and continuously together. It’s exhausting.
Most Agile methods, like Scrum will force very detailed visibility. People who are use to lurking in the shadows, doing work the way they want to, are outed. People who provide no value and do things like manipulation and delegation are outed.
Better is relative. The alternative is plan based approaches. They vary from heavy up front requirements (dev centric) to date based approaches (sales/marketing centric). The problem is that one side always loses and usually the pendulum of power swings wildly."
Dan Shappir,Worked at Wix (2014–2021),2017,11,"Two main reasons for me:
Because it’s presented as a silver bullet for fixing any and all process issues. In particular many managers like to embrace it as a means for increasing production without investing more resources
Because many managers try to apply Agile without actually understanding what it means, or even bothering to learn it. Instead, they pick and choose only the specific aspects that they like, and often don’t even follow through with those"
Ori Shalev,a software engineer,2017,8,"Some answers here disregard the phrase “in a nutshell”… I’ll try to be short: writing code is art; I’m going to use an analogy I’ve used before - developers as chefs. If a chef is requested by the restaurant owner to come up with three new recipes (“stories”) a week, and they’re running out of time, they have the following three bad options:
Compromise on quality - makes them feel like bad chefs. They know that in the long term, they’ll pay a personal price for taking shortcuts.
Compromise on quantity - makes them look like they haven’t been productive enough
Work very hard to meet the schedule
Having to make that kind of decisions on daily basis is stressful. It feels like making tough decisions, which used to be the manager’s problem, have shifted to the chef/developer. That feels unfair: not only that developers do the hard work, with Agile they are suddenly responsible for stuff their managers used to offload from them."
Miles Fidelman,"Systems Architect, Entrepreneur, and Policy Wonk",2021,10,"Do they? Most of the developers I know LIKE Agile.
On the other hand, (good) Product Managers, Program Managers, and Systems Engineers are the ones who dislike & distrust Agile. The main reason being that Agile emphasizes incremental development - short bursts of effort that add or enhance functionality. That’s great for maintaining a small piece of code. The larger, and more complex a system you’re building, the more that incrementalism gets you into BIG trouble. You need a lot of up front design to define the pieces (modules) of your system, and how they all fit together, as well as how your system interfaces to the outside world - you know, system & software architecture. Once you have a good architecture & interface specs - then Agile can be effective at building individual modules. But… folks who swear by Agile tend to skip the architecture & design stages and go write to the “let’s build the simple version and then incrementally improve it.” The result is often disastrous - pieces that don’t fit together, software that doesn’t fit into it’s run-time environment, products that don’t work well with other products in the same product family, products that don’t scale and/or are hard to enhance – and lots of time wasted in debugging and re-writing stuff, because it wasn’t thought through in advance.
Agile is like writing a draft of a mystery novel, before actually thinking through the details of the crime, or the backstory of the characters. Or shooting a bunch of scenes of a movie - only to discover that they all have to be reshot because there’s no continuity.
The Waterfall approach can be tedious, but incrementalism can be VERY expensive - particularly when working on mission-critical and safety-critical systems. You don’t really want to add a missing feature, or fix a bug, after an airplane has fallen out of the sky.
Afterthought (8/26/2021): And.. there’s a lot of room to streamline prcess, between classic waterfall, and pure “move fast & break things.” Some good whiteboard architecture, and back-of-the-envelope sizing calculations, can go a LONG way. Along with pinning down data table definitions, and interface specs, early on (and designing them to be modular & extensible)."
Anusha Hewage,"Agile Thought Leader, Program and project manager",2018,6,"I do not think developers do not like Agile. If they are really passionate about the development work, they do like Agile .
This is part of the cultural aspect of any change management and it has nothing to do with Agile.
As an example, today if I were writing my code for the task which has been given by my project manager and I would sit and write that code and go home. That is the style I had been practicing and used to.
But tomorrow if some fancy somebody called ‘Scrum Master’ or Agile coach comes and all of a sudden tell me , this is how we are going to do this and lets have a stand up and blah blah blah.. I would first think he is nuts , stupid and then is useless. despite I will still go ahead ( as I need my job) , and will do what ever I was asked to do . And that will not be with my bias.
Developers in general are introverts ( this is an observation and can be wrong ) and if you ask from them to give updates at stand ups and showcases they will be nervous ( I have literally seen developer with shaking hands while giving stand up updates and claiming sick leave on showcase days ) .
This is change management which need to be aligned with empathy and psychology.
This is where ‘good’ Scrum Masters and ‘good’ Agile coaches are required. I stress the word ‘good’. The world is full of Agile coaches and Scrum Masters who are certified with all institutes available on planet earth and has done all the courses in Agile. But a Good Agile coach or scrum master may not have any of those certifications but can be a good leader with good leadership , empathy, coaching skills. We need those people who can understand the situation and help the development team to go though this journey.
However at the end of the day , there will be personal choices that some people are reluctant to change and they are not only developers ."
Ken Benneth,founder,2019,5,"In a nutshell, a lot of developers experienced absolute rubbish peddled under the name “Agile”. A lot of sites adopted Agile rituals without implementing the processes that make them work. Those rituals are rarely adapted to the specific enterprise - you cannot just take what works for a Silicon Valley company and implement it in a bank.
When a good Developer spends a year working on a project with methods that don’t work, does all the rituals that are expected of them, and then the project fails giving all Developers a bad name - the Developer has a right to be furious. And to demand that next time someone provides detailed Requirements, so that he/she can just implelement what’s written there and let someone else take the blame.
I recommend to look at AGILE without MAGIC. Disclaimer - I started it.
Agile is great. It just has to be adequately implemented, with respect to site, available staff, type of project etc."
Mike Simon,Marketing Strategy and Co-Founder at PartnerUpList,2020,4,"There are a lot of serious issues with Agile. But for some reasons, a lot of companies, driven by fancy consulting firms, don’t want want to see it. Here are a few critical points.
Often times, Agile leads to micromanagement when senior engineers with 15 years of experience are being tasked to do the same as junior developers which is very demotivating.
It doesn’t respect knowledge and seniority and it makes developers easily replaceable, which is probably good for the management but really bad for the business because it kills the motivation.
It conflicts with job security idea which a lot of smart people unconsciously follow. It promotes collective code ownership, which in reality fake, because there is always an owner. If the code is truly collectively owned, then it is even worse because it means nobody is responsible.
Agile resource and time planning are horrible. Agile planning is not compatible with any engineering or science principles.
The alternative is traditional project management. If you need, you can use iterative approach to avoid waterfall problems."
Lelanthran Manickum,"MSc in Computer Science & Software Engineering (college major), University of Hertfordshire",2016,8,"To all those answering “You’re using it wrong - that’s not Agile” all I can say is this: if 90% of practitioners cannot get $FOO working correctly, the problem is not with the practitioners, it’s with $FOO.
The problem with Agile is that it aims to be useful when requirements are not well-known in advance, when development is of an exploratory nature and when the project can be broken down into granular units.
If your proposed project cannot adhere to all three of the above requirements then don’t do Agile. IME, most requirements are well-known in advance because the project is a replacement for an existing process. IME, other than startups or academics work is not going to be of an exploratory nature. IME, when you know work can be broken down into granular units you already have the requirements in hand.
The last problem with Agile - it’s unsuitable for any atomic problem that cannot be solved easily. You can’t cross a chasm with two small jumps. Sometimes a big jump is needed."
Eran Kampf,Author has 106 answers and 442.9K answer views,2017,7,"In a Nutshell:
Because companies tend to adopt an “Agile” methodology as a god-given set of rules to be followed rather than a set of tools and processes to adopt, tweak and adjust over time…
Longer answer:
Because most companies like to say that they’re “Agile” while in reality just using it as an excuse for more meetings, more bureaucracy, micromanagement, time-waste and a lot more pressure (because the Sprint is about to end and you still have to get thinks done with all that overhead)
The reason behind this is that companies treat whatever buzzword methodology they choose as a set of strict rules: We have to have a stand up meeting every morning, and we have to cost everything (even stuff we don't know how to cost) and have a functioning demo to a “consumer” at the end of each sprint.
Not all teams\products are created equal and you have ti be able to take the set of tools Agile provide and be able to fit them into your team in a way that enabled work. Not the other way around.
“Agile” in the hands of the most companies ends up as the exact opposite - a set of strict procedures and beaurocracies to the letter.
Rather than thinking about their process, tweaking and improving it managers tend to delegate to the holy rules written by the gods of SCRUM or whatever…"
Jonas,Author has 2.4K answers and 6.1M answer views,2016,9,"In some places agile is mis-sold as “don’t think or plan, just program”. One prominent example is Leslie Lamport, who notoriously has (or had?) this view about agile development. If I was a developer and my boss told me to “stop thinking or planning”, and my coworkers would stop thinking and planning, I would be very unhappy.
(google images)"
S Markem,Author (S. Markem) of The Wizard Of Trope and more,2017,5,"They don’t. They dislike poorly executed agile. They may have only ever experienced poorly executed agile. They may not even realise its poorly executed agile.
There are so many good answers below and so much information on why agile projects are often bad that I’m going to try and keep my answer tightly focussed on the real root cause. This may then suggest some options for you to explore.
Why is there so much poorly executed ‘agile’?
Since I started with ‘agile’ in 1999 I have observed that:
Very few people who are programmers study it in detail. Rather they get their knowledge, primarily, second hand. The are shown a process but their study is not sufficiently experiential.
Learning ‘agile’ is, I would suggest, akin to learning how to program. Its requires a similar approach and takes about the same amount of dedication.
Very few people have been allowed to implement it fully, without constraint. Therefore very few people can say they have genuinely been on a truly agile project; yet there are tens of thousands of ‘experts’ of one form or another.
Very few people dive deeply into the why and instead focus solely on the how. They follow instructions. Not understanding why the approach is structured in the way it is can lead to a lot of ceremony, dogma and waste.
Everyone ( but management in particular ) just wants an instruction manual. The temptation of the quick fix. They indulge in ‘wishful thinking’.. Do this, do that and then you’ll be agile. I wish it were that simple.
But.. the Number One problem I see is:
Treating programming as production ( manufacturing ). Its is not. Programming is fundamentally a design activity. The goal is usable knowledge. The output is code. Failure to grasp this concept turns agile processes into sausage-machine-dogma… and so it follows… people hate it.
Intelligent programmers are not machines.
And I don’t blame anyone. We all have jobs to do. We’re busy.
It takes a very committed management to provide the necessary time, space and investment to build truly agile cultures.
Hope that is helpful in some way. Its a very good question you raise."
Travis Worley,"Lives in Austin, TX",2018,4,"I wouldn’t say everyone dislikes it, but yes, a lot complain. I think the biggest reason, when it does happen, is b/c Agile, Scrum, and various iterative forms of development are not typically understood extremely well. Many companies don’t have a great process in place. They don’t actually embrace an iterative methodology, even though they think they do. Or they do it sort of half-a**ed.
And that is what many developers will undoubtedly hate. They don’t like it b/c in many manifestations it’s just plain garbage. Agile, or iterative development done right can be amazing. Done incorrectly it can be a nightmare (just like any other paradigm). Developers and engineers are very analytical by nature, so any process that doesn’t seem to follow well defined rules, or has shoddy systems in place, is going to raise flags.
Another issue is that Agile and virtually all software life-cycle methodologies are not perfect systems - there is no perfect system (a system that doesn’t have caveats, areas that require a human touch, or require some slight modification or deviation). That’s the whole point of iterative development (in large part); to address those issues quickly and easily when they arise (so you don’t find a mess later weeks or months down the line). However, that’s *also* something that goes against the grain of typical developers analytical thought processes.
Like some others have already said, one of the most important things, regardless of which process you use, is that you do have *some* decently functioning process in place that everyone follows and understands."
Peter Webb,Lives in Far North Queensland (2023–present),2018,5,"Agile isn’t a project management pattern. Its an “anti-pattern”.
For project managers who don’t know what they are supposed to be building, its the “go to”methodology. You just allocate a programmer to every thought bubble from a sponsor/user, no planning required. And if they change their mind, or it is inconsistent with everything else - well, that’s the beauty of Agile, you can do something else.
For software houses, its God’s gift for eliminating risk. Actual properly specified projects should be able to be done against a fixed price. Which means the vendor carries the risk. But “Agile” has no actual deliverables; it can only be invoiced on a time and materials basis. No risk.
Lets take an Agile approach to building houses. Ring up a whole lot of bricklayers, bricks, carpenters, roofing people, get them to come to your vacant lot, and tell them you want a family home. Don’t worry too much about how many bedrooms or how many stories, lets just start building. We can work out those details later.
Agile. The only alternative if you lack the skills or knowledge to actually write down exactly what you want in advance, and terrific if you are a programming business interested in a contract where you can’t possibly lose money. For everybody else, an expensive waste of time."
Manikandan Selvaganesh,Indian | Geek | Open Source Enthusiast |,2019,5,"Old thread, but cant resist answering.
I personally dislike agile. Agile is too documented and procedural. There are a hell a lot of meetings that unnecessarily happens that waste our time. To be simple, there are a lot of agile ceremonies that sucKs our time which can be done just by interacting to your peers during your free time. People claim work from home options are disruptive in agile(Common, does that really matter). It does not matter if the people who claim that takes. At the end of the day, its all about what development we have done. Whatever, the software engineering model be, it should not be too procedural neither too documented. Stop asking updates every now and then. Give us the freedom and independence to work, and you will see us better. So sad, that I m currently working on this model. I had worked on a company which gave us complete freedom, independence and after all, they gave us the time to work instead of blocking our calendars with all the meetings that they can.
__
A true lazy developer who dislikes agile.
Peace ✌"
Kevin Taylor,Professor | Researcher | Angel Investor,2016,5,"What killed “Agile” is that the project managers and other non-programmers took the reins of the Agile movement and “Scrum” became the dominant version of Agile. This effectively killed off Extreme Programming, which is a highly effective way of producing software.
You could see it at the annual Agile Conference. Each year the Scrum voices got louder and the non-programming focus of the event became more obvious. Eventually I, and many programmer friends, stopped participating and moved on."
Quince Williams,BS Math/CS,2016,5,"The software developers that I consulted with on a project were totally against Agile. They preferred Waterfall. They said that they liked to get all ducks in a row.
Agile methods, especially Scrum, seek feedback with investors/clients every few weeks. The problem is where clients desire an useless feature that they saw somewhere else during the 10th week of development."
Phil Jones (He / Him),Still trying to figure it out,2016,5,"When I first read ""eXtreme Programming"" I was enlightened, and thought ""this is obviously how things should be done""
Then I thought. ""OK. So what's wrong with it?""
And I realized. This was software development organized for the benefit of programmers. But not necessarily convenient for other participants like managers and customers.
I mean I liked it. And as a programmer I believed what was good for me was obviously good for the customers, once they got over their hangups and adapted themselves to me. But I could see how the rest of the management hierarchy would want to see more prediction and control and hard deadlines etc.
Well I never worked on a proper agile project, either waterfalls or extremely small projects, but reading countless articles analyzing ""what went wrong"" it's clear that management / customers did rebel. And changed the practices to something that suited them (giving them more of the (illusion of) control they wanted) and consequently what is now hyped as agile is a perversion of the original understanding and ideals .
Done badly agile just becomes a standard project with very tight deadlines."
Vishal Lahsiv,Author has 61 answers and 480.3K answer views,2016,5,"Don’t get me started…
Agile was probably designed for software (mostly websites) in which the deadlines were defined internally. In most cases that is never true and you don’t get the luxury to define you delivery dates nor will they line up to your sprint ends. If the customer wants it now you give it to him now not after two sprints.
As a developer, what is my incentive to take a long view of the system and invest time in coming up with a robust framework upon which everyone can build. Rather, I am just suppose to deliver pieces of shippable software and we all know what happens when you request management to leave your team alone for a sprint or two to “refactor” and cleanup the old technical debt.
As a developer, what is my incentive to complete more points than someone else in the team? My performance review is not being based on the number of points I complete.
There are areas of concentration that everyone develops. Each individual will know one part of the software better than the other. We don’t have to force everyone to work on everything…it achieves nothing and lowers code quality. If the person leaves we can learn but until then let these domain of expertise remain, it is very natural.
Management and many developers get so carried away by Agile that they don’t realize that the process is not the solution. We cannot ship User Stories or Task boards and the answer to every technical problem is not - Agile.
“StoryPoints/Velocity” - This one just makes me mad. So we now need this abstract unit of measurement which is not really time or man-hours but some obtuse weird notion of complexity which people take more than 15 mins to explain a new comer. Why?
Why or how is Agile different than a simple divide and conquer strategy to solve any complex task? You have a problem (any problem in life), how do you solve it - piece by piece."
Joey Guerra,"Software Engineer, Ex Pole Vaulter",2016,5,"Because they are not the ones deciding to be agile, someone else, who is not a software engineer, is deciding for them and forcing the process. Search the web for “the pig and chicken” story for an analogy. The chickens are the ones deciding, while the pigs have to live with those decisions.
I refuse to answer what methodolgy is better because there are too many parameters to the problem to give a good answer."
Aaron Brady,8y,2016,5,"Agile is way of making things where you accept a large amount of uncertainty about the future and pursue what appears to be most interesting at the moment in exchange for learning quickly from experience, failing more often and deferring decision making to your future selves who are, hopefully, more informed and better able to make decisions about the product.
Some developers dislike the failures that come from the lack of planning in Agile, they say that spending more time mapping out what needs to be done would be a better way of doing things. Sometimes the lack of planning has real consequences, for example building a rocket to the moon probably could not be done through agile methods. if you found out halfway in that you needed to add another stage and hadn’t planned for that all along it would probably be a disaster.
Sometimes the process appears to be Agile, but is actually some other process in the guise of agile. For example having a daily standup when everyone knows what they’re doing may be a waste of time, or having management constantly changing priorities, or not accepting estimates etc. etc. can make developers feel like ‘agile’ is just a tool for management to manipulate you.
The alternative to Agile is to try to plan everything up front in a traditional waterfall manner. Makes sense for bridges, or moonshots, but by trying to do too much planning up front you often have to take guesses (that end up being wrong), and you deny your future self flexibility to adapt to lessons you learning while developing the product. And in the case of software, where the cost of changing directions is so low, the traditional waterfall method ends up being less efficient, and often bogs things down so much that projects grind to a halt (see the healthcare.gov disaster)
My advice is that, if you’re in a situation where people are rejecting ‘Agile’, try to come to an agreement on a process similar to agile where you learn to live with uncertainty, and move forward in the direction that appears to be best for your product rather than falling back on rigid planning.
(I recommend Season 1 for a much better analysis of the two types of project management I discuss here)"
Andreea Visanoiu,Scrum Master | Agile Coach at Mindvalley,2017,9,"Agile is not a framework / methodology, it’s a way of thinking - as the Manifesto for Agile Software Development clearly says. The point is to work around these principles and implement them in your approach to software development. At no moment they say that you drop all the values on the right side and you go build software chaotically.
I’m a Scrum Master, so I obviously work with Scrum. But I’m not anal about it, I see Scrum suggesting a set of tools that I can work with and adapt to fit my teams. This is how we ended up doing Scrumban (Scrum + kanban), because Scrum didn’t exactly fit one of the teams. Another team does Scrum/XP. In other teams I use different approaches, keeping some elements of Scrum (roles, values, self-management, retrospectives mostly). When the case, I give up daily huddles, if the team already has a good communication flow going. On top of it all I’m a big fan of Lean (as it is promoted by Toyota and Mary Poppendieck), and I use ideas from there to increase performance and work better. Otherwise, I’m helping the team become Agile and Lean without getting stuck into frameworks and rules.
Certifications as a business created a big problem and put a lot of people that don’t understand Agile (or the concept of a framework vs a methodology, or the fact that for example using only Scrum is not enough, using Scrum “by the book” doesn’t work for all products or team) in the spotlight. There are tons of Agile Coaches, Scrum Masters, Agile PMs, Scrum POs that have no clue what they’re doing and they don’t understand the mindset. You have to live and breath Agile, and responding to changes and adapting are the first things that are dropped when implementing one of the Agile frameworks. It’s basically implementing Agile without even being agile.
Another issue I see: developers are not listened to. There are Scrum Masters, Product Owners, Agile Project Managers who act like bosses and give orders, set estimates and deadlines and push for work done without considering what the developers think or advice. That’s another big issue with Agile - waterfall gave them the impression of freedom (at least for a period of time they were left alone to work on the product), now a lot of roles are meant to bug them and control their work. This is again agiliy interpreted badly. One of the best parts about Scrum for example is the self-management concept. There is no management, there are no bosses. But it takes a true Servant Leader to understand that, to listen to the team and make sure the choices in process in tools is agreed with the entire team.
My favourite part about Agile is the “people over processes” part. One of my personal metric is the mood / happiness of the team. I take their feedback seriously (from the communication part, to “processes slow me down” part), I listen and I help them find the right tools to work with, I don’t impose (nor exhaust myself trying to convince them). They do the work, they know better. All I am expecting is for them to be open to experimenting, inspect, adapt and continuously improve. Be it Scrum, Scrumban, ScrumXtreme, story points or mandays, user stories or what have they. I don’t make the choices for them.
In the end the fact that the software development effort is guided and managed by someone else but developers is a huge issue. It’s normal for them to hate the Agile part, which may mean they hate the “agile people”. All the roles that are made by inadequate people, that don’t understand the need to change, inspect, and adapt of Agile. Which might mean, for a certain project, for a certain team, adopting waterfall."
Baruch Atta,Upvote,2019,3,"The agile method relieves management from having to develop specs. which means developers must recode and recode until management gives the blessing.
The agile method has little use for documentation - which developers need to support a system.
Developers like best the reiterative waterfall. Complete specs and documentation, while continuously conferring with management at every step."
Jeff Wilsbacher,Bay Area Native and lifelong resident,2018,3,"Because “Agile” (note the quote) is often used to micromanage developers in one of a number of ways.
Becoming a software developer you have to spend a lot of time by yourself learning to code. When doing this your most productive/best feeling time is when you’re able to get “in the zone”. Flow (psychology) - Wikipedia.
Agile *requires* you to spend time outside of flow state for meetings, pair programming, user story creation/editing/validation etc.
It may also force you to be in the office at a time when you’re not productive (when their is a bunch of business folks around making noise and asking questions).
“PM paradigms” can be a problem. PM’s are often proxying for stakeholders. If those stakeholders have unreasonable expectations or are micromanagers it doesn’t matter how their message is delivered.
Developers want PMs to leave them alone for blocks of 4+ hours so they can (often with the addition of headphones and good music) get into a flow state.
Agile requires developers to work in a team environment where flow state is more difficult to get into.
“Agile” (note the quotes) frequently discards necessary technical spikes for activities such as research, design, investigation, exploration, and prototyping.
Software estimation is painfully hard. Some developers feel self-conscious about wrong estimates and force themselves into a mountain of hidden overtime so their estimates are (more) correct. While agile addresses this issue its (very) frequently disregarded during actual agile “production”."
Jayesh Lalwani,Iterator,2016,6,"I think the core problem in lot of Scrum implementations is the lack of self-organizing teams. Most Agile adoptions fail because they see the SM/PO as a PM that the team is organized around. It works a lot better if you empower the team to figure things out for themselves.
It’s all about power and responsibility. Waterfall models put a lot of control in the hands of the top brass. They get to dictate how the organization is organized. They get to dictate the process. In turn, they take extraordinary responsibilities. The developers essentially are responsible for doing things that they are told to do.
Agile, OTH, requires the managers to delegate power and responsibility. Developers are responsible for managing themselves. All the PO cares about is whether the Agile team is delivering. They don’t care about how the team operates.
(Traditional) Managers hate ceding control. Adopting a Agile model in a large organization that runs waterfall means that the developers will be responsible for making certain decisions. But, Managers don’t trust the developers to make those decisions. So, they come in and micromanage. And if they are not technical, they might dictate process that are not sustainable.
And, to be honest, a lot of developers don’t want control too. Oh they might say they want more freedom, but a majority of developers do not want the responsibility. What they really want is for the manager to go away and let them do what they want to do, and at the same time, be answerable to the client. No, it doesn’t work that way. If you want the freedom, you are answerable. A lot of PMs become punching bags for the developers. End of the day, it’s a lot easier to complain about the PM than to fix the problem."
Anonymous,8y,2016,4,"My apologies for posting anonymous but I would definitely get some trouble publicly criticizing our project management if this was showing my name.
The trouble I have seen with agile is that companies, at a high level, hear about this great methodology that will have them developer faster and more reliably which sounds just amazing to them. So they tell their development teams and project managers that they all need to start being agile. However, none of the executives and project managers are willing to let go of the metrics, measures and assurances that their older methods had. They want the project to better meet the client’s expectations but they won’t relent on agreeing to every specification in detail before development starts and they won’t agree to changing the requirements as the project progresses. They want estimates to be better but they won’t agree to start development until every task is broken down and estimated.
They want the benefits of agile without giving up any of the processes that they are comfortable with.
In our current agile methods is that there is nothing agile about them at all. Officially the project managers tell the world we are agile but the reality is we are working on a waterfall method with review meetings every two weeks. The client and business analysts design the specifications to exact details before hand, estimates are given, a release date is agreed to and a contract is signed all before any development begins. Once development starts we can’t change the specification without going through a change request process and testing is all done at the end. The only things we do that makes people believe we are agile is (1) we have a meeting every morning and (2) we have a review with the project manager every two weeks.
People here say they don’t like agile and that agile doesn’t work but the truth is they don’t know anything about agile methods."
Walt Karas,"Software Developer, https://wkaras.github.io/",2016,4,"Software development is a practical activity. Practical activities are activities people expect concrete results from. Software helps you do concrete things, like drive your car or pay your bills online, not nebulous things like improve your general sense of well-being. Principles that help you do practical things should be falsifiable. This is an issue with many methodologies, not just Agile. Agile says you should have a backlog of features, and work on them from high to low priority, and just get as many done as you can in each sprint. No pressure. Since the USSR no longer exists, it would be hard to find an organization where you could strictly follow this principle. Usually, you have lots of high priorities, and you’re trying to guess which ones you can put off without going out of business. You rarely get to work on anything that seem “optional”. Sí pressure. So, whatever goes wrong, your Agile consultant making 3 times as much as you are can always say “well, what do you expect, you’re not following the rules?”. Agile always works, because, in practical terms, it’s impossible to say it doesn’t.
Maybe we should keep our floaties on and stick with methods for now:
Don’t just sit there. If requirements are murky take your best guess. No matter how much throwaway and rework results later, you won’t get less done than you would have doing nothing. Do the OO thang and try to make components that make sense free standing and could perhaps be reused in other efforts.
Writing stuff down about what your doing and trying to do is basically a good idea. Lists of somewhat free-standing points (like this one) are generally more helpful than long paragraphs. If you don’t have tools to make flashy fonts and graphics as easy as making stuff that looks like IETF RFCs, then make stuff that looks like IETF RFCs. Slides that don’t say much of anything without you standing next to them saying what they say are of very limited usefulness.
TDD is generally good if you’re not anal about it.
If experienced team members want to dive into the details of something they anticipate is high risk, let them. That’s often the best way to anticipate and mitigate delays and the need for more resources as early as possible.
Lets not try to rush the day when we’re truly ready for the methodology deep end."
Peter Trudelle,30 years in the bit mines,2018,4,"They hate Agile because their leaders inflicted a project management paradigm on them, and called it “Agile”."
Kostya Stepanov,Founder at Shakuro (2019–present),2022,1,"I think the biggest problems is client’s distrust and dissatisfaction with communication when going agile… When outsourcing, a customer never has full control over what’s happening.
Successful communication increases the probability that a client will be fully satisfied with the final product. It soothes the nerves, creates friendly working relationships, and gives more freedom to a developer.
Building trust is key to regular clients. And that means more profit, reputation, and glory in the end.
These methods worked for me:
Show your client how to work with you
Through smart onboarding and communication guidelines.
It’s very important to clarify what to expect from you after they hit that “send” button. Ideal onboarding provides answers to 3 key questions:
What services do you provide (in details)?
On which principles do you provide those services?
How exactly can your services be useful to a client?
Set realistic deadlines while managing an agile project. Set achievable goals. Communicate with them in a believable way. Teach employees how to deal with clients’ objections and comments.
Update product roadmap
Getting the roadmap right from the start can save time and resources in the future, but development is tricky, and sometimes adjustments are necessary, especially in agile projects.
If you’re adding tasks to your backlog, will the final look change? Will the project help with some other client’s problems, other than the ones you discussed in the beginning? If the answer is yes, update the roadmap. Keep it current and make sure the client knows about it.
Don’t let your perfectionism get the best of you. Being on schedule is more important for a client than introducing new features.
It’s not just sprints and scrums
You should regularly have 2 types of meetings with them: vision-alignment meetings, and retrospective meetings. Schedule them after you finish several sprints.
Vision-alignment meetings are the ones where your team and a client can reassess the state of a roadmap, offer changes to its timeline and budget. When working on an agile project with a client, help her or him make sure that:
A project is heading in the right direction.
There is a unified vision of the final product.
You solve the occurring difficulties before the stage of project delivery.
Retrospective meetings are the ones that allow us to discuss the existing state of affairs. What works? What sucks? That kind of stuff. They are also a great way to receive positive feedback: recognition of teams’ merits by others.
You can see more about my agile methods in my free article on shakuro.com."
Patrick Butterly,Software Engineer,2017,3,"WOW lot of answers! Ill add my own because I dont see it (although it might be there somewhere) the answer is very obvious when you look at it though.
AGILE IS NOT WELL DEFINED!!!!!
People advocating agile will go to great lengths if it isn't working to tell you your doing it wrong. Bottom-line is agile is a abstract concept with loose implementations hat focus around a center theme of “if it isn’t working for you change it”.
Management see it as a fix all but focus on moneymakers and demand deadlines and estimates(for obvious business reasons), this makes it anti-productive and frustrating for development.
Basically a buzz word in the management realm everyone has to use but more often than not wont relinquish control over the process reducing it to time wasting nonsense.
and my answer ran on longer than intended…."
Adrian Olszewski,Principal Biostatistician & Statistical R Programmer at 2KMM,2017,4,"Personally - due to pair programming. I hate working on my code with someone who interrupts me. I like thinking and coding completely alone. Secondly - I don’t like working on someone’s else code (doesn’t matter how easy to read it is) and I don’t like others touching my code. I accept and appreciate code review (to make my code better), but I don’t accept others to modify my way of thinking. Thus - I don’t work for companies where Agile is employed. It doesn’t mean I don’t appreciate Agile as a smart way of making life easier and product better. It only doesn’t work for me."
James Simpson,CTO | Sydney Australia | www.analyseIT247.com,2016,3,"There are reasonably common things that developers don't like such as:
sustained pressure to work long hours to meet deadlines that they don't subscribe to
being asked to provide status and updates too frequently
being part of a team that is trying to fill expectations that are not realistic
not having the time to develop at a level of quality they feel is ""good""
the need to create reports or communications that feel ""artificial""
You can achieve these things with almost any methodology including Agile. I think it's helpful to look at the root causes behind the points above in a given environment to understand why developers are unhappy. Not always, but often, it comes down to a combination of management values, culture and expectations.
For example: if a point of authority in an organisation holds the value that it is okay to achieve an aggressive goal by simply pressuring people into doing more than they think they can do, and they do this repeatedly, you run the risk of seeing some of the unhappy symptoms above. It doesn't matter which methodology or framework you use.
A particular challenge with Agile is that the way in which it is communicated often promises a lot. And it seems to promise more with each retelling / reselling. This is where it can be helpful to separate the set of ideas called Agile, and the set of expectations created when groups buy into a quasi-product called Agile. Or Scrum. Or Waterfall..."
Jasmine Noack,Software Engineer,2016,3,"I work in an agile shop and a lot of people like it, but there are things we all hate about it. Here are two big examples from a conversation last week:
incremental: Just because you say the word incremental doesn’t make the project smaller.
iteration: Sometimes people mean do a shitty job and you can fix it later.
The problem isn’t agile it’s people who act like agile is some kind of magic bullet. It’s not. The work is just as hard as without agile, it’s just organized differently."
Eric Larsen,Former Computer Engineering Silicon Valley (1980–2011),2019,2,"Toward the later stages of my 30+ year programming career, Agile was introduced at the company I worked at. It was a large Silicon Valley tech employer. I do not recall any engineer who disliked Agile. Not everybody was enthusiastic about it, but there were few objections.
There was management overhead, but it was not much better or worse than the previous processes.
The best part of it for me was that it seemed to limit the amount of pain we were subjected to. In the previous system, we would work for about 6–9 months, get behind schedule, the managers would panic, and we would be in for 2–3 months of crunch mode, cracking of the whip, the captain wants to go water skiing, whip the slaves, pull on the oars, nights and weekend work, etc. etc. etc. etc.
With Agile, there might be some pain and agonizing re-appraisal, but it was every two weeks. We get a new plan, try again. If we fail to get things done in two weeks, it becomes visible. It does not get hidden or covered up for months, then finally exposed, and we all get a blowtorch applied to our ass.
I thought it basically worked, I do not know of a better way to manage. There were problems, but it was due to lack of understanding of the team on how to effectively apply the methodology, not anything wrong with the methodology itself. There is no management technique that can compensate for large scale wrong technology choices, lack of programming competence, or mitigate the difficulties caused by dividing a project across time zones, or hiring people who speak different languages."
Rudrangshu Das,"Like to code, love to observe coders.",2016,3,"My 2 cents. 2 disclaimers to start with.
First I have worked in the IT services sector for my almost 10 year long career. Although I have developed enough products for my clients who were product development companies, but I always worked as their vendor. So my view is from that angle. Secondly I will comment on SCRUM as I know of Agile as SCRUM, I am not aware of any other models.
SCRUM in my experience is a model promised to project/product managers or Upper Mgmt in general that makes their team efficient and productive to the optimum level. Most upper mgmt believe in this advertising and go for it. So they often extrapolate this advertisement to mean that a product/project that has been estimated to take 6 months by the architect/developers, the techies can be done in 3 or 4 months if we follow Agile. Even if people don't say this openly I feel this is what they think in their heads
I don't need to explain how unsound that logic is. So often the seeds of discontent is sown early among the developers because they feel they are going to be overworked and the mgmt doesn't trust their judgement.
Now coming to the practical problems I have faced in working in a scrum model.
1) Onshore - offshore development model. I don't know what is the right way for doing sprint planning and daily standups in an onshore offshore model is. But I can comment what I have seen in several of my projects. There is 1 common planning meeting and 1 common daily standup for both onshore & offshore. It doesn't matter if the team is large or small, there is always some communication gap between onshore & offshore. The offshore invariably plays catching up to onshore in terms of requirement and design changes & the vice versa happens in terms of work progress status. So a daily standup call drags on to an hour or sometime more because instead of just work updates we are now discussing requirement changes which were not communicated to offshore before. Now the meeting was scheduled at a time that was conducive to both onshore & offshore. That means start of day for some and end of day for some. For the one whose day is going to start after an hour long meeting in which I spoke for maybe 5 mins, I am already put off. It will take me at least an hour, a cup of coffee, a bit of random internet browsing before I get mentally prepared for coding. For the one who ended the day with such a meeting, I am kind of in a foul mood because I feel I could have gone home early if not for this damn meeting. On the top of it if there were changes in the plan for tomorrow, I can't help but think about it on my drive home although I try my best to shutoff my mind from work at the end of the day.
2) No product/ project plan is perfect at the start. No software design is perfect at the start. There are always unforeseen changes sometimes forced by the business, sometimes forced by technical challenges and non functional requirements. I feel SCRUM makes it harder to accommodate changes. There is always an obligation to plan some work for everyone every sprint. Sometimes its not possible. Sometimes a task is too big to be broken down into chunks that can be done in 1 sprint. But a strict adherence to sprint plan sometimes leads to doing something while fully aware that the work is going to be discarded in a subsequent sprint due to a design change. This can be very annoying and I have faced this multiple times.
Having said that there definitely are some advantages to SCRUM. Productivity is one of them. Developers waste less time if they have to report a daily status. I am trying to think hard about other advantages right ñow... Sorry nothing.
I am a developer ao whatever I wrote is from a developer's standpoint. My view could be narrow and myopic."
Warren Wise,Works at GL Homes (2018–present),2016,6,"An agile approach to software development requires focus. Some developers have difficulty focusing, so they need distractions; otherwise, they’ll get bored. Even though there is information and studies that say multi-tasking slows you down, they need to multi-task, or they’ll be miserable.
Another thing agile development requires is that developers and stakeholders (customers, users, SMEs, managers) work together. Many organizations are structured like silos of mistrust. It’s painful to work with people who don’t trust you, who think you’re incompetent (just because they don’t understand your job or work) and who are disinterested in how their activities impact you.
To be good at agile software development (or at anything at all, really), you need to practice. You need to get better at designing systems, testing, and using your programming language and its libraries. You need to learn different programming languages, programming paradigms and design methods. You need to analyze your work and performance to find weak areas, then find resources (books, training, mentors, user groups) that can help you develop mastery. There are many programmers who are in it mostly for the money. They don’t really like programming enough to try and master it, only enough to not get a bad review from their manager during the performance appraisal process. Agile methods require continuously improving your team’s ability to deliver high-quality software. For someone who’s capable of software development, but who wouldn’t do it as a hobby, all the effort spent figuring out how to be better as a team can be a serious drag.
One last thing I’d like to mention is that it seems to me that a fair number of companies adopt an agile methodology under false pretenses, for the wrong reasons or with a lack of understanding of how agility works. I know a company whose IT department convinced the organization to adopt Scrum for the standard reasons, but one of the IT Architects told me the main reason was so that blame could be placed on the business when things went off the rails, since in Scrum, someone from the business (the Product Owner) is responsible for prioritizing work, and all stakeholders have an opportunity to attend a demo of the software before it’s realeased. If business leadership complained about the software that was released, IT could then simply say they delivered what was asked for and released what was accepted by the business, so it’s not their fault if users don’t like it or it’s not useful.
I find it difficult to imagine that any developer would be opposed to a way of developing software that: valued their knowledge, skill and judgement; gave them frequent feedback on the quality and impact of their work; made the resources they needed to deliver valuable software readily available; gave them time to consider multiple options, and to reflect upon and improve the quality and efficiency of their work. I think developers hate agile methods the most when the company or team in which they work doesn’t value the culture that makes this possible, yet they expect to see the fruits of such a culture. That inconsistency between organizational culture and organizational expectations creates one of the worst feelings in the world of work."
John Wright,8y,2016,3,"Agile is a bit like nailing jelly to a wall.
When people complain about sprint pressures, velocity etc Agile devotees say “Well, that's not really Agile”
Agile gets a lot of kudos with more senior management because it either offers faster delivery or exposure of issues earlier. Done right it can deliver both.
Unfortunately, Agile still needs people and they often lie, bluster and prevaricate. This leads to inaccurate solutions that need rewriting and reworking. People will just throw in a library they found to get the job done quicker rather than question whether it's the right thing.
Agile is the best methodology if you have a perfect setup. Failing that you need a sensible mixture of Agile and Waterfall: plan, report, estimate, report, develop, report…"
Stephen Johnston,web dev for 20+ years.,2016,3,"In a nutshell: It’s not a project management paradigm, but everyone thinks it is.
The project extends beyond the sprints and team dynamics. Agile, in general terms, deals with the team dynamics to deliver units of result and to some degree units of work. The project is many units of result (vs work). I’m using some traditional terms differently than usual to make a point. A project, the agile thinking, encompasses many results (outputs) from a team. The team organizes in an agile manner to create those results with their work."
Tarasekhar Padhy,Engineer,2021,1,"Because there is a huge difference between “doing agile” and “being agile”.
doing agile: Developers are forced to do standing meetings and send each other detailed EOD status reports even though it could be a simple conversation or a message. Agile requires each of the team members to be on the came page and status reports are a great way to do that but if there is a better, easier and a hassle-free way to do it, then adopt that. Agile suggests whatever works, use it. If just a text message or something is enough to update everyone in the team, then these “orthodox practices” are not necessary. It just clutters the inboxes and calendars of the developing team.
being agile: Create a strategy, build a small part of the product, test that small part, get reviews, pivot or persevere. In a nutshell, that is what being agile means. Being reactive to external changes and adopting the course of development as necessary is the soul of agile which the management has successfully crushed. True agile is a state, not a process that you follow or set of predefined rules you abide by. The rules and process are developed along the way based on what works and what doesn’t.
principles>practices: most of the organizations have created a set of practices, steps, rules; that the developers need to follow to “do agile”. This entire belief system and theory is against agile’s core values and principles in the first place. The practices to “be agile” should evolve along they way and the way to be at the right place is to understand the core principles of agile truly.
only coding is agile: I believe this is the most prevalent one. If the marketing strategy, distribution strategy and management operations are conducted in a non-agile way, the effects will not be visible at all. In fact, just making one phase in the entire process of product development is detrimental to the overall process.
There are many more reasons for which developers despise the version of agile that they are forced to follow. We have a free eBook that suggests how agile can be applied to any workflow, true to it’s principles:
Understanding Agile for eLearning - Free eBook for download - zipBoard
A free eBook which will help you understand the challenges in the eLearning industry and how Agile could just save the day.
https://zipboard.co/understanding-agile-for-elearning-free-ebook-for-download/?utm_source=quora&utm_medium=social&utm_campaign=Outbound_quora
Do check the eBook out and let me know how it is. I also feel that if agile can be applied in the software industry and also in the eLearning industry, it can be applied in most of the industries. The answers dropped by fellow quorans are also quite informative as it helps me understand what is actually wrong.
The reality of the matter is, most of the development teams have adhered to “fake-agile” instead of real one. Besides, if you feel that agile is not working for you, drop it because that’s what the principles of agile also point at!"
Michael Walsh,Works at SAP Concur (product),2016,2,"A lot of developers dislike Agile because instead of being agile it can be used as a magic Process which will fix everything by adding more meetings, doing away with any sort of design concepts and allowing management to change direction 300 times a day so no one has any idea what they are doing.
Then everyone gets yelled at because they missed their ‘sprint goals’.
Agile done right can be wonderful because it improves communication between teams and prevents the ‘you designed it wrong’ 2 years after after starting the waterfall. Agile done wrong can be a great way to line the pockets of Agile Consultants and stress out the developers to the point of quitting.
YMMV."
Alysson Melo,Computer Engineer passionated about start-ups,2016,3,Using Agile you can makes fast anything. The key to improve your product is make the right thing after that you make faster. So in agile sometimes you dont have time to collect the feedback of your last sprint with your final user and other stackholders because you are already doing the next sprint. So you start doing the next Sprint without feedback and if you are on the wrong way you will spend a lot before to discover it specially if you have big cycles like 4 weeks Sprint. Your final target is improve your learning speed about your experiments and yor product. After that you improve the product delivery speed.
Richard Leddy,Have been programming computers more than 35 years.,2016,2,"The picture that James Grenning has looks like a club of past managers I was assigned to. Being that I would rather spend most of my time with attractive young women, you can imagine that I did not get along with many of my past managers.
That said, the time that I had a fairly good experience with something like agile was a long time ago. I don’t think the term was invented yet as a name: ‘agile’. We had an issues burn down list that was a FileMaker Pro application that this kid did. The director of marketing and I could war over issues by reseting their priority. This process almost became emotional. But, it worked well to produce quality product.
But, what about the sprint stuff? Well BS BS BS. In fact the first thing I did was create a design for software that allowed a more well defined creation of unit. The software design was something that I threw at this little consulting group and they let me run for a few weeks making it. I made a byte code interpreter of a sort of task language that I made up. The program compiled and ran the language. The task language was made to work fairly well with the unit descriptions from a content team made up the marketing director and an education planner. So, I could translate the planner’s scripts into the language and compile with medial elements in place. The project manager, a seasoned instruction video developer tract my progress with the first unit made according to the method. He wrote it all done with pencil on a blank piece of paper, which he kept in a manila folder. He kept note of my time on pieces, and then told me about it later.
Then, we did sprints for a unit at a time. This involved making video, doing voice over, flying in people from around the country for talking head videos, placing the media, making the script, compiling and integrating into the final product.
As the units were integrated, the head of marketing and some media boys checked for issues and filled up the priority list. I tried to put plumbing ahead of cosmetics. The others seemed to like cosmetics more. Things came off the list as short time wins, set aside projects, fix media, fix the platform, etc. Short time one were like opportunistic wins. Others, got schedule by priority. Priorities would change when for team members in and out of the work space as well, for resolving issues they had prioritized and could communicate about.
So, the burn down was more a final phase process related quality and show stoppers. At that point there were fewer new units, and at the end no new units just weeks before release.
The process was fairly high pressure for the small group. But, good product came out.
The point is that SCRUM or agile was not applied for the whole project. Sprints were not applied for the whole project. These things were used when the had to do with the progress that fit with them for the part of the project that needed them. Bigger parts of the product were not scrum items. They were definite chunks or sub projects.
Another point is that innovation was needed to create an assembly process. And, the assembly process was subjected to the predictability of a sprint.
Another point is that the team cooperated and argued (at times with fervor) over points using a system for prioritization. And, that system was simple enough we could do it with a home brew DB.
I have been in shops that make the agile thing not be agile. And, the buy overblown expensive “agile” systems with all kinds of reporting features to set up a long list of poorly defined tasks. Some people on the teams associated with these crazy task lists take it seriously, especially the scrum masters. Others stand in the scrum circle and make bad jokes.
And, yes the scrum masters figure out how to use the big “agile” system to plan out political vendettas by making management think a guy is a slacker. “We’ll just split that task and move it to the next sprint. Whadya say?” BS BS BS. (Don’t give the scrum master a gun. )
So, basically, agile when used as it is in the formal way over long periods of time is probably BS. But, a crowd of “Hill Billies” can make their own business process and make it work, although the didn’t know the prescribed way. They only knew the way that worked.
One of these days I’m going to get a bunch of funding for a tick tack toe game. I’m going to write it using Hadoop. And, I’m going to buy Jira and hire a bunch of scrum masters dressed just like the guys in James Grenning’s pictures to work the Jira system and report to the investors about my progress. That would be just like working for a fortune 500 company. Anyone want to be on the project with me?"
Michael Burrows,12 plus years as a contract software developer.,2016,3,"Because corporate America is much like the military in that it wants everything codified. The idea behind this kind of thinking is making every input(employee) less important than the process. The traditional thinking is that depending on process gives more consistent results. The results might not be as good as relying on talent but that reliance can come at the expense of consistency. While that kind of thinking is reasonable from the business perspective it can conflict with some programmers mentality. Many if not most programmers started programming because they are oriented towards creating things not completing checklists. The idea of working an assembly line gives many programmers night terrors. “Agile” for many programmers can feel like working an assembly line.
Numerous people smarter than myself sing the praises and sins of various methodologies so I won’t argue for either. I’ll just say that I don’t see “agile” disappearing from the landscape anytime soon so programmers will have to make the best of it."
Dmitrii Medvedev,Software Engineer (C++),2016,2,"In short?
Agile == feature creep. Feature creep is bad."
Jugdesh Mirwani,Systems Engineer,2016,2,"I don’t like Agile because use of the method is not intuitive with success. It all relies on having a strong person acting in stakeholder role that is proactive in communicating and participation in every aspect of the process. This person must be be able to be held equally or more accountable for end deliverable as compared to development team.
We have all worked with business focals that have been assigned this task that will do this passively and just lay the blame on the development team when the end product is not what is expected. I have had success in such engagements because I can either anticipate or translate the stakeholder requirements in to a workable product based on industry standards.
Leadership can come from anyone working on project from Developer to Lead Developer. Basically you need someone that has worked in environment with a lot of governance process that knows what elements of governance is required while keeping track of that in his or her head rather then with formalized work product.
If nobody is doing this then all you are doing is development by the seat of your pants on the fly and dumping the cost of lost quality of the rest of the support lifecycle of the product.
I would not say never use Agile in favor of alternative. The answer is never to Agile in when inappropriate. I would avoid for commercially distributed software. It is the worst when development team is in vendor relationship. Most SOW/DOU in Agile Arrangement are dollar paid for any hour worked. They have no incentive to produce a quality product on the first pass so they can bill you over and over for rework."
Steven J Owens,Lazy Coder since way back,2016,2,"A great number of reasons, most of which have nothing to do with agile development.
A lot of people talk about agile development, but don’t actually do it.
A lot of people misuse the term agile development (the same sort of people who use “refactoring” to describe any rewriting of code).
A lot of people simply do agile development half-assed (see “We Tried Baseball and It Didn’t Work” by Ron Jeffries, We Tried Baseball and It Didn't Work).
Agile development is demanding; the XP folk, for example like to refer to XP as “low process, high discipline”, the point being that you can get away with a lot less process (and thus a great deal more adaptability) if you hold yourself to a high standard of discipline at several levels. On the low/day to day/hour to hour level there’s using test driven development consistently, using refactoring properly, etc. On the higher, more strategic level there’s staying committed to your iterations and to concepts like velocity and the planning game or whatever else you use. There is a constant temptation to skip steps or cut corners.
Some aspects of agile strike people as weird - pair programming for example, can be incredibly effective, but it freaks people out.
Some aspects of agile are hard - to use the same example, pair programming is a skill, it takes a not-insignificant investment of time and energy to learn to do it well.
Many aspects of agile are useful and effective, but any given aspect or approach to agile doesn’t necessarily fit every project - agile proponents were the first to say that “one size definitely does not fit all”."
Alfredo Alvarez,QBasic -> C++ -> JAVA ->C# -> Python ->C# With html and javascript sprinkled,2020,1,"The big problem that I see is that a core requirement for agile to work is great communication skills and negotiations.
These are only really available on highly experienced teams in which the members have been coached on both technical and soft skills.
When you add product creation support staff (product/QA/QE) they need to be really familiar with realistic expectations in order for this conversations to happen and be done within a short time. In 90% of the cases that is not the composition of the team.
So we are using a process meant for highly skilled and experienced team on neophites with some guidance. This creates a lot of friction and without communication that friction just turns into plain stress.
In my whole career I only think of the teams I’ve been has been fully functional inside agile and we weren’t really using scrum more of an XP team."
Sergey Ch,Studied Computer Science,2020,2,"A lot of developers dislike not the Agile but the Corporate Agile. These are two different beasts to my mind. Agile was created as a practice far better suitable to modern software development than Waterfall methodology. When requirements change many times during the development cycle you cant afford Waterfall anymore. Agile was created by developers as an aid to them.
the core idea of Agile is that everything is agile, also the Agile itself is agile and not strictly defined. You adjust the methodology according to the development stage of your product.
But when Agile is adopted by a large corporation it becomes stiff and embodied in paper business flow, like “you must standup”,”you must assess everything as a user story” etc. So Agile becomes mandatory, every step of it. I have known a corporation that went as far as requiring memorising the agile manifesto by heart and reciting it!
Agile as ideology and methodology was not conceived to be mandatory. All its steps are guidelines rather than something poured in concrete and steel once and forever. But this is exactly what it becomes in a large corporation. I have seen standups of more than 30 random people hailed in by the management because “Agile commandeth thou to stand up” and not because those people were somehow relevant to a standup.
Corporation is about procedures. And they must be mandatory because it does not work otherwise. But Agile requires that developers have a say in adjusting the application of the methodology itself depending on their project. the procedures of agile must be themselves agile and not biblical commandments to be followed blindly.
So lots of developers point out the discrepancy or sometimes outright foolishness of “bureaucratic agile” in large corporations but not the methodology itself."
Claude Wilbur,Programming computers for pay since 1978,2019,1,"A lot of good answers here. I particularly like the answers from Mr Grenning and Mr Green.
I will add a comment and an alternative. The comment is whatever methodology you use, it will not improve anything unless changes are made in company culture. This included everyone from top to bottom being willing to work in an unfamiliar way. Usually this means ceding some aspect of control and responsibility to someone else. Most humans are not OK this, developers included. If you read Winston Royce’s book, it seems reasonable enough. Yet Waterfall became a series of milestones that had to be met on schedule, with no back tracking to fix things that weren't quite right. If you look at books on the different methodologies which became Agile —XP, Scrum, DSDM, Crystal--they don't really advocate “iterations” which are fixed deadlines with no thought for the feedback and rework needed to do a quality job. Even if there were a proven silver bullet (look at some of work of Harlan Mills) it wouldn’t be widely adopted without being distorted to fit the comfort of “them” and “us”.
The alternative is something that was used in a company back in the late 80s. The idea was write the manuals first: tech manual and user manual. Each draft was submitted to all stake holders. Questions would be asked and the manual would have to be updated to reflect the answers. This would continue until all parties agreed that we had everything correctly described. Only then could commitments be made. During the process, developers could start doing any development task they wanted, but no delivery commitments were made until all participants were happy with manuals. Same for management, marketing, everyone. Everyone knew that whatever they did was tenuous and could be totally upended by the next edition of manual.
It worked surprisingly well. Not all was goodness and light, there was head-butting, wounded egos, and back-to-square-one. Nevertheless we always felt that each revision was forward progress, and the current state of the project was widely visible. Testing of the project consisted of evil people trying to show that the product was not as described in the manual.
We had two advantages the helped us regardless of methodology. One is that it was a small business (150 employees over two timezones). The other was that nobody copped out on their responsibility to answer outstanding questions. No “that situation will never arise”, or “surely no user would due that”.
I've no idea if this could be scaled up to the latest project at MegaCorp. To this day I feel pretty good about the final product. This is in spite of my present realization of the degree to which we were all naive, inexperienced, and ignorant."
Ilya Bibik,Author of the book - How to kill the Scrum Monster,2019,1,"They don't dislike Agile, they dislike what is presented to them as Agile. Agile often is not implemented correctly. Scrum Masters often don't have experience and clear understanding what they are doing. As result teams try to execute rituals that do not have a clear purpose in they context."
John Penney,Owner at PPP Milton (2001–present),2019,1,"We don’t. We just hate the Name, the meetings (which no one ever does correctly, so they’re not agile), the scrum master (who have 2 hour “scrum” meetings once a month) and the sprints (which take 5 months and never have any of the features of a sprint).
agile is the way I’ve always developed software. agile is the way EVERYONE develops software. it’s like science, which is different from Science. People who hate Science just don’t understand that it’s different from science.
Everyone loves agile, they just don’t know it yet."
Anupama Kasturi,Product Management Head at Jile,2018,1,"Developers dislike ‘Agile’ methodologies only when they are not practiced the way they are supposed to be.
In Agile; people doing the work make the estimates and commit to work. However this does not happen; managers make commitments and then thrust the same on the teams to commit to their timelines.
If Agile is practised the way it has to be then developers will love it because; because teams are at the centre; Focus for People :-
They directly understand the need, vision and goals and would hence contribute towards the right solution
They make estimates and commitment based on their capacity; they are empowered for the same
They are motivated as they focus towards outcome rather then output"
Thangaraja,"Lives in Chennai, Tamil Nadu, India",2018,1,"I will use scrum instead of agile as scrum is the subset of agile and it’s easy to understand
A proper scrum team consists of developer,product owner and scrum master. As per scrum, the developer denotes the person who is involved in building the product. So it includes software developer, tester. Product owner is the own who is reposnsible of maintaining backlog items, priotize stories. Scrum master is the one who helps the team for better interaction, resolve conflicts.
So why lot of developers dislike Agile?
Lack of communication. As per agile manifesto, business people and developers must work together in all the phases. Business people puts all their effort without consulting with developers prepare the requirements and send to developer. The developer rejects or asks for extra time to build it due to technical difficulties. Business people do not accept it as they have spent lots of time and effort. So this will be escalated to next level. Most of the time business people win because the company always put business first as they bring money.
Most of the business people either do not or don’t want to understand technology. So most of the time they underestimate the effort required for building something and it directly hits the developers. This is again due to lack of communication.
Misusing the principle and change requirements frequently . Agile is meant for welcoming change requirements. This is one of the wildly misunderstood principle and business people take it as granted. Business team comes with the feature, developer builds it in sprint-3 and then in sprint-7, the business team realize that this could have been done in another way. So the completed feature will be removed and build again in sprint-8. Same will continue multiple times.
Project managers: There is no concept of having project managers for agile. But sadly most of the companies still have. Due to inclusion of managers they except status for everything. Most of the time this will lead to frustrations. This point is applicable for all not just for developers.
Not giving importance to user stories related to technical improvements: Business people expects a feature to be released in every sprint. This will not always happen. Every software product needs technical advancement. Business team don’t understand this.
Not giving importance to testing/documentations: Testing and documentation are equally as important as development and these must be done along with development parallely. This will save lots of time during maintanence phase. But developers don’t get enough time to do this and when problem occurs they will be questioned for not doing it.
Its definitely not the agile which developer dislike but it’s the way the agile is misused."
Mingzhu He,User Researcher at Quora (company) (2018–present),2018,2,"In theory, Agile is Iterative Improvement as applied to software development. It is meant to shorten the ideation to product life cycle to reduce risks and to increase a product’s adaptability to balance changes in business, user, and/or technical requirements.
In practice, Agile is a set of rituals designed by a team for a team within their context to collaborate efficiently to reach effective continuous improvement of a software product.
In my limited experience, the varied ways in which practical implementation and theoretical ideals diverge are what cause headaches on Agile teams. Some examples include:
Rituals being too rigid or too undisciplined
Communication breakdowns
Unbalance-able constraints (business, technical, and/or user)
Lack of true Iterative Improvement mindset
Number 4 being the root of the issue.
So while Agile is the keyword that encompasses both the Theory and Practice of Iterative Improvement and each team can interpret it differently in context and will all meet challenges along the way, the ones with a growth mindset open for collaboration and Iterative Improvement of both the product and process are the most sustainable ones in the long run.
P.S.Iterative Improvement is not unique to software, it has been and is becoming a universally embraced concept in manufacture (Toyota), hardware, management, design (Design Thinking) and even education (Improvement Science) as it follows the natural progression of change and innovation."
Eljay Love-Jensen,nerd,2017,1,"These are two good questions, and the answers have been high quality awesome!
> In a nutshell, why do a lot of developers dislike Agile?
Because Agile™ is unrelated to agile as per the Manifesto for Agile Software Development.
> What are better project management paradigms alternatives?
Umm, agile isn’t a project management paradigm. I’m going to use Scrum as that’s the only agile-based methodology I have any familiarity with.
Scrum, as originally conceived, is both a project management paradigm and software engineering best practices. Somewhere along the way, the software engineering best practices got lost from Scrum.
Scrum used to have a very low barrier to entry. It used to be super-easy to do. Kelly Waters describes how to adapt to Scrum in his “How To Implement Scrum in 10 Easy Steps”. <How To Implement Scrum in 10 Easy Steps> But since then (that was 2007), it seems that Scrum has morphed into a bizarro anti-agile version of its former self.
I’m not sure why it has evolved that way, but I’m pretty sure that contributes to developers disliking Agile™. (On this forum itself, some lucky developers have had great experiences with Scrum. So it doesn’t have to be bad.)
I think the thing to keep in mind is that agile is a set of four value and twelve principles. To me, that makes agile a cultural thing, not a project management paradigm thing.
If the individual developer, the team, even the company has not embraced and internalized those values & principles… well, in the words of Mr. Mackey “You’re going to have a bad day.”
That’s when bizarro-based Scrum has flipped/twisted all four values and twelve principles of the Manifesto for Agile Software Development.
Exercise for the reader: rate each agile value & principle on a scale from “meh” (1 star) to “yay!” (5 stars) for how your team is doing. Those concerns should be front and center for your sprint retrospective.
And if the team, or management, or the company is antithetical to those values & principles, it will undermine the methodology due to corporate antibodies. Even if the methodology is, ostensibly, agile-based.
My 2¢. YMMV."
Debbie Madden,www.stride.build Agile Software Development Consultancy,2017,3,"I’ve been running Agile consulting shops in NYC for 14 years. I’ve personally talked with thousands of developers across hundreds of companies about this exact topic. Here’s my take:
Developers value empowerment and autonomy. When a stakeholder uses Agile as a framework to remove empowerment and autonomy from the developers, developers get angry. This leads to the perception that developers don’t like Agile. But, what they actually dislike is the lack of autonomy. In fact, when implemented correctly, Agile is the most empowering framework out there.
Agile is too often set up to fail. Let’s say you have a project that’s at risk of going over budget. Someone has the idea to use Agile to solve this problem. And then chaos ensues. Agile isn’t a magic bullet that’s going to take a failing project and right the ship overnight. It’s a set of practices that, when used correctly over time, lead to high functioning teams that deliver on a predictable cadence with predictable quality. It’s not a life raft.
It’s not a replacement for communication across teams. As companies scale, the biggest roadblock to growth is communication. People try to lean on Agile at scale to solve things, but at the end of the day, the humans on the teams are responsible for effective team communication.
So, I’ll push back on this question and say that in my opinion, it’s rare to find a developer that truly dislikes the core of Agile. But rather, it’s the extra external stuff that often tags along under the “Agile will fix things” umbrella that developers dislike."
Dipankar Das,Software Engineer (2016–present),2017,1,"Programming is largely a creative job. Unless it is for fixing simple bugs or extending or repeating existing features or assembling libraries to produce a solution, programming could be as creative as writing a poetry or painting a canvas.
Early stage development has been always agile. Even when people went crazy about waterfall and other methodologies, programmers would have been developing in agile mode. While management and designers did the talking, programmers kept building and rebuilding the POC over and over.
Adoption of “Agile process” as others have mentioned is rooted in mistrust. While some folks are excited to embrace anything that is trending, short sighted management is looking to reap benefits from, “daily roll call”, “micro management” and “release weekends”. People who cheer “anything that is trending” would keep telling others that they are not doing agile the right way. It is like the denial of the religious extremists, not following the holy book the right way.
Software development is still the most widely practiced creative and financially rewarding profession. Unlike construction of a house or bridge you do not need a solid design or framework to start software development. The core architecture of a software can be redesigned and rebuilt with little overhead and with very little casualty.
The literal “Agile Process” every creative developer would love to practice. The corporate branded “Agile Process” is another word for “Micro Management”."
Atif Shahab Qureshi,Worked at Tradekey,2018,2,"Although there are many advantages of agile software development but there are few disadvantages too. Following are the few disadvantages of agile software development:
1. Less predictability.
For some software deliverables, developers cannot quantify the full extent of required efforts. This is especially true in the beginning of the development life cycle on larger products. Teams new to the agile methodology fear these unknowns. This fear drives frustration, poor practices, and often poor decisions. The more regimented, waterfall process makes it easy to quantify the effort, time, and cost of delivering the final product.
2. More time and commitment.
Testers, customers, and developers must constantly interact with each other. This involves numerous face-to-face conversations, as they are the best form of communication. All involved in the project must have close cooperation. Daily users need to be available for prompt testing and sign off on each phase so developers can mark it off as complete before moving on to the next feature. This might ensure the product meets user expectations, but is onerous and time-consuming. This demands more time and energy of everyone involved.
3. Greater demands on developers and clients.
These principles require close collaboration and extensive user involvement. Though it is an engaging and rewarding system, it demands a big commitment for the entirety of the project to ensure success. Clients must go through training to aid in product development. Any lack of client participation will impact software quality and success. It also reflects poorly on the development company.
4. Lack of necessary documentation.
Because requirements for software are clarified just in time for development, documentation is less detailed. This means that when new members join the team, they do not know the details about certain features or how they need to perform. This creates misunderstandings and difficulties.
5. Project easily falls off track.
This method requires very little planning to get started, and assumes the consumer's needs are ever changing. With so little to go on, you can see how this could limit the agile model. Then, if a consumer's feedback or communications are not clear, a developer might focus on the wrong areas of development. It also has the potential for scope creep, and an ever-changing product becomes an ever-lasting one.
Source: The Massive Downside of Agile Software Development
Do you agree with my points Harold Treen"
Anoop Aryal,"Jack of all, master of one",2016,1,"I’ve seen Agile projects crash and burn pretty horribly. The leaders involved were from companies that are at the forefront of Agile (let’s leave names out..).
The root cause were two things:
Agile inevitably searches for and finds local minima/maxima. If you think of it as an optimization process, it’s uncannily like a gradient descent algorithm. With the pitfall that it’ll find a local minima/maxima. The case I have in mind was failing in a horrible way. But the team was stuck iterating on incremental improvements - thereby getting stuck in a local minima.
Velocity. WTF is that? It’s far worse than LOC. Upper echelon MBA types stuck to it like glue. It was a quantifiable figure they could stick into excel. They didn’t know what it meant. But it was a number!! Meanwhile, senior devs assigned higher points to stories they get assigned to. Politics galore."
Jerry Zornes,Software developer mostly middle tier objects,2016,1,"Agile invariably devolves into measuring velocity by management. I've never met an agile apologist who when faced with someone's agile failure didn't brush it aside as ‘that's not real agile’. Even this thread is full of this type of response. If they are right evidence suggests a methodology with a high propensity for failure. If they are wrong and developers complaints are valid then the negatives represent such a load that agile being a net improvement become questionable.
That's not too say we should throw out the baby with the bath water. Short cycles and smaller units of work certainly benefit developers and management."
Pepijn van de Vorst,Studied Software Engineering and > 20 years experience in diverse roles,2016,3,"I'm not aware that ""a lot"" of developers dislike agile.
The developers I've spoken with about this subject mention:
* Often in organisation that have implemented agile, there are lot of meetings
They have the idea that they would be far more productive without those meetings
* Some developers don't like a shared (team) responsibility for quality
They like the divide between developers creating code and testers testing it
* Some developers don't like the extra tasks they are expected to do from
an agile / DevOps perspective and would rather be programming all day
But most developers I know love agile because of the freedom and responsibility of the team to determine the way to create the solution and to facilitate themselves with effective tooling and processes."
Anonymous,8y,2016,1,"I am a Software Product Manager myself, and I was a developer earlier… I will answer this question in a much abstract way than the others did… they provided fine grained answers which I agree also.
The biggest problem I have observed so far is the lack of the “agile development methodology” KNOWLEDGE by the management/business people themselves, and trying to apply it after watching a 10 minutes SCRUM or KANBAN video on youtube.
the sad part is they mix between (iterative/reactive/experimental) business idea/goal generation and development.
In reality the End Goal / Product Vision should be clear for the developers (not the details towards the goal)… but specifically with the rise of the startup era, and glorification of the MVP approach lot of people are trying to apply it in every single project regardless of the various parameters of individual projects.
change of the business vision or the end goal is normal (and in most cases if it doesn’t occur means you are not monitoring the use of your product enough or at all).
BUT at each point in time, devs should know where are they heading to.
A whole industry and 10s of institutions are working on employee motivation and gamification blablabla…. and companies are purchasing systems, hiring feel good managers, creating awesome offices with lots of entertainment… YET FORGETTING THE MOST IMPORTANT intrinsic MOTIVATIONAL DRIVE (THE GOAL).
sorry if I mistyped or have some mistake, just wanted to reply quickly before a Daily Scrum..
Cheers"
Sam Northrop,Human at Earth (planet),2016,2,"The main benefit to Agile is the ability to get a service that meets 80% of the markets needs out the door much faster than would be possible in a traditional waterfall approach. With today’s pace of change, the detailed requirements you put together with traditional waterfall development will be obsolete before the product is out the door. With an agile approach, requirements are more easily modified or replaced to reflect changing market demands. A perfectly developed product whose market has moved is a lot less valuable than one that needs a few additional features in a subsequent release but is otherwise market-ready.
Used as a crutch, agile is a way for business partners to avoid putting real thought into requirements. Garbage In-Garbage Out still applies. If your business partners don’t know what they want/need, or if they don’t invest the time and effort to properly document them, then agile is just a cop-out. The best sailors can’t complete the trip if the captain hasn’t taken the time to figure out where they need to be going.
I have worked on some really good agile projects and some that really sucked. The primary difference in the two is in the business side’s commitment and compliance to the process. A successful agile project requires more time and dedication from the business partners than waterfall. With waterfall, business can concentrate their efforts up front and hopefully, during user acceptance testing. With agile, they need to be active and present for the duration. Not all are able/willing to provide that.
And, to be clear, I am on the business side."
Keith Ensign,"Lives in Wellington, New Zealand",2017,2,"Agile or Scrum cannot fix a bad management culture of CYA, lack of transparency and fear of failure.
Scrum estimates are based on complexity. If the user story is discovered to be more complex during the sprint, tasks or stories are broken off to handle the discovered complexity and the original story carries over to the next sprint.
Burn down does not have to be 100% complete at the end of each sprint. It is an ultimate goal that is strived for as a team manages complexity more efficiently and breaks down features into realistic user stories. Velocity should be consistent, but many outside factors can influence that too.
Minimal Viable Product. This is always the goal.
Accountability and communication ≠ micromanagement. Facts are facts and they cannot be denied. Discovering unaccounted complexity and addressing it is not failure or any form of poor reflection on anyone’s skills. Deal with the complexity and learn from the experience. This will most likely only improve complexity estimates on any task as the team moves forward.
Standups are to be 10–15 minutes. What did you do yesterday, are you blocked, do you need help and if not, what story/task/bug are you going to work on today. This should literally take 1 minute. If you have more complex issues to discuss with other people, do it after the scrum and with only the people that need to be involved.
The most important lessons I have learned over the last 20 years:
If your culture sucks, everything will suck.
Emotional Intelligence is more important than IQ. Maturity is the most important aspect of anyone’s personality and behaviors.
Facts always trump opinion.
Constantly strive to improve your technical knowledge and skills. Learning never stops.
Not only are you accountable to your team, your management, and your company, you are most importantly accountable to yourself.
If you cannot handle being a professional because of meetings, accountability and transparency, you have much larger problems on your hands. Remember, fact trumps opinion and honest communication is always best. If your time is being compromised by meetings and other requests, your project manager NEEDS to know. If you cannot do any actual development work, communicate it. They are as responsible for getting things done as you are.
So again, if your org and its culture are broken, scrum is not going to fix it and in fact it will only surface the dysfunction. If in fact you are truly unhappy where your work, find a better job with better people. You’re in control of your quality of life and you deserve to be happy. Don’t suffer in Sucksville."
Arun J,Studied Software Engineering,2016,1,"It shows the bottlenecks in some teams. Who is not contributing, idling etc etc. Most contributing and teamplayer developers dont mind agile as far as I have seen."
Andrew,I have been programming since the early 80's. I have forgot tons of languages.,2016,0,"I wasn’t aware that a lot of developers disliked Agile. I do think most engineers think it is annoying when SDLC is done poorly. I am not sure engineers would be so silly to think any one methodology is particularly responsible for a bad SDLC implementation.
All engineers know that some kind of SDLC methodology must exist. Which one is used is not really important. All of them to some varying degrees have vices and virtues.
I personally think Agile stresses feedback loops with customers which is a nice. It is a little lightweight on holistic thinking. I am responsible for holistic thinking and I do not need a process to do that for me so that does not bother me.
All SDLC methodologies have cultural rituals associated with them that can be silly when taken to an extreme. Agile is no different.
What I do think has really changed since the 80’s is how many companies ...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Andrew
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
Josh Donnelly,"Originally Answered: In a nutshell, why do a lot of developers dislike Agile?",2016,1,"I imagine the same reason why people dislike other management styles…because of the people doing it. Most management structures can have some success if the humans behind them are effective leaders. I don’t have much experience with the process, but have a lot of experience with poor leadership and my guess is that some grasp too strongly to the idea of Agile as being “fast” or “quick” like the standard word is defined, rather than the project being segmented into smaller (quicker) tasks which provide more flexibility to the project."
Mazen Hassan,Author has 190 answers and 876.9K answer views,2016,0,"AGILE…I truly hate that word because of how much misuse is associated with it.
As a person who spent 20+ years in high-tech, I find no clear value of how agile methodology is used in most companies today."
Dennis Decoene,Python and php developer since wayback,2016,0,"Funny thing, I was a minute ago watching Agile is Dead • Pragmatic Dave Thomas in which he explains why he feels Agile has been misinterpreted. Very much worth watching!"
Johnathan J Hayter,Sr. Full-Stack Engineer at CoStar Group (company) (2017–present),2016,1,"I don’t dislike/hate agile; I do hate/dislike how it is implemented or worse interpreted by a company by tech leads and management.
Agile promotes a highly cohesive collaborative atmosphere which often gets abused ad nauseum to come up to me to ask me questions or request features that would de-rail sprints. Often nicknamed hotfixes, production issues or Executive Priorities these leaks immediate begin draining the defined plan which is not re-evaluated because people are already very ingrained to not do so.
This also segregates a section for programmers that are just plainly not good at articulation yet they are forced to strengthen a weakness that yields practically nothing at behest of the manifesto.
This is where I feel the tech lead is anemic. It is absolutely great to have a ubiquitous language with the business. It is also stellar to be able to draw up summaries with your team but as far as I am concerned it should stop there. Having 4 programmers per tech lead and having the tech leads summarize up to the principal developer which inter turn rolls up to the software director streamlines the entire process with natural aggregations. I have seen this very seldomly in my career and I have personally used it with great success ie being 6 months ahead of a deadline."
Anonymous,8y,2016,1,"From what I’ve seen of it, I have found myself disliking the mismatch between the Agile cycle and the let’s call it the Off-Agile cycle.
By way of example, suppose you’re meant to put 60% of your time into Agile cycle work, and the remaining 40% of your time into the rest of your work that doesn’t fit into the Agile projects (ie: 40% Off-Agile projects). Credit where credit is due: this would probably work out really tremendously well if the managers who task out your time naturally have that same 60%-40% split. But you know that “Give a Moose a Muffin” book from way back in the day? I’ve been noticing that managers tend to be quite similar to the moose. Again, credit where credit is due, they haven’t gone and done anything terribly stupid like put 100% of my time into Agile projects, and then a second 100% of my time into Off-Agile projects. It’s been more like 80% Agile, with a supplementary 70% Off-Agile. Not being a mathematician, I can’t really say for sure if that all adds up, but I have been looking at it for a couple of months, and it almost seems like it adds up to more than 100% of my time. Combined with the related details that Agile tends to be used for software development, and that software developers tend to be bossed around about as much as everyone else (ie: quite a lot), that really tends to add up to either a high workload, or high stress, or both.
From where I’m standing, Agile seems to have its major application in “giving management an excuse to think that they’re being more efficient, while really just increasing the demands.” Some day, when they manage to genetically engineer an actually reasonable manager, then I could imagine how Agile would be more efficient. Until then, I’m out of ideas. I’m not a fan of Agile, because it seems to make things worse; but I’m also not a fan of any system that isn’t Agile, because they all seem to make things worse. Almost seems like it’s just the managers who are getting worse, but who can say for certain?"
Naveen Kumar Singh,Confused agile coach but excellent software developer.,2016,0,"I haven’t witnessed it personally so difficult to say why developers hate agile. I think majority of developers like it.
Below are some situations when developers may hate agile.
When management use agile for micromanagement
When management wish developers embrace agility but management not ready to be agile
When developers have fear of getting exposed
When commitment means meeting deadlines"
Clifford Oravec,Author has 97 answers and 171.1K answer views,2016,7,"Wow, this is quite the active question (big surprise, right?)
Like most in the industry, I’ve had my own observations and opinions on the polarity of this subject.
Recently, The Harvard Business Review published an article entitled “Embracing Agile” that advocates the adoption of Agile processes (specifically Scrum) in business as a whole.
Having seen Agile and Scrum both succeed and fail at different organizations throughout my career, I decided to write a response piece detailing the opinions of leading Agile experts and regular Agile practitioners in order to educate readers of the HBR article about the potential pitfalls of implementing Agile/Scrum and how it might not be appropriate for all organizations.
You can find my (fairly thorough) article here: Before “Embracing Agile”, have a chat with its exes.
If you’re interested in the original HBR article, I link out to it from my article as well.
Hopefully this adds some value to the overall conversation.
Best of luck."
Robert Evans,"Lifelong interest in philosophy of science, esp evolution",2017,1,"I don't believe that developers dislike Agile more than, say, waterfall. But what I really don't understand is why management likes it. It give less predictability for work more than a couple of months out. ""When are you going to deliver feature X?"" I have no idea. We haven't analyzed the requirements or the technology. It might take 10 man months, or a 100. (Cf McConnell's classic ""Software Estimation""). What it does do is tell you how you are progressing. But to calculate velocity you need to make careful records of how much engineering time is consumed per story point (or whatever), and that's not always easy to do."
Devaroop Bhattacharya,Practicing it for years,2017,0,"tl;dr
“Because people don’t follow it the way it should be followed”
Agile is a method of management and not micro management. Almost every 2nd company abuses it. I have been a Agile Practitioner at Equal Experts for years now and never disliked it because we do it right. With regards to delivery - We do it the best way possible along with keeping up with latest technologies in the market.
For the developers who dislike it - Speak up if things are incorrect, after all, that’s what Agile is."
Will Stern,"Founder LearnCode.academy, Software Architect at HigherEducation.",2017,2,"For what it’s worth, I’ve yet to be on a team where Agile didn’t make things drastically more enjoyable for developers.
The only times I haven’t enjoyed agile is when the company was extremely “enterprisey” and everything was so serious that development wasn’t fun. (I mean, c’mon, we get to play on computers all day…this is fun by default! If it’s not fun, it’s cause somebody messed it up!)
If someone complains that agile is making things less enjoyable, I tend to think that it’s actually management making things less enjoyable and I’d HATE to see how miserable that management would make a waterfall paradigm feel. I picture using a power drill instead of a screwdriver, but management standing over your shoulder making sure your drill angle is perfect, watching your thumb placement and making sure your RPM’s don’t go over x or under y.
Agile, in itself, is designed to make developer life more enjoyable, while creating a quality product with less bugs."
Jeff Cactii,Software Developer (1980–present),2017,0,"For someone like me with 30+ years experience as a Software Developer, Agile is just another bunch of “new age crap” to refer to the same old way of programming since the 80’s. It’s nothing new really, just a method of Managers empowering themselves with new buzz words to justify their jobs. A lot of us have been doing Agile since the 80’s.
For public service/large companies that have a plethora ...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Jeff Cactii
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
Glynn Farrow,Former Software Architect at IBM Singapore (company) (2001–2012),2017,0,"Because in large corporations management have hijacked Agile - which was a developer inspired idea originally - and perverted it to produce management statistics to, among other things, push developers into longer hours and tighter schedules."
Radek Baranowski,Developer (2013–present),2017,0,"I can confirm Agile works out well for either developers and the rest only when the whole organization embraces Agile as a way to go. And not only product development team (devs, qa, ba, POs, PMOs) but also, and primarily, the client. You can manifest being agile, but when your business client (internal or external) denies to follow this path, at least to some/large degree, you’re doomed.
In a project which I’m in at the moment, this change of paradigm was fully adopted and accepted from Board Of Directors level, downwards to scrum teams, all along. It has succesfully delivered one of the biggest insurance systems in Europe over the course of 5 years. So Agile can work, even on a big scale, if only _everyone_ accepts the rules of the game.
Now, to why developers might get frustrated. It might happen, and happens, at the point when the agility of organization gives so much confidence in themselves, that they accept any, or most of the changes. As an dev/engineer you need some time to reckon around the piece of system you are expected to modify. If the change of subject happens too often, well, you just find yourself struggling while unveiling complexity of the solution in this very given code package. This might be reduced by following consistent design patterns and clean coding, to some extent, but there will never be a system perfect at this account, and I imagine this might be one of the hate-factors for developers."
Jeff Williams,Indepent Leadership and Operations Consultant at Williams Consulting (2009–present),2017,0,"It will all come down to how the efforts are managed and communicated. Dissatisfaction are products of perception and expectation. Often these are unrealistic and need to be foreseen and then managed properly.
The basic tools of Agile methodology are simply that, tools. How those tools are utilized and how flexible you are with meeting true needs is key.
I approach all projects from a hybrid mindset. I'll employ whatever it takes to make things happen.
If the GOAL is to produce something functional and valuable under the constraints of the business then use whatever tool you need to gain satisfaction."
Jacky Jackson,Software Engineer,2017,0,"I have been working in an agile environment for two years now. Agile says something like they dislike documents that are never read ….. if I had a quarter for every time I wanted to shout: ‘'Write in down!!!’' I would be a millionaire by now. And it says it prefers inter human interaction above something else.. Cannot remember what even. I would give half of my kingdom for a few hours of silence to work in. I sincerely loath it. But when you dare to criticize it, it is you who are the bad programmer, or have not understood it. Like you are an apostate of a certain religion. I hate it so much, you cannot imagine."
Leonid Shepetovsky,SW Technical Manager and Cloud Architect at Cisco (company) (2018–present),2018,0,"This is a great question! It is actually much greater than someone can think. And so many different and correct answers I see here. I have concerned by this question for many years and may say that the answer can’t be short enough to write it here.
So for anyone who interested in that, I may recommend some links to youtube lectures which were made by people who are directly related to this methodology of Agile SW Development. I found them very exciting, diving deep to the point and really fun to listen. Personally, I agree with every word said there. Enjoy:
GOTO 2015 • Agile is Dead • Pragmatic Dave Thomas
The death of Agile - Allen Holub
#NoEstimates (Allen Holub)"
Robert Garrett,"40+ years, from applications to operating systems.",2018,2,"It’s not that I dislike Agile. In fact I am a big fan of and love the concepts and principles behind Agile: Make small, incremental, contextual changes really quickly that can be both implemented quickly and simply and also likewise backed out. That is everything about the real idea of Agile. There’s nothing more to it than that. It really is that simple. What I positively HATE is the way that companies have gone about implementing the monstrosity that they claim is “Agile” when in reality it is anything but. They’ve gone head over heels with all the trappings and terminology accompanied by endless worthless bureacracy. Daily tag up meetings, scrum, kan ban, epics, stories, projects, issues, swim lanes, run rates, and so on and so on and so on. Morons who have no talent at all for anything except building mountains of meaningless time-wasting crap have gravitated to “Agile” like cockroaches to a mountain of sugar cane. The only place these people might be more at home would be working in some equally useless government agency writing reams of regulations and other equally valueless emptiness. It’s actually funny, in a sad sort of way."
Corey Grusden,Upvote,2019,1,"A lot of developers dislike this and other processes because they simply don’t understand whats happening above them. If developers had an idea for a side-project and had to use their own money to hire a developer the world would be a better place. Developers would know exactly why these tools are in place: because *most* developers go down rabbit-holes and end up spending time on the wrong things. I can prove it, I was one of them until I built a consulting agency and had to manage developers."
Keith Kosmicki,Owner / Computer Consultant at Kosmic eKonsulting (2009–present),2019,0,"Fuck Agile, SOAP and Water! Just get the fucking job done! Who gives a shit about these so called management specs, if you are a good programmer, you don't need these bullshit guidelines."
Aidan Millar-Powell,CTO (2015–present),2019,1,"People dislike it for several reasons:
It’s idealic, not realistic.
It is basically a way for management to perform self-felatio with little to no benefit to anyone
It’s a process built by developers for managment
It’s yet another phase of people getting overly excited about process management, when really developing the management of software should be simple and pragmatic.
The problem with most process management frameworks is that the people designing them, often get so caught up in the management framework itself, that they leave very little room for the actual work to get done. (not referring to the creators of agile manifesto, rather people implementing process management in general).
The other issue with agile (or at least the way it’s being adopted) is that people don’t understand software development. That is a problem not easily solved. Yet process frameworks like this allow people to build a superficial bridge into the dev world and cause all kinds of hell.
This is the manifesto I follow:
Really think about your design, take your time here and give yourself lots of options. Play around with some ideas and see what works, make some rough prototypes to practice the development of this particular product. Then once you have a direction, build and make features. Fix bugs. Automate. Document. Do it well. Do minor releases and major releases when you feel the product is ready. Enable conversation with management and get really good at using analogies. Hunt down customers for feedback. Literally hunt them. Like, literally. I’m not joking, stalk them and subtly strike up a convo at their lunch time coffee hut. Seriously. Actually not even kidding. If you really have to: code faster and compromise on quality, but ONLY if you can and will assign time to refactor later.
If people are good at their job and things work then there is little risk here."
A.karim Amin,Studied at Alexandria University,2019,0,"According to my experiance, many developers dislike agile because it was not performed correctly in their companies. The majority of complains i heard were :
Too many meetings.
Sometimes Too short sprints (Some companies are strict on one week sprint) not allowing teams to ship any thing with quality after each sprint.
It works fine in small to medium size projects but it gives no time for appropriate architecting , designing , system analysis , planning in big projects.
Customers/Managers would love the early and periodic releases that Agile offers but they are not fully understanding other aspects of Agile (such as time boxing, points, early feedback, pear programming ,Agile contracts …etc) and this always lead to a mix of things rather than adopting a certain Agile methodology on everything in the project.
Sometimes there is no enough envolvment of the customer and his inputs / feedback and other assumptions / conditions that Agile has ."
Anonymous,5y,2019,2,"What is Agile ?
It is a tool of the management to get more juice out of already bone dried engineers. Let me explain
Does it bring anything new to table ? No. Does it improve timelines, reduce defects, or enrich people working on it. Answer depends on whom you ask. So what does it achieve
a. It helps management micromanage developers.
b. Pressure is constantly on for every two week deliveries so quality suffers
c. Why do we have gears in your car. Because you cannot drive on top speed all the time. What is true for machine is true for humans. Agile expects workers to run in fastest gear all the time. They want you to sprint, sprint again and again. Result, high wear and tear then collapse.
d. All management cares is the date so that they can make more money. So now do you get why your management is pushing so hard for Agile.
They want to be Scrum masters and make engineers as slaves.
e. It is demoralising ! It all sounds great in begining but instead of being beat up once every six months now I get beat up every two week.
f. Have you seen many instances of poor quality of delivery. It may not be people, it is Agile ! Think again. Agile focuses on micromanaging, modular chunks. It misses the bigger picture, the system regressions, enterprise architecture, designs.
Agile is a loose and often abused concept. You have to build safeguards else risk failing miserably in long term."
Lalit Patel,"PhD Physics, MBA",2019,0,"A lot of developers may be disliking Agile because:
Nothing is perfect. Agile has its shortcomings.
Disliking is easier than liking.
An alternative to Agile can be:
TOPIC Management
which is Management by TOPIC
Tools
Objectives
Priorities
Induction
Collaboration
(Easier said than done!)"
Dino Dini,40 years experience in programming from assembler to C++/C#,2019,0,"All too often what is focused on is the vertical slice. Meanwhile, back from la-la-land, engineers are busy with the horizontal slab that is required to ensure that the project as a whole does not fall over. The horizontal slab is more important than flimsy vertical slices, but agile has no consideration for them at all. At least this is the way it becomes when agile becomes nothing more than a management tool for beating developers with...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Dino Dini
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
The Big Flatino,GM (2013–present),2019,0,"The question is not really posed correctly. I see it all the time so I ask them which principle or value are they opposed to. Delivering software regularly? Constant attention to technical excellence? Taking steps to improve? Working in a sustainable fashion?
Mostly they are referring to “dark scrum"" which is simply micro-management with a $200 agile paintjob."
Jason Westbrook,Senor Software Engineer (2000–present),2019,0,"Why do a lot of developers dislike Agile?
- In my experience, Agile seems to purport that it gives the power to the dev teams, that its ‘people over process’ and ‘hey devs, you have a voice now that management has to listen to’.
When in reality, Management ends up pitting one team against the other. Using metrics like ‘Team A does X number of story points, while Team B does X-Y number of story points’. All the while ignoring the fact, that each team determines story points differently."
Roar Test,Upvote,2020,0,"Developers do not dislike Agile way of working because it is not restrained to a tool, methodology or framework, however, it is important to understand that using scrum tools and project management tools restrict the mindset which is the Agile way of working."
XS Chen,Digital Product Delivery (startup and enterprise settings),2020,0,"There are challenges with textbook Agile in some organizational settings, and forcing Agile in such situations will get people (incl. developers) burned and hating it.
One situation is, many (most) corporate IT organizations, especially with significant in-house developers and large number of legacy business critical applications. The IT team (and many individual developers) often plays multiple roles, production support / application management service, small enhancements and repairs, and sometimes as SME to support major initiatives (either new-build, or changes), also impact analysis & operation planning, etc. The expectation for them to be fully immersed in Agile delivery in a small and dedicated team setting, will certainly cause great deal of headache and juggling.
If the IT organizations are structured in a way with separate teams for operation / AMS and Product / Project delivery functions, Agile delivery may not be that disruptive, and is likely more receptive.
A variation or precursor of Agile can be as effective is JAD (Joint Application Development), where Client (PO), Business Analyst, Designer, Developer are short-circuited for instantaneous feedback loop and most effective communication."
Andy Wootton,Director at System Composition Ltd. (1985–present),2020,0,"There are several common reasons:
They don’t know what they are doing.
They do know what they are doing but it isn’t actually agile.
They are doing agile software development but they prefer to work a different way: e.g. they don’t like working in a team with other people, they don’t like talking to customers and having to work out what they want from the weird things they say, they don’t have the breadth of technical skills necessary or prefer to specialise on a smaller area of software development.
They may prefer to have a clear hierarchy with a career structure they can climb because they don’t actually want to be a developer. The money looked good but it turns out to be quite hard."
Kenneth Barber,"Indie design and development by night, engineering cat herding by day.",2020,0,"As most commonly implemented, Agile (note the big A) processes tend to pull developers away from the act of development.
Some of the adopted ceremonies and tenets can be exhausting and counter creative especially when put on a hurried, auto repeating loop…
There is a lot of bad Agile out there, and a lot of people in Agile who aren’t developers or product domain experts. These people tend to be rigidly adhering to some COTS Agile process that they became certified in such that they can be part of a company’s agile cadre. Development adjacent, with the appearance of technical contribution but not responsible for implementing the solution.
The better PM paradigm is “little a” agile as specified by the manifesto or what some of us call, “Just enough agile”. Incentivize solution analysis and product development over ceremony and box checking.
I will say that the “continuous” paradigm (CI, CD, etc) that is associated with many Agile processes is the real secret sauce and is worth the weight it adds to your process."
Sidney Smith,Upvote,2020,0,"This is one of my favorite topics to disucss but others have said better. I would like to share my fav articles.
The End of Agile - Kurt Kagle is super funny but drives th point
Agile — Culture first, framework next and process last - I feel like this all the time in my company"
Anonymous,Upvote,2021,0,"What I've seen from experience about Agile proponents and “Scrum certified” teens is that they are too prone to “No true Scottsman fallacy”
Whenever a project is successful: Yay! That's Agile. Horraah!
Whenever a project fails: No! That's not Agile, no way. Developers did it WRONG! They didn't collaborate!
This is dangerous because 1) proponents shows it the characteristics of cult members. 2) Done this way Agile teams turn toxic rapidly."
Aurelio Bautista,Author has 4.8K answers and 996.3K answer views,2022,0,"Because it became the mainstream way of doing things. Developers always dislike things that cannot be discussed. In the 1980 and 1990 we disliked waterfall and v-cycle. Then we received Agile with enthusiasm and hope but industry denatured the original thought: not hierarchical, open to change and so to adapting after discussion, simple and based on trust. The better alternative is to rewind to the original Agile values, values not injonctions, methods or obligations. Make the teams mature, trust them and give them the greatest possible autonomy."
Acko Manah,"SB in Computer Science, Massachusetts Institute of Technology",2023,0,"Notice: The company as NOT HP. I have the highest respect for HP.
Because “Agile” is a pile of nonsense. It wants to replace people with “process”. You are never going to be able to do it.
I was at work in a meeting and dared to say:
“Nothing will replace a dedicated team of talented; hard working and loyal people”.
I got called into Human Resources. Because “somebody” had reported me. I found out it was the VP of engineering! The guy reported me to H.R. The purpose of reports is to protect employees from harassment NOT to shield a VP. He might have just asked me in and talked to me. He was minimum 3 levels above me. Then he fires my director. My director was a brilliant woman. I decided to quit.
The “VP” is now running a “Medical Marijuana” place. Perfect fit"
Muhammad Ali,"M.B.A in Project Management, University of Northampton (Graduated 2017)",2023,0,"Many developers dislike Agile because it is often seen as a way of micromanaging their progress and making them accountable for every step of the project. Agile also requires constant communication and collaboration among the development team, which can be time consuming for developers. As an alternative, Waterfall project management is a more traditional approach that allows developers to focus on the development without having to communicate and collaborate with other team members. Furthermore, Kanban and Scrum project management paradigms can also be used to manage projects without micromanaging developers."
Bob Harwood,"MS in Software Engineering, Rensselaer Polytechnic Institute",2023,0,"TLDR; 1) Many have had bad experience with poorly implemented agile approaches. 2) Saying things that run against the grain brings high ratings in social media. 3) Some people don’t study a topic fully, rather read ideas from influencers and then repeat them. This leads to bad info echoing in the halls of the Internet. Now, for the longer response:
It’s currently in-fashion to bash Agile. There’s lots of reasons (a few valid, most not.) Here’s a sampling:
It hasn’t been implemented well in their company so dev’s got a bad taste. Sadly, this happens too frequently.
A few laggards don’t like change (change IS hard) and are hoping it’ll go away.
Remember the game of telephone where a message is relayed from person to person and becomes horribly mangled? Today’s Agile consultants are typically a long way from the originators so those sitting on the far end of the couch mangle it. (Not all, but a good number.) Rightfully so, people don’t like to be misled, especially when they are paying for the service.
The founders are disgusted with the poor quality of information, practice, and consulting and backed away in the early to mid 2010’s. Dave Thomas, for example, declared agile “dead”. {Some founders have since recanted and now have thier own agile framework.)
TLDR. Some people just want the short version. Agile is subtle; there’s no two paragraph full-on explanation. It takes work, solid enginering skills, trial and error, continuous exploration, study, persistence. Agile is more like learing golf. Golf’s a wonderful game, but you aren’t going to enter the Masters after a weekend outing with your budies. Long-term study isn’t trendy. I’m hoping, like skinny ties, it’ll come back one day.
Competition. Between the Agile Alliance, Scrum Alliance, and Scaled Agile, the market’s pretty locked up. It’s a large and potentially lucrative market, so there’s lots of companies and individuals who will take pot-shots at the big 3. (Not to say the big 3 are perfect…)
Agile gives autonomy but asks for accountability and commitment. A few people like to be anonymous and shirk responsibility like they could in the good ol’ waterfall days. (Thankfully, most aren’t like this; they want autonomy, mastery, purpose, and to be valued for their results and performance.)
Some advanced groups have moved on and evolved past what’s traditional. Companies like Ping An, Haier, and a few practicing Holocracy well are at the agile +1 phase. Some pundits will see that and proclaim that it’s time to move on. Unfortunately, going directly to that point from Waterfall is like asking, “Where’s the layman’s guide to brain surgery?”
A few want to refine or update it. For example, Cliff Berg is often criticizing SAFe and Scrum. He’s in favor of a version called “Agile 2”. Cliff has some good points in Agile 2. He’s also a smart man and understands how Social Networking algorithms operate. That leads to some strongly worded headlines, which if not fully understood could seem like he’s completly anti-agile. (He’s not.)
Agile works. I’ve helped to convert three very large organizations across a 20 year time horizon. (I’m a signatory of the agile manefesto in one of the early pages.) To be successful, you need to take time to understand it and get assistance from knowledgable, experienced consultants. Short cuts, poor understanding, going cheap - those all lead to bad results. I’d be more honest to say, “I messed up our Agile migration.” Most people, unfortunately, will blame the process."
Alex Brown,1y,2023,0,"There are a few reasons why some developers may dislike Agile:
1. Lack of structure: Agile is known for being less structured than other project management methodologies, which can be challenging for developers who prefer a more organized approach.
2. Constant changes: Agile encourages changes throughout the development process, which can be frustrating for developers who want to stick to a plan.
3. Emphasis on collaboration: While collaboration is a key aspect of Agile, some developers prefer to work independently.
That being said, there is no one-size-fits-all project management methodology. Some alternatives to Agile include Waterfall, Lean, and Scrum. Each has its own strengths and weaknesses, and the best approach will depend on the specific needs of the project and team. It's important to experiment with different methodologies and find what works best for your team.
Hope this helps the thought/discussion. Check out this board for additional material:
https://pin.it/4dsXlBp
https://pin.it/4dsXlBp"
Innovation Insighter,Knows English,2023,0,"Many developers dislike Agile because it is often seen as a way for managers to micromanage the development process and put too much emphasis on short-term goals at the expense of long-term development goals. Agile also often requires developers to work in a fast-paced environment that can be stressful and difficult to keep up with. Alternatives to Agile include Waterfall, Kanban, and Scrum. Waterfall is a linear project management process that involves completing tasks in a sequential order. Kanban is a visual project management system that focuses on improving workflow efficiency. Scrum is an iterative and incremental project management process that emphasizes collaboration and feedback."
Raghav Agarwal,Student,2023,0,"Many developers sometimes find Agile a bit frustrating because it can feel chaotic. It's like trying to build a puzzle when the pieces keep changing shape. Agile emphasizes flexibility and quick adaptation, which is great for some projects, but not for all.
Some developers prefer more structured approaches, like Waterfall, because they offer a clear plan from the start. Waterfall divides a project into distinct phases, which can feel more orderly.
Another alternative is Kanban, which focuses on visualizing work and improving flow. It's less about strict deadlines and more about maintaining a steady pace."
Agilemania,Agilemania is to be the Preferred Agile Company and partner.,2024,0,"As a SAFe SPCT and a Professional Coach. Many developers complain about Agile. And around 20% of the developers have a love-hate relationship with Agile.
Some find the adaptability of Agile a bit overwhelming. They're used to a clear plan, like having a recipe for baking a cake. Imagine suddenly being asked to cook without a recipe; that's how it feels for them.
For some quick changes in Agile, it can be challenging.
Imagine you're building a house. While laying the foundation, someone decides, ""Hey, let's add a rooftop garden!"" This sudden change could leave the builders scratching their heads, right? Well, that's how rapid changes in Agile can feel for some developers.
To make it smoother, think of the construction team having daily huddles. They openly discuss any changes in the plan. If someone says, ""Let's add a rooftop garden,"" everyone is in the loop. They discuss how it affects the foundation, the costs, and the timeline. This constant and clear communication helps everyone stay on the same page, making changes more manageable and less stressful for the team.
Now, think of the development team as chefs in a busy kitchen. While preparing a dish, the head chef says, ""Let's spice things up with a new ingredient!"" Instead of feeling pressured, the team embraces it. They see it as a chance to create something even more amazing. They adapt their recipe, learn about new ingredients, and improve their culinary skills along the way.
So, in the world of Agile, when changes pop up, treating them as opportunities for growth and improvement can turn that pressure into a positive force.
I hope you liked the response! :) Please comment on your hurdles when it comes to Agile."
EnigmaExplorer,Apr 12,2024,0,"Agile, a project management methodology characterized by short development cycles and a focus on adaptability and customer satisfaction, has seen widespread adoption across various industries. However, it has also faced criticism and pushback from developers and project managers alike. One core reason for this dissatisfaction lies in the misapplication and superficial implementation of Agile principles, often referred to as ""Agile in name only."" Teams may adopt Agile terminology and tools without fully committing to or understanding its philosophy, leading to processes that are neither truly Agile nor effective. This half-hearted adoption can result in increased pressure, confusion, and a lack of clear direction for the team, undermining the very benefits Agile aims to provide.
Furthermore, Agile's emphasis on continuous delivery and adaptability can sometimes translate to a perceived lack of stability and predictability in the development process. Developers often find themselves in a cycle of never-ending sprints, where the scope and goals can shift rapidly, leading to burnout and frustration. This relentless pace and fluidity can detract from the quality of work, as the pressure to deliver in short cycles may compromise thorough testing and thoughtful development. The emphasis on immediate customer feedback, while beneficial for product alignment with user needs, can also lead to scope creep and difficulties in managing expectations and workload.
Moreover, Agile's focus on collaboration and frequent communication is not universally fitting for all personalities and work styles. Some developers prefer to work in a more solitary manner, finding the constant meetings and discussions inherent in many Agile frameworks to be disruptive and inefficient. This mismatch between individual work preferences and the demands of Agile methodologies can lead to decreased job satisfaction and productivity.
In response to these challenges, several alternative project management paradigms have gained traction. One such approach is the Waterfall model, which is more linear and sequential, allowing for detailed planning and more predictable timelines. While less flexible, it can provide the structure and stability that some projects and developers prefer. Another alternative is the Kanban system, which focuses on visualizing work, limiting work in progress, and optimizing the flow of tasks. Kanban encourages continuous improvement without the pressure of sprints, making it a more flexible and less intensive option for teams looking for an Agile-like approach with fewer constraints.
Finally, the Lean methodology, with its emphasis on eliminating waste and optimizing efficiency, offers a strategic framework that can complement or substitute Agile practices. Lean focuses on delivering value through understanding customer needs and streamlining processes, which can help teams achieve high-quality results without the drawbacks of sprint-based pressures. Each of these alternatives, along with a thoughtful consideration of team dynamics and project requirements, can provide a viable path for those seeking different solutions to project management challenges."
Wayne Uejio,"computer programmer/mathematician, system architecture, system architect,",2016,0,Bad implementation and people assuming process means good systems. Let me say this: good programmers/sw engineers do not like this. Bad ones cling to this.
Cynthia Avishegnath,Software janitor,2016,12,"Because …
developers would have no more excuses going on excursions mucking around with their development because now they would have clear, obvious and achievable goals to achieve.
managers who have no idea about agile think it is an efficient way to micromanage their subjects.
developers did not use companion frameworks like UML to provide them with a clear and achievable goals or with means and alerts to quickly backout from an unachieveable goal.
developers do not believe in companion frameworks like test-validated development. Or that they do not understand how such a process works in their favour.
developers do not practice code freeze and versioning.
developers will not use Maven-mentality to code freeze their work, but prefer to have 200 projects concurrently active in their IDEs managed thro the defective framework called OSGI.
OSGI is a means to efficiently allow developers to practice bad habits efficiently.
managers do not believe in backing out of unachieveable goals, hence pressurizing developers to achieve them - making the development atmosphere rancid and unpleasant.
“full-cycle” long-term waterfall or pretend-waterfall “methodologies” allow people to hide their failures which they do not want to believe are failures.
agile exposes failures and the obvious need to abandon too quickly, and people prefer development cycles that provide them with reasonable excuses to continue banging their heads against unachieveable goals.
agile is a means to fit the available resources to the required goals. Agile is a means to make do with the skill set available to a team. And the weaknesses of weak programmers become apparent very quickly.
developers do not understand or believe that exposed weakness of a programmer should not be the sole responsibility of that programmer for improvement.
to be effective, agile requires any developer to honestly confess that they do not have expertise but they are enthusiastic to gain the expertise. Agile does not work well, when an atmosphere exists where every one thinks they should put up a front as though they know a lot.
agile is exactly what Matthew 20 - parable of workers, is all about. That it is a team work. That agile accommodates the weak worker and the late worker as much as it accommodates the strongly expert ones. Developers find this socialist concept unfair and unworthy.
agile requires developers to communicate with each other often. And also congenially spend time discussing irrelevant ideas and showing off irrelevant projects, and to build camaraderie. Many of us hate that.
And managers do not want to allocate time for developers to perform irrelevant tasks.
And they don’t realise such irrelevant tasks and min-projects will one day become handy. Because those in-charge are short-sighted."
Tom Murphy,Studied at Wayne Memorial High School,2016,0,Generally speaking it is about accountability. Many engineers claim it limits their ingenuity when in actuality it increases it because of the team approach to problem solving and solution delivery!
Joe Gorecki,I had the job title webmaster in the 90s.,2017,0,Because it’s a huge pain in the ass for what almost always turns out to be a completely one sided discussion.
Scott Allen,Software Engineer (2012–present),2017,1,"Before starting, I want to mentioned that I have been a developer for almost 5 years at a single large IT company. Despite that, I’ve worked on a variety of projects with a variety of people and believe I have some insight to give here.
I’ll also disclose that I am pro-agile, and may well give reasons as we go through.
Change
To me, people dislike change. I’ve seen how easy it can be to not learn for extended periods of time and how cosy developers can be sitting at the same desk, with the same people, doing the same work in the same way. This isn’t necessary a slam at developers, it’s often the job they signed up for and what they have expected.
So firstly I’d say that change is the reason some developers do not like “Agile”.
My opinion here is that “Agile” is not the change, but a necessary response to the change. I believe this is reflected on multiple levels, where some of the higher ones are often overlooked during a developer’s reasoning.
Winning Work
Winning work is important for software companies and equally important for developers who do not want to end up redundant (apart from those in-house teams perhaps). In my experience the ways of winning and offering work is changing;
A growing desire for breaking up big contracts; using multiple companies and a drive from government for SME’s.
A shift of trust from larger companies to smaller niche companies.
This for me is adding a lot of pressure on everyone to be innovative and rapid - with a lot of focus on presenting PoCs during the bidding phase and then the continual visible delivery to maintain confidence and win more of the smaller trickles as opposed to the big mammoths. This causes a growing emphasis on communication, reaction to change and innovation.
Client Demand
Carrying on from ‘winning work’; client demand has grown to embrace what those more competitive companies offer, and this has caused a need for all to react. These demands include:
Adaptable requirements
Frequent releases (or releasable code)
Greater Visibility / Tractability
All of which for me just don’t fit into the traditional waterfall approach.
Technology
Even during my short stay, my view of technology has changed so much to which point where I see the following as crucial to have an understanding of as a software company and a developer;
Open Source Technologies
Cloud Computing
Application Portability
Micro-Service architecture
To me there must be a change the way we work. The Open Source community grows and changes so fast that any team must be able to react rapidly, and the development of cloud-centric applications is simply different and requires a different way of thinking; There are no big application with long release cycles and therefore developers must be able to adapt to different technologies, frameworks and methodologies to keep up with the demand.
I believe a lot of the above changes in the world are often not properly understood by developers, who simply brand the whole shift as ‘Agile’ then fight against it. I’m of the opinion that we cannot fight against this change but only adapt; Agile may not be your ideal scenario but is an attempt to manage these changes in a positive way for IT Companies, Developers and Clients.
Lack of Understanding
Clearly, there’s just simply a lack of understanding. On some levels working in an Agile manner can be very simple, but it also often feels like delicate procedure which requires careful balancing and real commitment.
Daily Stan-Up Calls
Having a call at the start of every day where everyone just blurts out what they’re doing for the sake of it is not Agile.
Stand-ups should be as brief as possible, and this should be supported by the consistency of their occurrence and attendance. They give everyone a chance to highlight (not justify) the work they are doing and highlight issues they are having. This will allow the rest of the team to understand your position, who they need to communicate with for specific queries and ensure that everyone is aware or blockers. Good standups will often result in multiple ‘offline’ discussions taking place afterwards (“oh you’re working on that, maybe you can help with this” or “ah I might be able to help you with that issue”).
To me, having the whole team understanding the position and struggles of the whole team can only be positive.
If your project manager is running your stand-up meetings; you’re going to have a bad time. I find the best way is to rotate who runs them, but always have a strong ‘scrum master’ who can step in if it inevitably goes off track.
Working in Iterations
Being told to get so much done in a given time then meeting up to see if you managed to do it or not is not Agile.
Iterative development is all about learning in my opinion. It’s about learning how much you can comfortably take on in a given time, it’s about learning if you and your client have the same vision, it’s about learning how the process can be changed to improve the experience for all.
The amount of Story Points moved into a sprint isn’t about setting yourself a target to complete, it about learning the velocity of your team and therefore learning what can be expected in a given timeframe. I’ve met so many teams who think they are agile but do not understand Story Pointing - if you’re doing “Agile” but do not use story points, I can’t see how you’ll make it work.
Just the same with Retrospectives - which are an important part of the process but are often overlooked as ‘ceremony for ceremony sake’. I’ve been in retrospectives where people have refused to be thoughtful and some where people are simply scared to challenge the status quo.
Retrospectives are there to give the team a voice; and should be nothing but beneficial to developers. This is a chance to flag things which which you don’t like as much as praising the things you do like. “STOP: Having the PM run the standup calls”, “START: Estimating my own tasks”, “START: Dress-down Fridays”, “STOP: Last-minute meetings”.
Showcases are a given also; I’ve been frustrated many times at spending long periods developing functionality which simply wasn’t what the client really wanted. As a developer I find it much easier to motivate myself when I know I’m adding value. Showcases should be all about making sure you and the client are on the same page (rather than a progress update). This along with backlog pruning should be a developer’s dream in reducing the amount of wasted time.
The Wrong Reaction
I want to finish off by saying that I understand why people are driven to hate “Agile” as a term. Daily updates to the manager, requirement of visual progress every week and micro-managed workloads are all awful and have too easily led to the blips of hatred we can see appear.
The blasphemous use of the term “Agile” to describe some of the above has pulled an illusion over developers eyes, turning something which we should all embrace into something many fear.
This fear has caused developers to run away when “Agile” is mentioned and push back at Management for introducing the buzz-word into their work environment. Yes, “Agile” can be ran awfully and make your lives harder, but if instead of pushing back you take control and champion your company’s / team’s approach to Agile with a real understanding, you’ll find that it’s there for you."
Scott Weiner,"CTO, Strategic Consultant, EBAS, ICP-BAF, CSM, SPC4",2017,0,"I’ve worked with over a thousand developers. I rarely have seen developers that don’t like the Agile mindset. I have seen teams that were not operating in an Agile way and thought they were. Those teams were often miserable because they were getting very little of the benefits and they had all sorts of unreasonable overhead.
In fact I’ve gone into many teams where morale was awful and after creating a shared understanding of Agile the difference in attitude and effectiveness of the team was often incredible. It happens fast when done well.
As for a better paradigm, it completely depends on your needs but for most general purpose application development Agile mindset and some related methodology works pretty well. I’d need to understand a lot more about your particulars to make more of a recommendation.
Sure I could just tell you an opinion but we don’t work that way. We are method agnostic. Instead we like to evaluate your goals and figure out how to help you organize around your values and objectives."
Clint Potts,Agile trained. Mother approved.,2016,1,"Agile is an environment in which team members look at a board of tasks, and self-assign themselves work. They are then expected to report daily on their progress in short “scrum meetings”. This environment quickly exposes the team members who are not getting their share of the work done and continue to make excuses for being slow. You only get away with that for a few days before you get called on it by your colleagues.
The problem is, if your project lends itself to Agile management, it is the best option. Tried and true project planning allowed developers to hide in the Gannt chart. Agile requires accountability and movement during each sprint.
So what do you do? You work to develop your employee using good ol’ human resource practices. Does the team member need training? Are there problems at home? Can a flexible schedule be accommodated to provide time to address personal concerns? Do we need to engage a HR plan?
Bottom line: team members get held accountable and need to be productive in a Agile team. These are good things!
-Clint"
Nicolau Werneck,Dr. Engineer,2016,4,"Reading this question for me is crazy, I have never met a developer who does not like agile. Maybe this is a thing among some developers out there, but I am certainly distant from those. From what I am reading here, it only happens when people are not actually doing agile, the problems pointed out are just classic bad management practices that agile explicitly fights, such as the idea your “boss” is checking out on your work every day… The daily is a great moment of the day, you talk to your co-workers, you ask for help, you offer help, you get to know what is going on, you share what you have done, you talk about issues affecting your work. If you actually live that once and then move to a place people don't even know what that is, you'll miss it dearly.
What would be the opposite of agile? The main anti-pattern I believe would be to get rid of iterations and instead pretend you can envision your project in a couple of months to deliver a perfect product two years later. This is crazy talk… You need an error feedback loop. And you need a PO who cares about making a product that is relevant, and who is responsible for its success. If you don't have a good PO updating your requirements, you'll soon be working in something that is either pointless or doesn't even make any sense. This is terrible.
The question of testing and of being pushed towards doing low-quality code, or also focusing on front-end stuff and “putting down fires” instead of creating some serious long-term infrastructure, this is a relevant problem, but agile is not to blame. Let's get real: if some code is buggy and nasty, but it is not a real problem for users, then there really is not much of a reason to make the code better or to have it tested. The PO and developers, the whole company must reach a consensus about what matters, where to improve on quality, where to make more tests. Sometimes developers can envision that investing on something will be better long-term. But it must become clear to the rest of the company that this is true and will be relevant. And developers must also understand those superficial and immediate issues do have its importance. A developer cannot be lost creating beautiful code that is not really relevant not now or not ever. You need that reality check.
Agile doesn't really solve that quality problem, but it gives your the opportunity to solve it, by putting people to talk to each other. The business and architectural decisions are beside agile. Agile is about making people look to what is happening, talk to each other, fix problems and getting things done, instead of getting stuck in plans that might become obsolete, and following pointless rules or remain suffering with impediments that are never discussed with anyone."
Stoyan Stoyanov,QA Manager (2020–present),2020,0,"Being smart and understanding the method and tools you are using is the better alternative. A lot of devs. limit themselves by adoring the label ‘dev’ and choosing to be blind for the rest and the modern human knowledge says we have to know the whole process and be cross-functional and scientific.
So my answer is - lack of knowledge leads to misunderstanding of the Agile manifesto and practices. A lot of devs dislike what most human dislike - breaking the homeostasis, doing something more, crawling out of their shell, the usual human stupidity (;"
Tom Rose,Studied at King's College London (KCL),2020,10,"Agile is fine. We should all try to be agile
SCRUM is not Agile, never was, never will be. It goes against the most important Agile principle, “People and Interactions over tools and process”
It might be a good methodology for some projects [it is!]. It is most certainly not the one and only good method for everything.
It often takes away the pleasure in work that used to be felt by many excellent programmers that for decades delivered good quality software without the help of SCRUM. That is enough to treat it with suspicion. And it is true of both “real” SCRUM and the cargo-cult variety.
I have never yet met a programmer that asked be part of a SCRUM team. So far as I can see it is always imposed from above by control freaks with the word “manager” or “director” in their job title, but with a complete lack of any ability to manage or capable only of directing in the wrong direction."
Joe Termine,Principal Software Architect at A Fintech Firm,2020,28,"As a programmer, I generally hate all meetings, because meetings are dull and ineffective. There are exceptions, but most meetings could be skipped if someone just wrote a clear memo or the two people in conflict talked to each other and not the whole universe. Scrum meetings in particular are the worst kinds of meetings because they are “meetings by tradition” instead of “meetings out of need.” They are like the dreaded weekly staff meeting where everyone goes through the motions of a meeting to appease “the boss” but don’t get any real value.
Of course nearly every SCRUM practitioner will disagree. call me a heretic and say prescripted bland things like “only if SCRUM is done improperly” or “it was that way with waterfall but not now.” Same with the Six Sigma worshippers, and they double down on this insanity by giving their useless meetings names that all seem to have cryptic abbreviations — “the FMEA Process Review Meeting.” What it comes down to is that folks who don’t have anything valuable to do need to have meetings to create work for others so that they can show value."
Gniewomir Świechowski,"Full-stack developer, occasionally tech lead",2021,6,"I can speak only for myself, but it may be representative for at least part of wider group of so-called “agile-hating developers” so I will be using plural. :)
We do not hate agile. We despise how companies are often smuggling waterfall under agile disguise.
Problem with current understanding of what agile is that people in charge often associate it with particular implementation. Scrum for example. They expect that we will religiously adhere to some arbitrary set of rules with disregard of them working or not for our use case - which is exact opposite of being agile and constantly looking for what works best!
At the same time, when you are “agile” - in aforementioned way, you are still expected to provide waterfall-like estimations for things months away, which you rarely can reason about - without being a prophet, as the same people will change their requirements multiple times, without giving you space for changing guesstimation, they forced you to make before.
It is even more problematic, as this kind of being “agile” is very popular in businesses outside tech sector (most of them!), which means that whatever they have is probably in state of disrepair, obscure for any reasoning about it and very, very fragile. Which makes even 2 week predictions about what we will be able to do at best unreliable and at worst pure fantasy. But don’t expect to be given much space to remediate this problem.
So “agile”(note quotes) lovers create teams that chase this arbitrary deadlines (re-implemented from waterfall) with disregard for technical debt, basic hygiene (understood as CI/CD, automated testing, developer experience, developing common language with business etc.) and quality (re-implemented from waterfall) but with shitload of often unproductive meetings (re-implemented from waterfall).
Teams that are as much “agile”, as the where 20-yrs ago, but more frustrated because all of the bullshit pretending around.
What we hate is when people grab sexy buzz-word and slap it on waterfall-like process without any understanding there are not many canned answers in this field.
To be truly agile everybody in organization have to accept, embrace this constant state of flux every business and every code base is in and act on it - implementing more iterative process, not cling to illusions of predictability under disguise of being “agile”.
We love being agile, we hate being “agile”."
Aleksandar Atanasov,"Master of Science in Computer Science, Karlsruhe University of Applied Sciences (Graduated 2017)",2024,3,"Here is my experience with SCRUM. My hope is that people will view it as a cautionary tale and will try to avoid the mistakes I have observed in multiple companies that I have worked at and seen the failure of SCRUM and agile development all together.
First of all there is a difference between the two terms. If Agile is a class, SCRUM is the object that instantiates that class, that is agile development is a philosophy, while SCRUM is the means to enforce that philosophy.
I worked in three companies in a span of several years. Quit all of them due to being extremely dissatisfied with how things were managed. Most if not even all of the time the introduction of new workflows (SCRUM or otherwise) comes outside of the development department and not from the developers themselves. Usually it comes as a suggestion from project management. Why? Well, it’s complicated.
It all starts when a sales person, who gets big bonuses from finishing a sale, goes to a client. Without knowing what actually is possible (or caring, for that matter), they promise the client everything. The client is happy. While more experienced folks will know that there is always quite a bit of snake oil marketing going on, many are more than willing to sign a contract that promises them the stars since 1)it looks great in front of their boss and 2)a contract is legally binding, hence the responsibility is ultimately shifted towards the legal team if something goes wrong.
The sales person and the project manager then sit together and start checking what can be done in the given time frame and budget. Most of the time this is the first place where huge discrepancies are observed but not fixed.
The project manager than goes to the head of the devs and tells them they need to get to work. In the end “something” is shipped to the customer and using various techniques of deception, best case the company, that provided the service/product, gets away with most of the lies they sold to the client. This cycle repeats over and over and gets worse, since the more you manage to barely scrape by, the heavier the push from the top gets. After all if you managed to get the job done 99 times, why not do the same 100 times?
At some point this workflow implodes. People start being demotivated, burned out, getting sick, friction among the dev team rapidly increases and ultimately people pack their stuff and find a new job. The less people you have, the less human resources you have to actually do anything beyond selling and managing projects. This high turnover increases the strain on the rest of the developers. Deadlines start to fail, projects start to crumble.
The project manager sees that something is going wrong. They absolutely have to do something otherwise the deadlines will not be met and they will get into a lot of trouble (mind you, the sales folks seems to be immune to any critique and can continue selling snake oil for quite a while before someone points the finger at them). So they talk to their supervisor and say they need to check how to improve things. Funny enough, they got contacted on numerous occasions by this consulting company that sells training and does workshops in SCRUM, promising to improved the output by a lot. How much they cannot say since specifics are legally binding. ;)
The project manager asks for funding from their supervisor, who gladly coughs up a few thousand USD since it appears to be a good investment. The consulting company that consists of people, who benefit from your company introducing SCRUM and employing them to consult you during the transition, then fill the manager’s head with a different type of snake oil. One that tells them that all of their problems will go away if they use SCRUM and that SCRUM ensures a tight, highly flexible and observable workflow that would make their job in controlling the devs better and will also make the devs happier.
The project manager comes back and immediately starts probing and pushing SCRUM down everyone’s throats. The other managers rapidly jump onto the SCRUM-hypetrain since they are also struggling. Of course no one asks the developers if this would fit the team at all. On top of that the migration period is literally nonexistent. You wake up and all of a sudden you just have to work with SCRUM. Why? Because ongoing projects that are already failing cannot wait for you to get into SCRUM, you just have to employ it because, if anything fails, it’s you that failed and not the methodology.
SCRUM requires discipline, clear vision of your goals, good work ethics and well trained team that endorses it. It cannot fix mismanagement, it cannot miraculously create proper specs out of thin air and you can definitely not push it down a dev’s throat if they see it as something that will 1)benefit you as a project manager but 2)hinder their current workflow."
Anthony Minessale,"Founder, CEO at SignalWire (2018–present)",2015,23,Software development is chaos. Agile is an attempt at order. Order can be brought to chaos only temporarily. Anyone who hates on it probably is being forced to follow it at all times. Its good to have guidelines but rules are meant to be broken when the chaos is at a maximum. The secret that takes most 10+ years to learn is to avoid religous affinty to any one style or practice for anything to do with tech but be willing to borrow from any of it.
Amir Hakim,8y,2016,17,"Is nuclear power the biggest evil ever invented ? or is an incredible source of energy ?
Answer: it depends on how you use it!
Currently: Scrum is anti-engineering.
Scrum like everything on earth is a powerful noble idea that capitalism took and turned into an evil monetisation tool, just like Christmas and Vegetarianism. The way it’s usually used, makes it nothing more than continues rapid prototyping while ignoring the technical debt, to generate your first sale and may be sell off the company, then the horrible code base becomes someone’s else problem. It is used by non-technical bosses to drive developers and work them to the bone. To micromanage everything and ask you to log every minute of your day. All the accumulated technical debt doesn’t matter because all you need is to show your feature to sell them. Then once you do, you blame the current heroic development team for the bugs and you replace them with others. It is used so your trade code monkey are driven to produce, while the engineering talent is suppressed. It pushes Devs to choose the fastest solution to implement, not the best solution, because who has time to research and implement that new library or framework that will make you future proof, when you can hammer out few lines now, then when a change comes along, you delete that crap and start from zero. Why try to abstract and code re-use, when you can simply copy-paste. Because when you over or under estimate your user story, management look at you as either a thief, or lazy, or both. Because when you try to object and raise concerns about being hampered by all the tracking and estimation, management says: light process is a privilege that you have to earn. And don’t blame the scrum master for being a management puppet that is only there to spy on the team because he is not trained, but we don’t have the budget for real scrum training. But we are scrum.
Others agree as well
Why do some developers at strong companies like Google consider Agile development to be nonsense?"
Alan Mellor,Used Agile methods since 2005,2019,404,"I’m not a fan, I must say.
I loved the original agile manifesto.
To me, that directly addressed the problems of uncertain, unpredictable development by attacking its root causes. Extreme Programming (XP) seemed to make a lot of sense.
These were ideas devised by programmers for programmers to help them program.
And then the project managers came along.
Scrum, with its planned sprints, seems to me to simply discard the agile manifesto. It splits a project into two week waterfalls and hijacks the term ‘agile’.
There is nothing in the agile manifesto that says we can make software more predictable. It’s all about handling and making transparent the unknowns that we face during every bit of the development process: requirement details, libraries, legacy cruft and people. Instead of pretending we can predict those before they hit us.
But by all the same tokens, your project manager is going to love Scrum. It’s a way to rein in those pesky agile programmers who make it up as we go along. On paper.
I’ve been part of successful Scrum projects. But the agile manifesto/XP way of delivering software has always felt a much better, more productive fit."
Jacky Jackson,Software Engineer,2018,32,"Agile Manifesto and the four values
• Individuals and interactions over processes and tools
Resulted in endless interruptions while nobody bothers to write their thoughts down
• Software products over comprehensive documents
Results in ball of mud products with no documentation on what the hell the creators were thinking, and what it should be about. I wants those comprehensive documents back! Please.
• Customer collaboration over contract negotiation
Śo we accept collaboration in customers changing their minds every two weeks, and do not force them to make up their minds.
• Response to changes over observing plans
So we refuse to write anything down in a plan and just ‘do agile ‘ because it is ‘hip'…..
YES I TOTALLY AND TOTALLY HATE HATE HATE HATE HATE AGILE!!! I SPIT ON IT, I P!SS ON IT."
Jacky Jackson,Software Engineer,2017,9,"Frankly…. I do not dare to, still. I have been working with Agile for a few years now, and countless times I wanted to shout it out of my lungs: ‘'write it down’'. But…that is not lean, scrum and agile. I wanted to beg for a few hours of silence to work in…but pair programming is the new and modern way to work. At the moment you dare to criticize agile, it is you who are a bad programmer not being good enough for agile. I totally loath agile!! At least I can write it down here."
Mourya Venkat,"M. S in Software Engineering, Vellore Institute of Technology, Vellore (Graduated 2017)",2019,10,"Hahaha because people freaking changed its definition.
What's supposed to be a 15 minute scrum, is now getting stretched to 45 min - 1 hr.
Can you just assume, you just start your morning with a very fresh mind and all of a sudden, you will have to move to a suffocated meeting room and spend your 1 hour time just listening to things which doesn't even link with your component.
I don't object a 15 minute scrum, cos it's the best way to know who's working on what. But a stretched scrum is horrific and reduces the productivity of the developer."
Alan Mellor,Used Agile methods since 2005,2019,56,"No. I like the stand ups and I appreciate the ideas on planning small sections of work. Both have value.
It is the fact that each Sprint has a commitment based on my wild guess of how long something will take that sucks catastrophically bad.
It’s all a total charade to add a veneer of predictability to something unpredictable."
Andrew Arnott,Developer Since 2008,2022,7,"Absolutely yes.
When I get emails from recruiters that mention the company “does Agile”, or something to that effect, I explain to them that my experience of this means micromanagement, corner cutting, prioritising of stats and burndown over quality, hours of pointless meetings, and generally a significant reduction in the quality of and enjoyment in both my work and my life."
Jeff,"developer, author: 5 books; Clean Code contributor; geek",2020,4,"As Robert Garrett suggests, it’s the specific implementations and trappings of agile—not the underlying values or principles themselves—that can be the problem. The values of agile might seem motherhood & apple pie, and most people wouldn’t dispute them. The principles have a bit more meat in terms of describing how to begin implementing agile. If you’re not familiar with them, take a few minutes to read them; most people similarly won’t disagree with much here.
Some examples of things that people think are “agile” but are specific to some implementation:
Stand-up meetings / daily scrums—perhaps the one thing that’s most universally botched. They are intended to be a quick touchpoint and plan for the day, but devolve into boring, glorified status meetings for many teams (mostly because most teams aren’t truly collaborating like agile says they should). There’s really no standard set of questions, but too many teams somehow have fallen into the “what’d you do yesterday, what are you doing today” rut.
Pair programming. Comes from XP. Many devs really hate this idea, though for those who aren’t vehemently averse to it, it can be enjoyable and highly productive.
Specific story format. “As a / I want to / so that…” A nice idea. Not an absolute must.
SAFe. A big bloated thing with lots of buzzwords. It might be beneficial to larger organizations with the need to coordinate many projects. Don’t do it unless you know you need it (and then, consider something else like LESS). Don’t do it until you’ve learned how to get at least one agile team to click, and really click well.
Agile implemented in a rote way involves lots of meetings—something we wanted to get away from 20 years ago when I learned about XP. The meetings ain’t the thing. I understand why the typical developer reaction is that it’s meeting heavy.
Further turning people away: The proliferation of the Agile Expert—sometimes a ScrumMaster—someone who’s learned all the basics & buzzwords, just enough to be dangerous, dogmatic, and annoying.
Agile can and does work very well, and in a way that’s enjoyable and not off-putting. And standup meetings, pair programming, story formats, and iteration planning meetings can all be valuable tools, particularly to a team new to agile. But learning how to make them effective and not onerous is also important, as is learning when something better is called for."
William Hurley,Director of a team of developers,2023,2,"A lot of the hate, I find, comes down to one simple phrase: “in theory, theory and practice are the same; in practice they are not.” Let's start with what agile (small-A) software development is.[1] It's a rejection of the idea that you can document away the complexity of the software development process and arrive at a fixed scope, cost and timeline. Inherent on that is that if you ask enough questions, get enough people to sign on the dotted line (in blood, no doubt), there will be a plan that is inviolable. Which usually ends up with it being, well, ineffable. To misquote Aziraphale in Good Omens:
Best not to speculate. It’s all part of the System Specification Document. It’s not for us to understand. It’s ineffable.
Agile (again, small-A) preaches the acceptance of change, moving in small increments, planning and building what you need and learning while you go. And, above all, trusting the team to execute on the vision and make choices during the process, especially for things that don't really matter.
So, now that that's out of the way, let's talk about Scrum. You'll notice in the previous paragraph nothing talks about how to do this. And that's where people start to have a problem. Because it's all well and good for a team to say, “just tell us what the most important things are and we'll go down the list and we'll get as much done as we can until you tell us to stop,” but that's a much harder sell to most business people. They tend to wonder about, “will we have enough money,” or “will we hit our retail window,” or “how can we tell our client what they're going to get.” So into that void has stepped a number of methodologies, Scrum being one of the most popular.
Scrum is based on the idea that you have to have some bone to throw to the other side. So in that regard there is estimation. But rather than do it in hours or dollars — because that level of granularity is either a fool's errand or costs about the same as actually doing the work — you do it in some abstract, relative metric, usually called “story points,” or something similar. Then, assuming that the team can be somewhat consistent and stick to the idea that the task their estimating is going to be either more complex or less than this thing they already did, over time you can generally predict what's possible during a fixed unit of time. This, combined with the idea of continuous improvement, cross skilling, and an embrace of not changing the thing you are currently trying to do is supposed to prevent the problems with the waterfall method (see paragraph 1).
So, where can we go wrong? Well, there are a lot of ways. Most of them stem from people just using the trappings of Scrum but not actually committing to what it — and agile methodologies in general — preach. A common one is trying to shoehorn hours estimates back into the process. The reason you're supposed to use complexity is to avoid the problem of, “well, Sarah does it it's going to be 3 story points, but if Phil does it we're talking 5.” The team is supposed to self-organize, so basing estimates on pre-assigning tasks is really against the spirit.
Another big one is having stand-ups that don't actually provide any value. If anyone has been in one of these you'll recognize, “this is Ben, I'm working on ticket 2365, same as yesterday; don't have any blockers.” That's just noise. Another big mistake I see is doing too little exploration, assuming that, “we'll figure that out as we go.” Scrum is about the team committing to itself what it's going to accomplish. If you don't know what that is, how can you estimate? If you don't have an accurate (-ish) estimate how can you commit? So you discover what you actually need to do while you're doing it. That's not going to work well. Looking forward is at least as important as working now.
Properly done agile (and Scrum) is hard. You need to balance the now with later. Do enough planning, but not too much and certainly not too little. It also means holding yourself accountable and being willing to accept feedback and change how you are working so the team can be better.
Most people aren't willing to do that.
Footnotes
[1] Manifesto for Agile Software Development"
Robin Dymond,"CST, Expert trainer and coach in Scrum Agile and Lean. 26 yrs in software.",2021,2,"Before asking why, ask if.
In a large scale transition to Agile from waterfall at a top US bank, morale was surveyed before the transition and after 6 months of working in an Agile way. The survey was given to everyone who was transitioning to a Scrum team. The survey found a marked improvement in morale and job satisfaction. In a healthcare software company in the EU with 400 developers we found the morale improved and people were happier.
In working with companies across the US, EU and Canada in Agile transitions the large majority of people doing the work like the change to Agile and don't want to go back to waterfall.
Calling waterfall traditional is a bit silly. The first Scrum project was in 1993, the first paper in 1995 and the Agile manifesto was created in 2001. So Agile isn't new, especially when compared to the speed at which technology changes."
Anonymous,3y,2021,2,"What do developers need to know about their new responsibilities when transitioning to Agile Project Management?
Scrum derives from the Lean Product Development teams viewed by Takeuchi and Nonaka. These teams, like the Toyota Prius team, required a special management style, where management provided challenging goals and then backed off and let the team figure out what to do. This generates self-organization on a cross functional team. Understanding how lean product development works, the dynamics of these teams that generate 5-10 times normal performance is critical. The biggest impediment for implementing agile is having people who do not have the mindset required.
As a manager, I created Scrum to not only make the teams hyperproductive, but to enable me to be a hyperproductive manager. Scrum is not hostile to management, it is simply designed to implement self-organization to enable teams to innovate faster. Managers can implement certain ground rules, but then they need to remove impediments for the team, not tell them what to do. It frees up management time to focus on strategy, building customer relations, and streamlining company operations.
The comments on Product Owners burning out are often the result of teams moving too fast for a Product Owner to keep up. You need to build a Product Owner team. One of the MIT area companies I work with had a seven product owner team in 2010 and now they have 35 product owners. So management failure to staff and train the product owner function can be a big problem. Again, this is the result of failure to execute with an agile mindset.
Agile is a mindset and a motion like a martial art. If you are a women with an 8th degree black belt in Karate, like one of my Scrum users, virtually no-one can beat you in unarmed combat. Yet people say, karate is hard, it takes too long to learn, you have to follow the instructions of the master for years, you can get hurt, and on and on. These comments have nothing to do with the Karate process. They have to do with the Karate mindset and the inability or the unwillingness to achieve it."
Jerry Westrick,CEO at Software House Merida (2016–present),2020,10,"Part one:
The “Agile Manifesto” which first coined the term “Agile”, starts off saying:
This is a study of some of the things that Small teams have used to achieve large results. Pick and use the things that work for you.
This is a far cry from “you have to …”, “You must …” as implemented in most companies.
Agile as I see it consists of workers who do undefined work using undefined methods. And a leader who’s sole purpose in life is to enable the workers.
Everything else is a big company trying to force structure and form on a process which was chosen because programming is so much faster without it.
Part Two:
I have seen many “agile projects” fail for the simple reason that the people ordering the software did not understand what was going on. If you are going to implement an “iterative” development process, please do yourself a favor and make sure your “Owners”, “Stake holders”, or “End Users” know exactly what they are doing.
I cannot tell you the number of times I have heard “Ready for Production” from the “End Users” when all major back end work is still “Simulated” by “End User” priorities. It is very difficult to keep your “End Users” expectations realistic when the screen looks perfect and seems to work."
Junilu Lacar,"Software Developer, Agile Coach (1998–present)",2021,2,"Don’t expect to meet all major deadlines just because you’re doing Agile development, especially if you don’t know the reason to use Agile. That in itself indicates that you’re most likely doing Agile in form only but not in substance.
One of the biggest misconceptions people have about Agile is that it’s going to suddenly fix the problems in their software development process. That’s like a swimmer thinking that swimming in a different pool will make them a better swimmer. It doesn’t work like that.
Agile processes and practices allow you to come to terms with your shortcomings and figure out ways to improve. It’s often said that Agile doesn’t fix your problems, it just reveals them. You still have to fix the problems.
The other big mistake people make is focusing only on process improvement but largely ignoring one basic principle: Continuous attention to technical excellence and good design enhances agility. In my experience, technical excellence and good design are required for agility.
Unfortunately, many teams focus solely on the process side of Agile like daily standup, retrospectives, planning but largely ignore practices like refactoring, test-driven development, pair programming, and simple design. Without good engineering, the process stuff only makes you better at delivering bad code. That’s not Agile.
So in short, you want to use Agile development techniques to reveal your problems and shortcomings. With that awareness, you can then adopt the Agile practices, including the technical ones, in order to get better."
Alan Mellor,Used Agile methods since 2005,2019,12,"The only part I really dislike is having hard Sprint Commitments based on estimates.
Maybe that’s just a misuse of Scrum. But it happens and it sucks."
Ryan Mattes,I use several different languages on a daily basis,2019,3,"Because its most common uses are destructive micro-management, forcing developers to work long hours, and avoidance of proper planning.
That's not what it was intended for, and it can work well when implemented appropriately, but that's mostly how it's used today."
