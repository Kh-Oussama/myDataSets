Topic,Count,Name,CustomName,Representation,KeyBERT,Llama2,MMR,Representative_Docs
-1,2156,-1_just_like_devops_work,Lack of Clear Communication and Alignment Among Teams,"['just', 'like', 'devops', 'work', 'people', 'time', 'know', 'things', 'team', 'need']","['devops', 'devs', 'management', 'infrastructure', 'sysadmin', 'developers', 'developer', 'systems', 'working', 'process']","['Lack of Clear Communication and Alignment Among Teams', '', '', '', '', '', '', '', '', '']","['devops', 'work', 'people', 'company', 'developers', 'software', 'infrastructure', 'developer', 'cloud', 'systems']","['someone lead devops team still devops team reporting have also struggled with idea having team called devops since does against devops philosophy devs owning their software production however case probably many others devops team responsible creating maintaining tools processes that allow teams manage their systems production larger organization doesn make since each individual team have create maintain their deployment management systems that would with duplicated effort wide variety systems that would need maintained devops creates tools procedures teams them might this just sysops think difference that teams ones using production management tools sysops team devops ones paged system issue team owns paged devops only paged tool that team using handle issue issues itself', 'think misunderstand what mean owning entire stack process something that should done role devs shouldn infra they should understand just much that infra engineer shouldn everything needs understand what infra owning done roles collaborating teams across teams devops perhaps small engineer startup have couple devs find themselves doing infra they have soon they grow they expand their team with relevant expertise been there done that application development pgsql some productivity engineering like teaching others about delivery delivery pipeline install manage servers iron later move everything cloud logging monitoring customer support owning everything first thing looking expertise between ourselves someone manage infra next expertise that lacked engineers company have team managing infra platform team that turns that infra into something application teams like managing helm argocd enabling team with deep understanding build delivery pipelines application teams everything because they devs they devops collaborating these teams aiding application teams devops engineers they those separate roles also including working together combining their expertise this problem nutshell devops engineer company needs know which expertise needed exactly their specific context', 'your observations here valid large topic empathise with being uncertain what perhaps help give direction recommend read this first namely because already covered comment there plus book mention worth reading give moments terms what started this dictated goals your have generally advocate operating homelab reasons running your homelab great build devops ways that work make tangible what look like plus trying things what does does work your goals even times inspire clarify what your goals through exposure devops does rely technology necessarily married specific technology more certain capabilities that technology perform docker relevant only worth expanding upon would that instead necessarily thinking strictly docker container regard your efforts into learning kubernetes which expands upon uses docker containers want menu pick bunch container images from check this only source good docker images think would helpful additionally perhaps expand what tools using would recommend working with rancher help manage clusters this help running quickly addition that work towards having gitlab self hosted repo code infrastructure code well having argo connect your repo your clusters starts becoming automation glue creading editing destroying updating systems within myself codium editor writing yaml appreciate just said going some more context plus this _only_ this this successful that costs open source kubernetes builds uses docker containers adds features such many docker containers work together automatically spinup down across nodes fault tolerance high availability improved security whole stuff that docker itself does have heavily used over place yaml files basic text files that have specific syntax feature rich config files this case they used define want systems things look want things change they look edit yaml file save commit repo premise behind particular tools recommending that follows this rough flow this only wanted spin thing open your editor that already connect your repository create yaml file naming something sensible write aspects that define this system thing want spun this could website database stun turn phone system game server other number things limit once have written want save commit changes repo merge your branch another topic another time yaml file your repository your gitlab system have nice version control stuff roll back make mistakes things like that argo detects this yaml file exists check that makes sense then interfaces with relevant cluster namespace argo then begins applying this yaml file create necessary components that defined this yaml file your shiny thing becomes operational amount work this point roughly just writing really good text file that describes what want your other aspects given impression workable docker when ones that made most sense wouldn work because they hosts flesh this more following what this']"
0,964,0_devops_team_people_just,Lack of Clear Definition and Alignment of Roles and Responsibilities,"['devops', 'team', 'people', 'just', 'teams', 'role', 'like', 'tools', 'engineer', 'work']","['devops', 'devops culture', 'devops role', 'devops team', 'devops engineer', 'devs', 'developer', 'developers', 'development', 'deployment']","['Lack of Clear Definition and Alignment of Roles and Responsibilities', '', '', '', '', '', '', '', '', '']","['devops', 'people', 'teams', 'role', 'developers', 'infrastructure', 'devs', 'engineers', 'systems', 'company']","['devops itself', 'that what devops', 'even devops']"
1,641,1_thanks_like_comment_just,Lack of Alignment and Coordination,"['thanks', 'like', 'comment', 'just', 'right', 'people', 'post', 'really', 'good', 'exactly']","['thanks', 'thanks sharing', 'thank', 'interesting', 'nice', 'comment like', 'great', 'comment', 'like', 'welcome']","['Lack of Alignment and Coordination', '', '', '', '', '', '', '', '', '']","['comment', 'just', 'good', 'agree', 'feel', 'point', 'word', 'time', 'haha', 'upvote']","['this comment like', 'interesting thanks', 'thanks']"
2,226,2_google_outage_services_service,Massive Outage due to Single Point of Failure,"['google', 'outage', 'services', 'service', 'cert', 'just', 'couldn', 'authentication', 'gmail', 'working']","['google', 'google google', 'google services', 'google hardware', 'goog', 'search', 'gmail', 'internet', 'azure active', 'logged']","['Massive Outage due to Single Point of Failure', '', '', '', '', '', '', '', '', '']","['google', 'outage', 'authentication', 'gmail', 'youtube', 'minutes', 'great outage', 'outages', 'internet', 'problem']","['then google', 'google', 'google']"
3,225,3_jenkins_github_gitlab_plugins,Plugins and Inconsistent Configuration,"['jenkins', 'github', 'gitlab', 'plugins', 'actions', 'gitops', 'pipelines', 'github actions', 'azure', 'using']","['using jenkins', 'jenkins', 'hate jenkins', 'gitlab github', 'gitlab', 'github actions', 'github', 'gitops', 'repository', 'pull']","['Plugins and Inconsistent Configuration', '', '', '', '', '', '', '', '', '']","['jenkins', 'github', 'gitlab', 'plugins', 'gitops', 'pipelines', 'github actions', 'pull', 'repo', 'azure devops']","['they invented their unique that makes must live breathe their this applies every cicd that accepts pipeline files they have their language write pipelines even more most people actually write wrappers write their favorite language they have something advanced hand bunch jenkins over team anything team should best that learn jenkins because know they programmers jira power users whereas with most modern they common widely accepted file format going refuse chef terraform vagrant because they yamls groovy syntax which basically java scripting language have basically expert jenkins their jenkinsfile even remotely effective this universally true every language cicd whatever jenkins that requires expert levels will same gitlab github actions agree that yamls human readable different level than other config language this does mean require different skill level achieve same thing would gitlab github sure github actions actually some built managed features that work quite well with their platform that comes into mind deployer feature where generate nice changelogs patchnotes users using technology which gates people intentionally unintentionally from being able understand support maintain this equally valid every pipeline language there have specific syntax pipelines have learn building block developers that never seen gitlab syntax will equally gated would have developers that never seen jenkins language this analogy similar actually putting java developer handle python project expect same results agility fixing issues because talking about developers jenkins does something which devops consultant firmly stand against jenkins literally shared libraries template jobs pipeline jobs configuration code dynamic static agents capability full blown scripting language easy extensive plugins open source jenkins literally everything that software actually needs everlasting supported least years augmenting this jenkins literally same things that gitlab decoupled from your repository system jenkins those insanely over complicated technologies this slander there nothing complicated about jenkins right anyone easily spin over docker learn pipelines connect agent will work everyone have equally things gitlab even bother repository gitlab becomes even more critical with moving components that fail independent inside gitlab have everything have issue tracking wiki cicd main feature which code repositories literally running monolith application world where everyone wants decouple things ensure everything critically dependent each other component', 'well since good clear answer think dive simply possible with points jenkins arguably decent tool when only fish jenkins compared basically other tool there really makes want pull your hair configuration especially plugins even your pipelines very difficult practically need degree using jenkins effective jenkins used only configurable their world around started using codebase lingo that universally accepted best better practice could version your with your code jenkins tried help fill this with pipeline configuration code feature this attempt abysmal when jenkins defined code please compare arguably insane syntax necessary jenkinsfiles compared basically other tool industry makes want claw hair this likely engineered this support internals jenkins logic worked have basically know jenkins engineer their pipelines code effectively their language doesn support object oriented anything doesn leverage building blocks standards implement company their plugin architecture absolutely insane hard manage maintain support very difficult impossible update upgrade jenkins fear breaking things basically install jenkins never upgrade ever jenkins heavy most java based tools there this requires excess just host jenkins experience folks still setting jenkins servers have never used another tool their life this industry people that afraid change tend like learn thing that thing forever this huge flaw industry antiquated tools technologies tend forever haunt arguably flip side fear change folks that want always bleeding edge which also highly against every time shown someone well engineered gitlab github actions circle setup converted teams instantly those tools modern tools they have built features like environments with automated integrations available most automatically delete dynamic environments nice available them view different environments deployed your code easy single button interface rollback previous version jenkins doesn host anything doesn have cloud offering afaik this where really lean great your provider also your provider github github actions gitlab gitlab tight integration security model around provider their tool unparalleled compared having manage tools personally accept jobs that jenkins that help them switch this worst tool this industry that hope dies fire there amount money even millions dollars that would work role where build support jenkins reference been doing since before tools this existed engineered stuff based manual shell scripts polling servers years deploy code made living devops person before called devops automating infrastructures codebases since basically', 'jenkins from']"
4,220,4_salary_germany_income_year,Lack of Financial Sustainability,"['salary', 'germany', 'income', 'year', 'work', 'cost', 'living', 'europe', 'taxes', 'paid']","['work life', 'wages', 'paid', 'employer', 'paying', 'work life balance', 'salaries', 'salary', 'cost living', 'income']","['Lack of Financial Sustainability', '', '', '', '', '', '', '', '', '']","['salary', 'germany', 'income', 'work', 'europe', 'taxes', 'paid', 'life', 'cost living', 'london']","['think disagree with your initial assessment work life balance quality life primarily worked also worked netherlands germany cyprus once have ever been expected work beyond monday friday employer voluntary call rota week weeks monday friday weekend callouts were less than week called maybe once every times rota volunteering boost your salary competition call team high salary roughly including bonus stocks full bonus this year without issue have private medical dental cover although private medical care here still goes primary care essentially extras that private cover that puts well beyond employees terms salary quality life reflects that house nice area wife afford live with luxuries hobbies holidays compared vast majority this puts position priviledge also days year months sick pension matching contribution free last year ended taking most month holiday wife travelled there also small perks work pays spotify youtube premium amazon prime video that sort thing worked primarily tech sector moved fintech couple years have colleagues work international company their work life balance insanely skewed comparison sure their salaries higher especially ones working wouldn trade places with them', 'such would only earn combined days time year split between sick days earn slightly more have means spend ourselves days vacation year days week between christmas years leaving with days spread over rest year sick days paid holidays year years july labor thanksgiving after thanksgivng christmas health coverage costs month insurance which doesn kick until spend least deductible services that point covers approved costs spend between year cover basic checkup urologist appoitnments sets blood work general health first colonoscopy last cost after insurance paid amount rent sqft apartment that about hour commute from work cost would prohibitively expensive live closer office espresso latte costs fruits vegetables expensive apples cheap grocery usually groceries town live they cost more pack eggs here cost though recently have been upwards bare essentials food very quickly company just announced cost reduction layoffs they every year zero notice fired once year there stress suddenly losing your reason with benefit other than must will paid additional weeks notice period having zero security reason point sucks service costs expensive basic cell phone with data costs internet down electricity bill doubled again last month years only state approved another rate hike prices again april', 'know many people reality check when they focused their paycheck taxes just aspect also matters what need cover pocket based personal situations prices services commutes plus more sure young healthy kids want settle with house beneficial hcol city making spending life still saving quite future life other hand someone wants settle have kids kids needs medical services basically point everyone needs something even just sprain twisted ankle property needs stability with their work doubt that better option this doesn even consider violence homeless drug situation raging currently also consider that disposable income money left after regular bills paid likely more value than local services sure globalization major brands consumer goods will different matter this accounts maybe total usage disposable income tops rest will restaurants leisure enjoyment cinema body treatments more that will mainly consist local services provided local labor conditions with high quality life eating healthy fast food with exceptions actual restaurant cooked food with healthy ingredients salad least meals week about meal average going saunas spas having cars owning flats with mortgage yearly unlimited transit pass drinking great original pilsner beers pubs multiple times week affording travel plane hotel once every months planned budgets more total monthly budget cover this people then savings investments covered salary taxes around after deductions gross wife pays part according proportional income compared mine that budget have fuck whatever money each month outside savings generally beer times with buddies money when kids discretionary budget food clothing utilities maybe some babysitting services will maybe increase month then need fuck whatever money anymore child birth medical expenses will fully covered much would need make match this lifestyle sorry long text provide context really could make situation better neither does wife']"
5,174,5_tests_code_test_testing,Lack of Code Quality Assurance,"['tests', 'code', 'test', 'testing', 'write', 'automated', 'writing', 'unit', 'developers', 'unit tests']","['testing code', 'writing tests', 'automated testing', 'write tests', 'test code', 'automated tests', 'testers', 'tester', 'testing', 'integration tests']","['Lack of Code Quality Assurance', '', '', '', '', '', '', '', '', '']","['writing', 'developers', 'unit tests', 'testers', 'think', 'software', 'tester', 'writing tests', 'automated testing', 'quality']","['minds here very much point that sometimes person that wrote code sometimes close problem write good edge case tests they know _should_ work with that knowledge they write test that matches code there some value having separate team also complete utter show once have development team that believes that _not their job_ identify catch problems with their code team blesses results team fault when blows _attitudes_ that splitting things sometimes causes completely utterly toxic goal having product that actually works there great developer figure what _write test case reproduce bug_ make sure that test case confirms that fixed make nice clean commits problem test case test suite then work with team through code review that code blows production developers wrote _also_ need involved tracking down fixing just developer team ones that wrote _that_ code because development team needs responsible producing product that works just something that more less checks boxes them throw over wall forget', 'guess never picked someone else code before that good test suite give example when tests made difference working piece system that only knew little about good unit tests handful integration tests against memory database wrote failing test changed code make test pass noticed that another test failed turned that code inexplicably used another module code reuse wrong area created class added appropriate unit tests updated code both areas class code cleaner than before knew that before called done manually test second unrelated area just case value rarely time writing test about making sure code stays working', 'that point everybody should responsible should manually balling your code well everyone elses need hire tester that after that tester does right then have automated tests prove haven introduced regression similarly with automation tests code absolutely need hire tester code code whether unit integration tests code test your code that developers expected code what stops apart from time writing more code prove your application works will continue work future realistically speaking testers just there break code easily argue that when your should testing which case just that tests also your peers your testers required']"
6,152,6_kubernetes_learn_docker_learning,Lack of Understanding and Control Over Deployment and Orchestration,"['kubernetes', 'learn', 'docker', 'learning', 'helm', 'understand', 'cluster', 'just', 'things', 'hard']","['learn kubernetes', 'kubernetes hard', 'kubernetes', 'docker', 'docker compose', 'helm', 'deploying', 'cluster', 'networking', 'infrastructure']","['Lack of Understanding and Control Over Deployment and Orchestration', '', '', '', '', '', '', '', '', '']","['kubernetes', 'docker', 'helm', 'cluster', 'hard', 'containers', 'knowledge', 'start', 'managed', 'people']","['this true everyone meet starting learn gets lost details clusters built managed constant advice spend time technology this order spin cluster google azure that order preference managed offering first learn technology designed complement docker learn about docker builds docker registries deploy using helm kustomize learn tool like devspace skaffold make your life easier next spin cluster laptop playtime minikube kind microks start learn about ingress controllers most importantly learn limitations running single node build your bare metal clusters using many options favourite being agree with people advocate that kubernetes overkill only deploy your code single server then that opinion correct caution give that today world cloud hosting infrastructure single server deployments production very rare lastly just like docker become universal standard packaging software propose that kubernetes complementary universal standard deployment hope opinions have upset many', 'easy know what learning something right same volumes currently tools allow work with containerized apps pretty easily thanks docker minikube ides generating docker build code attaching debugger those other host many more stuff okay networking docker little probably need depth about about kubernetes really wide subject basics easy does only specify problem starts when complex need real zero downtime need proper autoscaling need proper logging good health checks control over deployment vertical scaling horizontal scaling this stuff doable really yourself free your test local environment through every scenario know better learn trying watch about days then able yourself just feature after another with simple console subjects often very wide rather than hard there learn have take piece piece mentioned book that fine think books worth reading when already know basics have yourself works then connect dots haven read single book when create very first cluster with helm charts horizontal scaling based keda knew learnt everything trying testing looking solutions guides manuals docs examples leave books later till when actually understand them', 'kubernetes beginner topic what feeling completely normal first basic knowledge linux databases loadbalancers proxy networking required would better have experience with deploying something cons that next have venture into container world start with docker deals with above components next comes question control containers multiple disaster recovery multiple regions address this comes orchestration solutions docker swarm kubernetes hashicorp nomad straight starting learn kubernetes follow this route system engineering basics course docker docker swarm kubernetes when people telling that deploying kubernetes easy cheer keep learning will there']"
7,145,7_healthcare_wait_insurance_doctor,Long Wait Times for Healthcare Services,"['healthcare', 'wait', 'insurance', 'doctor', 'months', 'care', 'health', 'doctors', 'wait times', 'years']","['health care', 'healthcare', 'primary care', 'health insurance', 'care', 'bulgaria', 'seeing doctor', 'hospitals', 'insurance', 'doctor appointment']","['Long Wait Times for Healthcare Services', '', '', '', '', '', '', '', '', '']","['healthcare', 'insurance', 'wait times', 'surgery', 'appointment', 'better', 'private', 'germany', 'canada', 'month']","['same doctors working over europe bulgarians serbs romanians european healthcare systems have huge problems bulgarian worst have lived germany years have seen nightmares there friend mine died years munich after having incorrect diagnose months mother waiting months undergo very serious examination germany ended coming back bulgaria done days denmark would wait months even subscribed regular healthcare system enough there additional health insurance benefits everyone here which provides premuim service course things black white have problems actually other european countries while salaries best when having mind cost living example managed mortgage years brand building which located just minutes away from city centre this easily achievable other capitals salary only career which allows have sofia salary while living another town colleagues furthermore income property taxes among lowest gorgeous women cancel culture gender wars', 'honestly bulgaria your home post come across insulting mostly relaying second hand information since never been myself judge coming from extensively traveled upper middle class lady ymmv what important what important single year year with family also misses home kiev perception coloured that according food variety kind sucks most restaurants lower quality than many other countries very little ethnic authentic food most selection local balkan central eastern european food much things like indian malaysian japanese mexican whatever exists very authentic another example generally canadian food options europe better food quality selection generally agrees with this rates canada significantly above bulgaria even major city affordable healthcare education public transport commie block buildings pretty much entire city this coming from someone from ukraine much interesting architecture parks near sofia itself simply compare ussr richer countries country itself very digitized with apple most places either ukraine western europe while bulgaria most places expect cash honestly though biggest complaint just lack good places walk giant that most people train their dogs properly they just kind around unsupervised tend somewhat aggressive great holiday options incl greece hours this very much true seen some amazing pictures from varna black resorts mountains', 'flat just hurts more insurance contract deductible insurance doesn start paying until incur then after that plan employer offers covers approved costs visit after breaking came owed after insurance paid their share regular urologist visit prescription costs each time which require every months rather flat years when employer coverage deductible coverage just didn doctor ended with ribs that didn heal correctly after being broken seeing doctor broken ankle seeing doctor after animal bite possum hoping that regular vomiting violent torso pain would away until insurance that would cover time preexisting condition insurance wouldn cover treating least changed around years making denying preexisting conditions illegal seeing doctor years because making enough money make medical insurance followed earning enough rather flat approach even when making take that worry about costs every little item every little visit would have been nice doctor when unemployed working retail first years career when making enough actually doctor']"
8,140,8_tech_debt_management_problem,Tech Debt Management,"['tech', 'debt', 'management', 'problem', 'make', 'business', 'think', 'people', 'companies', 'company']","['tech debt', 'management', 'companies', 'managers', 'debt', 'incentives', 'problems', 'tech', 'organisation', 'company']","['Tech Debt Management', '', '', '', '', '', '', '', '', '']","['debt', 'management', 'think', 'people', 'companies', 'tech debt', 'problems', 'teams', 'change', 'good']","['worked some these companies basically they have business incentives that market leaders this subfield software exists most companies deliver value other lines business such greater manufacturing efficiencies patient outcomes this sarcasm because basically company gets more revenue better patient outcomes world rather than being faster delivering reliable features software example this part long whole digital transformation trend cooked bunch people popularized while where these incentives were supposed better align with whatever existing business culture processes were place never materialized into much because most companies that fairly large their respective markets basically only competing against themselves because larger organizations better able simply choose their markets customer base thus little immediate need innovate improve based upon crude figure something like share price innovations lead increased revenue share value that culturally most organizations basically have existential drivers such start need keep innovating collapse quickly make these changes more directly answer question companies spin these best guesses that there both legal technical reasons most organizations want send software anyone else because write down they staffed handle software community input much heck even highly technical organizations oftentimes this software with world class game engines wanting license because they couldn support licensees well technical level software produced frankly quite garbage little value world much code included absolutely this given working devops organizations where their business aligned high level closely delivering higher quality software doesn matter have great executives above their power within organization will capped below someone else unaligned with technology that will keep hampering your superior noble valiant efforts this primary reasons cited when people quit from under before wasn about manager leader about levels above that kept from enabling team work their hired skill levels expertise', 'have learn operator this back role with level that liked micro mange everyone entire company them what they want agree objectives time lines other deliverables when they extra things what they willing give other problem years experience working with infrastructure deployments running systems keeping lights built resilient systems know what takes make resilient agile environment most your cloud spending devs most other people they just want that been polished just touch being told they wrong they running absolute shitshows just people need very incremental approach working with polished pieces really sucks especially when know better could couple weeks move delivery forward months make everyone life easier this your problem mine have choose battles help where hold back told hopefully greenfield project where everything right from starting realise people snowflakes take critical feedback they been micromanaged most their lives haven much autonomy know receive feedback kinda when come with your years experience know best practices point system architecture process flaws they feel _very threatened_ would love some with more experience different perspective this work putting your knowledge forward getting excited about fixing things _very bad_ typically reprimanded this twice different organisations again this your problem didn pick right with right culture grown around some incredibly smart engineers over years really respected time they taken mentor help been given feedback perspectives changed crave these other organisations managers teams give they just want make sure everyone doing meeting deadlines innovations improvements just looking right team right culture hard search opportunity cost next years high holding right role years good back work make manager happy things while just taking paycheck until have enough retire that hoping future because make some pretty good money these roles those orgs always desperate people', 'tech debt thought about particular nondischargeable high interest loan unit paying taking debt time business folks think debt universally good thing because they ideally that debt with profits from what they with loan when take loan time going magically more time later that with some point just have spend time paying once that finding numbers cost that tech debt pretty easy looking interest payments debt come several forms oncall load from buggy poorly tested features extra design development time from overly complex poorly designed systems that modifying worst case customer pain loss from really bugs performance never going able will save though instead present done this would have saved because didn this best this outages incidents oncall tickets difference between estimated time deliver actual time deliver with high level tech debt that caused allowed them happen when tech leadership with spending development time dealing with consequences technical debt that will likely kick them devs ideally most expensive part tech company wasting half that cost interest payments loan making progress almost always going major concern']"
9,128,9_interview_people_questions_candidate,Lack of Technical Knowledge and Hands-On Experience,"['interview', 'people', 'questions', 'candidate', 'interviews', 'candidates', 'hire', 'like', 'good', 'know']","['interview process', 'recruiters', 'hiring', 'hire', 'interviewing', 'recruiter', 'interviewer', 'hired', 'interview', 'interviews']","['Lack of Technical Knowledge and Hands-On Experience', '', '', '', '', '', '', '', '', '']","['people', 'questions', 'candidates', 'know', 'interviewing', 'junior', 'hiring', 'recruiters', 'technical', 'interviewer']","['mean failure properly utilize preparation material that your recruiter gives might hire signal years when first interviewed they gave prep material read made study guides ready interview engineer told permitted anything from preparation material instead asked solve tedious mapping question without using standard functions data structures genius interview process there bravo since been faang including safely people work with know answers their questions most time interviewing anything other than throwing wall seeing what sticks would disingenuous think meme fits', 'more than science think have pretty good results over past usual maybe keep interviews extremely casual make them adversarial people talking feeling comfortable small talk minutes background talk about what what working what problems what type stuff doing that stuff focus specific experiences resume deeper deeper questions technically more abstract about they solved problem they chose over consider typically this will organically lead into unexpected places good candidates have watch bullshitters here some people very good hand waving over technical while still sounding like they know what they talking about people will slowly reveal their understanding fundamentals whether they apply that where gets good they make connections between what they done past what doing riff that also have small take home takes hours maybe that over candidates they walk through decisions they what this check technical knowledge asking know rather know what look over just knowing command look there google seconds last person hired much more generalized experience thinking much more line with solve problems competition extremely heavy thing except resume conversations were highly focused very specific tasks never mentioning understanding these tasks tied into larger project more like just grabbed tickets closed them hire people picture figure things done over most technically solid candidate there really only position required deep deep technical knowledge that very niche specialty subject that needed someone have deep knowledge', 'question sourcing your candidates been unsuccessfully trying hire near london while generally this what from applications indian name exactly same resume format like exactly only order reversed usually around years experience mark grocery list every single linux devops technology under hood experience usually listed either witch like companies some companies like verizon when talks them they were contracted through witch company when talk them these scenarios happen candidate doesn know anything answer basic questions about technologies they supposedly worked years candidate pretends there technical difficulties with their camera screen sharing internet candidate absolutely amazing hire them right away hired like this literally different person showed work funny hindsight moment when that happened started comparing screenshots from video interview video interview usually candidate amazing different person talking']"
10,102,10_people_time_company_like,Lack of Trust and Communication Among Teams,"['people', 'time', 'company', 'like', 'fired', 'work', 'place', 'manager', 'management', 'just']","['boss', 'employer', 'management', 'managers', 'worked place like', 'bossman', 'manager', 'disappointed cause thought', 'thought larger company', 'management time']","['Lack of Trust and Communication Among Teams', '', '', '', '', '', '', '', '', '']","['time', 'fired', 'management', 'leave', 'disappointed', 'blame culture', 'didn understand', 'boss', 'worked place', 'promoted']","['there almost testing they everything production seem have blame other culture that devops that garbage fire worked place like that your mental health know just quit popular response this really worked place like that years holy cranky edge angry even when wasn work weekends evenings feel much better having left moved miles away sometimes doesn feel like enough another place where unit testing people their mistakes there blame culture just learn from move with project nobody cares _who_ broke production just look what went wrong chalk experience', 'promotions grouped into categories progressive successive filling pair boots position above that successive employers will absolutely hesitate promote away from where deliver most company progressive promotions always cards good enough when pushing project problem solving your back enough time instead awaiting instructions management time allocated will taper meanwhile more work take closer being able demand assistant work with free some your time spend more time delivering results areas only deliver manage your assistant properly after choosing hire well then will facto position more senior responsibility than were before this more difficult more organic form promotion cascade into having entire team working demonstrate need followed strong results being stuck sign being good role being stuck sign being remarkably normal', 'this hired senior manager promised expand global effort promised overseas move signing closer spouse family when cards fell jobless year later team overseas refused answer emails never invited meetings never gave credentials that consistently worked never gave documentation access never gave bigger picture which tasked with enhancing platform security through analysis infrastructure given random tasks that were scrapped products they didn want looped they wanted meet legal requirement number based employees coworkers would speak their native tongue when troubleshooting looped very rarely during first quarter boss downplayed experience when questioned cybersecurity incident what done they literally mopped floor wiped repeated their deployment keeping everything same nothing mean nothing will hate tech faster than culture that doesn want inclusive folks colleague that onboarded same time different tech role interviews with other folks given connections clients venues whole works given nothing frozen before even given chance because nobody different country wanted involved still debating']"
11,99,11_docker_virtual_machine_container,Defining Consistency in Virtual Environments,"['docker', 'virtual', 'machine', 'container', 'virtual machine', 'containers', 'locally', 'just', 'hardware', 'environment']","['virtual machine container', 'definition virtual machine', 'docker containers', 'docker', 'docker container', 'virtual machine', 'virtual environment', 'virtualization', 'definition virtual', 'virtual']","['Defining Consistency in Virtual Environments', '', '', '', '', '', '', '', '', '']","['docker', 'virtual machine', 'containers', 'locally', 'hardware', 'dockerfile', 'different', 'docker container', 'application', 'python']","['went looking consistent definition virtual machine came back with different definitions explanations apparently only consistent throughline uses software instead hardware application virtualizes machine would have thought after reading wikipedia think containers qualify process virtual machine', 'docker only years although your statement definitely accurate basic tool this point encountered people born after that think docker always been standard tool encountered companies over last years that existed before docker speaking person born quite before docker still feels although consider standard tool difficult legacy companies engineers adopt docker when there existing toolset place that works pretty well maybe docker doesn much obvious benefit lift docker relatively high such very surprised when place using docker', 'docker here']"
12,91,12_cloud_just_services_managed,Multiple Cloud Management Complexity,"['cloud', 'just', 'services', 'managed', 'need', 'agnostic', 'like', 'people', 'providers', 'using']","['cloud provider', 'cloud providers', 'managed services', 'cloud agnostic', 'managed service', 'servers', 'server', 'managed', 'infrastructure', 'managing']","['Multiple Cloud Management Complexity', '', '', '', '', '', '', '', '', '']","['just', 'services', 'providers', 'multi cloud', 'cloud agnostic', 'kubernetes', 'serverless', 'cloud providers', 'infrastructure', 'managed services']","['what talking about really more obsessive urge prevent form coupling semi mythical cloud abstraction layer especially infra side especially when supporting large number application teams like just deploy everything using ansible migrate another cloud just spin there deploy code same even worse build http apis that abstract cloud provider services just build tools against those apis they cloud agnostic default also definitely built worked services that weren cloud agnostic could still locally usually using emulators cloud services they relied conversely seen cloud agnostic services that didn have tooling place them locally think supporting local development super important have business case multicloud driver should developer experience rather than cloud agnosticism sake', 'tools that have been brought into mainstream like kubernetesunless running real steel kubernetes best complication layer over underlying cloud tools team built real time based processing hugely scalable optimised speed price uptime point need kubernetes only would that have eaten most innovation budget would have done latency driven money spent inter transfers remember days nagios zabbix solarwinds etcso they were recognised even work allowed lead migration away from them then were half through replacing most splunk with graphite grafana based metrics instead rest alerting mostly handled custom inhouse __status point parser previous iteration platform this company self managed with school sysadmin mindset they were managing hundreds hand using some light ansible that retrofitted work with existing machines were using corporate load balancers vmware which immediately date moment deploy them that again just sysadmin unless have complete control over your stack with ansible then ansible just sparkling bash script worked company that deployed real machines virtually everything they used configuration system that older than remember what called used that machines were fungible could replace file server drop only limit fast could copy over xgig nics most place perl repo just configuration updates were applied weekly pushed system changes daily this salt made that easier especially many hosts sensibly ansible time think worked would take basic role they automated point that could plug unconfigured blade host turn within minutes bios updated networking configured each blade starting installed automation attitude either invent tools solve hypothetical problems badly supposedly high scale cant practically above hosts also balls deep actually create tools solve problems have', 'maybe faang back like tools that have been brought into mainstream like kubernetes automation tools such have great impact across many small large sized organizations done great enforce consistency immutable infrastructure that more approachable most when past scale resources seen start write their bash tooling watch devolve into some opaque thing that knows works what does seen platform teams devolve into managing updates hand babysitting operating systems every application deployed because treated long living gets worse when team leads move then someone else comes half bakes their flavor change even better when networking gets involved load balancing with where people roll their solution that certificate story that gets managed even start with rbac from platform perspective nightmare toil filled platform days should behind plenty companies slow evolve find pain perhaps luck history being network engineer infrastructure engineer benefit these tools that coming give some sort standardization giving power abstraction that platform teams aren micromanaging things that just sorted something like kubernetes gives load balancing high availability rbac networking routing resource management node draining rotations auto scaling sure managed yaml manifests doing lifting that abstraction bite still need understand core concepts things however people should understanding those concepts regardless amount work that takes small team startup that needs scale services immense without right working with platform team running over services multiple regions multiple database technologies analytics stacks auto scale aggressively serve over billion requests terabytes traffic month with over uptime also deal with operations security every other that someone wants throw metrics solutions come this also such huge remember days nagios zabbix solarwinds they were mostly static graphs showing snapshots what happens very high level have metrics everything feed that into anything self remediate escalate absolutely love wait evolve more previous iteration platform this company self managed with school sysadmin mindset they were managing hundreds hand using some light ansible that retrofitted work with existing machines were using corporate load balancers vmware which immediately date moment deploy them some older sysadmins were legitimately afraid rebooting servers because they were afraid they wouldn come back some machines over days uptime because they just couldn keep with toil also this creates wall between platform developers because turns into hand process where developers throw code over platform team implement some server load balance logic alone meeting criteria sadly that uncommon industry this team people trouble keeping alone deploy innovate outages this mode unavoidable pulling away from that school mindset starting over very hard sure that contributed management hires however from perspective using tooling standardization will only help build platform that actually grow making that predictable easy digest important understanding details underneath just know will never want back anytime before babysit kubernetes node issues upgrade woes that what takes that need granted this case faang they brain power build consistent platform regardless everyone below that though benefits greatly']"
13,87,13_agile_scrum_team_like,Lack of Alignment and Prioritization,"['agile', 'scrum', 'team', 'like', 'right', 'people', 'devops', 'kanban', 'change', 'management']","['agile agile', 'agile wasn', 'agile used', 'agile', 'know agile', 'happened agile', 'doing agile', 'checked agile', 'like agile', 'actually agile']","['Lack of Alignment and Prioritization', '', '', '', '', '', '', '', '', '']","['agile', 'scrum', 'devops', 'management', 'planning', 'testing', 'process', 'sprints', 'improvement', 'pushes']","['first times exposed agile product stakeholder attended agile training their main takeaway this great change mind anytime which correct response channel your inner malcolm remind them that just because they doesn mean that they should whole meaning word agile able pivot execute business opportunities quickly squirrel teams wrapped agile events when they should focusing delivering value worked with team months wasn able deliver anything because they were wrapped agile ceremonies every sprint their deliverable look getting better refining backlog they never made time improve their automated testing despite best efforts what maddens someone somehow still working primarily agilist learned helplessness people boss tell them everything they doing years they have interest ever thinking themselves proactively doing something smart company even just their team', 'well agile philosophy implementations know usually break down into either scrum kanban never felt scrum sprint point planning good least never seen anyone well point planning never right businesses change priorities every other month story points part scrum first they were invented jeffries team chrysler attempt abstract away estimates from meddling managment they tried ideal developer days only have management conflate them actual days hold their feet fire they changed name user stories story points come from extreme programming scrum business priorities change every other month that argument scrum because that just means every iterations your product goal changes none which scrum necessarily always best choice going criticize accurate about what agree agile should each team doing what works them never seen that always seen have scrum with sprints points daily stand never once question really works what saying have problem with incompetent meddling management developers want just code pushed around like chess pieces rather than participate making decisions disagree agile dead going around linkedin seems more like good agile just survive contact with apathetic devs micromanaging middle management egotistical executives which really shouldn surprise anyone seen mindset work well spades when military aviator working tech', 'agile']"
14,87,14_contract_life_work_years,Lack of Work-Life Balance,"['contract', 'life', 'work', 'years', 'company', 'hire', 'just', 'hiring', 'time', 'like']","['work life', 'work life balance', 'life balance', 'work', 'salary matters', 'hire', 'happiness', 'working', 'worked', 'work stake']","['Lack of Work-Life Balance', '', '', '', '', '', '', '', '', '']","['contract', 'work', 'company', 'hire', 'hiring', 'contractor', 'contracting', 'live life', 'wage', 'months']","['worked many years that just hate having work time work enjoy work just hate having time switched contracting years started working months months best thing ever life became amazing only issue with current state market economy take perm first time years absolutely hate working solution', 'maybe this will help will just average saying average things started years back never changed companies willingly didn have financial condition then later needed stability take care parents have moved through same company from middleware admin devops data engineer platform admin cloud architect each gave enough challenge time happy while reputation clout firm gave option lighten load when needed lost both parents cheated fought addiction finally here today with single thought that helped happiest longest what success happiness should anyone have right decide what happiness means does every aspect your life need certain place happy something more important than others accept what changed change what must smile because this life yours', 'just change roles take control your life impossible about attitude willing learn just have willing take what willing take lower wage personally have done range different roles quit back school quit without having another lined because giving panic attacks about what risks your willing take golden handcuffs only there because them stay money everything have worked several years hours week because wanted home while small gone back hours work week main income house always live life cheap have options rich poor just live life casually spending more money travel experiencing world fancy house only live once enjoy your self while your young']"
15,79,15_automation_automate_task_time,Managing Infrequent Tasks,"['automation', 'automate', 'task', 'time', 'human', 'tool', 'tasks', 'manual', 'problem', 'break']","['worth automating', 'automation', 'tasks automated', 'automate problems create', 'automating', 'reason automate', 'automate problems', 'infrequent task', 'tooling', 'manual work']","['Managing Infrequent Tasks', '', '', '', '', '', '', '', '', '']","['automation', 'human', 'tasks', 'problem', 'break', 'projects tool', 'automating', 'scheduling', 'tooling', 'work']","['problem that most time automation opportunities more efficiently resolved architectural changes configuring existing tooling rather than writing your program another problem that things could automate happen rarely they barely worth automating theory there lots opportunities practice have hard time finding them face those challenges navigate them', 'response comments though more automate more problems create because foresee everything that silly industry made huge advancements automation especially when comes deployment click deploys continuous deployment models dependent this sort paradigm does that mean have know about inner workings that need course automation more problems overly broad frankly incorrect statement majority cases derpy sentence structure', 'there more gain from solving infrequent task than just time involved documenting steps book scheduling context switch human error when whoever responsible doing task leaves doesn remember train team also these tasks happen vacuum they seems silly argue against this only time agree time tasks even then could make argument that should done reproducible purposes give example something worth automating']"
16,74,16_deleted_deleted anonymized_redact_anonymized redact,Lack of Trust and Transparency,"['deleted', 'deleted anonymized', 'redact', 'anonymized redact', 'deleted anonymized redact', 'anonymized', 'mass deleted anonymized', 'post mass deleted', 'post mass', 'mass deleted']","['deleted anonymized redact', 'mass deleted anonymized', 'deleted anonymized', 'anonymized redact', 'post mass deleted', 'anonymized redact giphy', 'deleted', 'comment removed', 'anonymized', 'mass deleted']","['Lack of Trust and Transparency', '', '', '', '', '', '', '', '', '']","['deleted', 'deleted anonymized', 'deleted anonymized redact', 'mass deleted anonymized', 'post mass deleted', 'reddit', 'scandalous', 'redact giphy', 'block import', 'comment removed']","['attempt silky birds afterthought society cough mighty this post mass deleted anonymized with redact', 'beneficial worthless full airport desert marvelous angle wrong this post mass deleted anonymized with redact', 'detail aware sand marvelous compare depend attraction historical this post mass deleted anonymized with redact']"
17,72,17_data_scientist_scientists_engineer,Lack of Data Scientist Understanding of Software Development Fundamentals,"['data', 'scientist', 'scientists', 'engineer', 'data scientist', 'data scientists', 'software', 'know', 'models', 'model']","['engineer data', 'data scientist scientist', 'data scientist', 'software engineers', 'data scientists', 'software engineer', 'software engineering', 'data science', 'reluctant work devops', 'scientist engineer']","['Lack of Data Scientist Understanding of Software Development Fundamentals', '', '', '', '', '', '', '', '', '']","['data scientists', 'models', 'software engineer', 'engineers', 'mlops', 'understand', 'machine learning', 'python', 'learning', 'exploratory']","['they always seem take longest work development always most reluctant work with devops believe that least because know jack squat about devops want honest effort before bothering devops gods since data scientists typically down comp path maybe only take class they often lacking some fundamentals when comes software development think trick normal devs engineers into thinking should know about because whereas they they know kind creates this awkward situation where play dumb inexperienced have devops hold your hand unashamedly because from devops perspective should know what they talking about what they some sense like data scientist might expect engineer know more about analytics pipelines than most because from perspective think well they database stuff backend application quite different', 'mean this away from asking would ever hire mathematician over software engineer well because software engineers average nowhere near good math data science really about software much often done python which what software engineers understand well good about understanding mathematical statistical relationships between features also strengths weaknesses different modeling strategies pulling together order cleanse data this basically whole field under emphasized amount prowess companies like google tied their ability identify junk valuable data extract insights from data which aren trivial extract using make predictions computational chemistry physics although spend time programming really only tangentially programmer wouldn hire software engineer replace well because probably take about years understand what looking', 'data scientist engineer']"
18,66,18_yaml_pipelines_validate_templates,Local Pipeline Testing Challenges,"['yaml', 'pipelines', 'validate', 'templates', 'json', 'pipeline', 'azure', 'validator', 'azure pipelines', 'need']","['yaml pipelines', 'stage yaml pipelines', 'azure pipelines', 'yamls', 'yaml parser', 'yaml', 'writing yaml', 'yaml based', 'pipelines', 'templates yaml']","['Local Pipeline Testing Challenges', '', '', '', '', '', '', '', '', '']","['templates', 'json', 'validator', 'azure pipelines', 'yaml pipelines', 'locally', 'powershell', 'parser', 'commit', 'writing yaml']","['loved ados yaml based pipelines years before yaml made easier test changes before being released rest repos template repo allowed merge request validate that steps actually worked before rolled version them everything relates scripting inside yaml template repo have step download scripts that accompanied yaml awesome have repeatable patterns want manage projects places debugging little annoying that part what makes merge request validation super nice feedback faster release engineer person company time ados probably could being really annoyed with ados just occasional thing', 'used love writing azure pipelines yaml they frustrating when working satisfying when actually seriously though that having commit branch frustrating just your work feature branch squash your commits when done also vscode extensions both azure pipelines plain yaml extensions help with syntax highlighting validation really that once used writing pipelines literally full time doing that yaml syntax just became second nature also some your stuff powershell bash scripts available tasks simplify things offer integrations with vault other azure services', 'yaml parser validator being nice azdo pipelines sure about local pipeline testing pretty sure into syntax issues sometimes your doesn throws false positives this post really made want look into local parsers maybe commit hook local pipeline testing haven used system that that function granted only used pipelines github actions build flows problem tricky part when decide built variables that azdo pipelines support just like with other pipeline system they have built variables testing locally does local system know what values assign these variables along with this your local environment does equal environment where hosted self hosted agent runs that well works computer must yours situation azdo goes think great jack trades master none main benefit worked with integration with azure other microsoft services create service connection azure with service principal authenticate pipelines azure pretty easily bashing anything everything opinion based experience would love other thoughts']"
19,63,19_windows_linux_microsoft_really,Windows Infrastructure Complexity,"['windows', 'linux', 'microsoft', 'really', 'ubuntu', 'server', 'like', 'apple', 'msft', 'servers']","['windows going', 'windows', 'windows linux', 'experience windows', 'linux', 'practically thing windows', 'microsoft', 'windows containers', 'unix', 'laptops']","['Windows Infrastructure Complexity', '', '', '', '', '', '', '', '', '']","['microsoft', 'server', 'costs', 'licensing', 'windows containers', 'ldap', 'windows going', 'licensing costs', 'distros', 'active directory']","['hate windows going going around very very long time more than likely huge city that work actually makes really easy productive deliver apps market very quickly only that msft finally their thumbs their collective arses embraced things like rest javascript they really cross platform compatible services world they done past years starting with windowsk really gain relevance server space specifically what made that company move windows couple things they didn have great experience with linux devs they original product lamp stack with perl really hard find talent that think they really ever beyond having hand tweak config files different environments everything those environments were different they didn really automate deployments being able find people develop really getting them that part developers still hard find easier find than perl guys around here started branch more more clients with product healthcare marketspace into detail about what product most hospitals already strong windows infrastructure they wanted integrate with that they wanted permissions able administer system they wanted core servers directly their domains management purposes', 'problem concerned practically only thing windows going server side granted pretty compelling reason tooling around unix platforms getting increasingly hard beat active directory great user administration employee laptops workstations feel gives particular advantages server side things grant somewhat biased have more experience with than windows still there stuff with linux that would much more complicated even impossible case docker windows', 'problem concerned practically only thing windows going server side granted pretty compelling reason tooling around unix platforms getting increasingly hard beat extremely compelling especially when consider rapid services built quite frankly excellent tools that they built ecosystem active directory great user administration employee laptops workstations feel gives particular advantages server side things explicitly server side that client management also huge what real encompassing solution does have match haven seen really degree integration that especially when consider things like microsoft operations manager']"
20,59,20_know_firewall_works_stateless,Lack of Understanding of Firewall Configuration,"['know', 'firewall', 'works', 'stateless', 'check', 'port', 'stateful', 'server', 'networking', 'ports']","['slow linux machine', 'server works', 'networking routing works', 'diagnose slow linux', 'networking routing', 'slow linux', 'routing works', 'stateful firewall', 'firewalls', 'ports']","['Lack of Understanding of Firewall Configuration', '', '', '', '', '', '', '', '', '']","['know', 'firewall', 'stateless', 'server', 'ports', 'network', 'linux machine', 'stateful firewall', 'google', 'stateless stateful firewall']","['networking routing works incredibly open ended what common ports common what diagnose slow linux machine mean sure posting specifically experience linux environment check running processes everyone ever touched computer should know this fair bonus points know htop what happens when send request google could answered numerous ways take hour explain depending deep difference between stateless stateful firewall your devops engineers expected know outs firewalls dont have security team sure otherwise server works under hood again incredibly open ended could take hour answer depending deep works fair game most places check disk space free fair game different record types their purpose fair enough your devops team also networking team otherwise terraform works', 'networking routing works hardly relevant network commodity cloud what common ports hardly relevant need google diagnose slow linux machine nice skill have someone museum people working modern environments check running processes something failing restart believe faster than troubleshooting looking single proces what happens when send request google this question about years some interview would question again would probably turn around leave team chances some legacy difference between stateless stateful firewall cares configure that kind stuff anymore learn service bought server works under hood answer this would could please explain transistors work they form modern this about relevant this question check disk space free linux machine again looking devops engineer sysadmin nobody really cares about free memory linux gets killed developer need extra storage just configure follow line your monitoring neither time crayons this hand works commodity different record types their purpose need google terraform works care works long surprising people know combustion engine works while being perfectly capable driving same battery charger care explain works would rather guess seeing rant your post might have better luck with relic sysadmin nearing retirement than devops engineer broaden your horizon', 'never opportunity work software side manage into fixinghardwarefor state vending terminals deadlines some software flashing managing tons local networks nothing complex router devices just cable that said been practicing learning home past year somewhere field hopefully something with maybe even devops hopeful devops certainly terrified applying cause think know enough that said imma answer these questions networking routing works think have halfway decent understanding just setup openwrt router with vlans managed switch trunk main test switch vlans expert know need proper dhcp server dish static need proper subject mask based many need need allow traffic through firewall what common ports dhcp those most common think diagnose slow linux machine well check processes what causing machine slowly always first step from there address what that issue program lack failing storage drive launch process manager know command head googles free check running processes know command head what happens when send request google well first server find than routed google address with handshake they match good difference between stateless stateful firewall just learned forgot this course imma though stateful store data going forward while stateless split with knowledge past imagine firewall this means firewall remembers traffic blocking blocking treats user client first time everytime server works under hood this reverse proxies launch site seconds actual server works that need choose either http need setup encrypt automation process gain cert this done either checks with placing file your server setting temp domain verify from there need ensure domain provider public potentially setup ddns enable proper port forwarding check disk space free linux machine lsblk path well first need know memory hogging processes like said know hand than just type works just mapping domains sends request which first checked cache level than goes server there some chatting back fourth exact steps then comes back with proper mapping different record types their purpose know what this means love info terraform works know works exactly know infrastructure code know great setting base systems much configuring systems beyond that know often used with ansible when used properly deploy hundreds same machine over over']"
21,59,21_prod_team_environments_teams,Silos and Lack of Alignment,"['prod', 'team', 'environments', 'teams', 'environment', 'developers', 'test', 'platform', 'devops', 'like']","['devops team', 'devops person', 'devops', 'team structure task', 'developers', 'platform team', 'devs', 'developer able', 'running prod', 'software']","['Silos and Lack of Alignment', '', '', '', '', '', '', '', '', '']","['prod', 'developers', 'test', 'devops', 'different', 'make', 'shared', 'platform team', 'devs', 'software']","['right boil down deeper anti pattern building environments before understanding what they here experiment person from each these groups define environment infra devops engineer software engineer engineer product manager data engineer sales everyone will give different definition have different case infra people environments usually thought networks databases servers namespaces with their deployments software engineers usually think environments place that certain revision code running might think where they test specific release product managers will often think environments features fixes releasable changes data engineers will think environments bubbles data with specific attributes sales people might consider them places where customers test certain change before release this root problem once understand this start figuring what actually needed whether certain person team actually asking environment something else', 'sounds more like cultural problem then devops problem remember role title cultural mindset your other teams doing their silo things then your company operating more like fiefdom then actual organization that works together think teams that provide platform platform team other teams that rely platform team aren getting what they need from platform team then they their thing like heroku just practice terrible security their shadow cloud projects wherever else advocating benefits having strong devops platform team capability within your company hopefully shifting culture this series workshops lunch learns showcase benefits also build allies within your organization these friendlies understand benefits find ways advocate amongst them them help bridge gaps between platform team other departments also leverage external benchmarks like dora check dora matrix more dora example these guidelines compare your companies practice against unfortunately shifting organizational culture more like marathon sprint requires patience stay persistent keep advocating change', 'anyone here know good legal compliance best practice reason blocking accessthe philosophies include applying maxim like principle least privilege that which allowed forbidden maybe through choice maybe standards like blocking access problem because going grant access requests quickly just soon fill these five vacancies team surely bugs making production will very rare event aren these developers testing properly have test environments troubleshooting heart devops that have test pipeline that have confidence your developers think they likely deploy buggy software production maybe aren ready devops large organisation will some point history have some chump their test code against production system send every customer mail saying hello world that happened when developers doubt hiring standards higher have developers stopping that happening again common sense professionalism would want google engineers have read only access your gmail account course wouldn loads private there were would want intern week placement able download entire customer database course wouldn people having access even read only access production system thing locking down things gives security team more political power every request reduce restrictions expedite request favour owed']"
22,57,22_production_developer_developers_code,Lack of Infrastructure Support,"['production', 'developer', 'developers', 'code', 'stack', 'need', 'people', 'work', 'just', 'doesn']","['developer experience', 'developers', 'devops', 'devs', 'developer', 'stack developer', 'tooling', 'development', 'develop', 'software']","['Lack of Infrastructure Support', '', '', '', '', '', '', '', '', '']","['production', 'developers', 'stack developer', 'people doesn', 'build', 'writing', 'stuff', 'deployment', 'fact people doesn', 'people doesn mean']","['this think that today barrier entry enough that especially small companies developers with little knowledge space basic system production deployment going company more than happy them instead hiring somebody specializing area this seems really blow goes unaddressed team product grows watched least company burn time same issues years because instead acknowledging need empowering people with distinct skillsets knowledge they content developers bumble through process learning reinventing wheel over over margins that they even developers growing siloed teams communicate with another there needs experienced leadership somewhere developers should have more responsibility over their apps what they putting production unfair inefficient expect will ever even have time become skilled practitioners these areas especially while already keeping with their normal duties just tech debit foundational infrastructure pushed aside drive more features foreseeable future seems like trend tasking devs with much this work will result engineering teams continuously wastefully toiling over fractured infrastructure built novices maybe someday tools will actually allow developers take this with limited knowledge resources though', 'hard disagree with since describing other extreme pushing patch every time wants something works think this what responsible team asks mean good team also doesn just deploy some experimental code production something works they idea that tests their code together with dependencies locally first then staging server then branch made whole thing code dependencies beta server finally when there sufficient confidence that everything works deployed production what have basically pipeline where product that develop comes seen combination application archive depending what changed during sprint what deploy production either full deploy above mentioned element medium deploy finally small deploy just part this that build from source only need patch update mojarra instead mojarra build entire again result artifact with incremental version glassfish our_company third build glassfish perhaps needless build goes through same automated test suite that being used only application code changed with this setup there negotiations begging sessions needed with team output sprint what deployed that', 'from other extreme thing hate about most developers that they have different kinds nails join boards together have full platform implemented base images available standards applications developed deployed extensive documentation this evolved over time along with projects business this represents _huge_ amount work being abstracted away every week have have another discussion about pulling database week language week because apparently were completely unable develop basic crud apps until hottest crypto document service database came along store retrieve data every time they think _their_ application deserves special snowflake status just making things difficult they could fire have this minutes this completely fails account _most_ actual work involved setting most production systems properly this being kept updated patched where backups where monitoring what disaster recovery plan where documentation never mind trying integrate into existing systems making sure appropriate subnet appropriately configured security groups this also completely fails account long tail even reimplement this _all_ needs maintained life your application time need make major infrastructure level changes need account different systems that need updated need migrations need migrate things need functionality existing battle tested modular templates provide implemented from scratch also maintained indefinitely most devs worked with aren well versed enough understand full immediate scope long tail they only project only plan through working shitfix required your dashboard example people that doesn change underlying equation most these things fact that only people will stop being turned into jumpbox some hacker group getting external blackholed after sends bunch spam because nobody bothered patch five years fact that only people doesn mean business critical could down indefinitely fact that only people doesn mean shouldn have local staging environment should working prod fact that only people doesn mean doesn need integrate into other systems where sourcing data authenticating users authenticating itself other systems fact that only people doesn mean someone doesn have maintain after gone following standard _should_ happy path that have worry about this stuff think your department just dropping ball']"
23,54,23_google_engineers_collab_oncalls,Oncall Brutality,"['google', 'engineers', 'collab', 'oncalls', 'sres', 'support', 'console', 'oncall', 'customers', 'operational load']","['force software engineers', 'engineers promote based', 'google sres', 'software engineers', 'caring operational load', 'oncalls infamous google', 'software engineers promote', 'swes responsible', 'google collab', 'smart google']","['Oncall Brutality', '', '', '', '', '', '', '', '', '']","['google', 'collab', 'oncall', 'operational load', 'real engineers', 'services', 'amazon', 'data', 'codebuild', 'google cloud']","['before withdraw your point guess have experience limited maybe more google company that happening still presume general attitude towards sres though oncall have rotations manned personed swes responsible dealing with customer issues mandatory sres swes responsible prod issuesi believe sres also have their rotation that because they always spread among timezones overall this muuuuuch better everyone involved compared oncalls remember barely sleeping week being norm teams worked cries another team different timezone similar google sres were shut down every single time customer obsession means delivering stuff fast possible then throwing engineers under still remember days wake multiple times night command manually literally minutes because engineers couldn take extra months right thanks thanks great team years with great engineering culture little operational load unlike google that rare', 'real engineers this googleism their caste system real engineers software reliability engineers rest industry doesn coddle their precious real engineers there such caste system google sres have same swes plenty people switch roles from other sres also well respected think anyone would consider them _not_ real engineers designing resilient scalable frugal operateable architecture load balancers servers caches queues dead letter queues their associated metrics alarms absolutely real engineering worth time attention same engineers that building core business value their company absolutely right that having people focusing that _really_ important having worked previously tell that when force your software engineers everything promote them based _what_ they deliver without caring about operational load with crazy oncalls poorly designed software there reason oncalls infamous whereas google', 'having worked previously tell that when force your software engineers everything promote them based _what_ they deliver without caring about operational load with crazy oncalls poorly designed software work while true that promotions create sorts incorrect incentives reason oncall brutal some teams because promotion orientated architectures that disregard operational load reason that company prioritizes moving fast shipping stuff customers have deep backlog customer asks want ship them quickly systems need secure durable available fast those negotiable they need operated automatically well that easiest thing compromise ship quickly have initially oncall improve operations behind scenes this usually customers always confused concerned ships something then releases updates year compromise security durability compromise engineer happiness during oncall first release after shipping immediate next step start improving automation operations this done with open eyes most engineers happy with ship things things quicker rather than releasing version chat software every year none this promotion orientated working backwards from customers']"
24,51,24_pipeline_branch_branches_environment,Main Challenge: Inadequate Tooling and Framework Support,"['pipeline', 'branch', 'branches', 'environment', 'code', 'deployment', 'building', 'cicd', 'tests', 'like']","['cicd prototyping troubleshooting', 'prototyping troubleshooting development', 'rapid cicd prototyping', 'prototyping troubleshooting', 'continuous delivery', 'devs', 'build _project _branch', 'execution instantly portable', 'devs deal', 'developer']","['Main Challenge: Inadequate Tooling and Framework Support\n\nThis label highlights the primary obstacle faced by organizations attempting to adopt DevOps, which is the lack of adequate tooling and framework support. The article discusses how many frameworks and tools exist but fail to provide robust support for managing multiple deployment types and resources, leading to increased workload and complexity for developers.', '', '', '', '', '', '', '', '', '']","['branch', 'cicd', 'tests', 'source code', 'pipelines', 'build', 'security', 'developers', 'deployments', 'staging']","['read comment didn devs deal with once complicated enough becomes feasible most devs because their core building software think segmented network zones hybrid networks retrieval secrets config from multiple sources deployment checks post deployment checks blue green deployments zero down time deployments migration assets keeping code reusable across multiple tasks common storage mounting across multiple private agents caching large intermediate builds cost management runner pools adding resiliency above your failing every second dashboards everything regardless title person does work most falls under devops your team devs maintain builds automated tests then great they cutting code features there plenty devs just lack experience curiosity deal with problems', 'this clever comment believe instance that continuous delivery general something that hugely undervalued this regard sort obvious have this opinion work this space truly believe this this think about this well tuned continuous delivery setup either self scripted service much more glue teams toolchain allows different components from source control system pipeline from database cluster from setup integrated into streamlined convenient developer experience structure maintain manage growing amount configuration scripts done well this allows your developers dynamically spin environments with artefacts built pipeline fully configured with databases provisioned everything version control system configuration states with auditable record what deployed where what config allows roll back forth well manage blue green canary deploys well thought through setups have game changing effect developer productivity they make developers self serving with less dependencies within team while increasing maintainability your setup', 'opinion this where well written frameworks repository templates come frameworks should robust enough deal with multitude different deployment types resources also friendly users creating repositories paired with repository templates user create repo from template fill handful variables indicate where their source code repository gitlab file they done jobs propagate should decided initially framework level user wishes change default behaviour they with either predefined toggle variable extending from framework former preferable opinion this more closely reproduceable research renovate this tool help keep dependencies date greatly reduced workload maintaining repos will create update some repositories dependencies tests pipeline giving confidence that going break anything good organisation opinion uses shared responsibility model generally speaking write majority frameworks devs they just plug they wish contribute frameworks they more than welcome raise they often they found another node module package manager they responsible running their deployments surrounding source code course provide help when they need unfortunately feel that some negative aspects speaking about inherent this line work mean this just platform engineering devops whatever term someone with blog coins industry mindlessly adopts this part tech whole practices tools that adopted always best speak sure they have some choice words about their employers framework last years alone think lost count many frameworks have come last only fall short whole thing continues again']"
