Agile Review
"Feeling that Agile methodologies ""suck"" for software development can stem from several factors. Here are some common reasons why individuals or teams might have a negative experience with Agile:"
"Feeling that Agile methodologies ""suck"" for software development can stem from several factors. Here are some common reasons why individuals or teams might have a negative experience with Agile:"
"If you’re experiencing these issues, it might be helpful to evaluate your current Agile practices, seek training, or consider whether a different methodology might better suit your team’s needs."
Agile is really unpleasant. Ultimately it’s about management turning the software development team into a machine.
"Imagine a class in school where you had to turn in a homework assignment every day, and you had to talk about the homework assignment with the class. It would get tiresome, the never-ending unrelenting expectation that you did something productive in the last 6 hours of work. Most classes in school have big assignments 1x per week or 2x per week, but no more than that. Because they know students need time to figure things out."
"If I have to work in an agile development, I expect to b"
Agile is really unpleasant. Ultimately it’s about management turning the software development team into a machine.
"Imagine a class in school where you had to turn in a homework assignment every day, and you had to talk about the homework assignment with the class. It would get tiresome, the never-ending unrelenting expectation that you did something productive in the last 6 hours of work. Most classes in school have big assignments 1x per week or 2x per week, but no more than that. Because they know students need time to figure things out."
"If I have to work in an agile development, I expect to be micro-managed, and to have my workday discretized by management into small bite-sized tasks. Instead, I much prefer working for teams that have week-long deliverables - something complex enough where I can’t be expected to have something new to report every 7 hours."
I really believe agile development fosters a toxic work environment. And I get tired of cleaning up (debugging) software that was written in a hurry to meet bullshit deadlines.
"As a manager, the ability to prioritize workloads, schedule employees/projects, and track deadlines is simply impossible without a reliable and easy-to-use project management platform."
"Trusted by over 180K global customers, monday.com offers an award-winning, customizable work and project management platform for all teams, industries, and sizes. With its easy-to-use interface, any member of your team can jump on and start using it immediately, no training required."
Try for free (Free forever. No credit card)>>
"With monday.com, you can plan, execute, and manage all of your teams' work in one place"
"As a manager, the ability to prioritize workloads, schedule employees/projects, and track deadlines is simply impossible without a reliable and easy-to-use project management platform."
"Trusted by over 180K global customers, monday.com offers an award-winning, customizable work and project management platform for all teams, industries, and sizes. With its easy-to-use interface, any member of your team can jump on and start using it immediately, no training required."
Try for free (Free forever. No credit card)>>
"With monday.com, you can plan, execute, and manage all of your teams' work in one place by automating and streamlining activities with no-code automations, saving you and your team hours of valuable time."
"With customizable dashboards, 200+ pre-made templates, 72+ integrations, and real-time notifications and updates, optimize processes, and boost team productivity and collaboration."
"You can easily track projects and meet deadlines using timelines, Gantt charts, and more. Discover why 180K+ global customers love and use monday.com.Try monday.com for free"
Because is
"All I have to say is, when our paycheck, performance reviews, and contribution assessments are “leaderless” - then and only then, and not before, will I be supportive of so-called “leaderless” teams. The root cause of Agile being so dysfunctional is that it is based upon a lie. There are no non-hierarchies in today’s business world. At least in traditional project structures everyone knows who the boss is, and at least the power structure is not based upon some complete unknown (and guess what, there is always a political power structure, either stated or unstated). Agile is so idealistic that"
"All I have to say is, when our paycheck, performance reviews, and contribution assessments are “leaderless” - then and only then, and not before, will I be supportive of so-called “leaderless” teams. The root cause of Agile being so dysfunctional is that it is based upon a lie. There are no non-hierarchies in today’s business world. At least in traditional project structures everyone knows who the boss is, and at least the power structure is not based upon some complete unknown (and guess what, there is always a political power structure, either stated or unstated). Agile is so idealistic that it ignores the realities, ironically, ending up in a lot more work - for everyone."
"The problem is that Project Managers / Managers feel that Agile is a concept meant for them, when in reality it’s meant for people doing the work."
"Agility comes out of common sense - that’s it. A university graduate can be taught to be ‘agile’ in about 1 minute of discussion: “1) If the process ain’t working for you, let us know and we’ll change it. 2) If you don’t know what the customer wants, doesn’t it make sense to show them what you make more often and get feedback?”. 9 times out of 10 a strong university student goes through uni life being agile, so it’s not hard for them to get. We just"
"The problem is that Project Managers / Managers feel that Agile is a concept meant for them, when in reality it’s meant for people doing the work."
"Agility comes out of common sense - that’s it. A university graduate can be taught to be ‘agile’ in about 1 minute of discussion: “1) If the process ain’t working for you, let us know and we’ll change it. 2) If you don’t know what the customer wants, doesn’t it make sense to show them what you make more often and get feedback?”. 9 times out of 10 a strong university student goes through uni life being agile, so it’s not hard for them to get. We just make up all this bullshit crap like a manifesto that confuses the crap out of everyone so that it can sound like Confucius."
"A project manager that has KPOs to get a project out on time, will spend days inside an ‘Agile’ training course accidentally coming to a conclusion that planning poker or SCRUM needs to be done in order to be successful -> after all their full time job is to ‘estimate’ timelines, so why not latch onto to a small part of agile training related to ‘estimates’ since agile has been proven to work."
"My Manger and I sat in the same agile training course, and I got out of it: “Show your solution as often as reasonably possible, and ensure all stakeholders are in the room when you do it” (Fair enough I thought: I didn’t need 24 hours of training for this)."
My Manager got out of it: “Don’t let your software engineers start any work without having all their tasks planned out in this amazing tool that lets you drag n drop task boxes around with numbers attached to them related to the complexity of the task you’re not really sure about yet”.
Didn’t take long for me to give up from the micromanagement and leave. I was the lead SME on that project.
"One thing that really stood out for me was an anecdote from the trainer of that course (I actually respect the guy, and he was quite honest that the agile concept does not guarantee success):“In one company, I led a team that switched to try an agile methodology and we succeeded in our project. One of the engineers left for a better opportunity and was quite happy they could leave on that successful note. Afterwards they had a similar project in which they used the same process again, and it failed miserably. Turns out from the retrospective that the engineer that left was doing really good work, and made the previous project a success -> the process they used had nothing to do with it.”"
HAH!
"I had been working in software for nearly 20 years. I had worked with Agile teams. I didn’t recognize Agile any more.When we started, it was about making life better for the people that created the software. With Extreme Programming it was ""yeah, let's focus on that stuff that WE know is important"": quality, clean code, taking time to clean up when things got messy. And recognizing the things we a"
"I had been working in software for nearly 20 years. I had worked with Agile teams. I didn’t recognize Agile any more.When we started, it was about making life better for the people that created the software. With Extreme Programming it was ""yeah, let's focus on that stuff that WE know is important"": quality, clean code, taking time to clean up when things got messy. And recognizing the things we all knew were true: That customers frequently changed their minds so creating huge, long term plans was often a waste of time."
"I had been a part of successful agile teams, not successful, partially successful, and going from successful to not successful."
"On every team where it was not successful, there was a common element: Management not buying into agile. This has showed itself in the following ways:"
1. Management wanting to dictate velocity (or what needs to be done) in a given sprint
2. Management not respecting sprint in violation and demanding items and priorities be constantly changed throughout the sprint.
"3. Management not enabling the engineering team to dictate their work (Telling them that something can be done in x time when it can't, telling them not to do x before y when x is needed first, telling the team what their commitments must be, rather than allowing them to commit to what they can do, etc)."
"4. Management not enabling and holding the product owner responsible (they dictate what is to be worked on next, rather than informing the PO of priorities and letting the PO decide)"
"5. Management not requiring teams to integrate into agile (for us, our PO's have never integrated with agile. They refuse to buy into the transparency)."
The solution to above problems:
"1. On the more successful agile teams, it's pretty much the opposite of the above items. Management keeping sprints stable, management enabling and trusting the team, management holding PO's responsible to prioritization, but not dictating it, management requiring that all teams that work closely work in the agile framework (in this case, the PO's). Our current PO director actually believes that agile means anything can change at any time with no planning, even so far as ""can x be done before y"". If you point out that if she changes mid sprint to do y instead, but you need x to do y, she just says you're not being agile. If you ask to look a sprint or two ahead on the impact of a change, she says you're not being agile, etc. It's pretty hard to have a successful agile team when management does not buy into agile or truly understand what it means. To her, agile means that there is no responsibility to plan so they can just not do that.2. Personally, I still am a big agile advocate. My primary concern with agile is that the reality is that it takes away the ability for managers to micromanage their teams. If the managers don't buy into that then agile fails miserably.3. The only fix for that is recognizing your team is shitty and stupid. Shitty and stupid are surprisingly fixable, like everyone else is saying on the thread there is no silver bullet, but under performers (in my experience) can be fixed and improved if there is a conscious effort. It'll be rough, but it can be done, the hardest part is often just willing to recognize that one is or a group is shit..."
"You work for a team that does scrum and micro-manages you like an assembly line worker, perhaps forcing you to clock-in before 9 or 10am for the daily morning standup."
"Or you work for a team that thinks it does scrum but doesn’t. Perhaps your 10 minute stand-ups became 1–2 hour sit-downs because people refused to have tangential discussions in separate meetings limited to the required attendees. Many managers use scrum as an excuse to make their schedules more convenient, meeting with the whole team instead of scheduling separate 1:1s with individual engineers although that wastes a lot of time"
"You work for a team that does scrum and micro-manages you like an assembly line worker, perhaps forcing you to clock-in before 9 or 10am for the daily morning standup."
"Or you work for a team that thinks it does scrum but doesn’t. Perhaps your 10 minute stand-ups became 1–2 hour sit-downs because people refused to have tangential discussions in separate meetings limited to the required attendees. Many managers use scrum as an excuse to make their schedules more convenient, meeting with the whole team instead of scheduling separate 1:1s with individual engineers although that wastes a lot of time for everyone else."
Or you work for a team that confused anarchy with agility. Agile is about building nested feedback loops through defined process so problems can be discovered and fixed sooner when the cost to do so is less. Agile does not mean no rules.
"Or you work for a team that likes the concept of rapid predictable release cycles, but isn’t doing necessary things to make that happen like developer written tests and continuous test/integration because its leaders myopically focus on code complete dates, ignoring the problems which result with customer ship dates."
Or your bad manager is using scrum so they can claim they apply best practices then blame engineers for management problems like slipped schedules.
Happy families are all alike; every unhappy family is unhappy in its own way - Tolstoy.
"I use agile because it’s awesome spending more time on new development, less on bug fixes, and less on things that won’t matter to the business. With tests for every feature and reproducible bug over six years, nearly all bugs are found before my code goes to QE even though there are over 150 interacting features. Most of the time we ship the first or second release candidate. In the unlikely event a customer experiences a bug they can have a hot fix within 48 hours of code complete. Releases have been predictable and low stress since I got things on track, even when we had 100% year-over-year growth going from pivot to profitability."
"I don’t waste time on scrum, and don’t go beyond an initial conversation with groups looking to hire me that do."
I think Agile sucks because it is too demanding in what it requires from a project team and the overall organizational culture. This is highly ironic because the original intent was to address shortcomings of other methodologies.
"It’s not acceptable to say that Agile is the best choice so long as you have a project team which is highly trained in agile, and so long as your organizational culture understands agile. Any methodology works if you have a highly trained team and a good culture."
As a methodology usually foisted off on an average project team and an unready organization I think Agile is
I think Agile sucks because it is too demanding in what it requires from a project team and the overall organizational culture. This is highly ironic because the original intent was to address shortcomings of other methodologies.
"It’s not acceptable to say that Agile is the best choice so long as you have a project team which is highly trained in agile, and so long as your organizational culture understands agile. Any methodology works if you have a highly trained team and a good culture."
"As a methodology usually foisted off on an average project team and an unready organization I think Agile is possibly worse than the alternatives like waterfall or spiral or iterative. Typical outcomes that I have seen, faithfully reported and tracked and discussed in daily stand-ups and biweekly sprint demos and retrospectives, include unacceptable documentation, unmanageable but ever-so-faithfully-groomed backlogs, and most importantly software that accretes and morphs and lacks clear direction due to constantly accepting new requirements and doing a minimum of grand design."
"Human nature being what it is, agile opens the door to allowing these bad things to happen. If you are an agile evangelist you’ll probably say that with a great agile team and a supportive understanding culture that these things won’t happen. I return to my previous argument - if you have a team and culture that great then waterfall would work too."
So agile is not a good methodology for average teams and average organizations.
"So much is said about building a company culture, keeping developers motivated and committed. There are dozens of guides and top tips widely spread across the internet, but what really makes developers happy and satisfied in their workplace? (and this is not Xbox or table football). What do they expect? And what would make their job more effective?"
It’s time for a 21st-century successor to Agile – Async Software Development.
And here are its 4 points:
1. Modern tools
"It is time to take advantage of async collaboration tools like GitLab, GitHub, Bitbucket. All of them provide three basic features:"
E
"So much is said about building a company culture, keeping developers motivated and committed. There are dozens of guides and top tips widely spread across the internet, but what really makes developers happy and satisfied in their workplace? (and this is not Xbox or table football). What do they expect? And what would make their job more effective?"
It’s time for a 21st-century successor to Agile – Async Software Development.
And here are its 4 points:
1. Modern tools
"It is time to take advantage of async collaboration tools like GitLab, GitHub, Bitbucket. All of them provide three basic features:"
Each deeply integrates version control with issue tracking.
Each offers rich prioritization and assignment features.
"Each wraps all that up into a slick user experience that any member of the team can use, including nontechnical employees."
2. Flexible work environments
"People should decide for themselves. Some people work better in crowds, others work better at home. Some love open space, others need more privacy. Some are early birds, others – night owls. Desks shouldn't be assigned to anyone by default, instead, companies might adopt a hotelling policy at their office."
3. Meetings only as a last resort
"No planning meetings. Product owners may fill issues in the issue tracker, assign priority, assign them to people, and set a release milestone. Engineers will know what to do by simply working on whatever the highest priority issue is in their queue."
No daily standups. Product owners may check the status in comment threads of issues and post a question when needed.
No backlog grooming sessions. Product owners review issue queue and should reassess priority on their own reaching out to others for advice when necessary.
"Creative professionals need long stretches of uninterrupted time, a meeting should be arranged only when all other channels of communication aren’t suitable for a specific issue."
4. Comprehensive documentation
"With better-documented workflow, workers won’t need to interrupt each other to search for ‘tribal knowledge’. Putting an answer in a FAQ or other form of async communication is much better than a constant shoulder tap."
Based on: Manifesto for Async Software Development.
Who agrees?
Navigating the Path to Financial Independence: Expert Strategies
"Hey everyone,"
"Welcome to the journey towards financial independence—an endeavor that combines the thrill of exploration with the discipline of financial management. As we delve into effective strategies that foster financial autonomy, let’s look at the proven methods used by savvy savers and earners, and how platforms like Freecash facilitate these approaches."
1. Master Your Money:
Understanding your financial landscape is the first step towards independence. Budgeting tools like YNAB (You Need a Budget) are indispensable in tracking
Navigating the Path to Financial Independence: Expert Strategies
"Hey everyone,"
"Welcome to the journey towards financial independence—an endeavor that combines the thrill of exploration with the discipline of financial management. As we delve into effective strategies that foster financial autonomy, let’s look at the proven methods used by savvy savers and earners, and how platforms like Freecash facilitate these approaches."
1. Master Your Money:
"Understanding your financial landscape is the first step towards independence. Budgeting tools like YNAB (You Need a Budget) are indispensable in tracking and managing your spending. An interesting way to boost income while budgeting is through earning opportunities on Freecash . Here, engaging in games like Dice Dreams and Monopoly Go can net users between $20 to $60 per game. Spending roughly 30 minutes daily on these activities can typically result in an additional $150 to $200 per month. For those maximizing their engagement, earnings can even soar to $300 monthly, providing a substantial uplift to their financial resources."
2. Spice Up Your Income:
"Diversifying your income sources is crucial, particularly in an unstable job market. Freecash offers a flexible avenue for earning through feedback on new games—a boon for gaming aficionados. This not only provides an extra income stream but does so through an enjoyable and engaging medium."
3. Smart Investments:
"For many, the investment world can appear intimidating. However, starting with small, manageable investments can demystify the process and lead to significant returns. Freecash supports investments into cryptocurrencies like Bitcoin and Ethereum, enabling users to start small—for example, buying fractions of a Bitcoin and gradually learning about the potential of digital assets."
4. Stay Informed and Engaged:
"The landscape of finance is constantly shifting. Staying informed through platforms that offer updated educational resources is key. Freecash not only helps users earn but also educates them through a professional blog that covers new earning methods, investment tips, and savings strategies, keeping users informed on the cutting edge of financial opportunities."
5. Set Clear Goals:
"Defining what financial independence means is essential. Whether it’s being debt-free, owning a home, or planning a dream vacation, setting clear goals is critical. Platforms like Freecash enable users to set these goals and track their progress in real time, such as funding a trip through Asia and even expanding it through diligent financial management."
6. Conclusion
"In conclusion, embarking on your financial independence journey is exhilarating and indeed challenging, but with the right tools and strategies, it is wholly achievable. Platforms like Freecash are pivotal in offering both the means to earn and the knowledge to grow financially, ensuring that every user has the opportunity to improve their economic standing and achieve their financial goals."
At the risk of pissing off the agile heads..it kind of dose.
"Agile methodologies can be very effective , when utilized properly."
"fact is for every circumstance agile dose not work… and you cant tell anybody who is sold on agile that. why? well its whats accepted at the moment, if your not agile you may as well not be developing at all. The amount of time I spend with people telling me “well if its not working your not doing it right” is total bullsh*t."
now I like agile… when it works.
Some hardcore agile coaches will tell you that being agile at its core means changing to what works for your team.
At the risk of pissing off the agile heads..it kind of dose.
"Agile methodologies can be very effective , when utilized properly."
"fact is for every circumstance agile dose not work… and you cant tell anybody who is sold on agile that. why? well its whats accepted at the moment, if your not agile you may as well not be developing at all. The amount of time I spend with people telling me “well if its not working your not doing it right” is total bullsh*t."
now I like agile… when it works.
Some hardcore agile coaches will tell you that being agile at its core means changing to what works for your team. Face it though what actually happens is some “smart cookie” decides hey lets force our way of working on everybody because it works so well in all these companies and made them more productive than ever. Of course it did they streamlined there development and are kicking out a release every week now.
Agile works well with a properly funded team without deadlines.
Agile dose not work well when you have a product feature that has to be out by x date where the “business” is only willing to pay x amount.
"There is great concepts in agile, breaking down walls, iterative development, code reviews and many more. The unfortunate truth is though business rarely sees a increase in efficiency over the first period or 2 and that puts the management under presser which puts the development under pressure which generally means you end up with deadlines so you have to do the same amount of work except 20% of your time is now allocated to agile overhead."
It works great if your in QA though!
The original notion of Agile[1] was:
"I don’t know any developers who dislike that, because it’s about empowering software engineers."
"I know some managers disliked its original form, because it implied a lack of managerial control. That’s because software engineers see themselves as the source of software and software excellence, but some managers see themselves as the sole source of software and software "
Footnotes
The original notion of Agile[1] was:
"I don’t know any developers who dislike that, because it’s about empowering software engineers."
"I know some managers disliked its original form, because it implied a lack of managerial control. That’s because software engineers see themselves as the source of software and software excellence, but some managers see themselves as the sole source of software and software excellence and software engineers are — or should be — mere instruments to implement managerial vision, like compilers with eyes and fingers."
"So those managers pushed back against Agile in its original form, and came up with what we sometimes see described as “agile”:"
It should be self-evident why people might dislike that kind of “agile.”
Footnotes
"Agile done right, is the way a band of programmers would organize their work. Once everyone is on location, before you get into the thick of things, brew a pot of coffee and have a quick chat. How are you getting on, did you run into any trouble, what shall we do today. Help / advice is offered where necessary and you carry on with the day. The programmers are talking to each other and helping each other out. Work is done as a team."
"Agile done wrong, is a micro-managers’ dream. You can instantly pick on “failing” programmers, harp on why things haven’t been done, blame people. Instead of a coll"
"Agile done right, is the way a band of programmers would organize their work. Once everyone is on location, before you get into the thick of things, brew a pot of coffee and have a quick chat. How are you getting on, did you run into any trouble, what shall we do today. Help / advice is offered where necessary and you carry on with the day. The programmers are talking to each other and helping each other out. Work is done as a team."
"Agile done wrong, is a micro-managers’ dream. You can instantly pick on “failing” programmers, harp on why things haven’t been done, blame people. Instead of a collaborative meeting to plan the day ahead, it turns into a daily “progress report”, a “triage”, or a “crisis planning meeting”. The sign of this is the programmers no longer talking to each other in the meeting, keeping their heads down, and “reporting” up the command chain to a “scrum master” / “project manager” who is no longer involved in actually writing code."
The first Agile is a fantastic way to work. The second “Agile” is hell on earth.
Here is my experience with SCRUM. My hope is that people will view it as a cautionary tale and will try to avoid the mistakes I have observed in multiple companies that I have worked at and seen the failure of SCRUM and agile development all together.
"First of all there is a difference between the two terms. If Agile is a class, SCRUM is the object that instantiates that class, that is agile development is a philosophy, while SCRUM is the means to enforce that philosophy."
I worked in three companies in a span of several years. Quit all of them due to being extremely dissatisfied with how things 
Here is my experience with SCRUM. My hope is that people will view it as a cautionary tale and will try to avoid the mistakes I have observed in multiple companies that I have worked at and seen the failure of SCRUM and agile development all together.
"First of all there is a difference between the two terms. If Agile is a class, SCRUM is the object that instantiates that class, that is agile development is a philosophy, while SCRUM is the means to enforce that philosophy."
"I worked in three companies in a span of several years. Quit all of them due to being extremely dissatisfied with how things were managed. Most if not even all of the time the introduction of new workflows (SCRUM or otherwise) comes outside of the development department and not from the developers themselves. Usually it comes as a suggestion from project management. Why? Well, it’s complicated."
"It all starts when a sales person, who gets big bonuses from finishing a sale, goes to a client. Without knowing what actually is possible (or caring, for that matter), they promise the client everything. The client is happy. While more experienced folks will know that there is always quite a bit of snake oil marketing going on, many are more than willing to sign a contract that promises them the stars since 1)it looks great in front of their boss and 2)a contract is legally binding, hence the responsibility is ultimately shifted towards the legal team if something goes wrong."
The sales person and the project manager then sit together and start checking what can be done in the given time frame and budget. Most of the time this is the first place where huge discrepancies are observed but not fixed.
"The project manager than goes to the head of the devs and tells them they need to get to work. In the end “something” is shipped to the customer and using various techniques of deception, best case the company, that provided the service/product, gets away with most of the lies they sold to the client. This cycle repeats over and over and gets worse, since the more you manage to barely scrape by, the heavier the push from the top gets. After all if you managed to get the job done 99 times, why not do the same 100 times?"
"At some point this workflow implodes. People start being demotivated, burned out, getting sick, friction among the dev team rapidly increases and ultimately people pack their stuff and find a new job. The less people you have, the less human resources you have to actually do anything beyond selling and managing projects. This high turnover increases the strain on the rest of the developers. Deadlines start to fail, projects start to crumble."
"The project manager sees that something is going wrong. They absolutely have to do something otherwise the deadlines will not be met and they will get into a lot of trouble (mind you, the sales folks seems to be immune to any critique and can continue selling snake oil for quite a while before someone points the finger at them). So they talk to their supervisor and say they need to check how to improve things. Funny enough, they got contacted on numerous occasions by this consulting company that sells training and does workshops in SCRUM, promising to improved the output by a lot. How much they cannot say since specifics are legally binding. ;)"
"The project manager asks for funding from their supervisor, who gladly coughs up a few thousand USD since it appears to be a good investment. The consulting company that consists of people, who benefit from your company introducing SCRUM and employing them to consult you during the transition, then fill the manager’s head with a different type of snake oil. One that tells them that all of their problems will go away if they use SCRUM and that SCRUM ensures a tight, highly flexible and observable workflow that would make their job in controlling the devs better and will also make the devs happier."
"The project manager comes back and immediately starts probing and pushing SCRUM down everyone’s throats. The other managers rapidly jump onto the SCRUM-hypetrain since they are also struggling. Of course no one asks the developers if this would fit the team at all. On top of that the migration period is literally nonexistent. You wake up and all of a sudden you just have to work with SCRUM. Why? Because ongoing projects that are already failing cannot wait for you to get into SCRUM, you just have to employ it because, if anything fails, it’s you that failed and not the methodology."
"SCRUM requires discipline, clear vision of your goals, good work ethics and well trained team that endorses it. It cannot fix mismanagement, it cannot miraculously create proper specs out of thin air and you can definitely not push it down a dev’s throat if they see it as something that will 1)benefit you as a project manager but 2)hinder their current workflow."
Because it’s often seen as a “silver bullet” that can magically overcome the essential complexities of software engineering. And it isn’t. Nothing is.
"Back about 30 years ago, I wrote and published a book titled Pitfalls of Object-Oriented Development (M&T Books, 1995). Now, I wasn’t a skeptic of OOD — on the contrary, I had just spent several years as chief architect and lead developer of a desktop publishing program written entirely in Objective-C. But OOD was seen as a “silver bullet” back then, with incredible hype as to what it could do, and I felt I needed to point out some of the actual "
Because it’s often seen as a “silver bullet” that can magically overcome the essential complexities of software engineering. And it isn’t. Nothing is.
"Back about 30 years ago, I wrote and published a book titled Pitfalls of Object-Oriented Development (M&T Books, 1995). Now, I wasn’t a skeptic of OOD — on the contrary, I had just spent several years as chief architect and lead developer of a desktop publishing program written entirely in Objective-C. But OOD was seen as a “silver bullet” back then, with incredible hype as to what it could do, and I felt I needed to point out some of the actual problems with blindly adopting OOD as the cure to all your ills. And the first three chapters of my book covered managerial, political, and conceptual pitfalls in adopting OOD (and of software engineering in general)."
"What I subsequently realized is that those pitfalls can be applied to just about any new technology or methodology (‘TOM’) that is being adopted as a panacea for the usual challenges of software engineering. And so I rewrote them to be more general, I have them posted online, and they are part of the required reading for my CS 428 students. I once posted this list to a private tech listserv, and one of the senior experienced developers there said, “You could substitute the word ‘agile’ for ‘technology or methodology’ and you’d be spot on.”"
"Along the way, in my work as an expert witness, I have frequently seen a trend in large software projects that are late. At around the second major schedule slip, the development organization will sometimes adopt “agile” as the methodology that will magically get them back on track — and this in spite of the fact that they’ve never used agile (or what they think it to be). The usual pattern is that they then abandon it after a few months, since it’s not working for them."
"The core truth is that methodologies, like programming languages, are just tools. They can’t overcome a lack of experience and/or competence on the part of managers, team leaders, or developers. People are what matter most. Give me a small group of talented, experienced developers, and I don’t care what language or methodology you mandate; we’ll get the job done, assuming it can actually be done."
Here’s my list of pitfalls:
Managerial pitfalls
Political pitfalls
Conceptual pitfalls
Your mileage may vary.
"Because it's broken.  For incremental changes, to small projects, it works fine.  For large, complex systems, it ignores anything resembling well thought out architectural design - leading to truly hideous systems."
"Agile doe snto suck for software development, that said it is not necessarily the best approach for ALL software development. You do not implement the cooling control of a nuclear reactor with agile… you do not implement the auto pilot of a plane with agile. You do implement web apps with agile, you do implement games with agile."
"The ship early anf often is great for costumer oriented products, but it is not the best when the product is oriented to a hard standard ( a nuclear safety standard for example). In some businness you have only one chance of deployment, and for those agile does not bri"
"Agile doe snto suck for software development, that said it is not necessarily the best approach for ALL software development. You do not implement the cooling control of a nuclear reactor with agile… you do not implement the auto pilot of a plane with agile. You do implement web apps with agile, you do implement games with agile."
"The ship early anf often is great for costumer oriented products, but it is not the best when the product is oriented to a hard standard ( a nuclear safety standard for example). In some businness you have only one chance of deployment, and for those agile does not bring advantages. On theother hand if you want to make a sales and support site for your company, you will lose a LOT of time and money if you do not make it at least a bit agile."
I honestly can't think of anything Agile adds that improves software development.
"Sprints? But everyone is already working diligently. If anyone isn't, it'll be noticed and dealt with. Code review sniffs em out."
"Standups? 99% of my coworkers don't need to know what I'm doing and vice versa. And for the rest, we have email/chat/etc. If a more global issue arises (e.g. I had to refactor a library) then there's email and maybe a meeting."
"Task management? We're already using a database, maybe even JIRA. They've been around since forever."
"User stories? We already have those, we call them specs."
Sprint r
I honestly can't think of anything Agile adds that improves software development.
"Sprints? But everyone is already working diligently. If anyone isn't, it'll be noticed and dealt with. Code review sniffs em out."
"Standups? 99% of my coworkers don't need to know what I'm doing and vice versa. And for the rest, we have email/chat/etc. If a more global issue arises (e.g. I had to refactor a library) then there's email and maybe a meeting."
"Task management? We're already using a database, maybe even JIRA. They've been around since forever."
"User stories? We already have those, we call them specs."
Sprint retrospectives? We already adopt best practices and drop bad practices. I got an email yesterday from John about this awesome Youtube video describing how to optimize something.
Sprint planning? You mean task assignment? Yeah we already do that.
"Adapting to change? We already use loose coupling design patterns, they've been around forever too."
"CI/CD? That's not an Agile idea, everyone's been doing that too for eons."
Tests? We've always had a QA department. We have test programs too. Nothing new there.
"But the most common reason is that Agile is abused or misimplemented. People before processes? Nope. Continual refactoring? No, no! Typical management thinking: Hmmm, I can hire a bunch of mediocre developers and Agile will make their productivity match good ones. Sorry, but that's not what it was about."
"Take ten good developers working without Agile, and another ten ordinary developers (or let's say eight ordinary and two good) using it. The first team will wipe the floor with the second. It won't even be close."
"If you want to boost productivity, it's very simple: train your developers. There's no substitute for skill."
Software development is chaos.  Agile is an attempt at order.  Order can be brought to chaos only temporarily.  Anyone who hates on it probably is being forced to follow it at all times.  Its good to have guidelines but rules are meant to be broken when the chaos is at a maximum.  The secret that takes most 10+ years to learn is to avoid religous affinty to any one style or practice for anything to do with tech but be willing to borrow from any of it.
"A lot of the hate, I find, comes down to one simple phrase: “in theory, theory and practice are the same; in practice they are not.” Let's start with what agile (small-A) software development is.[1] It's a rejection of the idea that you can document away the complexity of the software development process and arrive at a fixed scope, cost and timeline. Inherent on that is that if you ask enough questions, get enough people to sign on the dotted line (in blood, no doubt), there will be a plan that is inviolable. Which usually ends up with it being, well, ineffable. To misquote Aziraphale in Good O"
Footnotes
"A lot of the hate, I find, comes down to one simple phrase: “in theory, theory and practice are the same; in practice they are not.” Let's start with what agile (small-A) software development is.[1] It's a rejection of the idea that you can document away the complexity of the software development process and arrive at a fixed scope, cost and timeline. Inherent on that is that if you ask enough questions, get enough people to sign on the dotted line (in blood, no doubt), there will be a plan that is inviolable. Which usually ends up with it being, well, ineffable. To misquote Aziraphale in Good Omens:"
Best not to speculate. It’s all part of the System Specification Document. It’s not for us to understand. It’s ineffable.
"Agile (again, small-A) preaches the acceptance of change, moving in small increments, planning and building what you need and learning while you go. And, above all, trusting the team to execute on the vision and make choices during the process, especially for things that don't really matter."
"So, now that that's out of the way, let's talk about Scrum. You'll notice in the previous paragraph nothing talks about how to do this. And that's where people start to have a problem. Because it's all well and good for a team to say, “just tell us what the most important things are and we'll go down the list and we'll get as much done as we can until you tell us to stop,” but that's a much harder sell to most business people. They tend to wonder about, “will we have enough money,” or “will we hit our retail window,” or “how can we tell our client what they're going to get.” So into that void has stepped a number of methodologies, Scrum being one of the most popular."
"Scrum is based on the idea that you have to have some bone to throw to the other side. So in that regard there is estimation. But rather than do it in hours or dollars — because that level of granularity is either a fool's errand or costs about the same as actually doing the work — you do it in some abstract, relative metric, usually called “story points,” or something similar. Then, assuming that the team can be somewhat consistent and stick to the idea that the task their estimating is going to be either more complex or less than this thing they already did, over time you can generally predict what's possible during a fixed unit of time. This, combined with the idea of continuous improvement, cross skilling, and an embrace of not changing the thing you are currently trying to do is supposed to prevent the problems with the waterfall method (see paragraph 1)."
"So, where can we go wrong? Well, there are a lot of ways. Most of them stem from people just using the trappings of Scrum but not actually committing to what it — and agile methodologies in general — preach. A common one is trying to shoehorn hours estimates back into the process. The reason you're supposed to use complexity is to avoid the problem of, “well, Sarah does it it's going to be 3 story points, but if Phil does it we're talking 5.” The team is supposed to self-organize, so basing estimates on pre-assigning tasks is really against the spirit."
"Another big one is having stand-ups that don't actually provide any value. If anyone has been in one of these you'll recognize, “this is Ben, I'm working on ticket 2365, same as yesterday; don't have any blockers.” That's just noise. Another big mistake I see is doing too little exploration, assuming that, “we'll figure that out as we go.” Scrum is about the team committing to itself what it's going to accomplish. If you don't know what that is, how can you estimate? If you don't have an accurate (-ish) estimate how can you commit? So you discover what you actually need to do while you're doing it. That's not going to work well. Looking forward is at least as important as working now."
"Properly done agile (and Scrum) is hard. You need to balance the now with later. Do enough planning, but not too much and certainly not too little. It also means holding yourself accountable and being willing to accept feedback and change how you are working so the team can be better."
Most people aren't willing to do that.
Footnotes
Is nuclear power the biggest evil ever invented ? or is an incredible source of energy ?
Answer: it depends on how you use it!
Currently: Scrum is anti-engineering.
"Scrum like everything on earth is a powerful noble idea that capitalism took and turned into an evil monetisation tool, just like Christmas and Vegetarianism. The way it’s usually used, makes it nothing more than continues rapid prototyping while ignoring the technical debt, to generate your first sale and may be sell off the company, then the horrible code base becomes someone’s else problem. It is used by non-technical bosses to dri"
Is nuclear power the biggest evil ever invented ? or is an incredible source of energy ?
Answer: it depends on how you use it!
Currently: Scrum is anti-engineering.
"Scrum like everything on earth is a powerful noble idea that capitalism took and turned into an evil monetisation tool, just like Christmas and Vegetarianism. The way it’s usually used, makes it nothing more than continues rapid prototyping while ignoring the technical debt, to generate your first sale and may be sell off the company, then the horrible code base becomes someone’s else problem. It is used by non-technical bosses to drive developers and work them to the bone. To micromanage everything and ask you to log every minute of your day. All the accumulated technical debt doesn’t matter because all you need is to show your feature to sell them. Then once you do, you blame the current heroic development team for the bugs and you replace them with others. It is used so your trade code monkey are driven to produce, while the engineering talent is suppressed. It pushes Devs to choose the fastest solution to implement, not the best solution, because who has time to research and implement that new library or framework that will make you future proof, when you can hammer out few lines now, then when a change comes along, you delete that crap and start from zero. Why try to abstract and code re-use, when you can simply copy-paste. Because when you over or under estimate your user story, management look at you as either a thief, or lazy, or both. Because when you try to object and raise concerns about being hampered by all the tracking and estimation, management says: light process is a privilege that you have to earn. And don’t blame the scrum master for being a management puppet that is only there to spy on the team because he is not trained, but we don’t have the budget for real scrum training. But we are scrum."
Others agree as well
Why do some developers at strong companies like Google consider Agile development to be nonsense?
Agile Manifesto and the four values• Individuals and interactions over processes and tools
Resulted in endless interruptions while nobody bothers to write their thoughts down
• Software products over comprehensive documents
"Results in ball of mud products with no documentation on what the hell the creators were thinking, and what it should be about. I wants those comprehensive documents back! Please."
• Customer collaboration over contract negotiation
"Śo we accept collaboration in customers changing their minds every two weeks, and do not force them to make up their minds."
• Response to changes over
Agile Manifesto and the four values• Individuals and interactions over processes and tools
Resulted in endless interruptions while nobody bothers to write their thoughts down
• Software products over comprehensive documents
"Results in ball of mud products with no documentation on what the hell the creators were thinking, and what it should be about. I wants those comprehensive documents back! Please."
• Customer collaboration over contract negotiation
"Śo we accept collaboration in customers changing their minds every two weeks, and do not force them to make up their minds."
• Response to changes over observing plans
So we refuse to write anything down in a plan and just ‘do agile ‘ because it is ‘hip'…..
"YES I TOTALLY AND TOTALLY HATE HATE HATE HATE HATE AGILE!!! I SPIT ON IT, I P!SS ON IT."
What is Agile?
Scrum?
Kanban?
something else?
"I really dislike Scrum and I am a Certified Scrum Master. Scrum will sooner or later end up with poor software. In ways, it is anti-agile because there are so many “processes”. The worst thing in my mind is the 2-week sprints. Programmers start out doing good work the first week of a 2-week spring, then start feeling the pressure to meet their sprint commi"
What is Agile?
Scrum?
Kanban?
something else?
"I really dislike Scrum and I am a Certified Scrum Master. Scrum will sooner or later end up with poor software. In ways, it is anti-agile because there are so many “processes”. The worst thing in my mind is the 2-week sprints. Programmers start out doing good work the first week of a 2-week spring, then start feeling the pressure to meet their sprint commitments and start rushing the work. Never ends well. What ends up happening is they pad the amount of time a task takes. So we spend time guessing at effort instead of doing the work."
"Kanban, on the other hand, solves many of these problems, by removing some of the processes and working from a prioritized backlog (scrum does as well), but programmers take the highest priority task and work on it until done. No stand-ups, sprint planning, etc. Management hates it because they don’t ha..."
"I can speak only for myself, but it may be representative for at least part of wider group of so-called “agile-hating developers” so I will be using plural. :)"
We do not hate agile. We despise how companies are often smuggling waterfall under agile disguise.
Problem with current understanding of what agile is that people in charge often associate it with particular implementation. Scrum for example. They expect that we will religiously adhere to some arbitrary set of rules with disregard of them working or not for our use case - which is exact opposite of being agile and constantly looking for w
"I can speak only for myself, but it may be representative for at least part of wider group of so-called “agile-hating developers” so I will be using plural. :)"
We do not hate agile. We despise how companies are often smuggling waterfall under agile disguise.
Problem with current understanding of what agile is that people in charge often associate it with particular implementation. Scrum for example. They expect that we will religiously adhere to some arbitrary set of rules with disregard of them working or not for our use case - which is exact opposite of being agile and constantly looking for what works best!
"At the same time, when you are “agile” - in aforementioned way, you are still expected to provide waterfall-like estimations for things months away, which you rarely can reason about - without being a prophet, as the same people will change their requirements multiple times, without giving you space for changing guesstimation, they forced you to make before."
"It is even more problematic, as this kind of being “agile” is very popular in businesses outside tech sector (most of them!), which means that whatever they have is probably in state of disrepair, obscure for any reasoning about it and very, very fragile. Which makes even 2 week predictions about what we will be able to do at best unreliable and at worst pure fantasy. But don’t expect to be given much space to remediate this problem."
"So “agile”(note quotes) lovers create teams that chase this arbitrary deadlines (re-implemented from waterfall) with disregard for technical debt, basic hygiene (understood as CI/CD, automated testing, developer experience, developing common language with business etc.) and quality (re-implemented from waterfall) but with shitload of often unproductive meetings (re-implemented from waterfall)."
"Teams that are as much “agile”, as the where 20-yrs ago, but more frustrated because all of the bullshit pretending around."
What we hate is when people grab sexy buzz-word and slap it on waterfall-like process without any understanding there are not many canned answers in this field.
"To be truly agile everybody in organization have to accept, embrace this constant state of flux every business and every code base is in and act on it - implementing more iterative process, not cling to illusions of predictability under disguise of being “agile”."
"We love being agile, we hate being “agile”."
Because Agile is set up for doing development for one goal: web page delivery.
It sucks for just about everything else.
"I’ve done years of work in embedded systems. And everything is completely different. You cannot create a release from scratch in two weeks. The overall project is going to take you a year or four. There’s tons to do and you need to have an understanding of the resources that you’re going to need over all four years, some idea of how long it’s going to take, and the ability to plan, plan, plan ahead."
Agile eschews that.
"Yes, trying to hit minor milestones every two weeks is a good"
Because Agile is set up for doing development for one goal: web page delivery.
It sucks for just about everything else.
"I’ve done years of work in embedded systems. And everything is completely different. You cannot create a release from scratch in two weeks. The overall project is going to take you a year or four. There’s tons to do and you need to have an understanding of the resources that you’re going to need over all four years, some idea of how long it’s going to take, and the ability to plan, plan, plan ahead."
Agile eschews that.
"Yes, trying to hit minor milestones every two weeks is a good thing. Yes, interaction with the team and transparency is a good thing. Yes, frequent integration is a very good thing. And you can do all of those things without Agile."
But none of that is a substitute for having a plan in a Gantt chart and then executing to it.
"TL;DR = “Agile” is about a team adopting a mindset, not an organisation imposing a rigid process."
"I can think of a couple of reasons why “agile” is starting to get a bad reputation, to the extent that I’m starting to think that we need a different name for the original ideas as outlined in the manifesto."
"The first is that the original intentions of “agile” have been subverted by the usual subjects, amongst them micromanagers and business consultants. Essentially, they’ve taken the various tools, techniques and processes and twisted them to drive their agenda - bureaucrac"
"TL;DR = “Agile” is about a team adopting a mindset, not an organisation imposing a rigid process."
"I can think of a couple of reasons why “agile” is starting to get a bad reputation, to the extent that I’m starting to think that we need a different name for the original ideas as outlined in the manifesto."
"The first is that the original intentions of “agile” have been subverted by the usual subjects, amongst them micromanagers and business consultants. Essentially, they’ve taken the various tools, techniques and processes and twisted them to drive their agenda - bureaucracy and “busy work”."
"Along the way, they’ve managed to ditch the more inconvenient mindset aspect. Unfortunately, without adopting the corresponding mindset (as outlined at the Agile Manifesto), the tools and techniques are worse than useless."
Those of us who have been around a while and worked in teams with a genuine “agile” mindset have various names for this. A friend of mine calls it “Fragile”. I call it Agile In Name Only (AINO).
The second reason that comes to mind is that it’s seen as a “one size fits all” solution.
"In one sense, that explains the issue I’ve outlined above. Some organisations hear the buzzword (and consultancy hype) and naively believe that “agile” is a magic bullet that will fix all of their problems, without understanding what their actual problems are."
"The essence of process change / management is to understand what *isn’t* working before you change anything. Unfortunately too many folk don’t want to lift the lid on that, because the answers are often inconvenient."
It’s even worse when an attempt is made to apply agile processes and techniques to projects that don’t need them. The whole idea of agile was that it was an attempt to solve the problem of delivering a product in conditions of uncertainty.
"Most business IT projects suffer from a high level of uncertainty. The initial scope and requirements are often (even usually) ill defined, ill conceived or incomplete. Agile techniques and processes try to adapt to that by running projects in a series of Plan Do Check Act cycles, where we apply whatever lessons we have learned in the previous cycle to the next one."
"The top level goals remain roughly the same, but we use the additional information gained so far to refine and prioritise them."
Some projects simply don’t need this kind of approach.
"Pretty much anything mission and/or safety critical will have been specified very precisely and in exacting detail from the outset, often by other engineers or similar subject matter experts."
This also applies to low(er) level system and/or embedded applications. The interfaces and expected functionality are usually very well defined and there is (much) less human interaction (and therefore unpredictability) involved.
"In these sort of projects, adopting an agile mindset makes no sense at all. It merely adds an unnecessary bureaucratic overhead."
Because it doesn’t work for every company/team for various reasons:
Because it doesn’t work for every company/team for various reasons:
"In the end, there are just way too many factors that can mess things up when using Agile. So it’s likely that low quality and emotional stress will outweigh any of the benefits that Agile is supposed to provide."
"Imagine that there is some group of people that speak English, but never learned to read or write. Someone literate shows up and explains that you can make marks on paper to represent words and read them back. All of the illiterate people are very excited about reading and writing and decide they need to start doing this right away."
Some of the people start learning phonetics and practicing writing the alphabet in order to learn the principles necessary to be literate. It is slow going and very difficult work.
Another group of people start making random marks on paper to represent the words they
"Imagine that there is some group of people that speak English, but never learned to read or write. Someone literate shows up and explains that you can make marks on paper to represent words and read them back. All of the illiterate people are very excited about reading and writing and decide they need to start doing this right away."
Some of the people start learning phonetics and practicing writing the alphabet in order to learn the principles necessary to be literate. It is slow going and very difficult work.
Another group of people start making random marks on paper to represent the words they are thinking in their heads. They stand up in front of each other and hold a book open while pretending to read the pages. Of course they can't read so they just make up stories. They try their best to emulate all the practices they saw people doing that could read and write.
After a year how do you think the two groups describe literacy? The group that had focused on the principles behind reading and writing would be very happy about it. They can pick up a book and read it. They can communicate with each other by writing on a piece of paper. The group that tried to emulate the practices without first learning the principles would declare literacy a fraud. Both groups would be equally strong in their opinions.
Agile is a set of values and principles. Teams use these to make decisions that lead to good project outcomes. These values and principles guide the selection of different practices.
"There are a lot of people trying to ""do Agile"" by emulating the practices they have seen on other teams. They try to use Scrum, Kanban, Extreme Programming, etc. But these practices aren't Agile unless they are being driven by the Agile values and principles. Like the people who try to develop literacy by pretending to read and write, they get very frustrated."
"Agile is polarizing because it is easy for people to spend a lot of effort doing things that look like Agile without having any of the foundational beliefs in place. If someone says Agile is a recipe for failure, ask them to describe Agile. If they name a bunch of practices and no values or principles then it isn't actually Agile that they dislike."
Part one:
"The “Agile Manifesto” which first coined the term “Agile”, starts off saying:"
This is a study of some of the things that Small teams have used to achieve large results. Pick and use the things that work for you.
"This is a far cry from “you have to …”, “You must …” as implemented in most companies."
Agile as I see it consists of workers who do undefined work using undefined methods. And a leader who’s sole purpose in life is to enable the workers.
Everything else is a big company trying to force structure and form on a process which was chosen because programming is so much faster without i
Part one:
"The “Agile Manifesto” which first coined the term “Agile”, starts off saying:"
This is a study of some of the things that Small teams have used to achieve large results. Pick and use the things that work for you.
"This is a far cry from “you have to …”, “You must …” as implemented in most companies."
Agile as I see it consists of workers who do undefined work using undefined methods. And a leader who’s sole purpose in life is to enable the workers.
Everything else is a big company trying to force structure and form on a process which was chosen because programming is so much faster without it.
Part Two:
"I have seen many “agile projects” fail for the simple reason that the people ordering the software did not understand what was going on. If you are going to implement an “iterative” development process, please do yourself a favor and make sure your “Owners”, “Stake holders”, or “End Users” know exactly what they are doing."
I cannot tell you the number of times I have heard “Ready for Production” from the “End Users” when all major back end work is still “Simulated” by “End User” priorities. It is very difficult to keep your “End Users” expectations realistic when the screen looks perfect and seems to work.
"Short form: It favors pounding keys and releasing code, over building systems that work, reliably, with efficient use of people’s time."
"“Move fast and break things” - with minimal aforethought - is not a recipe for building big, complicated systems, with lots of moving parts. Pieces don’t fit together, it’s all too easy to end up with a mess of spaghetti code that’s impossible to maintain or extend. Folks spend way too much time fixing bugs, applying patches - than actually developing functionality. Daily scrums, and rapid release look great in management reports - until you start looking at me"
"Short form: It favors pounding keys and releasing code, over building systems that work, reliably, with efficient use of people’s time."
"“Move fast and break things” - with minimal aforethought - is not a recipe for building big, complicated systems, with lots of moving parts. Pieces don’t fit together, it’s all too easy to end up with a mess of spaghetti code that’s impossible to maintain or extend. Folks spend way too much time fixing bugs, applying patches - than actually developing functionality. Daily scrums, and rapid release look great in management reports - until you start looking at metrics like “tickets opened,” MTBF, MTTR, security incidents, and such. And releasing such code into mission- and life-critical systems borders on criminal (also into big financial systems)."
"And now we’re talking about having ChatBots “move fast and break things” - automated code monkeys, pounding keys, on steroids. In a day when “code is law” - it’s recipe for societal suicide."
"Because in software development, it's all detail and all of the detail matters."
"Also, when we are trying to get something coherent in sufficient detail out of those who want a thing built, we get the equivalent of this:"
Goal Donor: We know exactly what we want. All of the analysis has been done. We just need it implemented.
Developers: OK. Tell us.
Goal Donor: We want a thing that will make drinks.
Goal Donor 2: And other things.
"Goal Donor: Yes, but that's later. Let's just stick to drinks for phase 1."
"Developers: OK. Is it just one kind of drink you want, or is it any kind of drink?"
Goal Donor: In t
"Because in software development, it's all detail and all of the detail matters."
"Also, when we are trying to get something coherent in sufficient detail out of those who want a thing built, we get the equivalent of this:"
Goal Donor: We know exactly what we want. All of the analysis has been done. We just need it implemented.
Developers: OK. Tell us.
Goal Donor: We want a thing that will make drinks.
Goal Donor 2: And other things.
"Goal Donor: Yes, but that's later. Let's just stick to drinks for phase 1."
"Developers: OK. Is it just one kind of drink you want, or is it any kind of drink?"
"Goal Donor: In the end, we want any kind, but for wave 1, we just want tea."
Goal Donor 2: But we also want food.
Goal Donor 1: YES! But that's for phase 2. Let's stick to phase 1 for this meeting.
"Developers: OK. Umm... you've said ""phase 1, phase 2 and wave 1"". What are these things?"
Goal Donor: <Some stuff about an arbitrary division of the work based on annual budgets and politics>
"Developers: OK. As you said, let's focus on.... errr... wave 1 of phase 1 then. So you just want tea."
Goal Donor 2: Don't forget the biscuits!
Goal Donor: PHASE 2!
Goal Donor 2: Bob Bobson in the steering group is not happy that his stuff has been deferred.
"Goal Donor: Yes, but it has been and it's not up to us to change the decision."
"Goal Donor 2: But if we have some spare resource, maybe we could do some of his stuff in the first release to, you know, show willing."
....
Developers: OK. Tell us how to make tea.
"Goal Donor: It's easy. You boil a kettle, pour it out onto a teabag, add some milk and sugar, and you're done."
Developers: Ummm... Tell us about boiling a kettle. How does that work?
Goal Donor: We'll you plug it in and turn it on and it boils. What more is there to know?
Developers: But you then said that you pour it out onto a teabag.How do you pour a kettle onto a teabag? Does it melt when you boil it? Won't it make a big mess on the floor when you do that?
Goal Donor: Well obviously it's the water that you pour onto the teabag.
"Developers: Oh. You didn't mention any water. Where does that come from? And still, won't it make a big, hot, watery mess on the floor?"
Goal Donor 2: Look! All of the analysis has already been done. We've wasted one whole developer day talking about it already and it was supposed to be delivered last week. Everybody knows what to do. Can't we just get on with it?
etc...
Agile is not a silver bullet but these days it is shoved down developer’s throats like it is.
"Look, waterfall is bad, there is no doubt about that. People got themselves so burnt out by it that they thought doing the exact opposite is perhaps what will get good software out therefore the agile revolution started."
"Now there is nothing wrong with the core of agile itself but the problem is the practitioners, most devs are clueless about agile, they do worse than waterfall, they do what I call “scrumfall”, waterfall modeled as agile."
I had two senior engineers actually come up with a 50 page+ docume
Agile is not a silver bullet but these days it is shoved down developer’s throats like it is.
"Look, waterfall is bad, there is no doubt about that. People got themselves so burnt out by it that they thought doing the exact opposite is perhaps what will get good software out therefore the agile revolution started."
"Now there is nothing wrong with the core of agile itself but the problem is the practitioners, most devs are clueless about agile, they do worse than waterfall, they do what I call “scrumfall”, waterfall modeled as agile."
"I had two senior engineers actually come up with a 50 page+ document on multiple occasions outlining their approach but they were not bad engineers, just clueless on how to do agile."
"Even worse is non-technical program managers think they can teach engineers the right process to write code. This happened about 5 years back where a newly hired hot-shot TPM (technical program manager) who hadn’t written a single line of code thought it was a good idea to tell the engineering team how to manage coding time, NOT A GOOD IDEA."
"Therefore it’s clear what went wrong. The basic premise of agile is to identify the risky assumptions, get data to validate those assumptions, to fail fast, to deliver in small chunks of complete software is absolutely, undoubtedly right. But the nonsensical ceremonies that are primarily tools to micromanage need to be removed. Agile became a business. Non-technical folks thought they could patch in a couple of bad engineers (to optimize for cost) and make them work in an agile fashion to make good software, but building good software isn’t that easy."
No. Never.
"First off, old school is not bad. In fact, old school is far preferable to the Latest Craze."
Agile is not old school. Waterfall is old school. You make a plan. You write down what you’re going to do. You make a Gantt chart of how you’re going to do it. And then you sit down and do the work.
"Waterfall works really, really well for many types of projects. True, it’s not the Latest Craze, Agile. The problem is that Agile doesn’t work very well for many types of projects. It’s great if what you’re doing is developing a web page where you need a lot of feedback on the front end and will hav"
No. Never.
"First off, old school is not bad. In fact, old school is far preferable to the Latest Craze."
Agile is not old school. Waterfall is old school. You make a plan. You write down what you’re going to do. You make a Gantt chart of how you’re going to do it. And then you sit down and do the work.
"Waterfall works really, really well for many types of projects. True, it’s not the Latest Craze, Agile. The problem is that Agile doesn’t work very well for many types of projects. It’s great if what you’re doing is developing a web page where you need a lot of feedback on the front end and will have to iterate to converge. It doesn’t work so well when you have a tight deadline and cannot afford to iterate. It doesn’t work so well if you have clear requirements and don’t need to iterate."
People are slowly coming back to waterfall methods. Some of us never left.
Old school: good.
"Like everything else in this world, given enough population, every competing options will have supporters, and the other way around, haters."
"Not all developers dislike agile. I don’t. I just think it shouldn’t be run as is, but adjusted to your environment, including your customers. For example, scrum sacred sprint mechanism isn’t acceptable for customers when they face a bug that can both be ident"
"Like everything else in this world, given enough population, every competing options will have supporters, and the other way around, haters."
"Not all developers dislike agile. I don’t. I just think it shouldn’t be run as is, but adjusted to your environment, including your customers. For example, scrum sacred sprint mechanism isn’t acceptable for customers when they face a bug that can both be identified and analyzed quickly with one line fix that should be done in 5 minutes, they have to wait for 1–2 weeks. This is a common case..."
“…the agile process…”
"These three words sum up what I dislike…the idea that there is a singular process — or even a small number of processes that, if followed like a recipe, will magically give good results."
"It just ain’t so. As Fred Brooks famously said “[There is] No Silver Bullet.” People and culture determine success. Process is merely a tool. And like all tools, process (whether agile or not) can be wielded in ways that are either constructive or destructive."
"Now, that said, in today’s world, situations change rapidly and that means product requirements will change rapidly. For this reason,"
“…the agile process…”
"These three words sum up what I dislike…the idea that there is a singular process — or even a small number of processes that, if followed like a recipe, will magically give good results."
"It just ain’t so. As Fred Brooks famously said “[There is] No Silver Bullet.” People and culture determine success. Process is merely a tool. And like all tools, process (whether agile or not) can be wielded in ways that are either constructive or destructive."
"Now, that said, in today’s world, situations change rapidly and that means product requirements will change rapidly. For this reason, in most cases, lack of agility is not an option. To be successful, engineering organizations must be agile (at least to some degree.) The only question is how they achieve agility."
"Fortunately, over the last three decades (or so), there is a pretty good record of techniques and strategies that have been successfully deployed to achieve agility. It is incumbent upon engineering leaders (both formal and informal) to be aware of this body of work so that they can draw upon this knowledge. There is no one-size-fits-all process that will work for every organization. Wise leaders will recognize what strategies and techniques will work for their organization and they will forge their own process that supports the successful delivery of products."
Never lose sight of the fact that “agile” is a means by which success is achieved. It is never the end goal itself.
Because it's development. 
"You are developing, i.e. creating new things, spawning stuff from where there was no stuff before. That is the craft, the art. It's inventing things. The manuals for creating can never be complete, they will always only be indicative, guiding, but never give you the exact path, because in the end, what you are doing has not been done before. Not exactly, anyway."
""
""
"Developing software, especially complex software, is bound to result in problems, frustration, and the need to think in new ways. Problem solving is the core of the craft, and you need to embrace that it's ther"
Because it's development. 
"You are developing, i.e. creating new things, spawning stuff from where there was no stuff before. That is the craft, the art. It's inventing things. The manuals for creating can never be complete, they will always only be indicative, guiding, but never give you the exact path, because in the end, what you are doing has not been done before. Not exactly, anyway."
""
""
"Developing software, especially complex software, is bound to result in problems, frustration, and the need to think in new ways. Problem solving is the core of the craft, and you need to embrace that it's there, and also accept that you'll never know what form the problem come in. You might want all problems to be algorithmic, but the reality just doesn't work that way - it's just too chaotic and unpredictable. Reality is not elegant or simple."
"Sometimes documentation is wrong. Sometimes, you run into a weird hardware bug. Sometimes, you spend hours looking for a spelling error that was staring you in the face all the time. That is just the way it is. It is the craft."
"If software development was easy to do and easy to learn, everyone could be a developer. But most people can't, and therefore, good developers are hard to find."
I think you're demonstrating the difference between two classes of developers.
Both are people who aim to be high achievers.
"One class of developer, usually the kind that has been doing this sort of thing since they were children, thrives on the demands of the game, seeing it almost as a dare. The fact that it is hard to write software -- some have said it is the hardest thing that humans do -- drives them. Challenges represent play, like a game."
"Another class of developer has likely chosen this as a career solely because it is lucrative, there are many jobs, and so forth. For that person the pur"
I think you're demonstrating the difference between two classes of developers.
Both are people who aim to be high achievers.
"One class of developer, usually the kind that has been doing this sort of thing since they were children, thrives on the demands of the game, seeing it almost as a dare. The fact that it is hard to write software -- some have said it is the hardest thing that humans do -- drives them. Challenges represent play, like a game."
"Another class of developer has likely chosen this as a career solely because it is lucrative, there are many jobs, and so forth. For that person the pursuit is task-focused, and they become frustrated if their task isn't completed immediately. Challenges represent failure."
"I find this latter condition more common in university graduates who did little development prior to attending. This personality type is in constant competition with others and themselves, believing a career is an ongoing process of passing tests, faster than others. "
"For one the challenges mean the game is still on, and still fun, and these people simply become bored when it gets easy. Others want the game to end, for the path to be clearly drawn, so that they can run the pattern again and again without much stress, and then go home."
Both are needed in an organization.
"Okay, here are the reasons for not recommending Agile."
"Okay, here are the reasons for not recommending Agile."
Forcing to adopt Agile in these environments will lead to failure.
"Agile development works certainly reputable for the small and startup consultancies to launch themselves as they constantly need capable and motivated people to take over the full scale to increase their own work efficiency. The main problem with agile is that it is a challenge to patch the business in closed division of software engineering. They are struggling to launch yet they are not able to pick up on what work they take on. As a result, company in that condition can do open allocation and the company have to be accountable to their clients, yet agile works better on small consulting uni"
"Agile development works certainly reputable for the small and startup consultancies to launch themselves as they constantly need capable and motivated people to take over the full scale to increase their own work efficiency. The main problem with agile is that it is a challenge to patch the business in closed division of software engineering. They are struggling to launch yet they are not able to pick up on what work they take on. As a result, company in that condition can do open allocation and the company have to be accountable to their clients, yet agile works better on small consulting units.  Agile is polarizing because it is easy for people to spend a lot of strength doing things that usually look like agile but certainly it’s not. Usually there are lot of people trying to use Scrum, Crystal and Lean but these practices aren’t agile unless they are focused by the values and principles, Agile is a set of ethics and ideologies, team use those results that lead to good outcome."
I have answered about the Agile Development after many answer request in this Quora section : Ashwin Dhakal's answer to What is agile development? [ https://www.quora.com/What-is-agile-development/answer/Ashwin-Dhakal ]
This is the graphical representation of the Agile Model I draw for your convenience. Hope you like it :)
""
Disadvantages of Agile model:
1) This model is very annoying in case of some 
I have answered about the Agile Development after many answer request in this Quora section : Ashwin Dhakal's answer to What is agile development? [ https://www.quora.com/What-is-agile-development/answer/Ashwin-Dhakal ]
This is the graphical representation of the Agile Model I draw for your convenience. Hope you like it :)
""
Disadvantages of Agile model:
"1) This model is very annoying in case of some of the large software, since it is difficult to assess the effort required at the very beginning of the software development life cycle."
2) There is serious absence of emphasis on necessary designing and documentation of the ...
"The most prominent flaw of the agile development, in my opinion, are the continuous sprints. There is no respite. There is no break. There is always a looming deadline."
"Great in theory and on small(er) projects, but running a marathon of sprints for months or years is debilitating. We all run out of steam, all of us can experience burnout. I don’t believe it is sustainable over longer periods of time unless quality and mental health of developers are expendable."
"Agile is (was?) a step forward in software development methodologies, but it is in no way the final answer."
These things come and go - they get trendy - then the Next Great Idea appears.
I have never worked at a company that used textbook “Agile” - every single one of them adapted it in some way.
The underlying message of Agile is very good indeed - but some of the specific parts of it are dubious.
I still have a deck of “Planning Poker” cards collecting dust someplace - but we only used them a couple of times about four jobs ago - then dropped it.
I do think that daily scrum meetings are a good idea - I still like the whiteboard full of post-it notes and doing things in 2 week sprints (shorter right be
These things come and go - they get trendy - then the Next Great Idea appears.
I have never worked at a company that used textbook “Agile” - every single one of them adapted it in some way.
The underlying message of Agile is very good indeed - but some of the specific parts of it are dubious.
I still have a deck of “Planning Poker” cards collecting dust someplace - but we only used them a couple of times about four jobs ago - then dropped it.
I do think that daily scrum meetings are a good idea - I still like the whiteboard full of post-it notes and doing things in 2 week sprints (shorter right before main release - longer during initial development)…but in companies with a lot of people working from home - this is harder to do.
Burndown charts seem an unnecessary intrusion - and they don’t really work…and if you have teams that are SO large that you need multiple scrum meetings and a scrum-of-scrums - then I think you need to re-think your project design to have better partitioning of the work.
Some of the replacements for Agile are downright detestable. Things like “Team coding” are so horrible that I actively refuse to accept job interviews at places that practice it.
Over my long career - I’ve seen half a dozen systems come and go - and I still maintain that taking Agile and modifying it to suit your needs is the best approach.
"Before asking why, ask if."
"In a large scale transition to Agile from waterfall at a top US bank, morale was surveyed before the transition and after 6 months of working in an Agile way. The survey was given to everyone who was transitioning to a Scrum team. The survey found a marked improvement in morale and job satisfaction. In a healthcare software company in the EU with 400 developers we found the morale improved and people were happier."
"In working with companies across the US, EU and Canada in Agile transitions the large majority of people doing the work like the change to Agile and don't wa"
"Before asking why, ask if."
"In a large scale transition to Agile from waterfall at a top US bank, morale was surveyed before the transition and after 6 months of working in an Agile way. The survey was given to everyone who was transitioning to a Scrum team. The survey found a marked improvement in morale and job satisfaction. In a healthcare software company in the EU with 400 developers we found the morale improved and people were happier."
"In working with companies across the US, EU and Canada in Agile transitions the large majority of people doing the work like the change to Agile and don't want to go back to waterfall."
"Calling waterfall traditional is a bit silly. The first Scrum project was in 1993, the first paper in 1995 and the Agile manifesto was created in 2001. So Agile isn't new, especially when compared to the speed at which technology changes."
I am sorry to say that this perception or what you might have heard is wrong. Because data shows other way.
"Look at organizations that are of size and expertise of Infosys, Tata Consultancy Services, HCL Technologies, Cognizant etc… just do some research on these companies - you will find more and more Software projects they are doing are in Agile."
Look at number of people taking relevant certifications in Agile and Scrum etc.
"Look at number of job openings for Scrum Masters, Agile Coaches, Agile PMs etc."
Please do the research and find out the truth yourself.
"On a last word, Agile methods and Fram"
I am sorry to say that this perception or what you might have heard is wrong. Because data shows other way.
"Look at organizations that are of size and expertise of Infosys, Tata Consultancy Services, HCL Technologies, Cognizant etc… just do some research on these companies - you will find more and more Software projects they are doing are in Agile."
Look at number of people taking relevant certifications in Agile and Scrum etc.
"Look at number of job openings for Scrum Masters, Agile Coaches, Agile PMs etc."
Please do the research and find out the truth yourself.
"On a last word, Agile methods and Frameworks may not be successful in all Software Development Projects - but that is a different topic."
Because it sucks for the coders. It is a management tool to maintain control of the project flow. Do first. Think later.
"I’ve no idea, you have not told us."
But if I had to guess I’d say it is one of the following:
"I’ve no idea, you have not told us."
But if I had to guess I’d say it is one of the following:
"And I’m sure many other reasons. I can’t tell you which problems you are having as I’m not you. I can say that I’ve worked on a lot of teams, Agile (done well with a strong team) makes software engineering an amazing experience."
Agile has to be customized to work for you. Anyone who says there's a one-size-fits-all agile is going to hurt your productivity.
"To use agile, you must list your own priorities. Example: you're in a consulting firm and deadlines are crucial. Example: you write custom Android apps for elite resorts in Asia and your clients demand their apps “look and feel valuable”, whatever that means. Example: you maintain automation scripts for overnight transfers at a private bank and accuracy and efficiency are crucial, but nobody expects you to innovate."
Agile for R&D is completely different than agile for
Agile has to be customized to work for you. Anyone who says there's a one-size-fits-all agile is going to hurt your productivity.
"To use agile, you must list your own priorities. Example: you're in a consulting firm and deadlines are crucial. Example: you write custom Android apps for elite resorts in Asia and your clients demand their apps “look and feel valuable”, whatever that means. Example: you maintain automation scripts for overnight transfers at a private bank and accuracy and efficiency are crucial, but nobody expects you to innovate."
Agile for R&D is completely different than agile for quarterly maintenance releases. Don't let some scrum master push you around.
"Use agile as a means of categorizing different kinds of requirements, and differentiating between “requirements” and “work done to fulfill requirements”. This is a major shortcoming of older project management approaches."
Agile lets the people doing the work estimate complexity and push back on unreasonable requirements. It also provides transparency so that nobody is left in the dark.
"So, basically, “Make agile yours.”"
Agile is popular because it promises quicker production releases of more relevant code. In my experience there is a significant discrepancy between what management presumes they are getting from Agile and what their development teams actually deliver.
"Programmers like to code. Otherwise, they shouldn’t be in software development. Programmers love anything that streamlines coding. If it reduces effo"
Agile is popular because it promises quicker production releases of more relevant code. In my experience there is a significant discrepancy between what management presumes they are getting from Agile and what their development teams actually deliver.
"Programmers like to code. Otherwise, they shouldn’t be in software development. Programmers love anything that streamlines coding. If it reduces effort and emphasis on documentation and testing, then that is even better because programmers loathe such tasks."
"I have been tasked with approving code that Agile teams have produced. I will ask to see their tests and results. If they have any tests, they aren’t automated because designing test suites “isn’t in the sprint.” They may show me that they have done the most mundane, direct tests. Nothing for exception testing. No security reinforcement. Insufficient logging for production support. I can crash their code in minutes."
"I ask for documentation that should be presented for an application going into production. How will the application be supported? How will it be maintained? Again, documentation “isn’t in the sprint.”"
"Yet they believe their product is ready for production on a major financial system? Sorry, but I would never endorse Agile development for systems where failure could result in loss of life, injury or fi..."
"I have been taught through many relationships that I should never tell a person why the feel a particular way. I suggest you find it in yourself to better express your feelings and then come back to me with a clear path to genuine communication. At that point we can have this discussion. (pick up some more coffee on the way home, please)"
Agile is a mindset. It’s about embracing the fact that you don’t know everything upfront and learning along the way. It’s model is based on feedback instead of predicting the future. Close connection with the end user instead of big upfront analysis and functional silo’s. It’s awesome when it works.
"That being said : When only the ceremonies of agile are implemented, without that change in mindset, you land in development hell. No clear analysis, fixed deadlines with vague scope, 2 year plans that force you to hit a velocity of 35.7 on average."
"Most companies love to boast about being Agile, but"
Agile is a mindset. It’s about embracing the fact that you don’t know everything upfront and learning along the way. It’s model is based on feedback instead of predicting the future. Close connection with the end user instead of big upfront analysis and functional silo’s. It’s awesome when it works.
"That being said : When only the ceremonies of agile are implemented, without that change in mindset, you land in development hell. No clear analysis, fixed deadlines with vague scope, 2 year plans that force you to hit a velocity of 35.7 on average."
"Most companies love to boast about being Agile, but often don’t have that mindset. You mind be in a Scrumfall environment?"
"Agile doesn't suck for software development. The issue is agile isn't a process but rather a framework. Most organizations especially larger ones aren't structured to support agile while leadership wants deadlines and to know that developers' time is fully utilized (they're often the most expensive individual contributor staff for an organization). If one were to read the agile manifesto or take a course on it they'd find that agile isn't about increasing productivity, implementing processes, or any of the usual corporate reporting metrics. It's a mindset based on real world empirical evidence"
"Agile doesn't suck for software development. The issue is agile isn't a process but rather a framework. Most organizations especially larger ones aren't structured to support agile while leadership wants deadlines and to know that developers' time is fully utilized (they're often the most expensive individual contributor staff for an organization). If one were to read the agile manifesto or take a course on it they'd find that agile isn't about increasing productivity, implementing processes, or any of the usual corporate reporting metrics. It's a mindset based on real world empirical evidence on what works and what doesn't. One of other posters alluded to it being a process to increase efficiency and that's just not true — scrum masters in particular are meant to coach agile in an organization and break down old waterfall/process oriented mindsets especially as it pertains to software development. The issue truly is that organizations, both large and small, implement agile as a process. Jira becomes a ticketing system. Story points become a gauge for a team's productivity. Leadership wants to overload teams and interfere with sprints usually to cover up bad strategic decisions. Scrum masters become program managers or process analysts while product owners become program managers. Just like lean six sigma and sdlc, there'll be some new approach that'll take over in 5 to 10 years but nothing will really change, mostly due to agile really challenging old notions on what constitutes good leadership and an optimum work culture. To implement agile the entire organization has to embrace it, not just the development team."
"Because most teams are less Agile than they think they are. Agile isn’t an on/off switch, it’s a skill that has different fluency levels. Best way I’ve seen that describes this is the Agile Fluency Model."
"Agile is the best approach to deliver on well-defined workpieces of an all-embracing, strategy-driven corporate innovation programme, that is still bound to the not so agile, but battle-tested methodology and best practices for building and operating LARGE systems."
"Justified discussions and serious, project threatening problems will arise, when ""agile""-only trained folks are given the responsibility to run larger programs (digitalization - anyone?) and cannot adapt to the methodology that fits the size, complexity and interdisciplinary of a cross-organizational programme orchestration."
When revi
"Agile is the best approach to deliver on well-defined workpieces of an all-embracing, strategy-driven corporate innovation programme, that is still bound to the not so agile, but battle-tested methodology and best practices for building and operating LARGE systems."
"Justified discussions and serious, project threatening problems will arise, when ""agile""-only trained folks are given the responsibility to run larger programs (digitalization - anyone?) and cannot adapt to the methodology that fits the size, complexity and interdisciplinary of a cross-organizational programme orchestration."
"When reviewing and helping such derailed projects on track again, I have often found, that considering “agile” as the only cure for everything most often have come from not really having understood the fundamentals of agile methods: any folks have just learned to run an agile process, but have never learned the why and when properly."
"Just in the advent of massive, all in digitalization corporate bets, having the wrong methodology folks on your programme (most probably because young “talent” was chosen over experienced “dinosaurs”) will most probably put all your company at risk - especially when continuing your current business as is, is not an option and a plan B is not at hand."
because you don’t understand what agile is.
"when you’re a team of 1 or 2 developers, and no one else cares about your software except the users, agile is the 2 of you on the phone with a user talking about what they want the thing to do, then the 2 of you on your computers making it do that, testing it (with unit tests and an automated test system of course, don’t be stupid), and packaging it and delivering it to your customers."
"That’s it. No stand-ups, no anything else. Maybe some team programming if you get stuck on a problem, but that’s just normal - “hey, brian, come look at this fucking thi"
because you don’t understand what agile is.
"when you’re a team of 1 or 2 developers, and no one else cares about your software except the users, agile is the 2 of you on the phone with a user talking about what they want the thing to do, then the 2 of you on your computers making it do that, testing it (with unit tests and an automated test system of course, don’t be stupid), and packaging it and delivering it to your customers."
"That’s it. No stand-ups, no anything else. Maybe some team programming if you get stuck on a problem, but that’s just normal - “hey, brian, come look at this fucking thing, I can’t get it to work” “oh shit, is that all it is” - and so on."
That’s agile. Period. Delivering working software.
"Now, if you have a team of 10 people all working on different features and having to coordinate, now you’re talking about putting just enough process in place to make things go smoothly. Now you have daily stand-ups, probably use jira to track stories and work, create burn-down charts so you can see when features will be done, etc. etc., without which all of your effort would be wasted because coordinating 10 developers on a multimillion line project is a different task than 2 developers delivering a couple thousand line project. Complexity requires management."
"So the real problem isn’t “agile” - whatever you mean by that exactly - the real problem is applying just the right amount of process in order to manage a complex activity. When you do it right, the team becomes agile - i.e. delivers working software along with other necessary artifacts like documentation, maintainability, deliverability, flexibility, etc. - and they might not even use the word, but they’re still doing agile."
"Because the whole world is telling you that it's not that there's some problem with Agile but it's ""YOU"" who is doing it wrong."
