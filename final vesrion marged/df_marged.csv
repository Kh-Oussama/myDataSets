URL,Author,Publication Date,Review
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Miles English,2016,"This story is 100% true.
I got hired onto a team of construction workers to build a house. We set up a meeting with Management to find out what kind of house they wanted us to build, where’s the floor plan, what it’s going to be used for, who it’s for, etc. Management said that they didn’t know all that, we should just get started. They told us that we were going to use “Agile” which means that we just work on small deliverables and build the thing incrementally.
The developer team lead argued that we at least need to know how big the thing is going to be so that we can get started pouring the foundation, but Management told him they just don’t know. “What we do know,” Management said, “is that the house is going to have a bathroom. Just start there, and we’ll know more when it’s done. You have two weeks.”
So we just bought a port-a-potty, and screwed around on the internet for two weeks. Management was outraged. “You call this a house? This is the worst house ever! It doesn’t even have a tv!”
So we bought a tv and put it in the port-a-potty, attached to an outdoor generator. We were going to buy a a dvd player and get it hooked up to cable, but Management rejected the expense request, saying that they didn’t know if we needed it, and we’d come back to that later.
Management decided that we definitely need storage space, so we bought a boxcar and duct-taped the port-a-potty to it. Then to our horror they set up some desks and put a few miserable business interns in there. It went on like this…
After a few years the boxcar grew into a huge, ramshackle complex. It floods, leaks, it’s frozen in the winter and an oven in the summer. You have to get around in a strange maze of cardboard tubes, ladders and slides. There are two equally horrible separate buildings. We’re still using just the one outdoor generator for all power, so electricity is tightly rationed.
Communication between the buildings was a problem. For one of them, we use a complex series of flag signals. For the other we write notes on paper, crumple the paper up, and toss it over. Both of these methods were suggested as jokes, but Management really liked them for some reason. The buildings mostly talk to each other but they have to talk through us, so most of what we do is pass messages on.
It was suggested that we use paper airplanes instead of crumpled up balls, but the fat, awkward fingers of the Business Majors who inevitably take those jobs couldn’t be trained to make them. I built an awesome automatic paper airplane folder, but once again they couldn’t be trained to use it, so they just went back to crumpling the notes up in balls.
The worst part of all this is that it’s working. Everyone is miserable, but the business is making money. The bright side is that this nightmare complex is done so now we know what kind of building they actually needed in the first place, so we can start work on it. Obviously we can’t tell Management anything about what we’re doing until it’s finished. They noticed the gigantic hole in the ground where the foundation is coming in, but we told them that it’s a cache reset, and they mostly ignore it except when the occasional customer falls in.
I’ll probably be out of here before the new building gets finished. I could get a 50% raise by switching jobs, but Management still doesn’t think I should get a raise because I missed a couple sprints."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jim Thomason,2018,"I’m going to claim credit for coining this mocking phrase many years ago, though I wouldn't be surprised if I merely independently came up with it.
“The process isn’t important. What’s important is that we have a process!”
It summed up so much crap at so many jobs with so many awful managers. Where someone higher up the ladder would buy into the concept of The Process and then define something in some manner—sometimes they’d buy a pre-packaged kit of consultants and training courses, sometimes they’d make it up on their own, sometimes they’d cobble together some new piece of garbage from the previous two.
And The Process™ didn’t necessarily fit reality. So exceptions would be made. Sure, in this one special case, we’d do an exception to get something done, but we’d all feel really bad about it because we should be following The Process®, but we will next time. We never did. There were always exceptions, changes, modifications, because The Process© didn’t follow reality. I’d scream and jump around and wave my arms and suggest maybe, just maybe, we should change The Process© so that it reflected reality and we actually did something we needed to do, in a rigorous well defined fashion instead of using some BS that we couldn’t follow and would constantly need to special case. It always fell on deaf ears.
All of these places treated Agile as The Process™ that would make things perfect and magical and great and solve all of our issues. Several assumptions were always made:
We don’t need to write specs. We’re agile! We need to develop and iterate quickly!
Figuring out what we want in advance is a waste of time. We’re agile! We need to get changes done this sprint and then we’ll figure out after the fact if we did what we need. If we didn’t, we’ll do another sprint to fix it. We’re agile that way!
We don’t need to write documentation! We’re using Agile Processes and so our code is all self documenting as we quickly run through a sprint.
We don’t need to write tests! We’re using Agile Processes, and since we’re only writing small bits of code at a time we can be sure that it works!
We’re not going to have our users get together and document what they need or how the software should work, because that isn’t Agile! Instead, we’re going to start coding as fast as we can and give it to them and then listen to feedback after the fact.
We don’t have time to solicit a lot of user feedback after a sprint, since we’re busy starting the next sprint. What are we building in the next sprint? Why the new features, of course! And what are those new features supposed to do? We’ll figure it out as we go along. We’re Agile!
Needless to say, I’m a little bitter about how “Agile” is implemented most of the time. A lot of companies like to use it as an excuse for not writing any documentation or specs in advance, just vaguely demanding that the programmers create something within two weeks and refining it after the fact.
The sick thing is that the business side tends to be very happy with this. It’s minimal work for them (“Go build the spline reticulater! See you in two weeks!”), and they see the developers writing lots of code and giving them something quickly which they can comment on at the end of the sprint (“No. Not like that. Do it different.”), so it sure feels to them like their dev staff is being productive. And hey, they’re giving feedback and designing the process! And they only need to be on a couple of quick 15 minute conference calls every two weeks and not waste their time creating user stories or tech specs! Look at all the time they’ve saved! Agile!
The programming staff then races as fast as possible to churn out something that’s poorly defined and usually of poor quality as a result, but small in scope. There’s no documentation to refer back to exactly what they were supposed to build or what the user wanted. But as long as you can iterate fast, it’s cool.
Don’t get me wrong—I’m not an advocate for having your analysts spend 6 months locked in a conference room creating The Big Blue Binder full of tech specs, detailed written APIs, and UML documents. Those are an awful time sink that don’t adapt to changing needs and prevent a lot of development from occurring until the last minute.
It’s awesome to break apart a big task into a series of small ones. If your goal is solely “Build New Operating System”, it’s impossible to measure or report any progress. If you’ve got 5000 separate goals then you can carve it up. You can have one team doing design and spec writing for one piece, another team doing coding for the last bit, a third team evaluating the already produced code to ensure it still fits needs and creating change requests to adapt to business needs, and so on.
You need some sort of spec beyond a 5 minute vague phone call and less than The Comprehensive Total Document That Is Carved In Stone. But you still need the spec for what you’re working on, docs on how the individual pieces fit together, and a clear goal of what the final product should be (with the understanding that the business may change while it’s being built and the final product may be slightly different than what you started with). Most places don’t seem to want to do it that way.
If you’re really using agile methodologies to break tasks into small chunks, write clear specs for those pieces, get prototypes to stakeholders fast and adapt to their feedback, and put it all together into a product that your customer wants and not merely what you thought you were going to build, then you’re in great shape and it can work really well.
If you think you’re “Agile” because you don’t want to write any specs or follow any plan, but it’s okay because The Process© says that you should have a two week sprint no matter what, then you’re doing it wrong."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Harold Treen,2016,"This is a really good talk given by Dave Thomas, one of the original creators of the “Agile Manifesto”. It’s titled “Agile is Dead”.
Agile is Dead?! This is coming from one of the people who helped create the whole thing! What’s going on?
In the video he makes a good point: Agile has been coopted into something it was never meant to be.
It has been turned into a process that an entire industry has been built around. Scrum master training, Agile conferences, etc., etc.
So now when people think of “Agile” they think of some process that’s being sold. “Follow this process and you will build the best possible software!”. But no process or system is absolute. Maybe scrum will work for some teams, but for others it won’t. And when you sell people things that don’t work, that’s really frustrating for them.
This is a slide from Dave Thomas’s talk where he talks about what Agility is really meant to be:
That definition actually makes a lot more sense!
So in a nutshell:
Agile has become this bloated system that teams across the globe have been sold as the solution to everyone’s problems. Nothing is absolute though and the best paradigm is going to be different depending on the team.
Agility is the process of iterating quickly, reflecting on changes and using those discoveries to get yourself closer to where you want to be. Most of the other stuff is marketing and stuff people started selling to cash in on the hype."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Stefano Emiliozzi,2016,"In a nutshell Agile makes many assumptions that are unrealistic in most real case scenarios:
every engineer in a team can work on any task at the same speed/quality than anyone else
backlog items can be broken down almost indefinitely so they can fit 2–3 weeks sprint
the product should be in a deliverable state at the end of each sprint
a team scrum every day is a useful way to track sprint progression
If (and it’s a big IF) all these assumptions work in your case then probably Agile is the way to go.
Unfortunately most of the companies you’ll work for fail to meet some of all of the above, and Agile just turns into a burden that slows you down.
A few things that agile fails to capture IMHO:
different engineers have different skillset, so you can’t assign abstract story points to backlog items ignoring that
breaking backlog items in a myriad of smaller pieces to fit a sprint brings in additional complexity
90% of complex software cannot be in a deliverable state every two weeks
engineers hate meetings which are not absolutely necessary
R&D and design stages are fundamental in any project
In my experience, solid engineers are pretty good in self organizing and in delivering good quality software, discussing technical aspects in meetings only when necessary, and providing decent estimates.
On the contrary, mediocre engineers will provide subpar deliverables no matter which methodology they follow."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Russell Wark,2016,"""Agile"" in and of itself, isn't a bad thing. Deliver regularly, with small, achievable milestones, the minimum of overhead and with the capacity to accommodate change across a team. This side of the whole thing is fine. The ""spirit"" of the Agile Manifesto. That's what a lot of us were doing anyway.
Then the ""scrum coaches"" came and fucked it all up. The evangelical religious zealots of the development world. ISIS with a smile and a MacBook.
Our employers paid these fucking charlatans loads of money to weigh this simple, flexible process down with so much additional baggage, so much additional jargon and with so little appreciable improvement in productivity that they ruined the whole thing.
And what's with all the meetings? What a waste of time. Some of us aren't confident standing up in front of a roomful of people and talking, that's just how we are. Just send us an email or Slack message if you want our input and I'll answer you when I can down tools - you're throwing off my groove. I work asynchonously.
Taking all this additional bullshit into account slowed us all down, made previously productive developers unproductive and turned the process of software development into a buzzword-ridden, micromanaged, homogenised manufacturing process. No wonder some of us hate it. Scrum coaches - you can take your stories, points, burndowns and fucking planning poker and stick them up your collective arses (sideways if possible) and employers - trust your developers to know what they're doing, that's why you hired us."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Michael Croft,2016,"About 8 years ago, a company I was at was acquired by a larger company. We were told we could either use the official Waterfall model of our new parent or we could adopt Agile.
Our VP, being no fool, chose Agile. He hired an Agile Consultant to come in. That’s where things started going wrong. Said consultant promised the VP that we would be “ten times as efficient” using Agile than we had been before. He taught us the rituals and methods and we had all the roles assigned and we all dug in to our backlogs and came up with estimates. The Consultant and the VP and his Directors were appalled by how long we thought it would take us to do what they considered “easy” work.
So we used their estimates, which coincidentally would’ve resulted in us being about ten time as efficient as we knew we were. With no other infrastructure or institutional change to make it happen. The first Sprint gets done and nobody has a deliverable, because nobody had a task small enough for us to get done in that time box.
“Why weren’t we ten times as efficient?”, the VP asked the Consultant. “It is because your developers are untalented hacks, who can’t do their jobs.”
So, yeah, that must be it. It couldn’t be a poorly-planned and poorly implemented transition with no room for learning. It couldn’t be the Consultant promised things he was never going to deliver. It was us. We just were bad at our jobs, and resistant to change.
Do I dislike Agile? Actually, no. It’s possible to do it well, to follow Agile principles from the bottom up and get some results. Turns out that almost any process improvement methodology will yield results, because people who are concentrating on it will make improvements in areas that are pain-points. You could implement waterfall at a poorly-working Agile site and make improvements.
Just be careful about the consultants."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Carsten Saager,2018,"Because of this
“Agile has to be done right” - It only seems is rarely the case, because it of the inherent instability the cartoon illustrates.
After some years I figured that agile methods have their place and are successful if some conditions are met.
Consensus of The Big Picture
The Big Picture has to be clear to anyone and there must not be different interpretations. It is very inefficient and frustrating to reinvent the wheel each time a new requirement is injected that questions previous assumptions. There is a difference between over-engineering and non-engineering in the end.
The right size
There must be a reasonable number of stories and resources. The process must be adapted to the size. It is not reasonable to create 20000 stories and just try to fit them into the sprint windows. You will never have consensus on the priorities ever. As bad as it it sounds, such projects are better segmented in milestones that focus on a few major functions.
Don’t be religous
A few tasks are too complex to fit into sprints, trying to reduce them in size to fit in promotes dangerous short cuts. I saw enough evolutions being shelved because the sprint cycle was always too short to implement it.
The right Client
Their must be real client that works actively with you and not against you. “Agile” is not a quality criterion, some clients fall for that. The client also has to understand it and be able to give you timely and consistent feedback."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,John Test,2016,"I am really glad someone asked this question because some of my friends/colleagues and I were going to start an IT job board only for positions that DO NOT use Agile. Or at least not a bastardized spawn of it.
The problem as some others have mentioned already is the framework that gets attached to Agile. Normally this is Scrum. Now Scrum has different ways to do it but the most common version requires daily stand-ups, bi-weekly Sprints/planning, retrospective (for f*ck’s sake), demos etc.
I have now been through 3 companies in the last 7 years that started Agile/Scrum combo exactly the same way and did not have a single happy developer after this.
This is how it starts:
PM: Hey man how about this Agile thing. Everyone is using it these days.
Director: Oh that sounds great! I’ve been hearing a lot about it and devs are going to be really happy!
PM: Well instead of getting updates once a week we will be getting them daily! and.. and.. we will be able to see a demo bi-weekly! :) :) :)
… he’s got this sadistic look in this eyes that this will allow him to **truly** rule the dev team and if he has the Director on board, no one can challenge him …
Director: I keep loving this thing!
… at this point the PM and Director already have the impression that this one specific way of doing Agile/Scrum is loved and cherished by all devs in the world…
… they are double excited since they got told “it was created by developers for developers” …
… news is broken to Sr. Devs and TLs
Dev: hmm I’ve never done Agile before but sure.
… being very careful not to offend the PM or director, they ask subtle questions …
Dev: so Agile is a broad idea, how exactly are we implementing it?
PM: Well the best practice (he’s laughing in his head, sleazy bastard) entails daily scrum and bi-weekly demos/planning. But hey what’s better being in constant communication with the stakeholders/customers/management.
Dev: hmmmm. [ thinking: is it time to look for another job? ]
… the company goes and hires a scrum master….
SM: so how do you guys want to do this?
PM: well how about daily scrum and bi-weekly demos?
SM: well that’s one way of doing it but maybe we should talk to the team?
PM: no need. myself and Director assjack prefer it this way.
… SM being newly hired doesn’t want to argue…
Initially all the devs, devops, QA in the team are patient while the spoiled child PM is driving sexual gratification from all these added meetings. The post-scrum parking lot turns into an hour meeting daily as the spoiled child really has nothing else to do so he is wasting everyone else’s time as well.
After a few months most devs are tired. Some have already left. Couple jumped ship immediately after Agile was announced. The ones that are sticking around are due to camaraderie, nostalgia, unmarketable, or some other reason.
Ask them if they are happy.
The answer will always be a RESOUNDING YES!
Ask them if they are ok with the management
The answer will always be a RESOUNDING YES!
Ask them if they are ok with Agile
The answer will always be a RESOUNDING YES!
But if you listen real close, you can hear the bleak reality in the daily calls, demos and planning sessions. You can hear it in the increased sick time or other personal leaves. You can see it in demoralized attitude of the team.
The developers (especially Sr.) do not feel respected or trusted when they are asked to say “What did you do yesterday and what will you do today?”. This is the most demeaning question you can ask someone important to the bottom line of your company.
F*ck Agile!
F*ck Scrum!
Update: I mean no disrespect to any PMs, SMs, or Directors in general. The story I wrote is a very generic form of how the Agile process is started in a company. It could be suggested by a PM, VP, Manager etc."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Bob MacNeal,2016,"Developers are makers. Today we have creatives, like developers, who make stuff, the makers…and then you have everybody else…the non-makers.
What emerged from the 2001 conference in Snowbird were lightweight guiding principles…by the makers, for the makers.
The Agile manifesto is a beautiful thing. Revolutionary then. Influential today.
Few work days go by without one or more of the guiding principles influencing my perspective, or my approach, to the mission at hand.
What’s made “Agile” increasingly toxic is that over the years the non-makers have manufactured supercilious ancillary activities like user story estimating, planning poker sessions, ponderous tracking software, burn-down charts, and 30-person stand-ups for a 4-developer team (real world example), that have little or nothing to do with growing a software product.
The guiding principles have always worked very well for the makers. Unfortunately the non-makers have turned exquisitely lightweight guidance into a ball & chain of process that the team, makers and non-makers alike, must drag along with each iteration.
I hope this helps your understanding.
The Alternative
The alternative is to have 2–4 experienced developers who are laser-focused on the product, empathetic with user experience, and steeped in the guiding principles of the manifesto who are given product direction, unfailing support, and enthusiastic encouragement from a benevolent dictator."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Arno Brevoort,2017,"Agile done right, is the way a band of programmers would organize their work. Once everyone is on location, before you get into the thick of things, brew a pot of coffee and have a quick chat. How are you getting on, did you run into any trouble, what shall we do today. Help / advice is offered where necessary and you carry on with the day. The programmers are talking to each other and helping each other out. Work is done as a team.
Agile done wrong, is a micro-managers’ dream. You can instantly pick on “failing” programmers, harp on why things haven’t been done, blame people. Instead of a collaborative meeting to plan the day ahead, it turns into a daily “progress report”, a “triage”, or a “crisis planning meeting”. The sign of this is the programmers no longer talking to each other in the meeting, keeping their heads down, and “reporting” up the command chain to a “scrum master” / “project manager” who is no longer involved in actually writing code.
The first Agile is a fantastic way to work. The second “Agile” is hell on earth."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Richard Waters,2016,"I've been following this question for a while now; there are some great answers here and an awful lot of anger directed at ‘Agile’, whatever that may be.
Shall we start with this: Manifesto for Agile Software Development this is the Agile manifesto and the 12 principles? Notice what this is and (more importantly) what it isn't: no mention of scrum, no mention of daily meetings or sprints. It's still possible to disagree with these statements, of course, but I think they represent a laudable set of goals for building good software in many situations.
To create good, useful software we need to do 2 things:
Agree what the software has to do
Write good software that does that
It's important to realise that both of these tasks are hard, not just the second one. Writing a good, accurate, detailed spec for a complex system is a really hard job; its roughly as hard as writing the software because in the end software is just a very, very detailed, executable specification of the problem. Particularly if the developers who will work on the project don't know the problem space you need an incredible level of detail in the spec and it still won't be enough to inform every micro decision the coders have to make. On top of this you have change to manage. Over the course of a long project the specification needs to change. That causes problems as well.
Historically, lots of projects have failed because of bad or incomplete specifications. Lots still do.
The Agile Difference
The main aim of Agile (IMHO) was to try and change the approach to reduce the number of failures and the scale of those failures. Instead of a detailed specification there would be small iterations of development each of which should produce something that could run and be observed by the ‘business people’. This way, you could catch problems and misunderstandings earlier in the process and it would be easier for non-technical business people to look at the software running and explain what they wanted in that context.
For this to work you need a number of related things to happen:
Constant, quality access to the business people or end users so questions can be asked and answered without delay
Flexible development methods; with no up front detailed spec you can't have a detailed up front design either. That changes the way you build the software. Refactoring becomes more regular and you need automated testing to support that.
A willingness on all sides to accept that you don't know in advance exactly when you are going to deliver what, beyond the current iteration.
These things are hard, especially the last one. That final point causes massive friction if a development team or group tried to be agile when the rest of the business doesn't understand and buy into that.
Agile isn't perfect by any means and to do it well does involve a massive organisational change and not just in the development teams. However, in many cases it will deliver better results than trying to produce up front specifications and working from them.
Why do developers hate Agile?
Bad management is rife. It's probably more common than good or even average management. Most organisations would claim they were doing Agile, even when they are not (does anyone work in an environment where detailed specifications and design documents are written up front? Not many, I guess). So, much bad management is associated with Agile. It's not agile that's the problem. It's the management.
Finally - an example
I just wanted to end with an example (completely invented) of how Agile can be done right.
A company decided to build a new online project planning and management tool. They put together a good team of developers and QA to work on it.
At an initial team meeting, the management explain that they are targeting a beta launch 12 months from now and explain how they hope the product can be a big revenue winner for the company and explain the gap in the market they think they've found.
They then introduce Martha who they've hired from Microsoft where she worked on the Microsoft Project team as a product manager and she gives a presentation on her vision for the product and explains how an online tool can beat what's already available. She commits to being available to the developers in the office 3 days a week and on email the other 2 when she's out helping with marketing.
The team agree to spend a first 2-week iteration setting up continuous integration, investigating some different database technologies and selecting a framework to use. During this time Martha gives a series of talks on the basics of project management tools for anyone who wants to attend and produces some sample possible screenshots as guides. The team are all given a licence for Microsoft Project and encouraged to spend some time using it to get familiar with it.
At the end of this 2 weeks they agree that the next 2 weeks will be setting up Dev and Uat environments and implementing a simple web ui to define a task and set its properties. They’re off.
Every 2 weeks there's a meeting to review the past 2 weeks and to discuss anything that's slowing down progress. Martha is there to answer questions and give some feedback on her meetings with potential clients; not normally technical stuff because that's being sorted out as it arises. The manager listens and makes sure blockers are handled; maybe the build server needs some more memory to run a big regression test - his job to sort it.
6 months in the team decide their framework is an issue. The xml config files it needs are becoming a problem; too complex, too hard to understand and a bottleneck. They decide to move away from the framework and use a code-based dependency injection system instead. A sub-team reckons they can write a one-off code generator to replicate a lot of the xml config with code and commits to doing that in the next 2 week iteration on a branch. The test framework allows them to make this big change with confidence. It's 2 weeks spent, but will make the whole team more productive so the team agrees to the plan.
6 weeks from the beta launch the team realise their core data model can't support many-to-many task linkages. They discuss this, agree a different data model and consider the amount of work needed to change it, but realise that this means a key feature can't be ready for the beta. Martha reluctantly agrees that it's better for the beta to go ahead without the feature, but asks for an enhancement release 4 weeks into the Beta to add it after the data model change. The team agree and commit to getting the data model change done in the next 2 weeks to help ensure this can happen even though they accept it really ought to take longer.
Is that an unrealistic example? I don’t think so. I think it’s an example of how development can be done well. Agile isn’t the problem - it can work, but it can also fail - particularly in the hands of the incompetent, the arrogant or the greedy."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Mark Flory,2016,"I was first introduced to the concepts of Agile I want to say in 2002, but I could be wrong but that seems way early on. Where I worked at the time we were not Agile, not Waterfall, we were using classic Clusterfuck. I had spent a few years at a very Waterfall shop and what I found I preferred Cf. After all, when all the documents were signed, sealed, and delivered the way things tended to proceed was straight to Clusterfuck with a lot more meetings and documents that needed to be corrected to reflect what actually happened.
My initial biggest takeaway from Agile was iterative development, which was a concept I already favored from reading Steven McConnell’s book Rapid Development. It made sense to work quickly, show the work quickly, fix what was broken, rinse, repeat. Internally when I develop software that is how I work. I find some work, I code it, I test it, I fix it, I test it again, I then look for some more work.
I liked the concepts I saw but I also remember my initial thought was. THEY are going to completely fuck this up. If you don’t know who THEY is, it’s this guy.
<There once was a somewhat relevant (but a Quora Image Violation) cartoon here you can see here >
I also tried making my own…I think I will stick with programming.
Over the years I have noticed an increasing amount Agilishness at the places I, my wife, and my friend’s worked. It was becoming more and more prevalent and I was beginning to see traces of the problem. THEY had turned it into a religion and the religion was going to save us.
I invited to a group discussion with some senior level software developers one time and we talked about Agile. We came up with our own working statement:
Overall, we like agile conceptually and we will adopt the practices we like as we see fit. Our approach to agile will be agile.
What we don’t like is Agile, which is the doctrinal approach to Agile. It’s the religion.
One guy said it very simply, I don’t like big A Agile.
I work with a lady now who has the religion in a big way. To her a project can only succeed if it operates in one way.
In a nutshell, as requested, what I dislike about Agile is that it’s practitioners are anything but. They are rigid and conformist and believe you must be too."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Darryl Wagoner,2023,"What is Agile?
Scrum?
Kanban?
something else?
I really dislike Scrum and I am a Certified Scrum Master. Scrum will sooner or later end up with poor software. In ways, it is anti-agile because there are so many “processes”. The worst thing in my mind is the 2-week sprints. Programmers start out doing good work the first week of a 2-week spring, then start feeling the pressure to meet their sprint commitments and start rushing the work. Never ends well. What ends up happening is they pad the amount of time a task takes. So we spend time guessing at effort instead of doing the work.
Kanban, on the other hand, solves many of these problems, by removing some of the processes and working from a prioritized backlog (scrum does as well), but programmers take the highest priority task and work on it until done. No stand-ups, sprint planning, etc. Management hates it because they don’t have a clue about dates (they never did, but thought they did).
In software, you can never be sure how long a task is going to take. I am not saying you can’t make a good guess, because you can and do. However, you can also blow the time budget really badly. I know I picked up a defect to fix and was expecting it to take minutes to fix. It took weeks. Scrum is not forgiving for tasks."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Oliver Dolan,2017,"There are lots of answers here but I feel my views differ enough to be of value to you. So without hesitation lets begin.
Why do a lot of developers dislike agile?
Firstly agile is a super broad term and often people have issues with some parts of the methodology more than others
For example:
Most developers agree on continuous integration and automated testing being of value
Less developers see merit in pair programming
A big concern I have seen is the time spent in meetings.
It's a fair concern, the ideal team size is somewhere around 8. That would mean in a 2 week sprint:
Daily stand up = 8*15 mins * 5 = 600 minutes
Sprint planning = 8*45 = 360 minutes
Backlog grooming 8*120 = 960 minutes
Sprint Demo = 8*45 mins = 360 minutes
Sprint retrospective = 8*45 mins = 360 minutes
This would total: 2640 minutes or 44 man hours of time spent on meetings in 2 weeks with conservative estimates on time.
I think we can all agree this is quite a significant amount.
I have experienced many concerns against the stakeholders prioritisation choices
Timescales are squeezed
By design agile methodologies squeeze timescales to reduce ineffeciencies and improve responsiveness of the business.
Stress levels rise
Due to always needing to release and demonstrate
Sometimes MVP’s are not up to scratch but are still released and shown to many people.
This can cause anxiety over peoples opinion on the poor quality of the work delivered.
Project managers are often replaced with scrum masters.
These two skillsets are not replaceable one for one, they have subtle but significant differences.
Lack of need to communicate outside the local team meaning isolation and internal group think
This can also lead to conflict within the organisation as a culture of us vs them can emerge
Feeling like a cog in a machine
Plan, Do, Check & Act
Plan, Do, Check & Act
Plan, Do, Check & Act
Plan, Do, Check & Act
Repeating this sequence ad-infinitum can make developers feel like they are in a rut or just using up time like on a hamster wheel.
Technical leads having limited influence
Often product owners and stake holders are given more weight when making decisions and what they decide is generally final and overruling of the technical lead.
Product owners have limited control and bow to stakeholders
This can lead to short term thinking in the perceived hope of obtaining customer satisfaction
MVP and lean delivery seen as not high enough quality product
This can make developers not feel proud of the work they are producing
Developers lose commitment as they don't feel identified with the work or business
This can propagate into a lack of vision or warm feelings for the long term
These lead to concerns over job security
Cross functional teams also reduce job security
The development team can often feel inadequate for not meeting the perceived potential.
The team is often under budget or resource constraints but are consistently reminded of what there capped velocity is via information radiators
The constant search for looking for defects, waste or errors can aid developers in forgetting about the positives
Developers can also dislike the complexity of the process
Agile is quite involved, collaborative and requires communication. Developers in the past have tended to be introverted in nature.
Some compare the current agile methodology to waterfall and would just prefer to receive a specification and task list and be left to do the work.
It is often difficult to trust the product owner when they dont have direct access to the end customers.
I have seen in big business to business sales organisations the product owner has limited access to the customer base and likely never even speaks with someone who uses the software.
This undermines there credibility and the effectiveness of the agile model.
Im sure there are plenty more but these would be the most common I have experienced.
Hopefully it helps
Good Luck
Oliver Dolan"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Robert Rapplean,2016,"There are numerous long-winded responses on here (with images), but I figured I’d summarize my experiences with Agile.
Agile is a methodology that only works if everybody cooperates and assumes that everyone else is going to put in their best effort. This is extremely hard for most managers to accept.
The default management styles presume that the engineers can do better if given a little “encouragement”. Managers can grow out of it over time, but it is very, very hard for them to feel that they are providing value unless they are making their reports work harder/smarter. That type of manager will take any opportunity they can find to “provide value”, which is to say, encourage the employees to work harder.
Thus, the daily scrums turn into a daily report to management. End-of-sprint turns into an opportunity to fail instead of a time to re-examine the work load. If your team doesn’t meet its goals, it looks bad in your manager’s regular report to HIS managers, and then bad things roll downhill. This means that an unfortunate percentage of agile developers are being rated on how well they can guess how long something is going to take instead of on the quality and effectiveness of their engineering skills.
The burn-down chart is another opportunity to fail. Scrum teams spend a lot of time figuring out how to re-arrange their workload in order to optimize the burn-down instead of optimizing productivity. The unfortunate results here involve context shifting, checking in work that’s incomplete in order to mark it done, and creating stories with a vague enough scope that the developers can call it done at a certain time instead of at a certain degree of completion.
A second issue is that CxO’s really hate to be told “no, this is what I committed to, so this is what I’m doing.” When presented this way, they look for other ways to fit their pet project in, which results in shorter iterations, which results in more time spent in meetings and ceremonies, which eats into productivity."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Imtiaz Mohammad,2018,"Once upon a time there was a class teacher named Mr. Screw U All. One morning, he had a bad start due to two flat tires. He reached school with great difficulty and went straight to his class. Some kids were making a lot of noise and throwing chairs at each other. Of course, they all stopped the moment they saw their angry teacher at the door.
Now, Mr. All decided to fix things and punish the mischievous kids. But, he didn’t know who exactly was responsible for the mess. So, he made the entire class kneel for next 30 minutes. Over a period of time, this became a standard practice to discipline students.
That is Agile methodology in a nutshell. You punish everyone due to some slackers at the workplace. There is nothing to like about it. Unless, you are the bully who enjoys seeing others kneeling along with you."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Harsh Gupta,2022,"There are a lot of developers who dislike Agile because it is difficult to change the project management paradigm when things don't go as planned. Some alternatives to Agile include Waterfall, Scrum, and Crystal Clear.
The waterfall is a traditional project management methodology that involves developing a plan, executing the plan, and monitoring results. This method can be time-consuming and rigid, making it difficult to adapt to changes in the project.
Scrum is an agile framework that was designed to address some of the problems with Waterfall. It focuses on creating product backlogs and sprint backlogs, which are lists of tasks that need to be completed during each iteration of the project. The team members work together to complete these tasks as quickly as possible while maintaining quality standards.
Crystal Clear is a new project management methodology that combines aspects of both Waterfall and Scrum. It allows for more flexibility in terms of changes to the plan, but also maintains quality standards throughout the entire process."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Sheldon Shi,2016,"It means Agile development is done wrong. In a wrong way, for the wrong purpose.
I’ve seen both sides of the coin. Teams became a lot more productive, a lot happier and less stressful when Agile was done right; and teams became totally chaos and demoralized when it was done wrong.
How developers feel when Agile is done right:
When Agile is done wrong:
Here is how agile can be done wrong:
Organizations skimp careful planning and push all uncertainties to dev teams, and hope shortening development iterations and having daily sync-up would magically cure all evils and make things right. Software development is an incredibly front-loaded process, meaning a lot of thoughts have to be put into deciding what to build, how to build, before actually building it. Applying Agile process doesn’t change that. It just make it easier to adapt to changes. When thoughtful planning and design are skimped, no methodology in the dev process can save the day. But dev teams end up getting the blame because they are supposed to deliver the end product.
Management view agile development as a way to manage day-to-day activities of dev teams and squeeze the last drop of juice out of developers. First and foremost, agile development is about empowering developers to deliver better and more relevant software, while being proactive about it and not being stressed out. It is not a tool for management to put dev teams under microscope daily and push to the extreme. Agile is best done organically through strong leaderships within the teams, not through some top-down directives or third-party injections.
Only pay attention to “How”, without asking “Why”. It is easy to implement some superficial formalities and declare it “Agile”. But having a daily sync-up doesn’t make it agile. It’d be just be a waste of time if developers don’t feel empowered from these meetings. Having a shorter iteration doesn’t magically make development faster, or with fewer bugs. It may just add more overhead from the more frequent interruptions. Agile is about adapting to changes. This applies to the dev process too. Teams should take a holistic approach and try different things, until they find sweet spots. This invariantly involves active participations from product, design, QA and dev teams, buy-in from all stakeholders, a disciplined approach, best practice principals, some light-weighted toolset, and once in a while good retrospects.
In the end, Agile is done right if developers are happy and productive, and not if developers become grumpy and demoralized."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Gerry Claps,2016,"In my personal experience, software developers dislike Agile methods when they’re applied incorrectly.
Software development is a creative craft. Time and time again, I’ve seen chunks of work assigned to developers to build software that disregards:
Overall system architecture
Enough time to iron out bugs
Utilizing feedback in the next iteration of work
Time for creative thinking around the problem
and, so on.
Currently, the best paradigms around software development are ‘lean’ and ‘agile’ thinking. It’s their misapplication that leads to problems."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jacky Jackson,2018,"Agile Manifesto and the four values
• Individuals and interactions over processes and tools
Resulted in endless interruptions while nobody bothers to write their thoughts down
• Software products over comprehensive documents
Results in ball of mud products with no documentation on what the hell the creators were thinking, and what it should be about. I wants those comprehensive documents back! Please.
• Customer collaboration over contract negotiation
Śo we accept collaboration in customers changing their minds every two weeks, and do not force them to make up their minds.
• Response to changes over observing plans
So we refuse to write anything down in a plan and just ‘do agile ‘ because it is ‘hip'…..
YES I TOTALLY AND TOTALLY HATE HATE HATE HATE HATE AGILE!!! I SPIT ON IT, I P!SS ON IT."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Vatsalya Jain,,"One fundamental challenge I see is the emphasis of ‘doing’ Agile and lot of focus of the Scrum Master and Project Managers to ensure things are done to adhere to the agile guidelines.
For eg: Agile speaks about estimating a story in terms of story points, which is a comparative analysis for a developer vis a vis the development he has done in the past.
However, many of the scrum masters I speak to during interviews state that
they follow the logic of 8hrs = 1 story point
When I probe them how would this hold true for Person A ( who is a developer ) vs Person B ( who is an architect) , the answers are not there yet.
While Agile is a framework for the teams to enable to work efficiently, the governance around the measurements mechanisms and the lack of understanding of true agile principles is the biggest challenge."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Alex Rogachevsky,2017,"In the perfect world, Agile was invented in, by developers and for developers - as you may recall from the Agile Manifesto…
A number of things didn’t exist in that world:
The headcount aka bodyshop-supplied “body” fraud to staff always unneeded always failing (at the infamous 70–90% IT failure rate) corporate IT projects, used to “spend” excess profits otherwise lost in taxes. Can’t play that kickback game with servers and switches. The obscure “human capital” however is the perfect smelly pond with its murky water. With the certain overpopulated country providing the unlimited number of “bodies”.
“Offshore” “outsourcing” aimed at suppressing wages and capping engineering careers.
The redundant - compared to the actual “functional” managers with decision power… institute of clueless non-technical Project Managers tasked solely with hour counting and reporting to even more detached from reality PMO (“O” stands for office).
Speaking of #1, I am going to go with the conservative 10x estimate stated in one of the Quora posts on the difference between the senior developer and a code monkey. Anyone not working by the book (myself) should have more aggressive e.g. 100x and higher productivity after eliminating the glue code. Note, it is just the technology alone - doing the heavy lifting. Not the “project management” or any other mythical MBA “communication” and “collaboration” magic.
Going with 10x, if you replace a typical 20-developer team with just two people, a lot of IT “coordinators” and “facilitators”: namely PMs will lose their jobs too. Several times more third-party middlemen forming the enormous IT Consulting Food Chain would lose their cut. I feel for them… not really. In any case, how much “project management” such two-people team needs?
Speaking of #2, accelerated and efficient software development becomes nothing, but slavery, in that context. Greedy bosses diluting your effective hourly rate through unpaid overtime and other tricks against you fighting back by fooling those clueless non-technical bosses with padded estimates. Also, think for a moment, what kind of work the proper project management is supposed to make more efficient in a typical “IT organization”: the same needless IT commotion and visibility of work e.g. bug fixes of spaghetti code produced by keyboard banging code monkeys of the certain geographic origin: otherwise replaced 10 to 1 or 100 to 1, as explained above.
With no more career future, explained in simple terms as rewarding someone’s increasing contribution with increasing salary, the trust has been lost forever. Any attempt to optimize engineering work is not just viewed, but really is a hostile activity to squeeze more money out of the already low (compared to Google) salary.
And speaking of #3, let me tell you a story of one financial company I spent a year at - notorious for their employees laziness and incompetence. My team had a PM, alright. And a couple of business analysts aka BSAs. I don’t remember all of the details of that project’s misery. It was part of the typical 90% failure rate if you are wondering - dead even before I was hired.
However I do remember the typical shuffle that ensued after it was officially pronounced dead. I witnessed it several times before. A moronic BSA was “demoted” (reassigned with the same pay) to the PM of another project. Which of course failed a year after. That should tell you where PMs tasked with running Scrums are in the IT hierarchy.
Better “project management” alternatives? No PMI certified project managers at all. Look at distributed (to say the least) open-source teams - from little GitHub projects to Linux. No corporate overhead. No PMs. No MBAs trying to “facilitate” “communication” and “collaboration”. Just engineers doing their job. Why such compulsive-obsessive desire to “organize” and improve old practices like “waterfall”? Chances are, if you come from the same bureaucratic (defense, government, Fortune 100) background, you’d end up with the same crap. Read above on the glue code. I didn’t try to “optimize” it via a cute persistence aka “I/O” framework like Grails or Play. I discarded it by choosing a different paradigm.
Needless to say, and I feel for you as a “manager”, one cannot magically compensate for the low salary with phony “perks”, motivational speeches, or great work environment/process, that inspires engineers to work hard by allegedly making it “enjoyable”. Anyone’s motivation starts with the proper (monetary) reward. Only then you can add perks like beer dispensers and work/life balance. Project Management cannot be used to cover for CFO’s greed. Nothing can “align” someone’s interests with the company’s, if you are not paying that person well or offering the career future. Pay the fair wage, and we, college-educated professionals, will surely figure out what to do in which sequence."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jerry Westrick,2020,"Part one:
The “Agile Manifesto” which first coined the term “Agile”, starts off saying:
This is a study of some of the things that Small teams have used to achieve large results. Pick and use the things that work for you.
This is a far cry from “you have to …”, “You must …” as implemented in most companies.
Agile as I see it consists of workers who do undefined work using undefined methods. And a leader who’s sole purpose in life is to enable the workers.
Everything else is a big company trying to force structure and form on a process which was chosen because programming is so much faster without it.
Part Two:
I have seen many “agile projects” fail for the simple reason that the people ordering the software did not understand what was going on. If you are going to implement an “iterative” development process, please do yourself a favor and make sure your “Owners”, “Stake holders”, or “End Users” know exactly what they are doing.
I cannot tell you the number of times I have heard “Ready for Production” from the “End Users” when all major back end work is still “Simulated” by “End User” priorities. It is very difficult to keep your “End Users” expectations realistic when the screen looks perfect and seems to work."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Brad Bass,2015,"Scrum 'masters', daily meetings, change.. Stats become more important than the code itself. We hate it for the reasons weak programmers love it. They love it because they dont really have to think (they are given a list of tasks to complete), theyre basically capped on how much work they can do during an iteration, the focus is on the 'team', so they tend to be able to get away with/hide their mistakes.. We hate it because we dont like being told how to do our jobs and especially not by some SCRUM 'master' who most likely has never written a line of code in their life. I suppose for the most part it just seems like Agile causes us to waste a lot of time to produce less quality work over shorter periods of time."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Michael Daconta,2017,"Simply stated, Agile swung the pendulum too far away from the waterfall methodology. Its first incarnation was “eXtreme Programming” and some of its practices retain those extreme roots:
* Pair programming is overkill for 80% of programming tasks but is useful for the right 20%. Do you really need a co-pilot to pull the car into the garage? In other words, not every software task is akin to brain surgery or flying a 747.
* Giving short-shrift or lip-service to requirements analysis, architecture and design is short-sighted. Proof of this is that epic agile failure called healthcare.gov. See: Feds say agile development contributed to Healthcare.gov failure
Also see: 6 Software Development Lessons From Healthcare.gov's Failed Launch
And finally: https://gcn.com/blogs/reality-check/2013/11/healthcare-agile.aspx
* Test-Driven development relies too heavily on unit testing. See: TDD is dead. Long live testing.
* Stand up meetings can be used as a punishment and are very easy to do wrong.
Having said the above, some aspects of agile work well: Refactoring, Small iterations, Collaboration, Daily builds, Continuous integration.
So, my recommendation is to take the best parts of agile and combine them with spiral development in a hybrid approach!
Best wishes!"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Bob Kerns,2016,"I don’t hate Agile.
I hate standups.
I fully support the intended goal.
But they’re a painful synchronization point in an asynchronous process. They’re an interruption and a distraction.
They can be flat-out impossible for a distributed team.
And they’re a point that management injects themselves to micromanage.
I figure the management part is not really the problem. If you’re going to be interrupted daily and forced to all synchronize what you’re doing and where you are, well, management will micromanage anyway; you may as well get it out of the way in the standup!
But management does make them more expensive — because managers attend more than one standup, and have other meetings and interruptions they have to deal with (I’ve been a manager!) we developers end up going “Is the standup happening yet? No? When?” in a cycle, until it happens.
Meanwhile, the communication that should happen in a standup — well, it rarely happens there in my experience. And I don’t even see that as a problem.
I see needing standups as a symptom of inadequate communication and visibility. Standups can be a solution, but they’re not the optimal one.
The thing is, though — that doesn’t make me hate Agile. Agile’s not supposed to be a straightjacket. I’ll do standups, if that’s what it takes to keep management off our backs, or if it makes our team work better.
I’ll just try to find better ways and make them obsolete.
I’m not a fan of pair programming, as a full-time practice, either.
First, management — well, just no. You can’t even discuss it, it’s so far outside their worldview. I’ve never been in an environment in which even a trial stood a snowball’s chance in hell of being considered.
Well, I heard management say “yes” once, but they did “no”. I don’t think even a full man-day was ever spent pair programming.
Second, as a full-time practice, it’s another straightjacket, locking two developers onto the same timeline. One is sick; one has a meeting
It can greatly slow down some tasks. Distraction and communication overhead can impede experimentation and exploration.
That doesn’t sound very agile to me.
But that doesn’t make me hate agile, either. Actually, I wish I could do MORE pair programming, especially at some critical points. Integration. Or after exploring and experimenting a bit, considering where to take it for real, and starting that process, feedback, further exploration with more inputs. Or maybe back to the drawing board — singly or together.
I’m tired of being the only guy on the team who knows this huge mass of code (either mine or inherited) and this even bigger mass of data. Pair programming is a great way to spread knowledge — and coincidentally, develop good teamwork and culture!
The thing is, Agile isn’t really a process. It’s a value. And whether it lets us write better code, or better respond to the unending demands of management who are trying to deal with the unending demands of the market, it’s about helping us do better by shedding things that get in the way.
Like how unit tests can reduce the need for debugging, and how test-first can reduce the need for specifications and help drive design.
If you view test-first as a straightjacket rather than a tool, yeah, I can see hating it.
Unit tests, taken to an extreme, can be a burden. Take too long to write, consume too much time maintaining — a smell that should tell you you’re testing the wrong things. They can even take too long to run. Days, I’ve seen. External dependencies galore — integration tests and acceptance tests masquerading as unit tests.
But I don’t hate unit tests. I love them!
Make them work FOR you.
I try to be smart about what and how to test. It’s important to delete unit tests that aren’t adding value — for example, that look for a value that includes an implementation detail that’s subject to change, just because it makes the test simpler.
Consider the likelihood that a problem might go undetected or might be hard to track down. Weigh that against the difficulty and cost of the test. Err a bit on the side of more testing, if you can.
I don’t hate Agile. I’ve never seen it work as well as I’d like, but I’ve never had free rein, either.
But I remember Waterfall.
And I’m NOT going back!"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Alexandra,2021,"Well, Agile is:
Individual over process
Software over documentation
Change over a plan
Basically, Agile is about moving fast, reacting to change, and don’t stumble. Something doesn’t work? Don’t fret, go try something else.
Why is it hated when it seems like a freestyle methodology that lets creativity flow and doesn’t get bothered with tons of documentation?
Lack of understanding. Wrongly understood the concept of Agile often results in implementing structure and hierarchy from the previous experiences. Such a combination makes employees feel like they are slaves rather than freestyle and creative.
Wrong orientation. It is also a result of a lack of understanding. Refused flexibility, strict rule-following, and forcing all that onto employees creates an unhealthy and non-Agile environment which results in disliking the methodology.
Refusing to change. The main reason that makes people violate Agile methodology is human nature. Throughout life, we all are molded to listen and take orders from our superiors - parents, teachers, mentors, bosses, etc. However, when applied in a true sense Agility does not support blaming others and promotes taking responsibility for their actions. This is one aspect that makes individuals dislike Agile."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Richard Cownie,2016,"The underlying principles of Agile - know where you’re at, deliver working iterations frequently, accept that the spec is going to change frequently - are fine.
But my experience of it in practice has been that bad software development managers use Agile-derived mechanisms to implement a totally counterproductive level of micromanagement.
So, for example:
The manager doesn’t have time to read the code and understand the technical issues in detail. But they can look at the Kanban board. So he/she thinks the Kanban board is reality.
The Kanban board is a vastly oversimplified, and often totally bogus, model of reality. Reality is the code, and the developers, and the bugs. Mostly the bugs.
The Kanban view, and the story points, and sprints, all encourage the delusion that software development is like bricklaying, i.e. a highly predictable task which can be done at a consistent speed by moderately competent people, with well-specified chunks of work which can be easily subdivided with few dependencies. As long as all the walls are the same height, and meet at the corners, your’re good.
SOFTWARE DEVLOPMENT IS NOT LIKE BRICKLAYING! NOT. LIKE. BRICKLAYING!
Now the manager thinks the Kanban board, and the brief updates in standup meetings, are the reality. And then the manager gets frustrated when the it turns out that the bricklayers aren’t laying bricks at a consistent and predictable rate and the tasks in each sprint aren’t being finished. And the project is behind schedule.
The project is behind schedule, so what happens in the next sprint ? Rather than finding more resources (which is hard), or dropping features (which in Agile methodology is the correct response), the manager decides to a) argue down the point estimates for new tasks (which moves the Kanban view further away from reality); b) put more pressure on developers.
One deep principle of Agile is the importance of resolving issues in face-to-face meetings. But over the last decade bean-counting management have moved towards offshore development with teams in India, China etc. because the cost per hour of bricklayers (sorry, software developers) there is so much cheaper. But a) those teams aren’t available for face-to-face meetings; b) often they’re in timezones such that the working day doesn’t even overlap; c) language/accent and cultural differences can be an obstacle to effective communication; d) those teams are mostly less-experienced bricklayers (sorry, software developers). Of course the manager, who is subject to th delusion that the Kanban board is reality, goes along with this because it’s easy to share the Kanban board of remote teams.
After a year or so of this, the better developers on the team quit and find something less frustrating to do. And then the whole organization is in a death spiral.
I have been thinking that software development should be managed much more like patient care in a hospital, than like bricklaying. The normal state of software is to be deeply unhealthy, with many bugs and performance issues. The primary goal of the development team is to keep the patient alive - i.e. to keep the bugs sufficiently under control that the software can be usable for customers (without crashing, giving seriously incorrect behavior, or going so slow as to be useless). Each particular issue is a symptom for which we may need considerable diagnostic effort/debugging to understand the underlying cause, and then may need to attempt various different therapeutic measures/bugfixes to solve it - and often we don’t know what’s going to work until we try it.
Now, parts of this patient-care process can be managed like bricklaying - e.g. once we’ve decided that certain patients need certain well-understood forms of surgery, then scheduling the OR and the surgeon is simple. But other parts really can’t - if a patient comes in with unusual symptoms, the diagnosis may take a while. Different patients respond well or badly to different treatments.
The real magic of software design comes in figuring how to develop a complex software system in such a way that while it will definitely have bugs, it won’t have a large number of *mysterious* bugs. That requires a certain amount of paranoid coding at major interfaces, and designing/coding for a high level of visibility of the system behavior - patients with a built-in X-ray machine."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jaimi McEntire,2016,"The problem with most Agile development implementations (and when I say this, I mean Scrum, as that is what people mostly use) is that it trades Productivity for Predictability. It can feel like you are getting more done and have more freedom, when in actuality for most, you are being micromanaged and getting less done - it’s just more visible. Instead of the old “death march” at the end of the release, it either becomes a series of mini-death marches at the end of each sprint, or the team pads their work, and they run out of work in the middle of each sprint. The nature of an agile team with embedded QA developers is also an issue. Because the work isn’t “done” until it is tested, what you end up with is the QA person having no work at the beginning of a sprint, and being overworked at the end. People suggest all sorts of things to address this - “Have the QA guy work on test scripts. All developers should test.” etc. However, there’s only so many test scripts, and developers should test, but you find there are those who just choose not to.
To address this, I recommend getting OFF the scrum bandwagon. The concept of being “done with all work items” at the end of a sprint is counter-productive. You need to level out the workload, instead of having a bell-curve.
I’m not the first or only person to realize these things. We first started agile development about 6 years ago. It was a slight improvement over our old waterfall process, but the teams were not happy with the cyclical nature and the unbalanced workflow. So I went looking around, and found that many others were unhappy as well. Then I stumbled onto Kanban. Or actually, what is referred to as Scrumban - Scrum with a kanban model. It has the advantages of scrum - working in bitesize chunks - but without the feast-or-famine workflow. We were able to take this model, and fix the scrum process. Our first year saw a 62% increase in productivity. Our second, as people became used to the process, was over 40%. We can take features in, and people can look and say “There’s no way you can get this done in a year”, and we haven’t missed a release or dropped any feature (without replacing it) since the beginning — and that’s 4 release cycles now.
Lean Software Engineering"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Vineel Shah,2016,"Problem 1 — Agile is Brittle
A good methodology works in most types of organizations, on most kinds of projects, for teams with varying levels of experience. Most orgs that implement a methodology are going to adapt it to the realities of their teams, managers, business clients, industry, schedules, quality levels, etc.
Study the few examples of spectacularly successful Agile projects and you’ll hear a common refrain: “They did Agile right!” They were able to get every part of the company to buy into the way Agile treats requirements, the way Agile treats process, the way Agile treats progress, and the way Agile delivers end results.
Study the overwhelming quantity of not very successful Agile projects — or spectacularly failed Agile projects — and you’ll hear a common refrain: “They did Agile wrong.” Most orgs get at least a few things “wrong” according to Agile — it’s usually that the expectations of the business folks. They never get what they really want and they have to ask for it again and again. Meanwhile, the developers get sick of “failing” and the whole company feels disappointed and angry. Soon they throw out the method or they twist it into something that works mediocrely and they still call it “Agile.”
Problem 2 — Agile is Easy to Say
I can’t tell you the number of managers I’ve seen that couldn’t manage their way out of a box — and adopt Agile as a way to wave their hands and talk a lot to distract people from noticing. Somewhere between the scrums and the burndowns and the point estimates the big picture gets obscured, and a bad manager feels relief.
Problem 3 — The People That Are Good at Agile Could Use Any Methodology
Here’s the only universal truth in software — smart people working in small teams on small projects with clear requirements can make software, regardless of the “process” they adhere to. All the people I know that love Agile build small apps — 10k lines or even less — most of the time. They’re good enough, and the projects are small enough, that they could use Waterfall, or just “Care About What You’re Building and Talk Alot,” and get similar results.
I don’t hate all the ideas in Agile — it came from eXtreme Programming which was some good thinking — but the Agile Religion has caused more harm than good. It’s less and less relevant in a world where one or two people can develop whole systems quickly using today’s powerful frameworks and languages."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Kelly Schrock,2016,"To be clear, I think most developers actually like agile development: That is, the practice of engaging the customer/end user(s) and showing them progress on a regular basis, only building what’s needed, and letting requirements take shape as the customer learns more about the system in question. There are many good things about it, the primary benefit being agility.
What developers don’t like is Agile(TM), the branded project-management practice that seemingly stands as nothing more than a tool for micromanaging developers and treating them as slaves in the belly of an oar-driven ship. In the worst cases, it puts extreme pressure on the people doing the actual development work to deliver “tasks” within a specific timeframe, without giving much (if any) thought to the overall design, the fact that bugs will appear and need addressing, and without any input. The one thing the approach lacks the most is agility. This is usually the fault of the people running the project, not the process itself. So Agile(TM) gets much of the blame."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anonymous,2016,"In a nutshell, I don't like it because it's nothing more than micromanagement and after nearly 10 years of higher education and another 10 years working , I don't feel the need to explain what I am doing everyday to some koolaid management suck.
Also I highly dislike getting treated like a fungible cog, and flung around to some new shit shovel every two weeks.
As an engineer, I want meaningful work. Nothing meaningful can be completed in two weeks. Also I want to be treated like an adult, like someone who understands their responsibilities.
Sure there are deadlines, that's a thing. Believe it or not we have been trained to handle deadlines. We have had high stake exams throughout university. Dissertations that were peer reviewed, publications, etc. We will generally pipe up if we know the deadline and think we can't make it.
Agile is nothing but insulting, infantilization of engineers. Planning poker?? Post its?? Scrum??? It's a total joke.
I am a software engineer. I write code. That's my fucking update."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Ilya Naoumov,2017,"Sometime Agile can be used to recreate the assembly factory methodology only with software. Product Managers and business stakeholder come up with the features they want implemented (rather, they try to do their best to explain what they want). Then the PM decides the priority of the work, which also comes down from the top of the organization. Some of the senior engineers will work on the design for the application, if it is sufficiently complex. Finally, the work is broken down into tiny tasks that can be accomplished in a two week spring. In the end, the engineer is just left to pick up the task at top of the backlog, and implement whatever s/he has been told to implement.
Generally, in well formed teams, the stack, conventions, and coding style is already well defined. As you can see, all that an engineer has to focus on is implementing the spec in the task, code coverage, and making sure s/he does all that as quickly as humanly possible. The software engineer ends up acting a small cog in the whole process of building out some feature for the business, much like an assembly line worker is tasked to tighten several lug nuts on a car that the factory builds. Ultimately, Agile takes autonomy away from the software engineer, and the engineer could ultimately be implementing a piece of software that s/he doesn’t understand how it fits in the broader picture. It’s all really dehumanizing, if you ask me."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Murray Robinson,2016,"Agile was created by software developers. Most developers love it. The few who hate agile do so because it's been severely distorted by command and control managers in their organisation to micromanage developers and make them work unpaid overtime. It's not agile they hate, it's horrible management. They just don’t realise it."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Ghost Orange,2016,"Because it is done incorrectly. My teams love it and Agile is perfect for making games. I’ve also used it on big clinical systems, where waterfall failed.
I totally agree with others here that say the failure is probably due to newer PM’s doing what they learned from lame trainers that never managed a project in their lives, working for certificate mill schools that invent a pile of useless classes to maximize earnings while confusing students. Vampires.
What you need to know is simple. It makes sense. What you need to do is only a little. High gain for low effort, so your effort goes to making software.
Review, plan, develop, repeat. This is not tricky.
Make estimates where 1 dev day = 5 hours on task. Leads task at 3 hours.
Devs calculate their own capacity, subtracting vacation, doctor’s appointments, et cetera. Add it up.
Make your plan by filling 85% of capacity for the period, with the most important remaining things. Commit to a sane plan.
Monitor results daily. No percentage complete allowed - binary, finished or not finished only. Countdown days. Fix any variances or problems as you go.
Make the work complete enough to be reviewable.
Take a hard look at what you got, with all stake holders and developers.
Go again.
This is a mental system, not a software system, not some patented process, not a certificate. I can do this on paper, in Excel, in a bug tracker, in Jira, Word, on a white board, Post-its, whatever. And you can too. Anyone can, that sticks to:
What is the goal?
What is left?
What is next?"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Scott Willis,2016,"Agile is all about feedback loops. Distorted feedback causes problems. Would a syntax-highlighting editor that faked its results to make your code look good be helpful to you in any way?
Its very hard for a manager to not try to control what they are responsible for, to not turn what looks like a ""go faster"" or ""cost less"" knob, especially under pressure. When management pressures for low estimates, they are trying to make the project go faster or cost less. Wrong knob!
Perhaps the most important condition required for Agile to work is for management to be clear on the distinction between estimates (a measurement) and features (a control knob) and never push on estimates. Pushing for a low estimate is like pushing a speedometer needle higher: it doesn't make you go any faster, and now you don't know how fast you ARE going. If you punish a messenger who brings you bad (schedule or other) news, better get used to only hearing good news - until the bad news can't be hidden any more. If you want the truth about the state of a project, it had better both be safe and seem safe for people to tell it to you.
The best I've figured out is to ask for slightly pessimistic estimates, ask if there are any resources they need or any barriers that can be helped with, thank people for bringing 'bad' news to my attention, and explaining what I intend to do with the information - ease fears of 'being in trouble' for telling the truth (as they understand it).
Giving distorted feedback to your manager and the team you're working with, in order to look good or in response to pressure, is easy in the moment. Then there are consequences when they use this false feedback to make decisions. Give them the best, most accurate information you can; you'll be living with the results."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Matteo Ianeselli,2017,"You ask: In a nutshell, why do a lot of developers dislike Agile?
In my personal opinion, it’s probably because the adoption of Agile techniques can be easily abused as an excuse for software architects (and requirement managers as well) to be able to procrastinate ad infinitum critical architectural choices, thus basically postponing, if not avoiding at all, taking unpopular decisions, and therefore shifting the blame away from them (and for developers operating in a yesmen environment, your main goal shifts from delivering something that actually does and will do the job to avoid being the one who says no).
If you ever watched the humorous video The Expert you’ll understand the kind of environment I’m talking to.
I believe that’s mainly because the continuous refactoring aspect of Agile techniques is often and conveniently dismissed (“because we have no budget/time for that and it brings no visible value to our customer”). This invariably ends in accumulating lots of so-called technical debt that has to be repaid in some way sooner or later.
In some way, it’s just like when function points (unrelated to Agile techniques) are abused to estimate the time required to ship a software product (been there, done that), conveniently ignoring they are not the right tool for that job (at least, they are not the only tool)."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,James Peckham,2018,"Few people like to work hard and Agile software development forces both sides (Customer and Development) to play fairly and continuously together. It’s exhausting.
Most Agile methods, like Scrum will force very detailed visibility. People who are use to lurking in the shadows, doing work the way they want to, are outed. People who provide no value and do things like manipulation and delegation are outed.
Better is relative. The alternative is plan based approaches. They vary from heavy up front requirements (dev centric) to date based approaches (sales/marketing centric). The problem is that one side always loses and usually the pendulum of power swings wildly."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Dan Shappir,2016,"Two main reasons for me:
Because it’s presented as a silver bullet for fixing any and all process issues. In particular many managers like to embrace it as a means for increasing production without investing more resources
Because many managers try to apply Agile without actually understanding what it means, or even bothering to learn it. Instead, they pick and choose only the specific aspects that they like, and often don’t even follow through with those"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Ori Shalev,2017,"Some answers here disregard the phrase “in a nutshell”… I’ll try to be short: writing code is art; I’m going to use an analogy I’ve used before - developers as chefs. If a chef is requested by the restaurant owner to come up with three new recipes (“stories”) a week, and they’re running out of time, they have the following three bad options:
Compromise on quality - makes them feel like bad chefs. They know that in the long term, they’ll pay a personal price for taking shortcuts.
Compromise on quantity - makes them look like they haven’t been productive enough
Work very hard to meet the schedule
Having to make that kind of decisions on daily basis is stressful. It feels like making tough decisions, which used to be the manager’s problem, have shifted to the chef/developer. That feels unfair: not only that developers do the hard work, with Agile they are suddenly responsible for stuff their managers used to offload from them."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Miles Fidelman,2021,"Do they? Most of the developers I know LIKE Agile.
On the other hand, (good) Product Managers, Program Managers, and Systems Engineers are the ones who dislike & distrust Agile. The main reason being that Agile emphasizes incremental development - short bursts of effort that add or enhance functionality. That’s great for maintaining a small piece of code. The larger, and more complex a system you’re building, the more that incrementalism gets you into BIG trouble. You need a lot of up front design to define the pieces (modules) of your system, and how they all fit together, as well as how your system interfaces to the outside world - you know, system & software architecture. Once you have a good architecture & interface specs - then Agile can be effective at building individual modules. But… folks who swear by Agile tend to skip the architecture & design stages and go write to the “let’s build the simple version and then incrementally improve it.” The result is often disastrous - pieces that don’t fit together, software that doesn’t fit into it’s run-time environment, products that don’t work well with other products in the same product family, products that don’t scale and/or are hard to enhance – and lots of time wasted in debugging and re-writing stuff, because it wasn’t thought through in advance.
Agile is like writing a draft of a mystery novel, before actually thinking through the details of the crime, or the backstory of the characters. Or shooting a bunch of scenes of a movie - only to discover that they all have to be reshot because there’s no continuity.
The Waterfall approach can be tedious, but incrementalism can be VERY expensive - particularly when working on mission-critical and safety-critical systems. You don’t really want to add a missing feature, or fix a bug, after an airplane has fallen out of the sky.
Afterthought (8/26/2021): And.. there’s a lot of room to streamline prcess, between classic waterfall, and pure “move fast & break things.” Some good whiteboard architecture, and back-of-the-envelope sizing calculations, can go a LONG way. Along with pinning down data table definitions, and interface specs, early on (and designing them to be modular & extensible)."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anusha Hewage,2018,"I do not think developers do not like Agile. If they are really passionate about the development work, they do like Agile .
This is part of the cultural aspect of any change management and it has nothing to do with Agile.
As an example, today if I were writing my code for the task which has been given by my project manager and I would sit and write that code and go home. That is the style I had been practicing and used to.
But tomorrow if some fancy somebody called ‘Scrum Master’ or Agile coach comes and all of a sudden tell me , this is how we are going to do this and lets have a stand up and blah blah blah.. I would first think he is nuts , stupid and then is useless. despite I will still go ahead ( as I need my job) , and will do what ever I was asked to do . And that will not be with my bias.
Developers in general are introverts ( this is an observation and can be wrong ) and if you ask from them to give updates at stand ups and showcases they will be nervous ( I have literally seen developer with shaking hands while giving stand up updates and claiming sick leave on showcase days ) .
This is change management which need to be aligned with empathy and psychology.
This is where ‘good’ Scrum Masters and ‘good’ Agile coaches are required. I stress the word ‘good’. The world is full of Agile coaches and Scrum Masters who are certified with all institutes available on planet earth and has done all the courses in Agile. But a Good Agile coach or scrum master may not have any of those certifications but can be a good leader with good leadership , empathy, coaching skills. We need those people who can understand the situation and help the development team to go though this journey.
However at the end of the day , there will be personal choices that some people are reluctant to change and they are not only developers ."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Ken Benneth,2018,"In a nutshell, a lot of developers experienced absolute rubbish peddled under the name “Agile”. A lot of sites adopted Agile rituals without implementing the processes that make them work. Those rituals are rarely adapted to the specific enterprise - you cannot just take what works for a Silicon Valley company and implement it in a bank.
When a good Developer spends a year working on a project with methods that don’t work, does all the rituals that are expected of them, and then the project fails giving all Developers a bad name - the Developer has a right to be furious. And to demand that next time someone provides detailed Requirements, so that he/she can just implelement what’s written there and let someone else take the blame.
I recommend to look at AGILE without MAGIC. Disclaimer - I started it.
Agile is great. It just has to be adequately implemented, with respect to site, available staff, type of project etc."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Mike Simon,2019,"There are a lot of serious issues with Agile. But for some reasons, a lot of companies, driven by fancy consulting firms, don’t want want to see it. Here are a few critical points.
Often times, Agile leads to micromanagement when senior engineers with 15 years of experience are being tasked to do the same as junior developers which is very demotivating.
It doesn’t respect knowledge and seniority and it makes developers easily replaceable, which is probably good for the management but really bad for the business because it kills the motivation.
It conflicts with job security idea which a lot of smart people unconsciously follow. It promotes collective code ownership, which in reality fake, because there is always an owner. If the code is truly collectively owned, then it is even worse because it means nobody is responsible.
Agile resource and time planning are horrible. Agile planning is not compatible with any engineering or science principles.
The alternative is traditional project management. If you need, you can use iterative approach to avoid waterfall problems."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Lelanthran Manickum,2016,"To all those answering “You’re using it wrong - that’s not Agile” all I can say is this: if 90% of practitioners cannot get $FOO working correctly, the problem is not with the practitioners, it’s with $FOO.
The problem with Agile is that it aims to be useful when requirements are not well-known in advance, when development is of an exploratory nature and when the project can be broken down into granular units.
If your proposed project cannot adhere to all three of the above requirements then don’t do Agile. IME, most requirements are well-known in advance because the project is a replacement for an existing process. IME, other than startups or academics work is not going to be of an exploratory nature. IME, when you know work can be broken down into granular units you already have the requirements in hand.
The last problem with Agile - it’s unsuitable for any atomic problem that cannot be solved easily. You can’t cross a chasm with two small jumps. Sometimes a big jump is needed."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Eran Kampf,2017,"In a Nutshell:
Because companies tend to adopt an “Agile” methodology as a god-given set of rules to be followed rather than a set of tools and processes to adopt, tweak and adjust over time…
Longer answer:
Because most companies like to say that they’re “Agile” while in reality just using it as an excuse for more meetings, more bureaucracy, micromanagement, time-waste and a lot more pressure (because the Sprint is about to end and you still have to get thinks done with all that overhead)
The reason behind this is that companies treat whatever buzzword methodology they choose as a set of strict rules: We have to have a stand up meeting every morning, and we have to cost everything (even stuff we don't know how to cost) and have a functioning demo to a “consumer” at the end of each sprint.
Not all teams\products are created equal and you have ti be able to take the set of tools Agile provide and be able to fit them into your team in a way that enabled work. Not the other way around.
“Agile” in the hands of the most companies ends up as the exact opposite - a set of strict procedures and beaurocracies to the letter.
Rather than thinking about their process, tweaking and improving it managers tend to delegate to the holy rules written by the gods of SCRUM or whatever…"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jonas,2016,"In some places agile is mis-sold as “don’t think or plan, just program”. One prominent example is Leslie Lamport, who notoriously has (or had?) this view about agile development. If I was a developer and my boss told me to “stop thinking or planning”, and my coworkers would stop thinking and planning, I would be very unhappy.
(google images)"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,S Markem,2017,"They don’t. They dislike poorly executed agile. They may have only ever experienced poorly executed agile. They may not even realise its poorly executed agile.
There are so many good answers below and so much information on why agile projects are often bad that I’m going to try and keep my answer tightly focussed on the real root cause. This may then suggest some options for you to explore.
Why is there so much poorly executed ‘agile’?
Since I started with ‘agile’ in 1999 I have observed that:
Very few people who are programmers study it in detail. Rather they get their knowledge, primarily, second hand. The are shown a process but their study is not sufficiently experiential.
Learning ‘agile’ is, I would suggest, akin to learning how to program. Its requires a similar approach and takes about the same amount of dedication.
Very few people have been allowed to implement it fully, without constraint. Therefore very few people can say they have genuinely been on a truly agile project; yet there are tens of thousands of ‘experts’ of one form or another.
Very few people dive deeply into the why and instead focus solely on the how. They follow instructions. Not understanding why the approach is structured in the way it is can lead to a lot of ceremony, dogma and waste.
Everyone ( but management in particular ) just wants an instruction manual. The temptation of the quick fix. They indulge in ‘wishful thinking’.. Do this, do that and then you’ll be agile. I wish it were that simple.
But.. the Number One problem I see is:
Treating programming as production ( manufacturing ). Its is not. Programming is fundamentally a design activity. The goal is usable knowledge. The output is code. Failure to grasp this concept turns agile processes into sausage-machine-dogma… and so it follows… people hate it.
Intelligent programmers are not machines.
And I don’t blame anyone. We all have jobs to do. We’re busy.
It takes a very committed management to provide the necessary time, space and investment to build truly agile cultures.
Hope that is helpful in some way. Its a very good question you raise."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Travis Worley,2018,"I wouldn’t say everyone dislikes it, but yes, a lot complain. I think the biggest reason, when it does happen, is b/c Agile, Scrum, and various iterative forms of development are not typically understood extremely well. Many companies don’t have a great process in place. They don’t actually embrace an iterative methodology, even though they think they do. Or they do it sort of half-a**ed.
And that is what many developers will undoubtedly hate. They don’t like it b/c in many manifestations it’s just plain garbage. Agile, or iterative development done right can be amazing. Done incorrectly it can be a nightmare (just like any other paradigm). Developers and engineers are very analytical by nature, so any process that doesn’t seem to follow well defined rules, or has shoddy systems in place, is going to raise flags.
Another issue is that Agile and virtually all software life-cycle methodologies are not perfect systems - there is no perfect system (a system that doesn’t have caveats, areas that require a human touch, or require some slight modification or deviation). That’s the whole point of iterative development (in large part); to address those issues quickly and easily when they arise (so you don’t find a mess later weeks or months down the line). However, that’s *also* something that goes against the grain of typical developers analytical thought processes.
Like some others have already said, one of the most important things, regardless of which process you use, is that you do have *some* decently functioning process in place that everyone follows and understands."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Peter Webb,2018,"Agile isn’t a project management pattern. Its an “anti-pattern”.
For project managers who don’t know what they are supposed to be building, its the “go to”methodology. You just allocate a programmer to every thought bubble from a sponsor/user, no planning required. And if they change their mind, or it is inconsistent with everything else - well, that’s the beauty of Agile, you can do something else.
For software houses, its God’s gift for eliminating risk. Actual properly specified projects should be able to be done against a fixed price. Which means the vendor carries the risk. But “Agile” has no actual deliverables; it can only be invoiced on a time and materials basis. No risk.
Lets take an Agile approach to building houses. Ring up a whole lot of bricklayers, bricks, carpenters, roofing people, get them to come to your vacant lot, and tell them you want a family home. Don’t worry too much about how many bedrooms or how many stories, lets just start building. We can work out those details later.
Agile. The only alternative if you lack the skills or knowledge to actually write down exactly what you want in advance, and terrific if you are a programming business interested in a contract where you can’t possibly lose money. For everybody else, an expensive waste of time."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Manikandan Selvaganesh,2018,"Old thread, but cant resist answering.
I personally dislike agile. Agile is too documented and procedural. There are a hell a lot of meetings that unnecessarily happens that waste our time. To be simple, there are a lot of agile ceremonies that sucKs our time which can be done just by interacting to your peers during your free time. People claim work from home options are disruptive in agile(Common, does that really matter). It does not matter if the people who claim that takes. At the end of the day, its all about what development we have done. Whatever, the software engineering model be, it should not be too procedural neither too documented. Stop asking updates every now and then. Give us the freedom and independence to work, and you will see us better. So sad, that I m currently working on this model. I had worked on a company which gave us complete freedom, independence and after all, they gave us the time to work instead of blocking our calendars with all the meetings that they can.
__
A true lazy developer who dislikes agile.
Peace ✌"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Quince Williams,2016,"The software developers that I consulted with on a project were totally against Agile. They preferred Waterfall. They said that they liked to get all ducks in a row.
Agile methods, especially Scrum, seek feedback with investors/clients every few weeks. The problem is where clients desire an useless feature that they saw somewhere else during the 10th week of development."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Kevin Taylor,2016,"What killed “Agile” is that the project managers and other non-programmers took the reins of the Agile movement and “Scrum” became the dominant version of Agile. This effectively killed off Extreme Programming, which is a highly effective way of producing software.
You could see it at the annual Agile Conference. Each year the Scrum voices got louder and the non-programming focus of the event became more obvious. Eventually I, and many programmer friends, stopped participating and moved on."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Phil Jones (He / Him),2016,"When I first read ""eXtreme Programming"" I was enlightened, and thought ""this is obviously how things should be done""
Then I thought. ""OK. So what's wrong with it?""
And I realized. This was software development organized for the benefit of programmers. But not necessarily convenient for other participants like managers and customers.
I mean I liked it. And as a programmer I believed what was good for me was obviously good for the customers, once they got over their hangups and adapted themselves to me. But I could see how the rest of the management hierarchy would want to see more prediction and control and hard deadlines etc.
Well I never worked on a proper agile project, either waterfalls or extremely small projects, but reading countless articles analyzing ""what went wrong"" it's clear that management / customers did rebel. And changed the practices to something that suited them (giving them more of the (illusion of) control they wanted) and consequently what is now hyped as agile is a perversion of the original understanding and ideals .
Done badly agile just becomes a standard project with very tight deadlines."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Vishal Lahsiv,2016,"Don’t get me started…
Agile was probably designed for software (mostly websites) in which the deadlines were defined internally. In most cases that is never true and you don’t get the luxury to define you delivery dates nor will they line up to your sprint ends. If the customer wants it now you give it to him now not after two sprints.
As a developer, what is my incentive to take a long view of the system and invest time in coming up with a robust framework upon which everyone can build. Rather, I am just suppose to deliver pieces of shippable software and we all know what happens when you request management to leave your team alone for a sprint or two to “refactor” and cleanup the old technical debt.
As a developer, what is my incentive to complete more points than someone else in the team? My performance review is not being based on the number of points I complete.
There are areas of concentration that everyone develops. Each individual will know one part of the software better than the other. We don’t have to force everyone to work on everything…it achieves nothing and lowers code quality. If the person leaves we can learn but until then let these domain of expertise remain, it is very natural.
Management and many developers get so carried away by Agile that they don’t realize that the process is not the solution. We cannot ship User Stories or Task boards and the answer to every technical problem is not - Agile.
“StoryPoints/Velocity” - This one just makes me mad. So we now need this abstract unit of measurement which is not really time or man-hours but some obtuse weird notion of complexity which people take more than 15 mins to explain a new comer. Why?
Why or how is Agile different than a simple divide and conquer strategy to solve any complex task? You have a problem (any problem in life), how do you solve it - piece by piece."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Joey Guerra,2016,"Because they are not the ones deciding to be agile, someone else, who is not a software engineer, is deciding for them and forcing the process. Search the web for “the pig and chicken” story for an analogy. The chickens are the ones deciding, while the pigs have to live with those decisions.
I refuse to answer what methodolgy is better because there are too many parameters to the problem to give a good answer."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Aaron Brady,2016,"Agile is way of making things where you accept a large amount of uncertainty about the future and pursue what appears to be most interesting at the moment in exchange for learning quickly from experience, failing more often and deferring decision making to your future selves who are, hopefully, more informed and better able to make decisions about the product.
Some developers dislike the failures that come from the lack of planning in Agile, they say that spending more time mapping out what needs to be done would be a better way of doing things. Sometimes the lack of planning has real consequences, for example building a rocket to the moon probably could not be done through agile methods. if you found out halfway in that you needed to add another stage and hadn’t planned for that all along it would probably be a disaster.
Sometimes the process appears to be Agile, but is actually some other process in the guise of agile. For example having a daily standup when everyone knows what they’re doing may be a waste of time, or having management constantly changing priorities, or not accepting estimates etc. etc. can make developers feel like ‘agile’ is just a tool for management to manipulate you.
The alternative to Agile is to try to plan everything up front in a traditional waterfall manner. Makes sense for bridges, or moonshots, but by trying to do too much planning up front you often have to take guesses (that end up being wrong), and you deny your future self flexibility to adapt to lessons you learning while developing the product. And in the case of software, where the cost of changing directions is so low, the traditional waterfall method ends up being less efficient, and often bogs things down so much that projects grind to a halt (see the healthcare.gov disaster)
My advice is that, if you’re in a situation where people are rejecting ‘Agile’, try to come to an agreement on a process similar to agile where you learn to live with uncertainty, and move forward in the direction that appears to be best for your product rather than falling back on rigid planning.
(I recommend Season 1 for a much better analysis of the two types of project management I discuss here)"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Andreea Visanoiu,2017,"Agile is not a framework / methodology, it’s a way of thinking - as the Manifesto for Agile Software Development clearly says. The point is to work around these principles and implement them in your approach to software development. At no moment they say that you drop all the values on the right side and you go build software chaotically.
I’m a Scrum Master, so I obviously work with Scrum. But I’m not anal about it, I see Scrum suggesting a set of tools that I can work with and adapt to fit my teams. This is how we ended up doing Scrumban (Scrum + kanban), because Scrum didn’t exactly fit one of the teams. Another team does Scrum/XP. In other teams I use different approaches, keeping some elements of Scrum (roles, values, self-management, retrospectives mostly). When the case, I give up daily huddles, if the team already has a good communication flow going. On top of it all I’m a big fan of Lean (as it is promoted by Toyota and Mary Poppendieck), and I use ideas from there to increase performance and work better. Otherwise, I’m helping the team become Agile and Lean without getting stuck into frameworks and rules.
Certifications as a business created a big problem and put a lot of people that don’t understand Agile (or the concept of a framework vs a methodology, or the fact that for example using only Scrum is not enough, using Scrum “by the book” doesn’t work for all products or team) in the spotlight. There are tons of Agile Coaches, Scrum Masters, Agile PMs, Scrum POs that have no clue what they’re doing and they don’t understand the mindset. You have to live and breath Agile, and responding to changes and adapting are the first things that are dropped when implementing one of the Agile frameworks. It’s basically implementing Agile without even being agile.
Another issue I see: developers are not listened to. There are Scrum Masters, Product Owners, Agile Project Managers who act like bosses and give orders, set estimates and deadlines and push for work done without considering what the developers think or advice. That’s another big issue with Agile - waterfall gave them the impression of freedom (at least for a period of time they were left alone to work on the product), now a lot of roles are meant to bug them and control their work. This is again agiliy interpreted badly. One of the best parts about Scrum for example is the self-management concept. There is no management, there are no bosses. But it takes a true Servant Leader to understand that, to listen to the team and make sure the choices in process in tools is agreed with the entire team.
My favourite part about Agile is the “people over processes” part. One of my personal metric is the mood / happiness of the team. I take their feedback seriously (from the communication part, to “processes slow me down” part), I listen and I help them find the right tools to work with, I don’t impose (nor exhaust myself trying to convince them). They do the work, they know better. All I am expecting is for them to be open to experimenting, inspect, adapt and continuously improve. Be it Scrum, Scrumban, ScrumXtreme, story points or mandays, user stories or what have they. I don’t make the choices for them.
In the end the fact that the software development effort is guided and managed by someone else but developers is a huge issue. It’s normal for them to hate the Agile part, which may mean they hate the “agile people”. All the roles that are made by inadequate people, that don’t understand the need to change, inspect, and adapt of Agile. Which might mean, for a certain project, for a certain team, adopting waterfall."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Baruch Atta,2018,"The agile method relieves management from having to develop specs. which means developers must recode and recode until management gives the blessing.
The agile method has little use for documentation - which developers need to support a system.
Developers like best the reiterative waterfall. Complete specs and documentation, while continuously conferring with management at every step."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jeff Wilsbacher,2018,"Because “Agile” (note the quote) is often used to micromanage developers in one of a number of ways.
Becoming a software developer you have to spend a lot of time by yourself learning to code. When doing this your most productive/best feeling time is when you’re able to get “in the zone”. Flow (psychology) - Wikipedia.
Agile *requires* you to spend time outside of flow state for meetings, pair programming, user story creation/editing/validation etc.
It may also force you to be in the office at a time when you’re not productive (when their is a bunch of business folks around making noise and asking questions).
“PM paradigms” can be a problem. PM’s are often proxying for stakeholders. If those stakeholders have unreasonable expectations or are micromanagers it doesn’t matter how their message is delivered.
Developers want PMs to leave them alone for blocks of 4+ hours so they can (often with the addition of headphones and good music) get into a flow state.
Agile requires developers to work in a team environment where flow state is more difficult to get into.
“Agile” (note the quotes) frequently discards necessary technical spikes for activities such as research, design, investigation, exploration, and prototyping.
Software estimation is painfully hard. Some developers feel self-conscious about wrong estimates and force themselves into a mountain of hidden overtime so their estimates are (more) correct. While agile addresses this issue its (very) frequently disregarded during actual agile “production”."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jayesh Lalwani,2016,"I think the core problem in lot of Scrum implementations is the lack of self-organizing teams. Most Agile adoptions fail because they see the SM/PO as a PM that the team is organized around. It works a lot better if you empower the team to figure things out for themselves.
It’s all about power and responsibility. Waterfall models put a lot of control in the hands of the top brass. They get to dictate how the organization is organized. They get to dictate the process. In turn, they take extraordinary responsibilities. The developers essentially are responsible for doing things that they are told to do.
Agile, OTH, requires the managers to delegate power and responsibility. Developers are responsible for managing themselves. All the PO cares about is whether the Agile team is delivering. They don’t care about how the team operates.
(Traditional) Managers hate ceding control. Adopting a Agile model in a large organization that runs waterfall means that the developers will be responsible for making certain decisions. But, Managers don’t trust the developers to make those decisions. So, they come in and micromanage. And if they are not technical, they might dictate process that are not sustainable.
And, to be honest, a lot of developers don’t want control too. Oh they might say they want more freedom, but a majority of developers do not want the responsibility. What they really want is for the manager to go away and let them do what they want to do, and at the same time, be answerable to the client. No, it doesn’t work that way. If you want the freedom, you are answerable. A lot of PMs become punching bags for the developers. End of the day, it’s a lot easier to complain about the PM than to fix the problem."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anonymous,2016,"My apologies for posting anonymous but I would definitely get some trouble publicly criticizing our project management if this was showing my name.
The trouble I have seen with agile is that companies, at a high level, hear about this great methodology that will have them developer faster and more reliably which sounds just amazing to them. So they tell their development teams and project managers that they all need to start being agile. However, none of the executives and project managers are willing to let go of the metrics, measures and assurances that their older methods had. They want the project to better meet the client’s expectations but they won’t relent on agreeing to every specification in detail before development starts and they won’t agree to changing the requirements as the project progresses. They want estimates to be better but they won’t agree to start development until every task is broken down and estimated.
They want the benefits of agile without giving up any of the processes that they are comfortable with.
In our current agile methods is that there is nothing agile about them at all. Officially the project managers tell the world we are agile but the reality is we are working on a waterfall method with review meetings every two weeks. The client and business analysts design the specifications to exact details before hand, estimates are given, a release date is agreed to and a contract is signed all before any development begins. Once development starts we can’t change the specification without going through a change request process and testing is all done at the end. The only things we do that makes people believe we are agile is (1) we have a meeting every morning and (2) we have a review with the project manager every two weeks.
People here say they don’t like agile and that agile doesn’t work but the truth is they don’t know anything about agile methods."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Walt Karas,2016,"Software development is a practical activity. Practical activities are activities people expect concrete results from. Software helps you do concrete things, like drive your car or pay your bills online, not nebulous things like improve your general sense of well-being. Principles that help you do practical things should be falsifiable. This is an issue with many methodologies, not just Agile. Agile says you should have a backlog of features, and work on them from high to low priority, and just get as many done as you can in each sprint. No pressure. Since the USSR no longer exists, it would be hard to find an organization where you could strictly follow this principle. Usually, you have lots of high priorities, and you’re trying to guess which ones you can put off without going out of business. You rarely get to work on anything that seem “optional”. Sí pressure. So, whatever goes wrong, your Agile consultant making 3 times as much as you are can always say “well, what do you expect, you’re not following the rules?”. Agile always works, because, in practical terms, it’s impossible to say it doesn’t.
Maybe we should keep our floaties on and stick with methods for now:
Don’t just sit there. If requirements are murky take your best guess. No matter how much throwaway and rework results later, you won’t get less done than you would have doing nothing. Do the OO thang and try to make components that make sense free standing and could perhaps be reused in other efforts.
Writing stuff down about what your doing and trying to do is basically a good idea. Lists of somewhat free-standing points (like this one) are generally more helpful than long paragraphs. If you don’t have tools to make flashy fonts and graphics as easy as making stuff that looks like IETF RFCs, then make stuff that looks like IETF RFCs. Slides that don’t say much of anything without you standing next to them saying what they say are of very limited usefulness.
TDD is generally good if you’re not anal about it.
If experienced team members want to dive into the details of something they anticipate is high risk, let them. That’s often the best way to anticipate and mitigate delays and the need for more resources as early as possible.
Lets not try to rush the day when we’re truly ready for the methodology deep end."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Peter Trudelle,2018,"They hate Agile because their leaders inflicted a project management paradigm on them, and called it “Agile”."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Kostya Stepanov,2022,"I think the biggest problems is client’s distrust and dissatisfaction with communication when going agile… When outsourcing, a customer never has full control over what’s happening.
Successful communication increases the probability that a client will be fully satisfied with the final product. It soothes the nerves, creates friendly working relationships, and gives more freedom to a developer.
Building trust is key to regular clients. And that means more profit, reputation, and glory in the end.
These methods worked for me:
Show your client how to work with you
Through smart onboarding and communication guidelines.
It’s very important to clarify what to expect from you after they hit that “send” button. Ideal onboarding provides answers to 3 key questions:
What services do you provide (in details)?
On which principles do you provide those services?
How exactly can your services be useful to a client?
Set realistic deadlines while managing an agile project. Set achievable goals. Communicate with them in a believable way. Teach employees how to deal with clients’ objections and comments.
Update product roadmap
Getting the roadmap right from the start can save time and resources in the future, but development is tricky, and sometimes adjustments are necessary, especially in agile projects.
If you’re adding tasks to your backlog, will the final look change? Will the project help with some other client’s problems, other than the ones you discussed in the beginning? If the answer is yes, update the roadmap. Keep it current and make sure the client knows about it.
Don’t let your perfectionism get the best of you. Being on schedule is more important for a client than introducing new features.
It’s not just sprints and scrums
You should regularly have 2 types of meetings with them: vision-alignment meetings, and retrospective meetings. Schedule them after you finish several sprints.
Vision-alignment meetings are the ones where your team and a client can reassess the state of a roadmap, offer changes to its timeline and budget. When working on an agile project with a client, help her or him make sure that:
A project is heading in the right direction.
There is a unified vision of the final product.
You solve the occurring difficulties before the stage of project delivery.
Retrospective meetings are the ones that allow us to discuss the existing state of affairs. What works? What sucks? That kind of stuff. They are also a great way to receive positive feedback: recognition of teams’ merits by others.
You can see more about my agile methods in my free article on shakuro.com."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Patrick Butterly,2017,"WOW lot of answers! Ill add my own because I dont see it (although it might be there somewhere) the answer is very obvious when you look at it though.
AGILE IS NOT WELL DEFINED!!!!!
People advocating agile will go to great lengths if it isn't working to tell you your doing it wrong. Bottom-line is agile is a abstract concept with loose implementations hat focus around a center theme of “if it isn’t working for you change it”.
Management see it as a fix all but focus on moneymakers and demand deadlines and estimates(for obvious business reasons), this makes it anti-productive and frustrating for development.
Basically a buzz word in the management realm everyone has to use but more often than not wont relinquish control over the process reducing it to time wasting nonsense.
and my answer ran on longer than intended…."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Adrian Olszewski,2017,"Personally - due to pair programming. I hate working on my code with someone who interrupts me. I like thinking and coding completely alone. Secondly - I don’t like working on someone’s else code (doesn’t matter how easy to read it is) and I don’t like others touching my code. I accept and appreciate code review (to make my code better), but I don’t accept others to modify my way of thinking. Thus - I don’t work for companies where Agile is employed. It doesn’t mean I don’t appreciate Agile as a smart way of making life easier and product better. It only doesn’t work for me."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,James Simpson,2016,"There are reasonably common things that developers don't like such as:
sustained pressure to work long hours to meet deadlines that they don't subscribe to
being asked to provide status and updates too frequently
being part of a team that is trying to fill expectations that are not realistic
not having the time to develop at a level of quality they feel is ""good""
the need to create reports or communications that feel ""artificial""
You can achieve these things with almost any methodology including Agile. I think it's helpful to look at the root causes behind the points above in a given environment to understand why developers are unhappy. Not always, but often, it comes down to a combination of management values, culture and expectations.
For example: if a point of authority in an organisation holds the value that it is okay to achieve an aggressive goal by simply pressuring people into doing more than they think they can do, and they do this repeatedly, you run the risk of seeing some of the unhappy symptoms above. It doesn't matter which methodology or framework you use.
A particular challenge with Agile is that the way in which it is communicated often promises a lot. And it seems to promise more with each retelling / reselling. This is where it can be helpful to separate the set of ideas called Agile, and the set of expectations created when groups buy into a quasi-product called Agile. Or Scrum. Or Waterfall..."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jasmine Noack,2016,"I work in an agile shop and a lot of people like it, but there are things we all hate about it. Here are two big examples from a conversation last week:
incremental: Just because you say the word incremental doesn’t make the project smaller.
iteration: Sometimes people mean do a shitty job and you can fix it later.
The problem isn’t agile it’s people who act like agile is some kind of magic bullet. It’s not. The work is just as hard as without agile, it’s just organized differently."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Rudrangshu Das,2016,"My 2 cents. 2 disclaimers to start with.
First I have worked in the IT services sector for my almost 10 year long career. Although I have developed enough products for my clients who were product development companies, but I always worked as their vendor. So my view is from that angle. Secondly I will comment on SCRUM as I know of Agile as SCRUM, I am not aware of any other models.
SCRUM in my experience is a model promised to project/product managers or Upper Mgmt in general that makes their team efficient and productive to the optimum level. Most upper mgmt believe in this advertising and go for it. So they often extrapolate this advertisement to mean that a product/project that has been estimated to take 6 months by the architect/developers, the techies can be done in 3 or 4 months if we follow Agile. Even if people don't say this openly I feel this is what they think in their heads
I don't need to explain how unsound that logic is. So often the seeds of discontent is sown early among the developers because they feel they are going to be overworked and the mgmt doesn't trust their judgement.
Now coming to the practical problems I have faced in working in a scrum model.
1) Onshore - offshore development model. I don't know what is the right way for doing sprint planning and daily standups in an onshore offshore model is. But I can comment what I have seen in several of my projects. There is 1 common planning meeting and 1 common daily standup for both onshore & offshore. It doesn't matter if the team is large or small, there is always some communication gap between onshore & offshore. The offshore invariably plays catching up to onshore in terms of requirement and design changes & the vice versa happens in terms of work progress status. So a daily standup call drags on to an hour or sometime more because instead of just work updates we are now discussing requirement changes which were not communicated to offshore before. Now the meeting was scheduled at a time that was conducive to both onshore & offshore. That means start of day for some and end of day for some. For the one whose day is going to start after an hour long meeting in which I spoke for maybe 5 mins, I am already put off. It will take me at least an hour, a cup of coffee, a bit of random internet browsing before I get mentally prepared for coding. For the one who ended the day with such a meeting, I am kind of in a foul mood because I feel I could have gone home early if not for this damn meeting. On the top of it if there were changes in the plan for tomorrow, I can't help but think about it on my drive home although I try my best to shutoff my mind from work at the end of the day.
2) No product/ project plan is perfect at the start. No software design is perfect at the start. There are always unforeseen changes sometimes forced by the business, sometimes forced by technical challenges and non functional requirements. I feel SCRUM makes it harder to accommodate changes. There is always an obligation to plan some work for everyone every sprint. Sometimes its not possible. Sometimes a task is too big to be broken down into chunks that can be done in 1 sprint. But a strict adherence to sprint plan sometimes leads to doing something while fully aware that the work is going to be discarded in a subsequent sprint due to a design change. This can be very annoying and I have faced this multiple times.
Having said that there definitely are some advantages to SCRUM. Productivity is one of them. Developers waste less time if they have to report a daily status. I am trying to think hard about other advantages right ñow... Sorry nothing.
I am a developer ao whatever I wrote is from a developer's standpoint. My view could be narrow and myopic."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Warren Wise,2016,"An agile approach to software development requires focus. Some developers have difficulty focusing, so they need distractions; otherwise, they’ll get bored. Even though there is information and studies that say multi-tasking slows you down, they need to multi-task, or they’ll be miserable.
Another thing agile development requires is that developers and stakeholders (customers, users, SMEs, managers) work together. Many organizations are structured like silos of mistrust. It’s painful to work with people who don’t trust you, who think you’re incompetent (just because they don’t understand your job or work) and who are disinterested in how their activities impact you.
To be good at agile software development (or at anything at all, really), you need to practice. You need to get better at designing systems, testing, and using your programming language and its libraries. You need to learn different programming languages, programming paradigms and design methods. You need to analyze your work and performance to find weak areas, then find resources (books, training, mentors, user groups) that can help you develop mastery. There are many programmers who are in it mostly for the money. They don’t really like programming enough to try and master it, only enough to not get a bad review from their manager during the performance appraisal process. Agile methods require continuously improving your team’s ability to deliver high-quality software. For someone who’s capable of software development, but who wouldn’t do it as a hobby, all the effort spent figuring out how to be better as a team can be a serious drag.
One last thing I’d like to mention is that it seems to me that a fair number of companies adopt an agile methodology under false pretenses, for the wrong reasons or with a lack of understanding of how agility works. I know a company whose IT department convinced the organization to adopt Scrum for the standard reasons, but one of the IT Architects told me the main reason was so that blame could be placed on the business when things went off the rails, since in Scrum, someone from the business (the Product Owner) is responsible for prioritizing work, and all stakeholders have an opportunity to attend a demo of the software before it’s realeased. If business leadership complained about the software that was released, IT could then simply say they delivered what was asked for and released what was accepted by the business, so it’s not their fault if users don’t like it or it’s not useful.
I find it difficult to imagine that any developer would be opposed to a way of developing software that: valued their knowledge, skill and judgement; gave them frequent feedback on the quality and impact of their work; made the resources they needed to deliver valuable software readily available; gave them time to consider multiple options, and to reflect upon and improve the quality and efficiency of their work. I think developers hate agile methods the most when the company or team in which they work doesn’t value the culture that makes this possible, yet they expect to see the fruits of such a culture. That inconsistency between organizational culture and organizational expectations creates one of the worst feelings in the world of work."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,John Wright,2016,"Agile is a bit like nailing jelly to a wall.
When people complain about sprint pressures, velocity etc Agile devotees say “Well, that's not really Agile”
Agile gets a lot of kudos with more senior management because it either offers faster delivery or exposure of issues earlier. Done right it can deliver both.
Unfortunately, Agile still needs people and they often lie, bluster and prevaricate. This leads to inaccurate solutions that need rewriting and reworking. People will just throw in a library they found to get the job done quicker rather than question whether it's the right thing.
Agile is the best methodology if you have a perfect setup. Failing that you need a sensible mixture of Agile and Waterfall: plan, report, estimate, report, develop, report…"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Stephen Johnston,2016,"In a nutshell: It’s not a project management paradigm, but everyone thinks it is.
The project extends beyond the sprints and team dynamics. Agile, in general terms, deals with the team dynamics to deliver units of result and to some degree units of work. The project is many units of result (vs work). I’m using some traditional terms differently than usual to make a point. A project, the agile thinking, encompasses many results (outputs) from a team. The team organizes in an agile manner to create those results with their work."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Eric Larsen,2019,"Toward the later stages of my 30+ year programming career, Agile was introduced at the company I worked at. It was a large Silicon Valley tech employer. I do not recall any engineer who disliked Agile. Not everybody was enthusiastic about it, but there were few objections.
There was management overhead, but it was not much better or worse than the previous processes.
The best part of it for me was that it seemed to limit the amount of pain we were subjected to. In the previous system, we would work for about 6–9 months, get behind schedule, the managers would panic, and we would be in for 2–3 months of crunch mode, cracking of the whip, the captain wants to go water skiing, whip the slaves, pull on the oars, nights and weekend work, etc. etc. etc. etc.
With Agile, there might be some pain and agonizing re-appraisal, but it was every two weeks. We get a new plan, try again. If we fail to get things done in two weeks, it becomes visible. It does not get hidden or covered up for months, then finally exposed, and we all get a blowtorch applied to our ass.
I thought it basically worked, I do not know of a better way to manage. There were problems, but it was due to lack of understanding of the team on how to effectively apply the methodology, not anything wrong with the methodology itself. There is no management technique that can compensate for large scale wrong technology choices, lack of programming competence, or mitigate the difficulties caused by dividing a project across time zones, or hiring people who speak different languages."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Tarasekhar Padhy,2021,"Because there is a huge difference between “doing agile” and “being agile”.
doing agile: Developers are forced to do standing meetings and send each other detailed EOD status reports even though it could be a simple conversation or a message. Agile requires each of the team members to be on the came page and status reports are a great way to do that but if there is a better, easier and a hassle-free way to do it, then adopt that. Agile suggests whatever works, use it. If just a text message or something is enough to update everyone in the team, then these “orthodox practices” are not necessary. It just clutters the inboxes and calendars of the developing team.
being agile: Create a strategy, build a small part of the product, test that small part, get reviews, pivot or persevere. In a nutshell, that is what being agile means. Being reactive to external changes and adopting the course of development as necessary is the soul of agile which the management has successfully crushed. True agile is a state, not a process that you follow or set of predefined rules you abide by. The rules and process are developed along the way based on what works and what doesn’t.
principles>practices: most of the organizations have created a set of practices, steps, rules; that the developers need to follow to “do agile”. This entire belief system and theory is against agile’s core values and principles in the first place. The practices to “be agile” should evolve along they way and the way to be at the right place is to understand the core principles of agile truly.
only coding is agile: I believe this is the most prevalent one. If the marketing strategy, distribution strategy and management operations are conducted in a non-agile way, the effects will not be visible at all. In fact, just making one phase in the entire process of product development is detrimental to the overall process.
There are many more reasons for which developers despise the version of agile that they are forced to follow. We have a free eBook that suggests how agile can be applied to any workflow, true to it’s principles:
Understanding Agile for eLearning - Free eBook for download - zipBoard
A free eBook which will help you understand the challenges in the eLearning industry and how Agile could just save the day.
https://zipboard.co/understanding-agile-for-elearning-free-ebook-for-download/?utm_source=quora&utm_medium=social&utm_campaign=Outbound_quora
Do check the eBook out and let me know how it is. I also feel that if agile can be applied in the software industry and also in the eLearning industry, it can be applied in most of the industries. The answers dropped by fellow quorans are also quite informative as it helps me understand what is actually wrong.
The reality of the matter is, most of the development teams have adhered to “fake-agile” instead of real one. Besides, if you feel that agile is not working for you, drop it because that’s what the principles of agile also point at!"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Alysson Melo,2016,Using Agile you can makes fast anything. The key to improve your product is make the right thing after that you make faster. So in agile sometimes you dont have time to collect the feedback of your last sprint with your final user and other stackholders because you are already doing the next sprint. So you start doing the next Sprint without feedback and if you are on the wrong way you will spend a lot before to discover it specially if you have big cycles like 4 weeks Sprint. Your final target is improve your learning speed about your experiments and yor product. After that you improve the product delivery speed.
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Richard Leddy,2016,"The picture that James Grenning has looks like a club of past managers I was assigned to. Being that I would rather spend most of my time with attractive young women, you can imagine that I did not get along with many of my past managers.
That said, the time that I had a fairly good experience with something like agile was a long time ago. I don’t think the term was invented yet as a name: ‘agile’. We had an issues burn down list that was a FileMaker Pro application that this kid did. The director of marketing and I could war over issues by reseting their priority. This process almost became emotional. But, it worked well to produce quality product.
But, what about the sprint stuff? Well BS BS BS. In fact the first thing I did was create a design for software that allowed a more well defined creation of unit. The software design was something that I threw at this little consulting group and they let me run for a few weeks making it. I made a byte code interpreter of a sort of task language that I made up. The program compiled and ran the language. The task language was made to work fairly well with the unit descriptions from a content team made up the marketing director and an education planner. So, I could translate the planner’s scripts into the language and compile with medial elements in place. The project manager, a seasoned instruction video developer tract my progress with the first unit made according to the method. He wrote it all done with pencil on a blank piece of paper, which he kept in a manila folder. He kept note of my time on pieces, and then told me about it later.
Then, we did sprints for a unit at a time. This involved making video, doing voice over, flying in people from around the country for talking head videos, placing the media, making the script, compiling and integrating into the final product.
As the units were integrated, the head of marketing and some media boys checked for issues and filled up the priority list. I tried to put plumbing ahead of cosmetics. The others seemed to like cosmetics more. Things came off the list as short time wins, set aside projects, fix media, fix the platform, etc. Short time one were like opportunistic wins. Others, got schedule by priority. Priorities would change when for team members in and out of the work space as well, for resolving issues they had prioritized and could communicate about.
So, the burn down was more a final phase process related quality and show stoppers. At that point there were fewer new units, and at the end no new units just weeks before release.
The process was fairly high pressure for the small group. But, good product came out.
The point is that SCRUM or agile was not applied for the whole project. Sprints were not applied for the whole project. These things were used when the had to do with the progress that fit with them for the part of the project that needed them. Bigger parts of the product were not scrum items. They were definite chunks or sub projects.
Another point is that innovation was needed to create an assembly process. And, the assembly process was subjected to the predictability of a sprint.
Another point is that the team cooperated and argued (at times with fervor) over points using a system for prioritization. And, that system was simple enough we could do it with a home brew DB.
I have been in shops that make the agile thing not be agile. And, the buy overblown expensive “agile” systems with all kinds of reporting features to set up a long list of poorly defined tasks. Some people on the teams associated with these crazy task lists take it seriously, especially the scrum masters. Others stand in the scrum circle and make bad jokes.
And, yes the scrum masters figure out how to use the big “agile” system to plan out political vendettas by making management think a guy is a slacker. “We’ll just split that task and move it to the next sprint. Whadya say?” BS BS BS. (Don’t give the scrum master a gun. )
So, basically, agile when used as it is in the formal way over long periods of time is probably BS. But, a crowd of “Hill Billies” can make their own business process and make it work, although the didn’t know the prescribed way. They only knew the way that worked.
One of these days I’m going to get a bunch of funding for a tick tack toe game. I’m going to write it using Hadoop. And, I’m going to buy Jira and hire a bunch of scrum masters dressed just like the guys in James Grenning’s pictures to work the Jira system and report to the investors about my progress. That would be just like working for a fortune 500 company. Anyone want to be on the project with me?"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Michael Walsh,2016,"A lot of developers dislike Agile because instead of being agile it can be used as a magic Process which will fix everything by adding more meetings, doing away with any sort of design concepts and allowing management to change direction 300 times a day so no one has any idea what they are doing.
Then everyone gets yelled at because they missed their ‘sprint goals’.
Agile done right can be wonderful because it improves communication between teams and prevents the ‘you designed it wrong’ 2 years after after starting the waterfall. Agile done wrong can be a great way to line the pockets of Agile Consultants and stress out the developers to the point of quitting.
YMMV."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Michael Burrows,2016,"Because corporate America is much like the military in that it wants everything codified. The idea behind this kind of thinking is making every input(employee) less important than the process. The traditional thinking is that depending on process gives more consistent results. The results might not be as good as relying on talent but that reliance can come at the expense of consistency. While that kind of thinking is reasonable from the business perspective it can conflict with some programmers mentality. Many if not most programmers started programming because they are oriented towards creating things not completing checklists. The idea of working an assembly line gives many programmers night terrors. “Agile” for many programmers can feel like working an assembly line.
Numerous people smarter than myself sing the praises and sins of various methodologies so I won’t argue for either. I’ll just say that I don’t see “agile” disappearing from the landscape anytime soon so programmers will have to make the best of it."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Dmitrii Medvedev,2016,"In short?
Agile == feature creep. Feature creep is bad."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jugdesh Mirwani,2016,"I don’t like Agile because use of the method is not intuitive with success. It all relies on having a strong person acting in stakeholder role that is proactive in communicating and participation in every aspect of the process. This person must be be able to be held equally or more accountable for end deliverable as compared to development team.
We have all worked with business focals that have been assigned this task that will do this passively and just lay the blame on the development team when the end product is not what is expected. I have had success in such engagements because I can either anticipate or translate the stakeholder requirements in to a workable product based on industry standards.
Leadership can come from anyone working on project from Developer to Lead Developer. Basically you need someone that has worked in environment with a lot of governance process that knows what elements of governance is required while keeping track of that in his or her head rather then with formalized work product.
If nobody is doing this then all you are doing is development by the seat of your pants on the fly and dumping the cost of lost quality of the rest of the support lifecycle of the product.
I would not say never use Agile in favor of alternative. The answer is never to Agile in when inappropriate. I would avoid for commercially distributed software. It is the worst when development team is in vendor relationship. Most SOW/DOU in Agile Arrangement are dollar paid for any hour worked. They have no incentive to produce a quality product on the first pass so they can bill you over and over for rework."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Steven J Owens,2016,"A great number of reasons, most of which have nothing to do with agile development.
A lot of people talk about agile development, but don’t actually do it.
A lot of people misuse the term agile development (the same sort of people who use “refactoring” to describe any rewriting of code).
A lot of people simply do agile development half-assed (see “We Tried Baseball and It Didn’t Work” by Ron Jeffries, We Tried Baseball and It Didn't Work).
Agile development is demanding; the XP folk, for example like to refer to XP as “low process, high discipline”, the point being that you can get away with a lot less process (and thus a great deal more adaptability) if you hold yourself to a high standard of discipline at several levels. On the low/day to day/hour to hour level there’s using test driven development consistently, using refactoring properly, etc. On the higher, more strategic level there’s staying committed to your iterations and to concepts like velocity and the planning game or whatever else you use. There is a constant temptation to skip steps or cut corners.
Some aspects of agile strike people as weird - pair programming for example, can be incredibly effective, but it freaks people out.
Some aspects of agile are hard - to use the same example, pair programming is a skill, it takes a not-insignificant investment of time and energy to learn to do it well.
Many aspects of agile are useful and effective, but any given aspect or approach to agile doesn’t necessarily fit every project - agile proponents were the first to say that “one size definitely does not fit all”."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Alfredo Alvarez,2020,"The big problem that I see is that a core requirement for agile to work is great communication skills and negotiations.
These are only really available on highly experienced teams in which the members have been coached on both technical and soft skills.
When you add product creation support staff (product/QA/QE) they need to be really familiar with realistic expectations in order for this conversations to happen and be done within a short time. In 90% of the cases that is not the composition of the team.
So we are using a process meant for highly skilled and experienced team on neophites with some guidance. This creates a lot of friction and without communication that friction just turns into plain stress.
In my whole career I only think of the teams I’ve been has been fully functional inside agile and we weren’t really using scrum more of an XP team."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Sergey Ch,2020,"A lot of developers dislike not the Agile but the Corporate Agile. These are two different beasts to my mind. Agile was created as a practice far better suitable to modern software development than Waterfall methodology. When requirements change many times during the development cycle you cant afford Waterfall anymore. Agile was created by developers as an aid to them.
the core idea of Agile is that everything is agile, also the Agile itself is agile and not strictly defined. You adjust the methodology according to the development stage of your product.
But when Agile is adopted by a large corporation it becomes stiff and embodied in paper business flow, like “you must standup”,”you must assess everything as a user story” etc. So Agile becomes mandatory, every step of it. I have known a corporation that went as far as requiring memorising the agile manifesto by heart and reciting it!
Agile as ideology and methodology was not conceived to be mandatory. All its steps are guidelines rather than something poured in concrete and steel once and forever. But this is exactly what it becomes in a large corporation. I have seen standups of more than 30 random people hailed in by the management because “Agile commandeth thou to stand up” and not because those people were somehow relevant to a standup.
Corporation is about procedures. And they must be mandatory because it does not work otherwise. But Agile requires that developers have a say in adjusting the application of the methodology itself depending on their project. the procedures of agile must be themselves agile and not biblical commandments to be followed blindly.
So lots of developers point out the discrepancy or sometimes outright foolishness of “bureaucratic agile” in large corporations but not the methodology itself."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Claude Wilbur,2019,"A lot of good answers here. I particularly like the answers from Mr Grenning and Mr Green.
I will add a comment and an alternative. The comment is whatever methodology you use, it will not improve anything unless changes are made in company culture. This included everyone from top to bottom being willing to work in an unfamiliar way. Usually this means ceding some aspect of control and responsibility to someone else. Most humans are not OK this, developers included. If you read Winston Royce’s book, it seems reasonable enough. Yet Waterfall became a series of milestones that had to be met on schedule, with no back tracking to fix things that weren't quite right. If you look at books on the different methodologies which became Agile —XP, Scrum, DSDM, Crystal--they don't really advocate “iterations” which are fixed deadlines with no thought for the feedback and rework needed to do a quality job. Even if there were a proven silver bullet (look at some of work of Harlan Mills) it wouldn’t be widely adopted without being distorted to fit the comfort of “them” and “us”.
The alternative is something that was used in a company back in the late 80s. The idea was write the manuals first: tech manual and user manual. Each draft was submitted to all stake holders. Questions would be asked and the manual would have to be updated to reflect the answers. This would continue until all parties agreed that we had everything correctly described. Only then could commitments be made. During the process, developers could start doing any development task they wanted, but no delivery commitments were made until all participants were happy with manuals. Same for management, marketing, everyone. Everyone knew that whatever they did was tenuous and could be totally upended by the next edition of manual.
It worked surprisingly well. Not all was goodness and light, there was head-butting, wounded egos, and back-to-square-one. Nevertheless we always felt that each revision was forward progress, and the current state of the project was widely visible. Testing of the project consisted of evil people trying to show that the product was not as described in the manual.
We had two advantages the helped us regardless of methodology. One is that it was a small business (150 employees over two timezones). The other was that nobody copped out on their responsibility to answer outstanding questions. No “that situation will never arise”, or “surely no user would due that”.
I've no idea if this could be scaled up to the latest project at MegaCorp. To this day I feel pretty good about the final product. This is in spite of my present realization of the degree to which we were all naive, inexperienced, and ignorant."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Ilya Bibik,2019,"They don't dislike Agile, they dislike what is presented to them as Agile. Agile often is not implemented correctly. Scrum Masters often don't have experience and clear understanding what they are doing. As result teams try to execute rituals that do not have a clear purpose in they context."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,John Penney,2019,"We don’t. We just hate the Name, the meetings (which no one ever does correctly, so they’re not agile), the scrum master (who have 2 hour “scrum” meetings once a month) and the sprints (which take 5 months and never have any of the features of a sprint).
agile is the way I’ve always developed software. agile is the way EVERYONE develops software. it’s like science, which is different from Science. People who hate Science just don’t understand that it’s different from science.
Everyone loves agile, they just don’t know it yet."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anupama Kasturi,2018,"Developers dislike ‘Agile’ methodologies only when they are not practiced the way they are supposed to be.
In Agile; people doing the work make the estimates and commit to work. However this does not happen; managers make commitments and then thrust the same on the teams to commit to their timelines.
If Agile is practised the way it has to be then developers will love it because; because teams are at the centre; Focus for People :-
They directly understand the need, vision and goals and would hence contribute towards the right solution
They make estimates and commitment based on their capacity; they are empowered for the same
They are motivated as they focus towards outcome rather then output"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Thangaraja,2018,"I will use scrum instead of agile as scrum is the subset of agile and it’s easy to understand
A proper scrum team consists of developer,product owner and scrum master. As per scrum, the developer denotes the person who is involved in building the product. So it includes software developer, tester. Product owner is the own who is reposnsible of maintaining backlog items, priotize stories. Scrum master is the one who helps the team for better interaction, resolve conflicts.
So why lot of developers dislike Agile?
Lack of communication. As per agile manifesto, business people and developers must work together in all the phases. Business people puts all their effort without consulting with developers prepare the requirements and send to developer. The developer rejects or asks for extra time to build it due to technical difficulties. Business people do not accept it as they have spent lots of time and effort. So this will be escalated to next level. Most of the time business people win because the company always put business first as they bring money.
Most of the business people either do not or don’t want to understand technology. So most of the time they underestimate the effort required for building something and it directly hits the developers. This is again due to lack of communication.
Misusing the principle and change requirements frequently . Agile is meant for welcoming change requirements. This is one of the wildly misunderstood principle and business people take it as granted. Business team comes with the feature, developer builds it in sprint-3 and then in sprint-7, the business team realize that this could have been done in another way. So the completed feature will be removed and build again in sprint-8. Same will continue multiple times.
Project managers: There is no concept of having project managers for agile. But sadly most of the companies still have. Due to inclusion of managers they except status for everything. Most of the time this will lead to frustrations. This point is applicable for all not just for developers.
Not giving importance to user stories related to technical improvements: Business people expects a feature to be released in every sprint. This will not always happen. Every software product needs technical advancement. Business team don’t understand this.
Not giving importance to testing/documentations: Testing and documentation are equally as important as development and these must be done along with development parallely. This will save lots of time during maintanence phase. But developers don’t get enough time to do this and when problem occurs they will be questioned for not doing it.
Its definitely not the agile which developer dislike but it’s the way the agile is misused."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Mingzhu He,2018,"In theory, Agile is Iterative Improvement as applied to software development. It is meant to shorten the ideation to product life cycle to reduce risks and to increase a product’s adaptability to balance changes in business, user, and/or technical requirements.
In practice, Agile is a set of rituals designed by a team for a team within their context to collaborate efficiently to reach effective continuous improvement of a software product.
In my limited experience, the varied ways in which practical implementation and theoretical ideals diverge are what cause headaches on Agile teams. Some examples include:
Rituals being too rigid or too undisciplined
Communication breakdowns
Unbalance-able constraints (business, technical, and/or user)
Lack of true Iterative Improvement mindset
Number 4 being the root of the issue.
So while Agile is the keyword that encompasses both the Theory and Practice of Iterative Improvement and each team can interpret it differently in context and will all meet challenges along the way, the ones with a growth mindset open for collaboration and Iterative Improvement of both the product and process are the most sustainable ones in the long run.
P.S.Iterative Improvement is not unique to software, it has been and is becoming a universally embraced concept in manufacture (Toyota), hardware, management, design (Design Thinking) and even education (Improvement Science) as it follows the natural progression of change and innovation."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Eljay Love-Jensen,2017,"These are two good questions, and the answers have been high quality awesome!
> In a nutshell, why do a lot of developers dislike Agile?
Because Agile™ is unrelated to agile as per the Manifesto for Agile Software Development.
> What are better project management paradigms alternatives?
Umm, agile isn’t a project management paradigm. I’m going to use Scrum as that’s the only agile-based methodology I have any familiarity with.
Scrum, as originally conceived, is both a project management paradigm and software engineering best practices. Somewhere along the way, the software engineering best practices got lost from Scrum.
Scrum used to have a very low barrier to entry. It used to be super-easy to do. Kelly Waters describes how to adapt to Scrum in his “How To Implement Scrum in 10 Easy Steps”. <How To Implement Scrum in 10 Easy Steps> But since then (that was 2007), it seems that Scrum has morphed into a bizarro anti-agile version of its former self.
I’m not sure why it has evolved that way, but I’m pretty sure that contributes to developers disliking Agile™. (On this forum itself, some lucky developers have had great experiences with Scrum. So it doesn’t have to be bad.)
I think the thing to keep in mind is that agile is a set of four value and twelve principles. To me, that makes agile a cultural thing, not a project management paradigm thing.
If the individual developer, the team, even the company has not embraced and internalized those values & principles… well, in the words of Mr. Mackey “You’re going to have a bad day.”
That’s when bizarro-based Scrum has flipped/twisted all four values and twelve principles of the Manifesto for Agile Software Development.
Exercise for the reader: rate each agile value & principle on a scale from “meh” (1 star) to “yay!” (5 stars) for how your team is doing. Those concerns should be front and center for your sprint retrospective.
And if the team, or management, or the company is antithetical to those values & principles, it will undermine the methodology due to corporate antibodies. Even if the methodology is, ostensibly, agile-based.
My 2¢. YMMV."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Debbie Madden,2017,"I’ve been running Agile consulting shops in NYC for 14 years. I’ve personally talked with thousands of developers across hundreds of companies about this exact topic. Here’s my take:
Developers value empowerment and autonomy. When a stakeholder uses Agile as a framework to remove empowerment and autonomy from the developers, developers get angry. This leads to the perception that developers don’t like Agile. But, what they actually dislike is the lack of autonomy. In fact, when implemented correctly, Agile is the most empowering framework out there.
Agile is too often set up to fail. Let’s say you have a project that’s at risk of going over budget. Someone has the idea to use Agile to solve this problem. And then chaos ensues. Agile isn’t a magic bullet that’s going to take a failing project and right the ship overnight. It’s a set of practices that, when used correctly over time, lead to high functioning teams that deliver on a predictable cadence with predictable quality. It’s not a life raft.
It’s not a replacement for communication across teams. As companies scale, the biggest roadblock to growth is communication. People try to lean on Agile at scale to solve things, but at the end of the day, the humans on the teams are responsible for effective team communication.
So, I’ll push back on this question and say that in my opinion, it’s rare to find a developer that truly dislikes the core of Agile. But rather, it’s the extra external stuff that often tags along under the “Agile will fix things” umbrella that developers dislike."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Dipankar Das,2017,"Programming is largely a creative job. Unless it is for fixing simple bugs or extending or repeating existing features or assembling libraries to produce a solution, programming could be as creative as writing a poetry or painting a canvas.
Early stage development has been always agile. Even when people went crazy about waterfall and other methodologies, programmers would have been developing in agile mode. While management and designers did the talking, programmers kept building and rebuilding the POC over and over.
Adoption of “Agile process” as others have mentioned is rooted in mistrust. While some folks are excited to embrace anything that is trending, short sighted management is looking to reap benefits from, “daily roll call”, “micro management” and “release weekends”. People who cheer “anything that is trending” would keep telling others that they are not doing agile the right way. It is like the denial of the religious extremists, not following the holy book the right way.
Software development is still the most widely practiced creative and financially rewarding profession. Unlike construction of a house or bridge you do not need a solid design or framework to start software development. The core architecture of a software can be redesigned and rebuilt with little overhead and with very little casualty.
The literal “Agile Process” every creative developer would love to practice. The corporate branded “Agile Process” is another word for “Micro Management”."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Atif Shahab Qureshi,2018,"Although there are many advantages of agile software development but there are few disadvantages too. Following are the few disadvantages of agile software development:
1. Less predictability.
For some software deliverables, developers cannot quantify the full extent of required efforts. This is especially true in the beginning of the development life cycle on larger products. Teams new to the agile methodology fear these unknowns. This fear drives frustration, poor practices, and often poor decisions. The more regimented, waterfall process makes it easy to quantify the effort, time, and cost of delivering the final product.
2. More time and commitment.
Testers, customers, and developers must constantly interact with each other. This involves numerous face-to-face conversations, as they are the best form of communication. All involved in the project must have close cooperation. Daily users need to be available for prompt testing and sign off on each phase so developers can mark it off as complete before moving on to the next feature. This might ensure the product meets user expectations, but is onerous and time-consuming. This demands more time and energy of everyone involved.
3. Greater demands on developers and clients.
These principles require close collaboration and extensive user involvement. Though it is an engaging and rewarding system, it demands a big commitment for the entirety of the project to ensure success. Clients must go through training to aid in product development. Any lack of client participation will impact software quality and success. It also reflects poorly on the development company.
4. Lack of necessary documentation.
Because requirements for software are clarified just in time for development, documentation is less detailed. This means that when new members join the team, they do not know the details about certain features or how they need to perform. This creates misunderstandings and difficulties.
5. Project easily falls off track.
This method requires very little planning to get started, and assumes the consumer's needs are ever changing. With so little to go on, you can see how this could limit the agile model. Then, if a consumer's feedback or communications are not clear, a developer might focus on the wrong areas of development. It also has the potential for scope creep, and an ever-changing product becomes an ever-lasting one.
Source: The Massive Downside of Agile Software Development
Do you agree with my points Harold Treen"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anoop Aryal,2016,"I’ve seen Agile projects crash and burn pretty horribly. The leaders involved were from companies that are at the forefront of Agile (let’s leave names out..).
The root cause were two things:
Agile inevitably searches for and finds local minima/maxima. If you think of it as an optimization process, it’s uncannily like a gradient descent algorithm. With the pitfall that it’ll find a local minima/maxima. The case I have in mind was failing in a horrible way. But the team was stuck iterating on incremental improvements - thereby getting stuck in a local minima.
Velocity. WTF is that? It’s far worse than LOC. Upper echelon MBA types stuck to it like glue. It was a quantifiable figure they could stick into excel. They didn’t know what it meant. But it was a number!! Meanwhile, senior devs assigned higher points to stories they get assigned to. Politics galore."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jerry Zornes,2016,"Agile invariably devolves into measuring velocity by management. I've never met an agile apologist who when faced with someone's agile failure didn't brush it aside as ‘that's not real agile’. Even this thread is full of this type of response. If they are right evidence suggests a methodology with a high propensity for failure. If they are wrong and developers complaints are valid then the negatives represent such a load that agile being a net improvement become questionable.
That's not too say we should throw out the baby with the bath water. Short cycles and smaller units of work certainly benefit developers and management."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Pepijn van de Vorst,2016,"I'm not aware that ""a lot"" of developers dislike agile.
The developers I've spoken with about this subject mention:
* Often in organisation that have implemented agile, there are lot of meetings
They have the idea that they would be far more productive without those meetings
* Some developers don't like a shared (team) responsibility for quality
They like the divide between developers creating code and testers testing it
* Some developers don't like the extra tasks they are expected to do from
an agile / DevOps perspective and would rather be programming all day
But most developers I know love agile because of the freedom and responsibility of the team to determine the way to create the solution and to facilitate themselves with effective tooling and processes."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anonymous,2016,"I am a Software Product Manager myself, and I was a developer earlier… I will answer this question in a much abstract way than the others did… they provided fine grained answers which I agree also.
The biggest problem I have observed so far is the lack of the “agile development methodology” KNOWLEDGE by the management/business people themselves, and trying to apply it after watching a 10 minutes SCRUM or KANBAN video on youtube.
the sad part is they mix between (iterative/reactive/experimental) business idea/goal generation and development.
In reality the End Goal / Product Vision should be clear for the developers (not the details towards the goal)… but specifically with the rise of the startup era, and glorification of the MVP approach lot of people are trying to apply it in every single project regardless of the various parameters of individual projects.
change of the business vision or the end goal is normal (and in most cases if it doesn’t occur means you are not monitoring the use of your product enough or at all).
BUT at each point in time, devs should know where are they heading to.
A whole industry and 10s of institutions are working on employee motivation and gamification blablabla…. and companies are purchasing systems, hiring feel good managers, creating awesome offices with lots of entertainment… YET FORGETTING THE MOST IMPORTANT intrinsic MOTIVATIONAL DRIVE (THE GOAL).
sorry if I mistyped or have some mistake, just wanted to reply quickly before a Daily Scrum..
Cheers"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Keith Ensign,2017,"Agile or Scrum cannot fix a bad management culture of CYA, lack of transparency and fear of failure.
Scrum estimates are based on complexity. If the user story is discovered to be more complex during the sprint, tasks or stories are broken off to handle the discovered complexity and the original story carries over to the next sprint.
Burn down does not have to be 100% complete at the end of each sprint. It is an ultimate goal that is strived for as a team manages complexity more efficiently and breaks down features into realistic user stories. Velocity should be consistent, but many outside factors can influence that too.
Minimal Viable Product. This is always the goal.
Accountability and communication ≠ micromanagement. Facts are facts and they cannot be denied. Discovering unaccounted complexity and addressing it is not failure or any form of poor reflection on anyone’s skills. Deal with the complexity and learn from the experience. This will most likely only improve complexity estimates on any task as the team moves forward.
Standups are to be 10–15 minutes. What did you do yesterday, are you blocked, do you need help and if not, what story/task/bug are you going to work on today. This should literally take 1 minute. If you have more complex issues to discuss with other people, do it after the scrum and with only the people that need to be involved.
The most important lessons I have learned over the last 20 years:
If your culture sucks, everything will suck.
Emotional Intelligence is more important than IQ. Maturity is the most important aspect of anyone’s personality and behaviors.
Facts always trump opinion.
Constantly strive to improve your technical knowledge and skills. Learning never stops.
Not only are you accountable to your team, your management, and your company, you are most importantly accountable to yourself.
If you cannot handle being a professional because of meetings, accountability and transparency, you have much larger problems on your hands. Remember, fact trumps opinion and honest communication is always best. If your time is being compromised by meetings and other requests, your project manager NEEDS to know. If you cannot do any actual development work, communicate it. They are as responsible for getting things done as you are.
So again, if your org and its culture are broken, scrum is not going to fix it and in fact it will only surface the dysfunction. If in fact you are truly unhappy where your work, find a better job with better people. You’re in control of your quality of life and you deserve to be happy. Don’t suffer in Sucksville."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Sam Northrop,2016,"The main benefit to Agile is the ability to get a service that meets 80% of the markets needs out the door much faster than would be possible in a traditional waterfall approach. With today’s pace of change, the detailed requirements you put together with traditional waterfall development will be obsolete before the product is out the door. With an agile approach, requirements are more easily modified or replaced to reflect changing market demands. A perfectly developed product whose market has moved is a lot less valuable than one that needs a few additional features in a subsequent release but is otherwise market-ready.
Used as a crutch, agile is a way for business partners to avoid putting real thought into requirements. Garbage In-Garbage Out still applies. If your business partners don’t know what they want/need, or if they don’t invest the time and effort to properly document them, then agile is just a cop-out. The best sailors can’t complete the trip if the captain hasn’t taken the time to figure out where they need to be going.
I have worked on some really good agile projects and some that really sucked. The primary difference in the two is in the business side’s commitment and compliance to the process. A successful agile project requires more time and dedication from the business partners than waterfall. With waterfall, business can concentrate their efforts up front and hopefully, during user acceptance testing. With agile, they need to be active and present for the duration. Not all are able/willing to provide that.
And, to be clear, I am on the business side."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Arun J,2016,"It shows the bottlenecks in some teams. Who is not contributing, idling etc etc. Most contributing and teamplayer developers dont mind agile as far as I have seen."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Andrew,2016,"I wasn’t aware that a lot of developers disliked Agile. I do think most engineers think it is annoying when SDLC is done poorly. I am not sure engineers would be so silly to think any one methodology is particularly responsible for a bad SDLC implementation.
All engineers know that some kind of SDLC methodology must exist. Which one is used is not really important. All of them to some varying degrees have vices and virtues.
I personally think Agile stresses feedback loops with customers which is a nice. It is a little lightweight on holistic thinking. I am responsible for holistic thinking and I do not need a process to do that for me so that does not bother me.
All SDLC methodologies have cultural rituals associated with them that can be silly when taken to an extreme. Agile is no different.
What I do think has really changed since the 80’s is how many companies are actually doing IT projects. The number of projects per company has also drastically increased. The companies that do not know how to do any SDLC are numerous but they are so inexperienced that is only natural. That is why engineers have to compensate for this. I suspect some engineers may not know how to compensate for management that is <ideal. That would be frustrating."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Josh Donnelly,2016,"I imagine the same reason why people dislike other management styles…because of the people doing it. Most management structures can have some success if the humans behind them are effective leaders. I don’t have much experience with the process, but have a lot of experience with poor leadership and my guess is that some grasp too strongly to the idea of Agile as being “fast” or “quick” like the standard word is defined, rather than the project being segmented into smaller (quicker) tasks which provide more flexibility to the project."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Mazen Hassan,2016,"AGILE…I truly hate that word because of how much misuse is associated with it.
As a person who spent 20+ years in high-tech, I find no clear value of how agile methodology is used in most companies today."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Dennis Decoene,2016,"Funny thing, I was a minute ago watching Agile is Dead • Pragmatic Dave Thomas in which he explains why he feels Agile has been misinterpreted. Very much worth watching!"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Johnathan J Hayter,2016,"I don’t dislike/hate agile; I do hate/dislike how it is implemented or worse interpreted by a company by tech leads and management.
Agile promotes a highly cohesive collaborative atmosphere which often gets abused ad nauseum to come up to me to ask me questions or request features that would de-rail sprints. Often nicknamed hotfixes, production issues or Executive Priorities these leaks immediate begin draining the defined plan which is not re-evaluated because people are already very ingrained to not do so.
This also segregates a section for programmers that are just plainly not good at articulation yet they are forced to strengthen a weakness that yields practically nothing at behest of the manifesto.
This is where I feel the tech lead is anemic. It is absolutely great to have a ubiquitous language with the business. It is also stellar to be able to draw up summaries with your team but as far as I am concerned it should stop there. Having 4 programmers per tech lead and having the tech leads summarize up to the principal developer which inter turn rolls up to the software director streamlines the entire process with natural aggregations. I have seen this very seldomly in my career and I have personally used it with great success ie being 6 months ahead of a deadline."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anonymous,2016,"From what I’ve seen of it, I have found myself disliking the mismatch between the Agile cycle and the let’s call it the Off-Agile cycle.
By way of example, suppose you’re meant to put 60% of your time into Agile cycle work, and the remaining 40% of your time into the rest of your work that doesn’t fit into the Agile projects (ie: 40% Off-Agile projects). Credit where credit is due: this would probably work out really tremendously well if the managers who task out your time naturally have that same 60%-40% split. But you know that “Give a Moose a Muffin” book from way back in the day? I’ve been noticing that managers tend to be quite similar to the moose. Again, credit where credit is due, they haven’t gone and done anything terribly stupid like put 100% of my time into Agile projects, and then a second 100% of my time into Off-Agile projects. It’s been more like 80% Agile, with a supplementary 70% Off-Agile. Not being a mathematician, I can’t really say for sure if that all adds up, but I have been looking at it for a couple of months, and it almost seems like it adds up to more than 100% of my time. Combined with the related details that Agile tends to be used for software development, and that software developers tend to be bossed around about as much as everyone else (ie: quite a lot), that really tends to add up to either a high workload, or high stress, or both.
From where I’m standing, Agile seems to have its major application in “giving management an excuse to think that they’re being more efficient, while really just increasing the demands.” Some day, when they manage to genetically engineer an actually reasonable manager, then I could imagine how Agile would be more efficient. Until then, I’m out of ideas. I’m not a fan of Agile, because it seems to make things worse; but I’m also not a fan of any system that isn’t Agile, because they all seem to make things worse. Almost seems like it’s just the managers who are getting worse, but who can say for certain?"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Naveen Kumar Singh,2016,"I haven’t witnessed it personally so difficult to say why developers hate agile. I think majority of developers like it.
Below are some situations when developers may hate agile.
When management use agile for micromanagement
When management wish developers embrace agility but management not ready to be agile
When developers have fear of getting exposed
When commitment means meeting deadlines"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Clifford Oravec,2016,"Wow, this is quite the active question (big surprise, right?)
Like most in the industry, I’ve had my own observations and opinions on the polarity of this subject.
Recently, The Harvard Business Review published an article entitled “Embracing Agile” that advocates the adoption of Agile processes (specifically Scrum) in business as a whole.
Having seen Agile and Scrum both succeed and fail at different organizations throughout my career, I decided to write a response piece detailing the opinions of leading Agile experts and regular Agile practitioners in order to educate readers of the HBR article about the potential pitfalls of implementing Agile/Scrum and how it might not be appropriate for all organizations.
You can find my (fairly thorough) article here: Before “Embracing Agile”, have a chat with its exes.
If you’re interested in the original HBR article, I link out to it from my article as well.
Hopefully this adds some value to the overall conversation.
Best of luck."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Robert Evans,2017,"I don't believe that developers dislike Agile more than, say, waterfall. But what I really don't understand is why management likes it. It give less predictability for work more than a couple of months out. ""When are you going to deliver feature X?"" I have no idea. We haven't analyzed the requirements or the technology. It might take 10 man months, or a 100. (Cf McConnell's classic ""Software Estimation""). What it does do is tell you how you are progressing. But to calculate velocity you need to make careful records of how much engineering time is consumed per story point (or whatever), and that's not always easy to do."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Devaroop Bhattacharya,2017,"tl;dr
“Because people don’t follow it the way it should be followed”
Agile is a method of management and not micro management. Almost every 2nd company abuses it. I have been a Agile Practitioner at Equal Experts for years now and never disliked it because we do it right. With regards to delivery - We do it the best way possible along with keeping up with latest technologies in the market.
For the developers who dislike it - Speak up if things are incorrect, after all, that’s what Agile is."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Will Stern,2017,"For what it’s worth, I’ve yet to be on a team where Agile didn’t make things drastically more enjoyable for developers.
The only times I haven’t enjoyed agile is when the company was extremely “enterprisey” and everything was so serious that development wasn’t fun. (I mean, c’mon, we get to play on computers all day…this is fun by default! If it’s not fun, it’s cause somebody messed it up!)
If someone complains that agile is making things less enjoyable, I tend to think that it’s actually management making things less enjoyable and I’d HATE to see how miserable that management would make a waterfall paradigm feel. I picture using a power drill instead of a screwdriver, but management standing over your shoulder making sure your drill angle is perfect, watching your thumb placement and making sure your RPM’s don’t go over x or under y.
Agile, in itself, is designed to make developer life more enjoyable, while creating a quality product with less bugs."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jeff Cactii,2017,"For someone like me with 30+ years experience as a Software Developer, Agile is just another bunch of “new age crap” to refer to the same old way of programming since the 80’s. It’s nothing new really, just a method of Managers empowering themselves with new buzz words to justify their jobs. A lot of us have been doing Agile since the 80’s.
For public service/large companies that have a plethora ...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Jeff Cactii
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Glynn Farrow,2017,"Because in large corporations management have hijacked Agile - which was a developer inspired idea originally - and perverted it to produce management statistics to, among other things, push developers into longer hours and tighter schedules."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Radek Baranowski,2017,"I can confirm Agile works out well for either developers and the rest only when the whole organization embraces Agile as a way to go. And not only product development team (devs, qa, ba, POs, PMOs) but also, and primarily, the client. You can manifest being agile, but when your business client (internal or external) denies to follow this path, at least to some/large degree, you’re doomed.
In a project which I’m in at the moment, this change of paradigm was fully adopted and accepted from Board Of Directors level, downwards to scrum teams, all along. It has succesfully delivered one of the biggest insurance systems in Europe over the course of 5 years. So Agile can work, even on a big scale, if only _everyone_ accepts the rules of the game.
Now, to why developers might get frustrated. It might happen, and happens, at the point when the agility of organization gives so much confidence in themselves, that they accept any, or most of the changes. As an dev/engineer you need some time to reckon around the piece of system you are expected to modify. If the change of subject happens too often, well, you just find yourself struggling while unveiling complexity of the solution in this very given code package. This might be reduced by following consistent design patterns and clean coding, to some extent, but there will never be a system perfect at this account, and I imagine this might be one of the hate-factors for developers."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jeff Williams,2017,"It will all come down to how the efforts are managed and communicated. Dissatisfaction are products of perception and expectation. Often these are unrealistic and need to be foreseen and then managed properly.
The basic tools of Agile methodology are simply that, tools. How those tools are utilized and how flexible you are with meeting true needs is key.
I approach all projects from a hybrid mindset. I'll employ whatever it takes to make things happen.
If the GOAL is to produce something functional and valuable under the constraints of the business then use whatever tool you need to gain satisfaction."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jacky Jackson,2017,"I have been working in an agile environment for two years now. Agile says something like they dislike documents that are never read ….. if I had a quarter for every time I wanted to shout: ‘'Write in down!!!’' I would be a millionaire by now. And it says it prefers inter human interaction above something else.. Cannot remember what even. I would give half of my kingdom for a few hours of silence to work in. I sincerely loath it. But when you dare to criticize it, it is you who are the bad programmer, or have not understood it. Like you are an apostate of a certain religion. I hate it so much, you cannot imagine."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Leonid Shepetovsky,2018,"This is a great question! It is actually much greater than someone can think. And so many different and correct answers I see here. I have concerned by this question for many years and may say that the answer can’t be short enough to write it here.
So for anyone who interested in that, I may recommend some links to youtube lectures which were made by people who are directly related to this methodology of Agile SW Development. I found them very exciting, diving deep to the point and really fun to listen. Personally, I agree with every word said there. Enjoy:
GOTO 2015 • Agile is Dead • Pragmatic Dave Thomas
The death of Agile - Allen Holub
#NoEstimates (Allen Holub)"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Robert Garrett,2018,"It’s not that I dislike Agile. In fact I am a big fan of and love the concepts and principles behind Agile: Make small, incremental, contextual changes really quickly that can be both implemented quickly and simply and also likewise backed out. That is everything about the real idea of Agile. There’s nothing more to it than that. It really is that simple. What I positively HATE is the way that companies have gone about implementing the monstrosity that they claim is “Agile” when in reality it is anything but. They’ve gone head over heels with all the trappings and terminology accompanied by endless worthless bureacracy. Daily tag up meetings, scrum, kan ban, epics, stories, projects, issues, swim lanes, run rates, and so on and so on and so on. Morons who have no talent at all for anything except building mountains of meaningless time-wasting crap have gravitated to “Agile” like cockroaches to a mountain of sugar cane. The only place these people might be more at home would be working in some equally useless government agency writing reams of regulations and other equally valueless emptiness. It’s actually funny, in a sad sort of way."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Corey Grusden,2018,"A lot of developers dislike this and other processes because they simply don’t understand whats happening above them. If developers had an idea for a side-project and had to use their own money to hire a developer the world would be a better place. Developers would know exactly why these tools are in place: because *most* developers go down rabbit-holes and end up spending time on the wrong things. I can prove it, I was one of them until I built a consulting agency and had to manage developers."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Keith Kosmicki,2018,"Fuck Agile, SOAP and Water! Just get the fucking job done! Who gives a shit about these so called management specs, if you are a good programmer, you don't need these bullshit guidelines."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Aidan Millar-Powell,2018,"People dislike it for several reasons:
It’s idealic, not realistic.
It is basically a way for management to perform self-felatio with little to no benefit to anyone
It’s a process built by developers for managment
It’s yet another phase of people getting overly excited about process management, when really developing the management of software should be simple and pragmatic.
The problem with most process management frameworks is that the people designing them, often get so caught up in the management framework itself, that they leave very little room for the actual work to get done. (not referring to the creators of agile manifesto, rather people implementing process management in general).
The other issue with agile (or at least the way it’s being adopted) is that people don’t understand software development. That is a problem not easily solved. Yet process frameworks like this allow people to build a superficial bridge into the dev world and cause all kinds of hell.
This is the manifesto I follow:
Really think about your design, take your time here and give yourself lots of options. Play around with some ideas and see what works, make some rough prototypes to practice the development of this particular product. Then once you have a direction, build and make features. Fix bugs. Automate. Document. Do it well. Do minor releases and major releases when you feel the product is ready. Enable conversation with management and get really good at using analogies. Hunt down customers for feedback. Literally hunt them. Like, literally. I’m not joking, stalk them and subtly strike up a convo at their lunch time coffee hut. Seriously. Actually not even kidding. If you really have to: code faster and compromise on quality, but ONLY if you can and will assign time to refactor later.
If people are good at their job and things work then there is little risk here."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,A.karim Amin,2019,"According to my experiance, many developers dislike agile because it was not performed correctly in their companies. The majority of complains i heard were :
Too many meetings.
Sometimes Too short sprints (Some companies are strict on one week sprint) not allowing teams to ship any thing with quality after each sprint.
It works fine in small to medium size projects but it gives no time for appropriate architecting , designing , system analysis , planning in big projects.
Customers/Managers would love the early and periodic releases that Agile offers but they are not fully understanding other aspects of Agile (such as time boxing, points, early feedback, pear programming ,Agile contracts …etc) and this always lead to a mix of things rather than adopting a certain Agile methodology on everything in the project.
Sometimes there is no enough envolvment of the customer and his inputs / feedback and other assumptions / conditions that Agile has ."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anonymous,2019,"What is Agile ?
It is a tool of the management to get more juice out of already bone dried engineers. Let me explain
Does it bring anything new to table ? No. Does it improve timelines, reduce defects, or enrich people working on it. Answer depends on whom you ask. So what does it achieve
a. It helps management micromanage developers.
b. Pressure is constantly on for every two week deliveries so quality suffers
c. Why do we have gears in your car. Because you cannot drive on top speed all the time. What is true for machine is true for humans. Agile expects workers to run in fastest gear all the time. They want you to sprint, sprint again and again. Result, high wear and tear then collapse.
d. All management cares is the date so that they can make more money. So now do you get why your management is pushing so hard for Agile.
They want to be Scrum masters and make engineers as slaves.
e. It is demoralising ! It all sounds great in begining but instead of being beat up once every six months now I get beat up every two week.
f. Have you seen many instances of poor quality of delivery. It may not be people, it is Agile ! Think again. Agile focuses on micromanaging, modular chunks. It misses the bigger picture, the system regressions, enterprise architecture, designs.
Agile is a loose and often abused concept. You have to build safeguards else risk failing miserably in long term."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Lalit Patel,2019,"A lot of developers may be disliking Agile because:
Nothing is perfect. Agile has its shortcomings.
Disliking is easier than liking.
An alternative to Agile can be:
TOPIC Management
which is Management by TOPIC
Tools
Objectives
Priorities
Induction
Collaboration
(Easier said than done!)"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Dino Dini,2019,"All too often what is focused on is the vertical slice. Meanwhile, back from la-la-land, engineers are busy with the horizontal slab that is required to ensure that the project as a whole does not fall over. The horizontal slab is more important than flimsy vertical slices, but agile has no consideration for them at all. At least this is the way it becomes when agile becomes nothing more than a management tool for beating developers with...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Dino Dini
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,The Big Flatino,2019,"The question is not really posed correctly. I see it all the time so I ask them which principle or value are they opposed to. Delivering software regularly? Constant attention to technical excellence? Taking steps to improve? Working in a sustainable fashion?
Mostly they are referring to “dark scrum"" which is simply micro-management with a $200 agile paintjob."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jason Westbrook,2019,"Why do a lot of developers dislike Agile?
- In my experience, Agile seems to purport that it gives the power to the dev teams, that its ‘people over process’ and ‘hey devs, you have a voice now that management has to listen to’.
When in reality, Management ends up pitting one team against the other. Using metrics like ‘Team A does X number of story points, while Team B does X-Y number of story points’. All the while ignoring the fact, that each team determines story points differently."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Roar Test,2020,"Developers do not dislike Agile way of working because it is not restrained to a tool, methodology or framework, however, it is important to understand that using scrum tools and project management tools restrict the mindset which is the Agile way of working."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,XS Chen,2020,"There are challenges with textbook Agile in some organizational settings, and forcing Agile in such situations will get people (incl. developers) burned and hating it.
One situation is, many (most) corporate IT organizations, especially with significant in-house developers and large number of legacy business critical applications. The IT team (and many individual developers) often plays multiple roles, production support / application management service, small enhancements and repairs, and sometimes as SME to support major initiatives (either new-build, or changes), also impact analysis & operation planning, etc. The expectation for them to be fully immersed in Agile delivery in a small and dedicated team setting, will certainly cause great deal of headache and juggling.
If the IT organizations are structured in a way with separate teams for operation / AMS and Product / Project delivery functions, Agile delivery may not be that disruptive, and is likely more receptive.
A variation or precursor of Agile can be as effective is JAD (Joint Application Development), where Client (PO), Business Analyst, Designer, Developer are short-circuited for instantaneous feedback loop and most effective communication."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Andy Wootton,2020,"There are several common reasons:
They don’t know what they are doing.
They do know what they are doing but it isn’t actually agile.
They are doing agile software development but they prefer to work a different way: e.g. they don’t like working in a team with other people, they don’t like talking to customers and having to work out what they want from the weird things they say, they don’t have the breadth of technical skills necessary or prefer to specialise on a smaller area of software development.
They may prefer to have a clear hierarchy with a career structure they can climb because they don’t actually want to be a developer. The money looked good but it turns out to be quite hard."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Kenneth Barber,2020,"As most commonly implemented, Agile (note the big A) processes tend to pull developers away from the act of development.
Some of the adopted ceremonies and tenets can be exhausting and counter creative especially when put on a hurried, auto repeating loop…
There is a lot of bad Agile out there, and a lot of people in Agile who aren’t developers or product domain experts. These people tend to be rigidly adhering to some COTS Agile process that they became certified in such that they can be part of a company’s agile cadre. Development adjacent, with the appearance of technical contribution but not responsible for implementing the solution.
The better PM paradigm is “little a” agile as specified by the manifesto or what some of us call, “Just enough agile”. Incentivize solution analysis and product development over ceremony and box checking.
I will say that the “continuous” paradigm (CI, CD, etc) that is associated with many Agile processes is the real secret sauce and is worth the weight it adds to your process."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Sidney Smith,2020,"This is one of my favorite topics to disucss but others have said better. I would like to share my fav articles.
The End of Agile - Kurt Kagle is super funny but drives th point
Agile — Culture first, framework next and process last - I feel like this all the time in my company"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anonymous,2021,"What I've seen from experience about Agile proponents and “Scrum certified” teens is that they are too prone to “No true Scottsman fallacy”
Whenever a project is successful: Yay! That's Agile. Horraah!
Whenever a project fails: No! That's not Agile, no way. Developers did it WRONG! They didn't collaborate!
This is dangerous because 1) proponents shows it the characteristics of cult members. 2) Done this way Agile teams turn toxic rapidly."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Aurelio Bautista,2022,"Because it became the mainstream way of doing things. Developers always dislike things that cannot be discussed. In the 1980 and 1990 we disliked waterfall and v-cycle. Then we received Agile with enthusiasm and hope but industry denatured the original thought: not hierarchical, open to change and so to adapting after discussion, simple and based on trust. The better alternative is to rewind to the original Agile values, values not injonctions, methods or obligations. Make the teams mature, trust them and give them the greatest possible autonomy."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Acko Manah,2022,"Notice: The company as NOT HP. I have the highest respect for HP.
Because “Agile” is a pile of nonsense. It wants to replace people with “process”. You are never going to be able to do it.
I was at work in a meeting and dared to say:
“Nothing will replace a dedicated team of talented; hard working and loyal people”.
I got called into Human Resources. Because “somebody” had reported me. I found out it was the VP of engineering! The guy reported me to H.R. The purpose of reports is to protect employees from harassment NOT to shield a VP. He might have just asked me in and talked to me. He was minimum 3 levels above me. Then he fires my director. My director was a brilliant woman. I decided to quit.
The “VP” is now running a “Medical Marijuana” place. Perfect fit"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Muhammad Ali,2023,"Many developers dislike Agile because it is often seen as a way of micromanaging their progress and making them accountable for every step of the project. Agile also requires constant communication and collaboration among the development team, which can be time consuming for developers. As an alternative, Waterfall project management is a more traditional approach that allows developers to focus on the development without having to communicate and collaborate with other team members. Furthermore, Kanban and Scrum project management paradigms can also be used to manage projects without micromanaging developers."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Bob Harwood,2023,"TLDR; 1) Many have had bad experience with poorly implemented agile approaches. 2) Saying things that run against the grain brings high ratings in social media. 3) Some people don’t study a topic fully, rather read ideas from influencers and then repeat them. This leads to bad info echoing in the halls of the Internet. Now, for the longer response:
It’s currently in-fashion to bash Agile. There’s lots of reasons (a few valid, most not.) Here’s a sampling:
* It hasn’t been implemented well in their company so dev’s got a bad taste. Sadly, this happens too frequently.
* A few laggards don’t like change (change IS hard) and are hoping it’ll go away.
* Remember the game of telephone where a message is relayed from person to person and becomes horribly mangled? Today’s Agile consultants are typically a long way from the originators so those sitting on the far end of the couch mangle it. (Not all, but a good number.) Rightfully so, people don’t like to be misled, especially when they are paying for the service.
* The founders are disgusted with the poor quality of information, practice, and consulting and backed away in the early to mid 2010’s. Dave Thomas, for example, declared agile “dead”. {Some founders have since recanted and now have thier own agile framework.)
* TLDR. Some people just want the short version. Agile is subtle; there’s no two paragraph full-on explanation. It takes work, solid enginering skills, trial and error, continuous exploration, study, persistence. Agile is more like learing golf. Golf’s a wonderful game, but you aren’t going to enter the Masters after a weekend outing with your budies. Long-term study isn’t trendy. I’m hoping, like skinny ties, it’ll come back one day.
* Competition. Between the Agile Alliance, Scrum Alliance, and Scaled Agile, the market’s pretty locked up. It’s a large and potentially lucrative market, so there’s lots of companies and individuals who will take pot-shots at the big 3. (Not to say the big 3 are perfect…)
* Agile gives autonomy but asks for accountability and commitment. A few people like to be anonymous and shirk responsibility like they could in the good ol’ waterfall days. (Thankfully, most aren’t like this; they want autonomy, mastery, purpose, and to be valued for their results and performance.)
* Some advanced groups have moved on and evolved past what’s traditional. Companies like Ping An, Haier, and a few practicing Holocracy well...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Bob Harwood
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Alex Brown,2023,"There are a few reasons why some developers may dislike Agile:
1. Lack of structure: Agile is known for being less structured than other project management methodologies, which can be challenging for developers who prefer a more organized approach.
2. Constant changes: Agile encourages changes throughout the development process, which can be frustrating for developers who want to stick to a plan.
3. Emphasis on collaboration: While collaboration is a key aspect of Agile, some developers prefer to work independently.
That being said, there is no one-size-fits-all project management methodology. Some alternatives to Agile include Waterfall, Lean, and Scrum. Each has its own strengths and weaknesses, and the best approach will depend on the specific needs of the project and team. It's important to experiment with different methodologies and find what works best for your team.
Hope this helps the thought/discussion. Check out this board for additional material:
https://pin.it/4dsXlBp
https://pin.it/4dsXlBp"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Innovation Insighter,2023,"Many developers dislike Agile because it is often seen as a way for managers to micromanage the development process and put too much emphasis on short-term goals at the expense of long-term development goals. Agile also often requires developers to work in a fast-paced environment that can be stressful and difficult to keep up with. Alternatives to Agile include Waterfall, Kanban, and Scrum. Waterfall is a linear project management process that involves completing tasks in a sequential order. Kanban is a visual project management system that focuses on improving workflow efficiency. Scrum is an iterative and incremental project management process that emphasizes collaboration and feedback."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Raghav Agarwal,2023,"Many developers sometimes find Agile a bit frustrating because it can feel chaotic. It's like trying to build a puzzle when the pieces keep changing shape. Agile emphasizes flexibility and quick adaptation, which is great for some projects, but not for all.
Some developers prefer more structured approaches, like Waterfall, because they offer a clear plan from the start. Waterfall divides a project into distinct phases, which can feel more orderly.
Another alternative is Kanban, which focuses on visualizing work and improving flow. It's less about strict deadlines and more about maintaining a steady pace."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Agilemania,2024-01,"As a SAFe SPCT and a Professional Coach. Many developers complain about Agile. And around 20% of the developers have a love-hate relationship with Agile.
Some find the adaptability of Agile a bit overwhelming. They're used to a clear plan, like having a recipe for baking a cake. Imagine suddenly being asked to cook without a recipe; that's how it feels for them.
For some quick changes in Agile, it can be challenging.
Imagine you're building a house. While laying the foundation, someone decides, ""Hey, let's add a rooftop garden!"" This sudden change could leave the builders scratching their heads, right? Well, that's how rapid changes in Agile can feel for some developers.
To make it smoother, think of the construction team having daily huddles. They openly discuss any changes in the plan. If someone says, ""Let's add a rooftop garden,"" everyone is in the loop. They discuss how it affects the foundation, the costs, and the timeline. This constant and clear communication helps everyone stay on the same page, making changes more manageable and less stressful for the team.
Now, think of the development team as chefs in a busy kitchen. While preparing a dish, the head chef says, ""Let's spice things up with a new ingredient!"" Instead of feeling pressured, the team embraces it. They see it as a chance to create something even more amazing. They adapt their recipe, learn about new ingredients, and improve their culinary skills along the way.
So, in the world of Agile, when changes pop up, treating them as opportunities for growth and improvement can turn that pressure into a positive force.
I hope you liked the response! :) Please comment on your hurdles when it comes to Agile."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,EnigmaExplorer,2024-04,"Agile, a project management methodology characterized by short development cycles and a focus on adaptability and customer satisfaction, has seen widespread adoption across various industries. However, it has also faced criticism and pushback from developers and project managers alike. One core reason for this dissatisfaction lies in the misapplication and superficial implementation of Agile principles, often referred to as ""Agile in name only."" Teams may adopt Agile terminology and tools without fully committing to or understanding its philosophy, leading to processes that are neither truly Agile nor effective. This half-hearted adoption can result in increased pressure, confusion, and a lack of clear direction for the team, undermining the very benefits Agile aims to provide.
Furthermore, Agile's emphasis on continuous delivery and adaptability can sometimes translate to a perceived lack of stability and predictability in the development process. Developers often find themselves in a cycle of never-ending sprints, where the scope and goals can shift rapidly, leading to burnout and frustration. This relentless pace and fluidity can detract from the quality of work, as the pressure to deliver in short cycles may compromise thorough testing and thoughtful development. The emphasis on immediate customer feedback, while beneficial for product alignment with user needs, can also lead to scope creep and difficulties in managing expectations and workload.
Moreover, Agile's focus on collaboration and frequent communication is not universally fitting for all personalities and work styles. Some developers prefer to work in a more solitary manner, finding the constant meetings and discussions inherent in many Agile frameworks to be disruptive and inefficient. This mismatch between individual work preferences and the demands of Agile methodologies can lead to decreased job satisfaction and productivity.
In response to these challenges, several alternative project management paradigms have gained traction. One such approach is the Waterfall model, which is more linear and sequential, allowing for detailed planning and more predictable timelines. While less flexible, it can provide the structure and stability that some projects and developers prefer. Another alternative is the Kanban system, which focuses on visualizing work, limiting work in progress, and optimizing the flow of tasks. Kanban encourages continuous improvement without the pressure of sprints, making it a more flexible and less intensive option for teams looking for an Agile-like approach with fewer constraints.
Finally, the Lean methodology, with its emphasis on eliminating waste and optimizing efficiency, offers a strategic framework that can complement or substitute Agile practices. Lean focuses on delivering value through understanding customer needs and streamlining processes, which can help teams achieve high-quality results without the drawbacks of sprint-based pressures. Each of these alternatives, along with a thoughtful consideration of team dynamics and project requirements, can provide a viable path for those seeking different solutions to project management challenges."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Wayne Uejio,2016,Bad implementation and people assuming process means good systems. Let me say this: good programmers/sw engineers do not like this. Bad ones cling to this.
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Cynthia Avishegnath,2016,"Because …
developers would have no more excuses going on excursions mucking around with their development because now they would have clear, obvious and achievable goals to achieve.
managers who have no idea about agile think it is an efficient way to micromanage their subjects.
developers did not use companion frameworks like UML to provide them with a clear and achievable goals or with means and alerts to quickly backout from an unachieveable goal.
developers do not believe in companion frameworks like test-validated development. Or that they do not understand how such a process works in their favour.
developers do not practice code freeze and versioning.
developers will not use Maven-mentality to code freeze their work, but prefer to have 200 projects concurrently active in their IDEs managed thro the defective framework called OSGI.
OSGI is a means to efficiently allow developers to practice bad habits efficiently.
managers do not believe in backing out of unachieveable goals, hence pressurizing developers to achieve them - making the development atmosphere rancid and unpleasant.
“full-cycle” long-term waterfall or pretend-waterfall “methodologies” allow people to hide their failures which they do not want to believe are failures.
agile exposes failures and the obvious need to abandon too quickly, and people prefer development cycles that provide them with reasonable excuses to continue banging their heads against unachieveable goals.
agile is a means to fit the available resources to the required goals. Agile is a means to make do with the skill set available to a team. And the weaknesses of weak programmers become apparent very quickly.
developers do not understand or believe that exposed weakness of a programmer should not be the sole responsibility of that programmer for improvement.
to be effective, agile requires any developer to honestly confess that they do not have expertise but they are enthusiastic to gain the expertise. Agile does not work well, when an atmosphere exists where every one thinks they should put up a front as though they know a lot.
agile is exactly what Matthew 20 - parable of workers, is all about. That it is a team work. That agile accommodates the weak worker and the late worker as much as it accommodates the strongly expert ones. Developers find this socialist concept unfair and unworthy.
agile requires developers to communicate with each other often. And also congenially spend time discussing irrelevant ideas and showing off irrelevant projects, and to build camaraderie. Many of us hate that.
And managers do not want to allocate time for developers to perform irrelevant tasks.
And they don’t realise such irrelevant tasks and min-projects will one day become handy. Because those in-charge are short-sighted."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Tom Murphy,2016,Generally speaking it is about accountability. Many engineers claim it limits their ingenuity when in actuality it increases it because of the team approach to problem solving and solution delivery!
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Joe Gorecki,2017,Because it’s a huge pain in the ass for what almost always turns out to be a completely one sided discussion.
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Scott Allen,2017,"Before starting, I want to mentioned that I have been a developer for almost 5 years at a single large IT company. Despite that, I’ve worked on a variety of projects with a variety of people and believe I have some insight to give here.
I’ll also disclose that I am pro-agile, and may well give reasons as we go through.
Change
To me, people dislike change. I’ve seen how easy it can be to not learn for extended periods of time and how cosy developers can be sitting at the same desk, with the same people, doing the same work in the same way. This isn’t necessary a slam at developers, it’s often the job they signed up for and what they have expected.
So firstly I’d say that change is the reason some developers do not like “Agile”.
My opinion here is that “Agile” is not the change, but a necessary response to the change. I believe this is reflected on multiple levels, where some of the higher ones are often overlooked during a developer’s reasoning.
Winning Work
Winning work is important for software companies and equally important for developers who do not want to end up redundant (apart from those in-house teams perhaps). In my experience the ways of winning and offering work is changing;
A growing desire for breaking up big contracts; using multiple companies and a drive from government for SME’s.
A shift of trust from larger companies to smaller niche companies.
This for me is adding a lot of pressure on everyone to be innovative and rapid - with a lot of focus on presenting PoCs during the bidding phase and then the continual visible delivery to maintain confidence and win more of the smaller trickles as opposed to the big mammoths. This causes a growing emphasis on communication, reaction to change and innovation.
Client Demand
Carrying on from ‘winning work’; client demand has grown to embrace what those more competitive companies offer, and this has caused a need for all to react. These demands include:
Adaptable requirements
Frequent releases (or releasable code)
Greater Visibility / Tractability
All of which for me just don’t fit into the traditional waterfall approach.
Technology
Even during my short stay, my view of technology has changed so much to which point where I see the following as crucial to have an understanding of as a software company and a developer;
Open Source Technologies
Cloud Computing
Application Portability
Micro-Service architecture
To me there must be a change the way we work. The Open Source community grows and changes so fast that any team must be able to react rapidly, and the development of cloud-centric applications is simply different and requires a different way of thinking; There are no big application with long release cycles and therefore developers must be able to adapt to different technologies, frameworks and methodologies to keep up with the demand.
I believe a lot of the above changes in the world are often not properly understood by developers, who simply brand the whole shift as ‘Agile’ then fight against it. I’m of the opinion that we cannot fight against this change but only adapt; Agile may not be your ideal scenario but is an attempt to manage these changes in a positive way for IT Companies, Developers and Clients.
Lack of Understanding
Clearly, there’s just simply a lack of understanding. On some levels working in an Agile manner can be very simple, but it also often feels like delicate procedure which requires careful balancing and real commitment.
Daily Stan-Up Calls
Having a call at the start of every day where everyone just blurts out what they’re doing for the sake of it is not Agile.
Stand-ups should be as brief as possible, and this should be supported by the consistency of their occurrence and attendance. They give everyone a chance to highlight (not justify) the work they are doing and highlight issues they are having. This will allow the rest of the team to understand your position, who they need to communicate with for specific queries and ensure that everyone is aware or blockers. Good standups will often result in multiple ‘offline’ discussions taking place afterwards (“oh you’re working on that, maybe you can help with this” or “ah I might be able to help you with that issue”).
To me, having the whole team understanding the position and struggles of the whole team can only be positive.
If your project manager is running your stand-up meetings; you’re going to have a bad time. I find the best way is to rotate who runs them, but always have a strong ‘scrum master’ who can step in if it inevitably goes off track.
Working in Iterations
Being told to get so much done in a given time then meeting up to see if you managed to do it or not is not Agile.
Iterative development is all about learning in my opinion. It’s about learning how much you can comfortably take on in a given time, it’s about learning if you and your client have the same vision, it’s about learning how the process can be changed to improve the experience for all.
The amount of Story Points moved into a sprint isn’t about setting yourself a target to complete, it about learning the velocity of your team and therefore learning what can be expected in a given timeframe. I’ve met so many teams who think they are agile but do not understand Story Pointing - if you’re doing “Agile” but do not use story points, I can’t see how you’ll make it work.
Just the same with Retrospectives - which are an important part of the process but are often overlooked as ‘ceremony for ceremony sake’. I’ve been in retrospectives where people have refused to be thoughtful and some where people are simply scared to challenge the status quo.
Retrospectives are there to give the team a voice; and should be nothing but beneficial to developers. This is a chance to flag things which which you don’t like as much as praising the things you do like. “STOP: Having the PM run the standup calls”, “START: Estimating my own tasks”, “START: Dress-down Fridays”, “STOP: Last-minute meetings”.
Showcases are a given also; I’ve been frustrated many times at spending long periods developing functionality which simply wasn’t what the client really wanted. As a developer I find it much easier to motivate myself when I know I’m adding value. Showcases should be all about making sure you and the client are on the same page (rather than a progress update). This along with backlog pruning should be a developer’s dream in reducing the amount of wasted time.
The Wrong Reaction
I want to finish off by saying that I understand why people are driven to hate “Agile” as a term. Daily updates to the manager, requirement of visual progress every week and micro-managed workloads are all awful and have too easily led to the blips of hatred we can see appear.
The blasphemous use of the term “Agile” to describe some of the above has pulled an illusion over developers eyes, turning something which we should all embrace into something many fear.
This fear has caused developers to run away when “Agile” is mentioned and push back at Management for introducing the buzz-word into their work environment. Yes, “Agile” can be ran awfully and make your lives harder, but if instead of pushing back you take control and champion your company’s / team’s approach to Agile with a real understanding, you’ll find that it’s there for you."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Scott Weiner,2017,"I’ve worked with over a thousand developers. I rarely have seen developers that don’t like the Agile mindset. I have seen teams that were not operating in an Agile way and thought they were. Those teams were often miserable because they were getting very little of the benefits and they had all sorts of unreasonable overhead.
In fact I’ve gone into many teams where morale was awful and after creating a shared understanding of Agile the difference in attitude and effectiveness of the team was often incredible. It happens fast when done well.
As for a better paradigm, it completely depends on your needs but for most general purpose application development Agile mindset and some related methodology work...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Scott Weiner
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Clint Potts,2016,"Agile is an environment in which team members look at a board of tasks, and self-assign themselves work. They are then expected to report daily on their progress in short “scrum meetings”. This environment quickly exposes the team members who are not getting their share of the work done and continue to make excuses for being slow. You only get away with that for a few days before you get called on it by your colleagues.
The problem is, if your project lends itself to Agile management, it is the best option. Tried and true project planning allowed developers to hide in the Gannt chart. Agile requires accountability and movement during each sprint.
So what do you do? You work to develop your employee using good ol’ human resource practices. Does the team member need training? Are there problems at home? Can a flexible schedule be accommodated to provide time to address personal concerns? Do we need to engage a HR plan?
Bottom line: team members get held accountable and need to be productive in a Agile team. These are good things!
-Clint"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Nicolau Werneck,2016,"Reading this question for me is crazy, I have never met a developer who does not like agile. Maybe this is a thing among some developers out there, but I am certainly distant from those. From what I am reading here, it only happens when people are not actually doing agile, the problems pointed out are just classic bad management practices that agile explicitly fights, such as the idea your “boss” is checking out on your work every day… The daily is a great moment of the day, you talk to your co-workers, you ask for help, you offer help, you get to know what is going on, you share what you have done, you talk about issues affecting your work. If you actually live that once and then move to a place people don't even know what that is, you'll miss it dearly.
What would be the opposite of agile? The main anti-pattern I believe would be to get rid of iterations and instead pretend you can envision your project in a couple of months to deliver a perfect product two years later. This is crazy talk… You need an error feedback loop. And you need a PO who cares about making a product that is relevant, and who is responsible for its success. If you don't have a good PO updating your requirements, you'll soon be working in something that is either pointless or doesn't even make any sense. This is terrible.
The question of testing and of being pushed towards doing low-quality code, or also focusing on front-end stuff and “putting down fires” instead of creating some serious long-term infrastructure, this is a relevant problem, but agile is not to blame. Let's get real: if some code is buggy and nasty, but it is not a real problem for users, then there really is not much of a reason to make the code better or to have it tested. The PO and developers, the whole company must reach a consensus about what matters, where to improve on quality, where to make more tests. Sometimes developers can envision that investing on something will be better long-term. But it must become clear to the rest of the company that this is true and will be relevant. And developers must also understand those superficial and immediate issues do have its importance. A developer cannot be lost creating beautiful code that is not really relevant not now or not ever. You need that reality check.
Agile doesn't really solve that quality problem, but it gives your the opportunity to solve it, by putting people to talk to each other. The business and architectural decisions are beside agile. Agile is about making people look to what is happening, talk to each other, fix problems and getting things done, instead of getting stuck in plans that might become obsolete, and following pointless rules or remain suffering with impediments that are never discussed with anyone."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Stoyan Stoyanov,2020,"Being smart and understanding the method and tools you are using is the better alternative. A lot of devs. limit themselves by adoring the label ‘dev’ and choosing to be blind for the rest and the modern human knowledge says we have to know the whole process and be cross-functional and scientific.
So my answer is - lack of knowledge leads to misunderstanding of the Agile manifesto and practices. A lot of devs dislike what most human dislike - breaking the homeostasis, doing something more, crawling out of their shell, the usual human stupidity (;"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Joe Seabreeze,2019,"Because it doesn’t work for every company/team for various reasons:
If you have bad project/product management from the start, Agile isn’t going to fix it. It will likely make things worse.
Some companies try to institute Agile practices even if their business model doesn’t require it.
Many managers don’t really understand what Agile is, so they’ll sometimes use it as a way to micro-manage. It’s easy to use an agile process for micro-management, which is a very stressful and unproductive way to manage a team.
It’s not easy for a service-oriented and reactive business to execute Agile development. How can a developer get anything done in a static sprint when they’re getting pulled into meetings and answering emails half the time? Basically, your development work slips every week, putting too much pressure on the developer.
If your business is highly regulated, it’s not easy to incorporate Agile development. Part of Agile is to reduce unnecessary documentation. With a highly regulated business, it’s all about documentation.
If your software platform has a large code base and doesn’t have a modular architecture, 2 week sprints are practically impossible. And once you start heading into one month sprints, well, Agile stops having any benefit.
If your whole organization doesn’t support Agile, then it will likely break down in the smaller teams that do. It’s not easy to work in Agile teams when your work environment as a whole isn’t agile.
The tagline for Agile at its inception was “For Developers”. In more cases than none, it has been the opposite. Poor Agile execution and micro-management puts way too much pressure on developers, so developers feel betrayed by a system that was suppose to be for them.
In the end, there are just way too many factors that can mess things up when using Agile. So it’s likely that low quality and emotional stress will outweigh any of the benefits that Agile is supposed to provide."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Tom Marsh,2015,"Even on good agile projects it's easy to feel like you are still under producing or that you are sacrificing quality for speed.
Teams that pair all day sometimes feel like there isn't enough time to reflect. Teams that practice TDD sometimes feel they spend too much time writing or re-writing tests. Some teams feel like they spend too much time estimating, others that they don't spend enough designing. Everyone is upset at the volume of defects.
The real problem is that a good agile process is a compromise between all the actors responsible for the product: Dev, QA and the business. Unfortunately, most good compromises leave all the parties feeling like they lost more than they gained."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,David Hayden,2021,"Agile is “software development as project managers want it done.” It solves one problem and creates another.
The problem is solves is one where the software never gets finished, doesn’t work, doesn’t meet the customer’s needs, etc. These are real problems in some organizations and Agile will definitely solve them.
The problem it creates is that it values code over design, and functionality over maintainability. The idea is to get it working and ship it out. Unfortunately, the real cost in software isn’t in the initial implementation but in the maintenance. If you don’t have a solid design and good design documentation then you’ll paint yourself into a corner is no time.
I work in an organization that did “waterfall” development very successfully for many years. High level management came along and imposed Agile on us to solve a problem that we didn’t have."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Robert Garrett,2019,"Because they're finally wising up. It's not that the underlying principles of “Agile” ( which actually should be called agile development ) are flawed, they aren't. They're actually quite good. The problem lies in how the majority of organizations have gone about implementing (I should say TRYING to implement) them. They've turned what should be a set of simple ideas into a monstrous behemoth of regimentation...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Robert Garrett
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Mario Ray Mahardhika,2021,"Like everything else in this world, given enough population, every competing options will have supporters, and the other way around, haters.
Not all developers dislike agile. I don’t. I just think it shouldn’t be run as is, but adjusted to your environment, including your customers. For example, scrum sacred sprint mechanism isn’t acceptable for customers when they face a bug that can both be identified and analyzed quickly with one line fix that should be done in 5 minutes, they have to wait for 1–2 weeks. This is a common case for continuous development/deployment softwares. Pure scrum will work on slower, B2B projects that has one customer release per a couple of months. Switching to kanban.
I’ll let those who hate it give their opinions in other answers."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Jeff,2019,"As Robert Garrett suggests, it’s the specific implementations and trappings of agile—not the underlying values or principles themselves—that can be the problem. The values of agile might seem motherhood & apple pie, and most people wouldn’t dispute them. The principles have a bit more meat in terms of describing how to begin implementing agile. If you’re not familiar with them, take a few minutes to read them; most people similarly won’t disagree with much here.
Some examples of things that people think are “agile” but are specific to some implementation:
Stand-up meetings / daily scrums—perhaps the one thing that’s most universally botched. They are intended to be a quick touchpoint and plan for the day, but devolve into boring, glorified status meetings for many teams (mostly because most teams aren’t truly collaborating like agile says they should). There’s really no standard set of questions, but too many teams somehow have fallen into the “what’d you do yesterday, what are you doing today” rut.
Pair programming. Comes from XP. Many devs really hate this idea, though for those who aren’t vehemently averse to it, it can be enjoyable and highly productive.
Specific story format. “As a / I want to / so that…” A nice idea. Not an absolute must.
SAFe. A big bloated thing with lots of buzzwords. It might be beneficial to larger organizations with the need to coordinate many projects. Don’t do it unless you know you need it (and then, consider something else like LESS). Don’t do it until you’ve learned how to get at least one agile team to click, and really click well.
Agile implemented in a rote way involves lots of meetings—something we wanted to get away from 20 years ago when I learned about XP. The meetings ain’t the thing. I understand why the typical developer reaction is that it’s meeting heavy.
Further turning people away: The proliferation of the Agile Expert—sometimes a ScrumMaster—someone who’s learned all the basics & buzzwords, just enough to be dangerous, dogmatic, and annoying.
Agile can and does work very well, and in a way that’s enjoyable and not off-putting. And standup meetings, pair programming, story formats, and iteration planning meetings can all be valuable tools, particularly to a team new to agile. But learning how to make them effective and not onerous is also important, as is learning when something better is called for."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Bob MacNeal,2018,"We don’t…at least those of us who’ve been doing this for a while.
Agile has been a given on virtually any software team for a least a decade. But, like one’s political views, or one’s religious beliefs, one doesn’t wear one’s agility on their sleeve.
Seasoned developers simply have assimilated the relevant guidance from the agile manifesto, and it’s predecessor XP, and moved on.
If one behaves like a clue-challenged clown (e.g., referring to anything in the “Scrum Guide”, or mindlessly engaging in the gratuitous ceremonies of various “methods” as if anything in software could possibly be applicable to all situational contexts), seasoned developers will politely ignore you.
It’s not that seasoned developers dislike agile — I’ve yet to work with a developer who’d disagree with the guidance in the agile manifesto — it’s simply that there’s a whole industry of charlatans, mountebanks, and overpaid coaches who’ve sprung up around “the agile” that stokes our ire."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Chuck Cobb,2021,"Not all developers dislike Agile:
Some developers like to simply sit in their cube and write code without interacting too much with anyone (either members of the project team or business users). Anyone who thinks that way will probably not like Agile.
A more mature developer recognizes that developing sophisticated software solutions is something that requires teamwork and collaboration not only with other team members but also with the ultimate business users. More mature developers who have that attitude will appreciate why Agile makes so much sense and enjoy the additional responsibiliities of an Agile environment.
The role of a developer in an Agile environment goes beyond simply writing code and some developers do not want that additional responsibility. Here’s an article with more detail on that:
What Is an Agile Developer? How Is the Role Different?
The role of an Agile Developer in an Agile project is not well-understood and many developers may have difficulty making this transition.
https://managedagile.com/what-does-it-mean-to-be-an-agile-developer/"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Ryan Mattes,2018,"Because its most common uses are destructive micro-management, forcing developers to work long hours, and avoidance of proper planning.
That's not what it was intended for, and it can work well when implemented appropriately, but that's mostly how it's used today."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Aniket Kulkarni,2019,"In my personal opinion, agile is used half baked way, most times. Most companies use it to just short circuit good development processes as they want product ‘now’. Such partial and meaner agile adoption to not compromise on time burns out developers. Depending on company size, most times, developers may not even get a proper say in deciding estimat..."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Steve Manning,2021,"By and large I dont think we hate agile. We hate agile ceremonies and realize that most of agile has nothing to do with programming software. If we were to stop pretending to do agile today all that means is that I wouldn’t have a standup tomorrow morning. I still write the same software.
Just remember… agile isnt for the developers. Its for the people who care what the developers do."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Anthony Atkielski,2021,"They don’t all dislike Agile; some worship it.
Agile is designed to make poorly managed projects look like well managed projects, by lending an illusory legitimacy to a number of bad practices. It provides an excuse to do the wrong things and call them the right things, because the wrong things are enshrined in a formal gospel. It provides disguises for “developers” who are lazy or incompetent. It makes busy work for people who are not developers or prefer to play games with others rather than code.
Needless to say, I don’t like Agile."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Greg Beutler,2021,"dunno , could be they have had a bad implementation
or poor training, worked for us at the last 3 companies I worked at"
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Chuck Cobb,2021,I don’t believe your supposition that “software developers hate Agile” is correct. There probably are some software developers who don’t like Agile because it imposes additional responsibilities and accountability on them beyond simply writing code. They have to take full responsibility for their own work and collaboratively work with a team of developers and business people to develop effective business solutions. Many developers see the increased responsibility and empowerment as very challenging and motivational bug some people just want to write code.
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Sanket,2019,"It's not the Agile which made developers turn against it , it's the way you implement/adopt in your project .
People have lot of misconceptions about the process and when they apply it to project its becomes very hard to maintain.
Agile is their to simplify , but doesn't mean it has fit in to all kind of projects .
Basic thing is to identify whether the kind of projects which you involved is good enough to adopt Agile.
It's not mandatory to fit into agile for every project you do .sometimes waterfall model works best ."
https://www.quora.com/In-a-nutshell-why-do-a-lot-of-developers-dislike-Agile-What-are-better-project-management-paradigm-alternatives,Chuck Cobb,2019,"What evidence do you have to support that assertion? I doubt that is the case. If developers do turn against Agile, it is more than likely because Agile increases the level of responsibility of a developer significantly beyond simply writing code and many developers may not want that additional responsibility. Here’s an article with more detail on that:
What is an Agile Developer? How is the Role Different?"
https://www.quora.com/Do-programmers-really-like-Scrum,Alexandra Balean,2019,"Just like it is sometimes said about communism: it depends on implementation. No, I’m joking. Scrum is awful, for me at least. I had witnessed only 2 implementations of scrum in my professional life, and both turned out to be highly bureaucratic and reduced productivity by wasting a lot of the developers’ time, and by inhibiting their creativity and autonomy. Some negative aspects include, and are not limited to:
1. It is advertised to empower business people - faster, more regular deliveries, they get to pick (and change at any moment) what gets worked on, they get estimates, therefore they can make more informed decisions, and also have a tracking system where they can see anyone’s progress on each item. But in practice, the non-advertised side - technical people are put into surveillance mode, forced to keep statuses on task tracking systems like Jira or TFS. They are asked to justify if estimations are too high or if a task took more than expected. It can even come out as an insult when a non-technical person minimizes the complexity of a technical task by saying something like “but it’s just a text, it’s not that hard, is it?” So as an end result, yes. It empowered managers and business people, but at the cost of more stress rolled down to the technical team.
2. Transparency gets even lower. Exhausted by the multitude of meetings that come into the middle of their creative flow, or by numerous changes in priorities, developers can get distracted, and forget to change statuses of tickets, or end up needing more time to finish tasks. One of the natural answers to exhaustion and stress is procrastination. By the other side, things seem to get worse too. Product owners (PO) have the ability to change developer’s work item by item, person by person, with no need to justify their decision. It gets frustrating if you’re a person who likes to finish what you started. Also, assuming you accurately update the task board, there’s no task board for POs and business people for developers to see. So how can transparency work if it’s just on one-side? If only developers are asked to keep a visible track of the work using task boards, and often put to repeat what’s on the task board in meetings, it seems to me that the underlying message is that developers are not trustworthy.
3. Meetings are useless - developers are not made to just sit and listen business jibber-jabber for hours (I’d like to think they were restless kids in school, and always hated to just sit, listen and turn off thinking). Even essential information could be lost in the ocean of irrelevant stuff people talk about in meetings, and let’s not even count the boredom that sometimes make us tune out. So in the end, for the essential information people will still end up bothering each other with 1 on 1 conversations, asking for topics covered in meetings to be repeated. Which makes the meeting time wasting, in my opinion. I’d rather focus on short, insightful dialogues between individuals (when needed) than going to collective, mandatory meetings and swim through irrelevant info.
4. Any longer, complex task will be abandoned for ever. POs and managers are afraid of things that take very long to do or are estimated too high in “story points” (another irrelevant unit of measure for work but which sounds fancy to use in meetings). So developers would end up working on bite-size changes, with very little impact on the product and also very little impact on their technical expertise. Everything in scrum has to be small, low risk, low work hours, but high impact. With that in consideration, most of the work will be based on the visual side of the software product (changing button colors, adding color themes), or on the commercial side of the product - changes to price schemes, discounts, promotions etc. New, interesting functionalities that need research and innovation will be always “not a priority”. Even though they could help developers assume ownership of the code, and help them be more engaged. Simply put - if it takes more than 1 sprint, it will never be done.
5. It glorifies an emergency state. The vocabulary in scrum teams is often composed of bits like: “top priority”, “urgent”, “focus”, “before end of sprint”, “ X days until end of sprint” etc. You can believe these words for a while, until you remember that the past sprint was also urgent, the same with second past sprint, etc. If there’s an emergency every day, you will at some time conclude that none of them is an emergency. If there’s hard to see any reward or impact for finishing some menial tasks in a fixed time box, what happens?. If a company started non-scrum and adopted scrum at some point, will they fire people for not completing sprints in time? Highly doubt it. So no reward, no risk, no nothing. Just some extra pressure and stress on developers. It’s easy to forget that sprints are just some abstract “boxes” people put over their time. What was ok to be finished in 3 weeks before is now not allowed, because this means more than 1 sprint.
6. If you’ll state an anti-scrum opinion, you could be served with an argument of flexibility. These will be anecdotal, but thought they’re worth sharing. When in a discussion with business people I said how a certain practice violates scrum and also burdens my work, I was told something like “Ow, but scrum is flexible, WE need to adapt it to our needs, we’re not following it by heart”. Sure, everybody wants to be special. But only if they get all the rewards and the necessary effort for them goes to someone else. Second argument is that YOU need to be more flexible about new practices. (subtext - even annoying, time wasting ones, that make you feel more disposable than before). Flexibility is a dangerous word that can hide a lot of malicious practices.
I would not accept any scrum working environment any more. I know that people should stay generally optimistic about new things and changes, but not everything new is automatically good. You can consider these ideas if it comes a time when your company proposes this process. Try to be prepared with arguments, and research more on the internet about how different people saw scrum implementations and what possible outcomes they had."
https://www.quora.com/Do-programmers-really-like-Scrum,Jeremy Stafford,2021,"I’ve always felt that the biggest problem with Scrum isn’t Scrum. It’s non-engineer type people trying to bastardize Scrum into something that works for them. We’ve had an uprising and have kicked managers out of the Scrum process and it has been amazing, so here’s my opinion on it:
Scrum is a development process, not a people management process
In short, separate the Scrum process from project management. Leaders will coordinate with each other, but they shall not intermingle processes, and engineers will only be involved with the parts in which they have a stake (like grooming or system design). As I mentioned, in my experience, the moment that management tries to change Scrum to meet their needs, it falls apart and turns into a complete shit show with which most of us are quite familiar. We’ve basically drawn the line around something like “If you’re not the product owner, scrum master, or engineer, then you have no part in the Scrum process. Your contribution is typically part of a different process. End of story.” When those within this inner circle (so to speak) carry a conflict of interest, we just stay vigilant to identify and call out when we feel non-Scrum processes are beginning to leak in. For example, when a manager or project manager acting as a scrum master. It took a while to get certain parties to accept that approach, but we’re there and it’s working now. Side note: the unforeseen benefit was that it gave each party more bandwidth to focus on their particular part of the machine.
Basically, get good at identifying what is a Scrum problem vs. what is a management (project, product, team, etc.) problem, and do everything you can to keep them separate. Figure out the bridge between Scrum and management and develop it. Life will be good.
While one can argue that Scrum is a form of management, your focus and attitude towards it will greatly affect how you solve problems. That said, Scrum needs to be focused on development, not management. It is a team concept for software creation where all of the members worth together as one whole to deliver the sprint commitments and perform retrospectives on what they have learned every sprint so that they can grow from it. It’s not about pushing deadlines. The only deadline the team should ever care about is the end of the current sprint. True story.
WTF, you say?! How can you say that a team should only care about the sprint commitment and not the deliverable date?? It’s not that we don’t care. It’s just that it doesn’t help anyone to focus too far into the future knowing that things will always change. A team can only push out so much in given period of time before things start to fall apart. If you’re going to do Scrum, then you have to accept that a team’s velocity won’t change much after it is established and they will work at about that speed, always, and project planning and prioritization needs to operate around that fact. That said, this highlights the fact that larger deadlines are someone else’s problem. What I mean by that is that you focus on grooming the backlog, and the team has a part in that. After that, it is a management problem OUTSIDE of the Scrum process to line up the priorities and play with projected delivery dates etc. It is their responsibility to realize when some deadlines cannot be met without additional resources based on the teams (or multiple teams) velocity. If you can accept that, then this gets much easier. Fail to accept that and you will fall into a cycle of denial, where you try to get clever with how things are split up and instead of delivering more things on time, you’ll really just have more things in-flight that may or may not ever get delivered, or they’ll be delivered in effed up states and you’ll spend even more time trying to get it straightened out, effectively taking far LONGER than it would have to just accept the truth of velocity. I think this is the biggest struggle I’ve had to deal with many times in the past — denial.
Micromanaging the time of engineers and using Scrum as a whip with which to beat them is the ANTI-Scrum. It accomplishes nothing other than pissing people off and it is a large portion of why people generally hate Scrum.
When Scrum is executed correctly and without the management stank on it, I actually like it. I like that:
Stories aren’t arbitrary. They are fully functional slices of functionality that add value to a product. They are written from an end-user point of view and they focus on solving a problem and providing value, not technical details. I used to hate hearing this over and over until it finally clicked how to make it work.
The team is forced to work together finish and deliver complete entire stories instead of being scattered in terms of “tasks” being doled out.
Teams are self-organizing instead of having managers tell them specifically what to work on on the day-to-day.
During the sprint, communication between team-members is an obvious must, but they’re supposed to be also interacting with the product owner. If the product owner isn’t easily accessible by the team, then the setup is wrong. I should literally be able to turn around and say “hey look at this, is that what you were thinking?”
At the end of a sprint, during ceremonies there is a demo of this functionality and everyone gets to feel accomplished on a short iteration (e.g. 2 weeks). People complain about the ceremonies being a waste of time, but they’re not (they’re actually extremely important) so long as they’re being implemented correctly. It’s supposed to be your short turnaround feedback session - one session for the stakeholders, one session for the devs. This is what keeps everyone on the same page for more of the time.
It establishes a pretty reliable cadence of delivery. Everyone knows what to expect and everyone knows what is expected of them.
To me, proper Scrum should feel like a small group of friends trying to bring to life an idea they had over lunch. If each sprint doesn’t feel like that, you’re probably not doing it right.
If you’re drowning in process like timekeeping and managing dependencies, then you’re probably not doing it right.
If it feels like a whip with which the team is beaten, then you are certainly not doing it right.
If you’re writing stories that are estimated for a single person to accomplish, then you’re not doing it right. A story is a story — the team will decide how it is worked and by whom.
If you find that you’re constantly writing stories with particular people in mind or if you’re trying to adjust the points based on how many people would work on it, then you’re not doing it right. This is tough to get your head around, but it is true. Points are effort/complexity, not collective punch cards.
If the result of a finished story can’t be used/tested by someone, then you’re not doing it (writing the story) right.
If you find yourself constantly splitting stories up to deal with dependencies between teams (e.g. there’s a front-end story and a back-end story) then you’re not doing it right. If you’re doing that, then your team isn’t cross-functional.
Extra *wrong* points if you’re splitting stories and then adding the effort estimates together. One deliverable is one deliverable. Splitting it into a 3 point frontend story and a 5 point backend story does NOT equal 8 points. In all reality, it is likely a single 5 point story. You’re probably thinking of two people working them, therefore you need to learn to parallelize. If it’s a single person, then it’s probably a single 8 point story or it’s simply too big for a single deliverable. If you’re thinking to yourself “well that sounds nice on paper but…” then you have some more learning to do.
If you’re not delivering the result of a sprint to QA, you’re not doing it right. The end of a sprint should produce testable deliverables, even if it’s not ready to deploy into production.
If you’re equating effort estimates (that Fibonacci pattern) to time spent on a story, then you’re not doing it right. If you’re tracking hours as an indicator of progress, you’re not doing it right.
If it feels like a compressed waterfall, then you’re not doing it right.
To be honest, if you’re doing just about any of the things that people are complaining about here on this thread (as being a reason they hate Scrum) then you’re not doing it right. Most shops aren’t doing it right. It’s not really Scrum that’s the problem. As per usual, it’s management that is the problem.
It can be challenging at times to write proper stories, and that’s on the Product Owner. For example, size/scope is always an issue, but discovering dependencies is probably even more complicated (do we incorporate it as part of the story, or is there a large technical effort that needs to be accomplished to lay out some infrastructure, for example). During these times, they should work with the team lead and anyone else that should have input on it. They should improve over time as the team equalizes.
At my company, we cut management completely (other than the scrum master and product owner of course) out of the Scrum process and it has been FANTASTIC. We brought it back to basics: what are we building and why, and what do we need to do in order to make it happen. To make sure management is still getting what they need, they have management meetings which do not involve the engineers. In those meetings, they can beat each other up over deadlines and projected dates etc. This also goes for team management. If there are weak links on the team, everyone already knows who they are. Dealing with them has nothing to do with Scrum. Those are management processes and you should deal with them separately of the Scrum process. When it comes to the Scrum process, the team is who manages the team, point blank.
“But my certified SCRUM coach said…” — listen, I’m going to be honest with you. Out of dozens of certified SCRUM coaches that I’ve worked with or interviewed, with their MBAs or PhDs etc. in project management or what have you, 9 out of 10 of them came from a strictly project management background and have only worked for the same company’s that keep screwing up SCRUM in ways we just talked about. Very few of them actually had any real experience developing software, let alone actually working on a SCRUM team. So personally, I’d say having a coach is probably better than not having a coach, but take their input with a grain of salt and remember the Agile Manifesto (if it ain’t Agile, then it can’t be Agile Scrum) and call them out on their BS when they start imposing their business speak on you. Ultimately, the business wins, but if you really want to mature to the most productive team you can be, you need to push back.
The philosophy we use as guide rails is basically just to allow engineers to focus on engineering, and that is the most important part."
https://www.quora.com/Do-programmers-really-like-Scrum,Parantap Samajdar,2020,"Scrum, like open workspaces or day long requirement gathering meetings, is one of those things that is never liked by anyone who actually needs to participate in it. Only people who likes it are (1) people who gets employment because of it, e.g. professional scrum master (whatever that means) or agile coaches (it does not mean anything - another free money role like diversity champion); or (2) People who needs the visual and perception of lot of work being done, without having to care about what actually is being done.
So business analysts, developers, testers hate scrums with a passion. But senior managers love them, because it creates a better perception when things are happening weekly or daily v/s quarterly. If the things that are happening is is not adding value, it is easy to blame the developers or testers. But if nothing is happening, the managers get the blame. So ..
The root cause of the problem with scrum or agile in general is somewhat similar to communism. The core idea is too beautiful for any sane person to reject. Every single implementation that has happened so far are so horrible that no sane person can accept it.
Agile manifesto was written to address challenges with commercial end user facing applications which could not possibly support the old extremely bureaucratic and lengthy development process. It works perfectly for the type of applications that it was designed to deliver. However, when morons took over the keyword (much like AI more recently), they twisted the concept into something that even the original authors could not recognize.
There is no way to escape Dilbert when talking about Scrum / Agile. They are so true to the real life that we sometimes don’t know if we are laughing or crying."
https://www.quora.com/Do-programmers-really-like-Scrum,Stephen Burns,2019,"I’m ambivalent when Scrum is done tolerably well. I’ve yet to experience it being done very well. In practice, it’s typically a little better than waterfall. In theory it should be a lot better.
Some issues with Scrum:
it can be an enabler for micro-management. Everything the team is working on has to be visible on the board. Really? This can act as a brake on some pro-active behaviors. Never mind logging time against stories etc. so we can claim those R&D tax offsets
Ceremonies? c’mon are we in a frickin’ cult?
does the whole team have to attend every ceremony? Really?
it relies on open and honest feedback (e.g. retrospectives); and most people aren’t great at this. Either we’re unwilling to be honest or we’re crap at giving constructive feedback. The sad thing is most of us crave honest feedback.
it’s a bit of a license for mediocrity - some creativity goes into excuses rather than the software
can introduces waste by splitting stories down too small.
too many refuctorings as work is split across multiple mini-waterfalls
it doesn’t seem to scale. It can work quite well for a team. Then you either allow teams to drive their own culture (good) or you get some clown who thinks that there should be uniformity across teams
scrum masters can be ex project managers. The best scrum teams I’ve worked on had no scrum masters. They had POs who wore the scrum master hat
BS about Cynefin and how scrum is the true agile framework for software cos it’s so complex. Typically most stories are straight-forward CRUD and lots of agile approaches will work.
like most methodologies Scrum brings everyone down to a nice level of mediocrity that leads to better perceived predictability
the end product doesn’t seem any better than if we’d used a different framework/methodology
On the positive side
the daily scrum where we sync and have those effective speed-dating post stand-up conversations. But really, that’s just an admission that we’re crap at communicating.
Retrospectives are awesome when they lead to effective actions. Sometimes they end up leaning towards therapy. Additionally, we should be agile and do them in timely fashion; not every second Tuesday at 2 PM.
Exposing problems early. We’re encouraged to ask for help and/or flag blockers as early as possible. This is the redeeming quality of the stand-up
experimenting with new technologies is easier and less risky. Doesn’t work out? Just replace it with an alternative in the next sprint or two
it enables us to react quickly to changing conditions; it does not as some people think allow us to get shit done quicker
Waterfall sucked - there was no Internet to make live updates back in the day - but one of the good points was you could easily steal a day or two to clean up some shit that was bugging the hell out of you and benefited your colleagues. In Scrum everything should be justified, in particular to the PO and scrum/iteration master - we can only ask for forgiveness so often.
Agile, as it was originally proposed, on the other hand. Love it. This was all about getting feedback as early as possible - from your customers, from your peers, from your tests - so you could be the best you for your customer.
TL;DR
Arts and trades have a time-worn master-apprentice practice - we wandered on to that path 20 or more years ago with practices like pair programming that brought us all up a level as we paired up with each of our colleagues. Now we have scrum masters.
Nothing compares to a well gelled team of collaborative competent engineers. Certainly not Scrum."
https://www.quora.com/Do-programmers-really-like-Scrum,Andrew Arnott,2022,"It does not matter one little bit whether you call the person breathing down your neck a scrum master, project manager, product owner, or Second Lord of the Admiralty.
If you are doing scrum, you are more than likely being subjected to a culture of micromanagement that prioritises short cuts and sloppy coding in order to achieve short term goals, because the burn down chart is far more important than the actual quality, robustness and maintainability of the product.
On top of this, there are all the pointless, pointless meetings that leave you with even less time to try to deliver on the totally unrealistic promises the sales team - without consulting anyone on the technical side - made to the customer.
And you can bleat all you want that “this isn’t scrum, this isn’t scrum being done properly, no true Scotsman, etc., etc.”. In the real world, this is scrum. Every. Single. Time."
https://www.quora.com/Do-programmers-really-like-Scrum,James Barton,2019,"There are many software tools and standard practices that facilitate rapid development. If you put a competent technically-adept project manager or tech-lead in charge of the team, and if they have experience with similar projects, they will be able to deliver optimumly, in terms of both time and quality. They may or may not use an approach such as Scrum, but it is best to let the person with expertise select the paradigm that has worked for them in such cases.
Scrum is most useful when there are no experienced leaders on the team so you need to impose some kind of well-defined methodology. Otherwise it's like herding cats, as they say. Scrum is also useful if you are technically challenged and don't have confidence in your ability to identify and hire the right person to lead the team.
Scrum is more about exposing progress to those outside the team and letting the business feel like they're in control than it is about expediting delivery. I'm fact, if anything, it impedes rapid development.
Forty years ago we were doing agile development. It just wasn't called that. We had experienced and competent people leading the teams and they understood what worked and what didn't. So your methodology doesn't need a “name” in order to be effective.
TL;DR;
As a programmer with experience in both management and software architecture, I never advocate the use of Scrum. I would much rather hire somebody with appropriate experience to lead the team than to impose a bureaucratic Scrum Master on them any day. It's faster, better, and cheaper in the long run. And the programmers will be happier as well."
https://www.quora.com/Do-programmers-really-like-Scrum,Clancy Merrick,2019,"Well, I can only speak for myself as a programmer (or rather a Software Developer) who has (tried) to work in at least 2 Scrum teams.
No, I don’t really like Scrum.
I really detest Scrum.
I observed so many flaws in the Scrum process/manifesto that it was literally painful.
Some, but not all, were:
The lie that Scrum would enable either faster delivery, more transparency or a better end product. The reality was that it seriously impeded delivery speed, encouraged less transparency and almost never produced any product at all (both projects were “cancelled” by executives).
The extremist fundamentalist attitudes and beliefs of the so-called Scrum Master. I think that word “Master” messed with their headspace. They would insist that if we weren’t following the Scrum manifesto to the letter with all the pointless (a deliberate pun) rituals and hours of time wasted in meetings, then we weren’t doing Scrum at all. That’s just so black and white and unworkable.
Forcing top shelf developers (especially those who worked on the visible parts of the product such as the user interface) to have to expose/present half-finished or even just-started work to the business at the end of every sprint. The number of times that some “genius” in the business has pointed-out to me such things as “Hey, that button doesn’t look right or it’s not in the proper position” etc. due exclusively to the interface being presented in an incomplete state & the ignorance of said genius is uncountable but always extremely annoying.
The estimation process where I was regularly able to prove that the team were not providing estimates based on “points” but rather estimates based on “hours”, so much so that it motivated the Scrum Master to conjure up an equation that converted points into hours that then became the basis of all estimation (and was just as useless and inaccurate).
The rituals themselves were the main impediment to faster delivery. If the developers could have avoided all the usually chaotic “meetings” and focused their time on cutting code then more code would have been cut and the products would have had a much better chance of being delivered on time (if at all).
My favourite - the “retro”. A classic case of rinse and repeat. I cannot recall any retro which was even vaguely different from all the prior retros, was not a complete waste of everyone’s time or which actually improved anything. They would always quickly degenerate into rampant blamestorming.
The concept of agile development is mostly better than the concept of waterfall development but even then, only within a limited scope of product types.
The entire concept of agile development evolved out of methodologies used in the manufacturing sector where they worked very well, mainly because the product didn’t change. It was just manufactured over and over again.
For agile methodologies to be applied to a dynamic product (like software) rather than a static product (like a doll, spanner, screwdriver or even a box of candy) then it’s much, much better to evaluate the best practices in the multiudes of rigid lock-in agile methodologies and cherry-pick a combination of those that are most applicable to each individual software project.
Sure, this will cause Scrum fundamentalists (and and fundamentalists of any other formal agile methodology) to throw hissy fits and claim the intellectual high-ground but I personally suggest that you ignore such fits and tantrums and get on with what you were hired to do and what you do best."
https://www.quora.com/Do-programmers-really-like-Scrum,Eric Litovsky,2019,"Let’s try a thought experiment:
Imagine a band like TOOL, Steely Dan, Pink Floyd, or Frank Zappa recording an album under a scrum master? Walk yourself through that exercise in your mind. Imagine a 15 minute standup every morning in the studio where each member has to report on progress, present the charts they notated the previous day, quantify soundbooth hours, time on tape, edits committed.
Each song on the album is broken down into a user story. Each part of the song, it’s own task, each member of the band has to provide estimates in hours or story points for how long each task would take to accomplish.
Now let’s imagine a recording session where a lead guitarist comes up with an awesome new guitar solo that leads into a new motif but needs 16 bars of the song to fully express it instead of the assigned 12 bars.
Let’s end this absurdity here. Can a band record an album using scrum? Yes.
Will that album be total shit? Also yes.
But do you know who would totally love this approach? It is literally a Label executives wet dream. With the power of scrum, the recording industry could concisely budget each and every album, accurately compute ROI, and best of all, project that ROI into future projects to best mitigate potential risk and express revenue in big pretty graphs they can present as powerpoint slides to their investors and shareholders.
This is the raw, naked truth of what SCRUM is all about. It’s a way for a very select few to feel (and yes it’s all about feels) better about a project."
https://www.quora.com/Do-programmers-really-like-Scrum,Alan Mellor,2019,"I’m not a fan, I must say.
I loved the original agile manifesto.
To me, that directly addressed the problems of uncertain, unpredictable development by attacking its root causes. Extreme Programming (XP) seemed to make a lot of sense.
These were ideas devised by programmers for programmers to help them program.
And then the project managers came along.
Scrum, with its planned sprints, seems to me to simply discard the agile manifesto. It splits a project into two week waterfalls and hijacks the term ‘agile’.
There is nothing in the agile manifesto that says we can make software more predictable. It’s all about handling and making transparent the unknowns that we face during every bit of the development process: requirement details, libraries, legacy cruft and people. Instead of pretending we can predict those before they hit us.
But by all the same tokens, your project manager is going to love Scrum. It’s a way to rein in those pesky agile programmers who make it up as we go along. On paper.
I’ve been part of successful Scrum projects. But the agile manifesto/XP way of delivering software has always felt a much better, more productive fit."
https://www.quora.com/Do-programmers-really-like-Scrum,Behdad Forghani,2020,"Very few software engineers that I know like Agile software development.
Agile methodology is OK for tasks that are very well defined and are narrow in scope.
In my opinion Agile tends to focus people on the very short term and stifles creativity and innovation that do not align with the artificial Sprint boundaries, the same way stock prices focus companies on short term returns at the expense of long term strategies and goals.
Another problem with implementation of Agile methodology that I have often seen is the irrelevant metrics that Agile tools produce. Most measurements on performance of the team are based on points burnt and timeliness and not the value produced. I have seen many teams that are champions of the most points burnt without delivering anything new or of value.
You can hope that in the long run teams that manage to produce value get rewarded. But, often, the Agile results in dead on arrival software because the focus was improving metrics like burning points and performing the rituals of scrum meetings."
https://www.quora.com/Do-programmers-really-like-Scrum,James H. Kelly,2019,"I’m sure some do, but in my experience, most don’t, especially as they get more senior.
Most programmers like to program. They want to know what needs to be done, that their work is contributing to the overall project and that no one else is doing the same thing, but after that they want to be left alone to program. Any group decisions are generally best made in chat (Slack) or in short, small meetings with only the people who need to be involved.
What they don’t like are useless meetings with Uno cards trying to predict the effort needed to do tasks full of unknows. What they don’t like is trying to cram features into arbitrary timeframes like sprints. And they all know that trying to gauge “velocity” based on past work is useless because every problem is different."
https://www.quora.com/Do-programmers-really-like-Scrum,Shailendra Malik,2020,"Wow, this is a loaded question, so the answer will also be loaded with riders. I request you read in full.
One word answer to this is a resounding NO. But it is not because of the poor methodology, but because of shoddy implementation of the concept in the real world.
Please bear in mind that Agile Manifesto was formed with the inputs given by the top practitioners in the tech space back in 2001. The research on the topic started way back in 1994 and the first research paper on it was published in 1995 by Jeff Sutherland and Ken Schwaber.
The whole reason for moving in this direction was to cut the middleman from the overall process and avoid the requirements getting lost in the translation where multiple layers of managers or analysts twist the actual requirements and distort the overall outcome of the project which used to get visible only after a significant time of 6–12 months due to the waterfall development cycle.
This was done by exposing the developers directly to the person who needs the feature or product to be delivered, which saves time in requirement gathering and avoids the chances of miscommunication in requirements.
Coming back to why people hate it now, is simply the fact that more and more roles have been created again in the past 20 years in Agile to create that middleman layer by many companies trying to build their flavor of Agile and many so-called Agile coaches and Agile consulting companies twisting the whole essence of Agile.
Even the basic roles of Product Owner got transformed into 5 types of Product owners (Read- Types of Scrum Product Owners), purely because of many times senior business stakeholders who want the feature to be built see Product Owner as a low-level role and assign a junior resource to perform the role, creating the layer of middleman inadvertently.
I hope this sheds some light on the current state of affairs in the Agile setups in various organizations."
https://www.quora.com/Do-programmers-really-like-Scrum,Pete Oliver-Krueger,2019,"If I could clarify the question first? Are you asking if programers specifically like Scrum? Or Agile in general?
### The short answer
If specifically about Scrum, I myself did when I was developer, though I leaned more towards Kanban in actual practices. I liked looking forward for a few weeks, breaking things down into short term chunks, regular integration, and looking at our process and making changes on a regular basis.
I coach a lot of teams, and have found the same pattern holds up. Developers tend to lean towards Kanban, with regular planning and retro opportunities. Similar to other posters, I find that Scrum specifically gets a stronger following from managers.
I think this is for good reason. This is a very simplistic summary… but Scrum has more techniques for looking ahead into the future months, something managers are tasked with doing. Kanban, again in very simplistic terms, focuses more on what to do in the current iteration, the main focus of developers. Usually I find that the better teams merge the two, to help everybody, with a both short-term and long-term focus.
### The Long answer
If you’re asking about Agile in general? (Most people initially get taught that Agile is Scrum, Scrum is Agile, and so I often get the question “Do developers like Scrum?” when they really are asking, “Do developers like Agile?”)
Here the answer is also yes, with the caveat that only if they’ve been taught Real Agile. As one of the other posters mentioned, he really liked working according to the Agile Manifesto principles, but hates working in his company’s Scrum process. But if his company’s Scrum process doesn’t follow the Agile Manifesto, it’s not really agile! And it’s not doing Scrum either.
I find the brain science behind this fascinating. There’s a biological reason for this split. Our brains pattern match 95% of the time. When companies take a class without followup coaching, they see each technique and say, “I know what that is! See, I knew we should have been doing that! We’re doing that starting tomorrow!” or something like that. Sometimes they’re right, but more often the agile version of that technique is significantly different than the non-agile version.
### Examples
This is why most organizations that take an agile class start off by just rearranging their existing practices to “look” more agile without actually being agile. I spend the vast majority of my time fixing fake agile.
Planning Poker - Most developers hate Planning Poker …until I teach them the rules. Then by the end of the next planning session they wouldn’t go into a new sprint without it. Planning Poker is not an estimating technique. You don’t do it to determine how long it will take to do something. That’s old world project planning. The rules of Planning Poker are critical. If you don’t follow the rules, you will not understand why. Everybody must play. You must describe the story and answer all unanswered questions first. If the answer isn’t in the room, you have to put that story aside until you can get an answer. If you don’t you’re wasting everybody’s time. If no unknowns, then everybody (who actually does the work) must pull a card. Estimate the entire work, research, development, testing, and sign off. If you only estimate your time, you’re wasting time. Then you must pull your card WithOUT showing it to anybody. If you show your cards, you’re wasting time again. Count down “3, 2, 1” and show all cards at once. If they’re not the same, discuss why. No averages. No majorities. No “executive decisions”. If you don’t discuss, you’re wasting everybody’s time.
Planning Poker is actually all about the conversations. The discussions and debates are designed to surface assumptions that get us into trouble halfway through the sprint. We all make assumptions, but we don’t all make the same assumptions. One person assumes it will be easy to test. When they find out it won’t be, they know to deliver it to the testers early in the sprint, not on the last day. Another person assumes we have data, or a database, and finds out that they’re right or wrong. Another assumes a larger scope and finds out that they only have to do half as much work as they would have done before asking the question. My favorite short cut question is starting at the extremes and asking, “[3’s] are you willing to come up? If not, why not?” Our ""[13’s] are you willing come down? If not, why not?” This exposes the right assumptions to challenge.
And some assumptions are fantastic. I had one 3 vote that refused to come up. She had trouble saying why, but during debate the team realized that they had already built the story in question 6 months ago as part of another project, and never deployed it, saving the team 2 months of unnecessary rework.
### Summary
This is why developers think they hate Scrum, Agile, or planning poker. Because they weren’t actually doing Scrum, Agile, or Planning Poker. Scrum and Agile (and planning poker) were created by developers for developers. They really work, significantly better, and make life so much easier and more fulfilling. And the standard Agile practices were tested over multiple teams. If they're annoying to you and your team, honestly, you’re probably doing them wrong. Go ahead and stop doing what you’re doing, and reach out to an agile coach that you, or someone you know, trusts, and ask them to explain what’s wrong, what is making what you’re doing annoying. Or try an Agile conference."
https://www.quora.com/Do-programmers-really-like-Scrum,José Santana,2019,"I am a programmer, and I don’t like scrum at all…instead of being “agile”, scrum turned into a whole lot of formalistic “ceremonies”"
https://www.quora.com/Do-programmers-really-like-Scrum,Petri Heiramo,2019,"The sentiment here is, unfortunately, pretty correct. It’s a statistical average. It also represents the statistical average of well-done Scrum vs. poorly done Scrum.
When done right, it does give trust and authority to the programmers. It increases motivation and effectiveness. It does require that the team learns new skills (which may be uncomfortable for some people), but once those skills become more natural, they further increase the team’s ability. In these teams, the ScrumMaster is a liked person and really does help the team improve and get things done better & smarter. The ScrumMaster would also help the Team to apply some other framework, like Kanban, when that is appropriate.
When not done right, it is often misery for the Team. Scrum becomes an excuse for micromanagement or dogmatic adherence to process (without any real justification for why). ScrumMaster is the new project manager, though a bad one. We might say, this is ”Scrum on traditional mindset”. Unfortunately, this is still more common :(.
There is a middle ground. In these, the Scrum is really just waterfall with two week planning cycle. Yes, there are dailies, but they are mostly empty rituals. The worst of bad Scrum is avoided, but none of the real benefits are gained, either. Sometimes, over time, people learn and improve. Sometimes don’t. Many of the people in my trainings come from these teams, and I get a lot of comments like ”we’re doing Scrum, but now I see we’re not”.
I feel we are in a transition. More and more people (and orgs) become excited (or desperate) to apply Agile, but most still lack skills and insight. Yet, more and more people and orgs also do get it. In my 13 years of Agile, I have seen a massive change, and the change will continue."
https://www.quora.com/Do-programmers-really-like-Scrum,Gandalf Hudlow,2020,"Scrum works for about 15% of software endeavors, yet it is applied like the proverbial hammer to everything that might have seen a nail once. Programmers are smart people and can easily recognize when they are being asked to do dumb things that are a waste of time. So no, they don't like scrum about 85% of the time.
The #1 problem in scrum is the non-customer product owner anti-pattern. Scrum works well when there is a savvy customer who will engage and learn what good looks like. The reason this works well is that team has coupled itself to a reliable source of truth so they can iterate into the right thing that the customer really needs and wants. Most traditional companies are resistant to changing their ways to iterate with customers, and easily fall into the smart trap of standing up a silo to handle Ideation, an Idea Silo if you will. In my experience Idea Silo members behave like any other silo member and focus on pleasing their boss, which is usually not helpful for creating industry leading software solutions."
https://www.quora.com/Do-programmers-really-like-Scrum,Tim Broberg,2020,"Like communism, true scrum has never been tried.
Everybody seems to do some bastardized process they call scrum, which they hate.
When I was first introduced to the concept, we were pretty gung ho about it. People actually tried to size tasks properly, groom backlog, break stories into tasks, and track the progress of stories toward completion within the sprint. The manager always had a burndown chart on his wall.
This took some getting used to, and consumed significant overhead, but there were a few things I really liked:
Code reviews
There was a functional, cohesive product all along, not a bunch of pieces sailing toward integration that may or may not fit.
Testing kept up with development.
I knew exactly how much work I had to finish on any given day to finish on time.
In the end, increasing demands for repeated rounds of code review followed by documentation and test from a separate test group made it nearly impossible to get 1 point of development work done in a sprint. The 8 day payload of the sprint was just too short."
https://www.quora.com/Do-programmers-really-like-Scrum,Jan Fischbach,2019,"Yes and no. Good Scrum is fast easy and fun (Quote of Jeff Sutherland). Programmers love good Scrum.
I saw companies where Scrum was used to force people working faster and producing more low quality stuff. Nobody likes that. Scrum makes problems in a company transparent. If there is no one who solves problems nothing happens. Nobody likes that."
https://www.quora.com/Do-programmers-really-like-Scrum,Harriet Louis,2017,"I work in software development - methodologies can be implemented in various industries, so this is relevant to mention, as my answer will centre around software development.
I also assume that the OP is familiar with the literature about Scrum, and don’t need us to cover that.
Our team has been practicing Scrum for a couple of years now. We were all trained to use Scrum by a professional coach, and I was impressed that Scrum addressed many of the problems I could identify during my years developing. At the time of adoption our team was not really implementing any of the traditional Waterfall methodologies, and not really Agile either. It was just some random processes we’ve followed and somehow it worked to some degree, taken from years of experience, somewhat of a hybrid approach.
Our team is relatively small, about 10 people, and we’ve all been working together for more than +/- 7 years.
What Agile did for us? It gave us as developers more of a voice in the direction we take as a team. Many of the bad practices made by individuals who find themselves in leading roles are much more visible. In my case we have some established products we maintain and make enhancements to. Requirement elicitation was always a problem, and also autonomous decision making by the powers that be. Within the team, we often had silos of people “specialising” in a certain areas of development.
Agile really exposed these problems, and gave us as developers the power to voice our collective concerns. If the majority is unhappy about the same problem being caused by a minority, surely there is a problem and they need to be listened to.
However Agile does not provide the solutions to the problem, if anything, the fact that Agile processes are so loosely defined, makes it easier for some to bullshit their way through project execution, hiding their incompetencies and lack of structured approach to planning and development. Also, if people want to work in silos, nothing is going to stop them, least of all a methodology. They will just find a clever way of doing it within that framework.
Our daily scrum meetings have become more of a report back to the manager, than a constructive meeting to solve immediate problems. In the hands of a micro-manager, scrum and its continuous focus on regular feedback, can become an effective way to incriminate and point fingers.
The loosely defined processes can be easily manipulated for scope creep, and changes too late in the cycle. Requirement gathering can become a joke, with requirements such as “make it work”, which carries no details for a developer to work from, and puts the added stress of having to run from one person to the next to figure out the details.
How I feel about Scrum at this point, is that it gives individuals the opportunity to get away with improper planning, which eventually heightens the risk for project failure.
There is a fine line between planning the minimum to get started with and to just let the requirements reveal itself as one goes along.
When I was doing my thesis, I interviewed a few companies who’ve employed some form of Scrum; It was amazing to see how different organisations implement Scrum. You get organisations who are very process heavy, to organisations who are very light on processes. Of course they can justify their decisions and in an interview situation would probably paint the best picture. But as an experienced developer you just know that no process / methodology is perfect."
https://www.quora.com/Do-programmers-really-like-Scrum,Wouter Van Ooijen,2021,"No, programmers generaly like Agile (which means roughly remove all unnessary protocol and give the programmers the freedom they need to be productive). Scrum as I have seen it in practice is anti-Agile: it is a fixed set of rules, which makes the (good? bad?) old waterfall method seem like total anargy."
https://www.quora.com/Do-programmers-really-like-Scrum,Alok Dimri,2022,"Many programmers take the scrum practices and principles at face value and thus end up viewing them as an overhead with respect to getting things done. This I feel is because they don't see the purpose of aforementioned elements and value it could bring to the work they do. I believe programmers appreciate Scrum once they go beyond their technical blinkers, to understand the ‘Whys’ of the framework.
Please check more about Scrum and Agile at https://benzne.com"
https://www.quora.com/Do-programmers-really-like-Scrum,Chris Falter,2021,"I have decades in the industry and experience with multiple methodologies. Scrum is by far my favorite.
However, like any methodology it can be abused, and Scrum is easier to abuse than most. It requires a lot of discipline, just as being a member of a crew team requires individual and collective discipline.
Some people think you can just call your daily meeting a “stand-up” and suddenly you’re doing Scrum. I have seen this more than once, and it’s worse than waterfall. Most of the criticism of Scrum seems like visceral reactions to the fake “stand-up-only” version, in my opinion.
If you want the benefits of Scrum, you need to exercise the disciplines. You can’t just work all sprint, have 2 hours for sprint review, retrospective, and sprint planning, then start your next sprint. In the middle of the current sprint you need to do the following:
Groom the backlog with a for reals product owner.
Prepare stories for the next sprint.
These require hours, maybe even a day (distributed over the current sprint) to do well.
You also have important activities that do not necessarily need to get done every sprint and therefore can easily fall by the wayside:
Update just-in-time architecture deliverables, explore future architecture needs.
Gather downstream requirements, create skeletal stories for the backlog.
Coordinate with stakeholders (clients, senior management). Yep, you do a lot of standard project management when you’re doing scrum.
Take stock of technical debt and create epics and stories to address it. You can’t just do feature development in Scrum, although far too many teams try.
There’s nothing better then Scrum when you have
a reasonably self-organizing team
that is reasonably well-trained team
that is supported by reasonably informed management and
engaged with reasonably informed customers
But if one of those conditions does not pertain, your life is going to be hard under any methodology. Scrum is not a silver bullet."
https://www.quora.com/Do-programmers-really-like-Scrum,Andrew,2020,"It’s strange how pervasive SCRUM has become as the agile standard. Out of all the methodologies I have ever participated in, it is consistently presented the worst way to engineers. Which is exactly the same way as it was presented to executives.
I personally believe that having a methodology is better than no methodology. In contrast I am not particularly fond of any of them. I don’t precisely dislike them equally but I am not sure the differences in dislike matter. So I am not exactly anti-scrum.
I do believe we need some consistency to figure out what to work on and how to organize that work. Doing this in small regular increments of time is better than huge increments of time. It’s a good idea to have some organized time set aside to check in with teammates and customers so we can make adjustments along the development life cycle. Finally, those who write the checks are entitled to effective communication that promotes trust. I can do all this with any meth...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Andrew
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/Do-programmers-really-like-Scrum,Geovane Piccinin,2019,"I think it is overestimated.
As a developer I get the feeling that people think they are following the principles than everything is perfect, while it is not and the consequences fall over developers.
I will just give an example from my own experience.
We were working in a project building an app intended to be used by adults. As a developer, the idea of the app and its requirements came to me only by the voice of the product owner. We built as she suggested until a meeting with possible users. In that meeting it became clear that she didn’t understand very well what was the demand and what the users expected. She had followed the process of creating personas, we followed the rituals and etc. But we are failing in the most basic thing which was to try to understand more deeply what the users wanted. I think they just got too comfortable with the idea of change that they didn’t worry in understanding things well, they just start building expecting that it can be changed later. But, as developer, it gets very frustrating that you are building something with so low chance to be really used. Furthermore, when they realized that it was not good enough we had to rebuild the software in a very short time.
Conclusion: on one side we have waterfall trying to predict the outcome before any development. In the other side, we have people start building things randomly and deliver things that don’t make any sense just to create an illusion of productivity and justifying that change is absolute normal, while, in fact, it was just poor analysis. Leaving the impression that they do it because the real consequences fall over the developers.
Sometimes I hear people talking about agile and scrum and it just seems they are talking about magic. I think there is so much marketing behind it that it became a cool item in the culture and the people who want to look cool just go repeating the same stuff.
Of course it has its benefits and qualities, but, as everything that get popular, it will have a lot of people exaggerating its value as a way to inflate their own value."
https://www.quora.com/Do-programmers-really-like-Scrum,Gullivan,2019,Yes we do as long as it's implemented in the proper way. I've seen many companies using Scrum just to micromanage developers. They use daily stand up as a reporting meeting. Most companies know the buzz words but not the roots of Agile. Agile it's a developer team methodology and not management tool. It's purpose is to take people as the most important resources rather than process. It came up alongside start ups during the Web 2.0 boom. I've managers and product people hijacking Scrum tools and that is too non-sense. Another start up term Scrum suppose to help is pivoting. Changing what was planned out of sudden. A person should read Lean Start Up by Eric Evans before starting using it.
https://www.quora.com/Do-programmers-really-like-Scrum,Dmitri Koulikoff,2019,I do not and consider it the waste of the resources.
https://www.quora.com/Do-programmers-really-like-Scrum,Bret Sheeley,2019,"As a senior developer, I absolutely love it… went it is done right. Unfortunately I’ve seen too many cases where it is half-implemented or Product is willing to break process at the drop of a hat. When done correctly, it allows for stories to be set to a pace that helps encourage proper planning and discussions around the user-stories in order to ensure things are broken down to their smallest valuable components, detailed out to a minimum set of requirements, and then lets the development team build and test in a reasonable period of time.
Every time I’ve seen things go wrong in a Scrum environment, it’s usually due to a pressure being placed on a team to take too much in, implement poorly defined or vague stories, or have constantly shifting commitments forced upon the team far too often than needed.
For me, as a developer, I need that period to understand what’s coming down the pipeline and give feedback. I need the sense that unless there is a real shift in priorities, I have room to work on what I know is coming up next; and if there is a real to shift priorities, the new goals are clearly spelled out and discussed before coding begins.
Outside of that environment, more often than not I just see the goals and plans constantly shifting to the point where whatever I rushed to get in next ASAP was no longer important because the next emergency needed to get done NOW! Then that gets de-prioritized by the next emergency spurred on by some last phone call an exec was in. Then, in the end, you’re stuck with a bunch of poor quality hacks tangled together, of which a large chunk was never truly important in the long run.
With Scrum, I get into a steady pace of putting out quality work that in the long run is much more beneficial to the company and allows me to look back on my work with more pride.
Moving into a good Scrum environment from other processes is night and day for me, so long as the process is held to far FAR more often than not. I have not encountered a framework like it, and I would be hard-pressed to take a job that wasn’t in a Scrum Team."
https://www.quora.com/Do-programmers-really-like-Scrum,Kirill Sukhomlin,2019,"I wouldn’t argue with existing trend and instead say that many developers actually don’t care mostly. Unless it’s really awful, they are more interested in technical challenges rather than such things.
Like do you care if brand color of the product you are working, is red or blue? Well, you might have preference, but it’s not important at all. The same with scrum."
https://www.quora.com/Do-programmers-really-like-Scrum,Animesh Yadav,2019,"Of course yes, many programmers are like scrum rather they are also using the work related to scrum. Well, I know to be a good scrum master certified we need to do the proper course & also this is needed for programmers. I would suggest “tryScrum” for the best training."
https://www.quora.com/Do-programmers-really-like-Scrum,Bruce Wells,2020,"Scrum is a management management tool. It has nothing to do with Agile development. It was invented by developers to manage their management. Agile was just a ruse to convince them to try it.
If you need to manage your management, then you should use Scrum. And please, never tell management this, or you will never get control of the development process."
https://www.quora.com/Do-programmers-really-like-Scrum,Sean Hoegaarden,2020,"The answer depends on the individual and on the environment.
Starting with the environment is easy, there is a nice article on ‘Dark Scrum’ which details how to entirely mess up and deteriorate all concepts of agile and Scrum. Another problematic point is that most Scrum Masters get their role based on a 2 days training which makes them certified. Barely enough to get the basics. This is a very thin background if your mission is to change the mindset and behaviour of an entire organization. There are unlimited options to make Scrum painful for developers. Just keep in mind that managers have a lot more experience in turning situations to their favour than developers have, that is why they are managers.
Another factor is the developer’s personality. Working as a member of a team is not for everyone. When someone is in the habit of full code-ownership, starting the development process with designing architecture, full data and object models, and elaborating the rest later, then agile will never be a comfortable alternative. Regardless of whether it is ‘done right’. Even though, for such people, among all agile frameworks, Scrum is one of the friendliest choices."
https://www.quora.com/Do-programmers-really-like-Scrum,Aneesa Amin,2022,"There's no simple answer to this question - it depends on the programmer. Some programmers love Scrum because it helps them to stay organized and focused, while others find it too restrictive and prefer to work in a more flexible environment. There are also those who find Scrum to be a helpful tool in some situations but not in others. Ultimately, it's up to the individual programmer to decide whether or not Scrum is right for them. However, there are some things that all programmers can agree on: Scrum can be challenging, and it's not always easy to stick to the rigid structure that it requires. But if you can master Scrum, it can be an incredibly powerful tool for getting your work done efficiently and effectively."
https://www.quora.com/Do-programmers-really-like-Scrum,Shubham Soni,,"I personally don't like Scrum overall but, somehow management think it can do magic.
Things that I appreciate in Scrum:
Iterative process.
Pitfalls of Scrum:
It is slow. Unless you have very short sprint. You do more meeting than actual work and spend time in non technical discussions.
Difficult to track feature as one feature gets broken into many small stories which often seems unrelated to a feature.
Vague. There are no concrete definations of things so everyone interpret things differently.
Doesn't honor special skill of a person. Often a team consists of Subject matter experts and a certain kind of task can be done by a particular person but Scrum assumes everyone to have similar skills.
It discourage a technical person. Things gets very vague in sprint and someone who has tendency to be definitive about terms are not comfortable and end up demotivated.
There are many more practical problems with scrum which management doesn't realize but developer face at the end.
I always believe that Kanban is much straightforward and simple process. yet management are sold on idea of scrum and developer has to follow."
https://www.quora.com/Do-programmers-really-like-Scrum,Manjunatha Gopalakrishna,2024-09,"Mostly no. In my opinion its due to the mindset rather than Scrum itself. Below is what I have observed
The kind of people who are responsible for Scrum adoption
It is unfortunate that majority of the Scrum Masters or coaches who introduce it or accountable for its right adoption themselves have very limited or skewed understanding of it. They tend to use it to manage/assign/track the work rather than assessing progress towards an outcome or a goal. This can cause frustration for a person who would like to focus on the job at hand. Coupled with senior management or executives who look for some quick numbers, the environment is set for a toxicity which results in programmers, testers and other people who do the ground work not liking Scrum/Agile, as they feel its the “cause” of the problem.
This is true with waterfall or any other way of working where too a fair bit of programmers did not like one thing or the other because of supervisors demands…
Work Philosophy of Programmers
Most of the crowd in the software world are demotivated or not passionate about the work they do. You will hear most programmers hating going to work on Monday or waiting out the week to enjoy a weekend. I agree with if you say that its not just true for software, its the same in other industries too! A big chunk of working professionals actually hate what they do..
When you are not deeply driven about the work you do, you would not be a big fan of transparency which is elevated when you correctly adopt any Agile framework. Scrum would become the quick bait here..
Culture of “Individual”s
Programmers generally would like to focus on “coding” when working and learning programming languages when they want to skill/re-skill. This is because its better incentivized in any organization over collaboration or team work. They also tend to measure their worth with the number of lines of code they have written not by what was not needed to be written. Quality is parked for regression cycles or hardenings and there too its about my code v/s your test. In short, outputs are valued over outcomes which sorts of wires the brain to dislike anything which encourages or fosters outcomes..
Push v/s Pull
Lastly, the need to do Scrum v/s the want to do it! Most of the organizations are into maintenance or enhancements of existing features and the software Engineers are part of such teams. This kind of work does not require Scrum and at best requires borrowing few Agile practices. When there is not much unknown or experimentation is not the way to get better, Scrum does not fit the bill. However, the urge of few decision makers results in Scrum being pushed which becomes burdensome and its only a matter of time when its loathed by the people who do the work…"
https://www.quora.com/Do-programmers-really-like-Scrum,Michael Lloyd Lee,2020,"Used well, for the right sort of project, it works well and I like what it brings. That is starting point fixed concepts can help bring people on board with agile as well as give a good set of starting points for a team. It is also fairly good at highlighting when something doesn’t work.
The most important part of any agile process is the introspection part, Scrum is not some fixed thing that remains in a static state for all eternity. It changes as the team evolves and works out what works for them, this means by definition Scrum is not the same for each team nor is it a single course that you learn and blindly apply to a team.
Scrum, as a base line to start working with can be a good thing, Scrum as the end goal of Absolute Perfection is not Scrum.
Scum does not work when attempting to apply it to an existing well performing team. Nor does Scrum work well when you don’t have a natural cadence. In both cases, done well, Scrum (or indeed any agile process) should highlight that it is not working quickly.
I like Scrum. It is a good tool to have in your belt, it should not be your only tool however."
https://www.quora.com/Do-programmers-really-like-Scrum,Jaanis Kruumins,2020,"I liked it when I was a programmer, I like it now as a consultant helping to manage projects.
Would disagree with the statement that scrum is an utopian methodology. Agile is challenging to implement and Scrum isn’t an exception. Not only it can be counter-intuitive, but also because it raises questions regarding the whole process. It’s always easier to shove the questions under the carpet, but it won’t be Agile anymore. That is why we have so many pseudo-agile-scrums, but judging about Scrum based on these implementations is alike to judge the opera by a friend singing it through the landline.
As a programmer I liked scrum, because the problems were mostly conveniently cut into the fairly manageable pieces and the high involvement of the project manager was beneficial as well: the problems were quickly identified by others if I was unable to do that and I felt so much less stress under Scrum than I did working under other methodologies.
As a consultant I like scrum because it’s a strict methodology, where B follows the A, and it’s somewhat easy to make a well-manageable project plan if you follow the rules. It is worth mentioning again that it is difficult to implement: not only the mindset takes time to change, it takes time to put the whole process flow straight. However, well-implemented scrum or other agile methodology is nice to have around. It doesn’t disconnect the development team from the business side of the project and it fosters improving the whole process, which makes work of everyone involved a bliss."
https://www.quora.com/Do-programmers-really-like-Scrum,Victor Sergienko,2020,"You will not get a good answer here.
Because:
1. A selection bias. People normally don’t go to the Internet to tell the world things are working fine.
2. In English-speaking programmers culture, I observe a much more individualistic approach. People’s ideal workplace is a personal room with a window and a noise isolating door. One really needs some training before they can become an efficient team member, and it’s not everybody’s piece of cake. The individualism here is taken to its extreme: many programmers won’t talk to their colleagues about the implementation details of their work for weeks, months even.
3. Very often, as far as the answers state, “we’re agile” is just a way to say “we don’t know how to plan/manage/what product to create”. Calling these cases “agile development” is a big stretch, yet a lot of negativity comes from experiencing such an environment. Naturally, people’s reaction to “agile” afterwards will be “never again”.
4. My guess is those traumatized by “agile” from paragraph 3 have never even read a book on it, and thus never knew how a healthy agile development process looks."
https://www.quora.com/Do-programmers-really-like-Scrum,John Deeth,2021,"Unfortunately, the answer is no.
Scrum is an instance of Agile and the thing we do during Scrum is followed by 4 Values and 12 principles of Agile.
Like the picture, we see Agile is Mindset, which are characteristics we have to change if we are different from it. Not easy for anyone to change themselves and fix with a new mindset.
Disclaimer:
The answer programmers don’t like Scrum is not absolutely number. It depends on my experience and they take the majority.
Scrum and Agile have different instances in every team or organization. So depends on their circumstances, the characteristics of Agile culture are different. But 4 values and 12 principles should be considered and comply with."
https://www.quora.com/Do-programmers-really-like-Scrum,Cristiano Costantini,2020,"I love scrum: it was really satisfying to implement it when with my Self-organized team and we adopted it starting ~2010. We all five developers enjoyed it and got mature in using it. Then the team expanded and maybe the new comers did not enjoy as much as we - the initial members - did.
After some years and after being enlightened by Dave Thomas’s talk (he is one of the authors of the manifesto), I realize that the main reason the newcomers didn’t like was probably because they didn’t participate to self-organizing it. We, older members acted as experts.
Similarly, I think that many developers hating scrum today do hate it because it was used - by other team members, managers or product people - as way to pretend saying what to do and how, which violate in my opinion at least 5 of the 12 principles behind the manifesto. Other answers to this question reinforce my idea…
Please note that scrum authors are both original authors of the manifesto for agile software development, so if by adopting scrum you violate its funding principles there is something more than wrong on the way you (or the people who imposed scrum to you) do it.
This is sad because, as an happy Scrum adopter, I found great value in its ideas and it gave to my team great satisfaction…
But the way it is nowadays imposed is moving people away from it, and developers are missing an opportunity for a well balanced, sustainable and effective approach to software development.
I can only recommend to developers to own their scrum if they want to adopt it with satisfaction: set aside the chickens (time ago the scrum guide used an effective metaphor to describe who is just involved and who is really committed in the scrum processes) and eventually find support from an Agile Coach (not an expert that tell you what to do, one who help you to implement agile by yourself).
…but if you disregard Scrum because you had a bad experience with it, you are missing an opportunity."
https://www.quora.com/Do-programmers-really-like-Scrum,Alpesh Vasant,2022,"Are you a disciplined person?
Would you like to make or contribute in decision making and own the decision?
Are you self organized ?
Are you ready to allow yourself to be cross skilled?
Are you a more of team player rather than lone wolf?
Are you the person who do not believe in too much bureaucracy and believe in open and frank discussion and communication?
Are you really passionate about programming, testing , designing and contributing in architecture of software?
And the most importantly , are you really a flexible with mind and body??
If answer to 90% of these questions by a Programmer is TRULY YES, then I am sure he/she would love Scrum.
Else he/she is going to keep struggling and will keep hating Scrum (and still be the part of it most of the time)
Sorry if I am sounding bit blunt or rude here, however these all are the reality of Scrum and frank and open communication is the very base of Scrum.
With Regards,
Alpesh Vasant"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Assistant,2024-08,"Agile methodology is a project management and product development approach that emphasizes flexibility, collaboration, and customer satisfaction. It is based on the Agile Manifesto, which outlines key principles for software development and project management, promoting iterative progress, adaptive planning, and continuous improvement.
Key Principles of Agile Methodology:
Customer Collaboration: Engaging customers throughout the project to ensure the product meets their needs.
Iterative Development: Breaking projects into small, manageable units (sprints) that allow for regular assessment and adaptation.
Cross-Functional Teams: Encouraging collaboration among diverse team members with different skill sets.
Continuous Improvement: Regularly reflecting on processes and outcomes to find ways to improve.
Advantages of Agile Methodology:
Flexibility and Adaptability: Agile allows teams to respond quickly to changes in requirements or market conditions.
Improved Customer Satisfaction: Frequent delivery of functional increments helps ensure that the product aligns with customer expectations.
Enhanced Collaboration: Agile promotes teamwork and communication, leading to better relationships among team members and stakeholders.
Early Detection of Issues: Regular iterations allow for early identification and resolution of problems, reducing the risk of project failure.
Faster Time to Market: Incremental releases can lead to quicker deployment of features and products.
Disadvantages of Agile Methodology:
Less Predictability: The flexible nature of Agile can make it difficult to estimate timelines and budgets accurately.
Requires Cultural Shift: Organizations may struggle to adopt Agile practices if they are accustomed to traditional project management methods.
Scope Creep: The focus on customer feedback can lead to continuous changes in scope, potentially derailing original project goals.
Team Dependency: Success relies heavily on team dynamics and collaboration; if the team is not cohesive, the process may suffer.
Documentation Challenges: Agile often emphasizes working software over comprehensive documentation, which can lead to gaps in knowledge transfer.
Conclusion:
Agile methodology can be highly effective for projects requiring flexibility and customer involvement, but it also presents challenges that organizations must navigate carefully. A thorough understanding of both its advantages and disadvantages is essential for successful implementation."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Victor Malyavko,2022,"Agile is a software development methodology that emphasizes collaboration, responsibility, and openness. It is a technique for development management that stresses iterative and incremental development, and early delivery of functioning software. The Agile methodology relies on rapid and frequent deliveries of working software that allows teams to respond to changes in requirements, rather than planning everything in advance. The components are adaptive planning, evolutionary progress, and collaborative rewards. The process covers the full software development cycle, from requirements to deployment and maintenance.
Advantages:
Reduced time to market — adaptability and constant communication make the final product as clear as possible, which reduces the time for its testing.
Creativity — using a variety of minds and constantly solving complex problems leads to the creation of innovative approaches to product testing.
Meeting the requirements of the customer and the expectations of the end user — the continuous communication of developers, testers, businessmen and users leads to the creation of an ideal hit on the goals of the product.
Changes even at late stages — this can be achieved as painlessly as possible due to the fact that the testing process is divided into sprints, as well as through communication within the team (each member knows the product well).
Quickly identifying wrong approaches and making quick decisions — this can be achieved through daily communication of team members.
Disadvantages
Creating stress fear of uncertainty — team members can be frustrated knowing that the changes can be made during the last stages of development;
Degradation of quality — Agile is fast and has a large volume, so the quality may become lower.
Long time to implement — Agile is a complex methodology that can be a problem;
Stress for customers — not everyone is ready for daily meetings and problem-solving that they hoped to delegate to others.
Strong motivation of employees and professionalism at the same level are required — QA Engineers must keep up with each other in a rapidly changing, flexible software testing process, and this is difficult to achieve with insufficient motivation and qualifications of at least one of the team.
In my article you’ll find more information about Agile
Agile: Tribute to Fashion or Effective QA Management?
The Agile Methodology is a software development methodology that is implemented to increase software development speed and agility. Touted to be good for the software industry, it is not a novel idea.
https://www.linkedin.com/pulse/agile-tribute-fashion-effective-qa-management-victor-malyavko/"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Sasha Andrieiev,2020,"The core value of Agile development is that it enhances the quality and predictability of the team workflow. It helps to get a quicker return and improves the quality of responsiveness. Scrum and Kanban are the two most widely used Agile methodologies.
Agile software development is based on iterative development. All the requirements and solutions are being developed only through the collaboration between self-organizing cross-functional teams.
About the advantages:
Agile methods or Agile processes help to streamline the project management process;
They are based on such key points as encouraging procurement and adaptation, leadership philosophy, teamwork, and self-organization;
The rapid delivery of high-quality software is facilitated by accountability to best design practices;
This business approach connects development with customer needs and company goals.
Drawbacks of agile methodologies:
More time and commitment. Testers, customers, and developers must constantly interact closely with each other. All participants must be prepared for quick testing and logout at each stage. This guarantees the quality of the product, meanwhile, the team’s workflow will become longer and more difficult;
Greater demands on developers and clients. This system requires a great return on each of the participants to the entire project to ensure success. Customers need to be trained to facilitate product development. Even a minimal lack of customer involvement will affect the quality and success of the software.
If you are still thinking about whether to implement Agile, here is an article on how to implement the most common agile project metrics."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Oliver Dolan,2017,"The agile methodology is based around the agile manifesto, the original definition can be seen here: Principles behind the Agile Manifesto
If you navigate through the principles you will see some common themes:
The stakeholders needs are prioritised
To achieve this we must decide who the stakeholders are
Oliver Dolan's answer to Who are your stakeholders in Agile projects?
As well as capture the stakeholders requirements effectively
Oliver Dolan's answer to How do you define a ""feature"" of a software precisely and effectively?
Oliver Dolan's answer to How do I write good user stories and acceptance criteria for web based project?
The management teams get more flexibility in prioritisation and this increases there feeling of engagment
Deliver to stakeholders quickly to obtain feedback
See my answers here on how to ensure you are delivering in an agile manner
Oliver Dolan's answer to How do I get started on a agile project management?
Oliver Dolan's answer to What are the steps in creating a software?
Oliver Dolan's answer to How we can increase corporate agility?
The delivery times are squeezed which aids to identify weak corporate processes
Information learned on the way is visible and accounted for in future plans
Continuous improvement is a big focus using PDCA cycles. (plan, do check & act)
As for the advantages and disadvantages these are often
Subjective
It depends on your view point and where in the organisation you are situated.
Developers tend to favour agile
Project managers or team leaders not so much as there role and importance can become eroded.
Industry specific
Depending on industry agile methodologies will have varied applicability
It was designed for software so its heavily applied in software engineering
We are only now in 2017 starting to see other industries adopt some of the ideas.
Implementation specific - This is huge, infact this might be the most important
Who is commanding the implementation
Obviously if someone is making foolish decisions at a high level of management it can be seen in the results of the business.
What are the best ways to be an effective leader? I have recently been elected the leader of an undergraduate professional marketing organization with about 300 active members.
What is implemented
SCRUM
https://www.quora.com/topic/Scrum-product-development/faq
Oliver Dolan's answer to What is the best way to apply SCRUM principles for an open source project?
Kanban
https://www.quora.com/topic/Kanban/faq
SAFE
Oliver Dolan's answer to What is your review of Scaled Agile Framework (SAFe)?
Oliver Dolan's answer to What is SAFe?
LESS
Large Scale Scrum (LeSS)
Others are listed here:
Agile software development - Wikipedia
How it is implemented
The implementation is very important and will ultimately determine your success. Please see my answer for how I am currently managing my agile projects.
Oliver Dolan's answer to How do I get started on a agile project management?
I also think that the project manager or leader is one of the most important roles when the agile delivery method has been decided.
Oliver Dolan's answer to What core technical skills are needed by an Agile Project Manager?
As for the advantages and disadvantages I have decided to keep this simple and to the point so as to answer the question as best as possible.
Advantages
Faster cycle times
Speed to market
Improving quality through continuous improvement
Enhanced visibility of what teams are doing
Easier to react to business changes
Reduced risk due to greater visibility and more adaptability
Customer satisfaction due to being more involved and listened to
Product market fit becomes more probable due to feedback cycles
Teams often like the process
Teams start performing better due to PDCA cycles
Highlights problems early
True prioritisation as stories are often small enough to do prioritisation effectively
Seeing the benefits of work undertaken sooner
Team feels more united due to team commitments and cross functionality
It allows for identification of wasteful processes
Faster feedback from the stakeholders
Stakeholders are more engaged as they are more likely to get what they want and change it before using too many resources.
Higher quality due to squeezed delivery times
More transparency throughout the value stream
Less documentation to maintain
Higher chance of working solution due to automated acceptance criteria testing
Maintenance is easier
Disadvantages
Oliver Dolan's answer to In a nutshell, why do a lot of developers dislike Agile? What are better project management paradigm alternatives?
Stories can be hard to slice
Customer expectations on quality can be damaged with MVP approach
Micromanagement
Lots of meetings
Agile projects can be hard to agree contractually
Stakeholder dissatisfaction with priorities
The teams doing the work can feel dis empowered
Lack of understanding of the agile methods in depth at different corporate levels
Yearning for the past of agreed specifications and budgets
Lack of clarity on what will be available when
Backlog can be difficult to prioritize
It can also become huge
The terminology can be confusing
Story points, velocity, burndown, value stream etc..
It can abstract the organisation from the team
Listening to the customer is not always in the best interest of the business
It can be hard to distinguish the methodology's and when should be applied.
It is not a magic bullet to solve everything and can be oversold
It can reduce employee morale and satisfaction
It can dis empower individuals
It can be perceived as cultist and egocentric
Scaleability can be difficult to get correct
There are lots of things I could write but these are the main ones I can think of right now.
Hopefully it helps
Good Luck
Oliver Dolan!"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Ashwin Chandrasekaran,2016,"Agile shifts the focus of project management from cost and schedule to delivering value to customer.
How is it done?
Customer Collaboration - All Agile methods encourage customer involvement in all stages of a project. This makes frequent reviews and feedback cycles possible
Incremental Delivery - By developing and delivering features in short cycles, the customer can see the evolution of the final product. This makes course corrections possible in a regular fashion rather than at the end of a project
Continuous Improvement - Using various practices like Retrospective meetings, Agile enables the team to look back frequently and adjust the process as needed
Team Ownership - Agile encourages the team to own their plan, design and commitment to delivery. The responsibility of meeting the project goals shifts from project manager to developers
Quality Focus - Short iterations don’t mean the absence of testing. Agile methods enforce every increment to be well tested
Unambiguous Requirements - Using techniques like User Stories and Epics/Themes, Agile makes the creation and understanding of requirements much easier than traditional BRMs
In short, Agile is a different and more pragmatic way to approach project management."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Justin Jackson,2014,"Agile actually defines a group of methodologies that share a similar philosophy (originally defined in the 2001 Manifesto for Agile Software Development).
A core tenet of agile development is to work in short iterations, or sprints. After each sprint, the team should have produced a small new iteration (incremental release). At this point the team can also re-evaluate it's current direction, and make changes if needed.
Other characteristics common to most agile methodologies:

Specs (or requirements) are written simply, often in the format of a user story on a card:
(this screenshot is from Sprint.ly)
Participation of stakeholder (or product owner) in the process
Finish work on one feature before moving on to the next
Lots of team collaboration and cooperation, and strong sense of ownership
Testing is done throughout the process
Types of agile methodologies
Scrum - one of the best known agile methodologies. Illustrated Scrum reference PDF
Lean - adopts lean manufacturing principles for software development. Lean Software Development
Kanban - there are 3 core characteristics: visualize your workflow, limit work-in-progress, prioritize backlog. People following Kanban, will often use a Kanban board that looks like this:
(Blank Kanban board with 3 columns: Backlog, Current, Complete. [Source])
Extreme Programming (XP) - controversial agile practice. Agile Software Development: What is extreme programming?"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Jessica Wood,2020,"Hi,
Agile is the methodology where the software project is broken into several small stages and these are managed by a team with constant collaboration and continuous iteration and improvement.
In simpler words, it is the iterative approach that effectively focuses on customer feedback, constant changes, collaboration, with rapid releases.
Agile effectively targets software development and follows the shift-left principle. Also, it focuses on functional and non-functional readiness.
There are several benefits that are achieved for enterprises with agile. The most important benefit is that it offers shorter development cycle with enhanced detect detection.
Along with the advantages, there is even other side, i.e. the challenges. Yes, Agile even lays down challenges that should be considered while practice agile testing.
The most important challenge with agile methodology is that it is difficult for the teams to be more productive every time.
Thanks!"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Keshav,2021,"Agile methodology is a project management system that relies on incremental development. Each iteration consists of two- to four-week sprints, where each sprint's goal is to build the most important features first and come out with a potentially deliverable product. More features are built into the product in subsequent sprints and are adjusted based on stakeholder and customer feedback between sprints. Whereas other project management methods emphasize building an entire product in one iteration from start to finish, agile scrum methodology focuses on delivering several iterations of a product to provide stakeholders with the highest business value in the least amount of time. Agile methodology has several benefits. It encourages products to be built faster since each set of goals must be completed within each sprint's time frame. It also requires frequent planning and goal setting, which helps the scrum team focus on the current sprint's objectives and increase productivity.
The greatest benefit of agile methodology is its flexibility. With the sprint-based model, the scrum team typically receives feedback from stakeholders after each sprint. If there are any problems or changes, the scrum team can easily and quickly adjust product goals during future sprints to provide more valuable iterations. This way, stakeholders are happier because they get exactly what they want after being involved every step of the way.
Advantages-
Superior quality product: In Agile project management, testing is an integrated part of the project execution phase which means that the overall quality of the final product is greater. The client remains involved in the development process and can ask for changes depending on the market realities. Since Agile is an iterative process, project teams keep on learning and growing with time and continue improving.
Customer satisfaction: In Agile, the customer is always involved in the decision-making process which leads to greater customer retention. In the traditional framework, the customer is only involved in the planning phase and does not influence execution which affects flexibility and adaptability. By keeping the customer in the loop and making changes according to their feedback, you deliver value to the customer and ensure that the final product is truly according to their requirements.
Faster ROI: The fact that agile development is iterative means that the features are delivered incrementally. Therefore, benefits are realized early while the product is in the development process. Long delivery cycles are often a problem for businesses, particularly those in fast-moving markets. Agile means fast product releases and the ability to gauge customer reaction and alter accordingly, keeping you ahead of the competition.
People and interactions are emphasized rather than processes and tools. Customers, developers, and testers constantly interact with each other.
A result-oriented team: Agile fosters an open culture of idea exchange and cooperation within teams. It spurs lively team collaboration, boosts morale, and clearly defines all the roles and responsibilities. Each and every member is in-the-know when it comes to pressing tasks and priorities.
Disadvantages-
Active user involvement and close collaboration are required throughout the development cycle. This is very engaging, rewarding, and ensures delivery of the right product. It’s the fundamental principle in agile that ensures expectations are well managed. And since the definition of failure is not meeting expectations, these are critical success factors for any project. However, these principles are very demanding on the user representative’s time and require a big commitment for the duration of the project.
Requirements emerge and evolve throughout the development. This creates the very meaning of agile – flexibility. Flexibility to change course as needed and to ensure delivery of the right product. There are two big flip sides to this principle though. One is the potential for scope creep, which we all know can create the risk of ever-lasting projects. The other is that there is much less predictability, at the start of the project, and during, about what the project is actually going to deliver. This can make it harder to define a business case for the project, and harder to negotiate fixed-price projects. Without the maturity of a strong and clear vision, and the discipline of fixing timescales and trading scope, this is potentially very dangerous.
Agile requirements are barely sufficient. This eliminates wasted effort on deliverables that don’t last (i.e. aren’t part of the finished product), which saves time and therefore money. Requirements are clarified just in time for development and can be documented in much less detail due to the timeliness of conversations. However, this can mean less information available to new starters in the team about features and how they should work. It can also create potential misunderstandings if the teamwork and communication aren’t at their best, and difficulties for team members (especially testers) that are used to everything being defined upfront. The belief in agile is that it’s quicker to refactor the product along the way than to try to define everything completely upfront, which arguably is impossible. And this risk is managed closely through the incremental approach to development and frequent delivery of products.
Testing is integrated throughout the lifecycle. This helps to ensure quality throughout the project without the need for a lengthy and unpredictable test phase at the end of the project. However, it does imply that testers are needed throughout the project and this effectively increases the cost of resources on the project. This does have the effect of reducing some very significant risks, that have proven through research to cause many projects to fail. The cost of a long and unpredictable test phase can, in my experience of the waterfall, cause huge unexpected costs when a project over-runs. However, there is an additional cost to the project to adopt continuous testing throughout.
Frequent delivery of the product and the need to sign off each feature as done before moving on to the next makes UAT (user acceptance testing) continuous and therefore potentially quite onerous. The users or product owner needs to be ready and available for prompt testing of the features as they are delivered and throughout the entire duration of the project. This can be quite time-consuming but helps drastically to ensure a quality product that meets user expectations.
Finally, common feedback is that agile development is rather intense for developers. The need to really complete each feature 100% within each iteration, and the relentlessness of iterations, can be mentally quite tiring so it’s important to find a sustainable pace for the team."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Mohanakrishnan Gopalakrishnan,2024-06,"Let’s try answering this question through a parallel - of building a house in place of software development. Mapping the answers to the software domain should be straightforward.
Agile is like moving into a house while you are building that house. At the outset this might sound crazy, but this has many advantages and of course disadvantages.
Pro : You don’t have to wait for a couple of years to move in, you start enjoying the house early in the development cycle. Also you save on rent while building the house. Con: In the initial phase the house will be quite unliveable, you have to live through that. Also you are more involved in evolving the house on a day to day basis. This takes extra time from you compared to when you totally outsource the building work based on an approved plan.
Pro: You don’t have nasty surprises in the end - you keep finding and fixing issues and discomforts as you keep building
Pro: You don’t need to have a grand plan in the beginning to start building. If you are not a grand plan person, this is your cup of tea. You start discovering what you need as you start living in the house and you keep building the top priority features at that point. This helps you discover the needs as you go by. Con: If you are a grand plan person, you would hate this. Also, if you are really good at dreaming up the ideal house, and won’t have to make much changes to that plan, you will have a more optimal design if you start with the grand plan.
Pro: As a person living in the house, you are able to provide continuous, lived-in feedback every small change that is getting added to the house. This is a million times better than the kind of feedback you would be able to give looking at engineering drawings of the house. Con: If you are too fickle minded, you might keep changing your requirements and you might end up spending much more on scope creep than otherwise."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Anand Kumar,2021,"Agile methodology, in simple terms, means a guidance path for the companies to work efficiently. The idea is to adapt to the change instead of clinging to your plan. It’s about being responsive to the changing market and the customers, adapt and grow.
Yes, just like the word Implies, it can help your work progress quickly and easily. It follows simple four ideas:
Individuals and interactions over processes and tools: Humans perform software development; therefore the quality of interaction between them is vital. Though tools are an important part of software development, focusing more on teamwork regardless of the tools the team uses makes great software.
Working software over comprehensive documentation: For users and coworkers, documentation can be a great resource. However, software development aims to build software that delivers business benefits rather than vast documentation.
Customer collaboration over contract negotiation: The software development team communicates with customers frequently. By listening to and getting their feedback, the team will understand what stakeholders want.
Responding to change over following a plan: In software development, changes are a reality that your software process should reflect. A project plan should be flexible enough to change as the different cases demand.
Now moving on to Agile software development, the best way to explain the process is Divide and Rule. Not the British way of ruling countries, but the humane way of making the work process more efficient.
It works by breaking projects down into a little bit of user functionality, prioritising them, and then delivering them continuously in 2-4 cycles called Sprints or Iterations. In one short Sprint (2-4 weeks), a full development cycle is performed. It includes analysis, design, coding, testing, and product release.
At the end of each Sprint, developers release a working software solution, and the performance is evaluated by the customer. The lessons learned in each Sprint are captured in retrospectives and used in the next iterations.
Advantages
High-quality product
Reduces technical debt
Increased adaptability
User-focused testing
Creates total alignment and transparency
Reduced risks
Increased customer satisfaction
Improves time to market
Early and predictable delivery
Better project control
Disadvantages
Like everything, agile also has its downside. But unlike others, these can be easily mitigated.
It will be challenging to set KPIs because of the see-as-we-go nature of the program.
The documentation in this process doesn’t start from the beginning, but is mostly done just in time before the final output. Hence the resulting document will be less detailed.
The minimal planning at the beginning can easily get sidetracked but can be rectified with sufficient documentation or a clear vision of your final product."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Emily Hilton,2022,"Hello,
Let us discuss about agile methodology and the advantages and disadvantages of agile methodology:
An agile methodology is a project management practice that promotes a collaborative, iterative and incremental approach to project management.
It is said to be agile because it estimates both your initial needs and those generated by future changes.
Agile Methodology is a process of software development (such as other software development methodologies – waterfall model, V-model, iterative model, etc.), however, the Agile development model is also a type of incremental model.
Software develops in incremental, rapid cycles. In English, Agile means ‘the ability to move quickly and easily’ and respond to change rapidly – this is an important aspect of Agile software development.
Advantages of Agile Methodology :
In Agile methodology the delivery of software is unremitting.
The customers are satisfied because after every Sprint working feature of the software is delivered to them.
Customers can have a look of the working feature which fulfilled their expectations.
If the customers has any feedback or any change in the feature then it can be accommodated in the current release of the product.
In Agile methodology the daily interactions are required between the business people and the developers.
In this methodology attention is paid to the good design of the product.
Changes in the requirements are accepted even in the later stages of the development.
An Agile/Scrum approach can improve organizational synergy by breaking down organizational barriers and developing a spirit of trust and partnership around organizational goals.
Disadvantages of the Agile Methodology :
In Agile methodology the documentation is less.
Sometimes in Agile methodology the requirement is not very clear hence it’s difficult to predict the expected result.
In few of the projects at the starting of the software development life cycle it’s difficult to estimate the actual effort required.
Because of the ever-evolving features, there is always a risk of the ever-lasting project.
For complex projects, the resource requirement and effort are difficult to estimate.
If you want to make a career into agile scrum foundation then I personally recommend you to do agile scrum foundation certification GSDC Certification
If you're looking for a better career I personally suggest to go for agile and scrum foundation certification training online
If you are wondering where to begin this journey? Then you should check the agile scrum certification
As I have one reference for a agile scrum foundation certification I found one course on google they provide certificates
The certification cost is also affordable here.
The agile scrum foundation certification cost $200. This certification is from GSDC. You can check the syllabus on their official websites.
Cost : $200
Location: Online
The GSDC certification bodies provide courses online and it is valid and accepted globally.
Many of the reputed company employees have done this courses from here and give good responses
To get this certification you have to pass the agile scrum foundation certification Exam from GSDC Institution.
GSDC is globally accredited Agile Scrum Foundation certification validates your knowledge in Agile methodologies and Scrum practices.
The purpose of agile and scrum certification qualification is to confirm that a candidate has sufficient knowledge and understanding of the benefits of this certification.
Grab our year ending delight just in $ 200 and see yourself upskilled before 2022 hits you hard!
Hurry up! This limited period offer is valid till the 31st of this month only."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Anand Singh,2022,"Hi,

Agile Model/Methodology is one of the procedure followed while software development and testing for the products. In short, It is a concept being used in SDLC(Software Development Life Cycle). Agile Methodology is an iterative and incremental approach, where the features keep on adding and as a company should ensure it is flexible enough to handle it and deliver it within a short period of time to gain customer's satisfaction.

Examples of approaches to agile model are:
1) Scrum
2) Kanban
3) Extreme Programming (XP)
4) Feature Driven Development (FDD)
5) Adaptive Software Development Method(ASDM)
In most of the companies providing 'software qa services are using ""Scrum"" and ""Extreme Programming"" methodlogies
It is very common now a days that most of the Software companies follows agile methodology. I have consolidated advantages and disadvantages below:

Advantages/Principles of Agile Method:
1) Product release process will become very fast
2) Requirement changes are allowed at any stage of Agile Model
3) Main Goal is Customer's Satisfaction
4) There will be a good communication between Customers, Business Analyst, Developers and Test Engineers
5) It is a very Easy Model to adapt
Disadvantages of Agile Model:
1) There will be less focus on Designing and Documentation as it plays a major role in Waterfall model.
2) Final product is not released first
3) Long-term projects suffer due to incremental delivery.
4) Difficult to handle
5) Sign-off at every phase is required to allow developers to move forward.
Hope the above information will help you.
Thanks,
Anand"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Mike Fontner,2020,"One of the disadvantages - that most people are not aware of in the beginning - is that it puts all responsibility much further down in the “food-chain”.
The rule most prevalent I found so far is this one: “You build it, you run it!”
Seems to be simple and logical at the first glance. True it IS simple and logical.
AND it has a TON of implications most managers, expecially in the upper management are absolutely not aware of.
For example: If I’m the one running it, then I also want to know what happens while the system is under production. I also want / need to know how the system is fairing under test. I also … ! You get the drift.
In agile, High Quality DevSecOps is imperative to do your job successfully! No manager can tell you exactly what to do when and how, because they don’t know what you solved how and where.
The whole responsibility is on the team. Therefore the team has to decide what works best … for the teams responsibilities.
In a working agile environment (emphasis is on working!) the role of a manager is not to tell people what to do but to make sure that the team can do what it has to do in order to fullfill it’s responsibilities! That also means to clear obstacles in whatever form they appear, make sure different departments work smoothly together, make sure the proper talent is represented in the team, coaching your people to get the proper education they need if necessary, etc. pp.
The pressure, the responsibility and also the lack of someone else to blame is not for everyone though. You need properly geared people as well who apprechiate such an environment, because nobody will tell you what to do when and how. That’s YOUR (!!) repsonsibility too.
And that’s just one aspect.
A switch to agile is so deep and brings such profound changes in the whole culture, that old silos and management structures within the whole company will either be destroyed in the process or the agile will fail. Because you cannot have only a small agile thingie somewhere in the company while the rest goes “unspoiled”.
It’s an all or nothing decision.
Yes, IF agile is truly implemented, you can reap a LOT of benefits!
BUT on the road to fully get a grip, figure out what works for you and what not, million things can go wrong and nothing will be achieved. Then agility is blamed. It’s not the system though. It’s the change, that people resisted."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Vikash Kodati,2015,"That is a broad question. I am sure you will find the specifics online but I ll help you understand the broader stroke. Its a structure that helps realize incremental business value quickly (allowing course corrections) and also lets each role consume the information it needs. The process itself is very flexible and leaves a lot of space of interpretation because of which there are more ""Agile-buts"" (look it up) than pure Agile teams. The important part is for all the team (Developers, BAs, Scrum Master, Business teams, Product Manager) to agree upon a common ground rather than trying to following something that is carved in stone.
We follow a rule that an agile team (developers mainly) should not be larger than what 2 large pizzas can feed :)."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Szabi Kisded,2019,"The Agile Method is a particular approach to project management that is utilized in software development. This method assists teams in responding to the unpredictability of constructing software. It uses incremental, iterative work sequences that are commonly known as sprints.
Advantages of Agile Methods are:
1. light weight
2. They are people based rather than plan based
3. It promotes interactions between individuals over processes and tools
4. Developers working software rather than comprehensive documentation
5. Customer collaboration over contract negotiation
6. Responding to change over following a plan"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Jaimi McEntire,2017,"The major benefits are that it makes your development more predictable, and there are always work items available, and work items have been recently discussed, so there is less misunderstanding, and constant review to make sure that the development effort matches the business needs.
The major disadvantages are that a sprint is uneven. The load is not balanced. At the beginning of a sprint, the QA team does not have enough work, at the end of the sprint, the development team is winding down, and the QA team has too much work. There are of course ways to address this - the development crew tests at the end, and the (canonical) suggestion is for QA to work on “test scripts” at the beginning. But these have their own issues. Because a team has to bid to complete items, and the sprint is seen as unsuccessful if they do not complete the items, there is a tendency to underbid and sandbag (letting the work fill the time), leading to a decrease in productivity. Even though this is an effort to give developers more say in what and how they work, the constant review and discussion gives some developers the feeling that they are being micro-managed.
We’re an agile team, and we’ve addressed all these issues in various ways, and overall we’re more productive than we were before the switch to agile."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Noah Jonas,2022,"In the modern digitalized world, the majority of software development companies follow agile methodology for achieving a more seamless and efficient development process. The agile software development methodology is different from the waterfall as it puts focus on developing software in an incremental and rapid cycle. Thus, for a project which involves repetitive in-between feature additions by the client, this particular methodology can ensure enough flexibility to complete it and deliver it within the specified deadline.
Advantages of opting for agile development methodology:
Increase internal interactions between testers, developers, and business people.
Shifts in the client's needs can still be taken into consideration even at the later stage of development.
The delivery of software is continuous under the Agile methodology.
Good product design is the top priority.
Flaws of agile software development methodology:
The resource requirements and effort required for complicated projects are difficult to estimate.
It is impossible to estimate the actual work required in a few projects at the beginning of the software development life cycle.
Challenge to predict the final outcome as the requirement keeps changing over time.
To know more about agile software development you can read the blog.
Agile Software Development: Best Practices, Challenges, and Solutions - Apptread
Agile methodology in software development projects helps in assuring the timely delivery of highly enhanced software solutions and 100% client satisfaction.
https://apptread.com/blog/agile-software-development-best-practices-challenges-and-solutions/"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Emily Hilton,2022,"Hello,
Let us discuss the pros and cons of Agile methodology from the following points:
The Pros and cons of Agile methodology:
There must be a compelling reason to use the Agile methodology beyond the notion that it’s the ‘latest and greatest
Agile offers flexibility
Agile empowers the team
Time to market is accelerated
Learning is encouraged and embraced
More opportunities for creativity exist.
Product Gets to Market Faster
Better Communication
Immediate Feedback
Embracing Uncertainty
Less Defective Products
In Agile methodology the delivery of software is unremitting.
In this methodology attention is paid to the good design of the product.
Changes in the requirements are accepted even in the later stages of the development.
Customers can have a look of the working feature which fulfilled their expectations.
If the customers has any feedback or any change in the feature then it can be accommodated in the current release of the product.
In Agile methodology the daily interactions are required between the business people and the developers.
Cons of an Agile Methodology:
The outcome and timeline are less predictable
The customer (product owner) must invest time in the project
Documentation is not a deliverable of Agile
A trust relationship must exist between members of the team
Sometimes in Agile methodology the requirement is not very clear hence it’s difficult to predict the expected result.
In few of the projects at the starting of the software development life cycle it’s difficult to estimate the actual effort required.
If you're looking for a better career I personally suggest to go for agile tester certification
If you are wondering where to begin this journey? Then you should check the certificate in agile tester certification
As I have one reference for a Agile Tester Foundation Certification I found one course on google they provide certificates
The certification cost is also affordable here.
Many of the reputed company employees have done this courses from here and give good responses and rated this certificate as the best
To get this certification you have to pass the GSDC Institution certifications.
GSDC's certification is aimed towards sharing a deep understanding of all the advanced l and d certification
The purpose of agile tester certification qualification is to confirm that a candidate has sufficient knowledge and understanding of the benefits of this certification."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Nabarun Mondal,2021,"Agile is NOT a methodology. It is a mindset.
Team must deliver faster, simpler, workable code.
The only success criterion of agile is how much time saving it had.
If using other mindset it used to be delivered in X hours,
and Agile can do it in 0.1X hours, agile mindset has own.
Anywhere it is not possible to do, agile is at disadvantage. That includes every possible “serious” Engineering domain.
Agile will not work, does not work anywhere serious Engineering is required - build engine of SpaceX rocket.
If someone is actually developing a kernel - even then I do not think Agile works."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Agilemania,2023,"As with other software development approaches (such as the waterfall model, the V-model, the iterative model, etc.), the Agile development model is a methodology for creating software, in addition to being a form of agile method. Software is created in quick, incremental cycles. Agile is an important component of Agile software development and signifies ""the capacity to move swiftly and effortlessly"" and adapt to change quickly in English.
Advantages of Agile Methodology :
In Agile methodology the delivery of software is unremitting.
The customers are satisfied because after every Sprint working feature of the software is delivered to them.
Customers can have a look of the working feature which fulfilled their expectations.
If the customers has any feedback or any change in the feature then it can be accommodated in the current release of the product.
In Agile methodology the daily interactions are required between the business people and the developers.
Disadvantages of the Agile Methodology :
In Agile methodology the documentation is less.
Sometimes in Agile methodology the requirement is not very clear hence it’s difficult to predict the expected result.
In few of the projects at the starting of the software development life cycle it’s difficult to estimate the actual effort required."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,JOY OF PERFORMING,2023,"Running a tech team is not easy. When you are new, you cannot just decide to adopt the agile methodology. You must understand your business priorities and critical goals. You have to prepare your team and the customers for this.
Implementing agile practices takes time. Being agile does not mean doing everything fast. It's about doing the right things at the right time more accurately. People have to settle in and allow room for growth as they go.
Pros & Cons of working with agile methodology
Don't think there is a fixed plan for agile practices. It depends on other factors like your team size, projects, clients, resources, etc.
Below are some commonly seen pros and cons of using the agile framework.
Pros
Immediate feedback on the product - Users directly give feedback to the development team.
Elimination of silos - Team members collaborate actively.
Can help you get highly competitive - Software industry is aggressive. It is helpful to have efficient product improvements.
Team gets more autonomy - Agile group gets to take risks and experiment.
Working software versions are tested - Team tests real software with users, not some plan.
Efficient collaboration
Transparency in product enhancement - Users can see the past product roadmap and each improvement.
Lean and productive product development - Cost-cutting and efficient production.
Cons
Lack of purpose - The tasks may be pretty clear, but the overall purpose behind the work may not be communicated and understood.
Can get less holistic - People can get too involved in the processes that they may forget critical priorities or company values.
Easy to misinterpret the methodology - Teams can mistake agile for faster deliveries rather than focusing on quality.
Project management can get messy - If not managed well.
Professionals may get less time to grow - People may get busy and not take time to reflect and analyze their performance.
Can go off-track from critical business goals - Focusing too much on agility may lead people to derail from main goals.
It's always good to work more efficiently, but it all must move your business forward. Be clear about your priorities.
The OKR framework is a very effective methodology to allow your team to focus on critical business priorities. Talk to our OKR experts to know how it will enhance your business.
Got any questions? Please comment."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Aditya Pratap Bhuyan (ଆଦିତ୍ୟ ପ୍ରତାପ ଭୁୟାଁ),2023,"There are many advantages of Agile methodology for project management. Agile methods can help teams manage work more efficiently and do the work more effectively while delivering the highest quality product within the constraints of the budget.
While Agile teams work well as a unit and can react better to the inevitable changes that come with most projects, there is one facet of project management that Agile teams often overlook: Visual management.
The Benefits of Agile Development
With visual management, Agile teams can enhance their ability to work effectively by presenting the data in a visual way rather than in list-form on a spreadsheet or in a wiki. This way, it is easier to comprehend project details and to manage change.
Major benefits of visual project management for Agile include:
Visibility of project details
Increased team efficiency
Ability to adapt to changes
Ability to scale
Let’s take a closer look at some key characteristics of an Agile team and explore how visual management can help.
Agile Characteristics
Agile is a method for getting the work done that really matters. For example, instead of spending hours or days building out a detailed project plan that may or may not match the project’s execution, an Agile team would begin with a small portion of work, assess progress, then continue down the path once enough feedback has been gathered to indicate they are on the right path.
Principles of how to work as an Agile team are laid out in the Agile Manifesto, a set of guidelines that were developed by software developers to establish expectations around how to operate. These principles place:
People before processes and tools
Working software over documentation
Collaboration over negotiation
Change management over project planning
One of the primary areas of focus for Agile teams is the ability to work iteratively. Iterative work is completed in short cycles with a small portion of the overall project done at one time.
The main benefit of iterative work is that less work gets wasted. That is, when something changes about the project, the amount of re-work that must be done is minimized. In other words, teams don’t have to go too far down one path, only to find out they must backtrack and start all over again.
The theme of iterative work extends beyond the project level and can be applied by breaking down any amount of work into manageable tidbits that can be clearly represented visually.
One rule of thumb when practicing visual management with iterative work is that all work should be broken down as much as possible, so the team can see the work, prioritize the most important items, and divide and conquer.
It is not uncommon for software development projects to take months or even years to complete. During a project’s timeline, changes can occur either in technology or with the business requirements.
Changes to the business requirements of a project usually mean the project will take more time, and more time means more cost. Because change is the only constant when it comes to project management, incremental work methods like Agile are necessary to help control a project’s final cost. And in the software world, costs can skyrocket quickly and are often a primary driver of a company’s decision on whether to move forward with a project.
Team efficiency
Agile teams are known to be highly efficient at getting work done. Because Agile teams share a collaborative culture, efficiencies tend to have a ripple effect.
Look for an Agile solutions provides insights into delivery trends to remove bottlenecks and adapt workflow processes for improved productivity.
When everyone agrees on what the most important work is, and when each person can focus on the most important work, the entire team moves forward in unison, falling into steady cycles of work production and product releases, which contributes to the predictability of Agile projects.
As you can see by the relationships between efficiency, collaboration and predictability, the characteristics of an Agile team are interconnected so that one characteristic feeds into the next, forming a holistic set of habits that can be described as Agile.
Adaptability of a software development team
Project managers cannot see into the future, but they can impact how easily a team is able to adapt to changes when they occur. The ability to adapt to change is a cornerstone of Agile project management and is one of the key advantages of Agile methodology.
When teams put their time to good use, they can deliver what the stakeholder wants without overspending. This not only makes stakeholders happy, it makes project teams happy to know they have used their skills to deliver a quality product.
Scalability of Agile projects
Time and cost are the main factors in determining whether a company will go forward with a project.
How long will the project take?
What will it cost?
Will it be worth the initial investment to get this project done?
What else could be done with the same resources and team members that may hold more value?
The last question is the most important one related to this article, because it touches on a key point: The larger the company, the greater the need for an Agile project management system.
How best to utilize people and resources is a question that comes up constantly, especially for companies that cannot predict the frequency of projects yet to come. As companies continue to struggle with having too much work and not enough people to do it, new ways of scaling projects have emerged.
Driving agility across teams requires a consolidated view of work priority and project status, whether in the same room or distributed across the globe.
Productivity analyses can help teams understand how the same amount of people can work smarter and produce more without investing in additional resources. Conversely, companies must take care not to commit too many resources to a project only to find the value does not justify the costs associated with getting it done.
Instead of evaluating whether their team members are focusing on the work that holds the most value, some companies skirt the issue by requiring team members to work longer hours. While this may be a short-term solution for a sudden, one-time increase in workload, overworking team members can quickly take a toll, resulting in lowered team morale and decreased productivity.
A key advantage of Agile methodology is that it is a scalable project management tool.
Not only can the principles of Agile be applied across multiple functions within a project team, they can also be applied to multiple project teams and leveraged by project management offices (PMOs) to analyze productivity and identify areas of improvement.
Using Agile project management helps companies pool resources and assign the right people to the right projects according to need or priority.
Predictability for Agile project managers
Companies measure the value of a project in terms of cost and returns. If the returns from a project outweigh the cost, then a company may decide to go forward with that project. But if the cost of a project is unknown, as it is with many projects these days, predicting the outcome of that project in terms of success becomes almost impossible.
For this reason, predictability in projects is important. One advantage of Agile methodology is that when companies take the time on the front end to plan a project using Agile techniques, they can estimate the cost of a project to determine whether they should continue.
There is no single characteristic of Agile that makes it work so well to manage projects. Instead, it is the holistic practice of Agile that makes development teams successful. When project teams choose to practice Agile, they are practicing a concept that is still evolving, making this one of the best ways to work in a culture of continuous improvement.
Source : PlanView"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Sachin Chauhan,2021,"Agile is B.S.
It's has no advantage, doing work in iterations is a sign of the incompetency of developer and more over the unclear goal of the client.
To avoid these two issues, they have created very cleverly this so called Agile methodology, which if you look closely you will find that it complicates things and kills innovation.
This is just non-sense created by some MBA grads.
This method helps everyone except the people who actually do the damn job.
Purely managerial oriented process.
It is a poor attempt to make demeaning and scut work interesting.
In simple terms, suppose you order a burger at McDonald's. Now, instead of waiting for it patiently outside, you go into the kitchen and follow the process till a bigger is finally made. Just imagine, the ruckus you are gonna create in the kitchen.
Now, you are the client and kitchen workers are the developers. The person at the counter is the manager just facilitating the client to have his way."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Robert Merrill,2015,"Agile and its various flavors have been thoroughly defined, so I have nothing to add there.
I think agile's decisive advantage is that it is much more forgiving of estimation errors. When we commit to projects, we do so with the belief that:
The results will be worth more than they cost, and
Cost (nearly always) and time (often) won't exceed constraints.
The go/no decision rests on estimates of cost, duration, and value. These estimates have large (2x-4x or more) ranges, and additional up-front work often doesn't reduce these ranges very much.
By putting the estimation uncertainty in the scope of what will be delivered, and maximizing the value of that as we go, agile eliminates nearly all estimation-related risk."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,The Next Tech,2022,"In API tests, developers use load testing to understand how an API performs with the increased number of calls. This test helps the development team to agree on whether the product can meet certain real-life expectations under a high load.
You can call it “Security Test 2.0” because this process is the next level of security testing. In this type, the testers analyze different attacks on API from an outsider’s point of view. This helps them to design better security for the product.
Security Testing gives the Dev team an overview of how the API will perform against cyberattacks. The process tests an API’s encryption methods and checks how it behaves with permissions and access controls.
The general idea of UI testing is to check whether the API or other integral parts’ user interface is running correctly. In terms of the codebase, UI testing is not a significant part of API testing. However, this process helps measure the health and efficiency of the app’s front-end and back-end."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Aadarsh Patel,2023,"Advantages of Agile Project Management
You can deploy software quicker, so your customer can get value sooner rather than later
You waste fewer resources because you always work on up-to-date tasks
You can better adapt to change and respond faster
Faster turnaround times
You can detect and fix issues and defects faster
You spend less time on bureaucracy and busywork
There's a big community of Agile practitioners with whom you can share knowledge
You can get immediate feedback (which also improves team morale)
Developers can improve their skills based on QA feedback
You don't have to worry about premature optimization
You can experiment and test ideas because its costs are low
Disadvantages of Agile Project Management
Agile has substantial advantages, and it's important to know the disadvantages, limitations, and risks it brings.
Documentation tends to get sidetracked, which makes it harder for new members to get up to speed
It's more difficult to measure progress than it is in Waterfall because progress happens across several cycles
Agile demands more time and energy from everyone because developers and customers must constantly interact with each other
When developers run out of work, they can't work on a different project since they'll be needed soon
Projects can become ever-lasting because there's no clear end
Scope creep and experience rot
Clients who work on a specified budget or schedule can't know how much the project will actually cost, which makes for a very complicated sales cycle (""Until iteration ends,"" is not something clients like to hear)
The product lacks overall design, both from a UX and architecture point of view, which leads to problems the more you work on the product
Teams can get sidetracked into delivering new functionalities at the expense of technical debt, which increases the amount of unplanned work
Features that are too big to fit into one or even several cycles are avoided because they don't fit in nicely into the philosophy
You need a long-term vision for the product and actively work on communicating it
Products lack cohesion, and the user journey is fragmented because the design is fragmented. The more time passes, the more disjointed the software ends up becoming
Short cycles don't leave enough time for the design thinking process, so designers have to redevelop the experience over and over due to negative feedback
Check here for some more Scrum sprint planning anti-patterns and product backlog and refinement anti-patterns"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Rajeev Techexpert,2020,"Hi,

First of all lets understand what is agile model?

Agile model is a type of project management process which is mainly used for software development. Where demands and solutions evolve through the collaborative effort of cross-functional teams and customers.

Advantage of Agile model:
- Developers, testers and customer can interact with each other.
- Software is delivered frequently.
- Continuous monitoring to technical excellence and good design.
- Daily coordination and cooperation between business people and developers.
- Adaptation to changing circumstances.
- Even last minute changes in requirements are welcomed.
Disadvantage of Agile model:
- Agile model is not useful for small development projects.
- Project can easily get taken off track if the customer is not clear about final outcome.
- Documentation of the project is less detailed because of the nature of agile.
- Agile Model require more time and commitment as customers, developers and testers must constantly interact with each other.
Above answer is based on my experience in a software app testing company. I hope this will help.
Do let me know in case of any query regarding the same.
Thanks,
Rajeev"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Chuck Cobb,2017,"First, to be technically correct, Agile is not a methodology; it is a mindset and a philosophy defined by the Agile Manifesto. Scrum might be considered a methodology although many people would argue that Scrum is a framework, not a methodology.
Many traditional methodologies are well-defined and prescriptive - that’s called a “defined process control model”
Agile methodologies (or frameworks, if you prefer) are meant to be flexible and adaptive - that’s called an “empirical process control model”
From that broad perspective, here are the pro’s and con’s:
Pro - Agile methodologies are better suited for situations with higher levels of uncertainty because they allow taking a flexible and incremental approach to resolve uncertainty as a project is in progress
Con - Agile methodologies are less predictable in determining the cost and schedule for completing a project prior to the start of the project
Pro - Agile methodologies emphasize creativity and innovation to maximize the business value of the solution
Con - Too much emphasis on creativity and innovation can lead to significant changes in scope
Of course, you should realize that this is not a binary and mutually-exclusive choice between “Agile” and “Waterfall” as many people seem to think. It’s a matter of fitting the methodology to the nature of the problem rather than force-fitting a project to one of those extremes. Sometimes that requires blending Agile and traditional plan-driven project management in the right proportions to fit the situation."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Kamalakshi Naik,2022,"The Agile technique divides a project into many parts and uses these phases to manage the project. Continuous improvement at every stage and ongoing collaboration with stakeholders are required. Teams cycle through a process of planning, carrying out, and assessing once the job starts.
Benefits of the agile methodology:
The customers are satisfied because working software features are delivered to them after every sprint in the Agile process, allowing them to see the working feature that matched their expectations. In this methodology, attention is given to the product's good design.
The Agile Methodology has some drawbacks, including a lack of documentation and perhaps unclear requirements that make it challenging to implement."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Maya Misra,2020,"Here Are Some Pros & Cons of agile methodology :
Pros:
Continuous Improvement
It gets challenging to stick to your plans considering ever-changing client’s requirements and moods. Agile methodology empowers your clients to keep their views amid project development, and you to improvise according to their current state of mind.
2. Client satisfaction
The model allows you to arrange open communication with your clients. With video conferences or calls you can understand minor project requirements and raise tokens should there be any problems. Apart from strengthening relationships, the system gratifies your clients making them feel valued for their opinions. The early working prototype satisfies your customers.
3. Reduced Risks
The changing trends and fickleness of client’s requirements often cost developing companies more than they anticipate. Imagine being at the fourth stage of a cycle, and your client refuses to accept the design. How much would the deconstruction and starting from scratch cost? But the agile model reduces all the risks as you’re keeping them posted at each sprint.
4. Adaptive approach
Need to change a module? The session-based skimming allows your team to travel extra-mile to have the most optimized functionality. The self-organized and motivated teams in the agile web development model help easy adaptation and customization without flattening your wallet.
5. No strict structure
With no strict structure or project scope, the project remains flexible throughout the development phase. You can scale or descale the project too.
cons:
Not useful for small projects
Agile projects have overhead costs in terms of meetings, reviews and retrospectives, daily stand-ups, client interaction, and a lot more. You might not want to go for it for small projects— the projects that won’t ring much of your cash register.
2. Takes more time
With the waterfall model— the probability of changes is 0.5 by the end of the project, i.e., your client may either nod a yes or say a no! But with continuous client engagement and reviewing in the agile web development model— you might have to have regular changes every sprint. Plus iterative meetings and reviewings can consume a lot of time.
3. Needs an expert to take major decisions
The agile approach is not possible without the decisions of the expert in the company. It needs a managing force to arrange meetings, dividing sprints, reviewing work, and interacting with clients. The process may not move if the concerned person goes missing for a few days.
Thank You!!"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Dhruv Parmar,2023,"Agile development model is also a type of Incremental model. Software is developed in incremental, rapid cycles. This results in small incremental releases with each release building on previous functionality. Each release is thoroughly tested to ensure software quality is maintained. It is used for time critical applications.
Extreme Programming (XP) is currently one of the most well known agile development life cycle model.
Diagram of Agile model:
Advantages of Agile model:
Customer satisfaction by rapid, continuous delivery of useful software.
People and interactions are emphasized rather than process and tools. Customers, developers and testers constantly interact with each other.
Working software is delivered frequently (weeks rather than months).
Face-to-face conversation is the best form of communication.
Close, daily cooperation between business people and developers.
Continuous attention to technical excellence and good design.
Regular adaptation to changing circumstances.
Even late changes in requirements are welcomed.
Disadvantages of Agile model:
In case of some software deliverables, especially the large ones, it is difficult to assess the effort required at the beginning of the software development life cycle.
There is lack of emphasis on necessary designing and documentation.
The project can easily get taken off track if the customer representative is not clear what final outcome that they want.
Only senior programmers are capable of taking the kind of decisions required during the development process. Hence it has no place for newbie programmers, unless combined with experienced resources."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Jeff Sutherland,2020,"A well implemented Scrum delivers twice the work in half the time. See Amazon.com: Scrum: The Art of Doing Twice the Work in Half the Time (8601410683535): Jeff Sutherland, J.J. Sutherland: Books
The disadvantage is that as a consultant you can only biill 25% of the hours."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,John Lee,2020,"5 Key Disadvantages of Agile Methodology
Poor resource planning
Limited documentation
Fragmented output
No finite end
Difficult measurement"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Naveen Kumar Singh,2020,"Why to look for advantages or disadvantages? Can model have any such things? It is for the people who practice not the model itself. If you choose wrong model to solve your problem then how can you blame model?
Does waterfall model have any advantages or disadvantages? No if it is use for the purpose it solve. Similarly agile model is to develop software product. What if you try to build house incrementally using agile model? It will fail and become too costly."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Mark Jameson,2015,"When you have a proper working Agile team the follow advantages (over traditional waterfall approaches) will become apparent to you:
Teamwork
Agile teams work as one. Everyone on the team has to be committed and not just be involved (see Chicken and Pig fable). There is no hiding in an agile team.
Problems Spotted Early
Because of the nature of small iterations and developing features ready for production any problems are spotted early.
Minimal Disruptions
Agile teams work to a constant heartbeat. Disruptions from outside are easier to control and avoid. Because of tight deadlines and ever watching eyes of the team it is a lot harder for individuals to procrastinate.
Adaptable to changing Requirements
Until work has started on a story agile approaches accept that requirements may change and are open to this.
Effort Minimised
Most Agile methods encourage minimising the work you do.
They use concepts like:
- MVP (Minimal Viable Product)
- MMF (Minimum Marketable feature)
- YAGNI (You aren't going to Need It)
Quality Improved
Having a consistent approach to Acceptance Criteria of stories and definition of done improves quality.
Requirements Prioritised
Agile forces the team and its stakeholders to prioritise requirements and the order that features are worked on.
Most controlling methodology ever!! (In a good way)
If you think Agile is an excuse to cut corners and let developers hack systems togther then think again. A proper Agile team is like a well tuned factory and much more in control than any waterfall project is ever going to be.
Continuous Improvement (Kaizen)
Most agile teams practice the art of Kaizen.
State of the Art Dev Ops.
Agile projects demand state of the art development operations. Continouous Integration, Automated Unit Testing, ...
It is hard to run a proper agile team without using state of the art dev. techniques. Kaizen will eventually lead you to them."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Jessica Wood,2020,"Agile methodology has grown to be among the most popularly used development methodologies in today’s world. While its rise has been especially notable in the twenty-first century, agile methodologies have been in use for over twenty years now.
PROS OF AGILE METHODOLOGY
Flexibility
Embracing Uncertainty
Immediate Feedback
Less Defective Products
CONS OF AGILE METHODOLOGY
Lack of Documentation
Scope Creep
Time
Lack of Predictability
Thanks!"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Amy,2022,"Agile has several advantages and disadvantages. If you want to decide whether or not to buy this CRM, you must first determine what features you require. The advantages and disadvantages of Agile CRM are listed below.
Pros of Agile:
Reasonable pricing
One of the most excellent email marketing tools
Contact management made simple
Automated sales pipeline system makes it simpler to close business
Easy-to-use configuration and administration interface, even for beginners
Cons of Agile:
For the Starter package, just one integration option is provided
Buggy email capabilities
Third-party integration difficulties
Limited third-party integrations
Limited service automation functionalities
Lack of reporting"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Riley Claire,2023,"While incremental delivery might assist get products to market faster, it is also a significant downside of Agile approach. Because when teams work on each component in separate cycles, the overall result typically becomes quite fragmented rather than a coherent entity.
5 Key Disadvantages of Agile Methodology are as follows:
Poor resource planning
Limited documentation
Fragmented output
No finite end
Difficult measurement"
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Jonathan Bush,2023,"Agile is great for software development, where functionality is being added to a base. The order is unimportant, allowing the sequence to suit business importance.
Agile is useless for infrastructure projects, because the sequence is critical. You can't install a server without first acquiring it, which first needs planning and designing, approval for the spend, etc. Various parts have to come together ,which means scheduling is critical."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Manish Makhija,2018,"Agile is lightweight approach, it is flexible & adaptable. The disadvantages are it does not suit for any small term project."
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Yuvaraj Mohite,2021,The disadvantages are mostly people make it very prescriptive rather than understanding the guiding principles. Also it is a most common excuse to work ad-hoc under the guise of Agility.
https://www.quora.com/What-is-agile-methodology-and-what-are-the-advantages-and-disadvantages-of-agile-methodology,Mark Levison,2020,"All work has many risks:
You will discover no one wants the thing you’re building
You will discover your team isn’t capable of doing the work with good quality
..or that their technical skills aren’t up to the job
You will discover that your team doesn’t like working together and you don’t gel.
Agile or not, all knowledge work has these risks. Agile approaches (there isn’t one ‘Agile’) will just force you to deal with them sooner."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Assistant,2024-08,"Agile software development offers many advantages, but it also comes with several disadvantages:
Scope Creep: Agile's flexibility can lead to continuous changes in project scope, making it difficult to manage and potentially resulting in project delays.
Less Predictability: Due to its iterative nature, it can be hard to estimate timelines and budgets accurately, which can create challenges for stakeholders expecting fixed deliverables.
Requires Experienced Team Members: Agile relies heavily on collaboration and communication, requiring team members to be self-motivated and experienced. Less experienced teams may struggle with the methodology.
Potential for Fragmentation: In some cases, frequent iterations can lead to a lack of cohesion in the overall product architecture, if not managed properly.
Documentation Challenges: Agile often emphasizes working software over comprehensive documentation, which can lead to insufficient documentation for future reference or onboarding new team members.
Client Involvement: Agile requires continuous client or stakeholder involvement, which may not always be feasible. Some clients may not have the time or expertise to participate actively.
Resistance to Change: Teams accustomed to traditional methodologies may resist adopting Agile practices, leading to conflicts and a slower transition.
Overemphasis on Collaboration: While collaboration is beneficial, it can also lead to decision-making paralysis if too many stakeholders are involved in discussions.
Scaling Issues: Agile can be challenging to scale for larger projects or organizations, leading to the development of hybrid models that may dilute the principles of Agile.
Limited Focus on Non-Functional Requirements: Agile methodologies often prioritize functional requirements, which may lead to insufficient attention to non-functional aspects like performance, security, and scalability.
Addressing these disadvantages often requires careful planning, team training, and a clear understanding of Agile principles to ensure successful implementation."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Victor Malyavko,2022,"Agile is an effective system, which can improve your processes. However, you’d better be aware that there are some limitations:
Fear of uncertainty that creates stress for the team — the lack of sequential stages and the clear project development plan, the possibility of changes in the last stages of QA testing may become a stress factor.
Degradation of quality — with the inept use of the methodology, due to fastened releases and, accordingly, a larger number of QA tests, the quality may become lower.
Long time to implement — Agile is a complex methodology that can be a problem for QA testers who are used to Waterfall. You will have to develop communication skills, learn to be more responsible and multitask.
Stress for customers — not all clients know exactly what they want. Not all clients have time for daily meetings and problem-solving that they hoped to delegate to others.
Strong motivation of employees and professionalism at the same level are required — QA Engineers must keep up with each other in a rapidly changing, flexible software testing process, and this is difficult to achieve with insufficient motivation and qualifications of at least one of the team.
Read my article for more information about Agile
Agile: Tribute to Fashion or Effective QA Management?
The Agile Methodology is a software development methodology that is implemented to increase software development speed and agility. Touted to be good for the software industry, it is not a novel idea.
https://www.linkedin.com/pulse/agile-tribute-fashion-effective-qa-management-victor-malyavko/"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Charan Puneet Singh,2015,"To know the disadvantages of Agile, it is important to know what Agile software development means. Please refer the Agile Manifesto.
Irrespective of the flavor of agile you decide to chose, there are some industry accepted scenarios where Agile will work and where it will not work.
Agile will not work well unless every member of your team is really good.
Agile will not work well for a team where communication is an issue. It needs open communication for every day stand ups and retros. Your communication should be so good that any developer in your team should be able to pick up any piece of code and start working on it.
Agile will not work in a hierarchy-driven organizational set up. It needs a culture which cannot be developed overnight.
Agile will not work in a scenario where failure is not an option. It is often called FDD for this reason.
Agile may not work very well for a package implementation or a system integration project.
Agile will fail without the right engineering practices in place. Pair Programming, Test Driven Development, Continuous Integration are necessary for agile to work.
Agile is not the goto term for ignoring solution design and code"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Sachin More,2019,"Agile > No Agile > Bad Agile
Bad Agile is a horrific experience that I wouldn't wish on my worst enemies.
My worst experience so far:
1. · Sprint planning - This is where the product owners actually figured out what work they wanted to do. We'd spend several hours discussing nebulous requirements before even getting to prioritization
2. · Daily meeting - The 30+ minute sit down where everything is re-prioritized, new tasks are added, whole conversations are repeated. The product owners would not listen to the scrum master and stay on track
3. · Sprint retrospective - These were cancelled because the product owners didn't want to change how they worked and were considered pointless
You can only push back so much before something breaks. In reality, everyone gives up on improving the process to maintain some shred of sanity. Anyone new to Agile joining thinks this is how it's done and henceforth hates it.
I think one problem stems from Agile consultants telling the organization that they should ""Do what fits best"". While technically true, people don't understand the motivations of Agile and therefore interpret it as ""Make up my own process with my 0 years of research/experience""
The “fast” that Agile promises isn’t “fast to finish” but rather “fast to react”.
It promises to minimize the time fro...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Sachin More
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Ashwin Dhakal,2017,"I have answered about the Agile Development after many answer request in this Quora section : Ashwin Dhakal's answer to What is agile development?
This is the graphical representation of the Agile Model I draw for your convenience. Hope you like it :)
Disadvantages of Agile model:
1) This model is very annoying in case of some of the large software, since it is difficult to assess the effort required at the very beginning of the software development life cycle.
2) There is serious absence of emphasis on necessary designing and documentation of the software.
3) If the customer is not clear what final outcome that they want, then the project can easily get taken off track .
4) Only the senior programmers and developers are capable of taking the kind of decisions required during the development process.
5) It is very difficult for newbie programmers, unless combined with experienced resources for the product development.
Appreciated by Upvotes :)"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Deepali Nagrani,2018,"Agile focuses on incremental delivery of client specified features.While slicing off a set of features for earlier release may prove beneficial but a lack of full visibility into overall requirements is often the cause of issue related to system behaviour, performance, capability and other crucial attributes.
Such problems typically require costly rework to retrofit important capabilities that weren't identified until the project was halfway through.
Agile projects poses a substantial risk that the team will move too quickly into iterative design and implementation,before the crucial features are sufficiently understood to support right architecture decisions.
There are problems that emerge due to poor architecture design that cannot be easily undone by refactoring.
If crucial aspects aren't acknowledged early on ,the chances are one or more important quality attribute will be ignored that isn't immediately visible and become incompatible with the initial architecture commitments.
This issue happens largely as a result of phenomenon of bounded rationality (A few supporting features that didn't make a cut turn out to be be essential to make the release truly useful).
To address this inherent challenge,all the additional capabilities must be included to complement most valuable feature."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Todd Main,2022,"The following are my opinions, not statements of fact. Scrum is an extremely popular and successful process. It solves many problems that existed before Agile methodologies came along, and is a great way to introduce teams and companies to Agile, since it is supported by structured training and roles.
On the other hand, it’s not my favorite choice for Lean/Agile processes. You don’t need to add comments to tell me I’m wrong, although you’re welcome to preach to me if you feel that I’m unfairly characterizing some aspects of Scrum. Also note that I am a huge fan of the Agile Manifesto and corresponding principles.
And so, in no particular order, I believe that some of the disadvantages of Scrum are:
The artificial deadline of the “sprint”. The objective is to impart an artificial, imposed deadline on the team, over and over and over. It’s a stick that you force the team to beat themselves with.
One of the traditional complaints of leaders outside of the software team is that they feel that the team lacks a sense of urgency. This sprint is intended to impose this on the team. Rather than inspiring the team, it is an authoritarian whip that is extremely cleverly packaged as empowerment.
Story Point sizing. This complaint is about theory vs. practice. All of the theory around relative sizing sounds so appealing. It just makes so much sense, and again, it’s supposed to empower the team by freeing them from “person hour” estimates. But in practice, I can’t begin to tell you how many times I’ve listened to a Scrum Mater tell a team that they’re getting it wrong - again - and that they need another workshop and another round of “representative stories”. The reality is the humans are completely terrible at sizing things. IMO, a far better approach is the following:
Ask the team if the story is small enough to be delivered in 2 or 3 days
Doesn’t matter if it’s smaller than that
If it is, you’re done
If it isn’t, split the story and repeat. Story splitting can also be a big challenge. My advice to teams that struggle with this is to practice ATDD. You agree on the acceptance tests (not “acceptance criteria”) before sizing. Then, if you need to split the story, use the tests as the “seams” in the story.
Booting the manager out of the team and replacing them with someone (the PO) without a software engineering or management background. This is not the intent of Scrum, but it can easily become the consequence of Scrum, particularly if you the team is trained by someone who also lacks actual software development experience.
The Product Owner’s role is to prioritize the team’s backlog
The team is told to not do any work that isn’t a prioritized story
The manager is sometimes taken aside at some point during the training and told that there is no place for “traditional management” in Scrum and it is important for them to not by an obstacle. I witnessed one company ban managers from Scrum ceremonies.
So how does technical debt get prioritized?
In my experience, the best strategy is to preserve a percentage of the team’s capacity for technical debt and allow them to write and prioritize those stories (subject to team discussion about impact to upcoming releases). However, some organizations insist on a “pure” model (an oxymoron in Agile) and expect the PO to prioritize these stories against their own stories, and make lofty “armchair quarterback” statements like “well, the team should be able to communicate the value of those stories well enough that their priority is obvious”. I’ve heard - on multiple teams at multiple companies - a PO actually say “we don’t have time for test automation”.
Putting the PMO in charge of the software development process. I know, Scrum doesn’t mention anything about the PMO, but in many organizations, the Scrum Master role is filled by a Project Manager who is part of that organization. Here’s an experiment: as a software engineer, attend an Agile conference and count how many software engineers you encounter there. (Hint, you probably only need one or two hands.) And I know, the SM is not supposed to be “in charge” of the process, but that is often the consequence. Three day workshop, pass a test, and BAM, you’re a certified expert who can tell the team why they shouldn’t do something.
Side note: I have a lot of respect for Project Managers who have successfully made the transition to an Agile mindset, and also those who still perform the traditional Project Manager role (as long as it is an active role and not just status reporting). There are a lot of benefits of Agile Project Management. My complaint is when their responsibilities stray into advising Software Engineers on their processes. It is sometimes difficult to get Software Engineers to learn processes enough to evangelize them, but in my experience, it usually works best when the team’s process “sage” has a software development background. I remember overhearing a Scrum Master lecturing a development team on emergent design - it wasn’t pretty.
The end result of the Scrum Master role is to protect the status quo. And again, this was not the intention, but it is often the outcome. The extreme examples are the certified Scrum preachers who have found their religion and are protecting their flock from sin. Even the least extreme examples are the fundamental flaw of having someone who’s job is to help the team with their process while having no actual software development experience.
And a corollary to 4 and 5 are that the Scrum process is fundamentally a project management process, not a software development process. Yet the team usually doesn’t realize this, and so they cede responsibility for decisions to the PO and SM and take no ownership of the way that they operate.
Famously, the lack of any attempt to interface with the rest of the company. This has led to things like SAFe (which I loathe) or often just a lofty attitude that the company needs to “be more Agile”. There is a general lack of training (aside from things like SAFe) in this area, and little guidance on how to accomplish roadmap planning in the Scrum world.
Ironically, another famous Agile process, Extreme Programming (XP) is almost the opposite of Scrum. Again, its intentions are righteous, but the outcome can be a process where the business priorities take a back seat to a (self imposed) authoritarian technical standard of practices that a true believer will defend but that many teams struggle to implement. That doesn’t mean there isn’t value in these practices, but things like TDD are not for the faint of heart and require a lot of repeat guidance and potentially workshops.
My favorite type of process is still a Kanban system. Yes, as with the others, there are imposed rules, and yes, the team members struggle with the rules, but the rules aren’t about who does what job, and they’re actually pretty simple:
if you want the process to work, keep the stories small
enforce WIP limits
as a general guide, start with severe limits and back off only as needed
when you reach a WIP limit, go to the right to find the bottleneck and help out there
The rest aren’t rules, they’re just guidelines:
if you can’t help out with a bottleneck, embrace “slack time” and do some training, automate tests, or research the source of a data issue in production that the team has been seeing lately. Just don’t cheat and do “story work”.
celebrate the WIP limits. They help you see the bottlenecks in your process. Maybe you need a specialist. Maybe you need to reduce the reliance on specialists. Maybe you need more automation. Maybe you have created an artificial bottleneck and you need to evaluate its value. Maybe you need to completely rethink the way that you deliver stories to smooth out the wrinkles. And on and on. The WIP limits are you friend, and every time you hit the limit, your friend is desperately trying to tell you something (and that something is seldom “increase the limit”)
use some process control metrics to help yourselves improve. Lead time and cycle time are the obvious ones to start with, plus the usual like defect rates.
Like any process, the success of a Kanban System depends heavily on having adequately trained leaders. And in my opinion, those leaders should be grown among the software development team, rather than coming from other teams like Product Management or the PMO. This is (IMO) one of the great missed opportunities in companies that train software development managers."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Anusha Hewage,2017,"I ll try to answer this question targeting software development as the question is formed that way .
Actually it is true that only success is most of the time documented and available to refer . Drawbacks are rarely mentioned .
Issues I have experienced are below.
Developers feel they are micromanaged
Resistance basically starts from the stand ups . Everyday coming for this 15 minutes and giving updates are not a comfort for everybody . Hence they start criticizing and resisting the process which can finally lead to say this process is not good for us. (This is when the scrum master has to show his/her leadership and coaching skills and let the people know the benefits of this 15 minutes )
Leadership team will not get the idea of not having a gantt chart with resource allocations , for a specif period and finally can lead to misjudgment of the progress of the project (Again it is Agile coach’s job to make that right )
If distributed agile is not properly facilitated with logistics, Audio Visual meeting facilities , distributed agile teams can get worst as they will really feel frustrated following the cadence in different locations . (Agile coach and leadership teams should implement proper distrusted agile and should be facilitated with technology and equipment )
If not properly implement dev projects in agile can really increase technical debt .
If the planning is done once in every two weeks (iteration ) then the systems team can really suffer to accommodate the changes. So it can really become messy as they will try to implement to support the two weeks objectives (That is why agile implementation needs to be an enterprise agile exercise from top to bottom. All processes need to be agile. Also continuous integration should be supported , facilitated with the necessary skills, tools"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Michael O. Church,2014,"Agility is always a good thing, in theory, but most of ""Agile"" development is an attempt to patch closed allocation, which is broken from the start. Also, enforcing an Agile style of development, communication, and work allocation means adding more management, not less. Usually, it becomes a justification for yet more micromanagement.
Scrum, for example, is probably good for turning the uninitiated into reliable, useful junior developers. For senior developers and higher, it's miserable. After 5 years, if you're any good, you get to a point where you're only interested in longer-term projects with some architectural meat and a long-term focus. People like that don't enjoy working on Scrum teams and, paradoxically, often end up as underperformers because it means they have to suffer under more micromanagement, and typically have less autonomy. Now, your best people feel like they're micromanaged and not learning much except how to game a process, and they tend to get pissed off and leave.
If you want agility, you're better off going to open allocation. If open allocation is not an option-- and sometimes it is not-- then you should, instead, be owning the boring/reliable niche, hiring boring/reliable people, and accepting that agility is not a priority. (It's desirable, but reliability is more important, in that case.)"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Wilson Leung,2018,"In my experience, the ‘agile’ part gets too much emphasis.
People do the work, and it’s the people that get the job done.
IMO agile really means is to let the ‘team’ decide what’s best for the customer & product an empower them to do it. Agility is a symptom of this empowerment and it leads to efficiency. But unfortunately the ‘symptom’ is what is being ‘taught’ as the cause of successful projects.
People are left neglected and worse: “Boss, I don’t feel I need to write everything in a sprint, John and I are working quite well together and quite efficiently and we BOTH agree it is of no value” Reply: “Sorry, you need to put it in a sprint plan, and your tasks need to be broken down and reviewed by the rest of the team who are ‘agile’ experts from other companies (not involved in the project), otherwise you are at risk of not understanding a task and you will fail”
My boss just said he didn’t trust my expertise and personal experience with the project, he trusted ‘agility’ more… ironic."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Saravana Bharathi,2014,"Agile implementations, be it Scrum, XP, Kanban or mix of these requires a huge shift in culture and thought process. It is not about process, not about standing up everyday and answering three questions.
That being said, most of the time the frustration comes out because of bad implementation, not enough support from your senior management, no training etc. people get stuck with the process instead of understanding value and principles behind it.
Let me give you an real life example. In the past I consulted with a company, I went there middle of crisis. The VPs and big wigs thought scrum is the silver bullet, they said go scrum. The software teams bought into it. But not support teams like contracts. It was a hell. Contracts still wanted suppliers to write down detailed specs, penalties associated with timeline, lengthy MS project, change control process etc. people kept two books. It was a huge strain on supplier. In the end, it was a failure, left with frustrated people. People blamed it on Scrum and the software group head was let go. I could write an entire book about insights from this experience.
If you read the above and give it a thought, most of the times the issues are because of bad implementation and misinterpretation. Sometimes your organization may not be ready for it. Better don't do it. Save the frustration. If you still want to do it, hire an experienced consultant, some one who had done it many times. Interview them personally, do a little bit of research about this guy before bringing him in. stay away from middle tier recruiting / head hunters. 99% of the time they don't know what they are looking for."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Sriram Sridhar,2014,"I cannot speak for other agile implementations, but I have some experience working in scrums and being a scrum master. The following is the biggest disadvantage I personally experienced with the process.
The biggest problem with scrums is the fact that the tasks included in a scrums are only as good as how well they have been defined. Unfortunately, it is very difficult to define tasks that are new and nobody on the team has a good idea of how long it takes to complete. This is especially true when working on new products or features that do not have precedents. It is also true for tasks that require research and analysis.
By definition, tasks included in a scrum should be completed by the end of that sprint without requiring any rework. This is great in principle but when you throw in tasks that have not been defined properly, it begins to fall apart pretty quickly. Estimating tasks that have never been done before is almost like estimating the run time of a database query without actually executing it. There is always a good chance that the initial estimate turns out to be wrong by several magnitudes. This consequently results in tasks going unfinished in a sprint. But with scrums, the scrum master is not taught to take unfinished tasks into account when planning future sprints. Consequently, when you start having unfinished tasks, he is either forced to fit them into the next sprint or leave them in the backlog for a future sprint. This creates more delays and/or work in progress, in direct contrast to the agile methodology's objective of reducing both. Furthermore, when this starts happening regularly, It makes sprint planning harder and makes people involved in the sprint grow progressively more frustrated, eventually making the sprints burdensome without any real benefits over other methodologies."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Atif Shahab Qureshi,2018,"I second the point of Ashwin Dhakal that Agile is not suitable for large projects. Myself, i am a software engineer and have witnessed this while working on so many projects. Moreover, other disadvantages of Agile approach are as follows:
Documentation tends to get sidetracked, which makes it harder for new members to get up to speed.
It’s more difficult to measure progress than in waterfall because progress happens across several cycles.
Agile demands more time and energy from everyone because developers and customers must constantly interact with each other.
When developers run out of work, they can’t work on a different project because they’ll be needed soon.
Projects can become ever-lasting because there’s no clear end.
Scope creep and experience rot.
Clients who work on a specified budget or schedule can’t know how much the project will actually cost, which makes for a very complicated sales cycle (until iteration ends is not something clients like to hear).
Teams can get sidetracked into delivering new functionality at the expense of technical debt, which increases the amount of unplanned work.
You need a long term vision for the product and actively work on communicating it
Products lack cohesion and the user journey is fragmented because the design is fragmented. The more time passes, the more disjointed software ends up.
Short cycles don’t leave enough time for the design thinking process so designers have to redevelop the experience over and over due to negative feedback.
Reference: Advantages and Disadvantages of Agile Project Management | ActiveCollab Blog"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Jeff Nelson,2015,"My main criticism of Agile is that it's become such an all-inclusive term for so many different methodologies.
Scrum is Agile.
Test-driven development is Agile.
Pair programming is Agile.
Open-ended specification is Agile.
It's not a stretch to say even management-by-walking-around and Six Sigma have been relabeled as part of Agile.
Back in the 1990s, we had many terms for many methodologies, software and management. Now, every methodology is just called ""Agile""."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Melvin Pérez-Cedano,2015,"Most of what could be considered disadvantages of agile software development are typically signs of major essential problems that no single software process framework would make go away. Agile software development helps in making those problems evident, because of the emphasis on delivering working software frequently and the frequent retrospectives.
In other cases, certain annoyances that can be seen as disadvantages are caused when agile software development is used under contexts like regulatory environments (no working software until comprehensive documentation is developed upfront) and predictable projects (unneeded frequent feedback).
I would say though, that adopting agile requires significant organizational changes that until they aren't implemented would undermine the benefits of agile software development and even cause more pain. And this is not strictly a disadavantage of agile software development, but a disadvantage of introducing a new paradigm."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Sagar Rao,2022,"Photo by Sebastian Herrmann on Unsplash
Scrum is a modern software development framework. It is an agile methodology that promotes collaboration and transparency by using a cross-functional team approach. As a result, many companies have adopted it, and it has become the de facto standard in the industry.
Time-Conscious
The biggest drawback of the scrum process is that it is highly time-conscious. This means that, on top of the numerous other things that the team has to do, it has to keep track of what is due when, and it has to do this in a timely manner. Furthermore, during the sprint planning stage, the team has to work out how they will integrate all the tasks that they have lined up for themselves, and it also has to do this in a way that keeps the customers happy and the project on track.
Due to all of this, it is clear to see why some companies have resorted to using assistants to help with the planning and the execution of the project. Furthermore, since the task allocation is flexible, you can rest assured that the team will respect your time constraints, and they will ensure that all tasks are completed on time.
Not Suitable For Large Teams
The scrum process is not suitable for large teams. This is mainly because it was designed for smaller teams that are more agile. As a result, when large teams are brought in, they often try to operate in a more structured manner, which can either slow the process down or even put a stop to it altogether. Additionally, having too many cooks in the kitchen means that the food is often overcooked, and quality suffers.
If you are working in a team of more than 10 people, then it is recommended to split the team into smaller sub-teams. This is because, in practice, teams of 5-10 people are more effective and efficient, and it also helps improve quality. If you really want to take it to the next level, then you can even form mini-teams within the team, to tackle specific parts of the project, such as the client-side functionality, the server-side functionality, and so on.
Poor Hand-Off From Design To Development
One of the biggest drawbacks of the scrum process is that it is a very “siloed” process. This means that it is highly isolated, and there is very little cross-communication between the participants. In practice, this often leads to a poor hand-off from design to development. Especially when a team is new to the process, it is very difficult to know where to begin, and it can result in a lot of wasted time.
As a result of this, it is advisable to establish a good process for integrating design and development work, so that both parties know what is expected of them. In this way, everyone involved in the project will be able to act with more purpose and effectiveness. Furthermore, by having a better understanding of what is entailed in the project, both parties can take the necessary time to get everything right.
Limited Scope
One of the biggest drawbacks of the scrum process is that it has very limited scope. Especially when compared to other agile methodologies, like Kanban, the process is fairly linear and does not allow for a lot of “side-tracking”. For example, if you are only working on the user interface and the organization structure of the project, then you will have to either use a pre-existing database scheme or figure out how to structure the files yourself.
Additionally, since it is a fairly straightforward process, there is a limit to how much the team can actually achieve. Especially when working on larger projects, the team may run out of steam, and it can result in a poor quality product being delivered to the customer. Remember, a scrum project is only as good as the team's commitment to it, and if there are any slip-ups, then the customer may end up with a buggy product that is poorly engineered.
Conclusion
In conclusion, not all software development companies will benefit from this methodology. This is because, in some instances, scrum may not be the best fit for a specific project. As such, before adopting any kind of process, you must consider your needs and the project at hand."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Simon Kinahan,2014,"I'll document my personal experiences. We were very successful in a previous company in moving to an agile model to try to better accomodate changing requirements. However, there are some drawbacks:
1. It can be frustrating for the customers of a product company. Agile methodologies make it hard for customers to plan, because the development team cannot give hard delivery dates for functionality beyond the current iteration. Customers in business where they have manufacturing deadlines cannot live with this, so we had to adopt a semi-agile model where certain functionality had to be estimated, planned and tracked across iterations and engineering time reserved to make sure it made progress even if from a purist agile perspective it was not the highest priority right then.
2. Developers may wait for the customer team to report issues they already know have bad consequences, because its easier than announcing that there is a problem and then trying to persuade the customer side to prioritize fixing it. This led to some accumulation of poor design decisions in the code, which then needed a relatively large not-very-agile effort to rip out and fix.
3. The emphasis on not planning and designing is fine where tests and customer usage will find issues, but with mathematically deep modelling and optimization, its a bad idea. At this level, requirements and approaches have to be carefully spelled out in as much detail (including maths and pseudocode as necessary) as possible to make sure eveyone understands the consequences of the decisions being made. The amount of work in implementing these things has to span iterations, so some up-front effort is needed to ensure the direction is right. Otherwise you end up with very large amounts of code that don't do what was needed, but also cannot realistically be incrementally improved."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Jeff Darcy,2015,"Like many others, my main concern is its applicability to all sorts of projects. Agility is about responding rapidly to changing circumstances. That might work well for front-end code with few internal dependencies. I wouldn't know. However, for infrastructure (especially systems) code with many internal dependencies it's solving exactly the wrong problem. There, the problem is not how to change direction quickly but how to maintain direction. It's a bulldozer, not a fleet of bicycles. In my experience, the meetings associated with agile methodologies end up being just distractions where the same slowly-changing information gets rehashed over and over again.
Another problem that we ran into on my current project is that agile methodologies don't mesh well with the ""upstream/downstream"" development model common in open source. That process is something like this:
Developer works on some code in their own branch of the upstream/community codebase.
Developer's code gets merged upstream
Time passes while upstream lurches toward a release, often driven by other features and release procedures completely beyond the agile-using group's control.
After the upstream release, the code is pulled into a downstream/corporate branch.
Developers (often the same ones who developed the features upstream but not necessarily) integrate/backport/etc. the new upstream release into a downstream one.
A downstream release finally occurs.

Agile's assumption of complete and close control of the requirements and development process conflicts with the middle phase where somebody else has complete control. The only way to deal with this is to treat the upstream development and downstream integration as two separate tasks within the agile team, which is a kludge at best. The result only reinforced everyone's perception that agile is a tool specialized for a problem domain other than ours."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Kavya Tolety,2020,"Hi!
I believe there is always two sides to a story, just like a coin that has two sides.
Before i answer your question, let’s understand What is Agile?
Agile is an iterative based software development approach where the software project is broken down into various iterations or sprints. Every iteration has phases like the waterfall model such as requirements gathering, design, development, testing, and maintenance. The duration of each iteration is generally 2-8 weeks.
So in Agile, you release the application with some high priority features in the first iteration
After its release, the end-users or the customers give you feedback about the performance of the application
The necessary changes are made into the application along with some new features and the application is again released which is the second iteration
This procedure is repeated until the desired software quality is achieved
Some advantages of the agile methodology are:
Because of the high customer involvement, you receive feedback quickly and make decisions on the fly. There’s more frequent communication, more feedback and a closer relationship with your customers
There is a lesser risk since your work output is reviewed at every stage. You also save money and time from unnecessary expenditures, because you’ll be prioritizing providing value for your users
You’ll be improving the quality of your output with each cycle. By breaking down your project into bite-sized pieces, you learn from each iteration. There is a lot of trial and error involved, but for the most part, you’re still focusing on high-quality development, testing, and collaboration
Now, answering your question some downsides of Agile are:
For the approach to work, all members of the team must be completely dedicated to the project. Everyone must be involved equally if you want the whole team to learn and do better on the next run. Because Agile focuses on quick delivery, there might be an issue with hitting deadlines
The approach may seem simple but be hard to execute. It requires commitment and for everyone to be on the same page, ideally, in the same physical space
Documentation can be ignored. Because Agile methodology focuses on working software over comprehensive documentation, things might get lost through each stage and iteration. As a result, the final product can feel different from what was first planned
I hope this helps :) For more information check out this video
All the best!"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Pepper Hayes,2020,"Nothing can give you a 100% output with a 100%input.
Agile has it’s own flaws and pros.
But here are some of the major drawbacks
Projects can easily fall off rails. Agile works best when all the needs of the client are either unknown or they keep changing. Of course, that is not the case with all the projects. The time in between, the team might not have as much to do.
The predictability of the deliverables decreases.
Every team member must have a clear understanding and direction of what are the needs and requirements of the product.
Increased need for constant interaction and communication between the stakeholders.
There is an increased burden on the developers and the client. Any lack or depravity on the part of either would cause a loss of quality of the product
because of the nature of agile, the documentation of the project is less detailed.
These drawbacks should not be of great worry to you, especially if your work coincides well with agile. It is a great disciplined and structured way to get detailed work done."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,S Markem,2018,"No easy way to say this…
Its difficult to ‘do it right’.
It demands experience, intelligence, discipline ( internal ) and professionalism.
It can help encourage these, but it can’t magically turn groups of people without the above characteristics into high functioning teams.
At the moment we still have a severe shortage of programmers of a certain calibre and the median age in the industry overall means inexperience is rife. Even if that were not the case the numbers of developers working 20 years ago is now dwarfed by the numbers that exist now. There isn’t enough quality to go around.
So. Its drawback? Level of competency required."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Nikita Gureev,2017,"Agile development is frequently praised for its flexibility, quick feedback, efficient communication, and frequent releases, however it is not the best methodology for every case. There exist several disadvantages to this model:
Agile is as flexible and accomodating for new requirements, as it is difficult to predict and estimate at the start. Some projects adopting this methodology turn out to be too long-lasting. A reason for that may be lack of project focus and clear vision of the product from the customer;
While frequent communication and involvement from customer can have a huge positive impact on the develoment, there is a potential problem here, as some customers won’t be able to participate so actively in the development;
Agile prioritizes working code over documentation, and while that may be a positive thing, some projects just end up lacking proper documentation. Combine that with high developer turnover rate and you have a recipe for disaster;
Agile practices allow for involvement of different roles early on in the project, which is generally a good thing. However, it increases costs for the project from early on, which people should be mindful of. It is important to mention that this practice mitigates some risks. For instance, continious integration throughout the project may be costly, but it is preferable to high risks of waterfall testing process.
Overall, Agile has many advantages and should be used for a wide range of projects of different scale, however one should be aware of the possible drawbacks this methodology has.
Links:
Disadvantages of Agile Development
Agile software development - Wikipedia
The Massive Downside of Agile Software Development"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Muntaha Anjum,2022,"Nothing is perfect, even the Scrum approach. Scrum is sometimes paired with other project management strategies to help alleviate some of these drawbacks:
Due of the lack of a fixed end-date, Scrum frequently leads to scope creep.
If individuals are not dedicated or cooperative, the odds of project failure are considerable.
Adopting the Scrum framework in big groups is difficult.
Only experienced team members can ensure the framework's success.
Team members might become irritated by daily meetings.
Any team member who departs in the middle of a project might have a significant negative influence on the project.
Quality is difficult to implement until the team goes through a rigorous testing procedure."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Piers Campbell,2022,"There is one key disadvantage to agile that is preventing organisations, teams and individuals from adopting it fully and making lasting improvements to the way it works.
No one really knows what it means.
Which is to say, there are a set of principles that provide a framework in software development to solve a set of problems from twenty years ago, but there is no real consensus on what agile means outside of that context. People with experience of working with an agile mindset, tools and frameworks will have some common ground, but there are other people with literally no understanding of it that will stick the word ‘agile’ in front of any old nonsense to try to make some money out of it.
A lot of time is wasted over discussion of what is or isn’t agile which would be much better spent improving the situation of customers and teams. Or to put it another way, emphasising people and interactions over processes and tools!"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Abhinav Manchanda,2020,"Agile was originally supposed to be a lightweight set of values and principles. In today’s world, Agile has certifications, processes, tools, and a rigid set of guidelines.
This rigidity has made this bloated version of Agile the opposite of what it was supposed to be. This unfortunately is the biggest disadvantage as of now."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,David Jablonski,2018,"Agile, though being a rewarding system has some drawbacks. According to me providing agile software development services requires time and commitment with greater demands of clients and developers. [1]
Footnotes
[1] Belatrix Software: Software Outsourcing South America"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Marcas Neal,2016,"Agile is a reaction, seeking to address what it considers to be wrong with ""waterfall."" That is one of the many ways Agile completely ignores what waterfall got right, like denigration of requirements and design.
News to Agile people: User Stories DO NOT equal requirements and/or design. Most software engineers take a more balanced approach, where we recognize that waterfall was too slow and bureaucratic without throwing the baby out with the bath water!
Some forms of Agile go completely insane, such as the artifical ""definitions of done,"" especially when only one matters, specifically when does the end user use it and will the client pay for it ... thats it! Another extreme is pair programming, which is a complete waste of resources!"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Gerry Claps,2016,"Here are just a few:
An unfortunately common perception that its methods are to be taken as dogma (e.g. we only do Scrum, Kanban, XP, etc.).
Their emphasis on engineering and delivery, but omission of product development (e.g. there’s no focus on product roadmaps).
The dangerous confusion of thinking 'Scrum' is 'agile software development' (e.g. Scrum is one specific method in the ‘agile’ family)"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Stacy,2021,"Disadvantages of Agile software development :
Less predictability. For some software deliverables, developers cannot quantify the full extent of required efforts.
More time and commitment.
Greater demands on developers and clients.
Lack of necessary documentation.
Project easily falls off track."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Daria Bagina,2022,"It is quite difficult to implement and will require lots of changes to how you do, track, measure work, how your teams are organized, roles, responsibilities, and more.
If you want to to actually work, you will have to invest in it. You won't be able to do it on your own by sending people to training and that's it. You will need to hire an expert, and that's not cheap.
Some people in your organization will most likely be not willing to change and will be sabotaging the transformation (whether consciously or not). Which means you might have to make some tough decisions.
And, of course, change is hard and takes time, so at the beginning you most likely will see drop in productivity.
But in the end it's worth it. The benefits of Scrum implementations are long term and will support thr organization in the uncertain times much better than traditional approaches would."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Antony Marsh,2015,"""Agile"" as described in the Agile Manifesto is really a values-based system, not a methodology. Note that the Manifesto does not prescribe tools, techniques or methologies. It values ""individuals and interactions, not processes and tools"" and values delivering working software sooner, amongst many other things. Two key principles for me are""self-organising teams"" and in particular ""Continuous attention to technical excellence and good design enhances agility"". Think about that last one!
Scrum as a ""type"" of Agile is indeed a methodology. My rule of thumb is to look at the application of a methodology (eg Scrum) in a team and refer back to the Agile Manifesto to see if it's being done right. If the way Agile methodologies are being applied in your team are not consistent with the principles and values, then they are not being applied correctly.
I often hear the ""that's not agile"" or ""he/she doesn't understand agile"" comments which probably miss the point of what agile is. Remember, the Agile Manifesto says nothing about ""sprints"", ""story points"", ""estimations"", ""product backlogs"", etc etc. These are all artefacts of particular methodologies which may or may not work well for your team.
Note that I have nothing against Scrum or other agile methods/processes - I use them myself - but following them slavishly is anti-agile in itself."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Bernie Kahn,2022,"Places a lot of responsibility on the team, often more than some team members are comfortable with (self-organizing, estimating, etc.). Requires a culture supportive of scrum values (people over processes, working software over documentation, etc. ) which can be difficult in some companies. Company culture that fosters competition by individuals does not make for good team collaboration.
Needs a Product Owner to be available, or at least a viable proxy) to the team, on an ongoing basis.
Trad Scrum has challenges in scaling beyond the team level. Even for a team-centric project, dependencies outside the team itself are a challenge - too often left to the SM to deal with. In a similar way, no one has responsibility for communication outside the team.
Risk management is too often neglecting. Dev team might deal with purely technical risk, but even there, they don’t have a risk mindset, not are trained in ways of mitigation or avoidance, and anything outside the technical domain is left for the PO to deal with,"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Rank Rise,2022,"Advantages of Agile
1. Flexibility and Adaptivity
2. Creativity and Innovation
3. Time-to-Market
4. Lower Costs
5. Improved Quality
6. Customer Satisfaction
7. Employee Satisfaction
8. Organizational Synergy
Disadvantages of Agile
1. Training and Skill Required
2. Organizational Transformation
3. Scalability
4. Integration with Project/Program Management"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Arunchunai Vendan Pugalenthi,2017,"Its easy to forget what you complete before as the documentation phase is teensy.
Unlike Waterfall, Agile cannot be flexible for Adhoc requests. You will need to groom the backlogs over and over again when Adhoc requests pop up.
Agile is a wonderful software model. To avoid drawbacks of Agile, all you need to do is, analyze the use cases and decide whether Agile will fit or not. One cannot expect a mango from apple tree."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Raveesh Rai,2022,"If not implemented in a right setting, i think agile/scrum will do more damage than benefit. The right setting I mean is more around the agile manifesto principles.
Also, if there is a lack of support from leadership, compatibility gap between teams, in-effective clarity of purpose and so on it’ll be more painful to operate in agile than traditional established methods."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Otto Gold,2023,"The main drawback is how many ignorant people claim they practice it. Typically the worst are most vocal about it plus like to ""teach"" others. Come on. Common sense anyone?
The obvious benefit is that the world of today is very fast and ever changing. So being stuck with the waterfall for months only to see it is not a fit or the work is no longer relevant is an expensive mistake."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Julya van Berkel,2017,"Question: What are the drawbacks of Agile?
What is the drawback of discipline?
What is the drawback of flexibility?
What is the drawback of creating value?
Everything has drawbacks, but it comes down to what you use it for, what you are trying to achieve, where you are coming from, etc.
To really answer this question I would need more information. Drawbacks in which situation?
The focus of the question seems to be to find out what is negative about Agile. But what can be negative about a mindset. No one is asking you to adopt the mindset. And you have to offset it to something.
When you come from a more traditional organization the drawback can be that Agile requires the whole organization to change to make the most out of the Agile mindset.
Often Agile is just introduced into a part of the organization. That will lead to misunderstanding and conflicts with the parts of the organization that have not been taken along in the mindset change.
Another possible drawback can be that it is seen as a silver bullet or golden hammer. Agile is a powerful thing and has many passionate fans. The passion can be infectious, though the mindset might not be there yet.
What I also notice is that since Agile is a mindset it is not easy to achieve. Getting Agile requires inspect and adapt and that is hard to teach without help. I see questions about “what is the best online course for Agile” and the like. I am hard pressed to answer those. Agile is best learned in the field, by doing your work in an Agile environment, or work in/with and Agile team. That is hard to learn through books and online information."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Raviteja Chirala,2015,I am not a big fan of Agile Product Development. The biggest disadvantage of Agile is not following Agile properly. I have seen people pushing engineers to meet deadlines everyday and focus on new task ignoring the most critical parts like Perfection and performance. It's not how fast you finish or saying that you have finished it. Instead one should assess time properly and give reasonably sufficient time to finish off a task.
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Peter Vukovic,2015,"The main disadvantage is that it's not a standardized process, but a set of recommendations.
This is almost unheard of in any human activity involving large teams, because process standardization is the only way to control the output.
Because of this, agile is interpreted differently by every software team on this planet and while some subscribe to certain belief systems (i.e Scrum), most are profoundly confused by the whole thing and experience very few real benefits."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Edward G,2024-06,"Probably that it's much harder to get right than people realize.
You can go through the motions and not get anywhere, like getting into a car and driving it at 10 km/h. Yes, you're in a car and going somewhere, doing all the things drivers do. But you're not making any progress.
Then people give up, get out and kick the tires, and swear cars don't really work."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Tushar Jain,2017,"If there are any drawbacks in short and numerous feedback cycles, trust among team members, always customer present, delivering value incrementally, and evolving requirements the Agile has all of those.
The real question should be how can I use characteristics listed above in my ..."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Chuck Cobb,2022,"A pure Agile approach does not provide a good framework for managing project costs and schedules if that is important. As a result, it is difficult to apply to a contracting situation. However, that does not preclude the use of a hybrid Agile approach. Here’s an article with more detail on that:
Agile Contracts - How Do They Work?
Some people may think that you can't impose typical cost and schedule constraints required by contracts on an Agile project, but it definitely can be done.
https://managedagile.com/agile-contracts/"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,David Crowe,2022,"It forces a change in the way people think about problems. This could make it impossible in some environments, and downright risky in some cultures."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,James Chau,2022,precision is not valued enough
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Con Bradley,2015,"To me Agile is far worse than what is supposed to replace and ironically what does not seem to follow its own declared principles specifically this one: ""We value Individuals and interactions over processes and tools"". Agile is very process heavy and very dogmatic. Consider for example the length of a sprint or the size of a team. These should be flexible but instead are set in concrete by the process masters. Generally I think the principles of Agile are correct but their application is dogmatic, also The Agile principles say nothing about quality which is a serious omission IMHO"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Ganesh,2019,There is no drawback If you know which project should follow agile. There are projects which should be done by waterfall.
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Yogesh Sharma,2014,"Looks like you are looking for where Agile/Scrum falls, rather than being pragmatic about what is good to what is bad.
I would say that Agile is good if there is a fast paced project and which required delivery with a known set of features/hiccups. Agile is bad when you have a research oriented project with potentially tons of directions to choose from, then again Agile can help if you wish to dedicate a set of resources to pick and execute the possible directions in the form of Proof of Concept, using Scrum Practices.
I know that I am not advocating against Agile/Scrum. Every methodology has its own set of challenges and one need to see for what works for them and what not. It is true that team/individuals who hate sharing the status each day shall hate it, since they don't like micromanagement."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Kimberly Johnson,2016,"Waterfall methodologies have a ""Ready, Aim, Fire"" approach. You get ready and gather your requirements. You design your software up front to meet all of your requirements to make sure you'll meet that target. You build the software, and you test to make sure you've actually hit your target.
Many criticize Agile for it's ""Ready, Fire, Aim"" strategy, where you haphazardly begin building software without knowing what it's going to look like in the end. Doing this could lead to a less-than-ideal architecture with respect to the final product.
However, Agile is actually ""Ready, Fire, Aim... Fire, Aim... Fire, Aim..."". You build a small piece of the software, make sure it's what the user actually wanted, and continue on from there with the feedback you've received. In waterfall, when you design the system up front and only deliver it to the customer when it's done, it's more expensive to make changes."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Marina Slemender,2020,"Some developers dislike Agile and list these things as disadvantages of such philosophy:
daily standups are a moment in which the team decides who they should blame and how little has recently been done,
retrospective planning is here to help them decide who to blame overall,
too much control,
not enough time per Sprint.
Of course, these are personal views of some developers., but the matter is viewed from their perspective, these items should be taken into consideration."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Keshav,2020,"Agile software development also referred to simply as Agile is a type of development methodology that anticipates the need for flexibility and applies a level of pragmatism to the delivery of the finished product. Agile software development requires a cultural shift in many companies because it focuses on the clean delivery of individual pieces or parts of the software and not on the entire application.
Benefits of Agile include its ability to help teams in an evolving landscape while maintaining a focus on the efficient delivery of business value. The collaborative culture facilitated by Agile also improves efficiency throughout the organization as teams work together and understand their specific roles in the process. Finally, companies using Agile software development can feel confident that they are releasing a high-quality product since testing is performed throughout development, providing the opportunity to make changes as needed and alert teams to any potential issues.
The four core values outlined in the Agile Manifesto are:
Individual interactions are more important than processes and tools. People drive the development process and respond to business needs. They are the most important part of the development and should be valued above processes and tools. If the processes or tools drive development, then the team will be less likely to respond and adapt to change and, therefore, less likely to meet customer needs.
A focus on working software rather than thorough documentation. Before Agile, a large amount of time was spent on documenting the product throughout development for delivery. The list of documented requirements was lengthy and would cause long delays in the development process. While Agile does not eliminate the use of documentation, it streamlines it in a way that provides the developer with only the information that is needed to do the work -- such as user stories. The Agile Manifesto continues to place value on the process of documentation, but it places a higher value on working software.
Collaboration instead of contract negotiations. Agile focuses on collaboration between the customer and project manager, rather than negotiations between the two, to work out the details of delivery. Collaborating with the customer means that they are included throughout the entire development process, not just at the beginning and end, thus making it easier for teams to meet the needs of their customers. For example, in Agile software development, the customer may be included at different intervals for demos of the product. However, the customer could also be present and interacting with the teams on a daily basis, attending all meetings, and ensuring the product meets their desires.
A focus on responding to change. Traditional software development used to avoid change because it was considered an undesired expense. Agile eliminates this idea. The short iterations in the Agile cycle allow changes to easily be made, helping the team modify the process to best fit their needs rather than the other way around. Overall, Agile software development believes change is always a way to improve the project and provide additional value.
Disadvantages-
* Active user involvement and close collaboration are required throughout the development cycle. This is very engaging, rewarding, and ensures delivery of the right product. It’s the fundamental principle in agile that ensures expectations are well managed. And since the definition of failure is not meeting expectations, these are critical success factors for any project. However, these principles are very demanding on the user representative’s time and require a big commitment for the duration of the project.
* Requirements emerge and evolve throughout the development. This creates the very meaning of agile – flexibility. Flexibility to change course as needed and to ensure delivery of the right product. There are two big flip sides to this principle though. One is the potential for scope creep, which we all know can create the risk of ever-lasting projects. The other is that there is much less predictability, at the start of the project, and during, about what the project is actually going to deliver. This can make it harder to define a business case for the project, and harder to negotiate fixed-price projects. Without the maturity of a strong and clear vision, and the discipline of fixing timescales and trading scope, this is potentially very dangerous.
* Agile requirements are barely sufficient. This eliminates wasted effort on deliverables that don’t last (i.e. aren’t part of the finished product), which saves time and therefore money. Requirements are clarified just in time for development and can be documented in much less detail due to the timeliness ...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Keshav
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Anonymous,2020,"The practice itself is rubbish
It must been introduced by some human trafficking fool or a idiot who just switches of the lights in chicken farm yo confuse the hens to force them for 2 eggs within 24 hr period
Yea its design to cut cost as much as possible but extract work as long as possible
Agile put a gun on everyone's head : yes in agile there is no relaxation everyday you have to move the task and complete it so people don't have option to relax themselves
Agile only works with team is 100% experts. Since people have only days to finish the task. Everyone need to be a expert to make and understand the things and finish them in hours . It won't work with team mix of Medicare + dumb guys ( that's the forums reality on any software team hardly 1 or 2 guys being experts rest everyone relies on buttering and management courtesy )
Documentation is scrapped . As the main task itself is completed in days people are already frustrated and hardly have time to work on documentation and resources . It leads to hell lot of rework . So some one will work for 2 yrs and create so much of customized setup and decide to leave the team one fine day .. so without documentation the new person can't use and en have the same tool . So he creates his own tools and practices
Lack of control . Agile only makes brand and practice .. but there is hardly any control on scrum master . People just add task and extend it and screw the sprint as the task has multiple third party work associated with them
Agile is fictitious . First of all agile is extremely fictitious as it expect everyone has a ETA yup when u plan to create a apple pie everything has ETA including the apple tree which grows the apple for your pie ( what a foolish practice)
Agile is risky to software . Agile make the work on task based approach .. so people have task and limited time so they just concentrate on completing the task and close it and love to next item . So testing and security validations are literally ignored . So this leads more software is prone to attacks and compromise
Agile has highest disapproval rate . Literally 80% of developers and engineers hate agile and wait when it will collapse .So there is no point of selling a bacon roll in vegan community. But due to the management adamancy and ignorance it will be there for sure"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,William Hruska,2020,"Here are five leading disadvantages of agile software development.
Less predictability. For some software deliverables, developers cannot quantify the full extent of required efforts. ...
More commitment and time.
Greater demands on developers and clients.
Lack of necessary documentation.
The project easily falls off track."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Jessica Wood,2021,"Hi,
Below mentioned are some of the disadvantages of agile software development:
• Limited documentation
• Due to less predictability, the projects might fall off track
• Difficulty in measuring the progress of the project
• Requires greater collaboration, commitment, and time
Thanks!"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Harmanpreet Kaur,2021,"Agile is all the rage these days, but what are its drawbacks? Agile isn't for everyone, it turns out. So, before you embark on a large-scale Agile transformation, keep these Agile drawbacks in mind. Here are some of them:
It can be difficult to estimate the effort needed at the start of the software development life cycle for certain software deliverables, especially large ones.
The importance of required design and documentation is undervalued.
If the customer representative is unclear about the desired end result, the project may quickly become derailed."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Muntaha Anjum,2022,"Despite its many advantages, Agile is not for everyone. As a result, it is critical to understand the drawbacks of Agile approach. With that in mind, consider the following five major downsides of Agile.
Inadequate resource planning
Because Agile is predicated on the premise that teams will not know what their ultimate product (or even a few cycles of delivery down the line) will look like from day one, predicting efforts such as cost, time, and resources necessary at the start of a project is difficult (and this challenge becomes more pronounced as projects get bigger and more complex).
Documentation is limited.
Documentation occurs throughout an Agile project, and is typically ""just in time"" for generating the output, rather than from the start. As a result, it becomes less detailed and frequently gets pushed to the back burner.
Dispersed output
While incremental delivery might assist get products to market faster, it is also a significant downside of Agile approach. Because when teams work on each component in separate cycles, the overall result typically becomes quite fragmented rather than a coherent entity.
There is no definitive conclusion.
Because Agile involves less preparation at the start, it is simple to become sidetracked in delivering new, unanticipated capabilities. Furthermore, there is no clear concept of what the ""finished product"" looks like, hence initiatives have no end date.
Difficult to measure
Because Agile delivers in chunks, monitoring success necessitates looking across cycles. And because the project is ""see-as-you-go,"" you can not specify many KPIs at the start. Because of the length of the game, tracking progress is tough."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Jacqueline Sanders-Blackman,2023,"I often tell my client that you will go slower before you go faster. Depending on the extent of the transformation and what is their current state, the transition to agile is like any significant change, and there will be some painful moments.
You can set up the agile framework, but if the team has the wrong mindset or the team is dysfunctional as a team, then agile is going only to give you minimal gains.
Agile is very flexible (Agile does not equal Kanban. There are a lot of frameworks to pick from. You can likely find one or a hybrid of a couple that will work for you.) But many times, people want to implement level 1 (i.e., ceremonies, user stories, pointing) but want the benefits of a level 5 implementation.
Agile has become the catch-all clearinghouse for pre-existing dysfunctional teams, management, portfolios, and company cultures. So even pre-existing issues will get blamed on Agile."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,ProAI,2023,"Lack of upfront planning: Agile development relies heavily on incremental delivery and emphasizes flexibility, which can lead to a lack of upfront planning and a lack of clear project scope and objectives.
Difficulties with budgeting and resource allocation: Agile development often involves frequent changes and re-prioritization of requirements, which can make it difficult to accurately budget for and allocate resources.
Lack of documentation: Agile development emphasizes working software over comprehensive documentation, which can lead to a lack of technical documentation and make it difficult for new team members to understand the codebase.
Dependence on self-organizing teams: Agile development relies heavily on self-organizing teams, which can be difficult to maintain and can lead to communication and coordination problems.
Difficulties in managing and measuring progress: Agile development emphasizes rapid delivery of working software, which can make it difficult to measure progress and ensure that all project objectives are met.
Can create confusion and chaos: Agile development can create confusion and chaos, as it can be difficult to understand who is responsible for what, and what the priorities are.
Difficulties in handling change requests: Agile development emphasizes flexibility and the ability to adapt to change, which can make it difficult to handle change requests and keep the project on track."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Holograph Technologies,2023,"Agile software development, like everything else, has its drawbacks. It can sometimes lead to unclear project scope, making it harder to predict when a project will be finished.
For example, in building a house, changing the design during construction can lead to delays and extra costs. Similarly, in agile, frequent changes can slow down the project and strain resources.
Also, a lack of documentation might make it challenging for new team members to understand the project. So, consider these factors for a balanced approach to agile."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Murray Robinson,2014,"Agile teams move quickly. When an issue blocks progress they raise it openly and expect management to resolve it quickly so they can continue. If the issue is not resolved the team can experience serious delay costs. This can be embarrassing and frustrating for senior executives who made the decisions that created these blockers and have been dealing with them by ignoring them, denying them and covering them up."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Jayme Edwards,2019,"Since agile development means deliver software in a way that’s easy to change, the problems I’ve encountered while working on over 30 projects are:
Management confusion. Most companies are still led by command-and-control management structures steeped in WWII tradition. Making things easy to change means less bureaucracy.
Less predictability. Why use a method that makes things easy to change if you never plan on changing? Once a team commits to agile approaches, they are literally saying “we assume things will change”. This means plans change all the time, so deadlines and estimates become less valuable.
Consequences of perfectionism. Since requirements of what will be built will change, and features that were built before will need to be ripped apart and re-written - refactoring becomes the norm in agile software development. When engineers create designs that are too rigid, or try to make them perfect, they increase the cost of change.
Greed. Because agile is a popular term, and certification companies have emerged that promise “become an agile leader in 3 days!”, the greed of people who want to profit off certifications, and make money doing a job they are inexperience for creates big problems. Working in a way that makes things easy to change is counter to over 50 years of history in society, and this is something that’s not easily learned in a short period of time - especially in an industry as complex as software.
I discuss many of the pitfalls of agile that people don’t like to talk about publicly on my YouTube channel. Here are a couple specific videos that may help you understand this topic:"
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Assistant,2024-08,"While Agile development has many advocates, there are several reasons some programmers express dissatisfaction with it:
Misimplementation: Agile principles can be misunderstood or poorly implemented. Some teams focus more on following rituals (like daily stand-ups) than on the core values of Agile, leading to frustration.
Pressure and Pace: Agile emphasizes frequent iterations and rapid delivery, which can create pressure to meet tight deadlines. This can lead to burnout and a perception that quality is sacrificed for speed.
Overhead: Agile methodologies often involve extensive meetings, planning sessions, and constant communication, which some programmers feel detracts from actual coding time.
Changing Requirements: While Agile is designed to accommodate changing requirements, constant changes can disrupt workflow and lead to feelings of instability among developers.
Team Dynamics: Agile relies heavily on teamwork and collaboration. In teams where communication is poor or where there are conflicting personalities, Agile can exacerbate issues rather than resolve them.
Lack of Documentation: Agile often prioritizes working software over comprehensive documentation, which can lead to knowledge gaps, especially for new team members or when revisiting projects.
Inflexibility in Practice: Some teams rigidly adhere to Agile practices without adapting them to their specific context, which can make the process feel dogmatic rather than flexible.
Management Misalignment: Sometimes, management may not fully understand Agile principles, leading to unrealistic expectations or a lack of support for the team’s needs.
These factors contribute to a perception among some programmers that Agile can be more of a hindrance than a help, especially when it is not implemented thoughtfully and adaptively."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Darryl Wagoner,2023,"What is Agile?
Scrum?
Kanban?
something else?
I really dislike Scrum and I am a Certified Scrum Master. Scrum will sooner or later end up with poor software. In ways, it is anti-agile because there are so many “processes”. The worst thing in my mind is the 2-week sprints. Programmers start out doing good work the first week of a 2-week spring, then start feeling the pressure to meet their sprint commitments and start rushing the work. Never ends well. What ends up happening is they pad the amount of time a task takes. So we spend time guessing at effort instead of doing the work.
Kanban, on the other hand, solves many of these problems, by removing some of the processes and working from a prioritized backlog (scrum does as well), but programmers take the highest priority task and work on it until done. No stand-ups, sprint planning, etc. Management hates it because they don’t ha...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Darryl Wagoner
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Jeff Gib,2019,"Scrum erases some of the essential activities of projects, mostly design decisions, necessary evils, getting things clarified so that the right decisions are made (RnD stuff). Here are a couple of examples:
Should we use RDB or NoSQL or combination of both? Ok, which implementation of those should be use? (Just examples…_) MongoDb + MySQL? How does Mongo handle our input or query needs. Hmmm, not very well. Why? Should we switch or tune?
What’s the best way to handle that data widget? Pre-process it once a day? Do it on the fly? Let’s pre-process every day at 4am. (Implement that but… by 4pm it’s too stale). Let’s re-implement it to do it on the fly. But we’ll need another server and interface for that.
How are we going to do auth/auth? What are the capabilities of that geo-spatial library? Does that API in XYZ allow us to do that? What’s a work around for that?
You get the picture. In scrum there’s supposed to be a story worked that you can demonstrate at the end of the sprint. Yeah, yeah, I’ve heard it all before about having stories to do these things. And that WOULD be fine if software dev professionals were running the show. I personally would have a story for each one of the above. The developer would then demonstrate / explain results at the end of the sprint to the team, NOBODY ELSE. But my Direct experience has been, as soon as one of these stories is in the backlog, along comes Joe Scrum Master or Product Owner or Manager and we start arguing about whether that’s a story. Here comes the time wasting nonsense - Can’t we work it into this or that? Or, what can we demo when that story is done because that’s the only way we show progress. You can’t demo THAT! It’s endless nonsense on the dogma that has become scrum.
There’s alot more wrong including how to handle defects flowing in from customers and previous iterations, how to refactor something, etc. I’ve heard the answers from scrum “professionals” and it’s like we’re trying to find the answer to a car question in a yoga manual, i.e. I’m fixing a headlight but that needs to be done in the downward dog position. Everything but the simple stories are unnatural.
Oh, and don’t forget the daily status meetings. Don’t even try to convince me they are Anything But. That’s what they are, that’s what they will always be. A way better way to handle that is a dev is supposed to have responsibility to report potential slippage. If somebody isn’t doing that - then THAT’s when a manager should pop their head in.
It’s a very unnatural, babysitting-like environment."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Gniewomir Świechowski,2021,"I can speak only for myself, but it may be representative for at least part of wider group of so-called “agile-hating developers” so I will be using plural. :)
We do not hate agile. We despise how companies are often smuggling waterfall under agile disguise.
Problem with current understanding of what agile is that people in charge often associate it with particular implementation. Scrum for example. They expect that we will religiously adhere to some arbitrary set of rules with disregard of them working or not for our use case - which is exact opposite of being agile and constantly looking for what works best!
At the same time, when you are “agile” - in aforementioned way, you are still expected to provide waterfall-like estimations for things months away, which you rarely can reason about - without being a prophet, as the same people will change their requirements multiple times, without giving you space for changing guesstimation, they forced you to make before.
It is even more problematic, as this kind of being “agile” is very popular in businesses outside tech sector (most of them!), which means that whatever they have is probably in state of disrepair, obscure for any reasoning about it and very, very fragile. Which makes even 2 week predictions about what we will be able to do at best unreliable and at worst pure fantasy. But don’t expect to be given much space to remediate this problem.
So “agile”(note quotes) lovers create teams that chase this arbitrary deadlines (re-implemented from waterfall) with disregard for technical debt, basic hygiene (understood as CI/CD, automated testing, developer experience, developing common language with business etc.) and quality (re-implemented from waterfall) but with shitload of often unproductive meetings (re-implemented from waterfall).
Teams that are as much “agile”, as the where 20-yrs ago, but more frustrated because all of the bullshit pretending around.
What we hate is when people grab sexy buzz-word and slap it on waterfall-like process without any understanding there are not many canned answers in this field.
To be truly agile everybody in organization have to accept, embrace this constant state of flux every business and every code base is in and act on it - implementing more iterative process, not cling to illusions of predictability under disguise of being “agile”.
We love being agile, we hate being “agile”."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Amir Hakim,2016,"Is nuclear power the biggest evil ever invented ? or is an incredible source of energy ?
Answer: it depends on how you use it!
Currently: Scrum is anti-engineering.
Scrum like everything on earth is a powerful noble idea that capitalism took and turned into an evil monetisation tool, just like Christmas and Vegetarianism. The way it’s usually used, makes it nothing more than continues rapid prototyping while ignoring the technical debt, to generate your first sale and may be sell off the company, then the horrible code base becomes someone’s else problem. It is used by non-technical bosses to drive developers and work them to the bone. To micromanage everything and ask you to log every minute of your day. All the accumulated technical debt doesn’t matter because all you need is to show your feature to sell them. Then once you do, you blame the current heroic development team for the bugs and you replace them with others. It is used so your trade code monkey are driven to produce, while the engineering talent is suppressed. It pushes Devs to choose the fastest solution to implement, not the best solution, because who has time to research and implement that new library or framework that will make you future proof, when you can hammer out few lines now, then when a change comes along, you delete that crap and start from zero. Why try to abstract and code re-use, when you can simply copy-paste. Because when you over or under estimate your user story, management look at you as either a thief, or lazy, or both. Because when you try to object and raise concerns about being hampered by all the tracking and estimation, management says: light process is a privilege that you have to earn. And don’t blame the scrum master for being a management puppet that is only there to spy on the team because he is not trained, but we don’t have the budget for real scrum training. But we are scrum.
Others agree as well
Why do some developers at strong companies like Google consider Agile development to be nonsense?"
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Tom Rose,2020,"Agile is fine. We should all try to be agile
SCRUM is not Agile, never was, never will be. It goes against the most important Agile principle, “People and Interactions over tools and process”
It might be a good methodology for some projects [it is!]. It is most certainly not the one and only good method for everything.
It often takes away the pleasure in work that used to be felt by many excellent programmers that for decades delivered good quality software without the help of SCRUM. That is enough to treat it with suspicion. And it is true of both “real” SCRUM and the cargo-cult variety.
I have never yet met a programmer that asked be part of a SCRUM team. So far as I can see it is always imposed from above by control freaks with the word “manager” or “director” in their job title, but with a complete lack of any ability to manage or capable only of directing in the wrong direction."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Vatsalya Jain,,"One fundamental challenge I see is the emphasis of ‘doing’ Agile and lot of focus of the Scrum Master and Project Managers to ensure things are done to adhere to the agile guidlines.
For eg: Agile speaks about estimating a story in terms of story points, which is a comparative analysis for a developer vis a vis the development he has done in the past.
However, many of the scrum masters I speak to during interviews state that
they follow the logic of 8hrs = 1 story point
When I probe them how would this hold true for Person A ( who is a developer ) vs Person B ( who is an architect) , the answers are not there yet.
While Agile is a framework for the teams to enable to work efficiently, the governance around the measurements mechanisms and the lack of understanding of true agile principles is the biggest challenge."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Peter Pang,2019,Why hate Agile? It is a great opportunity to micromanage the developers and keep their noses on the grindstone at all times. It is yet another management fad which the humanity will survive. It is as simple as that.
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Robert Garrett,2019,"Because they're finally wising up. It's not that the underlying principles of “Agile” ( which actually should be called agile development ) are flawed, they aren't. They're actually quite good. The problem lies in how the majority of organizations have gone about implementing (I should say TRYING to implement) them. They've turned what should be a set of simple ideas into a monstrous behemoth of regimentation, rules, endless meetings, and mindless obscure jargon that is anything BUT “agile” and is now in the process of collapsing under its own weight. Which is exactly what SHOULD happen."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Mario Ray Mahardhika,2021,"Like everything else in this world, given enough population, every competing options will have supporters, and the other way around, haters.
Not all developers dislike agile. I don’t. I just think it shouldn’t be run as is, but adjusted to your environment, including your customers. For example, scrum sacred sprint mechanism isn’t acceptable for customers when they face a bug that can both be identified and analyzed quickly with one line fix that should be done in 5 minutes, they have to wait for 1–2 weeks. This is a common case...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Mario Ray Mahardhika
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Robin Dymond,2021,"Before asking why, ask if.
In a large scale transition to Agile from waterfall at a top US bank, morale was surveyed before the transition and after 6 months of working in an Agile way. The survey was given to everyone who was transitioning to a Scrum team. The survey found a marked improvement in morale and job satisfaction. In a healthcare software company in the EU with 400 developers we found the morale improved and people were happier.
In working with companies across the US, EU and Canada in Agile transitions the large majority of people doing the work like the change to Agile and don't want to go back to waterfall.
Calling waterfall traditional is a bit silly. The first Scrum project was in 1993, the first paper in 1995 and the Agile manifesto was created in 2001. So Agile isn't new, especially when compared to the speed at which technology changes."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Miles Fidelman,2016,"Because it's broken. For incremental changes, to small projects, it works fine. For large, complex systems, it ignores anything resembling well thought out architectural design - leading to truly hideous systems."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Sneha Gangan,2015,First of all the time Limit. It stops the creative process that takes time to develop.
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Anthony Minessale,2015,Software development is chaos. Agile is an attempt at order. Order can be brought to chaos only temporarily. Anyone who hates on it probably is being forced to follow it at all times. Its good to have guidelines but rules are meant to be broken when the chaos is at a maximum. The secret that takes most 10+ years to learn is to avoid religous affinty to any one style or practice for anything to do with tech but be willing to borrow from any of it.
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Aniket Kulkarni,2019,"In my personal opinion, agile is used half baked way, most times. Most companies use it to just short circuit good development processes as they want product ‘now’. Such partial and meaner agile adoption to not compromise on time burns out developers. Depending on company size, most times, developers may not even get a proper say in deciding estimates for the sprints, and that and then agile is set for failure. Honestly, agile is carefully crafted and works wonderfully when fully and properly adopted."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Jos Buurman,2021,"We can view Agile, as written down in the Manifesto and elaborated in principles, as a problem solving process: how do we prevent not delivering valuable software to customers?
Management of organisations often have different problems such as: how do I achieve my targets and how do I manage my budget constraints?
This often leads to top down mandated “Agile” where agile is nothing more than a way to keep track of progress and trying to speed things up.
Keeping track and speeding up then become the goal, instead of these two being the result of delivering valuable software to customers.
It’s mainly this kind of pseudo-agile which is loathed.
Another facet of the problem is that agile working does not suit every kind of work. It fits development with a fair amount of uncertainty and no hard deadline. If a mandated regulatory change hits you, to be delivered in x months time, you might want to resort to a more planned approach such as PRINCE2/waterfall.
Organisations which attempt agile in such circumstances might find that it doesn’t work well and blame agile."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Ray Gardener,2021,"Because of the way Agile is misimplemented. It's a textbook example of something that works great in theory but terribly in practice, because it doesn't take human nature into account."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Acko Manah,2024-02,"Because it is bull. Really in a different context a report was described by Stormin Norman as: ""bovine scatology.""
He wasn’t talking of Agile but it applies. imagine having scrum each morning at war!
Agile tries to replace people with process. It is impossible to replace a dedicated team of skilled people with a good team leader with process. You are wasting time any paying a scammer. Design and development of software is part engineering; part art."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Chuck Cobb,2021,Probably because a lot of software developers just want to sit in their cubes with their headsets on listening to tunes and write code. Agile forces then to interact with other people and take on additional responsibilities beyond just coding.
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Dale N Reynolds,2021,I know of no software developers who do not like agile much better than traditional. I know hundreds of software developers.
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Luis Espinal,2019,"Because we are emotional creatures deeply set in our ways.
On the one hand, we have undiscipline cowboys that will hate anything that makes them change their way (Agile included.)
On the other hand, we have developers that have run into institutions that have some horrible process that they call “agile”, and, in some perverted form of Pavlov’s conditioning, they have developed an aversion to the term (never knowing or bothering to know if that was actually “agile.”)
Don’t get me wrong, there are issues with Agile. But most of the hate (or love) for Agile is just emotional, uneducated non-sense."
https://www.quora.com/Why-do-so-many-programmers-hate-Agile-development,Andy Brandt,2018,Because these days many of them experience all kind of idiocy and dysfunction under that label and many are too lazy to actually read or attend a class or a meetup to actually try and understand what it is about. You would be amazed how few Scrum Masters read the Scrum Guide let alone a book about the subject.
https://www.quora.com/Why-do-software-developers-hate-Agile,Assistant,2024-08,"While many software developers appreciate Agile methodologies for their flexibility and iterative approach, some express frustration for various reasons:
Misunderstanding of Agile Principles: Many organizations adopt Agile without fully understanding its principles, leading to a checkbox mentality rather than a genuine embrace of Agile values.
Increased Pressure: Agile often emphasizes rapid delivery and frequent iterations, which can lead to increased pressure on developers to meet tight deadlines, sometimes at the expense of quality.
Meetings and Ceremonies: Agile frameworks often include numerous meetings (like daily stand-ups, sprint planning, and retrospectives), which can feel excessive and time-consuming, detracting from actual development work.
Scope Creep: The flexibility of Agile can sometimes lead to scope creep, where requirements continuously change, making it challenging for developers to maintain focus and complete tasks.
Lack of Documentation: Agile promotes working software over comprehensive documentation, which can lead to difficulties in understanding the system later, especially for new team members or during maintenance.
Team Dynamics: Agile relies heavily on team collaboration and self-organization. In teams where members are not aligned or where there are conflicts, this can lead to frustration and inefficiency.
Management Misalignment: Sometimes, management may not support Agile practices effectively, leading to a disconnect between what developers are trying to achieve and what is expected from them.
Tooling and Infrastructure: Agile requires certain tools and infrastructure to support continuous integration and delivery. If these are lacking, it can hinder the Agile process and frustrate developers.
While Agile has its merits, these challenges can lead to discontent among developers, particularly if the methodology is not implemented thoughtfully."
https://www.quora.com/Why-do-software-developers-hate-Agile,James Thayer,2018,"“…the agile process…”
These three words sum up what I dislike…the idea that there is a singular process — or even a small number of processes that, if followed like a recipe, will magically give good results.
It just ain’t so. As Fred Brooks famously said “[There is] No Silver Bullet.” People and culture determine success. Process is merely a tool. And like all tools, process (whether agile or not) can be wielded in ways that are either constructive or destructive.
Now, that said, in today’s world, situations change rapidly and that means product requirements will change rapidly. For this reason, in most cases, lack of agility is not an option. To be successful, engineering organizations must be agile (at least to some degree.) The only question is how they achieve agility.
Fortunately, over the last three decades (or so), there is a pretty good record of techniques and strategies that have been successfully deployed to achieve agility. It is incumbent upon engineering leaders (both formal and informal) to be aware of this body of work so that they can draw upon this knowledge. There is no one-size-fits-all process that will work for every organization. Wise leaders will recognize what strategies and techniques will work for their organization and they will forge their own process that supports the successful delivery of products.
Never lose sight of the fact that “agile” is a means by which success is achieved. It is never the end goal itself."
https://www.quora.com/Why-do-software-developers-hate-Agile,Tom Marsh,2015,"Even on good agile projects it's easy to feel like you are still under producing or that you are sacrificing quality for speed.
Teams that pair all day sometimes feel like there isn't enough time to reflect. Teams that practice TDD sometimes feel they spend too much time writing or re-writing tests. Some teams feel like they spend too much time estimating, others that they don't spend enough designing. Everyone is upset at the volume of defects.
The real problem is that a good...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Tom Marsh
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/Why-do-software-developers-hate-Agile,Michael Lloyd Lee,2022,"As a software engineer do you hate the agile process
No.
and why?
Agile (lower case A) works in a large number of cases. As long as you do the most important part of it. Introspection and adaptation."
https://www.quora.com/Why-do-software-developers-hate-Agile,John Baker,2018,"I do not hate agile methodology and here I listed some of the main benefits of it:
High product quality - in agile development, testing is integrated during the cycle, which means that there are regular checkups to see that the product is working during the development. This enables the product owner to make changes if needed and the team is aware if there are any issues.
Higher customer satisfaction - the product owner is always involved, the progress of development has high visibility and flexibility to change is highly important. This implies engagement and customer satisfaction.
Increased project control
Reduced risks
Faster ROI - the fact that agile development is iterative means that the features are delivered incrementally, therefore benefits are realized early while the product is in development process."
https://www.quora.com/Why-do-software-developers-hate-Agile,Andy Wootton,2020,"“Agile” is an adjective that describes processes, not a single process. “The Manifesto of Agile Software Development” is a page of relative values that you can use as a metric against any process of your own choosing. Anyone who thinks they hate it, probably actually hates something else, like a poor process they’ve been told to follow."
https://www.quora.com/Why-do-software-developers-hate-Agile,Anatoly Spektor,2018,"I have a question on your question: Why would anyone hate agile process ?
I am a Software Engineer of 6 years, Scrum Master and Agile Coach. I move towards teaching Agile from being fascinated by the process by being a Developer.
There are times when people have their own flavour of Agile, which can not be appealing - but mindset of iterations, and producing software that is reliable - I don’t see what here not to like ?"
https://www.quora.com/Software-Engineering-Why-do-some-people-hate-on-Agile-Scrum,Anonymous,2021.0,"Because, precisely, it erases engineering. i.e. it forbids planning as we were thaught, studied and practiced for, it punishes thinking and design, you are a rebel if you spend some time on documentation or ask for it if you want to know part of the legacy code, nstead they prefer spend hundreds and hundreds of hours talking about the same thing again and again. Guess what, if the Architect/Engineer would have been allowed to document this piece of the system, the whole team wouldn't need to waste so much time asking the same detail again and again…. Guess what, the team will have new hires and they will ask and more time would be spent on explaining the same thing over and over again"
https://www.quora.com/Software-Engineering-Why-do-some-people-hate-on-Agile-Scrum,Bruce F. Webster,,"Because it’s often seen as a “silver bullet” that can magically overcome the essential complexities of software engineering. And it isn’t. Nothing is.
Back about 30 years ago, I wrote and published a book titled Pitfalls of Object-Oriented Development (M&T Books, 1995). Now, I wasn’t a skeptic of OOD — on the contrary, I had just spent several years as chief architect and lead developer of a desktop publishing program written entirely in Objective-C. But OOD was seen as a “silver bullet” back then, with incredible hype as to what it could do, and I felt I needed to point out some of the actual problems with blindly adopting OOD as the cure to all your ills. And the first three chapters of my book covered managerial, political, and conceptual pitfalls in adopting OOD (and of software engineering in general).
What I subsequently realized is that those pitfalls can be applied to just about any new technology or methodology (‘TOM’) that is being adopted as a panacea for the usual challenges of software engineering. And so I rewrote them to be more general, I have them posted online, and they are part of the required reading for my CS 428 students. I once posted this list to a private tech listserv, and one of the senior experienced developers there said, “You could substitute the word ‘agile’ for ‘technology or methodology’ and you’d be spot on.”
Along the way, in my work as an expert witness, I have frequently seen a trend in large software projects that are late. At around the second major schedule slip, the development organization will sometimes adopt “agile” as the methodology that will magically get them back on track — and this in spite of the fact that they’ve never used agile (or what they think it to be). The usual pattern is that they then abandon it after a few months, since it’s not working for them.
The core truth is that methodologies, like programming languages, are just tools. They can’t overcome a lack of experience and/or competence on the part of managers, team leaders, or developers. People are what matter most. Give me a small group of talented, experienced developers, and I don’t care what language or methodology you mandate; we’ll get the job done, assuming it can actually be done.
Here’s my list of pitfalls:
Managerial pitfalls
Using the wrong developers
Using the wrong metrics (or none at all)
Lying to yourself and others
Not identifying and managing risks
Adopting a technology or methodology without well-defined objectives
Misjudging relative costs
Allowing new features to creep (or pour) in
Allowing the specification to drift or change without agreement
Attempting too much, too fast, too soon
Abandoning good software engineering practices
Political pitfalls
Not educating and enlisting management before the fact
Underestimating the resistance
Overselling the technology or methodology
Not recognizing the politics of architecture
Getting religious about the technology or methodology
Getting on the feature release treadmill
Betting the company on a given technology or methodology
Picking the wrong horse
Conceptual pitfalls
Adopting a new technology or methodology for the wrong reason
Thinking a new technology or methodology comes for free
Thinking a new technology or methodology will solve all your problems
Confusing buzzwords with concepts
Confusing tools with principles
Confusing training with skill
Confusing prototypes with finished products
Confusing approach with results
Asking the wrong questions
Your mileage may vary."
https://www.quora.com/Software-Engineering-Why-do-some-people-hate-on-Agile-Scrum,Dave Voorhis,2022.0,"The original notion of Agile[1] was:
Individuals and interactions over processes and tools;
Working software over comprehensive documentation;
Customer collaboration over contract negotiation;
Responding to change over following a plan.
I don’t know any developers who dislike that, because it’s about empowering software engineers.
I know some managers disliked its original form, because it implied a lack of managerial control. That’s because software engineers see themselves as the source of software and software excellence, but some managers see themselves as the sole source of software and software excellence and software engineers are — or should be — mere instruments to implement managerial vision, like compilers with eyes and fingers.
So those managers pushed back against Agile in its original form, and came up with what we sometimes see described as “agile”:
Processes and tools over individuals and interactions;
Comprehensive Jira ticket comments and constantly-revised Confluence pages over working software;
Customer interaction via a hierarchy of managers, analysts, and formal processes rather than collaboration with software engineers to build software that works;
Endless changes due to lack of any planning or foresight.
It should be self-evident why people might dislike that kind of “agile.”
Footnotes
[1] Manifesto for Agile Software Development"
https://www.quora.com/Software-Engineering-Why-do-some-people-hate-on-Agile-Scrum,Ray Gardener,,"I honestly can't think of anything Agile adds that improves software development.
Sprints? But everyone is already working diligently. If anyone isn't, it'll be noticed and dealt with. Code review sniffs em out.
Standups? 99% of my coworkers don't need to know what I'm doing and vice versa. And for the rest, we have email/chat/etc. If a more global issue arises (e.g. I had to refactor a library) then there's email and maybe a meeting.
Task management? We're already using a database, maybe even JIRA. They've been around since forever.
User stories? We already have those, we call them specs.
Sprint retrospectives? We already adopt best practices and drop bad practices. I got an email yesterday from John about this awesome Youtube video describing how to optimize something.
Sprint planning? You mean task assignment? Yeah we already do that.
Adapting to change? We already use loose coupling design patterns, they've been around forever too.
CI/CD? That's not an Agile idea, everyone's been doing that too for eons.
Tests? We've always had a QA department. We have test programs too. Nothing new there.
But the most common reason is that Agile is abused or misimplemented. People before processes? Nope. Continual refactoring? No, no! Typical management thinking: Hmmm, I can hire a bunch of mediocre developers and Agile will make their productivity match good ones. Sorry, but that's not what it was about.
Take ten good developers working without Agile, and another ten ordinary developers (or let's say eight ordinary and two good) using it. The first team will wipe the floor with the second. It won't even be close.
If you want to boost productivity, it's very simple: train your developers. There's no substitute for skill."
https://www.quora.com/Software-Engineering-Why-do-some-people-hate-on-Agile-Scrum,Jaap Koop,2023.0,"‘A fool with a tool is still a fool.’
I have no issues with Agile development per se. It is an SDLC that can work really well when applied ‘correctly’, and by the right organisations. With right organisations I mean development shops whose software products are their main asset.
The issues I have with Agile development (and I will generalise):
Applying the methodology to any software project without consideration of the scope of work, thinking along the lines ‘if it works for Google, it must work for us’ (did I tell you that I think that following Best Practices is just a lame excuse for not doing proper analysis?). But what if your project is an upgrade of your OS? What is the MVP here? One upgraded system?
An SDLC should reflect the (product) risk associated with the project. Sometimes, Waterfall or iterative (or dare I mention Clean Room?) is simply more effective in mitigating risks. If I can choose what plane to board where the one says ‘My software is Agile developed’ and the other says ‘My software is Clean Room developed’, I know what plane I will board. Hint: it is not the first one.
Once the burn rate for an Agile team is established, it is cumbersome to change a team. Consequently, it is harder for team members to grow and get promotion into a more senior role. In addition, there are less roles and all participants are expected to be generalists, rather than specialists.
These are my personal observations, and they are generalisations."
https://www.quora.com/Software-Engineering-Why-do-some-people-hate-on-Agile-Scrum,Robyn Hood,2022.0,"There are many answers to this question.
But my biggest beef with Agile are
Many shops labelling themselves as Agile but are in fact breaking fundamental Agile rules
Great examples include no defined sprint start and sprint end. Product owner is the scrum master. And much more…
Too much bastardized versions of doing what the customer wants and not enough of understanding of what the customer needs.
I once raised a concern with Product that we’re taking “requirements” too literally with no analysis or taking account downstream implications. I compared the development practice to car manufacturing. I simply asked Product “If the customer never asked for brakes, would we still ship the car?” Blank stares said it all. Yes?
Sprint items often ignore technical debt
Because “it’s not what the customer wants” yet it chews up development time which is not reflected on the scrum board. Product will often tend not to yield priority until technical debt becomes grows too severe to ignore. And it’s not their fault. But it is a flaw in the process because they don’t feel the pain.
In other words, preventive maintenance is ignored so it becomes manage by crisis which creates crisis."
https://www.quora.com/Software-Engineering-Why-do-some-people-hate-on-Agile-Scrum,Jos Buurman,2023.0,"The main reason people dislike agile is that it requires a transformation of the existing organisation.
Far to often someone, be it a developer, manager or someone else, proposes “working agile” and starts to implement what is known as agile ways of working. Scrum, kanban, whatever.
The problem these people face sooner or later is that the organisation is not attuned to working agile, which is in its core a culture and ingrained habits problem.
An organisation exists to produce results, which is achieved by processes. Agile working does not stop this, but puts a different emphasis on the results and processes. It tells that processes can be improved, adjusted, and that results will improve because of this.
While this might be true, the current process is likely the result of a large amount of past experience, experience that any agile transformation lacks.
While the result of such a transformation might be better, this is because of the leaning experience in the transformation, and that learning experience takes time and effort. There will be resistance to such change, sometimes significant.
Add to this that “agile” is likely introduced to “solve problems”.
This is not the case. While the result of working agile might result in solving known current problems, it will also uncover many existing problems.
For example, the last couple of years one of our teams started to collaborate a lot more by removing department boundaries. You would expect that the time to get from A to B would decrease.
But we find that this depends a lot of which A to B we are talking about.
Responding to changing markets? Huge improvement.
Changing product propositions: not so much.
The latter not because of the lack of collaboration, but where previously people could point to each other for not collaborating we now find that the process to change the proposition is not efficient.
We solve A, only to find out that B was just as problematic, but never noticed because of A.
You learn, but it does not result in faster delivery.
Agile, done right, will just allow you to uncover these inefficiencies faster, but you still have to solve them.
Last, and this is interesting, Agile might be too slow.
Let’s assume a scrum setup with daily standup and sprint length of a week?
What if we need to respond and adapt to changing circumstances (with competitive advantage) on daily or even hourly basis?
Your PO + SM + dev team cannot respond in time, there is too much overhead.
As final remark something which intrigued me.
Someone made an assumption about the role of the (scrum) product owner.
I responded with a deviating answer. The guy gets confused: that deviates from what my scrum exam told me. I told him to start reading the vision of those who developed scrum, it's out there… And goes far beyond what the exam will ask you.
The problem here: assuming scrum/agile is something you can learn from books and is known when you pass the exam.
That’s the kind of mindset which hinders agile, even more than a manager deciding that agile is the way forward because some consultant told him, or because that’s what everybody is doing…"
https://www.quora.com/Software-Engineering-Why-do-some-people-hate-on-Agile-Scrum,Riley Claire,2022.0,"The fact that software developers and employees' supervisors don't get the notion of agility is one of the main reasons why Both groups despise agile. They attempt to apply Agile principles in a structured way, which goes against the spirit of Agile, and they ultimately fall back on tried-and-true project management techniques.
Their failure to comprehend the Agile Manifesto's guiding principles is to blame. They use structure and hierarchy that they are accustomed to through experience since they cannot understand the notion. This causes a work environment where employees feel like they are enslaved, which further distances them from teamwork and causes them to cooperate less frequently.
Several things apply to other outside programmers:
Agile Labels on the Same Old Stuff Being ""SOLD""
Agile Uses ""Jargons"" Far Too Much
Agile = End of Liberation
The fallacy of programmers believing they are not competent enough
The consultants for agile will choose their own schedules
Programming in Doubles
Lack of Senior Management Commitment to Agile
Agile, according to programmers, mandates ""doing more with less"""
https://www.quora.com/Software-Engineering-Why-do-some-people-hate-on-Agile-Scrum,Alex Osborne,2016.0,"My take on this is:
1. It doesn't lend it self well to people who want BRUF (Big requirements up front) and want detail estimates and a detailed plan before you start a project. Some stakeholders want this, this is not how Scrum/Agile works. People who say they hate Scrum tend to not understand the core differences between waterfall and agile enough to even debate it. In a lot of cases companies, teams and the like don't try hard enough with Agile. They do the practices and wonder why they aren't delivering?? Well, because attending some meetings and getting a white board doesn't go deep enough. Ask 100 teams what the principles of agile are and they stare at you blankly. Its all about continually refining the process, inspecting and adapting as you. Many teams that I've worked with in the past, once they've got the principles down, they just stay with it, even if the project changes, the context, the complexity and wonder why things aren't going well enough.
From a stakeholder perspective I'd say this:
1. Senior Management want to fix time, cost and quality and scope from the outset - this doesn't play well with emerging requirements and pivoting, hypothesis for change and small experiments to derive a good ROI. You need a good PO to help here.
2. People get fixated on 'when' they finish, not 'why' the are doing it. Is there any business value? How many times I've had to say to Directors, ""what problem are you trying to solve?"" the solution they devised for themselves take 6 months and they've given me a deadline, tonnes of work and we could have given them 80% in 2 weeks. So, now I use the word 'no' lots...95% effort in understand the need, the opportunity or the perceived problem, then options analysis, then prioritisation, the theme, epic calve up, then start work on a solution that provides a good ROI with the least amount of effort. We add value 10 times in the year, not once, happy days.
3. The scrum skeleton is an empirical process, so feedback is key. If your building a product/feature because your boss had an idea in the shower and it will take six months to build some perfect thingy bob, you've missed the point. When it bombs and he or she is unhappy and blames the team, well...Unless you have some kind of feedback early, how you could possibly know whether you are going in the right direction or now??? it just boggles the mind how waterfall every derived any value for anyone. NHS as an example.
4. Most teams don't know how to manage expectations with estimates. Giving a fixed timeline is silly, especially if you are releasing features one at a time. High level estimates (wks) with tolerances is good enough and it will refine over time. See 'cone of uncertainty'. If you have an arbitrary date, start culling the low priority features.
5. Some people in management hate agile because its implemented badly. Some hate it because they see no outputs/outcomes, due to poor prioritisation by the PO, some hate it because they have no idea what it means to use Scrum and don't care. Some dislike it because it disrupts the command and control behaviours of old, where the Project Manager knew everything, aggregated all information to themselves and passed out instruction to all team members. Personally, I am delighted that traditional project management has been disrupted. With Scrum its more of a shared efforts, the PM can't code so can't tell the developers what to do and the PO is more of a facilitator between the stakeholders and the team. Its has a better balance and all team member share in the effort, the wins and the failures. In stops team members parking their brains and waiting to be told what to do. It gets everyone more engaged.
Personally, I think there is far more to gain from Agile than waterfall. The cost of change is lower, reduces contractual relationships between stakeholders and the team, embraces change and uncertainty, boosts collaboration and communication and in a good world, delivers shippable product once a sprint. The stakeholders feel more engaged, the team does and everyone is happy. I might be an idealist, but I've worked very hard over the last 5 years to make these things happen in team, across department/division. It can work with the right people in place. Good POs, good Scrum Masters/Agile Coaches/bright, enthusiastic and talented software developers."
https://www.quora.com/Software-Engineering-Why-do-some-people-hate-on-Agile-Scrum,Steve Seidel,,"From my experience, developers are fine with Agile/Scrum. Why? Because estimates in the backlog are high level in nature. Detailed estimates are only used for sprint planning which is typically 2 weeks at a time.
That said, there was a lot of hype around Agile and people eventually discovered that even for the best case scenarios, it wasn’t a magic bullet to make projects successful. Work doesn’t magically happen faster with Agile. If you ever want to see a real comedy show, watch an agile consultant explain the virtues of Agile to a company’s leadership."
https://www.quora.com/Software-Engineering-Why-do-some-people-hate-on-Agile-Scrum,Andre Simones,2016.0,"Primary reason is the misuse, misunderstanding and horrible implementations of Agile. Many software developers look at it as management's excuse for more micro-management, which is exactly opposite of what Agile requires."
https://www.quora.com/Software-Engineering-Why-do-some-people-hate-on-Agile-Scrum,Mark Roberts,,I suspect that Agile is used by fools to manage developers in the very manner which makes them least productive - constant pressure.
https://www.quora.com/Software-Engineering-Why-do-some-people-hate-on-Agile-Scrum,Reed Wade,2015.0,"Clients can often not want it used because they are happier with an arrangement where a Microsoft Project style list of specific end results and costs is provided up front--often before the product is even designed. This doesn't ever go well but that's only found later.
Government projects have this disease a lot but so do large organisations -- really any place where someone is unable to have the freedom to succeed.
I haven't seen engineers not like it when it's done correctly. I can imagine being involved in a poorly organised or cargo cult style agile process would make people think the whole idea was bad. But even done incompletely, Agile can be quite nice for devs."
https://www.quora.com/Software-Engineering-Why-do-some-people-hate-on-Agile-Scrum,Sayed Hajaj,2016.0,"Because instead of making a very complex thing perfectly, it focuses on making small things quickly to test out assumptions. They prefer to measure progress as how much they have done in terms of their spec where agile development measures progress as how many assumptions they are testing. Basically, they prefer to make a full, bug-less and clean-looking product even if no one wants it and don't like how agile or scrum development can often have bugs or not look perfect."
https://www.quora.com/Whats-wrong-with-Agile-Scrum,Hariharan Narayanan,2016,"Like others have answered so eloquently here, I would also say that there is inherently nothing wrong with Agile or Scrum. Let me list out the issues that I see mostly.
Equating Agile with Scrum with Agile. Agile is not just Scrum. Being Agile is having a certain mindset of going about doing product development. Scrum is just one way of doing it. Many tend to not make this distinction.
Scrum is not a silver bullet that magically solves everything. Scrum, like any other Agile method out there, facilitates bringing out the dirt. If you look carefully. all that the framework facilitates with all it’s ceremonies and roles is to hold a mirror to your development machine and surface issues as early as possible. Further improvement can be achieved only by honestly addressing those issues and following the method so that further issues can be identified and rectified. It does not help if one tends to blame the method for the problems found instead of addressing the problems.
Scrum needs a certain set of pre-conditions to be successful. The primary pre-condition is that the scope of work of a Sprint should not be disturbed during the Sprint. Typically, a Sprint is expected to last a minimum of 2 weeks for Scrum to be of any value. Now, I have seen some start-up teams where work moves and changes quite fast and keeping the scope constant for 2 weeks is nearly impossible. Yet, they want to practice Scrum. So they reduce the Sprint duration to 1-week (or sometimes even less). This is a sub-optimal way of using Scrum because the ceremonies and rituals of Scrum become a hindrance/overhead for very short Sprints. For such environments a much more lightweight Agile method needs to be used until such a time that the Scope is in enough control to stay constant for 2 weeks and then start Scrum.
The “there is only one way of managing product development and this is Scrum” fallacy. This complements the points given above in that some organizations have these experts whose only answer to anything related to Agile is Scrum. This attitude sometimes borders on zealotry. All projects can certainly get better with Agile methods, but not all projects need it. Within the projects that need it, not all projects need Scrum. Agile is not just Scrum and this attitude only exposes a misunderstanding of Agile and Scrum and their inability to take an empirical approach.
Fixation with every team doing Scrum in the exact same way. There is only one exact way of doing Scrum and this was designed by the inventors of Scrum. Even they recommended a rigorous adherence to the definitive method only for the first few iterations, after that teams are expected to empirically adapt the method to their realities. This should mean that every Scrum team is different and will have a slightly different method from other teams. It may so happen that many teams in an org will evolve a same pattern of their method over time. But many times I have seen organizations simply force-fit a fully-customized method, with “best-practices” and all, on all their teams all at once. This takes away the natural learning curve and adaptability of the team."
https://www.quora.com/Whats-wrong-with-Agile-Scrum,Elena Rybnyk,2016,"To begin with, I have to say that Agile and Scrum are not the same things. Agile - it’s some kind of philosophy, the way you think. And Scrum - it’s a method of doing things.
As a BA I had a chance to use different methodologies (Waterfall, Scrum, Kanban, etc.), and I can’t say that one is better, than another, because they are so different. Even more: each of them is good only for some definite type of project. For example: when you’ve got a huge project, where development will take forever to do and your customer changes his mind about requirements 3 times a day, there is no way to complete it using Waterfall. On other hand, when the project is small and you had a chance to deal with similar projects lots of times, there is no reason to break it down into pieces and use Scrum."
https://www.quora.com/Whats-wrong-with-Agile-Scrum,Chuck Cobb,2016,"There is nothing inherently wrong with Agile/Scrum. The concept behind it is very sound. The problems associated with it are involved in how it is implemented. Here are a few typical problems:
Many people are overly zealous about Agile/Scrum and see it as a solution to any possible problem you might have rather than being objective about its strengths and weaknesses. Saying ""Agile is better than Waterfall"" is like saying ""a car is better than a boat"" - it totally depends on the environment that you're in.
Many people also see a binary and mutually-exclusive choice between ""Agile"" and ""Waterfall"" and attempt to force-fit a project to one of those extremes rather than going in the other direction and fitting the methodology to the nature of the project. Sometimes it is necessary to blend an adaptive and plan-driven approach in the right proportions to fit the situation.
Agile/Scrum is meant to be adaptive to fit the approach to the situation but that requires a deeper understanding of the principles behind it. Many people are looking for a simple “cookbook” solution and do it mechanically by the book which is exactly the opposite of how it is intended to be implemented.
Chuck Cobb
Author of ""The Project Manager's Guide to Mastering Agile""
Check out: Agile Project Management Academy (http://agileprojectmanagementacademy.com/pages/free)"
https://www.quora.com/Whats-wrong-with-Agile-Scrum,Assistant,2024-08,"Agile and Scrum have been widely adopted methodologies in software development and project management, but they are not without their criticisms and challenges. Here are some common issues associated with Agile and Scrum:
1. Misunderstanding of Principles
Surface-Level Adoption: Many teams adopt Agile practices superficially without fully understanding the underlying principles, leading to a ""checklist"" mentality rather than a true Agile mindset.
Agile as a Buzzword: Organizations may use Agile as a buzzword to promote a culture of rapid change without implementing the necessary cultural shifts.
2. Overemphasis on Meetings
Meeting Fatigue: Scrum rituals (daily stand-ups, sprint planning, retrospectives) can become burdensome if not managed effectively, leading to decreased productivity and engagement.
Time Consumption: Some teams spend too much time in meetings, detracting from actual development work.
3. Role Confusion
Inconsistent Roles: The roles of Product Owner, Scrum Master, and Development Team can sometimes be misunderstood or poorly executed, leading to confusion and inefficiencies.
Authority Issues: There can be conflicts regarding authority and decision-making, particularly if the Product Owner is not empowered to prioritize effectively.
4. Inflexibility in Practice
Rigid Implementation: Some teams may become too rigid in following Scrum practices, losing sight of the flexibility that Agile promotes.
Resistance to Change: Teams may struggle to adapt Scrum practices to fit their unique context, leading to frustration and inefficiency.
5. Scaling Challenges
Difficulty in Scaling: Implementing Agile or Scrum at scale can be challenging, especially in large organizations. Frameworks like SAFe (Scaled Agile Framework) attempt to address this, but can introduce complexity.
Coordination Issues: As teams grow, coordinating between multiple Scrum teams can lead to misalignment and communication challenges.
6. Quality Concerns
Focus on Speed: The emphasis on delivering features quickly can sometimes lead to compromised quality if testing and quality assurance practices are not integrated effectively.
Technical Debt: Rapid iterations can result in accumulating technical debt if teams prioritize delivering features over maintaining code quality.
7. Customer Involvement
Inconsistent Customer Engagement: Agile methodologies rely on customer feedback, but if customers are not consistently involved, the product may not meet user needs.
Stakeholder Confusion: Different stakeholders may have conflicting priorities, making it difficult for the team to align on product direction.
8. Cultural Fit
Not Suitable for All Environments: Agile may not be the best fit for every organization or project type, particularly in highly regulated industries where strict documentation and processes are required.
Team Dynamics: The success of Agile largely depends on team dynamics and culture; poor team morale or collaboration can hinder Agile effectiveness.
Conclusion
While Agile and Scrum can significantly enhance productivity and responsiveness in software development, they require a deep understanding, commitment to principles, and cultural alignment to be truly effective. Organizations should be mindful of these challenges and continuously adapt their practices to fit their unique contexts."
https://www.quora.com/Whats-wrong-with-Agile-Scrum,Shilpika Gupta,2021,"The only thing wrong in agile scrum is timeboxing. If you are interested in knowing Advanced Agile Scrum raining please contact Shreem Institute of Professional Development. It is one of the best training institute in Hyderabad and they are having branches in Pune, Bangalore, Mumbai, Delhi. They are have well experience trainers and industry standard study material."
https://www.quora.com/Whats-wrong-with-Agile-Scrum,Nick Kitchener,2016,"IMO the biggest weakness in Agile/Scrum in cases where the product fits the methodology is the organizational culture and the customer factor.
It's not uncommon for the non technical aspect of an organization to be very uncomfortable with committing a significant amount of money and time without knowing up front exactly what they're getting into.
There are also quite significant customer demographics that have a low tolerance for change, and the training overhead is significant.
I find that technical people tend to focus on technical risk and forget that there are many other risk categories in business that need managing in such a way that one doesn't cause problems for the others."
https://www.quora.com/Whats-wrong-with-Agile-Scrum,Siranut,2021,"SCRUM tries to come up with a well-defined goal in 15 minutes for the day, then repeat this everyday.
Seriously?
Let me mention a quote from Einstein. (I found many variants of it on the internet, but they are similar to this.)
If I had an hour to solve a problem I'd spend 55 minutes defining the problem and 5 minutes thinking about solutions.
SCRUM literally inverts this."
https://www.quora.com/Whats-wrong-with-Agile-Scrum,Fred Esch,2022,"There can be if folks get too zealous. Not everything can be done bit by bit, iteration by iteration. UI design and UX need to be done for the whole project and evaluated almost waterfall like before you develop it.
If you apply agile to UI design and don’t do UX on the whole your UI can be clown pants - that is individual parts may make sense but the whole looks like a clown - incoherent and not fitting together.
Use common sense and agile is great. Try to pound every aspect of the development process into an iteration by iteration process and your project may turn into a circus."
https://www.quora.com/Whats-wrong-with-Agile-Scrum,Osama Asif,2022,"Agile development is an approach to software development that involves breaking down a project into smaller, more manageable chunks and then working in close collaboration with the client or team members to achieve those goals. It's a great way to make sure you're on track and making progress toward your goals, but it can be difficult to implement in a way that works for everyone involved.
Let me give you some examples:
1) If you're working on a team of five people, you might find that the constant back-and-forth between each person gets kind of exhausting—especially if one person is always behind schedule and another person is always ahead of schedule!
2) The constant feedback loop can be stressful if your client doesn't have good communication skills or isn't clear about what they need from their end (which is often why they hire someone else in the first place).
3) There's also a chance that other members of your team will feel pigeonholed into certain roles (like design vs. development vs. management), which can cause some discord among employees who want more freedom in their work responsibilities.
Want a custom website or software project done? Contact us!"
https://www.quora.com/Whats-wrong-with-Agile-Scrum,Abhisek Chandra,2017,"Nothing is wrong with either Agile or Scrum, both are very mature methodologies and widely used.
Yes, how you implement them can be wrong"
https://www.quora.com/Whats-wrong-with-Agile-Scrum,Anton Pleshivtsev,2023,"There’s nothing wrong with Scrum per se, but there are more advanced and modern alternatives. My favourite example is how much you can improve your team performance by just replacing scrum estimation with Kanban forecasting:
https://craftthesoft.fly.dev/the-easy-way-to-get-20-performance-boost/"
https://www.quora.com/Whats-wrong-with-Agile-Scrum,Don Lowe,2016,"There is nothing wrong with Agile as a concept and way of doing things, there is nothing wrong with scrum either. The problem comes from people not understanding the concept or methodology."
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,Julya van Berkel,2017,"<sarcasm> Nice, I so love it when I am given only bad choices. </sarcasm>
First of all, Agile is not a methodology, you should research Agile a little more or even look up what a methodology is.
Agile is a mindset, and you either hate it or love it, so I will answer your scale with -10. I really love Agile and Agile Frameworks when done well. I can understand that some people hate it. This usually is not because of Agile or the framework used. It usually is because a company has seen the advantages of Agile and forces it down the throat of their organization.
Nothing forced or done badly is good.
I have been advocating Agile since 2002 and spcifically Scrum since 2005/6 and have seen companies transform into wonderful Agile organizations. I have also seen things go horribly wrong. Usually because bosses want the advantages of Agile without committing to the values and mindset.
Agile is done best when done thoroughly and with the help of people who understand it and help companies not to make the same mistake that others have made.
I hope you end up in an organization where they understand that Agile is based on trust, cooperation and passion. I hope this helps you to not blame mindsets, frameworks or even methodologies.
Good luck."
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,Olivia Brown,2021,"If you are new to the world of project management, the amount of unfamiliar terminology and processes can feel daunting. After all, project managers fulfill many roles and responsibilities as a part of the day-to-day functions of their jobs.
Project managers are responsible for creating an effective project plan, and all of the necessary ancillary plans, for the projects they oversee. They identify and manage risks associated with their projects. They must ensure that projects stay within their various constraints. The list goes on.
But before you can dive deeper into those details, you need to choose the right project management methodology to guide your efforts and usher your project through to completion.
There are many different methodologies to choose from, and each is best suited to different types of projects. Two of the most common (and often conflated) approaches to project management are Agile and Scrum. Given the similarities between the two, it’s easy to understand why they can sometimes be confused, but they are, in fact, two distinct concepts.
If an Agile approach is right for your project, you will then need to determine whether or not Scrum is the best Agile methodology for your specific needs and goals. Scrum is typically best suited to projects which do not have clear requirements, are likely to experience change, and/or require frequent testing."
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,Michael Williams,2017,"I think it’s bunk. I see no evidence that adopting “agile methodologies” will produce better outcomes than anything else. Every time I’m stuck in some boring meeting where everyone is droning on about scrum vs kanaban vs XP vs Pair programming I always ask the same three questions:
How doe we measure agility?
How agile are we now?
How much more agile will we become by adopting X?
In almost 9 years of putting up with all this agile crap I have never come across a single person or organization that has an actual, real, answer to the first question - forget about the other two.
This essentially means that virtually every discussion I’ve ever participated in wrt to Agile and improving Agile processes has consisted of nothing more than a bunch of people gazing at their navels and pulling stuff out of their asses.
There simply is no metric for agility and therefore no way to know if anything will improve it or not, and no way to know by how much. It is essentially a psuedoscience."
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,Amitabh Saxena,2024-07,"My experience with Scrum and other Agile methodologies has been quite extensive and rewarding. Here are some key aspects of my experience:
Scrum Experience:
Role as a Scrum Master:Facilitated daily stand-ups, sprint planning, sprint reviews, and retrospectives.Ensured the team followed Scrum practices and helped remove any impediments.Coordinated with product owners to prioritize the backlog and refine user stories.
Working as a Team Member:Collaborated with cross-functional teams to deliver increments of the product in sprints.Participated in estimation meetings using techniques like Planning Poker to evaluate user story points.Contributed to continuous improvement through sprint retrospectives.
Project Outcomes:Achieved improved project visibility and transparency through regular updates and feedback loops.Delivered high-quality software increments consistently within the sprint timelines.Fostered a culture of collaboration and accountability within the team.
Experience with Other Agile Methodologies:
Kanban:Implemented Kanban boards to visualize work in progress and limit work-in-progress (WIP) items.Used metrics like cycle time and lead time to identify bottlenecks and improve flow efficiency.Adapted to changing priorities quickly, allowing for continuous delivery and incremental improvements.
Lean:Applied Lean principles to eliminate waste and optimize processes.Focused on delivering value to the customer by streamlining workflows and reducing unnecessary steps.Encouraged a mindset of continuous improvement and respect for people within the team.
Scaled Agile Framework (SAFe):Participated in large-scale Agile transformations using the SAFe framework.Collaborated with multiple Agile teams in Program Increment (PI) planning sessions.Ensured alignment of team objectives with the overall business goals through regular synchronization and coordination.
Benefits Observed:
Increased Productivity: Agile methodologies foster a collaborative environment that enhances team productivity and efficiency.
Better Quality: Regular feedback and iterative development help in identifying and resolving issues early, leading to higher quality deliverables.
Enhanced Flexibility: Agile frameworks provide the flexibility to adapt to changing requirements and market conditions quickly.
Improved Stakeholder Engagement: Regular communication and demonstration of progress keep stakeholders engaged and informed.
Challenges Faced:
Resistance to Change: Some team members initially resisted the shift to Agile practices, requiring additional training and support.
Coordination: Ensuring coordination among distributed teams posed challenges that were addressed through effective communication tools and practices.
Maintaining Discipline: Keeping the team disciplined in following Agile practices required constant attention and reinforcement."
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,Robert Pieper,2017,"To be agile means to be nimble. If you can shed the weight of excessive bureaucracy, organize yourself and your teams in a way that collaboration is easy, you might just be agile.
Scrum is a framework to develop software using self organized's teams with clearly defined roles, artifacts, and events so that you might be agile. Done well I feel it's a great way to work and manage a project in a nimble way. The sad reality is that most don't do it well and think it's Scrum's fault. It's generally a misunderstanding of how to apply Scrum in the real world. Scrum doesn't tell you how to do your work. It just sets up some guide rails."
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,Sam Granville,2021,"We cannot really compare them, the key difference between Agile and Scrum is that while Agile is a project management philosophy that utilizes a core set of values or principles, Scrum is a specific Agile methodology that is used to facilitate a project."
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,Denise Canty,2017,"I love the Agile methodology! I give agile a 9.5. Here are my reasons:
Agile is team focused. We win or fail as a team
Teams should be self directed and self organized
Value driven and there is no long wait to see value and results
Customer focused where the team works closely with the customer
Built in risk Mitigation
Very open to last minute changes
Adaptive
Very flexible
Light documentation"
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,Chuck Cobb,2016,"There are many stereotypes, myths, and misconceptions about Agile/Scrum. Many people see it as a ""silver bullet"" that will solve any problem you might have and many people also think it replaces all plan-driven methodologies (What people loosely refer to as ""Waterfall"").
A better way to look at it is that Agile/Scrum are good approaches for projects with high levels of uncertainty where adaptivity is more important than predictability. There is still a need for plan-driven approaches where the inverse is true - there is a lower level of uncertainty and predictability is more important than adaptivity. Those two approaches should be viewed as complementary to each other rather than competitive and it should not be viewed as a binary and mutually-exclusive choice between two extremes. There are plenty of ways to blend those two approaches together to fit a given situation.
Check out my free online course, ""Learn the Truth About Agile versus Waterfall"" for more on that:
http://agileprojectmanagementacademy.com/courses/learn-the-truth-about-agile-versus-waterfall
Chuck Cobb
Author of ""The Project Manager's Guide to Mastering Agile""
Check out my free online training at http://agileprojectmanagementacademy.com/"
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,Chris Lukassen,2021,"It depends: do you like fruit or banana?
agile is an umbrella term that relates to a mindset, scrum is a framework that may help you to achieve this mindset, but there are other ways"
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,Chuck Cobb,2019,"That’s a very broad question but here’s a simple answer. Agile and Scrum have a lot of benefits when applied correctly on the right kind of project. Agile/Scrum is not a “silver bullet” and not a solution to every problem you might have. It works best on projects that have a high level of uncertainty. Here are a few articles on that:
What Are the Advantages and Disadvantages of Agile and Scrum?
What's the Best Methodology for a Project? Agile or Waterfall?
Agile versus Waterfall? What is the Truth? Are They Mutually-Exclusive?"
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,Naveen Kumar Singh,2016,"I believe people by default agile and scrum is very good Framework to develop complex software product.
I like empirical process and like to review outcome as early as possible in order to aviod rework and waste.
Scrum guide is just 16 pages and don't need much time to understand until someone not ready to read even 16 pages."
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,Giorgos Georgopoulos,2023,"As an AI language model, I don’t have personal experiences. However, I can provide information about scrum and agile methodology. Scrum is a widely used agile framework that focuses on iterative development, frequent communication, and collaboration within a cross-functional team. It helps streamline project management, improve productivity, and adapt to changing requirements. If you’re looking for freelancers with expertise in scrum or other agile methodologies, Fiverr is an excellent platform to find skilled professionals who can assist you in implementing these frameworks effectively. Click here to find the best services!"
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,The Big Flatino,2019,"About the same as unicorns. The Agile Methodology? What is that? No such thing. Agile is 4 values and 12 principles that can be applied in Scrum, Kanban, XP, Small Spiral, DSDM, RUP, SAFe, etc. My opinion of the values and principles are of the highest order."
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,Riley Claire,2022,"Agile is a mode of thinking, not a methodology; for example, how might value be given most suitably and effectively? Methods often consist of a systematic series of processes that are carried out inflexibly, i.e., each step must be carried out; this is not Agile (even if it is called an Agile Methodology).
The Agile methodology divides a project into many parts and uses these phases to manage the project. Continuous improvement at every level and ongoing cooperation with stakeholders are required. Teams cycle through a process of planning, carrying out, and assessing once the job starts."
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,Naveen Kumar Singh,2017,"If you practice it properly then good else it will increase overhead. Industry is liking it so far and getting benefitted as well although not every company.
Agile not equals Scrum but Scrum is most popular way to achieve Agility. Some people hate Scrum and may be they failed in adopting it properly but Scrum is good way to start. You may drop it when you get maturity but need to have some processes and practices to start somewhere."
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,Juan-Carlos Gandhi,2017,"There are some positive aspects, like continuous integration, test coverage, meetings. But in general non-programmers ahould not tell programmers how to write software. I they knew, they would havee writing too. Dumb people teaching smart people how to think, it's just sad to see."
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,Phantomreader42,2023,"It’s garbage, a meaningless buzzword that serves only to annoy people actually trying to develop useful code and make their jobs needlessly complicated."
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,Alan Mellor,2017,"Agile - great. The only way to keep delivering stuff that people want and that works.
Scrum - rubbish. A land grab by managers to try to fit the square peg of Agile into the round hole of waterfall."
https://www.quora.com/How-do-you-feel-about-Scrum-Agile,Tushar Jain,2017,I suggest you to correct your rating scale.
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,David Jeske,2017,"As a former Google Engineering Director, I can offer some insight.
Agile means many things to many people. The simple high level Agile Manifesto is something I think is close to the way Google engineers think about software development.
Individuals and interactions over processes and tools
Working software over comprehensive documentation
Customer collaboration over contract negotiation
Responding to change over following a plan
However, once you get past these high level ideas into details, the agreement starts to fade. Agile has some good ideas but it also has problematic elements which are too centered around short-term thinking for working on revolutionary engineering projects done at companies like Google. Without getting buried in details, let’s look at the themes in Principles behind the Agile Manifesto.
Let’s start with the shared ideas. Google development style exemplifies the type of individual empowerment talked about in the principles. The specific principles which are most in-line-with and probably inspired by Silicon Valley include:
Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.
The best architectures, requirements, and designs emerge from self-organizing teams.
At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.
Continuous attention to technical excellence and good design enhances agility.
Simplicity - the art of maximizing the amount of work not done - is essential.
These principles are almost common sense for smart engineers. I argue Silicon Valley created the culture of empowerment and trusting individuals that these are centered around.
However, there are other parts of the principles which are not a part of Google-style development culture. These are the parts which have led to the short-term focused Scrum process. They seem suited to particular types of development, most notably consulting or contract programming, where the customer is external to the organizations, runs the show because they are paying for development, and can change their mind at any time:
Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.
Business people and developers must work together daily throughout the project.
The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.
Welcome changing requirements, even late in development. Agile processes harness change for the customer’s competitive advantage.
Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.
This style of short-term planning, direct customer contact, and continuous iteration is well suited to software with a simple core and lots of customer visible features that are incrementally useful. It is not so well suited to software which has a very simple interface and tons of hidden internal complexity, software which isn’t useful until it’s fairly complete, or leapfrog solutions the customer can’t imagine.
Companies like Google write revolutionary software which has never been written before, and which doesn’t work until complex subcomponents are written. Bigtable and Borg immediately come to mind. Bigtable is a widely copied design for a distributed database, and Borg was one of the first extremely large scale cluster/cloud managers. This type of innovation takes significant up-front design time, and working on components over longer than one week iterations. Because the projects have such simple external interfaces, and so much internal complexity, much of the work is not even visible to “customers”, so there is no way to write customer visible stories about it. This type of software takes 8–20 months to deliver the first working version to the customer.
Projects like Bigtable and Borg are the anti-scrum. They represent extremely long term thinking on the part of the technical leaders. Instead of working on something that would meet a small need this week, they were laying a foundation for a fundamental shift in the way cluster software was developed. That investment has not only reaped incredible rewards at Google, but has influenced the entire industry.
Other industries have similar analogs. From tax-accounting software to computer games, some software is not suited to give to end customers when partially finished.
If I was asked to rewrite the above agile principles to be more in-line with Google style development, they might be more like:
Our highest priority is to increase customer (and programmer) productivity and access to information. Work on the biggest, most frequently used problems you can find, and create the largest net impact. Don’t give the customer what they ask for; understand them, and revolutionize their world.
Developers should create a Google Design Document (a fairly minimal, but structured design doc), explaining the project, what goals it hopes to achieve, and explains why it can’t be done in other ways. This document should be circulated with stakeholders, to get early feedback before the project gets underway. The written record is essential, as it assures there is a clear and agreed understanding of when the project is a success and how it aims to get there.
At all phases of the project, critical design elements for larger components should be concisely explained and captured in a design document.
Innovate in leapfrogs. It’s more important to finish and deploy a leapfrog than to attempt perfection. There is no perfection. Instead be flexible, and plan to constantly reinvent at every level of the stack.
Deliver working software as soon as is reasonably possible, and no sooner. “Dogfood” projects internally before they are shipped externally. Make sure products meet high quality standards before shipping. The quality of the product is more important than the time it takes to achieve it.
While the high level Agile Manifesto is flexible enough to work with these principles, these are very different than the short-iteration low documentation Agile/Scrum process which has become synonymous with the word Agile."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Imtiaz Mohammad,2018,"Agile is advocated and driven by people who no longer design and code, let alone debug nasty issues that are part of development. On top of it, they don't trust their engineers to do the right things (either their hiring is broken or their culture is or both).
They begin with wishful deadlines as they don't know how much hands-on work can be done in a day. When they see that the team is ‘falling behind’ within 48 hours of project start, they declare the team is not aggressive enough.
Everyone is then ordered to show up at 9 am from the next day, do a stand up meeting, design and develop in a conference room to improve collaboration. We need to be more agile, not less, they proclaim. They can't see how it is equivalent to thrashing in operating systems.
The creative type of engineers see how brain dead this whole idea is and how they are being taxed for failure of the system and some lazy engineers in the team. But, where will they go? The whole world has become hopelessly agile."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Assistant,2024-08,"Some developers at strong companies like Google may consider Agile development to be ""nonsense"" for several reasons, often stemming from their experiences with its implementation, the principles behind Agile, and the specific context of their work environments. Here are some common critiques:
Misinterpretation of Agile Principles: Some teams may adopt Agile methodologies superficially, focusing on rituals (like daily stand-ups or sprint planning) without understanding the underlying principles of flexibility, collaboration, and continuous improvement. This can lead to a perception that Agile is ineffective or merely a set of bureaucratic processes.
Overemphasis on Process: In some cases, Agile can become overly process-oriented, with teams bogged down by too many ceremonies and documentation requirements, which contradicts the Agile manifesto’s emphasis on working software over comprehensive documentation.
Scaling Challenges: Agile methodologies, particularly Scrum, can struggle when scaled to larger projects or organizations. Developers may find that the frameworks do not adapt well to complex systems or large teams, leading to frustration and inefficiency.
Inconsistent Implementation: Different teams within the same company may implement Agile differently, leading to confusion and inconsistency. This variation can make it difficult to collaborate across teams or to have a unified approach to project management.
Focus on Short-Term Goals: Agile’s iterative approach can sometimes prioritize short-term deliverables over long-term planning and architecture. Developers might feel that this leads to technical debt or compromises in code quality, as pressure mounts to deliver features quickly.
Cultural Fit: In some strong engineering cultures, particularly at tech giants, there may be a preference for more structured approaches to software development. Developers might feel that Agile does not align with their company’s values or the complexity of the projects they work on.
Burnout and Stress: The rapid pace of Agile iterations can lead to burnout among developers, especially if they feel pressured to meet constantly shifting priorities or deadlines. This can foster resentment toward the Agile framework itself.
Lack of True Collaboration: Agile emphasizes collaboration, but in practice, teams may still operate in silos, undermining the collaborative spirit that Agile intends to promote. This can lead to frustration and a belief that Agile is not delivering on its promises.
In summary, while Agile development has many advocates and can be very effective when implemented correctly, its pitfalls and the way it is sometimes applied can lead to skepticism and criticism from experienced developers."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Chris Travers,2019,"My experience here working in teams of different sizes and projects of different sizes is this:
Where agile sucks:
Agile is built for business applications where requirements are subject to change, and productive use of agile assumes a stable platform on which to iterate quickly. The more of your stack is agile with frequently changing software contracts, the more you will sink your time into fixing stuff instead of building stuff. Put another way, successful use of agile requires that it be applied to limited sections of code at the top level of the software stack of a project. This is because you want to be able to rapidly change things without breaking other things in subtle ways your tests might not properly catch.
API stability is an important thing when building software, and rapid iteration around API semantics is going to cause headaches once the API is used in production.
An important aspect of API stability is API documentation. API documentation is a forward-looking document that says specifically what APIs are still guaranteed to do in the future. Disregard it and you can no longer reason carefully about what specifically needs to be fixed in order to fix a bug.
Why Agile is still Invaluable:
While the overall rapid iteration/code flexibility goal of Agile does not work well for components where the overall problems are reasonably well understood on an interface level, there are certain industry changes that Agile has brought to the industry that really must be preserved. These include:
Instead of division of labor by speciality (particularly design and testing), the idea that design, implementation, and testing should be initially done by the same people is indispensable. You might still have QA folks but most QA work should be done by the developers themselves.
Small interdisciplanery teams which are able to bring all the skills together to make components successful are extremely important.
When you are building big systems, Agile ends up being a bit player. As long as you see things as either/or, agile is suitable only for small projects. As the project scale so they are large, managing what is understood and should be well engineered (and stable/documented!) and what is poorly understood (and thus subject to change) is very important. Understanding what is poorly understood (and thus should be expected to become less agile over time) vs what is subject to change (and thus will remain agile forever) is also very important.
In other words, Agile is not a magic bullet for software development. PostgreSQL, the Linux Kernel, and other foundational projects should not use it. ERP programs will probably use it in some areas and not in others. Public apps will again typically see a mixture. So there is a clear and well understood point that Agile is not only not for everything but not for most things. But I don’t think you will see push-back to agile usage where it is actually appropriate."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jasmine Adamson,2016,"Agile is bullshit, that's why. OK let me qualify... The Agile Philosphy is perfectly fine, and it addresses the physical and psychological aspects of managing software development teams quite well. The bullshit comes in when a team or company makes the statement that ""we are doing Agile"" because they aren't. So, to clarify, Agile itself is a good idea, but when someone says they are ""doing Agile"" that statement is bullshit. Always.
Programmers like things well-defined. When you tell me we're going to ""do The Agile Process"" (it's not a process), I expect an organization that follows these principles: Principles behind the Agile Manifesto
Those principles are well defined, even beautiful. When all of those principles are taken into account and lived every day, you have a well-defined, even beautiful process. When you leave out even one of those principles, it all goes to hell, you're not doing Agile any more, and people who know Agile will recognize that immediately, as I have done in every single shop I've ever worked.
I've worked in ""Agile"" development shops for the past 8 years, so let me tell you the reality, with relation to the principles, and I think you'll understand why ""Agile"" is bullshit...
1. Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. - My customer right now is another business unit. I have never met them and I have no idea what they do. This is the reality in most companies. We don't even know the customer well enough to ""satisfy"" them, and certainly not well enough to make it job one.
2. Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage. - LOL! Nobody accepts changing requirements. It is universally hated, but it's the second Agile principle!
3. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale. - Some companies do this quite well, but most teams aren't managed well enough to break software up into reasonable chunks for Agile time-scales. Delivery schedules are often based on large updates rather than small ones. Big updates isn't Agile.
4. Business people and developers must work together daily throughout the project. - LOL! Again, this isn't really done. I don't think I've ever spoken to any of my customers on my current project. In past projects this has been hit and miss, and mostly based on organizational structure rather than anything meaningful. I can't talk to my customers because ""they are above me"" or ""they are in another state"" or whatever. Developers and business people working together is extremely rare. Most companies have a go-between who is supposed to facilitate this relationship, but it never works very well. I need to talk directly to the person using the application, NOT their manager, who doesn't really use it, and certainly not to the manager of their manager, through my manager - which is the typical case. Requirements are often determined by a person two levels up from the actual users and communicated through representatives, never directly from user to developer.
5. Build projects around motivated individuals. - Most people don't know what this means. What it means is low level employees typically have the best ideas for software, and they are typically motivated to solve those problems because it will make their lives easier. Projects should be structured around those desires, which will affect the company bottom line directly by making workers more effective. Have you ever worked in a company where the lowest level employees are deciding what software should be built? Don't make me LOL, again.
5a. Give them the environment and support they need, and trust them to get the job done. - This is about developers here. Have you ever worked anywhere that you had all the tools, all the access permissions, and all the gadgets you needed to be most effective? Getting a good set of monitors is worse than a trip to the dentist in most companies. In one of my recent positions, it took three weeks to get me a computer that could run Visual Studio, and that was after I had told them two weeks before my start date, the exact specs of the computer I would need. Developers are rarely ""trusted"" either - usually we are told exactly what to do and when to do it rather than being given a job and a deadline and left on our own.
6. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation. - You mean to tell me we can't do everything with IM and email? Seriously? Yes. Seriously. When a team is spread out all over the world and never looks each other in the eye, it hurts. This is particularly true for interaction between developers, but also important for interacting with customers. My most effective method of improving existing software was to stand behind someone and actually watch them use it. In many companies you just can't do that, even if you know who the customers are, they are ""too busy"" to talk to you, or it's impossible for some other reason. In-person interaction just isn't what it used to be. Companies don't think it's valuable.
7. Working software is the primary measure of progress. - And yet, nobody measures that. What do we measure? Defect rates, hours worked, things like that. We almost never measure the thing that matters - did the customer get a working feature? How many working features did we release? Were they big features, medium ones, or little ones? Nobody knows.
8. Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. - What this means is everyone works 30 hours per week on development and 10 hours on managing themselves and their workload, communicating with others, administrative stuff, etc. This can go on forever. What many companies do is demand overtime occasionally, and what some companies do is demand overtime quite often, and this is not sustainable. An Agile team rarely goes into emergency mode and pulls all-nighters. (You're kind of always in emergency mode)
9. Continuous attention to technical excellence and good design enhances agility. - Most companies do an ok job of this, but technical excellence is often pushed to the side in favor of software that works. This is, in my opinion, the correct trade-off (principle 1 and 7)
10. Simplicity--the art of maximizing the amount of work not done--is essential. - Most teams simply don't spend enough time on this. A sense of urgency often overrides careful planning. The problem here is careful planning makes things get done faster. During the planning stage it feels like you're not getting anywhere, but you are setting up for a quick sprint. This setup is often overlooked, and we end up with not only complicated software, but complicated development habits, complicated code, and generally poor software design. This slows down maintenance and new development, as we try to fit into poorly designed structures that become ingrained and impossible to improve. ""This new feature is poorly designed because the application it integrates with is poorly designed"" can go on forever.
11. The best architectures, requirements, and designs emerge from self-organizing teams. - Teams are organized by management, almost never by themselves. This is just a corporate culture problem, and it's very hard to overcome. Sometimes in startups and younger companies you can promote this idea and have it work, but in most companies it just doesn't work.
12. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. - Many companies do an ok job of this, but it's often in the form of ""performance reviews"" and it doesn't have the flavor we really want. What Agile wants is ""lets all sit down together and look at what we did and how we can be better next time, AS A TEAM"" - but what usually happens is individuals are evaluated against arbitrary and subjective measurements, and teams almost never implement any process improvements based on those evaluations.
So, Agile is bullshit because nobody embraces the principles and puts them to work, but they still say they are doing Agile. This is extremely frustrating because developers know that if we did these things we could be way more effective.
(Maybe that's not what you're looking for but I've been wanting to write that for a long time now)
Update: Some people are taking this the wrong way. This is not a critique of Agile itself, it's an answer within the context of the question. It's an explanation of why programmers ""consider Agile to be nonsense/bullshit"" I'm NOT making the case that the Agile process itself is bullshit. This is just why ""many"" programmers say it is, which is a given of the question. This is, of course, opinion based on my own personal experience but it's clear that many people agree with me on this."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Michael O. Church,2015,"Before I get into why this ""Agile"" stuff is horrible, let's describe where Agile/Scrum can work. It can work for a time-sensitive and critical project of short duration (6 weeks max) that cross-cuts the business and has no clear manager, because it involves people from multiple departments. You can call it a ""Code Red"" or call it a Scrum or a ""War Room"" if you have a physical room for it.
Note that ""Agile"" comes from the consulting world. It suits well the needs of a small consulting firm, not yet very well-established, that lands one big-ticket project and needs to deliver it quickly, despite changing requirements and other potential bad behavior from the client. It works well when you have a relatively homogeneous talent level and a staff of generalists, which might also be true for an emerging web consultancy.
As a short-term methodology when a firm faces an existential risk or a game-changing opportunity, I'm not opposed to the ""Code Red""/""crunch time""/Scrum practice of ignoring peoples' career goals and their individual talents. I have in mind that this ""Code Red"" state should exist for no more than 6 weeks per year in a well-run business. Even that's less than ideal: the ideal is zero. Frequent crises reflect poorly on management.
Now, let us count the sins of ""Agile"" and Scrum in the more common corporate context, where they're permanent working arrangements.
It's a culture of terminal juniority. Product development and architecture aren't the programmer's job, because they take longer than two weeks. Rather, the programmer works on atomized feature-level ""user stories"". This is OK for a junior who's learning the codebase and software engineering principles and may appreciate the guidance, but anyone with more than 5 years of experience is going to find it to be a dissatisfying way to work. There is no place for an actual senior engineer on a Scrum team. The only way to move up is to become a ""Scrum Master"", a bullshit management role that involves responsibility without power. If you don't believe in this stuff yourself (and I don't) then you sure as hell don't want to move up into a role where you're responsible for enforcing it over people who technically answer to someone else.
It's aggressively short-term, by design. These methodologies are designed for scrappy, unproven consulting firms that need to bear down and pass their first high-profile project. In that context, they probably work-- at the expense of technical debt and tired workers. There are two problems here. First, Agile/Scrum is the way that a consulting firm behaves when it's an underdog, but people who join large corporations do so because they don't want to be underdogs. They'd rather be a small part of something stable than a bigger part of something that no one else yet believes in. If they wanted that other deal, they'd be in tiny startups. Second, if you carry this way of working on for months or years, you get a lot of technical debt and you get low morale. Senior engineers are quicker to go, because they usually want something meatier than filling out some other guy's ""user stories"".
It has no regard for the programmers' career needs or desires. See the points above about Agile's short-term orientation. Now, people are willing to give up their career goals to pitch in on a short-term crisis, for two reasons. First, if it's genuinely important to the firm, then it does help their career to do so. Second, a story of having solved a genuine crisis under time pressure can be a career booster. Saying, ""I was in the War Room and had 20 minutes each day with the CEO"" means that you were important and valued. Saying ""I was on a Scrum team"" means ""Kick me"". On the whole, Agile and Scrum expect you to put your career goals on hold, and people will tolerate that during an exceptional short-term crisis (that merits an actual sprint) but not in perpetuity.
It's micromanagement. User stories and backlog grooming are there to control what the engineer works on. The absurdly frequent meetings (and so many different kinds of status meetings!) are to intimidate him into not slacking. The story points are there to track productivity (in some superficial, inaccurate way). The talk of ""removing impediments"" is code for ""spotting slackers"". Even for people who have nothing to hide-- even for people who'd be strong performers in a more sane, relaxed, progress-over-rapidity organization-- a surveillance state is an anxiety state. It sucks, and if you're good at what you do, it's insulting to have to justify days and sometimes even hours of your time, and to be jerked around if these estimates are even slightly displeasing to the ""product owner"".
At identifying low performers, it has an unacceptably high false-positive rate. Let's not kid ourselves. The reason ""Agile"" is so popular is that it carries this mythology of spotting low performers immediately-- in two weeks instead of over months-- and giving objective cause to fire them. (Agile/Scrum is, in essence, a permanent PIP.) I've heard it put this way: ""use Scrum to spot your Scum."" The problem is that it also turns good workers into low performers. Actual problem employees are already visible to the team and manager regardless of whether this nonsense is used. (In many organizations, nothing is done about them because the organization or circumstances may make them hard to fire, but that's a separate issue.) You don't need Scrum for that. When you start playing the perpetual-crisis/surveillance-state game of Scrum, you end up losing a lot of good people. Either they take the perpetual performance review seriously, get stressed out, and start to falter after a while; or they disengage and become minimum-effort players just trying to protect an income.
It punishes R&D, and it hurts the best engineers the most. Corporations tend to value reliability over total productivity. In terms of negative impulses on the company, the emphasis on reliability is correct. When it comes to being ethical, people who are unreliable are disastrous. In terms of positive impulses, you often care more about total productivity (averaged over a year, two years, maybe longer) more than reliability. You'd rather have the variable worker who has some home-run weeks and some false starts than the reliably mediocre one. There is, it turns out, an intrinsic positive correlation between the variability of work (or risk) and the value rendered. Agile and Scrum, however, single out and humiliate anyone who works for 2 weeks and doesn't have something to show for it. This means that there's no room to fail, thus no room to experiment. For senior engineers who already know that they can fulfill user stories and trivial features, this also means that there's no point in going to work.
I have actually seen it kill companies. I can't get too specific here, but I could name a company (once valued over $1 billion) that, following a merger, got neck-deep in Scrum. It lost over 80 percent of its value. The Scrum/Agile mess prevented people from working on what was actually important to the business, and the insulting juniority of the regime pushed away senior engineers in droves. Between the talent bleed and the loss of the engineering organization's ability to identify and fulfill core business needs (since Scrum is all about engineers not thinking for themselves) it got into a state from which I am doubtful that it can recover. This is just one story of an engineering organization killed by Agile, but there are others. Given that the Googles of the world need senior talent to keep themselves running, you can see why they wouldn't want to use it. If you're the back office at a bank, you can take your chances on a senior-level talent bleed and try Agile. (You might even have that as a goal, if you need to cut costs.) You can always hire legacy rescue consultants (at $300/hour, which is chump change to a bank) to cover the mess, later. If you're Google, your problems are just too big to hire those kinds of consultants; losing your seniors can be calamitous.
It's sold dishonestly. This stuff can actually work when you're trying to mobilize an ""emergency team"" around an ill-defined and evolving but time-critical target. It's hard to motivate smart people to put aside their career goals and specialties and bear down on a task that might spit out some hilariously unsexy work. But in a consulting shop, there are a few countervailing motivations that don't exist in typical corporate employment. First, the ""Scrum"" is project-specific and therefore time-limited: getting the project done (actually done, not ""done"" in some corporate sense) and scoring the client and getting a retainer means that people can relax. Second, consulting firms rarely give startup-style equity or options, but they are often more generous in profit-sharing than the hot startups, so senior talent is aligned with the success of the business and 3-6 weeks of grunt work doesn't seem so bad if you're going to get a performance bonus that could be 50% of your salary, and possibly a promotion to the partner level. Those factors don't exist in corporate IT or even in startups. No one's going to put his career goals on hold and work through of a bunch of feature-level tickets for months, just for an average salary or for 0.05% in equity. Where is the dishonesty? Agile/Scrum works in a temporary setting, especially when commanding a just-now-assembled ""emergency team"" with no clear manager. It also works for small consulting shops mobilizing around a do-or-die project. It doesn't work in a permanent context. It's my belief that the ""Agile coach"" consulting shops actually know that it's not sustainable. So why would they sell it as a permanent productivity-enhancer? Because almost no one would buy it if it were sold as what it was: something that works in the short term, does a lot of damage, and will require after-the-fact cleanup effort on the tech-debt and morale fronts. This isn't the first generation to invent ""crunch time"" or ""war rooms"", but this ideal of a permanent ""sprint"" is so appealing to eyes-on-the-scoreboard middle managers that it persists and it sells like it's made out of rainbows and kittens."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Rajaraman Raghuraman,2015,"Wonderful answers written here.
A few days back I wrote this answer.
Rajaraman Raghuraman's answer to Is Agile methodology making life worse for developers?
I strongly believe that role of leadership/management in any organization plays a big role in the success of Agile.
The fundamental reason why developers (Not just Google) started hating Agile is that
1. Most organizations have a wrong understanding/implementation of Agile.
In my perspective, No Agile is better than bad Agile. Because it adds a lot to the overhead of an already complex software project. And most importantly it destroys the morale of the employees. Which is why we have this Quora thread in the first place.
2. People especially at the management/leadership levels think that if a team follows Scrum, they are Agile.
Management assume they are agile the moment the teams start doing Daily Standups, Sprint Planning, Retrospectives, etc. They showcase brilliant statistics like 70% of our team are Agile. We can do 100 story points per sprint. etc. etc. which actually makes no sense if you go and talk to the developers/testers in the project.
3. There is an entire industry which is trying to over exaggerate/misguide the Agile movement and make money out of it.
Since they are interested in making money, they end up doing things that make them money instead of doing things that actually benefit organizations. For example, there are a lot of tools which actually don't fit into an existing project context, but still teams are forced to use them. Even popular ones like Version One, JIRA Agile add to the complexity. It's good for reporting who is working on what, check progress of projects, etc. But it is not good for the team.
4. The troubled understanding that Agile is a One Size Fits All kinda thing.
Every project team is different. One team might take it longer to come up with the desired results as there is considerable R&D involved. One team might be great hustlers. And there will be a mixture of these kind in each team. That makes following a process like Scrum, very tricky because inherently we are trying to say that no matter how you work, what your working style is, all you have to do is sacrifice your working style to fit the team's working style. Trying to generalize process across teams is also a major pain. Just because Team A has 7 points in their Definition of Done, it is not necessary to have all for Team B and C.
5. Being in a Fixed Mindset (Anti-Agile).
Why Agile came up in the first place? Because we were poor at estimating large projects. We used to break down each task so minutely and we had to estimate. But everyone knew that it was not working out. Hence the relative sizing with respect to story points. But again, all these bullshit of converting story points to hours. Putting down each task and estimating for each task, etc. so that, we are more clear in our activities to come.
This is what we used to do in the beginning, that didn't work out. But we are again falling for the same trap.
And penalizing if the estimates go wrong, makes things worse. One of the main points of Agile was that there is no Fixed Plan. But what most of the organizations do is exactly the opposite.
I heard a manager that once said ""Since we are doing Agile, I assume that you guys don't come up with additional tasks during the sprint. Otherwise what is the point of doing Sprint Planning, Grooming, etc.""
6. Some teams are already Agile. And for them, Scrum should not be forced.
Some teams are already doing a good job in their engineering practices, routines, etc. So for them, Agile means no sense at all. Because they will ask ""This is what we do on a regular basis, what new this is going to add"". But since other teams are following Scrum, they are also forced to use Scrum. Which may not be a best fit for a team that is already doing well.
7. Scrum by definition doesn't give a damn to the seniority of engineers. Because everyone is a Scrum Team Member.
Good in paper. But it hasn't worked out quite well in practice. As you move up your career ladder, you will obviously might want to work on things that are non-trivial & more challenging. But in Scrum, that can't happen. If there is a task that is not the right fit for a senior engineer, then also he/she is force to take that up. Which will result in hurting their ego. Which is bad.
8. Impediments are not removed. Or worse new impediments crop up when implementing Agile in a bad fashion.
For example, if there is a communication gap / ego clash between engineers and managers in the team or between team members, without removing it, it's going to amplify further in Agile based projects. And results will be affected. Sometimes even worse, doing micromanagement can stir up new troubles for the team as a whole. Agile can't fix which is already broken. Definitely not a solution to all team related problems.
9. Scrum by definition doesn't care about flow state of a programmer.
It has been thoroughly researched that unless a programmer goes into a flow state or the Zone, he will be less productive. Again this depends on the nature and style of the developer. Some can get into the zone fairly quickly. But for some, it takes more time. For example, it can so happen that on a given day, due to some reason or the other, the developer might not get into any sort of rythm. But maybe the next day, he would get rythm and might probably finish more items that he had committed. But in Scrum, he/she is accountable to the entire team about the task that he had committed yesterday. In the daily stand up, people might ask him, ""Why it is taking more time? This can be finished easily"". And that can hurt him/her. That brings unnecessary pressure for the developer and may not be in the best interest of his morale.
It is quite concerning to note that, Agile Principles are losing their value just because of the people who are using them in a way they are not supposed to . I have witnessed that many have started hating Agile, now they think Agile is a bottleneck. Whereas the truth is, Agile was primarily invented with lot of good intentions to prevent lot of bullshits that were happening in the name of Project Management & Requirements Management."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Curtis Poe,2016,"Summary: if you think Scrum and Agile are the same thing, you're more likely to hate Agile.
When I teach Agile classes, it's been my experience that many in the Agile community were never taught the point of Agile, which is reducing the cost of change and uncertainty. In fact, I see from some responses here that people are conflating specific Agile techniques — such as Scrum — with Agile. Teaching Scrum as Agile is like teaching chess by explaining how the pieces move but not mentioning checkmate. Unfortunately, that's what the Agile community is doing today and it's understandable that many people are getting caught in that trap.
When to Use Agile

I think the problem started with the Agile Manifesto: many people who were very good at software development found a way of developing software which was better under the assumption of change. It's that last bit which everyone forgets: under the assumption of change. That's the key and if you don't grasp that, you'll be able to tell people the rules of chess, but look puzzled when they ask you about checkmate.
Agile, in short, is nothing more than lowering the cost of change and uncertainty. If you have little change and uncertainty, Agile is a rubbish choice and you should choose a system optimized for reliability and reproducibility. These are not the same thing, no matter how much many Agile practitioners protest otherwise. For example, do you really want to ""fail fast"" when building a nuclear reactor? Not unless you're an idiot. Reliability and reproducibility are more valuable here. Optimizing for change and uncertainty is probably also bad for, say, accounting. Unless you're Enron, you probably want your accounting results to be reliable and reproducible. You want accounting to be boring, not exciting.
So how do you choose between Agility or Stability? A good rule of thumb is to know where your product is in its life cycle, along with the maturity of the market you're in, and choose Agility for newer products/markets. Products tend to go through a series of transformations in their life-cycle (deliberately numbered in the order the transitions occur):
Novelty (Cool! What can we do with this?)
Stability
Commodity
Utility (Boring! Let someone else do this.)
Novelty: This is for new, exciting ideas. Consider e-commerce: originally we had no idea what we could do with that. It seemed crazy to sell food or cars online, but books and electronic parts? Those seemed possible. And would people trust us with credit card numbers or their bank account numbers? People just didn't know, even though today the answers seem obvious. Everyone was rushing around trying to create these systems and no one was sure if the market was there or what it looked like. The dot-com collapse came about in part because this area grew so fast with so little understanding. A good indicator of this stage is when we're still saying ""that's really cool!"" (and frequently have detractors saying ""that's really stupid"").
Stability: This is when new ideas become stable products. As things settled down in e-commerce, we began to understand the market and started building our own, custom e-commerce systems (I did myself for one company) with a basic understanding of the needed features. A good indicator of this stage is when we shift from talking about what we can build to explaining how we can build it (remember all of those ""How to build a shopping cart?"" articles and books in the late 90s, early 00s?)
Commodity: The market has matured and the products have started to become interchangeable. Now, many companies offer e-commerce software you can buy or download as open source/free software. The good has moved beyond ""stability"" to be a bunch of interchangeable, competing goods which often are forced to compete on price instead of value (but see the note at the end of this response).
Utility: Now the product has been converted into a service you can buy. Now there are plenty of online services which allow you to upload images, add descriptions of your goods, set prices, and kick back and reap the profits (good luck!). For many people this is the most boring step in the product life cycle, but it's also the most exciting because huge changes are built on top of it (think of the myriad industries build on the utilities of cloud computing, or even electricity itself!)
When moving from Novelty to Utility, project management should move from Agile to Lean to Stable (PRINCE2, TQM, ISO9000, etc.). At this point, the reasons should be self-evident. With new markets we don't know where they're going to be in five years, and creating a five year plan (Big Design Up Front) would be about as successful as the Soviet five-year plans and fail for the same reasons: planning when we have the least information. With very mature products, optimizing for change and uncertainty which never arrives is, well, silly (this excludes the Black Swan events we can't plan for, such as owning a taxi company and Uber showing up).
So where is Google? Google largely built many of the markets they're in and today, some of them, such as online advertising, have gone from novelties to utilities. In fact, when Google recently contacted me about being a project manager in site reliability engineering, I had to explain to the recruiter that the project management they wanted didn't fit my Agile background: site reliability is the very definition of ""reliability and reproducibility."" Agile would be silly for many Google projects, but it's very appropriate (and used) for other projects in Google.

Recap: Agile is nothing more than focusing on reducing the cost of uncertainty and change. To understand if that's a worthwhile focus, you need to know both your product and the market. Internally a company will likely have many different departments and some should definitely use Agile (R&D is a great example) and some should definitely not (Accounting). As products/services mature, they should transition from Agile to Lean to more formal methodologies such as TQM, PRINCE2, ISO9000, and so on (interesting that there's no catch-all term for the latter).
If the whole novelty/stability/commodity/utility discussion was interesting to you, I highly recommend reading the following:
An introduction to Wardley (Value Chain) Mapping
Wardley uses some slightly different terminology, but his work is incredibly valuable in helping companies form strategy (and, incidentally, to understand when to be Agile).
Notes:
Commodities: When I discuss commodities, this step sometimes confuses people because there's an assumption that commodities are universally interchangeable, but that's not true. A good is a substitute for another good according to the needs of the individual consumer, not just the market. Coal is coal is coal. However, people point to the differences between Apache, IIS, Nginx, etc., as perfect examples of items that are not commodities. If you can't taste the difference between Coke, Pepsi, or RC Cola, they're perfect substitutes for you and must compete on price. Likewise, if I only need a Web server for hosting my resume/CV, I really don't care which Web server it is: they're interchangeable to me and thus they're commodities to me.
Product evolution: You can apply the above to many areas. Information products evolve faster than physical ones, but many physical products undergo this process. While electricity is often cited as an example, look at the evolution of cars. Originally they came in many shapes and sizes (novelty!), but basic features stabilized into products and many cars today seem virtually indistinguishable to many consumers (commodities). Today Uber, Lyft, and Google self-driving cars are converting the commodity into a utility and people are tremendously underestimating what a seismic shift in the market this is. How much money will households save if they don't need to buy a car or pay for its insurance? How many lives will be saved by fewer accidents? How many lives will be lost because organ donors largely come from car accidents? How will your life be improved by turning your garage into another room? How will job markets adjust when professional drivers become an anachronism?"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,John Smith,2018,"Because most methodologies are nonsense. I’ve been developing software for 18 years and worked on countless projects (large, small, traditional, experimental, mission critical, etc). Here is the best way to build software:
Pick a small cross-functional team consisting of real professionals (guys and gals who are really good and passionate about what they do)
Give them proper tools and free them up from other commitments
Make them sit together in one room with a whiteboard
Give them access to the business, clients, customers, users, etc (for both requirement gathering and demos)
Step away and let them prototype, demo, develop, refactor, etc
Iterate until the team reaches the objective"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Miles Fidelman,2019,"Why do some developers at strong companies like Google consider Agile development to be nonsense?
IMHO, because, in practice, “agile” is code for sloppy thinking & lack of design. Code first, think later. It’s also great for giving managers metrics they can report against that sound good (e.g, “tickets closed”), while not having to show real results - like sales, or lawsuits avoided.
Ok, let’s start with the four principles from the Agile Manifesto. The mindset of a hacker, not an engineer. You wouldn’t even think of applying them to a construction project - buildings would be falling down all over the place (if you could get approval to start construction, without detailed plans to approve), and all involved would be spending most of their time in court.
Individuals and interactions over processes and tools: For any complex piece of software, one needs to be very disciplined about pinning down design details (e.g., interfaces), about configuration management, about testing, etc. All of those are process intensive activities. The work can sometimes be reduced by good tools (e.g., a good version control system, automated build/test).
Working software over comprehensive documentation: A rather poor dichotomy. What does “working software” mean, without documented specs? How does one install, use, interface to, or maintain software without comprehensive documentation? Personally, I’m a big proponent of “write the documentation first” - otherwise, you don’t know what you’re building, or buying.
Customer collaboration over contract negotiation: Again, a poor dichotomy. In a lot of cases, contract negotiation IS collaboration, and/or defines the framework for collaboration. If you’re in business, particularly if you’re building custom software, the absolute last thing you want to do is spend a lot of time coding, only to have a customer tell you “that’s not what I meant.” Collaborate over use cases, storyboards, test & acceptance criteria, transition plans – but be damn sure to get to agreement over what goes into a release, and how it’s going to be accepted, before starting to write code - otherwise you’re going to be out of business very, very, soon. (Might I add, that almost all companies try to insulate developers from end users. It’s kind of hard to actually get anything done, if you’re spending all your time responding to support calls, or “can you just change this on thing?”)
Responding to change over following a plan: Yes, things change. But by and large, this says “code first, think later.” That’s just sloppy. If you’re fighting a war, agility is critical (“no plan survives first contact with the enemy”), or if you’re playing basketball. But if you’re writing software, you’re a lot better advised to “plan the work, then work the plan” - and if things change, change the plan. (One might note that most of what pass for “agile methodologies” - such as scrum - are really planning processes, just ones with very short time horizons.)
By and large, “agile” is code for laziness in up-front design. Just fix the bugs & add features in future releases. Sometimes, that works - Microsoft has been very successful in shipping quickly, then fixing things later. It also works fairly well for periodic releases of mature software (fix some bugs, patch some security holes, add a few features). And, it’s absolutely necessary if you’re responding to a security attack, in the moment.
It doesn’t work as well if you’re building buildings, or mission-critical software (no, we can’t recall the spacecraft after it goes off course), or laying rail tracks from the coasts, that have to meet in the middle of the country. Or if you’re a large team, building 100s of module that all have to fit together - you’d better get the architecture, interfaces, and databases all pinned down well before writing a single line of code. Otherwise, you’re just going to have to do lots of re-work down the line, and god help you if you want to add new features, without having well defined hooks built in from the start.
And then there’s: Dilbert Comic Strip on 1993-05-04"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Russell Wark,2015,"Jasmine said most of what I think. Good answer.
Companies like Google have seen through all the trendy bluster surrounding agile (especially the fetid abomination that is Scrum), they've taken the few bits of the process that work and dumped all the management fad cruft (of which there is rather a lot). They have realised that every developer is different, each developer has their own processes that they work best with, and that the focus should be on the end product, not how to get there.
I'm OK with using a Kanban board. I'm even OK with end user-centric tasks to a certain extent. That's more or less where it ends.
I am not OK with the stupid, asinine terminology. We're developers. Do we really need more rubbish terminology in our lives?
I am not OK with the short-termism of 'sprints' that inevitably end up with you having to refactor code time and time again when the next set of 'user stories' come in.
I am not OK with the lack of strategic thinking when it comes to program design and software architecture.
I am not OK with blatant micromanagement masquerading as 'the next big thing'.
I am not OK with 'story points' or 'planning poker'. These are estimates of effort, not time, and hence utterly useless.
I am not OK with daily standups. The Kanban board should tell everyone what they need to know, not this silly ritual lifted straight from Alcoholics Anonymous.
I am not OK with all the other meetings either. Waste of good development time. Write me a f**king email.
I am not OK with 'agile coaches' - the dev world's evangelical religious zealots peddling their ridiculous creed to companies on the promise of increased productivity, new jobs for increasingly irrelevant middle management (scrum masters and product owners) and the chance to say they do something trendy like 'agile', and then charge the company a fortune for the privilege.
But, most of all, I am not OK with the homogenisation of developers that takes place in Scrum environments. It's extremely hard to be creative and do any out-of-the-box thinking when you're being micromanaged. And there's a whole generation of young developers coming into the workplace and thinking this is how it's supposed to be done. WTF?"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Anonymous,2019,"They don’t. Agile appeals to cowboy programmers who hate being told to do things properly. Microsoft loves Agile and calls any type of Best Practices “waterfall” because business owners love anything that cuts corners and makes money faster, so dismiss anything involving standards as “stupid”. Agile is the equivalent of crossing the road without looking both ways, first, because it saves some time.
NASA doesn’t use “Self-organising teams” to build rockets any more than a traffic cop says to motorists at a busy intersection “Sort it out amongst yourselves. It’s my job to manage Planning Poker meetings, not teams of engineers, many of them fresh out of college”.
Companies run by web tycoons love the idea of ditching traditional processes that have enabled people to build bridges and rockets safely and opting for anything-goes processes that have led to massive security breaches in just about every piece of software released by these web companies. It typifies the teenage mentality that everything should be done the way it would be done in a dorm-room by people who “don’t need no education” from “older folks” who have produced software safe enough to run passenger jets.
Google is no different. If Google+ had been built using safety-critical standards it would not have suffered a massive security breach. It wasn’t built like that. It was built to cowboy standards by people who do everything on whiteboards and don’t bother testing things thoroughly.
Quora suffered a massive security breach and we still see people saying “Agile is good. Everyone should use it”. It’s like listening to Climate Change Deniers who are determined to “be right” even when they are hip-deep in rising sea-levels, mainly because they make a lot of money out of fossil fuels and don’t really care how much damage their love affair with profits is causing."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Warren Wise,2015,"Because they only have experience in ""doing"" agile, rather than in ""being"" agile. Doing agile is cargo cult, while being agile is a conscientious and disciplined application of the scientific method toward software development. Developers are very technical, but I think most fancy themselves artists and craftsmen, not scientists. So much of what developers claim to do, whether at strong"" or ""weak"" companies amounts to developing their own specialized process that was learned through their personal, direct experience.
There is a lot of BS with respect to agile methods, but it's the same kind of BS you find with all shiny new things in software development, from object orientation to service oriented architecture to functional reactive programming to whatever Gartner Group bandwagon software vendors and consultants can jump on next.
The reality is that the so-called Agile methods are primarily the software development equivalent of statistical process control methods originating in the 1950s that were the approach Toyota used to become the leading car manufacturer for decades. It's only now that other automakers have caught up to them with methods of their own, but Toyota has long been an open book showing anyone who would visit their just in time approach to building cars, their intense focus on problem solving and continuous improvement, and their culture of empowering people closest to the actual work to define standard work processes.
If you study the history of the agile methods, you'll easily begin to see what agility is, how it's meant to be used, who's trying to pull the wool over your eyes, and who doesn't know what the hell their talking about (no matter how many years of ""experience"" they claim to have, good OR bad).
A truly agile method is not for an emergency (although agile methods do help minimize risk), but rather, is for product innovation. If used as intended, it can transform an entire organization. Salesforce has used Scrum with XP practices since at least 2007, and it enabled them to create a predictable release cycle that has resulted in more and more impressive features and products being delivered and making an impact in customer businesses on one of the most sophisticated PAAS platforms around. What they do each year is more remarkable than the previous year, so much so that they have been designated the most innovative company in the world the past two or three years by Forbes.
To be clear, Agile methods like Scrum and XP are not a silver bullet. Competent people, hard work, focus and discipline make for excellent software development. Agile methods provide proven tools for bringing any process under control so that its results are predictable, which means they can be systematically altered (i.e., improved). Agile is not magic. It's par for the course in manufacturing. Software development has its fair share of skeptics and snake oil salesmen. Do your homework if it's something you're contemplating; otherwise, you will screw yourself...and blame ""Agile""."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jeff Ronne,2015,"Agile/ scrum promotes the false myth that process can replace product design and architecture.
The management fairytale is that great products can be reliably developed simply by obsessing over process.
Software projects are at risk of failure principally because of improper technical design with insufficient resourcing. Any process imperfections are secondary concerns.
It is impossible to constantly shift major requirements while maintaining schedule and quality.
Software design requires a carefully thought out solid architecture that meets a known set of requirements. Changing basic fundamental requirements late in the schedule always has adverse consequences. The agile process or any other process cannot prevent this.
Valuing process first and software architecture second is a mistake.
The agile type of mindset is similar to the one that made the incompetent Dilbert manager universally famous."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Terry Lambert,2016,"To most people in management, “Agile” means “implementing Scrum”.
There are some key attributes of Scrum, but the major one is that it allows customers to change the specifications. To the customers, this generally means “without consequence”.
A professional engineer calls this alternately scope creep or feature creep.
Both of these are almost as evil as being told:
“the compiler is backordered”
“you’ll have to make do with this 32 bit machine to write the 64 bit code we need written”
“can’t you just use 16G machines to work on this problem that’s going to be deployed on 512G machines?”
“we can only afford one development board, and the guys in Taiwan need it; can’t you just talk them through debugging any problems that come up?”
etc.
In other words: pretty evil.
A good engineer goes in and maps the problem space. This is determined by the project scope, and engineering forward so that nothing you do in 1.0 precludes the features planned for the 2.0 and 3.0 releases.
The basic idea is that, like blowing up a balloon up in a box, you want the design to fill the entire space in which the problem exists.
Now imagine some idiot decides the box needs to be bigger: that’s scope creep; or imagine that some idiot decides that the box needs conic protrusions everywhere: that’s feature creep.
It’s antithetical to good design, because it’s antithetical to design, period.
There are a couple of places you can get away with this; one is on web front ends.
Why can you get away with this on web front ends? Because all the real important stuff is on the back end, and whatever stupid thing someone decides to do to the UI, it doesn’t matter, because the back end database, processing, information interconnects, service attachments, outside data vendors, etc., etc., is safe from it.
In some cases, it’s even an advantage in the web front end code, because it’s all throw-away code anyway: speed matters a lot more than good, and, as long as you don’t cause a security problem: go ahead and make the whole damn thing out of paper mache, spit, and baling wire. It doesn’t matter, because you are going to redo the whole thing next week anyway.
There are problems with other agile practices as well; some are actually good (I rather like pair programming).
But what it comes down to is this…
Really good engineers like to solve problems once. Exactly once. Once solved, they then move on to the next problem.
By the way: IBM Global Services has this down to an art form:
Send in an analyst to drag a customer specification out of a customer; this is what the customer wants
Build exactly what the customer wants, and charge them through the nose for it
When the customer discovers that what they wanted was not what they needed, go to step one
Milk this cow, until the cow itself disappears into a puddle of milk; take that milk, too
P.S.: Ideally, you’d give the customer what they need, up front, and quit futzing with the scope and features."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Gerry Claps,2015,"For three major reasons:
There is an industry around monetizing 'agile' => Obviously not a good sign (it's especially an issue for Scrum).
There is a general misconception about what being 'agile' is => Some teams add in a daily standup, remove a bunch of documentation and call it a day. It's something that's not healthy for those teams.
There is a paradigm shift from co-located to distributed teams => The Scrum framework, sometimes synonymous with agile (refer to ""being agile"" misconceptions above), isn't working as well for those teams.

It's not that agile software development is bad. In fact, it's awesome! When done right...
The issue is that the main values and principles of the Manifesto for Agile Software Development can be easily misused and abused. They're high level values and principles after all.
Consequently, agile software development can get a bad rap with a bunch of engineers who have been successfully building products for years without being 'agile' (although those engineers are probably, ironically, more 'agile' than most agile software teams out there).
If you would like to dig in a bit further, give these articles a read:
Flaws in Scrum and Agile
Why SCRUM Backlogs lead to bad Product Decisions
The Joys and Benefits of Working as a Distributed Team

I hope that helps!"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Andrew McGregor,2017,"Even if you don’t consider it nonsense, you might not choose to use it.
Agile practices can be extremely effective, but like any tool it has its uses and isn’t very helpful if your situation is not one that it is good for.
Google’s organisation is not constructed in a way that Agile, particularly Scrum, helps a lot, except in very particular teams. I’ve done Scrum for years in a previous job, and I cannot see how to apply it to SRE work at all. It just won’t help, and would be very distracting. Kanban, on the other hand, just works, and if you like you can just use it for your own work; it very likely will help your productivity.
Now, is Kanban Agile? If it is, we use that a lot. We even have excellent tool support for both Kanban and Scrum, even though maybe 5% of engineers use Scrum; the place is big enough that 5% is a lot of engineers."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jon Kern,2017,"Probably a TL;DR...
When I hear of an individual opinion on ""agile"" by some developer(s) at Google. I wonder... Is Google somehow anointed as the Universe's gift to All That Is Great in software development know-how? And even if they were all top-notch awesome, I would need to know more to form my own opinion. What project were they trying agile on? What was their ""agile"" process like? Be inquisitive. (Ok, I suppose posing a Quora question is being inquisitive. Bravo. But, I mean, be inquisitive about the opinion being spouted when you hear it, on the spot.)
Frankly, Waterfall is a great methodology. RUP is great. As long as you do it properly and in the right context -- which, apparently, rarely happened, hence all of the negative opinions and experiences about those ""heavy-weight"" processes. Waterfall and RUP can be completely inane and disastrous, or tailored to be nimble and match the project at hand. Agile is no different. It is great. Or it can be done poorly and also be inane (or be deemed ""nonsense"").
News flash: there is no ""silver bullet"" for software development.
In my humble opinion, ""Agile"" is more of a state of mind than a prescriptive process. So it is foolish to bundle opinions and discussions around that singular term without any sense of context and knowing more details.
""We tried agile, it stank. Pure nonsense, I say, that agile method!""
-- A naive observer
Umm. Okay. That just is not enough detail to confirm or refute that statement.
Bottom line. In software development, you succeed first and foremost because of the people doing the project. A distant second is the process. And a distant third are the tools. Really smart and inquisitive people will likely form their own effective process, and often develop their own tools. Competent and open-minded people could be exposed to a new way of doing development by following some initial prescriptive steps found in agile writings and books (I love Ron Jeffries' book on The Nature of Software Development, FWIW). As they grow comfortable, and gain experience, tailor to suit. Sort of like following a cooking recipe at first, and then adjusting to meet your individual needs.
I would hope that an ""agile"" development process for the embedded software for a life-critical device is a very different sort of ""agile"" than what is practiced on a simple web app for registering agile unconference goers. There is no ""one size fits all"" agile process.
If you look at the simple tenets of the Agile Manifesto, I submit we ""nailed it.""
We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value:
Individuals and interactions over processes and tools
Working software over comprehensive documentation
Customer collaboration over contract negotiation
Responding to change over following a plan
By ""it"" I mean, I feel we got to the crux of human behavior in the realm of software development.
I submit that it is pretty hard to refute those bullets. Nay, it is impossible. They were true in the 90s when I was fighting against the waterfall processes. They were true in 2001 when we wrote them. They are still true today. They will be true in 2025.
If your Google engineer(s) think they are nonsense, well, everyone is entitled to their own opinion.
History
Way back in the annals of ancient software history, at the time of the writing of the Agile Manifesto...
Many of us were coming from backgrounds of countering the heavyweight, in vogue, processes of the day. We had embraced lighter-weight processes that seemed more adept at being a more cost-effective, flexible, solution to delivering software faster. Personally, I was mentored by Peter Coad, and the mantra was ""Frequent, tangible, working results."" I had also experienced doing heavyweight, DOD-sanctioned, MIL-STD 2167 inane processes. (Well, I actually created lightweight processes in the early to mid-90s to skirt around that insanity -- and save tax payers money!)
From that grounding, and our group's diverse background, the 4 bullet points in the Agile Manifesto adroitly captured the common features of successful, light-weight processes, yet left ""wiggle room"" by the mere phrasing of ""We value X over Y."" That is, we did not say X is always right, and Y is always wrong.
Since being a ""light-weight"" process evangelist sounded, well, ""98-pound weakling-esque,"" we sought a better term, hence ""Agile"" was born. (Coincidentally, I was working on Agile Fighter R&D, X-39, Cobra maneuver, and what not.)
Four measly bullets, a happenstance change of a term, and all this Agile Hullabaloo happened."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Todd Topolski,2015,"Speaking with 22 years experience in this exact industry, agile is mainly nonsense.
First the premise is incorrect, the cause of failed projects isnt a lack of transparency to developers or developers not communicating or developers not sitting together in a room, slapping junk together to see what sticks. The failure is always a lack of design, testing and planning everything correctly. Most important is how the actual business functions are determined.
Always it is a lack of true business context to determine the initial design and most important, to bring up an old concept, the technical debt business causes by demanding too much for too little and never following a schedule, which is too short. The result is, first design is dropped, then testing, followed by documentation.
Projects dont staff correctly, always shorting the beginning of the project of staff and then overloading it at the end in an effort to ""save"" the project.
It is this last part Agile theory is completely wrong. The developers forming a tiger team or similar at the end to get it done, appearing to be communicating together in room and it looks like well if they only did that at the beginning. Problem is that is not good design or development, that is slapping junk together which is my main issue with Agile.
It is in effect slapping junk together and hoping stuff sticks. The quality of this code is always junk. Then over time, it gets worse as more and more junk is trying to be integrated. Then stuff is redesigned at the end to get better, forcing a rework of the first few stories.
bad projects are always a business problem and design problem, followed by a lack of actual testing. Agile not only does not address any of this, it actually tries to be an excuse to not do it. It creates 30% more costs in extra technical debt and while you may get to the first few functions early, it extends the over all project time.
Nonsense like MVP come in as well, which is just an sham concept to try and convince users, the 3 wheeled car will drive, just doesnt have all the parts but you will get it. Only with agile, the 3 wheels there are all different sizes and the engine is in the trunk and the user has to ride on the roof, because the seats were considered not relevant.
One of the biggest unresolved issues in Agile is the lack of reality when it comes to foundational components. What Agile reality claims is if a user has a story, to put that flag pole and flag on a 30 story building, this is declared an easy 2 pt story. Only there is no building only a pile of construction materials, the building itself must be constructed and then the flagpole put on top. Only the Scrum coaches will scream, the construction of the building isn't ""business"" related so therefore is not relevant and should not be done.
Even if they built the building, there is no way to test all of the components because a fully integrated test of all components in Agile is considered irrelevant because magically, the single story Testing during a sprint is supposed to be enough.
The result becomes the developers just play along, they have their standups, point their stories and etc...but behind the scenes they are just getting stuff done.
All of the above though is 100 times worse when people start trying to mix in the waterfall, or the agile in name only projects.
Agile does get some things right. The focus on specific functions is good because developers do tend to try to build to perfection, instead of what is needed. It also does a good job with breaking work down, it is just far far too rigid when dealing with reality, such as full integration tests where it takes an entire sprint just to prep data,let alone test.
Still, I have done completely successful agile projects as much as waterfall. Bottom line is any project will fail if there is no design, no testing and no true business context to begin with."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Andy Mclaughlan,2017,Because a lot of smaller companies say they use agile but what they really mean is that they just play it by ear and make it up as they go. With no proper planning or specifications. Basically a recipe for disaster.
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Kurt Guntheroth,2017,"The problem with “Agile” is that it doesn’t mean any specific thing. Or rather, it means, like Humpty Dumpty said, “just what I choose it to mean.” Almost any development process, no matter how lame, can be described as agile.
My experience with Agile, is that particular organizations ignore key tenets of the Agile Manifesto, most frequently trusting the team, or reflecting and improving.
For the few of you who really care what I think about Agile, I covered it in a couple of blog posts; What I Like About Agile, and What I Hate About Agile."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Gurmeet Singh,2015,"Because the damned agile development is a giant pain in the ass for developers. You will loose sleep, appetite, will hallucinate, go into depression..and will keep on sprinting.
Its only good for the clients who somehow want you to conceive a baby in 3 months no matter how many birth defects the monster might have."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Tim Boudreau,2015,"What you want to create paralellism in development - to enable adding people to a project to actually get it done faster - is not that different from what you want to create parallelism in code: You want your actors to be able to run full-speed, and minimize points of coordination where they block on each other. Agile adds points of coordination, on the assumption that anybody working for any length of time might be doing the wrong thing - you add excessive coordination to solve the problem of people doing the wrong thing, whether or not people doing the wrong thing is a problem you actually have.
It's a bit like a religion - as in, when agile fails, the solution is always more agile - the equivalent of ""you didn't pray hard enough"" or ""It would have worked but you didn't sacrifice enough virgins"". In a discipline that is critically dependent on doing things that actually work, you're supposed to shut off your critical thinking when it comes to evaluating if the way you're trying to do things works.
There are some problems it really doesn't work for - for example, you can't agile your way around the hard problems of distributed computing - though I've seen people try. Sometimes you *have* to think a priori about what the thing you're building is actually going to demand of what you're deploying it on, and whether or not that makes sense - or you'll wind up with something that looks like it works but can't do the job. It turns problems that should be anticipated into what economists call ""externalities"" - yeah, you're doing 400 SQL queries for each HTTP request (I've really seen that), but look at our velocity!
I've seen it destroy the productivity of teams that have gelled and were quite productive, and I've seen ""agile"" consultants paid a fortune to replace all the ways productivity is measured and then claim a 700% improvement. Being the ""agile guru"" frequently winds up being a career path for mediocre managers - if you're speaking swahili, you can fool people into thinking you're effective. The transparency it offers management is addictive, and it comes at a terrible price.
If you're a senior developer, you avoid most of the problems agile claims to solve because it's common-sense to avoid them (e.g. big-bang integrations, long running projects where nothing works for a long time).
The two ""methodologies"" I've seen work in the real world for highly effective teams are:
- Hire smart people, give them a goal, don't dictate how they reach the goal, and then get the hell out of their way
- Keep team sizes to five people or less"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Sal Ferro,2019,"Lots of great answers but I'll add my 2 cents!
After working in industry for many years, experienced folks typically move into Tech Lead or Management positions, and then try to deploy their knowledge through a bigger team. These best practices are things you *know* work well after years of experience, even if it's unconscious habit. If these folks sit and reflect about their careers, likely they'd codify several patterns that are like Agile, Test Driven Development, architectures, etc. I remember when I first saw a book on Agile and TDD, after working in industry for a while and thought 'A lot of this seems like common sense'
When you have especially a junior development team, these 'Best Practices' are a massive help. They get teams to mature very quickly with less experience.
But at places like Google, you typically have already-experienced engineers. We look to hire a lot of the best and brightest, many are former CTOs, VPs, senior developers, architects. A lot of them feel some principles of Agile and such are more 'common sense', they seem like training wheels / unnecessary process for an experienced team. Working iteratively - the real heart of Agile, is easy to do conceptually, without needing rigid guidelines. So I think it still happens in different forms - as are common sense things like code reuse, code testing, architectures and documentation, etc."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,John Penney,2019,"It’s so funny how the complaints about agile are all NOT about agile, but about some straw-man of a misconception that arises because someone doesn’t take the time to understand what agile means. To wit, quoting from another answer:
“They have realised that every developer is different, each developer has their own processes that they work best with, and that the focus should be on the end product, not how to get there.”
YES, THAT IS AGILE, yet for some reason it’s presented as an argument AGAINST it? I mean, it’s not a personal thing - I’ve heard that sort of argument from LOTS of people, no matter how off base it is.
What Agile is NOT, is a prescription for specific procedures for no reason. What Agile IS, is a set of suggestions for solving common, potential problems that arise in the disconnect between software requirements and the software development process, to be applied IN THE EVENT THEY ARE NEEDED. It’s kind of like the GoF patterns. Sort of “hey, you have a problem - here’s a solution we know works for solving that problem, try that out for a bit and see if it works for you”
For instance, imagine you’re working on a very large code base that takes a while to understand, and in which, for historical reasons there are several chunks of code that should be separate but are interdependent. There, you would bring in unit testing, and use some refactoring practices to slowly pull apart the threads of interdependency. Because of the amount of testing needed to make sure you didn’t break the spaghetti code while you’re untangling it, you need to go slowly at first and make a lot of architectural changes.
In order to keep track of these changes while the software is being used to run the business, you might write some user stories documenting how the legacy software is currently used. Those stories could then be used for a numbers of reasons, from solving live business problems to finding flawed logic in the architecture that has crept in through years of changes, to training new developers more quickly on the system as opposed to handing them an SCM account and saying “read through the code”.
All of those ideas are following AGILE PRINCIPLES. But none of it is PRESCRIBED anywhere - if the ideas work for you, USE them. If not, DON’T. But if you do use them, use them because they work - not because you want to impress some vice president and get your next promotion for having words on your resume.
Agile is a PIECEMEAL approach, with very few overarching prescriptions. Rather it is a TOOLBOX from which you choose the tools that make you faster.
I really wonder if people who can’t figure that out should be developing software at all."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Michael Grier,2015,"Strangely, I find myself defending agile here, a little bit. In general it's a pox on the face of software engineering and acolytes to the true religion of agile are as frustrating to discuss the points with as any true believer of any religion.
But it does help with something that's a sore spot for the industry.
Humans are terrible estimators, especially of creative activities. Sure if you're in the process of building your twelfth house, you can lay out the chart of dependencies and availability of tradespeople and have a very realistic schedule.
Software isn't like that. The best estimates are from experienced people who can visualize work of a similar scope that's been done in the past and can extrapolate, top-down. But these high quality estimates are often significantly longer than most planners expected to hear about so they are challenged and then an effort begins to create a bottom-up schedule to justify. Inevitably, bottom-up schedules are compressed since each item is idealistically small so even experienced developers can say things like ""oh yeah I guess that it would only take two days to code up that interface"", while completely forgetting about the interruptions, restarts and just life stuff that happened that really make the project fit more into about a week. (That is, unless the crafty engineer explodes their deliverables to teensy bits and allocates say a half day to each tiny bit but this is (a) very noticable and (b) introduces both compression and expansion error making the estimate just complete baloney.)
Wow, two days vs. a week? That seems like a terrible estimation job? Well it's actually pretty realistic. It makes dev managers want to puke sometimes but realistically in terms of these ""concentrated days"" of work, it's typical to get, on average, 2-3 off the schedule each work week. (In practice, 2.5 is a decent utilization factor as long as you also have some generalized ""buffer time"".)
So what ""inevitably"" happens is that maybe the original schedule was accurate but when challenged to justify it, the bottom-up schedule is probably let's just say half as long. Now the manager feels that they've earned their pay and they did the right thing getting those slackers to do their work, on time.
Then execution is underway. Everyone's behind because you can't really take 5 days off a schedule per week. Quality gets marginalized. There's no ability to deal with changing requirements; with the schedule already compressed rediculously there's no possible way to analyze the downstream impact of a requirements/design change at this point!
This is the world of traditional waterfall scheduling with let's say 18-24 month delivery cadences. It's (part of) why NT5 became Windows 2000 and Vista was ... Vista. (What surprises me is when engineers are in the middle management positions and are forcing the schedule compression but I guess either they are changed by their new responsibilities or have unrealistic memories of ""getting it done by staying up all night hacking"". Or maybe 1st level managers like me were too intimidated by the questioning and gave in and performed the compression to please their management chain.)
Agile is the reaction to this plague. Can't schedule things out for 24 months? That's OK, don't schedule anything, just have a queue and see how far you get! It's funny because basically rather than addressing the ability to do schedule estimation, instead you declare that basically it's an unsolvable problem and you'll get what you get.
I have plenty of bad things to say about agile but foremost I agree with the comment that it has no place for senior people. Everyone's a fungible resource and your value is in reducing the backlog. Yay. Maybe daily standups are loved by The Kids nowadays but I personally like to be able to manage my own time to a reasonable schedule. (My rule of thumb when I was a lead/manager was checkins at least once a week, preferably 2-3/wk, and two weeks was the longest you would want to plan for someone to go dark to work on something complex or subtle. I personally believe that my teams were outstandingly agile but it's because we were realistic and didn't get distracted by shiny objects in our peripheral vision. But then I also didn't get the Big Huge Payout so maybe my point of view is fundamentally flawed or at least not validated.)
The Google process is not subject to these same kinds of extortions and so the schedule inaccuracy problems have not been nearly as major and so there's not been any real support for following (or forcing others to follow) a simplistic set of rules like Agile. (""What's the Google process?"" Well the issue is really more about what the role of product managers with business responsibilities w.r.t. setting review criteria for engineers so it's hard to say that there's one process but more a general emphasis on solid engineering over artificial schedule compression.)"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Glen Cuthbertson,2016,"Agile[1] and it's associated philosophies are cool, but they are dated. Most modern companies have figured out how to be truly agile in a way which keep them efficient and competitive and that's what matters most at the end of the day.
A recent description I've heard: ""(agile methodology and scrum) it's like training wheels for companies / teams who are not there yet""
In my opinion the growth of Agile (and it's supporting industry) is really there for big companies who want to improve their antiquated and often slow business delivery process to be on par with modern times.
Agile practices mostly stems from principles pioneered by Japanese manufacturing (Kaizen[2]), and even that was inspired by American grocery stores. (Just in time (JIT[3]) stocking of shelves)
It's not unlike the early days of the web when ""putting our business online"" had a vast chasm of variance. In big industry there was this awful term used to describe big business going from ""brick and mortar"" to ""click and mortar"", meaning they were essentially putting some form of the business online while they continue to basically do things the same way.
Companies like Google, Facebook, Github don't really benefit from a conversion strategy, they are already at a velocity where implementing scrum would be overhead.
The trend I've noticed personally is that when teams get good at scrum, realize the real overhead involved in ""sprinting marathons"", and have developed a high velocity team delivering quality products, you don't really need a lot of agile formality to keep that going, in fact it can create it's own overhead which gets old pretty quick.
Having said that, Agile is a lot better than older forms of SDLC[4]; typically a waterfall (think gantt chart[5]) process in which the requirements, priority, and product viability is often obsolete by the time analysis is done and requirements are defined. This type of process, while it may be suitable for some industries, doesn't keep pace with rapidly evolving software development needs. Drinking the Agile cool-aid in this case can do wonders for the culture to ditch old ideas for new ones, and there is good, mature, formalized training and roles you can adopt without endless debating of meaning and purpose before you get started.
Footnotes
[1] Agile software development
[2] What is Kaizen | Definition of KAIZEN | Kaizen Meaning
[3] Just-in-time manufacturing
[4] Systems development life cycle
[5] Gantt chart"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Peter Ho,2015,"Because any named development methodology is bullshit. A company ought to have a process tailored to its cultural assets and liabilities. All ""strong"" companies know this."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Sachin More,2019,"There is already one good old post on this topic by David Jeske , but I am adding few more additional points on this topic.Below is the post link.
David Jeske's answer to Why do some developers at strong companies like Google consider Agile development to be nonsense?
I partially in agreement with some of the points here. I work on software with complex internal structure that is not really deployable in increments. I think that adapting scrum/agile to the kind of work you do is critical. If people get too bogged down in dogma it just leads to frustration.
Agile is just an interface, there are many implementations of it. Just do what works for you.I once worked at a small company where we both made software and implemented it for our customers. We didn't have agile, we just fooled around with a project until it was sort of done and changed the software as was needed by whatever the project needed to continue.
Then we got agile and the first thing we did was drop our project manager, because such a role does not exist in agile. We needed a product owner! And we began to work on projects in sprints. We had limited capacity and too many projects which lead to every sprint just having 3 or 4 projects because focus and lots of projects on hold. Needless to say, customers were not happy and they jostled for sprint priority by threatening to tear up contracts. And we realized that our software was old and broken and rather than use our own people who know every inch of our domain we hired an external company who worked in a silo and just made the same mistakes we did, only for a much higher pricetag.
In the end, we had 3 project managers again, a highly unmotivated in house software team, a new unfinished and unusable product, angry customers, investors who pulled the plug and a company that went belly up. It still fascinates me to this day how we could have laughed all the way to the bank and made heaps of cash if management wasn't so ignorant.
Sorry for this rant, but I just wanted to share my horror story of agile gone wrong.
Deployability in parts is an engineering problem. Even most complex systems can be designed to be deployable incrementally. But it often requires deep changes in architecture.
Well, here's one (of possibly many) reasons to not like ""agile"".
Whatever sort of ""agile"" you preach, it usually says that ""stakeholder"" should be involved early on, and their opinion should be heard.Well, suppose now you are developing a B2B product, where the second B is also the people who sponsor you to develop it, then your ""stakeholders"" are the people who have not just a vested interest in your product, they also have some wishes that might be ultimately harmful to the product.
One such wish could be to plainly reduce the cost of the product, leading to the loss of quality. Another such wish could be to want to roll out the product faster, so that the investment can be capitalized on faster. Yet another such wish could be to steer the business model of the product towards the developer being a contractor, a service provider who can be replaced with another one as soon as there is any competition. I'll focus on the last one, since that something I have unfortunate experience with.
Few Points i am completely in disagreement with David.
“Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.”
“Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.”
Agile manifesto explicitly say to deploy frequently.
""Our system is not incrementally deployable because it wasn't designed to be incrementally deployable.""
Nothing in the Agile Scrum manifesto does it say you have to deploy to production every sprint. The definition of Done is defined by the scrum team. If they decide Done means a push to prod, great. If it doesn't, great too."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,John del Rey,2023,"Unmasking the Mysterious World of Agile Development at Google: Is it a Game-Changer or Just a Geeky Fad?
Picture this: Behind the scenes at Google, where technological wizards brew innovation like a secret potion, there's a whisper about Agile development. Is it the elixir of productivity, or is it just a bunch of tech mumbo-jumbo? Today, we peel back the curtain on this tech-centric tango, revealing why some developers at the tech giant can't decide if Agile is the magic wand they've been waiting for or just another quirky experiment. Buckle up, dear reader, as we journey through the hilarious, the bizarre, and the downright surprising world of Agile at Google.
1. Misadventures in Agile Land: Ever heard of the saying, ""You had one job""? Well, sometimes Agile seems like it has one job: to make things flexible and efficient. But in the wrong hands, it can turn into a tangled web of confusion. It's like trying to teach a cat quantum physics - it's not the cat's fault, but it won't end well.
2. The Resistance Brigade: Developers can be like hobbits; they don't always embrace change with open arms. If you've been using your trusty old sword (read: Waterfall methodology) for years, Frodo-ing your way to success, it's tough to switch to Agile, which feels more like a game of Twister. Right foot on ""sprint,"" left hand on ""daily stand-up."" Awkward.
3. Bureaucracy Blues: Agile is meant to be light and flexible, like a yoga instructor who knows all the poses. But sometimes, it's like your manager is channeling their inner Gandalf, saying, ""You shall not pass without filling out this form!"" If Agile becomes more about paperwork than productivity, it's a bit of a buzzkill.
4. Team Dynamics Drama: Agile thrives on teamwork and communication, but what if your team resembles the cast of a reality TV show? If Sally hates Bob, and Bob thinks Jim's ideas are bonkers, well, Agile won't be the magic potion that makes them besties. It might be more like a recipe for disaster.
5. Big Projects, Big Headaches: Agile is like a compact car, great for zipping around town, but not the best for hauling a grand piano. Some developers think it's too tiny for massive, complex projects. Picture trying to fit an elephant in a Mini Cooper. It might be a bit of a tight squeeze.
6. It's Just Not My Type: It's like dating - you might be into people who love pizza, and Agile is all about sushi. Personal preferences matter. Some developers just prefer a different flavor of development methodology. No judgment; you do you.
In Conclusion: The Agile Riddle at Google
As we conclude our adventure through the Agile landscape at Google, we've uncovered the mysteries and myths that shroud this development methodology. It's a lot like trying to solve a riddle: Agile can be both the answer and the enigma, depending on the context and perspective.
Some view Agile as a game-changing innovation that helps Google's tech wizards thrive in the ever-evolving digital realm. Others, however, see it as a quirky puzzle that doesn't always fit neatly into their world of code and creativity.
In the end, whether Agile is nonsense or the secret sauce to success remains a topic of debate, and perhaps it's meant to be so. After all, in the dynamic world of technology, change is the only constant, and different strokes work for different folks.
So, dear reader, as you step back into your own tech journey, remember that every coder's path is unique, and every methodology has its place. Whether you embrace Agile, dance with Waterfall, or forge a new path, keep innovating, keep coding, and keep the tech magic alive. The world of Google and Agile may be puzzling, but one thing is certain – the adventure is far from over."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,W.A. Baker,2023,"Oh man, you’ll never get a straight answer about this from an engineer. The truth is, Agile was developed separately from industry waterfall scheduling, with all sorts of starry-eyed idealism with regard to social engineering of the workplace. Kind of like object-oriented coding, in a way. “Agile” was gonna make our white’s whiter, etc.
Whereupon techbiz, as it does so, so often…killed Agile in its crib. SV engineering managers used it as an excuse to lay off all their QA engineers and overseas all their support work. Then pocketed the savings. You remember the scene in the LOTR movies where Saruman explains that Orcs were created by torturing and mutilating Elves? Yeah, it was kinda like that with Agile. Introducing smallpox would have been a better idea.
More than a few of us were not fooled. Not enough to ward off yet another SV “new wave” boondoggle. You wanna know why your tech products cost so much? You’re paying for all the sunk capital investment in a lot of dumb product ideas that tanked."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Anonymous,2020,"Agile is one of the terrible move by management
In fact hardly 2% of software knows what is agile
Agile focus on quantity so every project and work is broken in to pieces of task and stories
And no one cares the outcome
Applying agile into a hospital . It concentrates only on how many cases you attend and complete . No one worries about how many patients have been cured or even given a first level remedy . And the doctor who attends the maximum patients in 2 weeks will be appreciated.
And since you have only 2 weeks to meet the deadline . You can't imagine something called as helo and professional opinion. So when the patient's been transfered from one department to another there is hardly time to discuss why he's getting transferred and whats his underlying problem. They see the x-rays and mtr report and take a dice and roll and start a treatment based on the dice result :) and always declare the case is either discharged or dead or even in some worst cases forced to commit suicide .
This is exactly how agile software process works.
And it will die when software companies die miserably one day"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Ellie Rice,2019,"Well, actually if you Googled it, you would discover that Google DOES use Agile. So I have no idea what you’re all, people, bragging about.
Google is large. It has many teams working on different parts of its products. Some develop Google Maps, some are responsible for super-duper doodles on the front page… you got the idea.
Since the company’s policy is highly against any imposition from above, mainly the teams themselves choose whether they want to use Scrum, Kanban or whatever else. The employees can combine these Agile frameworks or use none, as soon as they are happy and show outstanding results.
In general, as some of the answerers has already pointed out, the values of Agile are very close to Google’s inner spirit:
innovation over sticking to outdated documentation;
people-friendly development process and user-friendly products;
technical excellence and so on.
But let’s pretend I didn’t see that. So why other large companies don't like Agile?
When not to use Agile
I want to stay in the ambient of software development. This methodology is also used in other fields like Human Resources, medicine and whatever. Honestly, I know nothing about that and how on Earth people manage to build Agile banks and nightclubs.
There are cases where Agile is indispensable. I don’t understand those people who say so much shit about it like it’s the completely wrong approach regardless of the problem. That’s not true and don’t try to mislead others with your pseudo-logic.
However, in some situation, Agile is truly not the best choice. Not because it’s erroneous in itself - it just depends on the type of the project!
Large projects
Imagine making Google work was one great project. And they would try to organise the whole company as one team. I wouldn’t be surprised if the company didn’t live a day.
It’s true for all large projects. Agile frameworks actually dictate you how to organise your working process. They all suppose you work in short iterations. And the work should be finished before the next rather small period of time.
It works fine when you aren’t sure where you want to go. Anyway, in a large project, this adds unnecessary complications and promotes ill-thought architecture of the future software.
Not full-stack companies
Imagine you run a company that specialises just in one narrow field of programming.
It doesn’t make sense in the company where you need to outsource 50% of the task to external staff.
Unstable IT agency with the staff leakage
According to Agile, the team should be self-organised. Everybody is aware of what everybody else is doing and bears great part of responsibility. If you have to work for yourself and for a couple of guys, who left the room, you are demotivated. And with the newcomers, your pressure is even harder.
Also, the less experienced the person is, the more he tends to overestimate his knowledge and quality of work. This is very serious when it comes to the project assessment, and can lead to total chaos.
Distant workers
Even though the modern technologies let us be in touch with each other 24/7, Skype calls and messengers are still not the same as real life presence. Surely, you’ve heard stories about distant designers, developers or whoever that were unreachable in the crucial moment or disappeared in the middle of the project.
All in all, I think Agile is great in many cases. It demands experience and high-motivation from the team, so it’s definitely a plus if the vendor has a possibility to work by Agile. Here I found a case for your that shows: sometimes Agile can literally save you from a total failure. Feel free to check it out.
But it’s even better when the company can switch between different approaches and the team can choose the best option for themselves."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Liz Laurents,2015,"Because good programmers just use the approaches embodied in ""agile"" while crappy programmers talk about using ""agile"" as though it will make their work better, ipso facto ... it won't; instead it will probably render them incapable of remembering what they're supposed to be working on."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Onimisi Onipe,2015,"No organization does Agile... they are only using the term to intimidate themselves. In as much as development is science... it is more of art and craft.. you don't and can't manage artists.. this is the same with developers of all kinds. And any attempt at managing developers leads to low quality products. The problem is most of these Agile nonsense are prominent among those in Java and .Net Enterprise world or whatever. And trust me, those developers or those business developers don't in any way encourage or even motivate upcoming developers. The corporate world or the corporate world we created is full of its shit, maybe we should learn to define and understand creativity, we should learn to avoid rigid and stupid rules and let flexibility take the lead instead of relying on some manager's stupid version of Agile.
The best of the best developers are not the ones that sit down 15hrs a day to write codes. Talented developers don't like your Agile, they don't like your precious Corporate meeting and you are going to kill their talent if you keep insisting on your Agile.
Personally, I feel this kind of setting is common to organizations where the decisions makers(Managers) are not good developers or were not good developers."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,David Chidakel,2015,"Google has clearly used Agile in software development - to what extent, it is difficult to say. If some of its project leaders aren't convinced, it shows that Google hires smart, independent thinkers who aren't afraid to challenge orthodoxy .
That's the way it should be."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Chip Frank,2015,"""Agile"" is a modern business buzzword. It's more of a resume & sales-pitch, or ""I'm an expert, hire me for my services to make you agile,"" type of term.
Agile, as intended by the founders, does not make sense in it's modern business-oriented implementation and interpretation, such as the business-oriented buzzword it has become.
I've gone-on about this before in past answers, but, for example, I'll put the first ""Agile"" point first and foremost again:
""Individuals and interactions over processes and tools""

Question: How do most businesses implement Agile?
Answer: With a process or tool.
That's not negative or cynical, that's a raw, bottom-line FACT.
Pivotal, RallyDev, Atalassan, etc... pick your ""Agile"" consultant, preference & implementation. Go to a conference or workshop and come back to work and start singing Cranberries songs: ""Everyone else is doing it, so why don't we.""
Even Microsoft's new VisualStudio namespace does the same as everyone else.
Factually & Pragmatically speaking:
You need this. Businesses need some reasonable way to keep priorities in order. It is not ""Agile.""
""Agile,"" by dictionary definition, is the ability to adapt. Set processes, tools, policies, procedures, and conformance to any other measure of crap to ensure any degree of compliance with staying or being ""Agile,"" is, by definition, NOT AGILE.
""Agile,"" as defined by the modern business world, on the heels of the Agile Manifesto founders, is extremely inappropriate and inaccurate.
Lastly, ""Agile,"" is a frame of mind, and, not everyone embodies it. The bureaucratic monkey / junkie mindset (protective of his/her job though policy, including adaptataion to that tool or process to implement ""Agile"") DOES NOT embody truly being ""Agile.""
It has become a corrupted term. Plain & simple.
In addition, I'd like to note that I e-mailed Martin Fowler a while back. I never received a response. BUT, that e-mail was specifically about how individuals could sign the Software Craftsmanship Manifesto.
Guess what? The Agile Manifesto website has since allowed other individuals, not just it's founders', to become signatories.
Go figure. It's become a named industry. Because the original names behind it benefit from it... they'll do what they can to protect their interests, excluding certification of an organization to actually be ""agile"" and adapt to changing business needs. (But, I'm almost 100% sure that they'll eventually implement some sort of ""certification"" path for software services you need to pay for as somehow truly, and ironically being ""agile."")
Other factors:
""Working software over comprehensive documentation.""

As the question states, why are some ""Google"" employees against ""Agile,"" maybe because if they don't provide good quality, comprehensive documentation about Google's services, then the software that developers produce to leverage Google's services ends-up NOT being ""working software.
Documentation about Google's software & services becomes KEY in a service-oriented-economy. Else, developer's can't produce ""working software"" for their customers, leveraging Google's services.
And, if you're not agile enough to adapt to changing business needs, AND provide adequate documentation, it all falls on it's face.
Which then either fulfills, or does not fulfill:
""Responding to change over following a plan.""

This stuff is all very basic (for the apt & attentive mind with some degree of experience in such worlds).
But, again, the first argument: How do you force your people to ""conform"" to being ""Agile"" other than some process or tool?"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Walt Karas,2015,"In my opinion, all development methodologies are like highly dogmatic religions. They are all irrefutable. They are too inflexible to follow completely. These inevitable ""sins"" can then be blamed for any and all problems with the project outcomes.
A software system can easily be as complex as the plot of ""Oliver Twist"" or ""A Tail of Two Cities"". Yet, somehow, no one ever asks ""why didn't Dickens get together with 9 other authors and write 10 times as many novels!"" Or, suggests that all you have to do is follow a certain procedure to produce novels as good as those of Dickens.
No methodology can reduce the amount of creative problem solving needed in SW development. The worst problems in SW systems come from developers not making an effort to anticipate problems. Developers need to understand what the system is supposed to do. They need to decompose the system into one-developer-sized pieces, and be clear on how their piece fits into the whole. There are lots of tools (like UML) that can be useful. I'm not sure there are any that are useful in all cases. The fact that the developers doing the work need to be pressured to use a tool is a very good sign it's not useful in their project.
I'm a big big believer in scripted testing that is run frequently for regression. Some say it makes sense to compromise that goal, when the end user wants it fast even if it's somewhat buggy. I'm not convinced, as one is always tempted by excuses for laziness. But I'm not sure this isn't true in some cases."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Ulrich Staudinger,2015,"It's simple.
Agile Development is a methodology. Methodologies help poor managers and poor organizers become half-good managers and organizers - so that things can't go wrong fully.
Great managers understand that your people are your most important resources. And you want your resource to excel with whatever approach is needed, not to drown in a rigid framework."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Andrew Shebanow,2015,"jasmine's answer is very thorough, and Peter Ho's answer puts it all much more succintly. I'll add this rule of thumb: if you are spelling the name of your methodology with a capital letter (e.g. ""Agile""), then the bullshit meter is off the charts before you even start talking."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Trent Hamilton,2017,"See, here’s the simple answer.
If some “consultant” is being paid to sell it to management purely for accountability - it’s probably bullshit.
And it is.
I’ve worked in environments that preached Agile and SCRUM to the end of the sky and ones that couldn’t possibly care less about it.
Guess which ones were the most productive and delivered the most results?
Spoiler alert - not the Agile ones.
I still see no use in it other than to give bogus numbers to someone looking for accountability and to be a micro-managing asshole.
But that’s just, like, my opinion, man."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Michael Bolton,2015,"I think it might be helpful for those saying ""the reality"" to modify that to ""my reality"", and then ask these two questions: 1) Am I really working in an Agile environment? 2) If I were, would I still think it was nonsense?
For example, Jasmine says ""My customer right now is another business unit. I have never met them and I have no idea what they do. This is the reality in most companies. We don't even know the customer well enough to ""satisfy"" them, and certainly not well enough to make it job one."" Certainly that's her current reality. But is the organization following the principles of Agile development? If it were doing so, would she still think Agile is bullshit? And since an important goal of developing software is providing value to people, is her reality (whether named Agile, Fragile, Rapid, Waterfall, Windfall, Moneyball, or Somersault) a desirable situation?
---Michael B."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Tim Scott,2015,"I don't have firsthand knowledge of the practices of Google or the other ""strong"" companies the questioner might be referring to. However I challenge the premise of the question. Is it the case that these companies believe the following?
That coding should go on for months before any non-developer might lay hands on any form of working product?
That business requirements must be completely and finally developed before the first coder is introduced to the process?
That detailed design is a contract and, once executed, any deviation is an exception remedied only by a painful bureaucratic amendment (""change request"") process?
That direct communication between developers and product people or actual users is discouraged or even prohibited? In the unlikely case a clarification on final design is needed, that's the job of a specialist.
That periodically reporting ""percent complete"" of months-long bars on a Gantt chart is the best possible way to understand progress and forecast overall project completion.
That complete means complete. Upon completion of an application, the ""new development"" team is disbanded and different maintenance programmers are assigned.
That only people who wrote their last line of code years ago have the ""experience"" needed to choose tools, frameworks, and practices and to layout the overall technical architecture of new applications.
That the best and only feedback mechanism for the individual is the annual performance review and no formal introspection is required for the team and it's methods.
That automated testing is impractical and a waste of time.
This may sound to you like a dystopian fantasy. But it was the prevailing wisdom of how to correctly develop software prior to the Agile Manifesto. I know; I lived it. Unless you're following the above points, you're not shunning agile. You're just shunning some of the worst cargo cult snake, oil perversions and excesses.
This is all to say, these admired companies almost certainly are practicing agile whether they say so or not. Paraphrasing Milton Friedman (in what for him must have a been a devastating admission), We are all Agile now.
These companies are simply clever enough to understand there's no PR benefit to go around trumpeting ""We're agile."" They understand that...
Every great cause begins as a movement, becomes a business, and eventually degenerates into a racket.
-- Eric Hoffer

...and understandably have no desire to be associated with something that's increasingly perceived as a racket."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Randy Terbush,2015,"Agile was an attempt to codify what was happening in the open source development environments in a way that could be packaged and implemented in commercial environments. As some responses to the question have suggested, an ""Agile"" development process CAN work for certain specific circumstances. Here are a few questions that you should consider before applying an ""Agile"" development process to your project. If you answer ""Yes"" to more than one of these questions, you should seriously consider another approach.
1. Do your customers consider your software to be mission critical to their business?
If your customers cannot tolerate a few bugs or incomplete features in your product or service, then you must recognize that you will lose customers as a result of adopting an Agile processes to deliver that product.

Agile, by its definition, means that the very short release cycle will contain bugs and will likely include features that are incomplete or at least have not had any real customer feedback to establish a complete set of user stories (requirements).

2. Is your development team for this product more than 20 people?
The number ""20"" is somewhat arbitrary. The point being made here is that the team must be relatively small in order to remain ""Agile"".

3. Does this product have integration dependencies on other products not following an Agile development methodology?
Agile teams will struggle to work with other application teams not working at the same pace. Even individual Agile product teams will more than likely be on their own schedules, so expect that there will be misses between the teams. The good news is that the development cycles are short enough that you might resolve the issue before anyone notices.

4. Are any of your functional teams not co-located?
""functional teams"" are defined as your development team, test team, product management team, operations team, etc.
It would be bending the rules a bit to not have everyone in the same building. That said, it can work if at least the functional teams are in the same building and your interactions between the functional teams are effective remote working relationships.
This question will knock out most large organizations since some component of a development team is often ""off-shored"" or the product serves multiple divisions of the business, each with their own product management duties for that customer segment.

5. Are any of your functional teams not using the Agile process?
It is nearly imperative that every functional team in the chain of the Software Development Life Cycle be using the same development process. This will become painfully obvious if one segment in that chain of responsibility starts using Agile while others do not. Therefore, at least from a standalone product standpoint, a commitment to Agile is an all or nothing endeavor.

If any of this resonates, rest assured that you are not alone. Many large organizations are realizing that being Agile means adopting many other changes to their business that are not necessarily positive change."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,David Rind,2019,"Question: “Why do some developers at strong companies like Google consider Agile development to be nonsense?”
I can’t speak to specific companies, but my sense is that what I viewed as the good ideas in Agile development became complete crap in the implementation using “Scrum Masters” and people certified in Agile.
I’ve both developed systems and been a consumer of such development, incidental to other work I’ve done over the years. Some of these have been very large projects that took years of effort.
In general, the interaction between users and developers does not work. When a non-programmer tries to describe what they’d like software to do, it tends to go really badly. Because of issues of lack of knowledge on each side and often completely different personalities and goals, a product ends up being created that does not come close to meeting the desires of the person who wanted the software.
Agile, and related views of the world, make the reasonable point that we can’t expect most users to know and communicate exactly what they want and so less time should be spent on initial specification and more time on iterative design, particularly on designing the user interactions with the system. When we try to specify systems up front, including the user interaction, and then the user doesn’t get to see the interactions until the entire system is built, things pretty much never go well.
However, whatever good there might be in the view of iteration, flexibility, and initial work on user interactions, it has been implemented by people who are the same rigid managers who previously used a waterfall process to tell users, “You can’t complain. Don’t you remember three years ago when we worked on this spec? The system checks every box on that spec and we’ve spent three years building it. If you don’t like it you screwed up back then.” Sigh."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Torgeir Helgevold,2015,"I personally prefer agile projects, but I find that certain agile practitioners can get a bit carried away sometimes. Generally my view is that any methodology you follow as a team will work out as long as you stick to the plan and evolve the process as needed.
No process is prefect, but I find that agile people sometimes put too much stock into metrics like story points and hourly estimates. Incorporating granular data points like hours and points almost suggests that there is some sort of scientific accuracy around the process. People/management can easily be fooled into believing that these metrics are safe projection points and guarantee a predictable release date. My view is that these numbers should be taken with a grain of salt as the accuracy of estimates fluctuates greatly. However, it also appears that over time the errors in estimates average themselves out and arrive at a pseudo reliable metric for progress.
There is also a certain level of exaggeration when agile people compare themselves to other methodologies. This is especially true for comparisons with waterfall projects. Instead of pointing out that there are degrees of waterfall and agile adaptation, some people often compare agile to extreme versions of waterfall when talking about why agile is so much better. In reality many projects run as hybrid solutions heavily influenced by company culture.
I think the real power in agile is not in the estimation process, but rather in its incremental development cycles. Developing a feature incrementally encourages a feedback loop, that over time, may improve the quality of the product dramatically."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,James Simpson,2016,"This is one of the better threads touching on Agile that I've read here for many months. In particular the answers from Curtis Poe, Russell Wark and Jon Kern capture almost perfectly the sentiment and experiences of the developer community I know.
I can offer 4 points to the question: “why do some developers consider agile to be nonsense?”
When Agile is discussed as the only way to develop software, there will be scepticism because history has shown there are many ways to develop software successfully. Each has a differing set of advantages and disadvantages. You choose the method that suits your conditions. When people say Agile is the ‘only way’ (yes, it happens), other people will think this is nonsense.
At heart Agile is an approach based a small number of common sense ideas about how people work together to build software. From these ideas, an entire industry, and in some places almost a quasi-religion, has been created. When simple ideas are co-opted into what sounds like a fusion of brand and dogma, some people will call this nonsense.
What Agile is particularly good at is helping teams build software in environments where there is significant uncertainty and change. It is not as strong at helping teams (and the businesses that fund them) understand what the likely total costs will be, or the likely time-frames. It is not as strong at developing large scale highly of reliable software for life and mission critical systems. People who develop software in environments that need to worry about these issues, and who are told “Agile is the answer”, will likely say this is nonsense because it is the not the best tool for the job.
Finally, there is a purely emotive reaction that takes place when you try to push something onto people. The industry that has developed around the Agile brand is very good at evangelism. However this strong evangelism also repels some people. The ICT industry is full of contrarian personalities, and when a something is promoted too strongly, they become sceptics. Some of these people will call Agile nonsense for no other reason than to push back against what they feel is a overly energetic fan base."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,J. B. Rainsberger,2015,"Probably because they've never seen Agile, but rather, some person's well-meaning-but-point-missing interpretation of Agile as yet another defined process. Not necessarily, but probably.
There are people who genuinely don't value Cash In My Pocket Sooner, but instead, value other things. They probably won't value Agile. People who have seen Agile, thought about it, understand it, and still reject it--I imagine them to be rare indeed."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Marco Fuxa,2015,"I think all the answers, while sincere and well argued are entirely missing the point of agile methodologies.
Lets answer the question: Why does Google not employ agile methodologies? Because they got so much money to burn that they can afford to spend all the time they want writing the specification. Then they can pour a gazillion bucks into the execution. And if the business proposition flops, ""oh well... it was a learning experience."" If you are one of those corporations with 50b in bank gathering 2% interest, you can afford to take 1b losses, ""since its not touching the principal"".
For those without the ability to blow a b, the process is entirely different.
The only successful metric is buying customers. But you don't know what the customers want, because they don't know what they want. You ask them what they want, and they tell you abc. Then you deliver abc, and they start huffing and puffing. Then company B comes along, and they say ""don't care what you want, you don't know what you want, this is what works, its XYZ and its within your allocated budget, so suck it up and fax us the signed PO, before we fire you as a customer"". And then XYZ becomes the breakout company of the year.
So agile methodologies allows you to put ""working, sloppy, disgracefully executed product"" in front of paying customers. Then you can ask what kind of value add does it brings the customer. And from there you can make a rational case, that if the software brings the customer 5X his employee's salary in productivity, he should pay you somewhere between 1 and 5 for it. And once you have figured out that only Fortune 100 Cos, will buy the software, then you can take your total development costs, your ongoing servicing costs, your sales costs etc, and divide that by 100. That is the number you need to rationalize. If your total costs are 2X what the the customer can rationally pay for, then you need to abandon the product, while you are three months in. NOT when you are a billion dollars in.
So the point of quick ugly software, I mean agile development, is to make sure there is a market for the product before you pour serious resources into it.
Now lets state the obvious: The yahoos and the googles of this world do not produce innovation. They are not structures designed for that purpose. And the bean counters often get tired of billion dollar sink holes in their balance sheets. They know they are a one trick cash cow. They are in the milk business, do that well.
Innovation occurs in the scrappy messy world of startups, where vulture money, I mean professional risk managers, chase the pops that are getting traction in the market place, and leverage that success with the tools they need to scale. Then the big buck monopoly rent companies can make rational opportunity cost/time to market/execution risk calculations and pay the innovators for their sloppy no good for nothing impossible to scale technologies that customers are buying.
Because agile development is not a specification, followed by brilliant execution, but rather, about the technical feedback loop between business innovators, and potential rational customers.
Most of the answers here revolve around brilliant technical people getting upset at the fact that once they bust their ass delivering what was asked of them, some pip-squeak $200 suit tells them the product is shit and needs to be entirely re-written. Because that is what his customers are telling him, now that the product is built. Because that is the process.
Last point:
Engineers that take pride in their work, will take pride in their tools. Take a look at an engineer's bench, and you can tell the kind of work they do. Take a factory tour, and you can tell what kind of product the factory puts out. You can look at an assembly line and with confidence say ""2% RMA rate, right out of the box...""
By the same token I have seen brilliant engineers take a AAA cell, and take a $3000 Fluke Multimeter to it before deciding what to do with it. Actually a $9 Radio Shack meter would do. So would a pass/fail light bulb. Or just putting new batteries in the damn gizmo and seeing if it fires up.
The competent engineer that takes pride in his work will always demand the Fluke Multimeter, and quickly glance at the NIST Calibration sticker to check the date. That's in his nature.
Technical sales revolves around that issue, most of the time: ""I want a Fluke"". ""No, here is a twenty pack of triple A's"".
And if anybody touches my tools, I promise, with God as my Witness, I will break your arm, right at the elbow."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Christopher Daniel,2015,"There is nothing wrong with Agile. There are just companies that do not know where to not use it.

Agile is very suitable for certain types of projects, but if you happen to work for a company that does a lot of projects and uses only one software methodology, no development method will be suitable for all of them.
Some developers will hate Agile as much as others will hate 6-sigma, because 6-sigma suffers from the same problem - only certain projects are suitable for 6-sigma.
Agile seems to be designed around removing the uncertainty. Iterative, close customer-developers loop is expected to ensure that the software is the best trade-off of cost and value.
Except... very few projects are uncertain enough to be developed in that way. If you have a precise requirements of what is needed by your customer, then there is no need to apply Agile.
Consider f.e. a hypothetical example that you want to be build a burger printer - a printer capable of printing burgers on demand.
If you do this for the very first time, and nobody did that before - you should use Agile, because nobody, literally nobody is able to tell you what challenges are in the front of you, how the machine will look like, how much time it will take... and you can be sure that you will have to make many changes in the product.
However, if your printer works right now, you want to test the market. At this time you need to calculate required investment and profits, but you are not required to be at every stage of production. The team already knows what should be made. Agile is less suitable for that project, 6-sigma is not yet suitable. This is a transitional phase.
Congratulations! You're tests are successful, and now you want to put your printer in every household. Can you imagine building a printer factory with Agile? Without upfront capacity and supply planning? No? Then why do you apply such approach for writing software that is mature enough to be an equivalent of a factory? This is a project for 6-sigma.
More details about choosing right methodology for a project is available at this blog: http://blog.gardeviance.org"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Sergey Babkin,2019,"The idea of Agile is great: you start with a very limited but working product and keep changing it little-by-little, adding features and changing the internals until you get a large and still working product. And at each stage you can use it in production and receive the feedback on the direction of development.
The problem though is that the formal Agile Methodologies don’t do things like this. All they do is the useless churn without keeping the product stable and getting the actual feedback from the users. And there is ZERO use in the daily meetings. There is no useful thing that can be reliably done in less than a week (yeah, there are small things that can be estimated as “1 day” but in reality if you have 5 of them, you’ll end up spending 2 days on 4 of them, and 3 days on another one because something didn’t work as expected, so estimating all 5 as a week is OK but estimating each one as 1 day is wrong)."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,David Ferguson,2016,"Many developers believe Agile development to be nonsense because they’re intimately familiar with nonsensical implementations of the Agile philosophy. Far too many groups believe that daily standups, defined sprints, and the tool du jour means that they’re running an Agile shop.
Quick (and partial) checklist for whether your Agile development model really is:
Is there time (or task) scheduled to create the demo/release?
Does your backlog ever lay dormant for more than two iterations?
Does everybody on the team know who the product owner/customer Rep is?
Do you have individual items that take more than 30% of your interval?
Do you finish an interval with more than 1 item in progress but not done?
Is another team responsible for testing the functionality you created?
If the answer to any of the above is “Yes”, then you are not running an Agile development model. And FAR too many companies claim they’re ‘Agile’ while developers know better."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Tarasekhar Padhy,2021,"Many developers feel that Agile is just a waste of time. Here are a few reasons:
They “do agile”. Agile is a set of principles that will help you create your own process. If you follow some other team’s or organization’s practices that they have adopted to become agile, then it’s not agile.
Forced status update meetings and mails at the end of day just to fit into the frame of Agile is not agile. If you don’t need to send status update emails every day, then don’t. If you feel that a simple text message is more than enough to update your entire team, then choose that. Agile is about doing whatever works and changing it when it doesn’t.
Choosing practices over principles is one of the biggest mistakes. For example if a company is doing 10-minute-meetings, you need to understand why it works for them. Just copying the act will not at all give you the same result.
Appearing agile on the surface rather than actually being agile. When senior management forces the employees to send detailed reports over email, or some tool, even though a 10-minute informal meeting will do the job, things starts to fall apart. Filling up an EOD report just for the sake of it is never a good idea. Updating your team is important but you need to choose a way which is the most efficient, not what the management believes.
Finally, agile methodology brings a lot of things onto the table. Recently, we have wrote an article about the implementation of agile in eLearning development.
Use Agile methodology to build better elearning courses | zipBoard
Agile has been utilized widely in the software industry for years. Learn why and how to implement Agile while building eLearning courses.
https://zipboard.co/agile-in-elearning/?utm_source=quora&utm_medium=social&utm_campaign=Outbound_quora
Do take a look and let me know if the idea of agile is actually way different than how most developing teams interpret it."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Kirk Burleson,2015,"Because they're 'A' players and 'A' players don't have to be micromanaged, chased after for deliverables, prodded to do work, or otherwise be restricted within a framework of mediocrity. In other words, they're grown-ups, they're responsible, and they thrive on having the liberty to create and innovate. Oh yeah, and they just don't like all the nonsense."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Juan Van der Dys,2015,"I take issue with organizations that expect a significant positive change by [only] switching software development methodologies (or tools, or company logos). I think this article reflects a symptom of a widespread corporate problem. IMHO it's not about Agile or Waterfall or the next favor of the month. It is about having a shared vision and a meaningful purpose that gets people excited and eager to get the mission done. It's about having an environment where there's trust, open communication and respect in which innovative ideas can flourish. It is about having appropriate tools and practices in place to be able see where you are at, evaluate deviations from your plan, reassess your path forward and continue pushing towards your goal.
Agile is a great framework that may help achieve your desired outcomes. It will help set up a good environment. But it is not a substitute for good organizational leadership or strong technical knowledge."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Spence Murray,2015,"Well, let's summarize by saying that our industry is evolving, and as such, processes need to evolve with it.
At my first few companies, teams were smaller, and communication was easy. We informally talked each morning about status & such, and things moved along. Everyone was fairly senior, since a lot of things had to be built by hand -- libraries, infrastructure. It was a team full of experts a lot of the time. Most folks knew a lot about what needed to be done already.
Key point: we were often building new things, for the first time, and it took as long as it took. We were highly motivated to see it come together, but done ""right"". So we collaborated closely, checked each others work, and spoke frankly about things.
Nowadays, there are many more companies, many more devs, many more users...processes, plans and products are dramatically different. One difference I find interesting is the user-focus of stories as a project management tool.
On the one hand, it's insightful to keep in mind how your user will interact with, and benefit from, your solution. Whether or not that customer is a real end user, or another software system, there's strong correlation in terms of value to that customer.
Then the benefits gradually diminish, depending on the project, people, etc. Interestingly, I observed this particular change in the industry as a result of the overwhelming popularity of website development, and later, mobile dev. There were suddenly orders of magnitude more developers, but the flavor and definition of that role was diversifying. No longer was it mostly near research-level people creating algorithms and systems for highly technical problems (hacking Unix directly, writing drivers or complex algorithms, low-level networking systems for highly constrained applications)....there were new realms of directly end-user facing software dev that did not require lower level understanding of the underlying system or network.
This was a amazing! Programming evolving into a mature industry!
...and then things really started to change.
Managing developers evolved in the direction of the print world, or a design studio...I recall the moment when a software work environment essentially became a hectic newsroom right before my eyes. Literally, in the span of a few years, an industry in which we worked and focused and concentrated in offices changed into a chaotic open room in which critical decisions were made as quickly and as ad hoc a fashion as less consequential ones... and work was condensed into bite-size chunks. Unfortunately, this model doesn't work for many projects or people.
There was a great leveling of talent and creative autonomy along with it. It best served industry to homogenize these crazy untamed programmer types, in order to better fit business models and financial forecasts.
Agile development and other concepts evolved right alongside.
Now, there are two sides to every coin, and there are benefits to every change I've mentioned. I've been in the trenches with many of them.
I pick the meat off processes like agile, kanban, etc, there's useful stuff to apply. The key is to make your choices with clarity -- realize every product, project, team, individual is different. Think in terms of making your efforts maximally worthwhile, no matter what your job is... and assist others to do so.
This can mean...
...if your team really knows what its doing, that will become clear very quickly with daily check-ins (stand-ups)
...if your project involves long stretch planning or infrastructure dev, you'd best plan for that -- weekly sprints won't cut it
...inform your lead or team every time you learn something that was unexpected -- let them benefit, and help the planning to evolve with reality
...regardless of your position, treat your area like it needs all the help from you that it can get...and that there's greater benefit in collaboration when everyone thinks that way
Whatever you do, don't get comfortable, it's the death grip for a project or company. Focus on creating the best work possible, and make the processes serve you -- not the other way around."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Matt J,2015,"Agile to me is like Communism, a concept of great merit that just cannot work in the real world.
In reality what we get is a sort of Agile - lite, where we define a spec, deliver a product then tweak it at the end when the customer doesn't quite get what he specified."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Varun K,2017,"I have 11+ yrs of IT experience and have delivered almost every project (of all sizes) in non-agile model till this year. Once I started working in Agile mode, I noticed that each developer had their there own way of coding without any documentation whatsoever.
Personally, I feel that a project’s conceptualization and design phase shouldn’t be in agile. We can which to Agile once we have a laundry list of tasks and ways to do it (no. of modules and functionalities, design patterns etc., ) then agile can be followed. Without it, what happens in Agile is, developers think on their own and may override/forget the design principles and patterns to merely achieve the weekly target. Once the finished product comes, it becomes hard to support and maintain. Scrum Masters don’t understand this."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,David Ringsell,2015,"That's how you can express Agile Development, humor wise."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Nick Geller,2015,"I believe the reason behind certain level of disdain for Agile is best described by Albert Camus in the following quote ""... I admire that diligence, the methodical patience! When one has no character one has to apply a method."" (The Fall). The agile manifesto has some prescriptive elements that are reinforced by strong notions such as ""best practices"" and ""highly motivated individuals"" but in practice we treat the 12 prescribed principles (through SCUM and such) as if they are the 12 commandments. When you don't have character (in the original greek definition of the word, the impression something makes on another thing) you do not morph between the principles to achieve an impression that is Agile.
When I am asked about Agile or SCRUM I remember the following joke told to me by an old C programmer: ""Object Oriented Programming is a masqueraded attempt at communism""."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Kelly Iriye,2015,"We love to use Agile project management whenever we can, but there is definitely a time and place for it. Your typical business owner doesn't want to 'grow' their product, they just want their product created. While this has lots of issues by itself, it is important to know the distinctions between when to use the regular, 'ol fashioned way and when agile might be an option.
To keep this short, I'll just go over when to use the agile methods.
When your client has a steady income. This is not to say they have 6 figure they're willing to blow. But agile management (the way we at Webity, do it) is to build additions as they are thought up or found out. We'll create a an outline of what is expected, but as things show up and testing is conducted, the path changes with the product. A steady income allows for endless changes until the clients says 'we're done'!
When your clients Trusts you. ""We want to help you get the best product"" says every business ever. This is the biggest key. If your client doesn't trust you, then agile management will flop. You'll get frustrated because you're client wont tell you all the details and they wont tell you all the details because in the back of their mind, you're just a contractor and they know best. This typically means you'll have to start a relationship with them for a few jobs and then present the agile management process.
The project warrants agile management. A lot of ideas can be developed using agile management, but there are projects that work best by setting rigid milestones and sticking with it. You client typically let's you know which one based on their idea's and how open they are to change. If they don't like change, it's best to stick with milestones.
Ok, these are the top 3 we look for when we're going to present the Agile management process. All this to say, the reason Google and the Big Guy's don't like Agile comes down to company size. Working in agile means learning a lot about your client and having a solid, trusting relationship with them before you start the project. For the bigger companies, it's not worth the effort to work one-on-one with a client and create a product over time. Rather, saying ""we can do Y"" and that's that is much more efficient to serve a lot of clients at once.
Agile management seems to work best in smaller companies or startups, when the time and effort can be focused on creating things that matter to the client."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Karel Tejnora,2015,"IMHO we must differentiate between gluers and innovators. For gluers it works very well ( see I put a glue here and there, do you like it?), yet for the innovators not so much. And if you doubt that, look up something from the neuroscience ( focussed vs diffused mode of the brain). Gluers needs to focus to put the glue right. But I don't know personally a manager who is ever happy to pay very high salary to somebody for staring onto the wall. Yet there it is were the 'Next Big Thing' comes from.
Henry Ford said that if he would ask what people (customer) wants the reply would be faster horses!"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Hemant Desai,2015,"Thank you for asking this question.
It needs to be asked to the entire industry of software, including the programmers, managers, customers.
Too often, Agile is pushed as the silver bullet that will help all in either the software dev org. or the customer which maybe a non-software business.
Would like to add just one point to the fantastic answers of Jasmine Adamson and Michael O Crunch, incase they have not already covered it.

Based on organisation structure / design, culture and requirements, the best fit for Agile applicability is Startups."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Warren Postma,2015,"Every movement devolves into a meaningless series of fetishes. Agile is at the end of the day, what we make of it. The founders of the movement meant it to be a good thing. So did every founder of every buzzword laden movement in this profession. As a person who has sincerely tried to see the good in it, and who has also been unable to ignore the pattern where developers seize on things, pervert and subvert every good thing in them, and cling to practices because they're Agile, rather than because they work, Agile has descended into cargo cult and fetish, and abandoned pragmatism, practicality, and has little to show for itself."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Tansu Dasli,2019,"For greenfield products, you need wolves (software engineers) and prototyping paradigm is the best.
If you use agile, for a greenfield product, limit goes to infinity. That becomes an endless story.
once you have the product, you can deliver it to dogs (software developers), which is more crowded than wolves), and agile paradigm is much better. They can adapt change faster and business side involvement increases so they can not blame IT and transparency increases by the way..
in time, agile manifesto has forgotten and there is so many applications now."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jack Mullaney,2015,"Back in the day, there was a problem with software development called management. Management knew that the 'way' was to thoroughly plan, then thoroughly develop, then thoroughly test. So that was the environment. Then Sales said, Hurry Up! and We Need That Bit Changed!
So along came a new philosophy. It said 'Quickly develop a simplification of the requirement, then get the marketing feedback (which changes the requirement), then iterate, improving the product and reducing the negative feedback along the way. This worked because marketing didn't really know what they wanted until they saw the result of what they had said they wanted. And not only that, it seemed that this way of developing was strangely faster and inbedded an 'easy to change' flavor to the product.
Then management said 'Lets call this Agile Development' so we can write and hype about it. Well, you know what happens when management begins to 'get' development and knows how to 'improve' it. Deja Vu."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Luis Espinal,2019,"Maybe because Google has its own requirements and cultures that are distinct from, say, an enterprise software shop (in very fundamental ways.)
With that said, I will say without equivocation that I am very suspicious of anyone who says Agile/Scrum/whatever is nonsense.
That’s dogmatic, just as it is dogmatic for many Scrum/Agile bible-thumpers for whom any deviation is a cardinal sin.
Engineering lies in compromise and adjustment And we compromise according to the requirements. And we adjust and tailor the tools at our disposal for the job at hand (or manufacture new ones out of asses if necessary.)
So when people say ‘X sucks’, what the hell does that mean? How can such an assertion be considered an intelligent, objective one?
Our industry is unlike a hard engineering discipline in that it has … no discipline. It’s not regulated, like a civil engineering practice would. It’s the wild west.
An agile or scrum manifesto or what have you is a good set of guidelines and processes that when applied with prudence and discipline, it improves the creation of software value in the general case.
Problem starts with process evangelists who balk at deviations from these practices, which are necessary for adoption in industries and business cultures.
The technical, business and cultural requirements for developing software for avionics or medical equipment are quite distinct from those developing in-house enterprise systems (which are not products.)
And these are quite distinct from companies that produce actual products (from shrink wrapped COTS to, say, embedded systems.)
And those are distinct from very large companies that provide bleeding edge software services (Google, Amazon, etc.)
So it is absolutely impossible to use one set of software guidelines for all. Adjustments and deviations are needed.
If a shop finds it better *for them* to hold a scrum session only twice a week, or that they do not implement unit tests for every single class they produce, are they all of the sudden *not agile.*
Or does that mean that *agile* is rubbish?
Both of these two rhetorical questions have a resounding *NO* for an answer because such questions are extremely subjective and inchoate (sometimes with a lot of ego behind them.)
We act like stupid children incapable of compromising, and it is from that emotional handicap that we make such pronouncements (this is rubbish or that is garbage.)
Even when a very extremely intelligent person were to find actual, objective shortcomings with a methodology, a pronouncement such as this immature and does not convey objective information. This is a reality regardless of how intelligent the person might be.
A a far more useful pronouncement is to say “X approach has this and this and this short comings for these specific cases. For those cases, Y approach is more suitable because this and this and this.”
** Sources: me, having worked in Agile, Scrum, Kanban, Waterfall (mandated by law and contract for some projects), Iterative/Spiral and a whole bunch of mutations from this methodology bestiary."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Murat Can Alpay,2018,"Because agile is dead.
Agile evolved into a product, that is marketed, rather than a set of values and principals that software development pioneers agreed upon at 2001.
Martin Fowler, one of those pioneers, defines it as “semantic diffusion”. Dave Thomas has a talk titled “Agile Is Dead”."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Adam McClure,2016,"Sorry but isn’t it the product manager’s job to manage the customer and translate requirements to the team? The scrum manager just keeps the features popping out the other end of the process. The product manager keeps the customer prioritizing based on the scrum team’s constantly adjusting estimates to complete requested features. Scrum was invented to solve the “boil the ocean” engineering mentality that drives the CEO batshit crazy. Try being a CxO for a day and you will really see why the Waterfall is DOA in today’s world. People who say Agile is nonsense don’t understand the purpose of it is to be responsive to the market/customer. Without a responsive process you’re building in a vacuum according to what the engineer thinks is needed not what the customer actually wants. The prime fallacy is in assuming the customer can even give you real specifications without a running prototype. They really can’t. That’s why iteration is essential and iteration is the core of Agile starting with the Minimum Viable Product (MVP) which follows directly from the initial business case. So bottom line is I wouldn’t pay the large salary to hire such an engineer away from /Google/Apple/Facebook/blah/etc/hosts. They can keep their nicely feathered nest. I would rather take engineers who want to learn how to build product and company in parallel and build the process and product together, iteratively.
I’ve been out of tech for nearly 15 years now and I can’t believe this argument is still even relevant. Apparently, I haven’t missed much. Sorry if I offend."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Vivek P,2016,"Agile is an adjective which has been thoroughly misused!
Please view this Goto talk once, one of the inventors of Agile will tell you how agile is being misinterpreted and misused because this is what it isn't made for.
View:
Hope this helps."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Kris Nuttycombe,2015,A great answer to this question has just been posted on Michael O. Church's blog: https://michaelochurch.wordpress.com/2015/06/06/why-agile-and-especially-scrum-are-terrible/
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Brian Knapp,2017,"Because agile is not supposed to be a static process. It's supposed to be one of continuous improvement and change to fit your current situation. Almost no team does retrospectives after every sprint. Their process gets stuck at one place and it sucks.
Agile means changing direction quickly as the situation changes. I've only ever worked with one team that di..."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Andrew McDonagh,2015,"..because some developers, are wrong.
The Agile principles are used in most companies like Google, Salesforce, Facebook, Twitter, etc.
There's Agile values and principles, then there's Agile methodologies like Scrum, XP, Lean Software Development, FeatureDrivenDevelopment, Crystal, SAFe, Disciplined Agile Delivery, etc.
Most often, people don't adopt a methodology, they cherry pick a few easy to adopt practices. This at best leads to some minor gains, at worse, failures which are then attributed to ""Agile"", instead of the team."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jay Beat,2015,"Agile/scrum is misunderstood and misused because most companies may think they have scrum/agile by just sending a bus load of their employees to scrum training but not the managers and their bosses or even the HR department . The result is the managers are clueless and wrongly believe scrum is a way to squeeze more productivity out of the poor overworked engineers. Worse yet, they linear interpolate the scrum volocity from one team and apply to the rest of the company. The managers love scrum burn graphs because they put in reports for their bosses. They do not know the numbers are useless outside the team. The worst of all, the clueless managers and HR use velocity metric to evaluate engineer performance. HR and managers still use old method to evaluate employee performance which weighs heavily on individual accomplishments. Scrum encourage team and try and error approach. If one does not complete his or her backlog/task. But It is ok, actually expected because estimating is pretty difficult. Hopefully the team can do a better next time. Clueless managers may instead blame on the task owner. This is one of the reasons people hate scrum"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Ken Benneth,2015,"For starters, Agile was never designed for large software houses. It is primary addressing enterprise software development.
In software houses, the task is very often defined with significant precision. Say ""produce a JVM JIT compiler"" is a complete definition, yet will take more than 3 weeks to complete.
A lot of things Agile champions are bragging about, like automated testing, have been fixtures of software houses for a couple of decades before Agile.
Actually, Google obsession with A/B testing is an element of ""Agile"" whether they know it or not.
The biggest flaw of most Agile approaches is the reliance on that all-knowing all-deciding on-site stakeholder. Such person rarely exists, someone close enough never available for more than 1 hour per week, and even then the chances of such person sending the whole project on the wrong way are high.
Have you noticed that eXtreme Programming first project, the Chrysler payroll system, failed? The resident stakeholder was fired, and the project terminated. That is that fundamental flaw - the person they got as a stakeholder was the one true stakeholders didn't need for other things.
These days Agile projects focus on quantified visualization of progress instead of on users' approval, bringing them even closer to what software houses were doing for three decades."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Darin Caggiano,2015,"Agile in my experience, which is limited, is mostly about inclusion, communication, and organization. If your business (and by business I mean your company/division/etc in it's entirety) needs help in those areas, parts of the agile process may help.
If those aren't issues, you don't need agile. Having said that, there are plenty of situations where companies do need some aspect of agile, but are focusing on the wrong thing. Stand-ups won't help with time-management, and a Kanban board won't do a whole lot for communication. What processes you implement need to directly reflect the deficits your group has and also need to be flexible enough to reflect your working environment.
If you're building a numerical library, you probably won't need daily stand-ups, but weekly or bi-weekly may help depending on your customer. If you're having problems with changing requirements, you need way more communication. Etc....
Like almost everything else, it depends on the situation."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Russ Reese,2015,"Many programmer think like computers. It's only natural, you hang around with computers long enough and you start to think like them. So many programmers get to a point where (like a computer) they want every bit of input to perfect and complete, otherwise they return the proverbial ""that does not compute"" response.

Agile programming (IMO) allows for incomplete and imperfect inputs. And then you just act on that incomplete and imperfect knowledge and you iterate. With each iteration you hope that the input improves and thus the output improves.

Again, many (if not most) programmers are not built that way - they want something at least close to perfect up front. Some specification or blueprint that allows for planning rather than reacting to new information all the time.

There is probably room for both styles of software development (blueprint reading and reactive/agile). It just depends on what you're doing but I'm fan of agile because I did the blueprint method back in the 90's and I've done agile since 2001 and agile works better for me (and I think for the end users)."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Thammanoon Kawinfruangfukul,2015,"There is no one-size-fit-all software process. Adopting it without considering a nature of your people, products, organization, and goals would not bring you to where you want."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Raul Castro,2015,"It can be called nonsense when the whole organization doesn't work in Agile style. Agile is not just an individual or team decision. It is a way teams work inside themselves, but also a way they connect with the rest of its organization and (the most important) with its users.
Agile itself makes sense, as soon as it is really followed all along the SW life-cycle. And beyond it.
If nobody beyond some development teams follow the Agile Manifesto, that's complete bullshit, for sure."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Petr Lepilov,2015,Because it is
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Justin Myatt,2015,"I think the problem is when people end up trying to pigeon hole things all the time (which is not always unreasonable as if I want to save a url in my browser I typically have to pick which folder - I just pigeon holed it).
Problem is that generally speaking each project, team, and client are different so each time we should look in our various tool boxes to work out what mix of techniques are most likely to help us succeed.
Be flexible and through out the project check if you need to change any thing. More than anything thing I think getting the right mix of properly motivated people (and keeping them) is the key to success, everything else is a bonus."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Gary MacGregor,2015,"Dogmatic allegiance to any process (concept, ideal) isn't going to work.
I liked Michael Church's comment, peppered with slags on the consulting world, 'cause he basically said- if it suits the need use it.
No - that's not right. Probably more like - if it suits the situation - use it.
Agile, etal, can be the right approach, at times.
Don't get caught with only a hammer if you have to put in screws."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Peter Banka,2015,"Funny, what exactly is the alternative to Agile that is so much better? If Agile is nonsense then what do other people prefer? The only other real methodolgy out there is Waterfall. Are all of you who write three-page polemics on the evils of Agile wanting to return to the good old days of waterfall?
To paraphrase what Winston Churchill (allegedly) said about Democracy: ""Agile is the worst way to run a software development shop, except for all the others."""
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Joseph Chang,2016,"DISCLAIMER: This is an oversimplification, but offers an quick summation alternate to the lengthier answers.
Scrum is quite popular with startups because it's generally a use case that is understood, although the actual development is best done incrementally. So you have your meetings everyday, iterate, repeat, at the expense (somtimes) of a super-well though out plan. But in these cases, you don't want one.
A group that's got a general idea of what they're trying to solve, and also not sure of how it's getting built, benefits from adopting practices of a Lean Startup. Start thinking MVPs, customer feedback, malleable vision.
If you know exactly what needs to be built, and are 100% sure of how to build it, what steps to take, in what order, Waterfall starts to be interesting. If you were porting an application to another platform, maybe waterfall works better? Fewer meetings, but better have some airtight specifications and tech design!
Kanban one is weakest in this chart, but if you've some technology in search of a problem (see DotCom 1.0), with no product/business owner, then breaking the solution up into flashcards so your engineers can keep on building makes sense. You do have some flexibility to change course if you've finally figured out what the market for your gizmo is.
Again, oversimplification, so don't take this to be 100%. But it does make the argument that the answer isn't always Scrum, or Agile, or Kanban. Know what tenets each stresses, and how each tries to reduces risk and increases predictability and efficiency.
*This chart is not mine, it was found in Jeff McKenna's Agile Class."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jordi Noguer,2016,"It is true that every author understands Agile in her particular way.
That is why I did a research to find the real origin of the word Agile and the real meaning of the Manifesto contents that here I share with you:
Agile word is nothing but a synonym for Lightweight.
When Waterfall methodology was dominating, which was considered heavyweight -because relied in heavy specifications written by the software analysts according to customers wills that developers had to strictly follow-, some dissatisfied software engineers started inventing many lightweight principles and practices for modeling and documenting software systems in they own way, far from Waterfall rules:
Rational Unified Process (RUP)
Dynamic Systems
Development Method
Essential Unified Process (EssUP)
Extreme Programming
Feature Driven
Development
Open Unified Process
Scrum
Velocity Tracking
Waterfall had the problem that to prevent the implementators to get stuck without knowing how to continue without inventing themselves a specification, all documentations should be very detailed and nothing could to be forgotten by the analyst.
The signatory of the Manifesto simple converted this bunch of lightweight principles already popular into a solemn methodology at the same level as Waterfall. They gave it the name Agile because lightweight sounded non-serious, non-professional, non-complete, etc.
Another misunderstanding is the contents of the Manifesto itself. Basically it enumerates the problems that Waterfall created in that time and gave a solution for them. Here I translate it into plain English:
Individuals and interactions over processes and tools: what is the use of magnificent processes and tools without a good team to apply and adapt them? (including the customer in the team)
Working software over comprehensive documentation: what is the use in relying on heavy specifications documentation, even if no detail is missing, and not get working software until the end of the development when maybe it is not what the customer wanted to get because the analyst did not catch all the needs or the customer changed her mind?
Customer collaboration over contract negotiation: what is the use of negotiating prior to code if maybe the customer forgot an important issue in the negotiation?
Responding to change over following a plan: what is the use of following a strict plan that will not bring you where the customer really wanted to go? (maybe because the customer discovers that her program has no market after many weeks of development)
With all this in mind, to me, among all the lightweight principles and practices that involve Agile methodology, Extreme Programming and Scrum are the most useful.
Besides its iterations, Scrum is a good tool to guess when something will be finished. Coding is very unproductive and there is a huge uncertainty when trying to estimate the time needed to complete a development. Scrum comes to the rescue with the assignment of Fibonacci sequence difficulty-score to every ‘story’ (snippet job to do) that composes an iteration. Adding scores permits to determine the end day of a work with quite a good predictability.
Some coders do not like to work in a tight schedule and hate seeing the forecast end day coming closer. Scrum is useful to compare different coders performance, and comparisons are odious."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Tom Rose,2016,"You ask: “Why do some developers at strong companies like Google consider Agile development to be nonsense?”
The answer is in the question … it is because Agile IS nonsense."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Arunthep Sangvareethip,2017,"I believe Agile is just values and it is up to people to interpret. scrum doesn't equate agile.
The offer of changing the principles is just amplify it based on your context.
If you ask me on Return on Time investment for reading this, I give it 2 out of 5. (5 is the high end of value to me)"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jim Price,2017,"Many companies have IT Departments so FUBAR that even Agile would be an improvement. Of course the real challenge for bad IT departments is how to get away with keeping their old methods and still call it Agile.
Then again many companies have excellent IT Departments. I’ve seen both, and the good ones take a lot from Agile but are just not locked into it’s paradigm."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Vijay Rangari,2018,True agile works. I was doing it at GEC Marconi in the 90s…. Before it was called Agile. However since then everywhere I worked that said they use Agile has just been a joke. Most projects failed or failure covered up.
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jordan Park,2019,"Some might view active involvement of user which is key in ensuring the delivery of the right product as a con associated with agile development methodology. Other might think that very less amount of information is available to a new entrant in the team who will work on important feature development of the application.
In an agile process, every feature needs to be done 100% in all the iterations. This might be a bit tiring sometime but is that a solid enough reason to quit agile development model. Well if that is the case can anyone suggest me an awesome alternative
These people need to see the other side of the coin. Agile means delivering what the user wants as well as spending the least possible development time in the wrong direction. In this methodology, user won't have to wait for several months rather they can see what would their product look like within weeks.
It also helps developers to implement process so smoothly that will ensure seamless cooperation of various scrum teams. Agile is useful in development of status tracking that can be shared in between team located at different geographic locations.
The best part about Agile approach is it allows the client to get engaged with the project where he can be a part of taking decision about which feature needs to be iterated on priority basis. The involvement of client into the development process will allow developers to better understand about client mindset and what is most important for client."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jide Delano,2019,"Agile sounds great in theory but there is no conclusive data to backup the claims of the benefits. For this reason, serious software development companies do not pay too much attention to it.
Scrum masters will try to tell you it’s the greatest thing since sliced bread, but don’t take it too seriously. Instead, approach agile the same ware you would approach one of those detox/cleansing diets … it’s nonsense.
www.webdevelopers101.com"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Rodrigo Fernando Durá Espinoza,2020,"Most devs are versed in open-source development methodology which translates into the git platform and its most notorious web platform Github. Software tends to be collaborative, wide and its maturity depends on interested parties or individuals who will contribute or fork depending on situations. It also secludes software development of market variables that affect and even hurt the software industry. Agile is just on of those methodologies the market created as a common ground between software developers and management personnel who are more prompted to production and quality over time measured by finished projects which usually lead to burnouts and not necessarily in high-quality software."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Manish Mandal,2020,"Agile is good when you want to show (or impress) clients by portraying a continuous progress, which most clients wants these days - fast.
It is possible to manage a continuous progress when doing off the mill works.
When developing something new/different you don't know where you will get stuck for the time of multiple sprints, causing many clients to become unhappy/panicked/concerned/angry."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Haasya Johi,2023,"While Agile methodologies have been successful in many small and medium-sized companies, they may not be as well-suited for larger organizations for a few reasons:
Complexity: Large companies often have more complex systems and processes in place, which can make it difficult to implement Agile methodologies.
Big family: Larger organizations often have more layers of management.
Resistance to change: Agile methodologies often involve significant changes to the way an organization operates, which can be met with resistance from employees and management.
Budget: Agile methodologies can be costly to implement and may not be seen as a viable option for larger companies with limited budgets.
Difficulty in measuring progress: Agile methodologies rely on sprints and milestones which can be difficult to measure for large company with multiple projects and different teams.
Agile can be implemented in large company with the right approach and the right mindset. It's not impossible, but it's not easy either. It needs a lot of planning and preparation.
Agile methods offer their own unique advantages. But it’s all applicable in small and medium sized companies."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Mohammed,2023,"There is no one answer to this question as different people may have different reasons for why they think it is important to be professional. Some may believe that being professional demonstrates a commitment to one’s job or career, and shows that one is serious about their work. Additionally, acting professional can help build trust and credibility with clients, customers, or colleagues. Finally, behaving in a professional manner can set a positive example for others to follow.
M-coding · February 2, 2023
Programming Solutions for Your Tasks
Your ideas deserve to come alive. Trust us to bring them to life with passion and care. Save time and focus on what you do best while we handle the programming for you. Let's turn your vision into reality. Click here to learn more about our services and get a quote today! Visit our website now
https://qr.ae/prkdkk"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Muhammad Ali,2023,"Some developers at strong companies like Google may consider Agile development to be nonsense because they may prefer the traditional waterfall model of development, where one phase must be completed before progressing to the next. Agile development is a more iterative process that may be seen as too chaotic or difficult to manage by some developers. Additionally, some developers may find that Agile development is too focused on short-term goals and does not provide enough time for long-term planning or strategy."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Innovation Insighter,2023,"Some developers at strong companies like Google may consider Agile development to be nonsense because they may feel that it is not necessary and that traditional methods of development are more effective. They may also feel that Agile development is too complex and time consuming, or that it does not provide enough structure and direction. Additionally, they may feel that Agile development is too focused on the short-term and does not provide enough long-term planning."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Sophie Thomas,,"People who no longer engage in design, coding, and debugging in the development process advocate and drive Agile. Additionally, they lack trust in their engineers' abilities, suggesting issues with their hiring process, company culture, or both. These individuals set unrealistic deadlines, unaware of the actual amount of hands-on work that can be accomplished in a day. If the team appears to be falling behind within 48 hours of starting a project, they conclude that the team lacks aggression. As a solution, they enforce a 9 am start time, stand-up meetings, and collaborative development in a conference room, claiming it will make the team more agile. However, experts in creativity within engineering recognize the flawed nature of this approach, realizing they are being burdened due to system failures and some unproductive team members. Unfortunately, there seems to be no escape from the overwhelmingly prevalent agile mindset in the world today."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Ariel Scarpinelli,2015,"Look at the Google interview process. Look at how many questions about it are there in this site... What Google encourages is people that is kin for algorithmic problems.
Agile is often sold as a mindshift, and that mindshift is tend to believed to be for the ""management""; but before that is the development team the one who should embrace it. And that basically means care solving customer issues and focusing on having working software for people.
Most ""algorithmic solvers"" like to be isolated in a room working code puzzles, away as possible from ""customers"". That is NOT agile, and that is the kind of people big companies search for; hence people there considers Agile a nonsense. And they have the point to. (Of course is a company decision to look for those, but a big company can do whatever they want to).
For Agile to work, coders must be in the frontline with marketing, sales and all the other parts of the company. They must own the product. They must face to face with customers. They must be able to object and suggest alternatives to everything that is presented to them. They must strive for the smallest/shortest but yet amazing product. That is all developer stuff and has nothing to do with coding."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Steve Castle,2015,Dead on. Agile is a wonderfully meaning philosophy. The majority of companies however are using this word agile as a feel good smokescreen for more of the same old and behaving just as badly as before. Real cultural change is way harder than hiring a consultant and using new buzzwords
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,John Bint,2015,"At its best, it seems Agile is supposedly good for internal developments where the requirements and the total cost get fleshed out as the project proceeds. For client-facing work, or anything else you need to define and give a price to before the development commences, Agile seems completely inappropriate: it just can't be used to give a full specification and a cost before the work starts."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Florin Jurcovici,2015,"Because developers at large companies like Google live in a bubble.
Some rules were laid out in the very beginning of Google about how development has to happen. Especially for age-old Googlers those are the bible. They haven't had brutal contact with the reality outside Google in years, and even if they had, Google's size and financial power acts like a dampener on any shock. 99% or more of their professional interaction is with fellow Googlers who work and live by the same rules. Nothing ever motivates them to change. Whoever wants to introduce change is a heretic.
Agile is all about managing change. Large corporations, not just Google, are all about how to keep the status quo."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Yury Skanavy,2016,"Perhaps because it is (and I do realize the wrath I will probably inflict upon myself for saying this).
I have worked individually and in teams of brilliant engineers since Agile was a mere word in the English language and scrum would sound as a vaguely insulting slang word.
My take is this. When you have a bunch of expienced, dedicated and passionate engineers you need none of that process in place. It just happens via ad-hoc peer to peer connection as well as clear managerial input. If people are not aware of the issues, unable to respect the deadlines, caged or unable to communicate than you have bigger issues that your process. You need to fix people, not the process.
This is not to say that planning, task breakdown and time reporting is not a good thing. But definitely not daily, at least not with senior people.
So how about this. We drop Agile and other things (while keeping rigorous project management in place or perhaps beefeing it up even), hire a phychologist permanently and let him or her help people communicate and cooperate. Often, an open exchange will normalize relationships, clear misconceptions and basically make things better.
Also why don't we establish a forum where a deep cerebral exchange is ongoing. This will help people be aware of future project conceptual pitfalls and so on."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Wim Hoogenraad,2017,"In Agile development is there are two problems.
1. You never know when a project is finished.
2. You never know what it will cost so it is hard the get a budget for the next year.
More about this at http://www.itpedia.nl/2011/09/19/agile-systeemontwikkeling/ (translate with Google Translate from Dutch)."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Andrew Douglas Hope,2018,"Agile is a symptom, not a cure.
The best guarantee of success in any project is absolute clarity of vision, yet (as any experienced designer will confirm) deep design insight comes only with long exposure to the most challenging of domain problems, and with the freedom to prototype (play), reorder and experiment.
Modern software development has drawn design thinking in the direction of the selective and quickly “monetized”, as opposed to the systematic and evolutionary.
Because it is built around short-term and opportunistic thinking, Agile is -in the most essential, potentially most sustainable elements- unplanned. It also inherently addresses the lowest of hanging fruit, which often represent the most trivial of problems.
In end effect: speed and short term advantage over longevity.
In committing to early commercial exposure, Agile carries a high risk of locking resources into untenable path. The ensuing organizational train wreck is a fair guarantee it will be more difficult to re-equip for another try. Ultimately this bars designers from gaining those essential and grindingly difficult deeper insights.
The other facet of Agile is that in the haste for results, development focus is quickly dominated by available off-the-shelf implementation technologies, rather than by the inherent domain problems. As a result, these tools (SDKs, libraries and frameworks) tend either either towards visionless bloat, or focus on the tritely cosmetic. In both cases, the core issues: evolution and longevity are left unaddressed.
To my mind, Agile can be paraphrased with “I don’t know what I want but I want it now”.
End product? Churn."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Simon Powers,2015,"Ok, so I would question whether they do in the aggregate. Individuals always have differing opinions based on experience and context. In general, at those companies and others, most developers once they have been in a good Agile team (regardless of flavour) would never go back. There are always the odd person, but that is what is glorious about us all. We are all individuals.
What are you actually refering to, this questions feels like it is loaded?
Simon"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Steven Koh,2019,"Because the agile manifesto and principles are common sense. Unfortunately, common sense remains a precious commodity in the noisy world we live in. Thus, the obvious is spoken repeatedly until it becomes a buzzword.
Even more unfortunately, agile development does not guarantee success because there remains infinite ways to screw up, The biggest myth of agile development — faster, cheaper and better outcome. It’s frustrating when people outsource thinking to processes."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Jim Pruitt,2015,"I am not familiar with individuals in these comapnies who consider Agile nonsense, so I cannot answer your question. (I couldn't find the ""decline"" button on this question's page, that is where I usually give this type of answer.)"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Steve O'Connor,2016,"Because the point of Agile is to “reduce the cost of change and uncertainty”, by providing processes for managing the churn.
The point of Design may be said to “reduce the need for change and uncertainty, by getting it right the first time”.
The first approach is ideal if you are running a consulting gig that charges hapless corporate clients by the hour.
The second approach is ideal if you are trying to build something that will perform, and last a for a while.
… to answer the OPs question, Google is in the “lets build it” game, not the consulting game."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Mike Dahmus,2015,"Well, agile isn't complete bullshit, but most of the claims of agile practitioners are. It's really simple - if 'all waterfall projects inevitably fail', which you get out of most agile zealots if you push hard enough, then go through their tools with them one by one and see if you can find one, even one, that wasn't built with waterfall. It's a fun exercise."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Robert Galt,2021,"One of the main problem with Agile it is based on a fallacy, a false dilemma. They think that you can either have working software or documentation, not both. And this is a big lie, similar to thinking you can either go to the supermarket or get a bath. Of course you can get good working and documented software. In fact, documentation, as well as well designed software is vital if producing a good working applications because most of the time developers spend is not writing code, is trying to understand what's already there when doing a new feature and maintaining old code when there's no new features to be done. Here comes documentation and good design to the rescue.
The other thing about Agile it thinks 10 Witch-doctors make for a health scientist. No, you can't substitute a senior developer with 5 junior undergraduated boys. You can't substitute the knowledge and importance of the Software Architect with a bunch of guys endlessly talking.
Ironically, Agile is designed for small teams and pretty bad in larger teams. But all they do is compensate for the lack of quality and experience with more non-experienced guys"
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,Edward Coast,2022,"Because Agile lowers the quality of the product. Agile is used to fool management that things can be done more quickly, but in reality people spend hours each day feeding the tool instead of leading a team and getting real work done. There are no published respectful unbiased metrics that shows Agile is better than Waterfall. It is a fantasy that you can remove the qual..."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,GMS,2024-02,"I have been working for tens of years throughout multiple companies. In theory Agile is good for both business and developers, but in practice, they are actually horrible to be honest. What I experienced from Agile practice is that we have a fixed timeline that is defined by management. If you want to adjust the timeline to be longer time, they will ask you a lot of questions for you to justify, why this why that why and why??? Sometimes we have to go through a tight deadline while we still have to maintain high quality software. Because of tight deadline, we have to work overtime without getting overtime pay. Sometimes there are DevOps issues in the deployment pipelines and we have to allocate extra time for manual deployment and manual checks without being reported for our extra time allocation. Sometimes the code review step requires us refactor a lot of code for a new feature to be able to work while we cannot adjust our time allocation predefined in advance. Besides that, we still have to input a time tracker individually of how we allocate time of at least 8 hours a day. If there is production issue, be prepared to be the one who gets blamed and scolded, and you must fix it immediately at present. The management is using Agile report to point out who underperform and use it as a tool for every individual and team KPI. In conclusion, what we call Agile development in practice is actually Agile and Lean practice from business perspective that focus on reducing inefficiency, increasing productivity BY ANY MEANS, including inhumane treatment.
So yes, you are right, I strongly agree with some developers consider Agile is nonsense and bu11-sh1t."
https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense,MD Rashed,2019,"As a past Google Engineering Director, I can offer some understanding.
Adroit techniques various things to various people. The essential strange state Agile Manifesto is something I accept is close to the way in which Google engineers think about programming headway.
Individuals and participations over methods and devices
Working programming over sweeping documentation
Customer joint exertion over contract game plan
Responding to change over after a course of action
In any case, when you move past these irregular state considerations into nuances, the assention starts to obscure. Able has some keen musings yet it also has dubious segments which are exorbitantly rotated around fleeting thinking for managing dynamic building adventures done at associations like Google. Without getting canvassed in nuances, we should look at the themes in Principles behind the Agile Manifesto.
We should start with the basic considerations. Google progression style epitomizes the kind of individual reinforcing talked about in the models. The express measures which are most as per and likely stirred by Silicon Valley include:
Make stretches out around motivated individuals. Give them the earth and support they need, and trust them to put everything in order.
The best structures, requirements, and plans ascend out of self-dealing with gatherings.
At standard between times, the gathering thinks about how to twist up dynamically reasonable, by then tunes and alters its lead in like way.
Industrious respect for particular flawlessness and incredible structure updates deftness.
Ease - the specialty of intensifying the proportion of work not done - is major.
These measures are moderately good judgment for sharp engineers. I fight Silicon Valley made the lifestyle of fortifying and trusting in individuals that these are rotated around.
In any case, there are distinctive parts of the models which are not a bit of Google-style enhancement culture. These are the parts which have incited the transient focused Scrum process. They have all the earmarks of being suited to explicit sorts of enhancement, most strikingly directing or contract programming, where the customer is external to the affiliations, runs the show since they are paying for headway, and can modify their feeling at whatever point:
Our most shocking need is to satisfy the customer through appropriate on time and incessant transport of productive programming.
Experts and creators must participate step by step all through the endeavor.
The most capable and fruitful system for passing on information to and inside a progression aggregate is eye to eye discourse.
Welcome advancing essentials, even late being produced. Flexible systems saddle change for the customer's high ground.
Pass on working programming a great part of the time, from a little while to a couple of months, with a tendency to the shorter timescale.
This style of transient orchestrating, organize customer contact, and consistent accentuation is proper to programming with a fundamental focus and piles of customer obvious features that are relentlessly profitable. It isn't so suitable to programming which has an astoundingly fundamental interface and gigantic measures of concealed internal multifaceted nature, programming which isn't useful until the point that it's really aggregate, or bounce plans the customer can't imagine.
Associations like Google form dynamic programming which has never been made, and which doesn't work until complex subcomponents are made. Bigtable and Borg immediately ring a chime. Bigtable is an extensively repeated arrangement for a flowed database, and Borg was one of the foremost significantly gigantic scale pack/cloud boss. This kind of improvement takes significant ahead of time plan time, and tackling parts over longer than multi week cycles. Since the endeavors have such essential external interfaces, in this way a lot inward eccentrics, an incredible piece of the work isn't even detectable to ""customers"", so there is no genuine method to create customer indisputable stories about it. This sort of programming takes 8– 20 months to pass on the fundamental working version to the customer.
Exercises like Bigtable and Borg are the counter scrum. They address an incredible degree whole deal thinking regarding the particular pioneers. As opposed to tackling something that would meet a little need this week, they were setting up a structure for a basic move in the manner in which assemble writing computer programs was made. That hypothesis has gotten personality blowing benefits at Google, and additionally has influenced the entire business.
Diverse organizations have relative analogs. From obligation accounting programming to PC redirections, some item isn't suited to accommodate end customers when for the most part wrapped up.
If I was asked for to redo the above facilitated models to be more as per Google style headway, they might be logically like:
Our most imperative need is to extend customer (and engineer) proficiency and access to information. Work on the best, most a great part of the time used issues you can find, and make the greatest net impact. Do whatever it takes not to give the customer what they ask for; fathom them, and change their world.
Specialists should make a Google Design Document (a truly irrelevant, yet composed structure doc), elucidating the endeavor, what goals it might want to achieve, and illuminates why it is unimaginable in various ways. This document should be coursed with accomplices, to get early analysis before the endeavor gets in advancement. The made record is essential, as it ensures there is a sensible and agreed understanding of when the undertaking is a triumph and how it means to arrive.
At all times of the undertaking, essential arrangement parts for greater portions should be minimally elucidated and gotten in a structure report.
Create in hops. It's logically basic to finish and send a hop than to try faultlessness. There is no faultlessness. Or maybe be versatile, and plan to dependably reconsider at each element of the stack.
Pass on working programming when is sensibly possible, and no sooner. ""Dogfood"" stretches out inside before they are sent remotely. Guarantee things meet extraordinary rules already conveying. The idea of the thing could undoubtedly contrast with the time it takes to achieve it.
While the strange state Agile Manifesto is adequately versatile to work with these benchmarks, these are through and through not the same as the short-cycle low documentation Agile/Scrum process which has ended up being synonymous with the word Agile."
https://www.quora.com/How-and-why-do-agile-projects-fail,Assistant,2024-08,"Agile projects can fail for a variety of reasons, often related to misunderstandings of the Agile methodology, poor execution, or organizational issues. Here are some common factors that contribute to Agile project failures:
1. Lack of Understanding of Agile Principles
Misinterpretation of Agile Practices: Teams may adopt Agile practices without fully understanding the principles behind them, leading to superficial implementation.
Scrum But: Teams might claim to be Agile while actually following a hybrid approach that incorporates traditional methodologies, leading to confusion and inefficiencies.
2. Poor Communication and Collaboration
Siloed Work: Agile relies on cross-functional teams; if team members work in silos, it undermines collaboration.
Inadequate Stakeholder Involvement: Failing to involve stakeholders regularly can lead to misaligned expectations and missed requirements.
3. Inconsistent Leadership Support
Lack of Executive Buy-In: Agile transformations require support from leadership. Without it, teams may lack the necessary resources and authority to make decisions.
Resistance to Change: Organizational culture that resists change can hinder Agile adoption and create friction within teams.
4. Inflexible Processes
Overly Rigid Frameworks: Strict adherence to frameworks like Scrum can lead to a lack of adaptability, which contradicts Agile principles.
Ignoring Retrospectives: Failing to regularly reflect and adapt based on team feedback can stagnate improvement.
5. Insufficient Training and Experience
Lack of Agile Training: Teams without proper training may struggle with roles, ceremonies, and tools, leading to ineffective practices.
Inexperience with Agile Tools: Using Agile tools without understanding them can lead to mismanagement of backlogs and workflows.
6. Poorly Defined Goals and Scope Creep
Vague Objectives: Without clear goals, teams may struggle to prioritize work effectively.
Scope Creep: Continuous addition of requirements without proper control can derail sprints and lead to burnout.
7. Inadequate Testing and Quality Assurance
Neglecting Testing: Agile emphasizes continuous testing, but if teams skip this step, it can lead to low-quality deliverables.
Delayed Feedback: Lack of timely feedback on increments can result in significant issues being discovered too late in the process.
8. Unrealistic Expectations
Overpromising on Deliverables: Stakeholders may expect rapid delivery of features without understanding the iterative nature of Agile.
Underestimating Complexity: Teams may underestimate the complexity of tasks, leading to missed deadlines and frustration.
Conclusion
In summary, Agile projects can fail due to a combination of misapplication of Agile principles, poor communication, lack of leadership support, rigid processes, insufficient training, unclear goals, inadequate testing, and unrealistic expectations. To improve the chances of success, organizations should focus on fostering a strong Agile culture, providing training, and ensuring consistent communication and collaboration among all stakeholders."
https://www.quora.com/How-and-why-do-agile-projects-fail,Zak Willis,2020,"Firstly, let’s ensure we are talking about Agile Scrum.
Most answers here fail to address the herd of elephants in the room. The answers seem to explain the fault lies in not being “agile” enough, not “doing agile properly”. This is the exact same statement people claim about socialism. That socialism wasn’t done properly but this time it will work out because we are proper socialists.
Reason 1 - Scrum focuses on everybody having equal skills. If one developer knows one technology which can lead to a better product versus a team of four developers who know an inferior technology, scrum will choose the latter.
Reason 2 - Scrum focuses on breaking tasks into smaller units (user stories) that can be developed within a sprint. This sounds sensible, but sometimes development is hard. Sometimes we may have to build something complex. Invariably, business analysts break down a major functionality into smaller chunks which makes sense functionally but when developing it - becomes disjointed. A specific example was one project where dependencies were completely screwed because functional analysts were taking fairly simple tasks and breaking them down to the point it was hard to develop.
Reason 3 - Scrum (and agile) focuses on the user being king. This is trap because, more often than not, software (especially within an enterprise) aims to eliminate a user or manual tasks. For example, operational risk is a major problem and by focusing on how a user wants to do their job rather than the hint hint “jobs to be done” we build a system around a specific person (persona). This can mean a system built for one user or a team will fail once that user or team moves on.
Reason 4 - Time intensive and intrusive.
We have; planning, retrospectives, burndowns, 3 amigos, standups, backlog management. Take a typical 2 week sprint and you can find yourself developing for a week of it. Of course, agile zealots will claim it isn’t being done right.
Reason 5 - Complete lack of consistency in the product
Reason 6 - Violation of Goodhart’s Law
“When a measure becomes a target, it ceases to become a good measure.” Try sitting in a retrospective intellectually masturbating over the shape of the burndown chart line and keeping a straight face.
Reason 7 - Deferring technical needs
One book I read described a concept of “habits” in Agile Lean. Habits are technical requirements needed within a system outside the scope of a user. Just try arguing in a 3 amigos for logging consistency within an application when the users are expecting their user stories delivered.
Does this mean we should never use Agile Scrum? Not at all. Prototyping, system BAU can be good uses for scrum. One thing Scrum is really good for is training a team to become better organised and to focus more on the user. Adopting it at an enterprise level just doesn’t cut it for most types of software development."
https://www.quora.com/How-and-why-do-agile-projects-fail,Vladimir Jovanovic,2016,"Agile is flooded with experts (better known as snake oil salesmen) that try to sell the methodology that will transform your team from bunch of bozos to super-humans.
Let me go on a tangent, and talk about weight loss. We are surrounded by millions of nutritionists, personal trainers and Vloggers that take enormous effort to determine the difference in consuming 0.9 of an apple vs 0.8.
There people are called measurebators, and they are the plague of the planet. Actually, some people suspect (those people being me) that they are the reason for dinosaurs disappearing, global warming and reality TV. They will blindly look for the next better “methodology”. They never find it, but focus so much on it that it makes them unable to see that the project was not feasible from the start. Or that
The moment you claim that your project is agile, you are putting the wrong thing to focus. Nobody cares if you did the “daily shaming meeting” properly, if your core team is not using quality tools. Nobody cares if your “daily waste of cognitive abilities” is actually an exercise in creating daily PR BS for the rest of the team.
I am now bracing for impact from horde of consultants."
https://www.quora.com/How-and-why-do-agile-projects-fail,Quoc Huy Tran,2016,"Things that make the process more complicated at the beginning:
Your team members do not have the same mindset. Assume that all members are well-educated with Agile approach. Agile or Project Management methods should focus on people management. That's the real truth about Project Management.
You can say about theory: risk management, scope creep, lack of technical skills, lack of planning skills, etc.
The most important thing is you or team members don't understand and acknowledge that there must be a sense of urgency - is at the heart of Agile culture. If you don't have the right people, then forget Agile immediately.
Data driven: Great Agile team understands the key role that data plays in informing them about precisely where they are and where they need to go.
Judgment: Knowing when to push, when to escalate, when to get more information, and when to take someone aside and have a little private chat. This trait is harder to teach, but experience can help."
https://www.quora.com/How-and-why-do-agile-projects-fail,Brent Harrison,2016,"VersionOne publishes an Annual State of Agile Report (now in it's 10th year). The cite the top reasons for failure as:
Company philosophy or culture at odds with core agile values. My experience is consistent with this. If the company's leadership is based on command-and-control, process oriented, planning centric and expects outcomes are pre-determined, there is little chance Agile will be successful in the company.
Lack of experience with agile methods. Solid training and coaching can help here.
Lack of management support. See #1. Agile sounds good - ability to manage changing priorities, increased team productivity, improved project visibility - but if management is not fully committed or conflicted on how to gain these benefits (see #1 above), it will not work.
Lack of support for cultural transition. Again see #1. Culture will eat Strategy for breakfast. Everyday.
Inconsistent agile practices and process. Often times teams will take shortcuts and practice elements of Agile (e.g. daily standup) but not fully commit or try and adapt and then wonder why they are not getting the results they hoped for."
https://www.quora.com/How-and-why-do-agile-projects-fail,Murray Robinson,2016,"I've done a lot of agile projects and I've never seen one fail or be cancelled before delivering. However I have seen a few agile projects get into serious trouble.
The main reason agile projects get into trouble is because there is a loss of trust and faith between the product owners and the delivery team.
Some business people believe that you can only get a good result from suppliers by being aggressive, extremely demanding and controlling. When the business refuse to play by the agile rules an agile project can quickly become chaotic, poor quality and go way over time and cost. The best way to defend yourself against this is to implement waterfall. Better to walk away.
The other reason that Agile projects get into trouble is when they are doing Agile very badly. This usually happens when the development team is doing Agile but the rest of the organisation is not. In this case the dev team is blocked by the rest of the business and is defenceless against aggressive managers blaming them for all problems. Again this is a problem caused by the other players in the development game refusing to play by the agile rules.
If you have trust and respect for each other and if you all agree to play by the agile rules then Agile will not fail you."
https://www.quora.com/How-and-why-do-agile-projects-fail,Pradnya Shelar,2020,"I recently moved from waterfall to agile model and could see some reasons why agile projects fail.
Lack of training on agile methodology- Although it may sound simple, not everyone on the team is well aware of agile processes, team structure etc. Lack of clarity around roles that each individual plays in the team makes it difficult to follow the process correctly.
Resistance to transition from Waterfall to Agile - People are used to traditional and most commonly used SDLC approach, waterfall model where each role is clearly segregated. For example, BA will focus on gathering requirements, Developer is responsible for coding and unit testing etc. The Agile model requires developer to perform QA role as well and he/she may not be that good at it.
Frequent feature delivery- Agile needs a super fast delivery of features within 2 weeks. Sometimes, it is challenging to breakdown a big feature into smaller stories and complete them in one shot. If multiple people are working on the related stories, there is high possibility of miscommunication impacting overall delivery.
Less involvement of Product Owners - Product owner plays an important role here since they have domain knowledge. They need to guide developers to come up with accurate business solution. Their lack of technical knowledge often prevents them from communicating with tech team."
https://www.quora.com/How-and-why-do-agile-projects-fail,Stephen Green,2016,"Here's my top 4 reasons for agile project failure:
Failure to manage the hype curve: Scrum (and Agile generally) is touted as being the answer to all the problems that beset traditional projects. In fact it isn't, it just deals with those problems in a different way. The way that Scrum/Agile works makes problems apparent earlier on in the project. Failure to deal with the disillusionment that this causes is a key cause of the failure of agile
Failure properly to define and prioritise requirements. Scrum relies on the Product Owner role to do this. This is an incredibly difficult role that requires a combination of business analysis skill, technical knowledge, communications skill and chutzpah to pull off. These attributes are very rarely found in one person. Without this role in place, or a suitable way of compensating for it (perhaps by ensuring that the team has analysis skills) agile projects have a very high risk of failure.
Failure to understand that Agile/Scrum requires more structure and discipline than traditional projects. A surprisingly large number of people think that agile means that you don't have to plan, you don't have to write documentation and that you should respond whenever the client changes their mind, cos that's agile, right? The reality couldn't be further from the truth. As an Agile PM/Scrum Master there are two things you should never compromise on:
Iteration/Sprint end date. This stake in the ground is the key to your ability to monitor and control the project.
Definition of done. At the end of the sprint, something is done if it is potentially shippable product. Anything less is not done. There is no '90% complete'
Risk transfer. In traditional projects, the client comes to you with requirements and you respond with a timeline and a budget. Once these are agreed you have taken on the responsibility for delivering that project. Any failures are your fault (I'm talking in a psychological, rather than a contractual sense here). Scrum/Agile recognises the uncertainty that is inherent in delivering projects and asks the client to take a share of that responsibility by accepting that some of their requirements will not be delivered. Some clients are unwilling/unable (because of the culture of their organisation) to accept that responsibility. If this is the case, then the agile project has a very high risk of failure"
https://www.quora.com/How-and-why-do-agile-projects-fail,Naveen Kumar Singh,2016,"Some of known reasons:-
1st - They don't understand agile. Just like this question. What is the meaning of Agile Project? Can project be agile? Is agile a framework to develop project?
2nd - Role has changed but not the habits
3rd - Scrum kind of framework used for micro management
List is long but above 3 points is enough to start thinking."
https://www.quora.com/How-and-why-do-agile-projects-fail,Sean Hoegaarden,2020,"Projects fail when the scope, deadline and resources are misaligned. Even agile projects. E.g. the regulator rejects your incomplete solution which you managed to come up with by the deadline. That is a miserable failure, isn’t it? Or how about you are running out of budget and your desired goal is nowhere near? None of these cases depend on the delivery approach. Furthermore, agile alone cannot guarantee that team members are good professionals, thus they can generate any reason for failure."
https://www.quora.com/How-and-why-do-agile-projects-fail,Niladri Bose,2019,"Agile projects fail when they are waterfall disguised as agile. More specifically when the primary focus is on agile as the delivery mechanism and no or little focus on the agile mindset.
With agile mindset missing agile quickly turns into waterfall or worse.
By agile mindset I means embodiment of the agile manifesto. For example if we only focus on output and not outcome we might just be delivering useless stuff very fast , that would be opposite of agile."
https://www.quora.com/How-and-why-do-agile-projects-fail,Saket Bansal,2016,"Every year some organization conduct surveys and publish report on it, the recent report you may want to look at is :
The 10th Annual State of Agile™ Report
I have seen trend, most of the report find culture and mindset as top reason for agile failure but again to me this look combination of many things since culture is difficult to influence and blame ... its like when we do not know science we believe everything is act of god :-)"
https://www.quora.com/How-and-why-do-agile-projects-fail,Joao N. Da Silva,2022,"people assume to many things.
usually agile people do not have training in complexity, multivariate analysis, marketing, behavioral economics and so they fail to integrate all of them.
plus it comes from a very reductionist approach where A lead to B and therefore we need the
right people
right training
right mind
and so all will happen…"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Carol Anderson,2024-09,"Agile software development, though highly effective for small to medium projects, may struggle with large-scale initiatives. The primary challenge is the complexity of coordinating multiple teams and tasks. With large-scale projects, it becomes difficult to maintain seamless communication and flexibility across all teams, leading to potential misalignment and delays. Additionally, Agile relies on quick iterations, which can be hard to manage when there are numerous stakeholders and departments involved.
In large projects, rigid deadlines and detailed planning are often required, which can conflict with Agile’s adaptive, flexible nature. Moreover, scaling Agile across a large organization requires extensive resources, including skilled coaches and tools, to ensure smooth implementation.
An Agile Software Development Company, like Impressico Business Solutions, emphasizes that for massive projects, hybrid models combining Agile and traditional approaches may offer a more structured path to success, balancing flexibility with the detailed coordination required.
Agile is fast, but big projects need a roadmap."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Steve Baker,2022,"It certainly doesn’t work when you have a large “flat” organization.
However, if you can organize into teams of no more than a dozen people each - each of which has a fairly self-contained piece of some overall product - then Agile can work very well.
Each team - can use standard Agile techniques.
Then you have to form teams-of-teams which attend scrumm-of-scrumms - and have higher level projects which they manage.
A team-of-teams can have a dozen teams of a dozen people each and remain manageable up to around 150 people.
If the project is even larger than that - then you can make another layer - a team-of-teams-of-teams - and now you’re up to around 1,800 people.
But with each layer you add - you add a layer of communications delay.
So you have a scrumm - 12 engineers and a manager show up - one of the engineers raises a problem that spans beyond the team’s ability to handle it.
So the manager takes that and presents it to the team-of-teams at their scrumm-of-scrumms…the outcome of that meeting is to decide which other teams need to be involved - and their representatives from the scrumm-of-scrumms take it to their scrumms where plans are made.
So if (as is often the case) the individual scrumms happen first thing in the morning - and the scrumm-of-scrumms happens 30 minutes later - then it’s an entire DAY before the information gets propagated back down to the other teams - and another entire day before the answer gets back to the original team that had the problem.
If you have a scrumm-of-scrumms-of scrumms - then you have two days for the information to propagate across all of the layers and two more days for it to propagate back
This might be acceptable for some kinds of problem - but it’s clearly not a good thing.
So at some point, the answer is that you have to schedule a cross-team meeti...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Steve Baker
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Stuart Banks,2021,"Agile software development is often not found to be suitable and successful in large scale projects of business enterprise because :-
Large scale projects predominantly employ large workforces making effective, efficient and timely communications more of a challenge when frequent Agile software training, introduction and adaptation is essential.
Agile policies of business management to work successfully have to be reviewed, amended and introduced frequently, seamlessly and immediately if they are going to change a poor level of effectiveness and efficiency in business adaptivity to change and productivity into an acceptable one.
Large scale projects of business enterprise require excellently predictive, accurate and successful, forward strategic planning in order to operate and make tactical change options when circumstances demand to succeed which does not have the same ability and capability to react to unknown and unanticipated changes that are required in agile policies of product and service control management."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Assistant,2024-08,"Agile software development can be very effective, but it may face challenges when applied to large-scale projects. Here are some reasons why Agile might be less suitable for such scenarios:
Coordination Complexity: In large projects, multiple teams may be working on different components. Coordinating their efforts can become complex, leading to integration issues and misaligned priorities.
Scaling Frameworks: While there are frameworks like SAFe (Scaled Agile Framework) and LeSS (Large Scale Scrum) designed to scale Agile, they can introduce additional layers of complexity and bureaucracy that may dilute the core Agile principles.
Stakeholder Management: Large projects often involve many stakeholders with varying interests and requirements. Managing and aligning these diverse expectations can be challenging in an Agile environment, where quick iterations and feedback loops are essential.
Documentation and Compliance: Large-scale projects, especially in regulated industries (like finance or healthcare), often require extensive documentation and compliance checks. Agile’s emphasis on working software over comprehensive documentation can conflict with these requirements.
Cultural Resistance: Transitioning to Agile in a large organization can encounter cultural resistance, especially if teams are accustomed to traditional project management methodologies. This resistance can hinder the adoption and effectiveness of Agile practices.
Resource Allocation: Agile practices typically focus on cross-functional teams. In a large project, resource allocation might be more rigid, making it difficult to form the necessary teams to embrace Agile fully.
Dependency Management: Large-scale projects often have many dependencies between components. Managing these dependencies effectively in an Agile framework can be challenging, as teams may be working in iterative cycles that do not always align.
Longer Feedback Loops: While Agile promotes rapid feedback, in large projects, the time taken to gather feedback from all stakeholders can extend the iteration cycles, undermining the Agile principle of quick adjustments based on user input.
Conclusion
While Agile can bring many benefits to software development, its principles may need to be adapted or supplemented with additional practices when applied to large-scale projects. Organizations often need to find a balance between Agile flexibility and the structured approach that large projects typically require."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Lambros Photios,2021,"Agile software development is arguably more suitable for large scale projects, which is why it has been adopted by large organisations for their large scale projects. Even the likes of Facebook use an agile methodology for their core product (being the web and mobile applications of Facebook).
The drawback with agile is not in the methodology, but in the poor perception that agile means less planning or structure. A well implemented agile methodology has tight processes and robust structures, which actually takes longer to establish and educate a team on when compared with waterfall. The benefit of agile actually comes in the medium and long term, as opposed to the common misconception that agile wreaks short term benefits. It doesn’t. Agile in the short term is expensive due to education, the requirement to form new standard operating procedures, and to reinforce processes that are unfamiliar.
Don’t be misguided that agile is not suitable for large scale projects though, it leads to grander success in the medium and long term due to its ability to publish micro releases and adopt a nimble approach to software development even in larger organisations.
All the best."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Pascal Bernard,2021,"Large companies have heavy hierarchic structure, and each top level required for commitment on what will be done. Agile methods are not good at that.
Agile methods need small teams. So the work must be split into small parts to manage them with Agile Methods. This is not always possible with very large projects and sometimes effort spend to split the tasks and to merge the results is more than what Agile Methods cound bring
Agile methods require highly autonomous team members, with great experience. Large companies ofter hire newbies, that are cheaper and more easy to enrole in the enterprise way of doing things."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Jos Buurman,2019,"Agile works for large projects, but first we need to establish what Agile is.
You can read my explanation in this answer: Jos Buurman's answer to What the four values outlined in the Agile Manifesto?
In brief this answer showed an agile bed developer who discovers that the customer has sleep apnoea which it impossible to sleep regardless of the mattress.
When it comes to large project we are not talking about a bed, but about rebuilding an entire home. And when you view it this way you directly realise that everything is connected. Your decision where to put the water pipes has direct influence on where the shower and kitchen can be and can’t be. The size of the sleeping room has a large influence on the size and shape of the bed.
There are interdependencies everywhere.
Agile works perfect in the discovery phase, but you cannot expect the shower to be according to customer wishes when the water pipes are not even decided upon.
But you can agree on a temporary shower and kitchen which allows for bare necessities while the actual house is designed and build. And we all know it’s temporary because the customer is directly involved in these decisions.
What might not work is a particular process or tool.
When you try to implement Scrum as a process (it’s not!) you will fail. Scrum is nothing more than the contractors coming together in the morning: yesterday I should have delivered the gas connection, but we didn’t finish. Oh, then I cannot place the kitchen today, I need the gas connection! What if we work together on this, we can solve it in one or two hours right?
And this improved the development process right on the spot: review, forward view, adjust.
When it becomes even larger, an entire town area needs to be developed, things become even more complex. More logistics, more dependencies. No, you can’t plan everything, you should be able to adapt when the cement truck is stuck in a mud pool blocking the road for a day.
When Agile is not working in large projects it’s not an Agile project."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Curtis Tsang,2021,"Agile (i.e. scrum aims at smaller processes with a development team size of 5-9)
In Scrum, for complex projects,
Break down the scope into several small projects and carry out them in order of priority
You can accomplish these tasks in parallel, but you may need more experience and even more risks to coordinate these tasks and then integrate them together.
Use some large scaled scrum framework,
i.e. LeSS, Nexus, SaFe framework and etc.
Learn more about large scale Scrum and agile approches: (here)"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Alpesh Vasant,2022,"Thanks for A2A
Well, A general statement that Agile Methods not be suitable for large companies may not be completely correct.
If large companies have a proper Agile Environment, Agile Team and equally responsible and Agile ready client then Agile can be suitable method for them.
More than a size of company it is the mindset of the people and culture of the organization that matters the most. Agile is a combined efforts by both project executor and client. So if they are in sink then even large organizations are good to go for Agile.
Another aspect is what kind of product the client wants to develop?
If client has clear picture (atleast 70 to 80%) regarding the product, it’s features and basic and supporting requirement right even before the start of the project then Waterfall is the better method.
However if the client has the idea about the basic features and then have wish list but not having enough clarity about them then Agile is the better method to adopt.
So in nutshell, in order to confirm the suitability of Agile, more than size there are other parameters which will contribute towards the decision regarding the methodology for the project execution.
With Regards,
Alpesh Vasant
(www.gacademy.in)"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Osama Asif,2022,"I think the first thing to understand is that agile software development isn't a specific set of processes or methodologies, but rather a philosophy. Agile is all about making sure that developers and product owners can easily adjust their plans on the fly. It's all about keeping things flexible, so you can adapt to change as needs arise.
This is why it's not suitable for large-scale projects: it doesn't work well with very rigid timelines or requirements. You can't keep changing your deadlines every time something goes wrong, or add new features as they become available—because then you'll never get anything done!
The other issue with agile development is that it's best suited for small teams of developers working on relatively small projects. If you're working on something that requires more than one developer, you'll need to find someone who can coordinate all of them effectively and make sure everyone knows what they're doing at any given time. This can get tricky pretty fast if there are more than two or three people involved!
In agile software development, the goal is to deliver small pieces of functionality as quickly as possible. This is done by breaking down large projects into small, achievable tasks, and prioritizing them based on their value to the company.
The main advantage of this approach is that it lets you see how much work you've actually done at any given time. You can stop working if you're not making progress towards your goals, which means you don't waste time on work that doesn't matter.
However, this kind of workflow isn't suitable for large scale projects because it relies on the client or manager being able to break down the project into small tasks that can be completed within a short amount of time. If they aren't able to do this effectively then they can't prioritize correctly and ensure that important features are getting enough attention while less important ones aren't being neglected entirely.""
Want a custom website or software project done? Contact us!"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Bernie Kahn,2024-01,"for agile teams to perform well, they need to work in an atmosphere of psychological safety; in many large companies or lines of business, this does not exist.
In large companies, there are often interdependencies between different initiatives; in agile, no one is usually tasked with communicating outside the team, so the interdependencies start to become risks.
Large companies are more likely to have large projects; Scrum, the most common form of agile, does not scale well; it is oriented around small teams. (4–12 people).
The values of many large companies are explicitly in conflict with the values stated in the Agile Manifesto. e.g., Some companies value documentation over working software."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Chuck Cobb,2019,"It does work for large projects but it requires some skill to know how to scale it to large, complex projects. “Out of the box” Agile/Scrum is designed for small, simple, single-team projects. As soon as you get into multiple teams,
An additional layer of coordination and integration is needed
Some level of project/program management may also be needed
Integration with the company’s business objectives and other related projects or applications may also be needed
There are models for scaling Scrum but all of those things require some additional knowledge and skills beyond the basics of doing Scrum."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Tod Harter,2022,"Why are various myths told about IT? lol. Go look at SAFe, it is a perfectly good example of a set of practices designed to do agile at scale. The answer you probably seek is to say that Agile Teams, such as SCRUM teams and XP teams, are small, and that these methodologies do not address techniques for coordinating between teams. So, an XP ‘two pizza team’ can obviously only reach a specific finite velocity due to the limit on team size. If that is insufficient to deliver the project in the required timeframe, then the methodology is insufficient. That is not the same as ‘not suitable’ because XP/SCRUM/etc. do not rule out additional mechanisms, and SAFe (there are others) supplies those.
TBH, this old canard exists to serve those who are not willing to adapt."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Joe Termine,2020,"I’d argue that it doesn’t work for small projects either, when it is applied poorly.
The trouble is that it is really hard to run Agile projects properly. When “Agile” ideas are applied poorly, they often lead to more interference with developers, less time to do the work, higher pressure, and demands to “go faster”.
Agile requires a great deal of team cohesiveness and routine communication. It’s hard to get that if you have a lot of people working on a project. It results in a lot of chatter and not enough work."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Martin Ingram,,"I’d say it’s because it’s not that there’s a problem with adopting an “agile” mindset. The problem is that the project is “large”.
One of the major issues that is somewhat addressed by adopting an “agile approach” is that requirements and priorities almost inevitably change over six months or more. If your project is likely to take longer than that, there’s a high risk that the deliverables will be at least in part irrelevant, and the project becomes a death march.
Agile is all about accepting the world that we live in, and that’s a world where things move really quickly."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Petri Heiramo,2021,"There is no reason why Agile couldn’t be used for large scale.
But large scale projects suffer from one big malady, regardless of whether we want to use Agile or traditional approaches - they are large. Everything is harder to do at “large”. There are just so many people and ideas to communicate that it is very difficult to do it. Also the sheer size of the software itself will start to present its own problems.
The reason Agile may seem hard to do at scale is mainly because most people still don’t know how to do Agile even in the small. There’s a lot of “Agile” projects that do so many things wrong. So many people are still using very traditional approaches, despite calling what they do with a different name. And if you scale something that doesn’t work in the small, how could it ever work in the large? With waterfall, at least we have people working in a constructive way. But what is the problem with waterfall, especially in the large? It is sloooow, expensive, and creates a lot of crappy software. But for a lot of people, that’s the only way they still know how to create any software.
However, we might actually want to present a case that Agile is the only approach that can succeed in the large. Two of the key problems in scaling up are coordination between teams and integration of all that software into a working whole. Agile provides a solution to both of those, in a way that can be made to scale, if just done right.
Good Agile seeks to minimize coordination between teams by using cross-functional teams that can independently take a piece of functionality and deliver it from zero to 100%, seeking to minize the technical and task coordination between teams. We are still left with coordinating the features, but it’s an easier challenge, since we can often find functionally meaningful segments in large projects.
The integration is “solved” by combining extensive test automation and automation of build & deployment. Any change done by any team can immediately be tested against the latest know working codebase, allowing any team to immediately confirm that their code is in alignment with everyone else’s. Instead of long-time separate branches, with high chance of compilation errors, we have an almost minute to minute knowledge of the state of the system. Any integration errors are likely to be very minor and can be handled immediately by the culprits. To enable this, we also need architectures that allow separation of code into independent units with clear rules of collaboration and coordination (see e.g. microservices).
There are other things, too, but those two things are the keystones of making anything work in large scale. And look for evidence. Check out what Google and Amazon are doing. Or Apple, or Facebook, or Netflix, or Salesforce, or so many other really big names in Internet and software business. Look at the myriad of all other companies that are striving to emulate what they have done. All of those have realized that waterfall doesn’t work, at least not in the large."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Chuck Cobb,2021,"It is not accurate to say that “Agile software development is not suitable for a large scale project?” however, there definitely are some challenges that need to be overcome to scale Agile/Scrum to large, complex projects. Here is a response on that:
Chuck Cobb's answer to Why is it difficult to scale agile methods so that they can be used for very large software projects?"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Chuck Cobb,2022,"Agile was originally developed around small, single-team projects and scaling Agile for larger, multi-team projects can be difficult. However, a lot of progress has been made in scaling Agile and it is being used for large projects. There is also a possibility of using a hybrid Agile approach."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Andy,2022,"Because it requires far more dicipline, significant number of capable people, huge dependency management and trust that don’t exist in most organizations.
It takes years to build cohesive and capable teams and project is a temporary endeavor."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Naman Hover,2020,"To exacerbate the situation, members refered to absence of the board backing and reluctance of group to follow spry as reasons their coordinated activities fizzled. Since dexterous involves extensive changes like quicker discharge cycles and nonstop improvement, having assets and backing is basic to its prosperity."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Anatoly Spektor,2019,"The better question is: Who gave you that idea ? I have just finished working with a department of Fortune 500 company, that has 300 people in a department or working together doing Agile amazingly well. So my question to you: Why do you think so ?"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Stacy,2021,"The required time is calculated based on the fact that the development speed is always constant. But, as we already understood, it is not. Therefore, even if everything else is done correctly, the time error can reach 100 percent or more when the planned amount of work is large enough."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Christopher Jefferson,2021,"Possibly the biggest reason why agile projects fail in large enterprises is the fact that people just don't have experience with the methodology or how to integrate it. However, without the adequate knowledge, chances of failure in these cases are much higher.
#panlearn"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Miles Fidelman,2022,"Agile Considered Harmful
I've been inundated with one too many articles/blogs/emails/..
https://www.linkedin.com/pulse/agile-considered-harmful-miles-fidelman/"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Anuj Shrivastava,2021,"Thats a myth. Agile can be used for any project but offcourse there are challenges with the team
Agile development can work miracles not just for the SW, but for the HW, manufacturing or any type of the project
There is something called as Scaling of Scrum where different teams work together. The impedements are scaled to the highest level daily if its not solved.
Let me explain this in simple way
Eg: You are manufactuing a car. You will have smaller Scrum teams working on individual components or to start with you can have teams baseds
Each team will have a Scrum Master and they will meet in SoS (Scrum of Scrums) and similarly will the POs . PO cycle will help to align the most important valuable MVP to be priortise, not just at team level and also at organisational level
Similarly SM cycle will solve the impedements, cross team dependecies or waiting for each other
Finally there can be an EAT (Executive action team) who can present the status of project daily based on the Scrum cycles and development in just 5 min to the Project manager and MD/CEO or Sterring commitee of the Project who have to now support the team
Usually the problem today is most of the teams work as a single teams and not cooridinate or connect each other. Also the mails and reporting for what so ever reasons are just based on fromats and non sense data.
“Scaling Scrum and Cross functional team integration” is the key to make Agile development sucessful irrespective of the type of industry"
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Don Taylor,2021,"Who said it isn’t? The onus is on them to explain why. Agile is simply a means for delivering the most value for your project’s budget.
What we really need to look at is why is Agile not suitable for really small projects? And that’s because any project management methodology is too much overhead to be tolerated for such projects. As it is, most projects funded by business are significantly larger than the projects you were assigned at University so some form of project management is needed. As I said, Agile is simply a means for delivering the most value for your project’s budget."
https://www.quora.com/Why-is-Agile-software-development-not-suitable-for-a-large-scale-project,Anup Dash,2021,"I may disagree with your opinion that
“Agile software development not suitable for a large scale project”.
I would say this in the following in the support:
SCRUM is used widely across every kind of industry as well as for projects of different scale.
There is no restrictions on the adaptation of the framework. Its purely driven by the organizational culture and implementation methodology.
Scrum has been used to develop software, hardware, embedded software, networks of interacting function, autonomous vehicles, schools, government, marketing, managing the operation of organizations and almost everything we use in our daily lives, as individuals and societies.
As technology, market, and environmental complexities and their interactions have rapidly increased, Scrum’s utility in dealing with complexity is proven daily. Scrum proved especially effective in iterative and incremental knowledge transfer. Scrum is now widely used for products, services, and the management of the parent organization.   
Scrum is:
Lightweight
Simple to understand
Difficult to master
Thanks for reading my answer and hope this was helpful."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Andre Theus,2018,"I do not support the statement that agile software development is unsuccessful in large organizations. There are plenty of examples of large organizations that successfully practice agile today, like Amazon, Google, etc.
But in general, large organizations are just having a harder time to implement agile principles. And I would say that this is primarily the case for 3 reasons:
Herding lots of people is a slow process.
Breaking human habits is extremely hard.
The table stakes are higher for long standing organizations.
I recently moderated an expert panel on the topic of driving innovation in large organizations. During the webinar the panelists uncovered 8 ways to use agile principles to drive innovation:
Trust and autonomy empowers teams to innovate
Access to customers reduces innovation risk
Retrospectives drive continuous improvement
Communicate with stakeholders more frequently
Align on the fact that priorities will change
Remove specific dates from your product roadmap
Talk in broad themes rather than features
Evangelize the “Why”"
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Bruno C Furtado,2018,"Change management is not trivial for large enterprises. It takes a lot of effort to adjust the current processes and practices, maintaining everyone's safety, aligning enterprise-wide clear drivers, and measuring progress on this journey.
A large enterprise Agile transformation has a much more complex set of challenges than startups when it's existing culture is based on command-and-control, fear of failure, and micromanagement. Add this to the complexity of communication throughout the whole company! Definitely, not a piece of cake!
However, this set of challenges can be overcome when you have clear expected outcomes (responding more promptly to market shifts, delivering value in smaller batches and more frequently, etc.) and work with both C-level executives (top-down approach) and analysts/operations (bottom-up approach) in order to reduce friction."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Chris Cochran,2020,"Many times when done properly, Agile doesn't fail at big companies.
But when it does, there are at least 3 possible reasons: inappropriate agile methodology or framework, poor alignment, and not strong enough upper management support. Please allow me to discuss in a bit more detail below.
Selecting the wrong agile methodology or framework: You can use a knife to cut a steak, that is the correct ‘tool' for the job. You can actually use a pair of scissors, but it won't be appropriate nor would it be efficient. On the other end of the spectrum, you can also use an electric saw, but that would be overkill (not to say, will most likely cut your steak into shreds). So we need to select the correct tool for the job. Too often, we see people force one form/type of Agile Methodology that is not a good fit for the situation and then blame agile “when it doesn't work.”
Poor alignment: Many times as well, I've observed that certain organizations 'allow' the development teams to practice Agile Methodologies but don't provide proper guidance and feedback mechanisms on what to develop. You can have teams (and teams of teams for that matter) that work agile, but if what their working on and their resulting output is not aligned with the following a) market conditions, b) what the client really needs, and c) the management & company priorities are, then it really doesn't matter much. If the end product is not properly aligned with addressing the real problem and providing value to the bottom line, then it doesn't really matter how we work under the hood.
Management support is a major contributory factor for Agile to work in big companies. These companies already have an established standard way of doing things, they have departments and groups that specialize work, there is a value stream as well as a financial process that needs to be respected (or at least taken into great consideration). We can't just change things, revamp the way we work → suddenly do things Agile' with utter disregard for its effects on the rest of the organization. Agile transformation needs a sponsor in upper management, not just to fund and give it blessing to continue (or even start the transformation). It also needs somebody high enough in the corporate ladder to coordinate the impact of the Agile transformation. If we change the way we work towards Agility but nobody is sponsoring our change and coordinating our changes with the other departments then roadblocks and saboteurs will be harder to address.
A number of agile scaling frameworks are also available for big companies. But we also need to look at it from a pragmatic point of view and tweak those as and where needed for a custom fit. We can't be too dogmatic and force a square peg on a round hole. Out of the box it seldom works when applied as is right away. For some company contexts, a transition state may need to be identified before that can fully transition to the final state described in the chosen scaling frameworks. Similar to point number one above, we also have to choose the best fit scaling framework for the company (which depends on many things, including current agile maturity, hierarchical structure, among others).
I've tried to provide as much detail. But if you would like more details for the points I mentioned, we can discuss more in the comments section. I hope this answer helps."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Chris Lukassen,2019,"Because it is not a method but a way of thinking. Allow me the following metaphor:
If karate were a method, one could simply mimic the moves and become karate, if judo were a method we could study the mechanics and instantly be able to breakfall, if jiu-jitsu were a method we would be able to attend a two day training and counter any assailant.
If you want to become proficient you need to practice until it becomes the new self and you behave in this fashion without thinking about it. You may never become as good as someone with more talent and there is always more to learn.
Agile fails at big companies because it is treated like a trick or something you can install, and not as the behavioural change that it is.
P.S. for those not into martial arts, replace with: painting, ballet, cooking, golf etc."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Don Taylor,2020,"Momentum. Isaac Newton defined momentum as the product of mass and velocity. In a company the people are the mass and all the current project initiatives and business operations are the momentum. How many times have you heard someone say “but that’s the way we’ve always done it!” That’s momentum.
According to Newton if you want to change the direction of an object, in this case an organization, then you need a force. Force is the product mass and acceleration and acceleration is the change of velocity. Putting it all together force is the change of momentum over unit time. The more momentum you have then the more force that’s required to change your direction.
Now look at our big company. Lots of momentum. Takes a lot of force to change that. People almost always underestimate the force required to change that momentum and so they fail. Even people who know that underestimate the force required and still end up failing.
Organizational change is hard. Real hard."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Nivedita,2020,"Firstly, let me introduce the great Manifesto for Agile Software Development
Individuals and interactions over processes and tools
Working software over comprehensive documentation
Customer collaboration over contract negotiation
Responding to change over following a plan
I have been practicing agile for the past 7.5 years and in my free time I study about various case studies in Agile. This bring me to the next question : how did agile gain prominence? In a world of software where hardware and software are in an never ending race to be most sophisticated, Companies wanted to have a competitive advantage in term of
Computing power,
Goto market speed
And knowledge management
That’s why agile became popular.
But what to big companies ( that mostly followed waterfall model ) forgot was Agile is a framework and frameworks get your thought process organised so that you get to the solution faster. People assumed that being agile will help them accomplish a task which is not at all right.
There has to be CEO buy-in when it comes to being Agile. In big companies where executive team consists of more than 25 leaders (combine directors , VPs, SVPs, President, CEO) unless the top leadership is convinced on implementing agile and there is a strong execution team in place, following agile becomes difficult.
Thirdly, in big companies there is heavy reliance on the requirement document. It is expected that the requirement document should cover every use case under the sun. This h is not possible because products are primarily built to solve customers needs or cater to their preferences and we all know that needs and preferences change.
There are many other points that are covered under the following links:
Agile and DevOps are Failing in Fortune 500 Companies - Plutora
Top 8 Reasons Why Agile Fails in Large Enterprises - DZone Agile
Why Agile Fails in Large Enterprises .
Hope this helps, Thanks
Nivedita | IIM Calcutta"
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Sai Goutam,2021,"Yes, I does work.
But the catch is it requires meticulous planning, stakeholder commitment and an agile team that is self managed and cross-functional.
The notion of Agile doesn't work for large software projects is changing as many large organizations are embracing Agile for their Digital Transformation exercise, which are typically large.
Few Reasons for failure:
Stakeholders buy-in.
2. Lack of getting in right team.
3 .Enterprises seem agile as theoretical approach."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Eric Litovsky,2020,"In general, it doesn’t. That is to say, most large organizations understand the process and bring highly skilled, competent managers to administer it.
In those cases where Agile fails, it can be due to several components:
Customers: Cannot always commit to a feature set, or are in a constant state of discovery and revision. Too many stakeholders often muddy the requirements and cause sprints to fail, or simply extend the length of time it requires to answer questions from the dev team and product owner.
Management: They interfere in the Agile/Scrum process and either insert themselves directly into the process, or demand behavior that is contra-indicated in Agile. Some managers need to exert control and be included in every decision which is the opposite of what Agile aims to do.
Scrum: It’s a lifecycle management system which has not evolved very much in over 24 years. In contrast, just look at everything that has happened to the software industry in the same 24 years. Almost everything else has changed. Scrum does not always adapt well to modern paradigms, and is often a forced fit. Those who believe in it and practice it are also constrained by it. The key to Agile is adapting only what works, but scrum is usually an all-in approach. Very few organizations are willing to bend the scrum guide to better fit the team which leads to the next point:
Engineers: These are practical people mostly focused on technical outcomes. They need to feel empowered in their domain to make meaningful technical decisions and allocate their time with a sense of priority and impact. They have a workflow that is technical, often fragmented, and loaded with dependencies and precedence constraints. This means they need freedom to optimize and refactor when they see an opportunity to do so. Scrum strictly forbids this. This drives many engineers crazy. One of my biggest problems with Scrum is that it constrains what I can and cannot work on. This makes it very hard to innovate, and even harder to optimize. An optimization which may have minimal impact often gets pushed in favor of feature/story commitment and by the time it’s in the sprint the scope of impact has grown substantially.
Agile is getting pretty long in the tooth, and may not be around in it’s current form for much longer. There are better ways to manage project lifecycle which conform to the way the team prefers to work (Mobbing comes to mind) and creates better outcomes for customers with fewer metrics and charts."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Trun Nguyen,2023,"Do you really think so? Agile is a mindset. In another view, it is just a tool. So the success or fail is totally depended on the skill and capacity of the one who use it."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Robert Garrett,2020,"Agile itself, or at least the concepts of Agile, don’t fail. What fails is the way the large organizations go about implementing something that they pretend is Agile. Instead of being a lean, relatively simple, and responsive set of ideas and practices, they build a behemoth of additional bureacracy, jargon, and fl..."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Chuck Cobb,2019,"Because if is very difficult to do and requires a lot of training to do it effectively. It can also require some level of organizational transformation. Some companies just take a “slam dunk” approach, attempt to do it mechanically without really understanding the principles and values behind it at a deeper level and they don’t do any organizational transformation to make it work at an enterprise level."
https://www.quora.com/Why-is-Agile-software-development-unsuccessful-in-large-enterprises,Richard Dolci,2019,"The main reasons Agile software development fails in large organizations is unfamiliarity with the methodology of that software and how to integrate the new software.
Information in this answer is from “Why Agile Fails in Large Enterprises” by InfoQ."
https://www.quora.com/Does-Agile-Kill-Innovation,Assistant,2024-08,"The relationship between Agile methodologies and innovation is complex and can vary significantly based on how Agile is implemented within an organization. Here are some key points to consider:
Potential Negative Impacts of Agile on Innovation
Focus on Iteration Over Exploration: Agile emphasizes iterative development and delivering small increments of value quickly. This can sometimes lead teams to focus more on refining existing features rather than exploring new ideas.
Short-Term Thinking: Agile's emphasis on delivering working software in short cycles can encourage a focus on immediate results, potentially stifling long-term innovation that requires more time and resources to develop.
Risk Aversion: Agile teams may prioritize stability and predictability, which can lead to a reluctance to take risks that are often necessary for breakthrough innovations.
Rigid Processes: If Agile frameworks (like Scrum) are applied too rigidly, they can become bureaucratic, leading to a lack of flexibility that can hinder creative thinking and experimentation.
Positive Impacts of Agile on Innovation
Customer-Centric Development: Agile encourages regular feedback from customers, which can lead to innovative solutions that better meet user needs and preferences.
Faster Experimentation: Agile methodologies promote rapid prototyping and testing, allowing teams to experiment with new ideas quickly and learn from failures without significant investment.
Empowered Teams: Agile often empowers cross-functional teams to make decisions, fostering a culture of collaboration and creativity that can enhance innovation.
Adaptability: Agile's iterative nature allows teams to pivot and adapt based on feedback and changing market conditions, which can lead to innovative solutions that align with emerging trends.
Conclusion
Agile does not inherently kill innovation; rather, its impact depends on how it is implemented and the organizational culture surrounding it. To foster innovation within an Agile framework, organizations should balance the need for iterative development with opportunities for exploration and risk-taking. Encouraging a culture that values both efficiency and creativity can help mitigate the potential downsides of Agile while leveraging its strengths."
https://www.quora.com/Does-Agile-Kill-Innovation,Anonymous,2016,"From the POs and PMs perspective, agile is a perfect solution for everything. Everybody is in the rat race to just finish off things and be the first in the market. That is just killing innovation.
These people will never want to listen to the folks actually doing the work. They will live in their own world thinking everything is fine. The ground reality is developers are getting frustrated because of this bull shit.
People are loosing creativity and innovation because of this. One day they are made to work on something and the next day, something else.
People have left job because of this. Nobody knows in-depth of anything. Quality suffers. There is no good design, architecture. Repeatedly changing the same code. No job satisfaction.
Personally, I think all this has become a money making business for agile coaches and agile promoters. In the name of agile they literally want to sell anything.
I know most of the hard core technical community will fully agree with all this above. But, the POs, PMs, agile coaches, VPs of the world will disagree and will come with lot of justifications.
There is no engineering or science in this. The people doing the actual work have become laborers. If the technical community raises concerns, they are termed ANTI AGILE which is harmful in today's scenario."
https://www.quora.com/Does-Agile-Kill-Innovation,Anonymous,2014,"Definitely. Agile was born with the intent of removing unnecessary overhead to the development process and provide a lightweight framework for project management while at the same time leveraging the creative power and technical knowledge of developers, involving them in the design phase.
Unfortunately, for what I've been able to see in my day to day job, often the outcome is exactly the opposite. The close contact between product owners and developers and the constant, daily pressure for the delivery of very detailed and ever changing features in the context of extremely short iterations (a couple of weeks) in practice puts developers on an uncomfortably short leash. In the end this results in the development team delivering features like orders in a fast-food. The two weeks iteration reduces the visibility on the big picture and the tight schedule makes it impossible to perform any serious architectural or preparatory job or code refactoring.
The result is code that lacks structure and inventive, as every action is initiated by the product people and every feature developed on its own without any respect or knowledge for the context. In other words, Agile, as I've experienced it, manages to push again software developers in the role of mere translators into code of a constant flow of requests from their clients, who in turn are completely unaware of and uninterested in the technical aspects involved. No need to say that this is the death of innovation and creativity."
https://www.quora.com/Does-Agile-Kill-Innovation,Zak Willis,2017,"Before answering this question, I re-read the Agile Manifesto - http://agilemanifesto.org/principles.html
Some general observations could be:- Face to face conversation is not always the best way to remember things, our highest priority is to serve the customer but unfortunately the customer doesn’t know what they want and it can become a fool’s errand, business people and developers must work together frequently/daily but we all know that constant interruptions are the death knell of focussed code writing. What we do notice is how mention of the best solutions and architectures arise from self-organising teams but where is the evidence of this being true? However, the original manifesto was created by experienced software developers to try and deliver better solutions to the business quicker.
In many ways, I doubt the original Agile Manifesto was intended to open Pandora’s Box as we can see here https://techbeacon.com/uncle-bob-martin-agile-manifesto-15-years-later but people who actually like building solutions can’t help but feel these guys should be fighting a bit more to reinstate what Agile was meant to do.
Unfortunately, Agile completely kills innovative development and Agile can only succeed because experienced developers have already gained their technical expertise on more waterfall based projects. Agile can lead to innovative products where a business owner/product owner wants an application but these products will often need scalability which agile doesn't concern itself with. The really difficult thing to get with Agile is how most of the original committee can only have reached their level of expertise by working on complex problems outside of a typical Agile sprint. Take Uncle Bob's book - clean code - a great book. In one chapter he takes apart a library and rewrites it cleanly - hardly yagni, hardly the kind of thing a customer cares about even if code reviews are a common feature you couldn't argue to the customer that the feature that looked like exactly what they wanted was being rewritten because the code was awfully written. Then if we take Martin Fowler - another person who thinks way too hard about things to have ever occurred during an agile project. It may be that many of these points are irrelevant, perhaps these heavyweights spend hours offline toiling away just to bring extra skills to the agile table but even if this were the virtuous case, an Agile project wouldn’t want a strategic approach anywhere near a sprint.
Moving on from these contradictions, we then look at people bringing their own perspectives into what is a good Agile project and they mention peer reviews, poker planning, scums (ahh, but Agile isn’t scrum), principles of least knowledge – dumbing down where people with better skills is forced to abide by the lowest common denominator within a team despite knowing that there is a far better way to do something but suffering for the good of the sprint.
Then people mention Continuous Integration as being agile, but again, unless a company is committed to a separate Devops team the agile project will never afford the luxury of setting up infrastructure which invariably leads to horrendously complicated releases minus testing and before long the code base (databases too) end up completely inconsistent. Tell-tale signs include hard coding, uncertainty over valid configuration, significant use of converts, unions, left outer joins in the database a lack of integration tests etc and lots of copy and pastings for releases. Yes, I have seen sprints where 1 week’s development maximum, 1 week of testing and 2 weeks sorting out the release and no confidence the production release will work.
Agile is now just a narrative coined by many project managers, testers and developers to dumb down actual delivery to blindly follow without questioning and as developers it needs to get back to being about the principles of delivering appropriate solutions that developers enjoy developing and not some kind of KPI metrics based approach to delivering irrelevant unscalable solutions.
It isn’t a case of whether Waterfall or Agile is better it is about thinking of your most effective time working as a developer and most times it is just talking to the business, talking to the project manager, ensuring you put as much automation in place to keep things cleaner and coding away like Billy-o to get work out."
https://www.quora.com/Does-Agile-Kill-Innovation,Thomas Kutschi,2013,"The use of agile methodologies does influence the environment and hence also the innovation happening in teams. Innovation is the enhancement of capabilities of organisations in more or less unexpected ways over time either evolutionary (gradual improvements) or in revolutions.
To some extent agile (I know mainly Scrum) foster innovation as they try to create a fear-free environment (one of the innovation/creativity blockers according to Amabile) and encourages teams to improve their approaches to specific tasks. It also strengthens communication and early prototyping improving the level of information of all stakeholders and enabling them to influence the product towards the intended outcome.
However, this is not all of the story. Over the course of the last years a lot of methods to control agile environments (sounds like a contradiction, eh?). Those are things like daily meetings (where progress is discussed), burn-down-charts and all other measures that try to quantify the performance of a team or individual or restrict the course of action (e.g. by avoiding unnecessary tasks). The problem with this is that very often things that turn out to be innovation later on look like unnecessary in the beginning. So a higher level of control might (or will) lower innovation.
It comes down to how you live your agile approach - when you strive to squeeze the last 1/2 % of productivity out of your resources and punish all deviations from user stories you will inevitably hinder innovation - and agile methodologies support this to a large extent.
Of course you can still enhance innovation by other means (e.g. Fedex-days like at Atlassian) but this would be true in any other environment as well."
https://www.quora.com/Does-Agile-Kill-Innovation,Anonymous,2021,"It does, definitely it does. It also promotes the creation of poorly-designed code and buggy features. Which makes hard to maintain code, which –again– is hard to innovate if you have to maintain poorly-designed code.
This is my experience from many years and anecdotes from other experienced skilled developers I have collected. Perhaps a 3-hour-scrum-certification guy will tell you that scrum is perfect and is somebody's else fault –as they usually do– but truth is I prefer to listen to the guys doing the actual job and have years and years of study and experience working their skills and knowledge."
https://www.quora.com/Does-Agile-Kill-Innovation,Degar Slerks,2016,"First, it is a normal thing that in a working environment little room is left for your own things. That is just the nature of work.
But agile and especially scrum are designed to deliver software under high pressure with fast changing requirements, which aren't too complex. It is really efficient in that, but it will beat the creativity out of a team.
I am not a fan of agile. I think it leads too easy to bad software. I have seen good programmers turn into wild story point hunters and leaving a ravage behind. Because it chops up tasks, it causes that an overview of a task is missing. The push to choose for concrete implementations over abstractions make changes more and more difficult to be made. Together with the low amount of documentation and design, the amount of bad code or ""technical debt"" will pile up."
https://www.quora.com/Does-Agile-Kill-Innovation,Thomas Kutschi,2012,"Agile defines how a team organizes and controls work. Creativity requires freedom (time, thinking) hence any kind of control works against creativity. As you correctly point out you can't work just on an arbitrary feature you conceive as being good for the product or the company but you have to adhere to a prioritized backlog. Creativity is restricted to the ways you tackle the task itself.
The question is, where the user-stories, tasks or whatever it is come from? A good product manager would listen to the team, a good team would speak up if it discovers a useful extension. Then it should be a prioritization issue when the task will be in the backlog. This way the ideas of the team make their way into the product but still the business drives the decision - and sometimes it will be hard to understand if your pet project is buried under a ton of other tasks.
I think there is huge potential in agile methodologies to foster creativity or extinguish barriers (see Amabile's work on creativity barriers). On the long run innovation management processes have to be instilled within the agile processes apart from reviews and retros to balance the power of stakeholders in this part of the process (and there are some other needs for balance in other areas as well).
In many cases execution of Scrum goes to far and takes the process too important with a tendency to micro-manage every single aspect of a project (user-story tyranny) or control every minute spent on tasks.
You are also right that while agile was conceived to give power to the developers it to some extend has disempowered them as the decision making processes are defined in a way that information floating back to the business is very limited. The strict control mechanisms (burn-down charts, daily stand-ups, retros etc.) further instill this impression. Keep in mind that Scrum is an approach to structure something that should be there in a project anyways (but sometimes is forgotten, e.g. short feedback cycles) and not to get rid of any communication patterns. When you do your agile thing and all of a sudden the team only talks at the defined times you are doing it wrong!"
https://www.quora.com/Does-Agile-Kill-Innovation,Matthieu Cornillon,2016,"I think there are two parts here. One is the idea of generally exploring outside of normal work, and the other is innovating as part of work. Agile can indeed be the tyranny of the urgent, but it doesn't necessarily kill innovation/creativity. With some guidelines, I believe it actually promotes innovation/creativity.
Give yourselves time. In Scrum, teams explicitly are the ones who decide how much work to take on. If you feel you need time to wander, take on less work. Is this mutiny? If the team took only one tiny story every sprint and spent all their time learning stuff unrelated to the business, yes it might be a problem, but is there really a risk of this? Trust that the team will self-regulate. Although Agile doesn't explicitly give this right to teams as Scrum does, I think it follows rather easily from: ""Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.""
Ask why. Make sure you understand why you are building things, rather than just building what you are told. If the why is ""so user can get somewhere fast"" that opens the door to ideas about jet packs and riding kangaroos, whereas the what of ""build a bicycle"" closes off such options. Ultimately, you have to agree as a team what you are building, but understanding the why gives you a chance to challenge assumptions about what you are building. You can repeat this at any scale, allowing for innovation throughout your activities.
Focus on goals, not lists. If you are building a list of features, you are likely to stifle creativity. If instead you focus on wider goals (sprint goals at iteration level or things like OKRs at a multi-iteration level), you give yourself latitude to maneuver. Sure, you may have a list of stories or features at the start, but let these bend in service of the goals, not the other way around. Also, be careful to define goals based on the why (e.g., to solve problem x) as opposed to what (e.g., by implementing solution y), or you fall into the same trap of stifling creativity.
Don't confuse creativity/innovation with indulgence. Creativity can come in a flash, and it might be ugly. For example, suggesting that you hard code a value in an early prototype (rather than asking the user for it) is not exciting, sexy, or even scalable; however, in terms of getting to an answer about value of a piece of work, one can easily see how it is a creative angle. Think a little innovation here and there every day, not massive leaps.
Remember that boundaries can enhance creativity. Writing a poem in strict meter forces you to be creative. Budget constraints on the initial Star Wars movie forced Lucas to make creative decisions that gave the movie some of its unique touches. Having three seconds left to get the ball down the field can force a team to come up with clever approaches."
https://www.quora.com/Does-Agile-Kill-Innovation,Shakeel Tabassam,2019,"It’s not Agile or waterfall or any other model that enable or kill the innovation.
It’s an extreme challenge to make an organization innovative and by saying I actually mean motivating and enabling enployees at a right level so they can create innovative products, services, concepts and ideas.
In general, Agile can perhaps be a great enabler if you want to incorporate innovation culture. In theory, Agile promotes
Self organization at team and individual level
Respect for individuals
People over processes
Has short iteration cycles that you can adjust as you nees
Special activities like Spikes, innovation sprints, etc.
In practice if people don’t follow above and make their own interpretations of the process and then blames that Agile is stopping them from being innovative is then just an excuse and unfortunate.
To summarize in my view:
The most innovative organizations just trust their employees, respect the individuals, have flat hierarchy and enable the people to use their potential and capabilities to achieve goals and that goal could be innovation!!"
https://www.quora.com/Does-Agile-Kill-Innovation,Liza Wood,2013,"Interesting question. Whether or not innovation flourishes in an environment has nothing to do with Agile, but everything to do with the environment itself. If people are discouraged from taking risks, are unable to see the big picture due to a wall of disconnected tasks, or are run around in circles with no clear goals, they will not be able to innovate. Agile implementations, if done well, may help fix these issues since it encourages the opposite. However, if the culture wins out, the result is often a really bad implementation of Agile.
The beauty of Agile is that it can be tailored and adapted to different domains/projects/products and will encourage innovation. It does require an understanding of the why behind the various principles and rituals along with some thought on how to adapt them to the specific context."
https://www.quora.com/Does-Agile-Kill-Innovation,Christophe Grosjean,2012,"In a previous job I attended this problem was addressed using several methods:
- at the end of each week based iteration we had a short demo in the morning. In the evening we attended a retrospective. In between we had some free time to work on whatever we feeled necessary. 4 or 5 hours of free time may not seem much, but it is still a start to explore new pathes.
- some explorative or learning tasks where inserted in backlog as time boxed pikes if team thought it was useful. These were usually started with some brain storm meeting, where we decided what should be tried and who should be doing it and for how long. These tasks usually ended with some presentation of results of the exploration to the team.
In this environment I did not feel the team was any less creative than in other more traditional teams (quite the opposite) and what everyone was working on was still transparent to each other.
I also agree with Berk that working 100% of team time on backlog is not reasonable anyway. There is always other tasks to perform that should be accounted for, that may be working on infrastructure, explore some new framework or tools, or even socialize with teamates. All of that is necessary in a smoothly working team. Not doing it is demotivating, but it's not about Agile but good team management."
https://www.quora.com/Does-Agile-Kill-Innovation,Jonathan Crossland,2022,"If you follow something like scrum, it creates a mundane drumbeat of monotony. Your sprints are too long for small tasks, so you do lots of small tasks which equals improvement, but larger innovation and creativity is lost. I have found that developers slowly lose passion.
I know that scrum is not Agile, but many start on this road and never drop the training wheels.
Innovation with Agile only comes when everyone is equal peers and there is no process or measurements and a large budget for agile mindset.
As soon as the company looks at certs and a process to adopt, you have already lost."
https://www.quora.com/Does-Agile-Kill-Innovation,Joshua Render,2021,"Ideally, no. Agile should be about innovation and experimentation.
But that depends on if you are practicing Agile or if you are practicing someone’s overly strict interpretation of what Agile is.
I find I prefer Agnostic Agile over or combined with the Agile Manifesto as a starting point:
Agnostic Agile
The official home of Agnostic Agile.
https://agnosticagile.org/?doing_wp_cron=1626785641.5277090072631835937500
Work out what to do best from there."
https://www.quora.com/Does-Agile-Kill-Innovation,Karthikeyan V,2014,"No not all. Actually from my experience it helps.
There is something called capacity planning in which you can dedicate time for innovation and the remaining time is available for your day to day work or something like this. But the key is sticking on to this plan. Then this is up to the individual teams' and team members' will.
Awesome plans like this one are made by teams, but during the course of regular work, people do not stick to the plan and innovation dies.
I even tried to see if making team members accountable for innovation progress would help. But this would be counter productive as team members were not interested in it any more. So the available capacity was added back to regular work. :)
It would be unfair to blame the process for killing innovation."
https://www.quora.com/Does-Agile-Kill-Innovation,Saravana Bharathi,2014,"It's is an old discussion, let me add my two cents to it!
Agile / scrum is not a method, these are principles. If the principles are correctly understood and baked into the projects your normal performing team will become super performing team!
Many a times conflict and frustration arise from tailoring it wrongly, or just pushing it down the throat of people and wrongly implementing it.
That being said, does it curtail innovation? Yes and no. Su-ha-ri - that is if the team is already in 'Ri' status, super performing, broken the rules of agile/scrum, modified to fit their needs, now if you go and try to apply 'Su' level it would be frustrating. Example, there is this awesome 5 member team, they all sit across a round table all day, producing an awesome product, all day they talk to each other. If you insist daily standup ceremony, it might be counter productive. It might be frustrating. Again I'm not recommending to remove daily standup in teams. su-ha-ri (learn, master and then break the rules) should be understood in a correct way before apying it."
https://www.quora.com/Does-Agile-Kill-Innovation,Manu Goyal,2016,"Agile and innovation are two independent aspects of product development. Success and sustenance of each is dependent primarily on organization's culture and environment.
Based on my personal experience in multiple organizations ranging from small startups to Fortune 100, being agile doesn't hamper product innovation. Being agile isn't same as doing agile.
I am interested to learn about the specific 'Agile Practices' that you have referred to in your question. Agile frameworks don't prescribe but call for adaption so that the teams can strive for optimal results. Adhering to a prescribed 'methodology' to retrofit old behaviors in some new process, when people haven't adopted a mindset to accept change, may not deliver any additional innovation. On the other hand, there are Organizations that are delivering complex, high availability/reliability/secure/etc. products using agile execution to fail fast and succeed often. It definitely does need more than just free-wheeling. There are some frameworks like SAFe, LESS, DADD, Scaled Scrum, etc. that you can refer to learn more about large scale agile for enterprises and large product teams."
https://www.quora.com/Does-Agile-Kill-Innovation,Murray Robinson,2014,"Thomas Kutschi is right. I would just add that you can add refactoring tasks to a story if that's required (and refactoring is quite creative); you can add architectural spikes to your backlog (where a spike is an investigation of a solution to a problem); you can suggest better ways to do a story (and if its agreed do that) and you can suggest new stories to the product owner (and do those if agreed).
What you cant do is spend your time that someone else is paying for doing anything you want. Thats what your free time is for."
https://www.quora.com/Does-Agile-Kill-Innovation,Scott Helms,2013,"I can't imagine that developing our product under another methodology would be as successful. We've been using Agile (Scrum) since before it launched ~4 years ago and we continue to use it today. Now, this SaaS product offering which I think is optimal for Scrum, but its very much a 100% uptime kind of product and we have numerous SLAs with our customers who are broadband service providers.
Home - TruVizion"
https://www.quora.com/Does-Agile-Kill-Innovation,Diana Hennessy,2013,"Innovation doesn't come about by using a methodology - it comes about from the way people try to solve a problem. I'd say in my experience, an agile approach in encourages creative problem solving more than others, but really agile supports delivery of that innovative idea more than being the reason the idea was thought if in the first place."
https://www.quora.com/Does-Agile-Kill-Innovation,Harsh Vardhan,2013,No not at all. If any things kills innovation that's wrong approach. Agile got nothing to do with it instead it gives you agility
https://www.quora.com/Does-Agile-Kill-Innovation,Tushar Jain,2017,Innovation flourishes when individuals feel safe to do the experiments. Agile clearly encourages to do experiments.
https://www.quora.com/Does-Agile-Kill-Innovation,Ankit Agarwal,2013,"Agile development furthers innovation. The process encourages you to evolve your product quickly and get feedback often. If the feedback is negative you have to figure out remediations quickly and if the feedback is positive, then you have to find the next big feature equally fast!"
https://www.quora.com/Does-Agile-Kill-Innovation,Chuck Cobb,2021,"No, not at all. Agile is ideally suited for creativity and innovation. An over-emphasis on planning and control can stifle creativity and innovation."
https://www.quora.com/Does-Agile-Kill-Innovation,Thomas Vato,2022,"It all depends on who is doing agile. Suppose it's a laser-focused team of specialists who are purpose-driven. A group of experienced, innovative software developers will likely find new ways to do things. In that case, no, agile doesn't kill innovation.
However, suppose you have a team with less experience, discipline and open-mindedness. In that case, they may likely stick to the tried-and-true methods in the agile process. This way, you might see less innovation.
The critical difference lies in how decision-making authority is structured. In a traditional organisation, decisions must filter through the hierarchy before implementation. This process can stifle creativity and new thinking. On the other hand, try to decentralise decision-making authority and encourage employees to experiment and take risks. This will foster an environment where innovation can thrive.
Hope it helps."
https://www.quora.com/Does-Agile-Kill-Innovation,David Richmond,2019,"I would suggest the opposite if Agile is implemented at all levels of the organisation and not just in delivery teams.
An idea management process must be Agile for it to succeed and senior management must also have adopted the values of Agile for innovation to thrive. If agile or Scrum is implemented purely for the fast delivery of software then I can understand why problems would arise. However, if the entire organisation has adopted the philosophy of agile (particularly approaches such as Lean-Startup) then it will foster innovation.
I would argue that if an organisation is not agile, they will struggle to deliver innovation effectively as the two are very closely related and overlap in many areas."
https://www.quora.com/Does-Agile-Kill-Innovation,Ankit Vaid,2013,Both innovation and agile methodologies are different but yes. Innovation happens and can be quickly assessed and discussed using Agile. for large projects where you plan to sit for months on requirements we will still need a prototyping which can be accelerated using agile methods.
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Ashwin Dhakal,2017,"I have answered about the Agile Development after many answer request in this Quora section : Ashwin Dhakal's answer to What is agile development? [ https://www.quora.com/What-is-agile-development/answer/Ashwin-Dhakal ]
This is the graphical representation of the Agile Model I draw for your convenience. Hope you like it :)

Disadvantages of Agile model:
1) This model is very annoying in case of some of the large software, since it is difficult to assess the effort required at the very beginning of the software development life cycle.
2) There is serious absence of emphasis on necessary designing and documentation of the ...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Ashwin Dhakal
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Sachin More,2019,"Agile > No Agile > Bad Agile
Bad Agile is a horrific experience that I wouldn't wish on my worst enemies.
My worst experience so far:
· Sprint planning - This is where the product owners actually figured out what work they wanted to do. We'd spend several hours discussing nebulous requirements before even getting to prioritization
· Daily meeting - The 30+ minute sit down where everything is re-prioritized, new tasks are added, whole conversations are repeated. The product owners would not listen to the scrum master and stay on track
· Sprint retrospective - These were cancelled because the product owners didn't want to change how they worked and were considered pointless
You can only push back so much before something breaks. In reality, everyone gives up on improving the process to maintain some shred of sanity. Anyone new to Agile joining thinks this is how it's done and henceforth hates it.
I think one problem stems from Agile consultants telling the organization that they should ""Do what fits best"". While technically true, people don't understand the motivations of Agile and therefore interpret it as ""Make up my own process with my 0 years of research/experience""
The “fast” that Agile promises isn’t “fast to finish” but rather “fast to react”.
It promises to minimize the time from receiving information to shipping code to respond to that information.
If you already know all the requirements and design constraints up front, then new information has no value, and Agile won’t save you any time over any other development methodology.
While pressure can make developer productive in the short term, the kind of stress created by those short iteration doesn't. The main issue with it is that it's artificial pressure for most of the time. It's a artificial deadline and the only way to enforce it is with social pressure, which create the worse kind of stress."
https://www.quora.com/What-are-the-disadvantages-of-agile-software-development,Tushar Jain,2017,"If there are any drawbacks in short and numerous feedback cycles, trust among team members, always customer present, delivering value incrementally, and evolving requirements the Agile has all of those.
The real question should be how can I use characteristics listed above in my work? The Agile way of working in software development and making a physical bridge over a river will be entirely different."
https://www.quora.com/What-are-some-downsides-of-Agile,Assistant,2024-08,"While Agile methodologies offer many benefits, they also come with several downsides:
Lack of Predictability: Agile's iterative nature can make it difficult to predict timelines and budgets. This uncertainty can be challenging for stakeholders who prefer fixed schedules and costs.
Scope Creep: The flexibility of Agile can lead to scope creep, where continuous changes and additions to project requirements can overwhelm teams and dilute project focus.
Team Dependency: Agile relies heavily on collaboration and communication among team members. If team members are not fully engaged or lack experience, it can hinder progress and productivity.
Documentation Challenges: Agile emphasizes working software over comprehensive documentation, which can lead to insufficient documentation for future reference, onboarding, or compliance.
Requires Cultural Shift: Implementing Agile often requires a significant cultural change within an organization. Resistance to change can impede the adoption of Agile practices.
Difficulty in Scaling: While Agile works well for small to medium-sized teams, scaling it to large organizations can be complex and may require additional frameworks (e.g., SAFe, LeSS).
Overemphasis on Meetings: The Agile framework includes regular meetings (like daily stand-ups and sprint reviews), which can become burdensome and take away from actual development time if not managed properly.
Potential for Incomplete Products: Since Agile focuses on delivering incremental updates, there is a risk that products may be released with incomplete features or functionality if not carefully managed.
Variable Quality: The emphasis on speed and iterative releases can sometimes lead to quality being compromised, especially if testing is not integrated into each iteration.
Inconsistent Practices: Different teams within the same organization may adopt Agile practices differently, leading to inconsistency and confusion regarding processes and expectations.
Understanding these downsides can help teams and organizations better prepare for the challenges of implementing Agile methodologies effectively."
https://www.quora.com/What-are-some-downsides-of-Agile,Matthieu Cornillon,2016,"Broadly speaking, I'd say embracing Agile has two particularly challenging aspects:
You move away from rigid structure. With rigid process, you can see how everything fits together, look at people as fitting or not fitting and manage accordingly. Have a problem with the output, then fix the process. It's relatively easy to understand, and folks who are in control perceive a high level of control. Pro-agile folks (like me) might argue that this is perceived, not actual control, that the system based on a false sense of security, and that the lost potential in a command-and-control environment outweighs any benefits of the rigid structure. The downside is that when you abandon rigid process, you enter an initially very confusing world. What is the right amount of planning, process, guidance, oversight? Who decides what? How do we scale? How do we drive improvement without telling people what to do? Etc. It can feel like being lost with no bearings.
You land in a place that is not extreme. As Marcas Neal rightly says: it is a mistake to embrace Agile in a way that throws the baby out with the bathwater. The Agile Manifesto is very clear about the balance it seeks. It explicitly says that processes, tools, contracts, documentation, and planning all have value; it simply says that those are of secondary value to other pieces. Many people I speak to about Agile seem to be yearning for an easy answer: always do this, never do that, follow this rule, do things this way, etc. I often give the annoying Agile Coach answer: ""It depends."" And that's a lot harder to handle. If I give you a formula for calculating how many stories to take into a sprint, it could be easy to follow, but it would be weak to the point of hardly useful. On the other hand, I know that people who come to me for a question are just trying to do their jobs, and I recognize that it can be really frustrating that I can't give them a ""straight answer"".
Abandoning rigidity and landing in a place of balance can yield many benefits, but it is very, very, very hard to get right. If you take an organization that has no experience doing these things and convert overnight, you risk confusing and alienating people while throwing your delivery structure into disarray. As much as a flexible structure and paucity of strict rules can allow creativity and self-driven teams to flourish, it can create room for chaos and bullying. Getting to a point where you have the wild west but everyone plays nicely is a tall order.
If you are asking because you are considering a move to Agile, I'd say go for it, but build consensus, go slowly, and ensure you have great feedback loops for adjusting course. I believe Agile is healthier at longer timescales, so you'll have to be patient."
https://www.quora.com/What-are-some-downsides-of-Agile,Sriram Sridhar,2014,"I cannot speak for other agile implementations, but I have some experience working in scrums and being a scrum master. The following is the biggest disadvantage I personally experienced with the process.
The biggest problem with scrums is the fact that the tasks included in a scrums are only as good as how well they have been defined. Unfortunately, it is very difficult to define tasks that are new and nobody on the team has a good idea of how long it takes to complete. This is especially true when working on new products or features that do not have precedents. It is also true for tasks that require research and analysis.
By definition, tasks included in a scrum should be completed by the end of that sprint without requiring any rework. This is great in principle but when you throw in tasks that have not been defined properly, it begins to fall apart pretty quickly. Estimating tasks that have never been done before is almost like estimating the run time of a database query without actually executing it. There is always a good chance that the initial estimate turns out to be wrong by several magnitudes. This consequently results in tasks going unfinished in a sprint. But with scrums, the scrum master is not taught to take unfinished tasks into account when pl...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Sriram Sridhar
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
https://www.quora.com/What-are-some-downsides-of-Agile,Ram Kumar,2019,"The downside of using Scrum is that passionate engineers may see it as micro-management and may just pack-up and leave the team/company instead of fighting it. One of the best things about startups, especially early-stage ones is that you wont find things like Scrum there, which is why passionate engineers gravitate towards startups.
Another big downside is that you will succeed in attracting the kind of engineers that you don’t really want. These are engineers who are bit political and like playing the scrum game and are not really that keen on getting things done. They are typically middle-aged engineers who have a busy family life and are really looking for a 9-to-5 or 10-to-6 job. They will focus on completing their stories for the Sprint and nothing else. I have seen several such engineers some of whom may even have some side projects/businesses going on. They seem to love Scrum."
https://www.quora.com/What-are-some-downsides-of-Agile,Fred Wilson,2019,"There is no one-size-fits-all approach when it comes to Agile frameworks. It is important to understand the type of organization, the team, and the project category before identifying and adopting a suitable project development approach.
A key difference you can keep in mind while assessing Scrum vs other Agile methodologies for your project and team requirements may be if you need a more structured approach and the customer is specific about the requirements from the beginning to end, Scrum seems to be a more likely option.
However, if the pattern is not fixed and the customer is flexible as long as the product is being improved continuously, Kanban may be your thing.
If unsure, you can attempt to understand both approaches and carry out an experiment with small, non-critical projects. This will help you better assess which approach gives you more value and helps you reach your project goals faster and efficiently.
As mentioned above, you can even look into a “Scrumban” approach – which I’ll discuss shortly – that allows you to combine aspects of both these methodologies and you can customize it according to requirements."
https://www.quora.com/What-are-some-downsides-of-Agile,Chuck Cobb,2020,"There are no problems with Agile itself that I am aware of; however, there are problems with how it is applied:
Some companies try to just do Agile without doing any organizational transformation to make it work
Many teams try to do Agile mechanically without really understanding it at a deeper level. As a result, the implementation is often rigid and inflexible
There’s a lot of hype about Agile and many Agile consultants promote Agile as a solution to almost any problem you might have.
There also many stereotypes and misconceptions about Agile and Waterfall. Many people think that there is a binary and mutually-exclusive choice between those extremes and try to force-fit a project to one or the other. It takes more skill to blend a plan-driven and an adaptive"
https://www.quora.com/What-are-some-downsides-of-Agile,Sam Granville,2020,"The common drawbacks are as follows:
Scrum often leads to scope creep, due to the lack of a definite end-date.
The chances of project failure are high if individuals aren't very committed or cooperative.
Adopting the Scrum framework in large teams is challenging.
The framework can be successful only with experienced team members.
Daily meetings sometimes frustrate team members
If any team member leaves in the middle of a project, it can have a huge negative impact on the project
Quality is hard to implement until the team goes through an aggressive testing process"
Why do developers at Google consider Agile development to be nonsense?,js2,"on Aug 3, 2019","> This type of innovation takes significant up-front design time, and working on components over longer than one week iterations. Because the projects have such simple external interfaces, and so much internal complexity, much of the work is not even visible to “customers”, so there is no way to write customer visible stories about it. This type of software takes 8–20 months to deliver the first working version to the customer.At Yahoo, I designed and built a large project. This took about six months to deliver. At the time, the company was doing quarterly reviews that I think Marissa had imported from Google. Anyway, my manager had rated me as ""meets expectations"" for a few quarters because this project and the one I had previously worked on weren't visible to ""customers"" till they were delivered, so he didn't have any evidence to justify a higher rating against other managers' team members.Little did my manager know that a few quarters of ""meets expectations"" had caused HR to drop me into the bottom 5% of the company and so I received a letter from HR that I was at risk of being terminated.So I deliver the project and now it's visible and everyone loves it and I get an ""exceeds expectations"" rating and then a promotion and a raise.From being warned I'd be terminated to a promotion in less than six months, with no change in my work, but simply it becoming visible. Whee big company fun."
Why do developers at Google consider Agile development to be nonsense?,gordaco,"on Aug 3, 2019","> Little did my manager know that a few quarters of ""meets expectations"" had caused HR to drop me into the bottom 5% of the company and so I received a letter from HR that I was at risk of being terminated.This is disturbing and, I think, a twisted form of grade inflation, mixed with the usual suitspeak where words don't necessarily mean what they mean. If an employee is as good as you think they should be, why would you put it at risk of termination?For the record, I also work in a big company with long product cycles, meaning that the product I'm working on started more than one year ago, and the first public release is planned for next December, so I feel your pain. Luckily our process is a bit more sane and our manager follows our work closely, so I'm getting good ratings (but I wonder if the grade inflation will continue in such a way that ""exceeds expectations"" now means ""subpar employee""...)."
Why do developers at Google consider Agile development to be nonsense?,jpalawaga,"on Aug 3, 2019","This is 100% caused by stack ranking, and the problem you identify is a very real one. Chopping off the bottom 5% of employees works if you have a LOT of dead weight, but realistically you can't really do it continuously or you start removing legitimate talent and, just as worse, fostering a toxic community that values playing politics over delivering value."
Why do developers at Google consider Agile development to be nonsense?,taftster,"on Aug 3, 2019","Not only that, but chopping off the bottom 5% typically makes room for more hiring; these emptied jobs are likely to be filled with less-than-stellar candidates.  It take the new hires a few years before they too are dropped down into that lower 5% rank.Stack ranking ensures that you have churn in your workforce, and not in a good way. You wonder why workers in the tech industry move around so much? Look at stack ranking as a significant contributing factor."
Why do developers at Google consider Agile development to be nonsense?,Spooky23,"on Aug 3, 2019",That’s by design. Keeps the workforce young and insurance cheap.
Why do developers at Google consider Agile development to be nonsense?,ajross,"on Aug 3, 2019","Less cynically, it also increases the odds of finding good employees.  A ""bottom 5%"" worker is statistically less likely to suddenly rise to the top of the pack than a new hire is to produce at that level initially.  And, more cynically, that remains true even if there's significant measurement error in identifying that 5%."
Why do developers at Google consider Agile development to be nonsense?,kragen,"on Aug 4, 2019","That's true if the performance ratings are cost-free and fairly accurate.  A company where firing is based on misconduct and promotion is based on achievement, rather than basing both on quarterly reviews, might actually have a better chance of finding good employees, and perhaps more importantly, retaining them."
Why do developers at Google consider Agile development to be nonsense?,lonelappde,"on Aug 3, 2019","Why would companies prefer cheap insurance over productivity? If they want to pay less, they can just pay less. People would rather get paid less than get fired."
Why do developers at Google consider Agile development to be nonsense?,Ididntdothis,"on Aug 4, 2019",Productivity is hard to measure. Insurance cost is easy to measure.
Why do developers at Google consider Agile development to be nonsense?,2muchcoffeeman,"on Aug 3, 2019",Is it about cost?It’s often easier to get that pay raise by hopping companies. You’re then replaced with a new hire who is probably getting more than you did. And needs a few months to get up to speed.Treating your proven employees well to retain them would cost less.
Why do developers at Google consider Agile development to be nonsense?,Spooky23,"on Aug 3, 2019","Big companies are driven by the mean and dollars. The short term numbers work out, and long term productivity issues are addressed by acquisition."
Why do developers at Google consider Agile development to be nonsense?,jecxjo,"on Aug 3, 2019","I worked for a large global company and this matched exactly what I was seeing. I had projects with year or more development cycles before something was deliverable so ""meets expectations"" was difficult when you had nothing to show for your work as they only cares about final results. We even had an unwritten rule where everyone must have at a minimum two ""needs improvement"" because ""everyone should be working on making themselves better."" This lead to a dark rabbit hole and a lot of engineers leaving.With such a messed up evaluation process engineering demanded direct, documented process for doing evaluations. Instead we had managers trying to gauge output based on defects fixed and lines of code committed. You could tell management had no clue."
Why do developers at Google consider Agile development to be nonsense?,goatinaboat,"on Aug 4, 2019","This lead to a dark rabbit hole and a lot of engineers leaving.But, I bet, a large and well-resourced HR department, which was the real goal. Who invented the system, after all."
Why do developers at Google consider Agile development to be nonsense?,artsyca,"on Aug 3, 2019",Don't call it 'suitspeak' -- these suckers haven't ever had the decency to wear formal business wear; it's `golf shirt speak` at best
Why do developers at Google consider Agile development to be nonsense?,goatinaboat,"on Aug 4, 2019","A previous employer had had that rampant feedback inflation for years, and reset it one year. The Big Boss - quite reasonably in my mind - said “our expectations are high and you should feel proud of meeting them”. But the company culture was still set up around “strong exceeds” being the norm and “meets expectations” being code for “massively underperforming” so that was an uphill battle. And many of those who had gotten used to “strong exceeds” really were massive underperformers. Really to make this work they should have deleted the entire history from the HR database."
Why do developers at Google consider Agile development to be nonsense?,okcando,"on Aug 3, 2019","There are other factors but just one is under discussion: cutting the bottom five percent in performance reviews. And if consecutively ""meeting expectations"" puts you near the bottom, then the expectation must actually be to exceed expectations.Nevermind that this policy necessarily means churn and undervaluing aspects of software like security or fault tolerance and a constant drain of institutional knowledge."
Why do developers at Google consider Agile development to be nonsense?,solipsism,"on Aug 4, 2019","I'm not arguing for the policy. I wouldn't want to work at a place like that.But I feel like this isn't very hard to understand and I don't know what you're not getting about it.And if consecutively ""meeting expectations"" puts you near the bottom, then the expectation must actually be to exceed expectations.Uh.. no.. you seem to think ""meets expectations"" necessarily means ""will not get fired"". This policy exists, as dumb as it may be. Imagine you're a manager at a company like this and you're tasked with giving a performance review. You have two choices: you could do what you seem to be implying they should go and fudge the ratings, so that the bottom 5% always get ""does not meet expectations."" Or you could say ""fuck that stupid rule, I'm going to rate this person honestly, and if they still fire him that's their choice.""A performance rating and a company policy about firing are two completely separate things. I think you must have a naive understanding of how staffing decisions are made in the real world."
Why do developers at Google consider Agile development to be nonsense?,paganel,"on Aug 3, 2019","A bus driver that “meets expectations” is the perfect bus driver, I don’t want him to “continually improve” thinking that he’s the new Ayrton Senna, I don’t want to be driven around by drivers who think that they’re Formula 1 drivers. How are programmers different from bus drivers?"
Why do developers at Google consider Agile development to be nonsense?,viscanti,"on Aug 3, 2019","> A bus driver that “meets expectations” is the perfect bus driverBy what standards are Bus Drivers evaluated? Near accidents are OK as long as they're lucky enough to not be involved in a real accident? If so, I'd prefer they actually improve and decrease their odds of being in a future accident. Does efficiency matter? Maybe one that's on time more often is actually better? Maybe customer service matters, and they can get better at helping people who need to buy tickets for the first time?> I don’t want to be driven around by drivers who think that they’re Formula 1 driversIt seems like there are multiple dimensions that a bus driver can improve on that aren't ""become a race car driver"". Given that, it seems like the bus driver analogy already isn't a good one.> How are programmers different from bus drivers?It doesn't even seem like we need to answer this one. You started with the false assumption that there are no dimensions that a bus driver can improve on other than becoming a race car driver. One could argue that there are much wider ranges of value creation in programming between average and above average programmers, but that's irrelevant given your initial premise is obviously flawed."
Why do developers at Google consider Agile development to be nonsense?,edw,"on Aug 3, 2019","No, I think this is a fine metaphor. If an engineer can understand a problem, identify a solution, and then implement, document, deploy, and support it in production for project after project, it’s completely legit to say they’re good engineers, and are not necessarily improving in any relevant way.Similarly, a bus driver that consistent drives without causing accidents, doesn’t spill the passengers’ coffee, doesn’t burn too much gas or wear out the breaks too quickly is a good driver.What you say to either of these people is “Great job, we love you, keep doing what you’re doing!”Encouraging growth and improvement as an end in itself can be destructive: How many projects amount to rewriting something that works in some new language or framework because an engineer wants to pad their resume or just learn something new?Craig Mod recently wrote Fast Software, the Best Software; I’m hoping he follows that up with Software That Already Exists and Works Fine Using an Unsexy Suite of Technologies, Software that Doesn’t Need to Be Rewritten."
Why do developers at Google consider Agile development to be nonsense?,viscanti,"on Aug 3, 2019","> No, I think this is a fine metaphor. If an engineer can understand a problem, identify a solution, and then implement, document, deploy, and support it in production for project after project, it’s completely legit to say they’re good engineers, and are not necessarily improving in any relevant way.We agree. If someone has maxed out all the relevant dimensions then there's no room for improvement. The problem is that there's a difference between that and average. The other problem is that there's continual room for being even better at identifying solutions.> How many projects amount to rewriting something that works in some new language or framework because an engineer wants to pad their resume or just learn something new?Unneeded re-writes and getting better are orthogonal concepts. That you're confusing them here underlines the logical fallacy that you're making. If there's legitimate room for improvement (and there generally is in bus driving and in software engineering), and if that improvement makes you substantially better at your job, then it's worth it. In neither of those areas is the ""average"" employee completely topped off in where they can grow."
Why do developers at Google consider Agile development to be nonsense?,coldtea,"on Aug 3, 2019",">How are programmers different from bus drivers?In that programmers are supposed to be creative, over-deliver, etc.You'd worry if a bus driver got from A to B in half the time driving twice as fast suddenly.But you'd be OK if a programmer you've asked to design system with features A, B, C and performance P, also delivers features D, E, F and performance 2*P without being asked!"
Why do developers at Google consider Agile development to be nonsense?,paganel,"on Aug 3, 2019","> In that programmers are supposed to be creative, over-deliver, etc.Like I said, I don't want the programmer in charge of the software that manages my financial or health records to be creative or over-deliver, quite the contrary. I'd add personal-data to the mix, and now I've covered a huge chunk of SV companies. I think that the era of ""move fast and break things"" should be over by now, unfortunately relatively paltry $5 billion fines won't stop the creativeness of some companies."
Why do developers at Google consider Agile development to be nonsense?,coldtea,"on Aug 3, 2019",">Like I said, I don't want the programmer in charge of the software that manages my financial or health records to be creative or over-deliver, quite the contrary.Sure, but most programmers don't program systems that manage financial or health records or write the software for the ISS.For the majority working on enterprise backoffice stuff, CDUD, web services, mobile and desktop apps, websites, and so on, being creative and over-delivering is OK, and even encouraged."
Why do developers at Google consider Agile development to be nonsense?,kragen,"on Aug 4, 2019","You'd like your financial and health records to be managed by average-quality software? That is, software that's full of bugs, confuses its users into making lots of eyes, and is insecure? I'd rather have them managed by file clerks on paper if that's what's on offer on the software side."
Why do developers at Google consider Agile development to be nonsense?,kragen,"on Aug 5, 2019","Lots of errors, not lots of eyes. This error brought to you by my failure to successfully use well-above-average software written by Googlers."
Why do developers at Google consider Agile development to be nonsense?,amelius,"on Aug 3, 2019","> From being warned I'd be terminated to a promotion in less than six months, with no change in my work, but simply it becoming visible. Whee big company fun.They probably deduced from this that their warning system worked as expected."
Why do developers at Google consider Agile development to be nonsense?,otaviokz,"on Aug 3, 2019",I think the probability of you being right is definitely above 50%.
Why do developers at Google consider Agile development to be nonsense?,replyguy912,"on Aug 3, 2019",I'd say it's somewhere between  bottom 5% and top 10%  ;)
Why do developers at Google consider Agile development to be nonsense?,keanzu,"on Aug 4, 2019","Regression to the mean tells you that if you reward success and yell at under performers the successful people will get worse and the under performers will get better. Lesson learned: All yelling, all the time."
Why do developers at Google consider Agile development to be nonsense?,smdz,"on Aug 3, 2019","And did your manager go on to get another promotion? And may be few more team members had similar jumps in performance?A new manager we had deliberately did this to us. Few of us got marked as ""under-performer"" levels at random times - risk of being terminated by the bell-curve justification and then within 6 months (not at the same time) we all were ""exceeds expectations"". The few of us figured out what the manager had done - after 2.5 years. By then she went from being a manager to a senior director with a decent portfolio - and that too pretty quickly. Oh why not! she created ""stars"" and ""performers"" out of under-performers.I ended up ""deliberately"" underperforming for the next 1-1.5 years after they first tagged me. How hard can it be to NOT work? Well it is hard. I invested in learning lot of stuff. But management always figured out I was more than meeting expectations, got me raises and promotions. May be forwarding emails did the trick. But then I got bored, frustrated and quit."
Why do developers at Google consider Agile development to be nonsense?,ericmcer,"on Aug 3, 2019","The engineers who I have seen game these systems inspire a mix of anger, jealousy and admiration. I can never decide if those of us working hard and trying to make things better are dumb or if the people exploiting company policies are.I watched a new hire recently lynchpin himself into a critical part of the software, make larger then life promises about new “cutting edge” tech in presentations, constantly post articles in Slack, and finally stop showing up or being online much at all other than to do some lip-service and make the occasional PR. I am a little envious of how little he does and how much praise he receives for checking all the boxes with higher ups."
Why do developers at Google consider Agile development to be nonsense?,kbrisso,"on Aug 3, 2019","Where I work this is an ""Architect"". I'm in the middle of a project designed by these same people to use these ""new cutting edge technologies"" we are essentially replacing one legacy pile of shit for another new pile of shit that is ever more so complicated to maintain. It blows my mind the money that it being wasted."
Why do developers at Google consider Agile development to be nonsense?,vpeters25,"on Aug 3, 2019","In agile, or any other project management process, the ""customer"" is not necessarily just the final user but any stakeholder.As a rule of thumb: anybody who needs regular progress updates on a project is a ""customer"".The difference in agile vs other development processes is progress reports are partial releases of working code instead of a percentage increase on a gantt chart."
Why do developers at Google consider Agile development to be nonsense?,mlinsey,"on Aug 3, 2019","Sorry you had to go through such obviously bad management. Just to give some context about how these guidelines are supposed to work at Google: being managed out for staying at Meets Expectations is something that's supposed to be only applicable to entry-level roles. (when I was there, this applied to the new grad T3 rank, as well as T4, I think this may have changed since I left to be just T3).But at an entry-level rank, it is possible to get good ratings and even get promoted if your product hasn't shipped to customers yet (and I would do this with my directs routinely), as long as you are delivering milestones.  Part of the definition of T3 is that you cannot yet independently work on a project, ie you need help from senior devs to get things done, and IMO if you stay at this level for more than 1.5 years (3 reviews), and there are no other extenuating circumstances, it's appropriate to consider if the company is a fit.At more senior levels, you have to show business/customer impact to get promoted, but there is also no notion of being managed out for meeting expectations.Of course, these guidelines aren't always implemented or communicated equally across the company, to say nothing of other companies that copy only parts of the process."
Why do developers at Google consider Agile development to be nonsense?,rs23296008n1,"on Aug 4, 2019","That termination threat is to me a signal that the company hates me and the business relationship is unrecoverable. I'd be polishing my CV and would be gone within a month of finding a better opportunity. Likely with a raise while I was at it.Toxic environments like that are not worth working in. All sorts of other ""interesting"" corporate cultural aspects are usually also present. Their ethics are compromised so fraud and other criminal activity etc is probably going on as well. Even if not, the company is badly run and long term will fail in various ways for foolish reasons."
Why do developers at Google consider Agile development to be nonsense?,JSavageReal,"on Aug 4, 2019","How is this even legal? Is there a movement to ban stacking ranking? If we don't voice our concerns as employees, then nobody will.Also the fact that ""meets expectations"" is concern for firing makes absolutely no sense. A plumber who ""meets expectations"" in fixing my toilet is a good plumber. I don't expect a plumber to go ""above and beyond"" and give me a Thai massage too.Absolutely unreal some of the crap we put up with in this industry. Blows my mind that there are actually humans out there in management positions advocating for and implementing this totalitarian dystopian garbage, throwing away their employees for ""meeting expectations"" as if they're disposable ""widgets""."
Why do developers at Google consider Agile development to be nonsense?,_fol8,"on Aug 3, 2019","This is a sign of a sick and abusive culture.
Once process becomes more important than people then the evil ones will work the system and climb the ladder hurting everyone in their path. Yuck."
Why do developers at Google consider Agile development to be nonsense?,logicchains,"on Aug 3, 2019",Look on the bright side: Yahoo is an example suggesting that at least in tech if a company is managed badly enough this eventually results in its demise.
Why do developers at Google consider Agile development to be nonsense?,izacus,"on Aug 3, 2019","Huh, as much as I've heard, good luck ever getting a promotion at Google with a track record of MEs and a single EE. People with SEE regularly get their promotions denied."
Why do developers at Google consider Agile development to be nonsense?,lonelappde,"on Aug 3, 2019","That's because it's uncorrelated,  not high bar. Until recently, the manager giving you EE and SEE is totally different from and actively distrusted by the promo committees.And on top of that, the criteria are different. Working a little faster than your peers is EE, and is rewarded with raise and extra bonus, but that's different from performing in a higher level role with qualitatively different expectations."
Why do developers at Google consider Agile development to be nonsense?,inlined,"on Aug 3, 2019",Can confirm. I didn’t get my promotion till 2xEE and 4xSEE.
Why do developers at Google consider Agile development to be nonsense?,lr4444lr,"on Aug 4, 2019","Your post is implying a few things that compel me to ask:1) There is a pure relative ranking firing cut-off at Yahoo regardless of how well the people at the bottom do?2) Does Yahoo make this clear when they hire you?3) Your manager was so incompetent that he could not judge your performance outside of customer facing product?4) A company as big as Yahoo thinks its going to survive alienating the personality that looks for big company culture with that kind of ""make the cut"" performance review?"
Why do developers at Google consider Agile development to be nonsense?,Macha,"on Aug 4, 2019","Stack Ranking at yahoo is no more, at least officially as of a few years ago."
Why do developers at Google consider Agile development to be nonsense?,TrackerFF,"on Aug 3, 2019","The problem, so to speak, is that companies are getting extremely data driven, and constantly need some form of metrics to evaluate their employees.This again can turn into a culture where doing what's expected is devalued to lowest score - because you have that system where there has to be bottom and top performers.And you sadly end up with a situation where workers are (almost) embellishing their projects to get more visibility."
Why do developers at Google consider Agile development to be nonsense?,ckosidows,"on Aug 3, 2019","My company insists each ticket in Jira have a time logged on it now. This is on top of story points. Everyone I know has pushed back on it, but I hope this isn't becoming a standard elsewhere."
Why do developers at Google consider Agile development to be nonsense?,bravoetch,"on Aug 3, 2019","Product / project / scrum guy here. Logging time won't make sense unless each ticket is one person working on it at a time. The moment it becomes teamwork (like asking someone else for their thoughts on an idea) the value of time is meaningless.People are also useless at estimating time in advance, but pretty great with throwing a story-point number on a given story with the right guidance. Please feel free to schedule me in with your uneducated upper management. They're about to lose value."
Why do developers at Google consider Agile development to be nonsense?,pjmlp,"on Aug 3, 2019","Many companies use Jira tickets to track employee time, instead of having a separate time tracking system.This creates a situation where everyone is searching for tickets to make up for their daily 8h."
Why do developers at Google consider Agile development to be nonsense?,tambre,"on Aug 4, 2019","Same in the company I work at, but only for IT employees. It's fine as long you have over 80% of the monthly hours in you contract tracked.
Definitely not used for micromanagement. I myself find it useful for seeing inefficiencies in what I do and ensuring I actually go home.It's handy for charging clients for development work specific to them."
Why do developers at Google consider Agile development to be nonsense?,tus88,"on Aug 3, 2019",The workplace culture this kind of Lord of the Flies management approach results in must be horrendous.
Why do developers at Google consider Agile development to be nonsense?,technofiend,"on Aug 4, 2019","My project just delivered MVP 1 which automated a certain infrastructure build process that was previously a mix of manual, semi-manual (people running scripts by hand) and automated.  In parallel to that green field development I also fixed the issues with the previous solution.  Happy path for the old tool is down from 20+ days to 4 and dropping, happy path for the new tool is hours.Now that I've delivered those improvements my boss added reworking the software stack that feeds my current system.  He also said to me ""Oh, BTW RIFs are coming, take that how you will.""So I'm not certain if at this point I'll be RIFd right after delivery of a complete retooling of our infrastructure build process."
Why do developers at Google consider Agile development to be nonsense?,goatinaboat,"on Aug 4, 2019",So I'm not certain if at this point I'll be RIFd right after delivery of a complete retooling of our infrastructure build process.Did you write the documentation yet? I think you know what I mean.
Why do developers at Google consider Agile development to be nonsense?,rolltiide,"on Aug 3, 2019",Seems a lot more impersonal but this is a big possibility at small companies tooA specialist working on a platform that doesn't need the whole backend team is isolated and easily skipped over for all accolades
Why do developers at Google consider Agile development to be nonsense?,walshemj,"on Aug 3, 2019",That sounds interesting a few years ago I worked on a project (the back end system that managed large chunks of the core UK internet infrastructure ).That had an extended 9 month design phase - but a short 12 week agile sprint phase that delivered two intermediate POC versions and then a final working project (we even delivered hardware when at the last minute the customer admitted they hadn't ordered a server) - we even took enough networking gear that we could have installed a net work if that was missing to.
Why do developers at Google consider Agile development to be nonsense?,ahupp,"on Aug 5, 2019","Ugh.  If ""meets expectations"" puts you in the bottom 5% this says to me that there's wild miscalibration in the review process; e.g not everyone is using the same standard for ""meets"" and some teams have inflation going on.  At my last employer we had lot of cross-review between teams to make sure everyone applies a similar the same standard, just to avoid this problem."
Why do developers at Google consider Agile development to be nonsense?,zerr,"on Aug 3, 2019",So no peer (fellow engineers) reviews but solely manager?
Why do developers at Google consider Agile development to be nonsense?,hiccuphippo,"on Aug 5, 2019",Why would meeting expectations put people at risk of being terminated? Do they expect one to do more work than one was payed to do?
Why do developers at Google consider Agile development to be nonsense?,doggydogs94,"on Aug 4, 2019","If they had fired you, you could have taken your code and created a startup."
Why do developers at Google consider Agile development to be nonsense?,pmorais,"on Aug 4, 2019","I have never heard of a tech company that doesn’t require that you explicitly give up ownership rights to software written on the job, so good luck with that"
Why do developers at Google consider Agile development to be nonsense?,vecter,"on Aug 3, 2019",It sounds like your manager failed to adequately represent your work.
Why do developers at Google consider Agile development to be nonsense?,steelframe,"on Aug 3, 2019","Speaking as someone who has been at Google for about 10 years, I would caution against trying to paint ""developers at Google"" using broad strokes. Google is a multifaceted megacorporation housing a plethora software project categories. Through the years I've been deeply involved in a wide spectrum of them, ranging from ""disconnect for 6 solid months and deliver a leapfrog for the masses"" to ""form an umbilical cord with a handful of enterprise customers."" The techniques necessary to drive results in each case vary in accordance with the nature of the problem. This is where broad perspective and good judgement come into play, and dogmatic adherence to -- or dogmatic rejection of -- any particular development process presents a risk."
Why do developers at Google consider Agile development to be nonsense?,Mangalor,"on Aug 3, 2019","> ""disconnect for 6 solid months and deliver a leapfrog for the masses""What a luxury that must've been..."
Why do developers at Google consider Agile development to be nonsense?,wolco,"on Aug 3, 2019",No it was g+
Why do developers at Google consider Agile development to be nonsense?,utopian3,"on Aug 3, 2019",Or one of the twelve messaging apps that got ignored by the masses because no one longer trusts their products
Why do developers at Google consider Agile development to be nonsense?,mav3rick,"on Aug 4, 2019","Right. Everyone is using duck duck go , Proton mail and vimeo outside of HN."
Why do developers at Google consider Agile development to be nonsense?,ilikehurdles,"on Aug 4, 2019","Allo me on Google Messenger. Or was it Android Messenger? Anyway, my Duo handle is xxHangoutsDudexx. We start a Google Talk session later."
Why do developers at Google consider Agile development to be nonsense?,mav3rick,"on Aug 4, 2019",Have fun using signal with your two friends.
Why do developers at Google consider Agile development to be nonsense?,utopian3,"on Aug 4, 2019","You missed the point by two miles. I still use Hangouts, but they’ve introduced 12 other apps in the last 10 years that do the exact same thing. All while making Hangouts / google chat / gTalk (whatever it was originally called in Labs) worse."
Why do developers at Google consider Agile development to be nonsense?,mav3rick,"on Aug 4, 2019",Google is good at a lot of things. Messaging strategy is not one of them. HN just hates Google doing well in anything so the expected harping on messaging.
Why do developers at Google consider Agile development to be nonsense?,utopian3,"on Aug 5, 2019",https://joelx.com/google-discontinues-hangouts-on-air/15177/
Why do developers at Google consider Agile development to be nonsense?,utopian3,"on Aug 5, 2019",Thank you for agreeing with me.
Why do developers at Google consider Agile development to be nonsense?,mav3rick,"on Aug 6, 2019",Big companies have many blind spots. There is nothing new here.
Why do developers at Google consider Agile development to be nonsense?,hinkley,"on Aug 3, 2019","The hardest part of working with really smart people is that they can rationalize pretty much anything. Worse still, if they have been on the project for years and you’re the new guy, you’re working from a deficit of knowledge and they’ve had plenty of time to cook up a “coherent but wrong” model of the universe. The only thing that saves a group like that is humility. Trying to see the system through the eyes of the new person helps loads. I call people out for complaining about “having to” train a new guy. It’s “getting to”, man. Take advantage of the opportunity.The first time I worked with a stable group where everyone was a smart as me, even the old new guy with a massive inferiority complex who managed to sneak one really profound comment into every meeting, there was a lack of humility on everybody’s part and things did not go well.  Planning meetings were exhausting because you could get them to bash their own old work but couldn’t get them to admit to needing to change process at all. I should have quit, but I had a string of experiences with persistence paying off and I had not been beaten yet. That was the first time, and my current employer the second (I should probably quit here, too).Cognitive dissonance is at its absolute worst in the head of a scary-smart person."
Why do developers at Google consider Agile development to be nonsense?,ellius,"on Aug 3, 2019","You probably know this, but a lot of studies back you up. Being smarter doesn't necessarily make you more likely to be right, but it makes you a hell of a lot better at rationalizing your position and persuading others. Also, that comment about the ""old guy with an inferiority complex who sneaks one really profound comment in every meeting"" really hit home. We have that guy on my team too. You have to wonder what's going on when those guys are sitting in the corner and us blustery people are doing all of the talking."
Why do developers at Google consider Agile development to be nonsense?,perl4ever,"on Aug 4, 2019","I would say that being smart does make you more likely to be right, but overall, your rightness is not the percentage of cases in which you were right, because some bad decisions are far more (and unexpectedly) highly weighted than others when it comes to an overall outcome.Where smart people fail is because they were ""right"" in a limited, seemingly appropriate context and it turns out that in a larger context, it didn't matter."
Why do developers at Google consider Agile development to be nonsense?,jammygit,"on Aug 4, 2019","> Being smarter doesn't necessarily make you more likely to be right (...)> (...), but it makes you a hell of a lot better at rationalizing your position and persuading others.My reading has said the opposite: smart people are far more likely to be right, but it does no good because the important thing is to be able to communicate"
Why do developers at Google consider Agile development to be nonsense?,ellius,"on Aug 4, 2019","So I included that ""necessarily"" on purpose. In general smarter people will solve problems more correctly. But there is also a whole class of problems where being smart is actually a detriment. Here is a good read on this topic: https://www.newyorker.com/tech/frontal-cortex/why-smart-peop..."
Why do developers at Google consider Agile development to be nonsense?,caminante,"on Aug 3, 2019","There's a lag (potentially years) in judging peer competency (or cognitive dissonance) when you switch domains.  Gatekeeping and poor new-hire integration are early warnings.You might ask yourself if your current executives are aware of the issues you're seeing, then think through what you can control and re-prioritize."
Why do developers at Google consider Agile development to be nonsense?,streetcat1,"on Aug 3, 2019","I personally think that it is all matter of risk. The risk of contract work (which is what the agile manifesto writers were facing most of their careers [they are all consultants), is building something that the customer do not want or did not intend do. The actual tech risk is very low (e.g. ruby on rails on postgres) since most of them use mature technology. In this case the agile manifesto make sense - I.e. we can build something really fast and literally ask the customer if this is what he wants every two weeks.When you building hard tech products (e.g. borg or tensorflow), the actual risk is technology and competition, and since this is new technology, there are not that many customers. In this case the risk is in the architecture (i.e. it would be hard to change the core architecture) and in the technology, since you do not know what kind of application will be build on top of this new technology. In addition, you face general competition risk, since the market can usually absorb only one dominant architecture.So in this case, you invest much more time in design and careful construction."
Why do developers at Google consider Agile development to be nonsense?,hinkley,"on Aug 3, 2019","Even without mature technology, you want to shake down the new tech early to find out if it’s going to crumble around your shoulders at the worst possible moment.While Agile is not perfect for this kind of work, it does have a lot of facility in this area.Now if you could just get any two people to agree on what constitutes the last responsible moment...And with new tech you often have to do it first or do it better. Oddly I find Agile seems to work better for “do it better” because if it’s easier for you to add features than your competitor, they will probably get burned out before you do.  If you can survive that long you start to pull ahead."
Why do developers at Google consider Agile development to be nonsense?,streetcat1,"on Aug 3, 2019","So, just from observation, when developing new tech, there is always LAST to market advantage. MS was LAST to market. Google was LAST to market. Kubernetes was LAST to market. Apple was LAST to market (After MS and Palm).I think that Agile is good after the market is captured. But when developing the core tech (usually with no customers beside product managers and based on research), it might be too constraining."
Why do developers at Google consider Agile development to be nonsense?,hinkley,"on Aug 3, 2019",I’ve observed the same thing. I’ve also observed that the dogma in the startup world is exactly opposite. Everything is about version 1 and there is nothing left in the tank for version 2.The whole MVP thing is more about selling demoware to investors. It just sounds like it’s being supportive and it gets them what they want. They don’t give one shit about what happens 18 months from now. That’s somebody else’s problem. There’s always someone with a higher pain tolerance they can hire (note: pain tolerance is negatively correlated with capacity to anticipate problems before they become emergencies).  And there’s always advertising or mergers to mask the real problems.
Why do developers at Google consider Agile development to be nonsense?,agency,"on Aug 4, 2019","There's a last to market advantage in the same way that ""you always find things in the last place you look"""
Why do developers at Google consider Agile development to be nonsense?,Nomentatus,"on Aug 4, 2019","Gates made this argument strongly, in public, before getting nailed a couple of times - the latest big smackdown being Android, as he's confessed recently. ""Last to market"" is often ""first to market with the truly appropriate technology."""
Why do developers at Google consider Agile development to be nonsense?,andrewmutz,"on Aug 3, 2019","I agree 100%.  You should be continuously delivering in a way that allows you to learn about the area of greatest risk.For much of what Agile development is applied to, the greatest risk is market risk.  You want to get something out to users as quickly as possible to see if your assumptions about your users and their needs are right.For google style projects, there is primarily technology risk rather than market risk.  If you are trying to build something that is obviously useful but is perhaps impossible, it makes sense to focus on delivering working systems that allow you to see if your assumptions about technological limitations are correct."
Why do developers at Google consider Agile development to be nonsense?,jammygit,"on Aug 4, 2019","Suppose you are a Series <X> startup with a very large amount of technology to build before you surpass your competitors. In order to do a better job, you have to adjust things constantly in response to customer feedback.Presupposing that there are years of feature work to be done, do you go with Agile, or waterfall?"
Why do developers at Google consider Agile development to be nonsense?,kd5bjo,"on Aug 3, 2019","There is unfortunately a large gulf between “agile” and “Agile” development these days.  The former refers to development generally in line with the agile manifesto, with processes tailored to the needs of the team and the project.  The latter is a buzzword used by consultants to convince management to put their favored bureaucratic method in place, usually some variant on the scrum system."
Why do developers at Google consider Agile development to be nonsense?,bamboozled,"on Aug 3, 2019","This is mostly what I see happen too, ""Agile"" is used an excuse to introduce some type of bureaucratic process to fix what is actually pathological cultural / leadership issues."
Why do developers at Google consider Agile development to be nonsense?,hinkley,"on Aug 3, 2019",Agile as practiced by nontechnical managers is essentially a hill climbing algorithm.And I think we all learned in college that hill climbing rarely if ever finds the optimal solution. Often it doesn’t even find Good Enough. But it’s the best thing you can see in the vicinity so it gets labeled Good Enough even over the protests of people who have done it better elsewhere.
Why do developers at Google consider Agile development to be nonsense?,NicoJuicy,"on Aug 3, 2019","I would have upvoted this 3 times, if I could"
Why do developers at Google consider Agile development to be nonsense?,logicchains,"on Aug 3, 2019",s/fix/try and fail to fix.
Why do developers at Google consider Agile development to be nonsense?,bamboozled,"on Aug 3, 2019","Yup, thanks for that, this is what I meant."
Why do developers at Google consider Agile development to be nonsense?,krinchan,"on Aug 3, 2019","This. Our team tends to take more of a Kanban approach and we've yet to miss a quarterly delivery and always have a good sense of how far along we are. Meanwhile, the higher ups think it's black magic we don't spend 4 hours in ""sprint planning"" every two weeks."
Why do developers at Google consider Agile development to be nonsense?,tech_tuna,"on Aug 4, 2019",Koolaid.
Why do developers at Google consider Agile development to be nonsense?,crazygringo,"on Aug 3, 2019","This post feels a little disingenuous...First of all, it's not like most engineers at Google are working on Bigtable or Borg, with a ""very simple interface and tons of hidden internal complexity"". Plenty of them are working on normal consumer-facing products, the ""software with a simple core and lots of customer visible features that are incrementally useful"", although maybe that's not the hype people want to believe.But either way -- he insists ""companies like Google write revolutionary software which has never been written before, and which doesn’t work until complex subcomponents are written."" But putting aside the ""revolutionary"" hype, there's no reason subcomponents can't have agile philosophies applied.A big part of agile is ensuring developers actually understand the requirements (consensus via point estimation), seek to define requirements where they're suddenly discovered to be vague/undefined, and have frequent check-ins to demonstrate that their software is making progress towards those requirements and raising any potential blockers early on, and not accidentally going down a rabbit hole of building the wrong thing (despite best intentions) for weeks at a time which nobody notices until too late, and the project is delayed by months.That's just as important for a subcomponent of a subcomponent, as it is for a service dashboard. To assume agile is only for ""consumer-facing"" software is a deep and fundamental misunderstanding."
Why do developers at Google consider Agile development to be nonsense?,pfooti,"on Aug 3, 2019","This is true. I'm a swe at Google. My team uses scrum methodology, and is responsible for a customer facing but thoroughly ""normal"" product. My work doesn't involve building heretofore unknown planet scale computational resources. It's just a normal product where I'm a full stack dev.I'm sure there's ways we can improve our canonical agile-ness, but it's not lip service. We set quarterly goals sure, but they can change if situations change and the goals themselves are usually data-driven (based on prior quarters a/b testing and other research done by our UX team). We also have strong product and project managers, who own a lot of the scrum meta-work.So, I guess #notallgooglers (which for context is an ironic, kind of self deprecating response here). There's tens of thousands of engineers at G. Some teams are agile, some aren't."
Why do developers at Google consider Agile development to be nonsense?,insertnickname,"on Aug 3, 2019",Quarterly goals are not necessarily anti-agile. Extreme Programming has both a weekly and a quarterly cycle.
Why do developers at Google consider Agile development to be nonsense?,vl,"on Aug 4, 2019",This Qoura post is typical pro-Google propaganda. Things at current Google are far from described: modern Google is deep bureaucratic hierarchical organization.
Why do developers at Google consider Agile development to be nonsense?,ma2rten,"on Aug 3, 2019","First of all, it's not like most engineers at Google are working on Bigtable or Borg, with a ""very simple interface and tons of hidden internal complexity"". I would say that most engineers are working on something like that. Those two examples are from google cloud/technical infrastructure, but other products such as search and ads have tremendous complexity behind them."
Why do developers at Google consider Agile development to be nonsense?,pmorais,"on Aug 4, 2019",I feel like this hubris is why almost every google product I use is riddled with horrible bugs. The cursor move functionality on Gmail for iOS has been broken for TWO YEARS. It’s also why the tensorflow API is a horribly over-engineered abomination when Pytorch is almost at feature and performance parity with something exponentially simpler and more consistent/elegant. That “biggest baddest solution” culture makes sense for Bigtable; it’s god-awful for anything remotely customer facing.
Why do developers at Google consider Agile development to be nonsense?,akhilcacharya,"on Aug 3, 2019","> Plenty of them are working on normal consumer-facing products, the ""software with a simple core and lots of customer visible features that are incrementally useful"", although maybe that's not the hype people want to believe.Honestly, it seems a bit elitist to me.I work at a company that pioneered SOA for both technical and organizational flexibility reasons and I'd say it's worked out pretty well for us!"
Why do developers at Google consider Agile development to be nonsense?,Jtsummers,"on Aug 3, 2019","This article makes a common mistake: Scrum and Agile are not synonymous. Given that error, the conclusion is nonsense. And besides, even Scrum doesn’t require a delivered product each sprint. Just an updated status and increment completed.If I’m building a new server and client architected system, the early sprints may be getting certain design details down. More documentation than code. Later on, I may have sprints that only establish the handshake between client and server and no real functionality. The point is taking milestones (big chunks of work) down to smaller chunks of work that can establish a clearer goal set for the near future.And that isn’t even unique to Scrum. If you don’t establish small iterative goals it becomes difficult to measure progress. Saying, “We can’t measure success until this large number of lines of code are completed” is folly. If you have that design, you can measure your progress towards completion by creating inch-pebbles for the next few iterations. Like in my example, finalize design docs based on R&D efforts, make prototypes or simulations, create basic handshake code, then build up server and client features in tandem to ensure they make sense (maybe the design can be simplified when you realize several commands or messages are really specialized versions of a more generic one, or maybe something is more complex and requires a reexamination of the design). And yes, a lot of this is common sense to good engineers. Problem is, common sense isn’t common and you’ll get people pushing Waterfall again and again."
Why do developers at Google consider Agile development to be nonsense?,jogjayr,"on Aug 3, 2019","> This article makes a common mistake: Scrum and Agile are not synonymousIt does not. It merely acknowledges that Scrum is the most popular and widely practiced incarnation of Agile and is what most developers are familiar with.From the article: ""The simple high level Agile Manifesto is something I think is close to the way Google engineers think about software development...Google development style exemplifies the type of individual empowerment talked about in the principles.""And: ""While the high level Agile Manifesto is flexible enough to work with these principles, these are very different than the short-iteration low documentation Agile/Scrum process which has become synonymous with the word Agile."""
Why do developers at Google consider Agile development to be nonsense?,lanstin,"on Aug 3, 2019","When you are at the edge of technology a lot of the initial tasks are the smart people go off and think for a few weeks or months.  Talking amongst themselves but not necessarily producing visible things. Just updating their mental state as they search solution space for the best achievable answer.   Now, I have worked in a place where that time was accounted for and allowed, but most places the value of it seems lost on management."
Why do developers at Google consider Agile development to be nonsense?,temac,"on Aug 3, 2019","If you redefine ""agile"" as common sense and what currently works for you, and ""waterfall"" as failure, then obviously every good thing will be ""agile"", and wrong stuff will be ""waterfall"".Can we do anything with that though?"
Why do developers at Google consider Agile development to be nonsense?,iovrthoughtthis,"on Aug 3, 2019","Also, if you can’t get a thing done in one sprint then perhaps your sprint is too short?The point is to adapt the process to the teams needs, not to dogmatically follow some other teams process."
Why do developers at Google consider Agile development to be nonsense?,mmcnl,"on Aug 3, 2019","I feel like people who are opposed to agile and scrum often make out things of it that are in no way prescribed by these methodologies. For example, I see people mentioning the idea that with scrum, you should release working software every sprint. This is not the case. The idea is to deliver a _potentially_ shippable product increment - a.k.a. not building 10 bridges in parallel if there's no need for it. Some might even call this common sense.Most people who are pessimistic about the agile development who I have spoken to are usually pessimistic because of poor implementations they've encountered. Any methodology is awful when misused or when hidden agendas are at play. No methodology will ever solve that.That being said (probably onpopular opinion), I often also see engineers use agile to blame everything that is going wrong onto ""management"" and use it as way of avoiding responsibility. Complaining and arguing as if there are only absolutes is an immature and unproductive attitude. Calling agile ""nonsense"" is a prime example of that."
Why do developers at Google consider Agile development to be nonsense?,theworld572,"on Aug 3, 2019","My biggest criticism of Agile and Scrum is that it assumes that you can just plan out how a feature will work by sitting in a meeting and talking about it. Then spend the next two weeks implementing that plan. Software development almost never works out so neatly.What really happens is that you have a set of requirements and an idea of how you are going to implement the feature. You start working on it, maybe you discover that there is a whole area of code that needs updating in order to allow for your feature to be implemented. This adds on another week of work required.In a common-sense based development team, what usually happens is the developer has a quick work with the project manager and maybe other devs who need to be involved and says ""Hey, I've found out that we need another week to complete this feature because X needs refactoring, do you still want me to continue with this?"" then the PM either says ""Yes this feature is important, even if it will take another week"" or ""No, the feature is not important enough to be worth spending another week on"". Its really not rocket science.In SCRUM what usually happens is the SCRUM master will tell you that the rules say that we have already committed to a set amount of work this sprint and that extra week of work falls outside the scope so we should create another card for the extra work and consider this card blocked.The whole idea of having a rule for what to do in that situation just seems absolutely crazy. Just do whatever makes sense! Its really not that difficult."
Why do developers at Google consider Agile development to be nonsense?,empath75,"on Aug 3, 2019","> My biggest criticism of Agile and Scrum is that it assumes that you can just plan out how a feature will work by sitting in a meeting and talking about it. Then spend the next two weeks implementing that plan.They don’t, there are ‘spikes’ that are just time spent researching or exploring or designing rather than implementing.If your scrum master is telling the team what they can’t or can’t do, or how they should do their jobs, they are doing it wrong. Their job is to help you plan and help you resolve impediments to your work. They aren’t your boss.The first thing in the manifesto is people over process, there should never be a case where some rule tells you that you can’t do the right thing.Formal Scrum is a nice way to organize ‘normal’ work, but there are lots of cases where you have to improvise, and the process should never get in the way of that."
Why do developers at Google consider Agile development to be nonsense?,GordonS,"on Aug 4, 2019","> If your scrum master is telling the team what they can’t or can’t do, or how they should do their jobs, they are doing it wrongUnfortunately in my experience this does happen quite often. I've found the biggest issue with scrum is when people (usually the scrum master and PM) take hard-line, dogmatic views of scrum processes."
Why do developers at Google consider Agile development to be nonsense?,profalseidol,"on Aug 12, 2019","There's this course in pluralsight that talks about two orgs that promote scrum. The other one seems to be giving out the wrong ideas. I think it's this one (copied from wikipedia):    In 2002, Schwaber with others founded the Scrum 
    Alliance[18] and set up the Certified Scrum accreditation 
    series. Schwaber left the Scrum Alliance in late 2009 and 
    founded Scrum.org which oversees the parallel Professional 
    Scrum accreditation series.[19]

I think it was Scrum Alliance that's giving out ideas like Burndown chart is required in scrum."
Why do developers at Google consider Agile development to be nonsense?,Tharkun,"on Aug 3, 2019","> My biggest criticism of Agile and Scrum is that it assumes that you can just plan out how a feature will work by sitting in a meeting and talking about it.No, it doesn't. It wants the team to discuss features to help find preventable issues up front and to make it as clear as possible. The unknown unknowns remain unknown, which is why an estimate is an estimate, and a sprint is a best-effort attempt at getting a thing done. If and when it becomes clear that this feature is too complex, too big, or whatever, then it can be reestimated, or decomposed or reevaluated. It's supposed to be agile, not rigid and fragile."
Why do developers at Google consider Agile development to be nonsense?,theworld572,"on Aug 3, 2019","Whats the point of SCRUM then? If all it does is to tell you ""do what makes sense"" why do we even need it? Thats a rhetorical question, I already know the answer is that we need it in order to keep SCRUM consultants, certifications, training etc. a profitable business.Whether or not you think SCRUM is good or bad, you can't argue that a sizeable (if not the majority) amount of companies are ""not doing it right"" and that a sizeable (if not the majority) amount of developers loath working in SCRUM teams. So wouldn't we just be better off if the industry ditched SCRUM entirely?"
Why do developers at Google consider Agile development to be nonsense?,ben509,"on Aug 3, 2019","The ""do what makes sense"" is limited because you have to ask questions to ascertain what makes sense.Some questions are easy to answer, but many questions can only be answered by doing a thing that takes work. And Scrum gives you a framework that tries to put a limit on how much work goes by with no answers.So it uses a simple schedule.The team works for X weeks, working on implementing specific tasks. (Which in turn answer some questions.)Then the team stops, reviews their progress on the larger product, and adjusts plans accordingly. Now ""do what makes sense"" has demonstrably advanced."
Why do developers at Google consider Agile development to be nonsense?,mmcnl,"on Aug 3, 2019","Working is not vacation. Sticking to a process is a hygiene factor which doesn't necessarily has to be fun but it makes it possible for companies to be properly managed.That being said, stop complaining. If you can find room to complain, you surely can find room for improvement right? It might just be me, but everywhere I've worked I've never encountered a manager who isn't open to solid ideas for improvement."
Why do developers at Google consider Agile development to be nonsense?,theworld572,"on Aug 4, 2019","I never said I wanted software engineering to be fun. I have worked on 4 different teams that followed Scrum and all four of those teams suffered from the same problems - low productivity and poor management. The most entertaining was a recent place I worked where we had a certified Scrum master who had been ""trained"" by one of the two founders of Scrum, when I joined I told him about some of the bad experiences I've had with Scrum and he said ""yeah that annoys me, those teams are not really following scrum and so teams think that scrum is bad but really they are not doing it right"". Of course in the months to come I realised that we ended up with the same exact issues I saw in previous teams. In contrast theses problems were just non-existent in teams that did not follow a set methodology.Scrum is just not a good way to manage a team. I find Scrum to be a lot like religion - it means different things to different people but its evangelists always have a pre-prepared answer to every possible criticism, usually containing lots of jargon, buzzwords and double speak."
Why do developers at Google consider Agile development to be nonsense?,taneq,"on Aug 3, 2019","It's to keep everyone in the loop on what's happening in the codebase, and give people a time to ask for help on whatever's blocking them (so you hopefully get it sorted in a 10 second conversation instead of having to break their flow later to get help)."
Why do developers at Google consider Agile development to be nonsense?,SpicyLemonZest,"on Aug 3, 2019","In the traditional waterfall model, you don't do what makes sense. The Plan has been set, and you have to find a way to do even the parts that don't make sense, because it will be a huge disaster if The Plan isn't complete.Sometimes it's even the right development model! If you're building the control system for a new power plant, you'd better follow the agreed-on spec even if you realize it's not the best way to do things."
Why do developers at Google consider Agile development to be nonsense?,insertnickname,"on Aug 3, 2019","Scrum, not SCRUM. It's not an acronym."
Why do developers at Google consider Agile development to be nonsense?,Nomentatus,"on Aug 4, 2019","Unless you work for Scottish Club Rugby Union Magazine.
https://scrummagazine.com/"
Why do developers at Google consider Agile development to be nonsense?,theworld572,"on Aug 4, 2019",Good to know.
Why do developers at Google consider Agile development to be nonsense?,taneq,"on Aug 3, 2019","> What really happens is that you have a set of requirements and an idea of how you are going to implement the feature.The thing is, your story cards or whatever are meant to be a live document. You have the big meeting, the next day you realise that what you came up with doesn't work, you grab a coffee with your stakeholder and talk it through, come up with a new plan, and you change the card you're working on. Probably check with the tech lead first, but it's that flexible.> In SCRUM what usually happens is the SCRUM master will tell you that the rules say [...]This SCRUM thing sounds evil.> Just do whatever makes sense! Its really not that difficult.This is probably the best advice ever for any development team. Just do the thing!"
Why do developers at Google consider Agile development to be nonsense?,Tharkun,"on Aug 3, 2019","I think the OP is missing the point of scrum. The scrum master isn't supposed to tell you what the rules are. The rules are whatever the team decides they are. The scrum master is not the boss, they're supposed to be a facilitator..."
Why do developers at Google consider Agile development to be nonsense?,theworld572,"on Aug 3, 2019","That sounds like typical scrum-enthusiast double-speak to me!   :Dhttps://www.scrum.org/resources/what-is-scrum""This Guide contains the definition of Scrum. This definition consists of Scrum’s roles, events, artifacts, and the rules that bind them together.""Definitions, Rules, Roles, Artifacts etc. Sounds pretty authoritative to me. If it wasn't authoritative, how would you even know what SCRUM ""really"" is? You cannot say both that SCRUM  is not authoritative and lets you do what you want, and then also say ""you're not doing scrum correctly""."
Why do developers at Google consider Agile development to be nonsense?,empath75,"on Aug 3, 2019","All of the rules say the team is allowed to change anything that doesn’t work for them. Scrum is a set of suggestions for organizing a team, it’s not Moses coming down with tablets from on high."
Why do developers at Google consider Agile development to be nonsense?,mmcnl,"on Aug 3, 2019","Why not try to find a perspective that will make things easier for you? You can look at any suggestion and shoot it down for reasons X, Y and Z - that's easy. Try to invest some time in finding out what works for you and focus on that."
Why do developers at Google consider Agile development to be nonsense?,taneq,"on Aug 3, 2019","Exactly. It's meant to be collaborative, not authoritative."
Why do developers at Google consider Agile development to be nonsense?,tootie,"on Aug 3, 2019","You shouldn't actually ever change a story in progress if you can avoid it. The feature is the feature. How you build it doesn't go in the story. And if you aren't sure how to do it, you account for that in the estimate."
Why do developers at Google consider Agile development to be nonsense?,tootie,"on Aug 3, 2019",You never just write a story on the spot for a feature. It has to come out of completed design work that takes as long as it takes and ideally is funnelled through the same pipeline as you use for development.
Why do developers at Google consider Agile development to be nonsense?,zamadatix,"on Aug 3, 2019","The problem I've seen with agile is it's too easy to turn into ""as long as we complete something that was defined as value this sprint the problem isn't what this team is doing"" that many places end up having teams avoiding any large or external issues completely while reporting everything is going great.You may say it's not a methodologies fault when it's misused but I'd say it IS a methodologies fault if the feedback cycle on the misuse is easily hidden by the process.In the end I think for many places where agile is put in more value would be had putting that work into the business communication flow. If your biggest problem to solve is you don't know how to work on problems in smaller chunks + communicate when you've done something and that's what you need to reform you're probably doing pretty good and agile will be great. If you're implementing agile for another reason it probably won't fix that problem and agile will be blamed."
Why do developers at Google consider Agile development to be nonsense?,mmcnl,"on Aug 3, 2019","> teams avoiding any large or external issues completely while reporting everything is going greatThis is what happens all the time in big companies, agile or not."
Why do developers at Google consider Agile development to be nonsense?,zamadatix,"on Aug 4, 2019",Avoiding sure reporting not really. I mean sure anyone can purposefully not follow a methodology but that's not what I'm talking about here.
Why do developers at Google consider Agile development to be nonsense?,taneq,"on Aug 3, 2019","I think Agile has the same strength and weakness of any methodology: The people implementing it. If you have good people running and working on an Agile project it's going to go well. Those same people would do similarly well with waterfall, or just sitting in a dark room with a carton of Coke each.Where your methodology really matters is the how information flows between your dev team, the end users, and any other systems you need to interoperate with. Agile is great for providing development-as-a-service to a client who doesn't know what they want but will know it when they see it (eg. building enterprise software or web apps). Waterfall is great for providing known, fixed functionality (eg. building an ECU for an engine, or a back-end for a web bank)."
Why do developers at Google consider Agile development to be nonsense?,gilgoomesh,"on Aug 3, 2019","I think the answer badly misconstrues the purpose of ""short term planning"" and ""continuous integration"" as though these concepts preclude long proof-of-concept projects. The point of short delivery cycles is not to deliver a viable product to an external customer every two weeks. Rather it simply ensures that code remains in-sync with its intended use-case and guards against individuals going off on untracked tangents.Basically, developers who try to develop 10,000 lines of code on their own, without sharing it for a month, create massive risks and are an impediment to their team. Forcing regular code curation and sharing among the team makes the project stronger – that's what ""short term planning"" does."
Why do developers at Google consider Agile development to be nonsense?,Retric,"on Aug 3, 2019","Doing 1 month without integration is still fine.  When agile was conceived doing 6 sprints per year would have been considered agile in many fields.  The goal is to be able to be as responsive as reasonably possible not simply to add thousands of mostly meaningless milestones.It turns out that most projects can be broken down into absolutely tiny pieces, and that is generally a good idea.  However, the core idea is you need to adjust the methodology to the problem at hand and not the other way."
Why do developers at Google consider Agile development to be nonsense?,collyw,"on Aug 4, 2019",">It turns out that most projects can be broken down into absolutely tiny pieces, and that is generally a good idea.Generally I agree, but I have noticed in doing things like that, no one ever seems to bother about refactoring, or tidying things up at a higher level.Our designer complained about the CSS organization and spend a couple of days tidying it up. I have a feeling that breaking of tasks into small pieces takes away focus from more long term commitment to code organization and architectural patterns."
Why do developers at Google consider Agile development to be nonsense?,pizlonator,"on Aug 3, 2019","Some of the most beautiful code I’ve ever seen has come of an engineer going off for several months and coming back with a 1MB patch.That kind of time allows some actual deep thought to happen. Some kinds of outcomes won’t happen any other way. I agree with that point in the quora answer.This comes to mind as a recent example of an engineering project that had no incremental
alternative: https://webkit.org/blog/9329/a-new-bytecode-format-for-javas..."
Why do developers at Google consider Agile development to be nonsense?,pizlonator,"on Aug 3, 2019",The point?  Read the article. It’s a big perf win.It’s important that it’s beautiful since the bytecode of a VM gets used so much throughout some of the VM’s most complex parts. Beautiful code is easier to use and maintain.
Why do developers at Google consider Agile development to be nonsense?,InvOfSmallC,"on Aug 4, 2019",I read the article. And I don't really think that we mean the same thing with beautiful code.
Why do developers at Google consider Agile development to be nonsense?,slim,"on Aug 3, 2019","also they don't seem to grasp the meaning of ""customer"" in the context of agile. if nobody ordered the software from you, the customer is you. so the project owner must be someone from the company. it can even be the scrum master assuming both roles"
Why do developers at Google consider Agile development to be nonsense?,Jedd,"on Aug 3, 2019","> I think the answer badly misconstrues the purpose of ""short term planning"" ...'short term planning' appears to be your construct, not found in TFA.Short term implies reactive / tactical -- not the planned / strategic level that TFA is talking about.It may well be that Agile 'precludes long proof-of-concept projects', given its essence is 'better ways of developing software', which clearly hides a wealth of complexity behind the heading of user-facing software."
Why do developers at Google consider Agile development to be nonsense?,pas,"on Aug 3, 2019","Agile (and XP) realised that it's a folly to plan in detail the next 5 years when likely the project, the circumstances, the business landscape, the team and even the technology will significantly shift in that timespan.This of course doesn't mean that if you have a very concrete goal and you need to do a trial and error iterative research and development project, there is of course no need to do ""agile"", because the goal is fix, the things you can try is probably largely predetermined, and you already know one of them will work adequately. (Or not, but then at least you might have some form of benchmark target in mind.)But even then, almost no endeavor starts in a vacuum, so it likely pays off to have some ability to quickly check progress (be it a CI system or just a testbed in the lab, or the aforementioned benchmark), and similarly other aspects of ""agile"", like try to break up the work and estimate it (think about it, its dependencies, its complexity, your competence for the particular work item, typical pitfalls), let the team know who works on what, interact with stakeholders from time to time, and so on."
Why do developers at Google consider Agile development to be nonsense?,S_A_P,"on Aug 3, 2019","I consider it nonsense because it becomes dogma at each organization. The problem with that is that they each have their own way of being “agile” and questioning the status quo is futile at best to politically charged at worst.Secondly, well meaning management often thinks that the reason they are having trouble delivering on time is because agile needs to be implemented. If the developers and business analysts don’t have deep understanding of the problem set then the project is at risk. All the agile in the world won’t fix that.Hiring developers is not easy, and finding those that can deliver is also tough. Agile doesn’t solve that.That said I do prefer an agile like approach to dev ops because it usually encourages teams to communicate and break work down into smaller pieces. When that happens system wide issues come to light much quicker than they would in a waterfall style delivery.As it relates to the quora question, I suspect that the person that asked the question is pretty new to development. Google is huge, there is probably a million different styles of dev ops happening there. Ok that was hyperbole, but steelframes comment is exactly right. Google isn’t a monolith and googlers aren’t all the same."
Why do developers at Google consider Agile development to be nonsense?,ChrisSD,"on Aug 3, 2019",> questioning the status quo is futile at best to politically charged at worst.Which is antithetical to the agile manifesto. The whole point of agile was to question the current methods and be agile enough to change them as needed.
Why do developers at Google consider Agile development to be nonsense?,dbattaglia,"on Aug 3, 2019","The most toxic example of Agile/Scrum I've come across so far has been in a company that was non-technical at its core but wanted badly to pivot to a SaaS business model.  The type of company that 50% of the employees have the word ""manager"" in their title yet manage no one (Digital Project Manager, Technical Project Manager, Product Manager, etc).  I think its just in a lot of companies culture that if they can instill some process, any process really, then the results will follow.  And software engineers complaining about the demoralizing effects of being micro-managed by junior coworkers who never wrote a line of code in their life are just typical spoiled tech workers.  Other companies I've worked for that used Agile methodology were not all that much better, just somewhat less absurd.  I'm glad I've gotten out of that world, its left such a bad taste in my mouth I don't know if I can even look at Agile objectively anymore."
Why do developers at Google consider Agile development to be nonsense?,jrochkind1,"on Aug 3, 2019","Both my best AND worse experiences with process have been 'agile'. (Although the best was NOT ""Scrum"").And not just because all of my experiences have been agile (they have not been).For agile to work well, you need a competent team and manager, AND be embedded in an organization (ie, who determines appraisal of your manager/team) which truly is concerned with prioritizing value to business/customer over, say, ""looking good to other managers"", or ""trying futilely to predict what the software will look like a year from now, because it makes me feel in control"" or ""weird power struggles with other parts of the organization"". Everyone (or at least the majority of those with the power to make you miserable or break your career) has to be really at least trying to work together to maximize business/customer value.If you have that, is your experience (and your software) going to be good whether you use agile or not? Probably. But agile is a really useful and effective mindset for making your software product _and_ your experience (stress-levels for instance) even better. It works, in my experience.If you don't have that, is your experience (and your software) going to be terrible using agile or not, in proportion to how much you don't have it? Sure. And agile and especially scrum can probably make it even worse."
Why do developers at Google consider Agile development to be nonsense?,jandrewrogers,"on Aug 3, 2019","Agile as implemented at almost all companies fails to account for the possibility of software with simple observable interfaces requiring extremely complex and intrinsically non-modular internal design. Most high-end platform infrastructure work looks like this if you are doing it correctly. As a consequence, it becomes difficult-to-impossible to do any kind of hardcore platform software engineering work in most organizations because their model for what successful agile software development should look like doesn't allow for it. There is no appetite for software development where there will be no visible progress for many months and demonstrable functionality is extremely backloaded.A related issue is software that cannot be meaningfully prototyped because any design that is reflective of the desired product has the same order of effort as the actual product, for many of the same reasons.There are certain kinds of high-value software that cannot be built inside most tech companies now because it pattern matches so poorly to the way people think ""agile"" software development should look like."
Why do developers at Google consider Agile development to be nonsense?,anonygler,"on Aug 3, 2019","At Google, there are too many complex systems and too many team dependencies to break tasks down into granular chunks, or to shoot from the hip in a pair programming session.Google runs on design docs. You define the problem, dependencies, risks, end state, etc, in a 20-page doc, and then you drive its development for 1-2 quarters. Google doesn’t do extreme programming, we do extreme ownership.I really prefer it to the time I spent working with Pivotal or Carbon5. They were great, but imo not a sustainable process for mature products. Agile is good for driving a new, greenfield MVP... and that’s about it."
Why do developers at Google consider Agile development to be nonsense?,hinkley,"on Aug 3, 2019","There’s a lot of power in refactoring, but I’ll allow that some of it is counterintuitive.  Anything counterintuitive requires state of mind and experience to line up and that’s quite hit or miss.When that awful Design Patterns book was off the hype train but the new devs had heard about it and asked if they should read it, I would tell them No, read Refactoring twice instead, because it tells you why and when to use this stuff, which is much more valuable.  Like feature work, if you know why you are doing something you can often reason out the gaps in the “what” on your own.We sort of take a bunch of XP processes as a given and forget that this was Agile for most people at the time of the manifesto. Scrum pretends it’s separate but is essentially useless without half of XP."
Why do developers at Google consider Agile development to be nonsense?,anonygler,"on Aug 3, 2019","Google does refactoring, but you’re expected to sell the idea, plan its roll out, and measure its impact... and then bring the codebase into a consistent state. I would rather things be consistently “wrong” than inconsistently right.You can assign work to teams to complete, but you must drive the effort and gain buy in. Otherwise it’s not actually worth refactoring."
Why do developers at Google consider Agile development to be nonsense?,erikpukinskis,"on Aug 3, 2019","I don't want to get into the specifics of what makes Scrum good or bad. But one thing I have noticed working in software is that 99% of people who talk about Scrum actually have not spent any real time learning it. Not the product people, not the managers, and not the engineers.Anyway, I don't want to get into the weeds, but if anyone is interested I just posted a gist of all my notes I took while reading every Scrum document I could find a few months ago: https://gist.github.com/erikpukinskis/a8a61b8fbd19f8063737f7...There's a lot to it, as a software engineer, learning more about it was actually pretty exciting for me because there are some good ideas in there for some of the standard headaches I see over and over in software companies."
Why do developers at Google consider Agile development to be nonsense?,insensible,"on Aug 3, 2019","> From tax-accounting software to computer games, some software is not suited to give to end customers when partially finished.The original Extreme Programming project at Chrysler was a payroll system, so many strategies for handling things like this have been thoroughly discussed in literature and forums in that community."
Why do developers at Google consider Agile development to be nonsense?,abalone,"on Aug 3, 2019","The main gripe I have with this analysis is it weds the short-term sprint cycle with customer exposure & feedback. It then argues that, well, we can't let customers change their minds every two weeks and Big Serious Things take 20 months to get working so this is just for like web contractors and stuff.I don't see agile as exclusively requiring you to expose everything you do to your end-users as you make it. I get that it can accommodate that if that's what you want, but the real essence of it is about de-risking a project by breaking things down into shorter milestones.Do you remember those Microsoft Press software management books? So good. One point was ""Beware of a Guy in a Room"".[1] Which is to say, don't let developers shut their door and go dark for months at a time without surfacing with something working. It can take a bit more work to adapt a big project into smaller ""working"" milestones and seem silly and inefficient, but in the end this helps avoid a lot of risks that can lead to deathmarches that can truly kill a project.One way to adapt the ""customer"" aspect of agile is to not have an actual live customer but rather a ""voice of the market"" that the product manager represents. After all, you do want to empower them to course correct because the world can change over 8-20 months. This applies even to BigTable.[1] https://blogs.msdn.microsoft.com/david_gristwood/2004/06/24/..."
Why do developers at Google consider Agile development to be nonsense?,gumby,"on Aug 3, 2019","Agile was specifically designed for consulting teams /projects. Outside that its applicability drops.Different tools for different tasks. Neither a screwdriver nor a hammer is nonsensical, though using either in the wrong application is."
Why do developers at Google consider Agile development to be nonsense?,curtis,"on Aug 3, 2019","If your software development organization can't ship software without an agile process, then it's unlikely that it can ship software with an agile process either.I'm not saying that agile processes are inferior or even no better than other software development processes.  I'm just saying that there is some level of fundamental capability that a software organization must have before the process is even going to matter."
Why do developers at Google consider Agile development to be nonsense?,CivBase,"on Aug 3, 2019","> much of the work is not even visible to “customers”, so there is no way to write customer visible stories about itIf your work doesn't have a customer, why are you even doing it?The customer doesn't have to be the business's end user.  The can be another team or even your own team.  Someone must benefit from the work or else the work should not be done."
Why do developers at Google consider Agile development to be nonsense?,eklavya,"on Aug 3, 2019","I am sometimes amazed by our industry. Somebody comes up with a solution to a problem and then someone else starts applying it before they even have a problem. Sometimes people ignore what mistakes/challenges others have dealt with and win/lose their own battles. So many times, people just say X does/uses it as some kind of validation or guidance. Well, if your business is also like X, great, you are learning from other people doing the same thing. Otherwise why are you looking at X and not ""your"" challenges, resources and opportunities?There is just too much religion here :)If you need it use it, if it works, great, if it doesn't or you don't need it, move on. The only advice I would give to people is that there is no rule book or the good way. Use your brain and pick up things that work."
Why do developers at Google consider Agile development to be nonsense?,tarsinge,"on Aug 3, 2019",The corollary is that for everyone else working on solving business problems in non-software industries (coincidentally there is a related discussion from today https://news.ycombinator.com/item?id=20599190) the principles are still perfectly sane.In that kind of environment it doesn't lead to short-term thinking because a long-term business vision can exist independently of how a software solution is implemented.Edit: removed the bit about Google being an exception.
Why do developers at Google consider Agile development to be nonsense?,dehrmann,"on Aug 3, 2019",> Companies like Google write revolutionary software which has never been written beforeAlso a lot of video chat apps.
Why do developers at Google consider Agile development to be nonsense?,keanzu,"on Aug 4, 2019","""The word 'agile' has been subverted to the point where it is effectively meaningless, and what passes for an agile community seems to be largely an arena for consultants and vendors to hawk services and products."" - Dave Thomas (Manifesto for Agile Software Development author)https://pragdave.me/blog/2014/03/04/time-to-kill-agile.html"
Why do developers at Google consider Agile development to be nonsense?,Demigod33,"on Aug 3, 2019","> Developers should create a Google Design Document (a fairly minimal, but structured design doc), explaining the project, what goals it hopes to achieve, and explains why it can’t be done in other ways.Does somebody have more on this? I'm never sure how to structure my design documents, how does a Google Design Document look like, is there a template somewhere on how to write one? This would be super helpful, please."
Why do developers at Google consider Agile development to be nonsense?,cameronbrown,"on Aug 3, 2019",Golang has some examples of good design documents:https://go.googlesource.com/proposal/+/master/design/go2draf...
Why do developers at Google consider Agile development to be nonsense?,username90,"on Aug 3, 2019",Chromium project has a template and a lot of docs you can use as examples. They can be found here:https://www.chromium.org/developers/design-documents
Why do developers at Google consider Agile development to be nonsense?,grok2,"on Aug 3, 2019","Anybody doing Agile/Scrum know how it deals with people issues? It seems like with these practices everyone is on a tight leash -- how does it deal with the fact that real people have a natural ebb and flow in their concentration levels at work or interest in work. If your are scrumming all the time, how do you get slow periods in your work cycle so you can recharge (aka slack-off :-))?"
Why do developers at Google consider Agile development to be nonsense?,InvOfSmallC,"on Aug 3, 2019",I work with agile and have 20% of time for personal stuff I want to try/study. Every week.
Why do developers at Google consider Agile development to be nonsense?,grok2,"on Aug 4, 2019","Integrated in your work-load officially? That still doesn't explain stuff. Scrum-masters, please weigh in...thanks!"
Why do developers at Google consider Agile development to be nonsense?,somegoogler9876,"on Aug 3, 2019","First, I disagree with the author's post that all software developed at Google is revolutionary low-level technical infrastructure. But that's not the only type of software development that benefits from avoiding the productivity tax that agile imposes.There are teams at Google that look to use agile methods. E.g. I see standups, there are internal tools that track sprints, etc. I think these are mostly front end teams.I've never worked on front end but was on a team that used scrum at a previous job. I hated it. It seems like a huge impedance mismatch for my kind of work.I'm guessing some consultants sold management on the miraculous benefits of scrum at my previous job, they like the snakeoil they were sold and forced scrum on everyone. The amount of overhead process it brings is an enormous tax on productivity.Some people call this ""corporate scrum"" to try to distinguish it from real scrum. But this feels like a No True Scotsman fallacy. Why is it so damn hard to do ""real scrum"" and actually get the productivity benefits it promises? I've never met any SWE in real life who has tried scrum and liked it.At Google, the development process is not just ""develop 10000 lines of code on their own"" like some posts here have imagined. There is typically a design phase that gets wide buy in, and then code reviews, and extensive testing every step of the way during development. This feels far more realistic as a process.And it is NOT some ""waterfall"" process which only seems to exist as a strawman for agile consultants to knock down. There is no architect who designs the code and then hands it off to code monkeys to go implement exactly as written. That's ridiculous and now how software is written anywhere as far as I can tell.If I were to answer the question in the title myself, it's that Google has allowed engineers to build a process that works for them, and they almost never pick scrum or other agile methods."
Why do developers at Google consider Agile development to be nonsense?,dandigangi,"on Aug 3, 2019","That top rated answer is excellent.Agile at its core, to me as an engineering manager, is:
- People over process/tools
- Plan-able execution and pivoting quickly in rapidly changing environments
- Create consistent, repeatable work delivery
- Retrospection, learning and iteration over time
- Tools (can) support the process to multiply efficiency but do not solve the core goals and problemsLike the author of the comment said, the details of how you execute ""agile"" is where things get bumpy for teams."
Why do developers at Google consider Agile development to be nonsense?,streetcat1,"on Aug 3, 2019","The problem with agile is that it is a greedy algorithm. It can lead you to local optima. 
Usually this is not an issue if you are doing contract work,However, if you try to create a product in a market with competition, a non agile competitor can reach a global optima (for example Apple vs MS in mobile phones), and than you will lose the market (and sometime your future)."
Why do developers at Google consider Agile development to be nonsense?,tootie,"on Aug 3, 2019",I would speculate that this philosophy is so far removed from the customer that it's the reason they deliver so many consumer-facing duds and exhibit a completely schizophrenic product roadmap in so many verticals.Amazon is relentlessly customer focussed and is now a veritable hit factory And mostly in industries that were already seen as mature.
Why do developers at Google consider Agile development to be nonsense?,thewileyone,"on Aug 6, 2019","The worst part about Agile is that non-technical technical managers that I worked with, convinced the non-technical business managers that using Agile would lead to more and better innovation.  And that's how they got training and pseudo-experience to pad their resumes."
Why do developers at Google consider Agile development to be nonsense?,breck,"on Aug 3, 2019",> Simplicity - the art of maximizing the amount of work not done - is essential.Interesting definition of simplicity.
Why do developers at Google consider Agile development to be nonsense?,rightisleft,"on Aug 3, 2019",a friendly reminder that your company is not google... unless you are at google
Why do developers at Google consider Agile development to be nonsense?,amsheehan,"on Aug 3, 2019",We don't
Why do developers at Google consider Agile development to be nonsense?,m0zg,"on Aug 3, 2019",Nobody can explain it better than Yegge: https://steve-yegge.blogspot.com/2006/10/egomania-itself.htm...Worth a read or two if you want to be cured of the Agile affliction.
Why do developers at Google consider Agile development to be nonsense?,cyknus,"on Aug 3, 2019",">I would caution against trying to paint ""developers at Google"" using broad strokes."
Why do developers at Google consider Agile development to be nonsense?,malvosenior,"on Aug 3, 2019","There's a lot of irony in saying that about ""developers at Google"" and then immediately turning around and classifying everyone else as ""the masses"". Talk about broad strokes!"
Why do developers at Google consider Agile development to be nonsense?,jsolson,"on Aug 3, 2019","Beyond the literal fact that ""everyone"" is undeniably a giant mass of people, I suspect this term was intended to mean ""to consumers"", particularly given that the following example calls out enterprises.Developing for a small but demanding set of enterprise customers with concrete (but sometimes arcane) requirements is a very different problem from developing for consumer markets."
Why do developers at Google consider Agile development to be nonsense?,wutbrodo,"on Aug 3, 2019","Can you elaborate? I'm not sure I see any connection between generalizing about every member of a group, and using the term masses."
Why do developers at Google consider Agile development to be nonsense?,tomc1985,"on Aug 3, 2019",It's an overzealous interpretation of a common manner of speech. Muckrakers...
Why do developers at Google consider Agile development to be nonsense?,empath75,"on Aug 3, 2019",That’s not a derogatory term.
Why do developers at Google consider Agile development to be nonsense?,wutbrodo,"on Aug 3, 2019","> If treating a large group as a unified actor is improper, then giving another group another label and doing the same thing...because it's that group is in a different classification, is also improper.I think this is the logical leap that people aren't understanding. Generalizing means assuming things about individuals based on their group membership: OP wasn't saying it's a moral failing, but that it leads to inaccurate assumptions when applied to the heterogenous group in question.What's the analogy to using the term ""the masses""?"
Why do developers at Google consider Agile development to be nonsense?,caconym_,"on Aug 3, 2019","Is ""the masses"" offensive?"
Why do developers at Google consider Agile development to be nonsense?,solidasparagus,"on Aug 3, 2019","It's a phrase that tends to be used by people who consider themselves superior to 'the masses'. The phrase refers specifically to the lower-classes or those outside of elite circles[1]. Combined with Google's reputation of quiet arrogance[2], it's a phrase that I would have avoided.[1] Pick a dictionary and you will find references to lower-classes, the not-elite or the common people. https://www.merriam-webster.com/dictionary/the%20masses https://en.wiktionary.org/wiki/masses#English https://www.vocabulary.com/dictionary/masses[2] Put in to words nicely here https://medium.com/@steve.yegge/why-i-left-google-to-join-gr..., but you can feel it in many of Google's products where they make all the major decisions because they don't believe users are as capable of making good decisions as Googlers."
Why do developers at Google consider Agile development to be nonsense?,tomc1985,"on Aug 3, 2019","You should probably chill with that. It's used by all sorts of people and does not reflect their feelings towards ""the masses"""
Why do developers at Google consider Agile development to be nonsense?,will4274,"on Aug 3, 2019","No, but some people are sensitive. I suspect most Google developers consider themselves part of ""the masses"""
Why do developers at Google consider Agile development to be nonsense?,mnd999,"on Aug 3, 2019",I’m not sure that’s true
Why do developers at Google consider Agile development to be nonsense?,yRetsyM,"on Aug 3, 2019","I read the masses as anyone but he development team. Who's to say that the masses doesn't mean Googlers? It wasn't categorising anyone aside from being ""everyone else"" as I read it"
Why do developers at Google consider Agile development to be nonsense?,Udik,"on Aug 3, 2019","Who said that Googlers are not part of those ""masses""? Surely they enjoy products from their company as anybody else?And then, of course, nobody said you're part of those masses anyway. Maybe you're not. Do you enjoy Google product X as other hundreds of million do? Then you're part of the mass that enjoys it. Otherwise you are part of the mass that doesn't."
Why do developers at Google consider Agile development to be nonsense?,tomc1985,"on Aug 3, 2019","In your negative case you're using modifier words to change the meaning of ""masses"". Besides, why be part of the PC police??"
Why do developers at Google consider Agile development to be nonsense?,tom_,"on Aug 3, 2019",Another way of putting it: words have connotations as well as meanings.People do sometimes seem to forget this! - so it's good to have a reminder.
Why do developers at Google consider Agile development to be nonsense?,solidasparagus,"on Aug 14, 2019",Well put
Why do developers at Google consider Agile development to be nonsense?,skinnymuch,"on Aug 3, 2019",Saying unwashed before most words standing in for people would likely not be a nice thing to say. So of course unwashed masses isn’t a good phrase. Nor is “unwashed people”
Why do developers at Google consider Agile development to be nonsense?,ben509,"on Aug 3, 2019","When human beings are part of an association that is verifiably elite, it is quite common for them to have elitist attitudes."
Why do developers at Google consider Agile development to be nonsense?,oblio,"on Aug 3, 2019","Elite in compensation, true.But is the average Googler contributing more to humanity than the average teacher? I'm not so sure."
Why do developers at Google consider Agile development to be nonsense?,dodobirdlord,"on Aug 3, 2019","From the 2018 shareholder's letter, Google created $335 billion in economic activity in 2018.[0] From the 2019 Q2 financial results, Google has 107,646 employees. By raw division the average Google employee creates $3,112,052 in economic global activity each year.[0] https://abc.xyz/investor/founders-letters/2018/
[1] https://abc.xyz/investor/static/pdf/2019Q2_alphabet_earnings..."
Why do developers at Google consider Agile development to be nonsense?,tomp,"on Aug 3, 2019","Sure but most of that ""economic activity"" is essentially spam, so I'm not sure it's a net positive..."
Why do developers at Google consider Agile development to be nonsense?,BurningFrog,"on Aug 3, 2019","One reason you're not sure is that it's impossible to measure, and therefore to know. It's even impossible to know what the question really means."
Why do developers at Google consider Agile development to be nonsense?,sorokod,"on Aug 3, 2019","I know a nurse, occasionally she brings people back to life, it is just a part of her job - is she contributing to humanity more or less then an average Googler?"
Why do developers at Google consider Agile development to be nonsense?,kortilla,"on Aug 3, 2019",Which elite verifier verified that?
Why do developers at Google consider Agile development to be nonsense?,ben509,"on Aug 3, 2019","Maybe ""it's natural"" would have been more accurate than ""it's quite common""; I was trying to word it to avoid it being read as claiming Google broadly is elitist.But, no, I can't cite a study, it's a pattern I've observed at range of places."
Why do developers at Google consider Agile development to be nonsense?,jvolkman,"on Aug 3, 2019","There are over 100,000 googlers, so both ""yes"" and ""no"" are likely valid answers."
Why do developers at Google consider Agile development to be nonsense?,anoncareer0212,"on Aug 3, 2019","I went from waiter -> self-educated SW engineer founding own startup -> sold startup -> Google. (Been on 3 teams, all of which shipped to match HW deadlines)The only thing noteworthy about Google is _there is no process_.Hell, just last week, a coworker and I finally resolved a year-long difference of opinion when it clicked for him that there wasn't a defined system, insomuch as there was one I was defining it, and I was thrilled to have someone else help with that."
Why do developers at Google consider Agile development to be nonsense?,6thaccount2,"on Aug 3, 2019",Can you explain that better? Basically in a nutshell they don't have worthless agile processes?
Why do developers at Google consider Agile development to be nonsense?,anoncareer0212,"on Aug 3, 2019","Overall picture: Google recognizes it's a large company that has an extreme diversity of teams with idiosyncratic goals and personalities, and doesn't prescribe _anything_Dollars to doughnuts, there's multiple teams doing extremely prescriptive Agile, but I've never seen one in 3 years in a 2,000 employee office.By far the most organized team I've been on merely kept track of bugs using an internal web app that renders bugs from the internal bug tracker as post-it notes arranged in columns, with each column representing a bug status (ex. assigned/started work/code in review/done).This alone caused a ton of grumbling, meanwhile I'm sitting there gobsmacked that Scrum and Agile aren't proper nouns that everyone has highly detailed opinions on."
Why do developers at Google consider Agile development to be nonsense?,aurelianito,"on Aug 3, 2019",The team you are referring to is highly likely to be using kanban. Kanban is the destiny of agile.
Why do developers at Google consider Agile development to be nonsense?,anoncareer0212,"on Aug 3, 2019","Nailed it, that's the name of the internal web app :) I always hesitate to call it Kanban because my relative that's a university professor is obsessed with Proper Kanban and it's nigh-unrecognizable to me beyond the post-it notes and status"
Why do developers at Google consider Agile development to be nonsense?,walshemj,"on Aug 3, 2019",Using prescriptive  and agile means you are not actually doing  Agile DSDM RAD or what have you in any way.
Why do developers at Google consider Agile development to be nonsense?,username90,"on Aug 3, 2019","The teams I have worked on at Google have no process on a team level. We just copied the mandatory things like code reviews and automated testing, other than that people just figure out what to do on their own. The main motivation people have to work is so they have something nice to put in their biannual performance evaluation, so everyone is very eager to try to solve problems. Of course if you bite off more than you can chew and totally fail then you have nothing, so people try to pick sensible projects which will actually succeed."
Why do developers at Google consider Agile development to be nonsense?,futureastronaut,"on Aug 3, 2019",Did you read the Quora answer or are you replying to the title?
Why do developers at Google consider Agile development to be nonsense?,anonygler,"on Aug 3, 2019","GSuite does an incredible amount of talking to customers, because it’s easy to know who your target customer is. But who does a Billion-user consumer app talk to? For that we rely on internal testing and reporting feedback from family/friends.People do read your in product feedback, btw. But it takes quarters for anyone to triage and act on it."
Agile's early evangelists wouldn't mind watching Agile die,plughs,"on April 24, 2020","My first team, some 14 years ago, had the best experience with Agile.  What made this work> During planning, everyone understood that the estimates were _estimates_.  Tasks could take longer or shorter, that was OK and even expected.  The goal was to improve velocity, not to accomplish every story, every time.> Engineers felt comfortable taking stories in areas they knew nothing about. A stated goal was that every engineer understand every piece of the project.> Standups were team only. Engineers felt comfortable saying they got stuck or needed help or got lost in a rathole and didn't make the progress they hoped.> Demos were important so that the team and the clients could understand what had changed and what new features were available.But it quickly got lost - managers and PMs and Directors got involved and Jira boards became published for all to see. (In the beginning it was whiteboards and sticky note).  Standups and Demos were all about self-promotion.  No one ever wanted to take on a task they weren't 100% certain they could do.  If a task was 3 point it needed to be done in 3 days or there would be questions.When I left the last company it had gotten outrageous. Every task should be completed in three days and in production in five days - and if not that team was Doing Something Wrong.( We were told that this was standard FAANG practice, I have no idea how true that was )What happened was what you'd expect - shortcuts, tech debt, unit tests cynically design to pass and meet code coverage expectations instead of actually usefully testing.The reality is that any process is going to fail one senior leadership decides it's a way to evaluate engineers, not create a good product."
Agile's early evangelists wouldn't mind watching Agile die,marktangotango,"on April 24, 2020","A looong time ago I went through Army basic training. As a BS degree holder I was given the job of ""book man"". This meant I carried around the platoon training book and carried placards to put in signs at various training locations that told what battalion, company, and platoon we were so if anyone driving by a gun range, motor pool, or classroom could look and see oh that's 1st platoon, C company, 1st training battalion.I've come to believe that that main driver for Agile adoption has come to be something similar. Making visible to outsiders what software development teams are doing, and making progress (or it's lack) visible to management. I thinks that's a completely reasonable expectation. Businesses are paying exorbitant salaries and providing ping pong tables, why shouldn't they have visibility into what's being done?Where it becomes toxic is in areas this posts parent indicates; posturing, one upsmanship, pressure to perform. Effective teams need ""safe spaces"" to learn, discover, try and fail. Agile isn't that anymore. Hasn't been for a long time."
Agile's early evangelists wouldn't mind watching Agile die,smadge,"on April 24, 2020",> Businesses are paying exorbitant salaries and providing ping pong tablesBusinesses are paying market rate salaries to employees who generate them revenue. If anything engineers should be the ones questioning the exorbitant compensation and perks at the top of the org structure.> why shouldn't they have visibility into what's being done?Because they shouldn't be micromanaging. They should be setting high level goals and expectations and giving teams autonomy and trust. Intrusive surveillance and low level metrics create perverse incentives that detract from those high level goals.
Agile's early evangelists wouldn't mind watching Agile die,Nerevarine76,"on April 25, 2020",> Businesses are paying market rates salaries to employees who generate them revenue.You use this argument to defend engineers but then question c—level executive salaries. The exact same principles apply but at a multiplicative level.
Agile's early evangelists wouldn't mind watching Agile die,goatinaboat,"on April 25, 2020","You use this argument to defend engineers but then question c—level executive salaries. The exact same principles apply but at a multiplicative levelThat’s simply not true, workers and managers are qualitatively different. There are no shortage of examples of managers of companies losing money and marketshare who nevertheless are paid bonuses every year then leave with a golden parachute."
Agile's early evangelists wouldn't mind watching Agile die,antonvs,"on April 25, 2020","> but at a multiplicative level.Why? That multiplier is often what's at issue, and why ""the exact same principles"" don't apply."
Agile's early evangelists wouldn't mind watching Agile die,tootie,"on April 25, 2020","Trust, but verify. I work on the services side and we frequently are in the position begging for more surveillance. If you are really so confident in the speed and quality of your delivery (my org borders on cocky) then the biggest risk we face is being misaligned to client expectations due to poor communication. We always ask for their explicit sign off on story criteria and feedback on features as soon as they are finished to make sure we're aligned and let them see exactly what pace we're setting."
Agile's early evangelists wouldn't mind watching Agile die,frereubu,"on April 25, 2020","I see what you're getting at, but the Russian proverb that Reagan made famous - ""Trust, but verify"" https://en.wikipedia.org/wiki/Trust,_but_verify - raises a wry smile each time I read it because it's such an obvious oxymoron. You either trust, or you verify.There's an earlier version attributed to Mohammed - ""Trust in God. But tie your camel first."" - so the sentiment has been around for a while.It feels like it's just a way of reducing cognitive dissonance, which is useful I suppose, but I wish people wouldn't use it because it allows a feeling of resolution without a real resolution of the tension between trusting and verifying."
Agile's early evangelists wouldn't mind watching Agile die,bananamerica,"on April 25, 2020","I don’t think neither of these sayings are in themselves contradictory. The first could be translated as “I trust your work ethics, but I also know that your human nature will lead you to perform better under supervision”. The second basically says: “God has my back on a number of things, but She also expects me to do my part”."
Agile's early evangelists wouldn't mind watching Agile die,tootie,"on April 25, 2020","I work in services, so for us it's like ""Trust, but write explicit assumptions and disclaimers into the contract"". It's like when you commit to paying $2M for a custom piece of software, you expect to pay the fee and get the product. Not spy on your vendor then sue for your money back. But you have to prepared to protect your investment."
Agile's early evangelists wouldn't mind watching Agile die,sorokod,"on April 25, 2020",And before that God helps those who help themselveshttps://en.m.wikipedia.org/wiki/God_helps_those_who_help_the...
Agile's early evangelists wouldn't mind watching Agile die,rrrrrrrrrrrryan,"on April 25, 2020","But how can they set goals without any visibility into what a team can typically accomplish in a given time period? How can they identify better performers and worse performers?I'm not saying agile is the right solution, (it probably isn't), but expecting higher-ups to fund a black-box team is kind of naive."
Agile's early evangelists wouldn't mind watching Agile die,kyuudou,"on April 25, 2020","Ye olde SV Scrum clip[1]""This just became a JOB..."" -Gilfoyle[1]https://www.youtube.com/watch?v=oyVksFviJVE S01E05 Scrum sceneI do like Agile, it's the typical problem of managers misusing it to micromanage, engage in useless metrics etc."
Agile's early evangelists wouldn't mind watching Agile die,jiggawatts,"on April 25, 2020","Measure the deliverable, not the deliverers.Reporting on random internal stuff instead of the actual problem at hand is the #1 problem I see with corporate reporting, everywhere. I see various combinations of people wasting time measuring:1) The thing that is easy to measure, typically money or time.2) The things they ""understand"", typically people for HR, compliance for legal, money for finance, etc...3) The things their manager wants to know, no matter how irrelevant that is to executing their own job well.Meanwhile what they should be measuring is the qualities of the end-product or the overall external customer end result.It doesn't matter one iota if Bob the Developer Guy missed an internal 3-day deadline that John the Manager made up on the spot if the end product is a winner in the market and makes the users ecstatically happy to part with their money.This happens everywhere, with everybody. For an IT-centric example, the common one I see is:Helpdesk: ""The users are complaining that the app is slow""Admins: ""The load is only 10%, but fine, we'll add more capacity!""Helpdesk: ""The app is still slow!""Admins: ""The load is only 5%! They should have no reason to complain!""Do you see the issue? No, seriously: do you? Because practically nobody does, in my experience. Take a minute.What happened here is that the admins measured the thing that is easy for them to measure: the load. There's a cute little bar graph in VMware, or a chart in their network appliance, or whatever. What they should have been measuring is latency from the end-user perspective, but that's hard to measure and practically no product tells you this number out of the box. So their entire process, their reporting, their troubleshooting, their forms, requests, everything becomes focused on the thing that they can see and control. Even if it's pointless, ineffective, and basically a waste of everyone's time and effort.This happens with developers in exactly the same manner. Software quality is stupid hard to measure. Long term supportability is borderline impossible to measure without a time machine. Technical debt is hard to even explain to a manager, let alone keep tabs on in terms of numbers. So what's easy to measure? Time! Deadlines, sprints, release dates, etc... That's super easy.That's why inevitably the unimportant internal time metrics become critical to everybody, but the actually important metrics aren't even measured and become invisible to management until it's far too late."
Agile's early evangelists wouldn't mind watching Agile die,brians,"on April 25, 2020","As a manager, I want to measure leading indicators of success and failure. Absolutely, feedback control based on the real output is important. I must measure that!  But I’m always looking for ways to predict that, so I can steer more gently. What’s a leading indicator of a crisis?  A late team struggling to make a deadline. What’s a leading indicator of that?  Mismatch between estimates and performance. I need to know about bad point estimates because if I don’t fix it—I mean fix the PM’s misalignment—they’re going to push the team into something dangerous."
Agile's early evangelists wouldn't mind watching Agile die,quanticle,"on April 25, 2020","The problem is that these ""leading indicators of success and failure"" aren't. A late team struggling to meet a deadline might be a sign of imminent failure, or it might the team working hard to do something that is genuinely difficult to do.The core problem with Agile (most forms of software management) is that it massively overweights ""first mover"" advantage. I keep hearing, as a justification of agile, that software needs to be delivered quickly so that the company can go to market first, and gain marketshare while its competitors are still floundering. But, in practice, that's hardly ever true. I can't name a single product that succeeded solely because it was on the market first. I can name many products that were first to market and failed because they were clunky and difficult to use.Heck, Apple's entire business model consists of being second to market with a product that is more polished and easier to use than its competition.Yes, if a developer or team is well and truly stuck (as in spinning their wheels on the same problem, week after week), that's a problem. But you don't need Agile to tell you that. A simple weekly status meeting with incremental demos is sufficient. The only thing Agile does is create a bunch of graphs that allow management to comfort themselves with ""story points"" and ""velocity"" so that they don't have to confront the hard reality that they have no idea what it is they want to build."
Agile's early evangelists wouldn't mind watching Agile die,iovrthoughtthis,"on April 25, 2020","What about maintaining an environment where the team felt safe to communicate to the pm that there was something wrong?And for the pm to feel safe enough to communicate to you something is wrong.This feels like a Taylorism. Knowledge work isn’t factory work.I totally understand keeping tabs on delivery speed to enable the team to benchmark themselves but the act of identifying a problem from that (if there is one) should be the teams responsibility imo.As a manager, my job is to enable other people to do their job the best they can."
Agile's early evangelists wouldn't mind watching Agile die,parasubvert,"on April 25, 2020","Part of the reason that DevOps culture became a professional movement was to treat both as an end-to-end problem.Which stops misunderstandings like throwing the code to “Ops” and expecting the VMware admin to understand how an app behaves.User response time is a fairly simple metric to measure if you’re a developer.  They should expose that, and other metrics, that the customer values.This is one of the reason I’ve enjoyed some “true” agile teams with a strong product owner: they encourage an end-to-end focus on outcomes."
Agile's early evangelists wouldn't mind watching Agile die,stainforth,"on April 25, 2020","I feel like Jonathan Blow's jai language looks to do things like this as part of the language, at least to the developer."
Agile's early evangelists wouldn't mind watching Agile die,jimmySixDOF,"on April 25, 2020","""You can't manage what you don't measure""vs.""Not everything that can be counted counts, and not everything that counts can be counted"""
Agile's early evangelists wouldn't mind watching Agile die,lukevdp,"on April 25, 2020",I think both statements are true.
Agile's early evangelists wouldn't mind watching Agile die,closeparen,"on April 25, 2020","People manage things using their judgement and qualitative observations, all the time. We can accuse them of bias, but that has to be weighed against the fidelity of the metrics."
Agile's early evangelists wouldn't mind watching Agile die,freshhawk,"on April 25, 2020","This is a good breakdown of this really common dynamic.It is recognizable to many people, some of whom use it for their benefit, which can be very effective. When I learned that last fact a lot of things made more sense."
Agile's early evangelists wouldn't mind watching Agile die,nine_k,"on April 25, 2020",This makes important points.But time and money are the things by which companies live and die. Not keeping tabs on them is suicidal.OTOH measuring time and money consumption of some technical internal steps is just uninformative.
Agile's early evangelists wouldn't mind watching Agile die,jiggawatts,"on April 25, 2020","> It’s not really clear what any sysadmin can doThat's not true. It's just that most sysadmins don't bother to upskill to find out what they can and should be doing.> painfully extracting the details from the userAsking users for any information is a recipe for disaster. Much like witnesses to a murder that can't agree on the most basic details, users inevitably conflate totally unrelated things. E.g.:""Citrix is slow?""""Okay, how so... are button presses slow to respond to a click?""""I couldn't log on. Something to do with my password. It's slow.""""ಠ_ಠ""So don't ask. Don't rely on your users at all. Build synthetic transaction tests that act like users. Measure end-to-end latency. Sit down with them and watch them work. Don't rely on their verbal feedback, use your own eyes. Use your tools. Measure. Then measure some more.Conversely, capacity metrics are largely irrelevant in the era of 10 Gbps networks and 64-core server CPUs. Focus on latency. Look for delays. Timeouts. Deadlocks. Firewall packet drops. That kind of thing.> only to find nothing is wrong. Every day, forever.Of course something is wrong! Something is practically always wrong, that's why the users are complaining!Here's a fun rule of thumb for you: For every 1 user that complained, there are between 100 and 1,000 that had the same issue but shrugged it off and didn't call support.I got that from a scientific paper. I couldn't believe it, so I measured it in a large 10K user system. The error-to-call ratio was about 500-800 in ours. It blew my mind, and it blew the minds of a lot of people in IT management.We started gathering every error, tracking every possible latency measurement we could, and it was a horror show. 30K app crashes per day. I shit you not. That's about 3 per user per day! Data loss. Hangs. Login failure rate of nearly 50%.It tooks months to triage the issues, push patches, and apply workarounds. We had to rewrite several components. We eventually got the errors down to less than a hundred per day. Believe me, that was a real achievement.Users were so happy they were begging to be migrated to the new system instead of pushing back and refusing to upgrade.If the users are complaining, something is probably very wrong and you just don't know it. Go look."
Agile's early evangelists wouldn't mind watching Agile die,goatinaboat,"on April 25, 2020","For every 1 user that complained, there are between 100 and 1,000 that had the same issue but shrugged it off and didn't call support.I wish I had your user community. Here in Wales the ratio is reversed, I guarantee it."
Agile's early evangelists wouldn't mind watching Agile die,closeparen,"on April 26, 2020","By assigning problems to specific responsible individuals, and noticing the existence / quality of the solutions they produce? If anything, Agile obscures individual performance, in that it treats everyone as fungible and every part of the system a commons."
Agile's early evangelists wouldn't mind watching Agile die,wmeredith,"on April 26, 2020","Eh, trust is earned (in both directions of course). I’ve been badly burned by devs and managers alike over the course of my career."
Agile's early evangelists wouldn't mind watching Agile die,jjjensen90,"on April 24, 2020","Software engineering salaries are  not exorbitant. In fact, engineers may be consistently underpaid for the value delivered. A small team can create millions for executives and shareholders. Ping pong tables etc are a sad tool for management to placate the people who drive the company value up, to keep them from unionizing and realizing the power they hold."
Agile's early evangelists wouldn't mind watching Agile die,goatinaboat,"on April 25, 2020","Ping pong tables etc are a sad tool for management to placate the people who drive the company value upNowhere is this more apparent than the so-called Hackathon, where you do days of overtime in exchange for a few slices of pizza and worse, are expected to be grateful to management for providing the opportunity to do so! Nothing infantilises the profession more."
Agile's early evangelists wouldn't mind watching Agile die,heisenbit,"on April 25, 2020","Most software projects fail and do not deliver value. Code is not delivered, code is not taken into use, code is not used much. Software is capital intensive and risky. Code can be more valuable than gold but its value is determined by many factors other than skill and effort of the developer."
Agile's early evangelists wouldn't mind watching Agile die,theK,"on April 26, 2020","True, but you can’t figure out what product will fly and which not unless you actually build it. So you are stuck ;-)Granted, one can filter out 99% of product ideas on a whiteboard but the remaining 1% is still enormously huge. And that 1% is actually the stuff that nowadays gets started."
Agile's early evangelists wouldn't mind watching Agile die,Jasper_,"on April 24, 2020","> Software engineering salaries are not exorbitant. In fact, engineers may be consistently underpaid for the value delivered.What about the value of those who cooked your lunch? Without them, software engineers would starve and die, so that makes them have far more value, no? Do you think that food service workers are also underpaid?"
Agile's early evangelists wouldn't mind watching Agile die,kragen,"on April 25, 2020","Consider a food service worker in Facebook's cafeteria. In an hour, perhaps they make 30 lunches, which in the best case delight 60 people for an hour: 60 person-hours of delight for an hour of work.Now contrast a Facebook programmer, who in one hour might be able to fix a bug that has been annoying 0.1% of Facebook's 2.5 billion users, causing them to be frustrated rather than delighted for, say, two minutes a day, for the next three years before the feature gets rewritten. Maybe that sounds trivial, but if so, shut up and multiply: 2.5 million hours of delight per month for 36 months gives you 90 million hours of delight, for the same hour of work.So, at a rough estimate, then, the gourmet hacker is 1.5 million times as productive as the gourmet chef. Maybe if I've been overoptimistic it's only a factor of 100,000 or 10,000, but it's huge.  And that's how Facebook can be profitable at all despite all the shitty and stupid things they do: capturing even a tiny fraction of the value they produce makes them wildly profitable, as long as they can successfully externalize the harm they do. Some software companies don't even need to externalize their damages.And that's why software is eating the world.That isn't the only reason hackers get paid more than foodservice workers.  No business is going to pay more for its inputs than it is forced to; that reduces its profits. Hackers also enjoy a dramatically better bargaining position than most foodservice workers, because a hacker with US$3000 has a better BATNA than a cook with $3000: the cook is going to be trying to sell $3 burritos out of an Igloo ice chest outside of concerts while the hacker can buy a laptop, bring up a couple of VPSes on AWS, and spend a few weeks putting together a useful web service, maybe get a few dozen to a few thousand users, but at any rate can easily scale to hundreds of thousands of users. The cook is dependent on someone investing a few hundred thousand dollars (in the US) to have top-quality tools and a good location. Difficult to do yourself unless your family is rich or you graduated from the Cordon Bleu.This is purely factual reasoning, so it cannot answer normative questions like whether it would be ethically better to pay hackers more or less.  It only purports to explain the chains of cause and effect in the world that give rise to that situation, and illuminate the other possibilities inherent in the current state of affairs, and how they might change."
Agile's early evangelists wouldn't mind watching Agile die,tomc1985,"on April 25, 2020","The cook trying to sell $3 burritos ""out of an igloo chest"" at a concert is a lot less favorable an example of the successful, entrepreneurial, optimal software engineer that he's compared against. The cook could also start a successful youtube channel and turn into the next cooking superstar -- and you could argue that, in ideal circumstances and optimal execution, their actions have just as much or more impact as the software engineer. But few know and can execute their optimnal path and thus their (our) reality is much more mundane.(Also I don't know where you're from that burritos might be sold out of an igloo chest, that just sounds gross)"
Agile's early evangelists wouldn't mind watching Agile die,kragen,"on April 25, 2020","There's a difference between working in foodservice and making a TV show about it. I was talking about foodservice workers. You can probably build a successful cooking channel without much capital investment, but not a successful restaurant. Starting a successful restaurant requires talent°, equipment, and land; starting a successful website only requires talent.That's what FAANG are competing against when they hire hackers. And that's still true even though most hackers didn't apply to YC last fall, because they can sign on as employee #2 or employee #20 with someone who did. Because the other factors of production are not scarce enough to matter, jobs for hackers are abundant in a way that jobs for chefs are not.  Patents, noncompetes, H1Bs, the anti-poaching conspiracy, and API keys are efforts to change that, but mostly they haven't been very effective.(What makes you think the cook is a ""he""? Both of the people I was basing that sketch on were women.)° By ""talent"" I mean ""strenuous and persistent effort by highly skilled people"", not some kind of inborn genius.  You can't start a business by sitting around thinking deep thoughts; you have to work hard. But for a restaurant, working hard isn't nearly enough, and that puts foodservice talent at more of a negotiating disadvantage with respect to investors."
Agile's early evangelists wouldn't mind watching Agile die,artsyca,"on April 25, 2020",I'm calling bullshit on this because without the cafeteria worker the whole place would be a cockroach infested dump with moldy lunches in the fridgeIt's a fallacy to view anyone's work as less valuable when contributing to the whole -- everyone's work is essential in the ecosystem even if all they're doing is unclogging the toilets of all these knowledge workers toxic turds
Agile's early evangelists wouldn't mind watching Agile die,kragen,"on April 26, 2020",You may have replied to the wrong comment
Agile's early evangelists wouldn't mind watching Agile die,artsyca,"on April 26, 2020",The mythical person-delight-hour
Agile's early evangelists wouldn't mind watching Agile die,jodrellblank,"on April 25, 2020","> Without them, software engineers would starve and dieSoftware engineers are perfectly well capable of making a sandwich themselves, bringing a packed lunch, or surviving on an empty stomach for a few hours until they get home. Not to mention buying lunch from somewhere else or ordering delivery food if one cafe is gone.Unless you're positing a world where all food production, farming, fishing, etc. has vanished, then software engineers are in no worse a position than chefs, cooks, baristas, grocery store employees, or anyone else."
Agile's early evangelists wouldn't mind watching Agile die,Viliam1234,"on April 25, 2020","> Software engineers are perfectly well capable of making a sandwich themselvesI have an idea! Let's call it DevFood, and make it a requirement for everyone.I mean, we already expect the software engineers to analyze the requirements, so we don't have to hire analysts; we expect them to test their products, so we don't have to hire testers; and we expect them to do the operations, so we do not have to hire an administrator. So tell me, why do we have to waste money on an extra guy who makes the lunch? DevFood is the future of software development!"
Agile's early evangelists wouldn't mind watching Agile die,Tomis02,"on April 26, 2020","> Software engineers are perfectly well capable of making a sandwich themselvesTheir productivity would drop a bit, though. The idea is that people making food enable developers to deliver their best work."
Agile's early evangelists wouldn't mind watching Agile die,dv_dt,"on April 24, 2020",I think both engineers and food service workers are generally underpaid.
Agile's early evangelists wouldn't mind watching Agile die,0xdeadbeefbabe,"on April 25, 2020",Some engineers go around making APIs that are as fun (and slow) as doing taxes. I hope they get paid.
Agile's early evangelists wouldn't mind watching Agile die,theK,"on April 26, 2020",People are generally capable of cooking to nourish themselves. Learning enough cooking to cook for yourself can be achieved in one afternoon. The foodworker employment market is completely based on convenience culture. The software engineering employment market is very different to that.
Agile's early evangelists wouldn't mind watching Agile die,pastacacioepepe,"on April 25, 2020",">Do you think that food service workers are also underpaid?Yes.>Without them, software engineers would starve and dieHave you ever cooked your lunch?"
Agile's early evangelists wouldn't mind watching Agile die,the_other,"on April 25, 2020",Definitely.
Agile's early evangelists wouldn't mind watching Agile die,Jasper_,"on April 24, 2020","When asking about the value that a certain occupation provides, I think it's fair to compare them to the rest of society and ask about the balance. I'm not bringing up the plight of other employees randomly to dismiss one argument, I'm asking for a defense of the stark difference in economic status."
Agile's early evangelists wouldn't mind watching Agile die,mcv,"on April 25, 2020","Sure, but don't just compare to people who are also underpaid. Also compare to management. In many companies, managers get paid a lot more than software developers. That's not necessarily fair."
Agile's early evangelists wouldn't mind watching Agile die,perl4ever,"on April 25, 2020","Right now a lot more meals than usual are being prepared at home, and a lot of people who had jobs doing that are out of work. On the other hand, essentially the entire accounting system for the state hardest hit by coronavirus is run by ""nonessential"" employees, because that is what we are calling people who can work from home.Right now, there are definitely lots of people who can't work from home that are enormously essential in the ordinary sense. For instance, say you have a plumbing emergency. But, you know, your unemployment check is pretty essential too."
Agile's early evangelists wouldn't mind watching Agile die,SethMurphy,"on April 25, 2020","The plumber example doesn't hold up here (https://www.contractormag.com/around-the-web/article/2112665...)As someone who had a plumbing emergency I can attest it was essential also. I can also say I am sure we would have been able to get the repair done regardless, as humans want to help (and make money).It is correct that those who are working remotely are no longer supporting the cooks, child care workers, etc ... while also having hardship due to the lack of these services. These hardships however are temporary. Our society can't really afford to live with these disparities. I spent a first career in the restaurant industry before learning to work with computers. I can say for certain in my case the first career was much harder and had much less rewards. However, I don't see eating out as essential, but a privilege. I am not sure how we walk back this system, but it seems the time has come that more people raise their own children and cook their own food regardless of their jobs."
Agile's early evangelists wouldn't mind watching Agile die,perl4ever,"on April 25, 2020","I can't figure out what you are trying to say, particularly about plumbers. You seem to be disagreeing with me about something, but your link supports them being essential, which is what I wrote.There is a division between people whose jobs are secure right now and those who are (or soon will be) out of work.There is also a division between people who can work remotely and people who have to be at a job site in person.My point, or one of them, is that these are independent of each other, so all together there are four types of people/jobs."
Agile's early evangelists wouldn't mind watching Agile die,SethMurphy,"on April 25, 2020","My apologies, I misinterpreted your remarks as saying plumbers were essential but not able to work. I was therefore defending plumbers necessity and showing their status based on it. Thank you for the clarification on your point for me.I do agree with you. Those that are able to work now are certainly lucky (as long as the work allow proper social distancing) whether remote or essential.My last point was on remote workers, especially those in tech which I am most familiar with, is that one should realize how pampered that role has become at the cost of others. Many of the new stresses those situations involve now with cooking and child care that was done by the service workers who are not essential and can not work remotely are the same stresses those service workers encounter all the time, not just in a pandemic situation. If one is able to work remotely now you should take this time to count your blessings and re-evaluate your own internal definition of struggle and what you are entitled to as part of society.Also, as you may have alluded too, remote does not necessarily mean job security, rather it could be quite the opposite in the long term. It is times like these I wish I was a plumber."
Agile's early evangelists wouldn't mind watching Agile die,perl4ever,"on April 26, 2020","Cooking at home is not stressful like working at a restaurant, come on."
Agile's early evangelists wouldn't mind watching Agile die,SethMurphy,"on April 26, 2020",My point was many lower wage workers can not afford the luxury of prepared meals or child care. I was in no way comparing cooking professionally to cooking domesticaly. As someone who worked at every job except baker in the food service industry for a decade and changed careers because of the stress I can not agree with you more. Restaurant work is hard and in my opinion underpaid.
Agile's early evangelists wouldn't mind watching Agile die,bb88,"on April 25, 2020","> this is not how prices are set.Right, CEO salaries skyrocket, not necessarily because of the value they create, but because they can get the board and stockholders to back them more than the people actually creating value in a company.They can do this in the form of stock buybacks, dividends, etc.The standard software engineer does not have the power to ""bribe"" the stockholders in that way."
Agile's early evangelists wouldn't mind watching Agile die,sizzle,"on April 25, 2020",The standard software engineer should wise up and start their own side company and sell it back to their previous employer.
Agile's early evangelists wouldn't mind watching Agile die,asiachick,"on April 25, 2020","I quit FAANG and started doing my own thing. I found I hated a ll the paperwork. Dealing with taxes, accounts receivable, accounts payable, business registration, finding clients, meeting with clients, networking for new work, unmovable deadlines, pressure, fears of disappointing a client or the client being late on payment or me being late on filing some form my government requires but I have no idea I need, or a million other things.I realized that some level of not getting 100% of the value i generate is worth it to have someone else deal with all that stuff.I'm not saying whether or not engineers are underpaid for the value they create but it's worth something > 0"
Agile's early evangelists wouldn't mind watching Agile die,Rury,"on April 25, 2020","May I ask which of that you found to be the most difficult?I've been thinking of going the same route, and I'm confident I can handle the paperwork and deliver, but it's the finding the clients part that worries me the most. Not sure if the problems I see are widespread enough to warrant founding a business and going through all that..."
Agile's early evangelists wouldn't mind watching Agile die,Nerevarine76,"on April 25, 2020","CEOs' decision making has far more impact on the revenue of a company than a single engineer, or many engineers. That's why the market rate is very high for them.If there were only a handful of qualified engineers available on the market, then they'd get paid CEO-like salaries due to the value they provide and being in high demand. But because there is a whole market of qualified engineers they get paid far less.It's pretty basic economics and doesn't have much to do with stock buybacks/dividends/etc... Regardless of the value of an individual position, wages will be lower or higher depending on the supply of an occupation. In the big picture engineers are very replaceable at market price compared to executives so their wages are reflective of that."
Agile's early evangelists wouldn't mind watching Agile die,Falkon1313,"on April 25, 2020","It may be more demand than supply.  Plenty of people would love to be CEOs, and have some ability to run a business and delegate, but you can only have one per company.  On the other hand, you can have many engineers.  If you could only have one engineer per company, their salaries would likely be much higher.This would be counter-intuitive, because low demand results in high salary, regardless of supply."
Agile's early evangelists wouldn't mind watching Agile die,amiga_500,"on April 25, 2020",No the problem is enclosure and land rents.https://i.redd.it/lnkq6l9zc0v41.jpg
Agile's early evangelists wouldn't mind watching Agile die,droopyEyelids,"on April 24, 2020","Not related to your main point, but would you reconsider calling them 'exorbitant salaries'?Engineering is one of the only professions that is paid commensurate to the value they provideCalling our salaries 'exorbitant' leaves you without superlatives left to describe executives that get paid thousands of times our wage, and at least they do work compared to the owners of capital who are 'paid' incredible money without doing any work at all.To call an engineer salary 'exorbitant' you must be comparing it to the salary of people who function as modern serfs, and are not paid commensurate with the value they provide, or even enough to live a safe and satisfied life. Being paid enough for modest freedom and security is not 'exorbitant' though- no matter what you're comparing it to."
Agile's early evangelists wouldn't mind watching Agile die,Avicebron,"on April 24, 2020",Outside of software the majority of American's function as modern serfs. I'm an engineer who doesn't work in software and live as a modern serf
Agile's early evangelists wouldn't mind watching Agile die,plughs,"on April 24, 2020","There are certainly good reasons to make a team's progress visible.  PMs/POs ( I'm never sure of the difference ) will want to know if a project can meet the release date.  They will want to know that the need-to-have features are being worked on before the nice-to-have.   I don't want to sat a team should work in total isolation.I can only say that IME a team is going to be a lot more productive if they are able to own their development process.  Good infrastructure, knowledgeable engineers, healthy relationships instead of competitive ones - that's what creates a highly productive team and highly productive engineers."
Agile's early evangelists wouldn't mind watching Agile die,lonelappde,"on April 24, 2020","> will want to know if a project can meet the release dateThe number one main headline  takeway axiom of Agile is that this question is completely banned.Agile is about delivering working software continuously, delivering whatever increment you get working at each timepoint, adapting to observed reality as it comes, and not having deadlines for specific features that might turn out to be impossible or harder than estimated."
Agile's early evangelists wouldn't mind watching Agile die,axlee,"on April 24, 2020","That question is banned until a board meeting comes up and your owners asks you ""What are your plans for the products the next quarter, misters CEO and CTO""?If you babble around saying plans and deadlines are for suckers and that things will happen when they will happen, I am not sure they will keep paying you and your team's salaries for long. This new contrarian cargo cult of waving away any kind of medium-term planning or estimation is hurting businesses as much, if not more, as when all projects were waterfalled and timeboxed to death.Yes, estimating is hard to get right. No, it does not mean we should simply get rid of it. Because engineers do not live in a little bubble of code: there is usually a whole company around them who need insight into what is getting built and when they can expect it. And anybody who believes that asking this question is too much or intrusive has never worked in a non-engineering position, or think of themself too much."
Agile's early evangelists wouldn't mind watching Agile die,BigJono,"on April 25, 2020","The mistake here is making your measurements too granular. What happens is the board meets, long and medium term plans are made, etc etc. That's all good. Then what happens is every level of management calls in the banners and forces them to pitch how they align their teams and projects to whatever was pitched one level up. Somewhere along the process, you hit the point where planning stops being a positive and starts being a liability.This process never stops, until you have some toothless PM slave driving devs because they're 8 levels removed from the strategic planning and they've pitched a 40-point/week development rate to their boss because they don't have enough information to do anything else. Anybody that tries to break the pattern is going to find themselves on the receiving end of an unfavourable performance review in any big business I've ever worked for.There's a happy middle ground somewhere, where devs are given plenty of space to work but their output is still tied to the business's long term objectives. How you reliably reach that middle ground is probably a 8/9/10 figure question depending on the business."
Agile's early evangelists wouldn't mind watching Agile die,satyrnein,"on April 24, 2020","That question is not banned; story points and velocity measurements are mainstream agile, right?"
Agile's early evangelists wouldn't mind watching Agile die,davidwf,"on April 24, 2020","""Banned"" may not be the right word, but I do agree it's the wrong question. Story points and velocity measurements are about giving a reasonable guess about what's ""likely"" to be completed at any given point in time in the future, with bigger error bars the further out you look. Agile projects don't ""complete"" so much as a decision is made to release at a given point, and everyone is happier with agile in an environment where there's an expectation of multiple, continuous releases."
Agile's early evangelists wouldn't mind watching Agile die,loopz,"on April 24, 2020","Except they are used wrong and not required for agility. How many tasks per time is an observation, a hypothesis about usefulness of projection. Story points? Waste."
Agile's early evangelists wouldn't mind watching Agile die,MattGaiser,"on April 24, 2020","> making progress (or it's lack) visible to management.The challenge is that management is only looking through a small window and everything from promotions to raises to favours are dished out based on that window.Anything not in view of that window immediately obviously becomes useless to one's advancement in a company, so the window better cover everything which matters and it usually doesn't."
Agile's early evangelists wouldn't mind watching Agile die,kubanczyk,"on April 24, 2020","""Advancement"" seems a big deal."
Agile's early evangelists wouldn't mind watching Agile die,sanderjd,"on April 24, 2020","It is reasonable but it is not necessarily the smartest way of going about things.The question of whom things are visible to is an important one. Your comment says ""management"", and yeah that's one common way of thinking about it. But managers are just individuals with their own motivations. It is really ""the business"" that wants visibility in order to best accomplish its goals. There is an assumption that ""management"" is better aligned with ""the business"" than the employees they are paying ""exorbitant"" salaries to. But that may or may not be true, managers are also just individuals with their own motivations. So to the extent that it is true that managers are better aligned with the business, why is that the case? I see a few things that trend in that direction: compensation that is more tied to the performance of the business (through bonuses or what have you), more visibility into the goals and reasoning for decisions being made by leadership, and a better grounding in the dynamics of the business (what is the strategy, how does its market work, how does it make money). The theory is that because of those things (and probably others I'm not thinking of), the managers are better suited to be representing the interests of the business, whereas the engineers are just tools those managers can use to further those interests.That is one way of doing it, probably the most common way, and it definitely seems like management visibility into work is extremely important in such a setup. But another way might be to align the engineers with the business in the same way managers are: pay bonuses based on the performance of the business, give them visibility into goals and decisions, teach them about the strategy of the business and the dynamics of how it makes money. That is, give the engineers ownership in the same way management has ownership, and trust them to make decisions that are in the interest of the business.To put this another way: if you trust managers to make decisions about trade-offs that are in the best interest of the business, why can't you trust engineers as well? Are the engineers dumber or shiftier than the managers such that they can't be trusted with this?"
Agile's early evangelists wouldn't mind watching Agile die,Tyrek,"on April 24, 2020","The general line of argument here is that the managers have spent time and effort as part of their professional development in order to understand the business, whereas the engineers have dedicated their time towards a more technical focus. This is reflected in how they spend their days - the manager spends time in meetings, whereas the engineer is spending time coding (very broad generalization)Assuming that neither side is doing significant amounts of extracurricular work to bridge the gap, it therefore follows that management understands the business better, because that is explicitly the purpose of their job.In a best case scenario, it makes sense to provide engineers etc. with the context to understand the decisions. On the flip side, business decisions are often made upon a huge heap of context that is generally invisible to the engineer (unless they spend an equal amount of time in building up their business knowledge, spending time in meetings, etc. - but at that point, they're basically a manager?)It's not to say that engineers can't develop the background, etc. to make the decisions, but that it's not exactly part of the expected job functions, and not something that's explicitly looked for as part of the recruitment process. In a sense, this is a bit of a tautological issue."
Agile's early evangelists wouldn't mind watching Agile die,sanderjd,"on April 25, 2020","Yep, I do think this specialization argument has a lot of merit, and re-reading my comment I think I downplayed it too much.What I'm saying is: what if we rethink specialization on this front? What if we expect it to be part of everyone's job to have deep understanding of and context on the business? Recognizing that there are significant efficiencies in specialization that we lose with this approach, maybe it still comes out ahead. Maybe the improvement in decision making outweighs the inefficiencies introduced by requiring everyone to be a businessperson.Personally, I think this is a really great way to run a business, if you can get broad buy in for it. The best places I've worked have been those that most closely approached this structure.But I will admit that this is biased by having a personality where I neither want to be ""just"" an engineer, nor give up engineering entirely in order to be a businessperson. I think lots of engineers don't want the business stuff to be part of their job, and I guess I can understand that, even if I lament it.One interesting question is: if everyone is acting with the business ownership mindset more commonly expected of managers, what are managers supposed to be doing? My answer is that front-line supervisor managers are there to support their reports, help them get and understand the information needed to make the right decisions. At the higher level, managers are there to make decisions on tough cross-team and cross-organizational trade-offs. At the very top level, they are there to set and communicate the overarching strategy of the business, which everyone else should be using to inform their own day to day decisions. I think there is plenty of that kind of work to be done, without expecting managers to be making the day to day decisions."
Agile's early evangelists wouldn't mind watching Agile die,codesuki,"on April 24, 2020","The articles on this blog argue exactly the same thing.
https://svpg.com/the-most-important-thing/
I really enjoy his articles, they taught me a lot."
Agile's early evangelists wouldn't mind watching Agile die,musicale,"on April 24, 2020","> give the engineers ownership in the same way management has ownership, and trust them to make decisions that are in the interest of the business.that's crazy talk ;-)"
Agile's early evangelists wouldn't mind watching Agile die,dsfdsfsdfasd,"on April 24, 2020","That's a really interesting idea that I never thought about. Seems to make a lot of sense.As far as business deserves to know what they are paying for, that is absolutely correct as well.The problem is that business is not paying for story points. They are paying for actual product and delivery. So when they measure output by story points, you end up with a situation where teams are trying to maximize story points delivery, etc. as opposed to actual product delivery."
Agile's early evangelists wouldn't mind watching Agile die,avereveard,"on April 24, 2020","> business is not paying for story points. They are paying for actual product and delivery.but that's the whole problem, if you constrain time, cost and result there's no any space left for agility.the point of agile is to maximize the value of what can be produced with a given team within a given project, you picked time and cost and you apply agile to emerge stories that are actually important to you and push back on the gold plating.if you have all three fixed, waterfall works just fine, actually even better."
Agile's early evangelists wouldn't mind watching Agile die,jay_kyburz,"on April 24, 2020","If outsiders want to see whats going on in an Agile team, all they need to do is run the ""working software"". They don't need to see all the ugly bits under the covers.Having working software is line two of the Manifesto. They can run it each week and see whats new.Even better, they can provide feedback on the working software and the team can then quickly respond to that feedback. In a week or two, when the outsider next looks at the working software they will see the software improved."
Agile's early evangelists wouldn't mind watching Agile die,artsyca,"on April 25, 2020",The quality of the software is the best metric of whether the process is working but management has no incentive to blame the process when it breaks down and every incentive to blame the people instead
Agile's early evangelists wouldn't mind watching Agile die,narag,"on April 24, 2020","Making visible to outsiders what software development teams are doing, and making progress (or it's lack) visible to management. I thinks that's a completely reasonable expectation.The devil is in the details and in this case literally because the granularity of progress is too fine-grained to be exposed away from its context. The project manager or whatever you call the nearest person with power over your time needs some leeway to organize, ask for some extra, compensate, forgive, and reward you, without higher powers micromanaging. Freedom is the premise of responsability.Absolute evil happens when customer demands access to hourly activity log for each developer in the (not on premises) project."
Agile's early evangelists wouldn't mind watching Agile die,kubanczyk,"on April 24, 2020",> Freedom is the premise of responsability.Is it? Maybe it's the opposite? Citation needed.
Agile's early evangelists wouldn't mind watching Agile die,choeger,"on April 24, 2020","> I thinks that's a completely reasonable expectation.Most often it is not. The problem is that management does not understand shit about software. And they usually don't care to learn about it. Hence this is about as effective as me asking for transparency regarding a COVID-19 vaccine. Yes, the practitioners could tell me they are in a phase-II trial. But to process that information fully and put it into context, I'd effectively need to study medicine."
Agile's early evangelists wouldn't mind watching Agile die,wpietri,"on April 24, 2020","Totally. ""When a measure becomes a target, it ceases to be a good measure. https://en.wikipedia.org/wiki/Goodhart%27s_lawAnd as you say, managerial involvement is the problem. Managers and execs mostly get paid to appear to be in control, so having the appearance of control is vital to them, even if that makes the results wildly worse."
Agile's early evangelists wouldn't mind watching Agile die,brightball,"on April 24, 2020",That is one of the all time best quotes that nobody is willing to hear.
Agile's early evangelists wouldn't mind watching Agile die,wpietri,"on April 24, 2020","Which reminds me of one of the other great quotes: ""It is difficult to get a man to understand something when his salary depends upon his not understanding it."""
Agile's early evangelists wouldn't mind watching Agile die,jay_kyburz,"on April 24, 2020","Actually, I think its dumb.A better saying would be, you should only use your target as a measure.If your target is working software, measure how well the software works."
Agile's early evangelists wouldn't mind watching Agile die,wpietri,"on April 25, 2020","I don't think you quite get this.In your imaginary case, what would your specific numerical measure be?"
Agile's early evangelists wouldn't mind watching Agile die,mavelikara,"on April 24, 2020","""We are not doing it like the FAANG companies"" is a refrain you get from engineers themselves too."
Agile's early evangelists wouldn't mind watching Agile die,goostavos,"on April 24, 2020","Surely uttered by people who haven't been at FAANG companies. It's not magical over here, people.I've legit sat through 1.5 hour long calls with 6 other devs so we could watch our manager type notes into a presentation that he'll give to a collection of other managers who will only be half-listening until it's their turn to be visible, and all because some other, more powerful manager, decided this was important for the org to do.It was layers of bureaucracy so deep I wasn't sure where I was anymore."
Agile's early evangelists wouldn't mind watching Agile die,Roboprog,"on April 24, 2020",Like measuring nitrogen content as a proxy for protein?
Agile's early evangelists wouldn't mind watching Agile die,dkbrk,"on April 24, 2020","Exactly, then unscrupulous people adulterate it with melamine to artificially boost measured protein."
Agile's early evangelists wouldn't mind watching Agile die,mcv,"on April 25, 2020","All of that is corruption of the idea. Probably common, but unnecessary and really needs to the fought against.The primary point of Agile is to empower developers. If management is determined to micromanage them anyway, then Agile is pointless. If the term Agile is to have any business value at all, then let it be the stick with which developers beat some sense into stupid managers. Points are indeed rough estimates and can easily be off by a large factor, and they're definitely not meant to measure performance. Standups are about the team and about helping each other move forward. Demos are about getting feedback from stakeholders. It's fine if others see the Jira board, but it's not theirs. It's the developers'. And if a task isn't done, and it isn't done.I fight for this if necessary, but fortunately I'm currently working in a team of very vocal and opinionated developers who take charge of their project and push back against managers if necessary. We do Scrum, but we're not dogmatic about it. We change the sprint scope if the situation calls for it. And we rebel when it's management that's calling for it."
Agile's early evangelists wouldn't mind watching Agile die,lliamander,"on April 25, 2020","In my experience, every successful engineering process is driven by the engineers.  Not product owners, project managers, IT directors, VPs of Engineering, or CTOs.It's certainly reasonable for those various stakeholders to ask for visibility.  Demos are great for that, and a lead engineer or front-line engineering manager can work with stakeholders to establish some metrics to report on, but those are epiphenomenal to the process chosen.I'm not saying it's a guarantee, just that nothing else really works well."
Agile's early evangelists wouldn't mind watching Agile die,hinkley,"on April 24, 2020","> Engineers felt comfortable taking stories in areas they knew nothing about.and it was understood and expected that this meant the estimate would go upToday we have 'bidding', which if that sounds like something a three year old does to their parents, you'd be right, and it's the same thing. You just ask someone else until you get the answer you want to hear (instead of the one you need to hear)."
Agile's early evangelists wouldn't mind watching Agile die,Supermancho,"on April 24, 2020","> you'd be right, and it's the same thing.It's not the same thing. It's not ""bidding"", even if it's called that because the lowest or highest or middling bid doesn't necessarily get the work. I know, I know, it sounds like another ""you're doing Agile wrong"", but Agile already fucked it up by saying ""bidding"", so we get these wild stories of how companies have their laziest incompetents in charge of trying to make improvements to process.> You just ask someone else until you get the answer you want to hear (instead of the one you need to hear).Otherwise you will only have the most jr or senior people working on everything. The system of bidding just doesn't work, which is why it's not bidding in a practical sense.You ask why people put down their estimates by describing what they know about the work. This is an opportunity to transfer some cursory knowledge and reinforce pain points. At a very progressive ""Agile"" company (we would invite speakers and A/B tested various practices across teams), I notoriously inflated/deflated all estimates by bringing up edge cases and/or constraining objectives. Story grooming aside, there are always people trying to over-engineer and estimation is another gate to prevent that.Agile was a good try to create software process, but it's incomplete at best. The idea that it would evolve is laughably naiive (https://app.spectator.co.uk/2020/04/22/the-illusion-of-certa...). Companies want S&Ps, not sauce that they have to mix themselves."
Agile's early evangelists wouldn't mind watching Agile die,hinkley,"on April 24, 2020","I'm not talking about Planning Poker, per se.I'm talking about the dickering about whether something is N points or N-2 points. Or whether the points even mean the same between two teams. Or whether it's appropriate to assign it to another team or individual who says a smaller number because they have a different definition of Done or are more or less invested in the long-term health of the project.I'm going to ask this person or the question in this way because I'll get the answer I like, even if that answer is unhealthy or even pure fiction."
Agile's early evangelists wouldn't mind watching Agile die,constantine42,"on April 26, 2020","Where I work, all teams have different point systems. When we need to do high level planning, we used a normalized ""sizing"" system of small, medium, large, huge. They give some numerical values to these and use those as points. They're less accurate on a per story basis, but they tend to average out quite well."
Agile's early evangelists wouldn't mind watching Agile die,mattlondon,"on April 25, 2020","Amen.We should make ""estimate"" a banned word and replace it with a word like ""guess"".Too often what starts out with an off-the-cuff chat about implementing some feature while people are getting coffee with a statement like ""Oh I don't think it will be too hard to do this - will take a week tops <filddles with coffee machine />"" etc ends up growing its own legs and becomming a gold-plated and irreversible commitment made to a director/VP/CxO somehow. What was a casual guess made without all the information required is now a rod for.our own back. Again.Perhaps as engineers we should give ourselves a sort of mental style-guide to never ever say the words hours/days/weeks/months/quarters/etc without alarm bells going off in our head and requiring extensive peer review in the same way we do when we're writing ""dangerous"" code (e.g. user-provided values going in to SQL queries etc) Only half joking really :)"
Agile's early evangelists wouldn't mind watching Agile die,darekkay,"on April 25, 2020","I've tried replacing ""commitment"" with ""forecast"" in my team for the same reason. Even though it's an official recommendation [1], the management didn't like it.[1] https://www.scrum.org/resources/blog/commitment-versus-forec..."
Agile's early evangelists wouldn't mind watching Agile die,mgreenleaf,"on April 25, 2020","Most philosophies get badly diluted and warped after they get placed into a wider audience. A lot of good ideas come from a small group of competent individuals who have experience and think deeply about how they could improve things; but a major reason why so much of the world is still so dysfunctional is because so many people don't think deeply or carefully about what they are doing. So when a good idea comes along, they commit the old mistake of jumping on the bandwagon without deeply imbibing the real reasoning behind it, but that corrupts the idea over time to be a prescriptive cure. So we have fads every few years when the majority of people find out that the old silver bullet didn't work for them, and start looking for a new silver bullet-- and there is always another small group who want to improve things and write a new book with a slightly different take on how to do so."
Agile's early evangelists wouldn't mind watching Agile die,Zelphyr,"on April 24, 2020","> We were told that this was standard FAANG practiceI'm getting really tired of companies trotting out the ""because [Facebook|Apple|Google] does it"" excuse.  Those are massive companies.  Are we so delusional to believe that what works for a $70B/year company will automatically work for our $20MM/year company?"
Agile's early evangelists wouldn't mind watching Agile die,plughs,"on April 24, 2020",The craziest part of this was that it was banking software. Every so often someone would inadvisedly suggest that banking customers weren't waiting on the edge of their seats for new features and really really really disliked bugs.  Perhaps - the hapless engineer would suggest - companies like facebook weren't the greatest model for how our company should operate.It was a good way to get your head bitten off.
Agile's early evangelists wouldn't mind watching Agile die,lonelappde,"on April 24, 2020",Spoiler alert: it's not how FAANG operate.The idea that FAANG are faster then your startup is absurd on its face. The revenue and legal risk is absolutely huge.
Agile's early evangelists wouldn't mind watching Agile die,joejerryronnie,"on April 24, 2020","The idea that all dev teams within a single FAANG operate in the same manner is also absurd (much less that all dev teams across all FAANGs operate in some identical, optimal fashion)."
Agile's early evangelists wouldn't mind watching Agile die,saagarjha,"on April 25, 2020","Finally, the idea that you should blindly emulate FAANG because they’ve clearly thought through what is the best is also absurd. They make poor, short-sighted choices too."
Agile's early evangelists wouldn't mind watching Agile die,mkhpalm,"on April 25, 2020",Its never made much sense to me when people hinge their beliefs on entities that have to acquire little companies to round out their portfolios.
Agile's early evangelists wouldn't mind watching Agile die,MrVitaliy,"on April 25, 2020","I think developers wouldn't mind practicing things just ""because FAANG does it"" as long as the employer also pays salaries equal to FAANG salaries."
Agile's early evangelists wouldn't mind watching Agile die,s09dfhks,"on April 26, 2020",ahahah this is my comeback every time! Glad im not alone on this
Agile's early evangelists wouldn't mind watching Agile die,analyst74,"on April 24, 2020","I agree with what you say in principle, but just to play devil's advocate.One difference between those highly paid software companies and others, is the expectation of performance. Netflix famously considers their team a sports team rather than a typical corporation. It's totally common for a great engineer to bomb out of those companies, just like how great athletes get kicked off top tier sports teams when they failed to perform due to reasons out of their control.While most other companies, lacking the ability or willingness to pay top dollars, are probably better off creating a safe environment for engineers who can be on-par or even better than FAANG engineers, but lack the political maturity to survive those high pressure environment."
Agile's early evangelists wouldn't mind watching Agile die,lonelappde,"on April 24, 2020",N's philosophy is famous because it's NOT how FAAG operate.
Agile's early evangelists wouldn't mind watching Agile die,blntechie,"on April 25, 2020","This is my experience with Agile projects. All the good parts for the developers have been stripped out and all it remains are the parts which benefits the management. How it’s followed in most orgs, it’s a low key leash system mostly however harsh it is to say."
Agile's early evangelists wouldn't mind watching Agile die,freshhawk,"on April 25, 2020","People in middle management are often quite smart.They saw a process that did an end run around them in favour of more self-management, and it worked well and got a lot of hype, that's terrible for their careers obviously.So they fixed it and kept the same name for marketing."
Agile's early evangelists wouldn't mind watching Agile die,jerzyt,"on April 25, 2020",I think that Jira killed Agile.  It's such an overhead on the Agile process.  Engineers spend more time documenting stuff in Jira than actually solving problems.
Agile's early evangelists wouldn't mind watching Agile die,m0xte,"on April 25, 2020",Crawled into this thread to make the same comment. It’s implicit vs explicit. JIRA makes everything so explicit it hurts
Agile's early evangelists wouldn't mind watching Agile die,heisenbit,"on April 25, 2020","Jira is only a tool. You can use it for reasonable lightweight communication. Or you can use it as a basis for defensive posturing, preparing for financial change discussions and control freakish micromanagement. If you have a distributed team and can keep management out of it and stick to basic features Jira can help still today.Agile is about culture and the culture of the pioneers and early adopters was different.I‘m seriously thinking I should try to go more the Kanban direction these days to aboid the story point hitting / fitting in ever shrinking sprint trend."
Agile's early evangelists wouldn't mind watching Agile die,constantine42,"on April 26, 2020","Jira can be highly customized. I find it easy to use for day-to-day. I also have to deal with Jira with a subsidiary company, and their Jira is completely different, but it works well for their use case.The reporting is a whole other issue. I don't use this, but my PM does because upper management keeps changing their reports and my PM has to keep linking and organizing. But as a developer, doing spring planning and burndown charts work quite nicely."
Agile's early evangelists wouldn't mind watching Agile die,janee,"on April 24, 2020","> it's a way to evaluate engineers, not create a good product.Gonna play devils advocate here...would those two be mutually exclusive?I feel there's a fundamental flaw in the garden of agile eden you initially described and that's trust...if you don't have it or lose it then gl trying to convince someone to essentially write a blank cheque for something they don't understandIf trust can erode a whole methodology then it's something to consider imo"
Agile's early evangelists wouldn't mind watching Agile die,wobbleblob,"on April 25, 2020","You forgot the part where the product owner negotiates the number of story points down for every story, and negotiates up the number of sp in every sprint, and complains that the team gets a velocity of exactly 50% every single sprint."
Agile's early evangelists wouldn't mind watching Agile die,BurningFrog,"on April 24, 2020","This reminds me why the agile ""customer"" concept is so important.As a customer, you get to decide what you want to buy, and you get to be happy or unhappy with the delivered product.But you don't get to control or even monitor the work in the factory/kitchen/etc.That's instead the job of a boss! Of course, an agile team also has a boss. But it's not the customer."
Agile's early evangelists wouldn't mind watching Agile die,einpoklum,"on April 24, 2020","Isn't it the case the most places ""doing agile"" don't actually involve the eventual customer in the process, just junior and higher management?"
Agile's early evangelists wouldn't mind watching Agile die,tootie,"on April 25, 2020","That's the point of this article, but honestly it seems to be neither here nor there. Being disconnected from business goals happens with or without agile. Agile can only solve delivery problems, not defects in business strategy."
Agile's early evangelists wouldn't mind watching Agile die,BurningFrog,"on April 25, 2020","If you can find an end customer that's willing to do the work, you're very lucky.But usually some proxy for the customer in your organization has to take on that role."
Agile's early evangelists wouldn't mind watching Agile die,jay_kyburz,"on April 24, 2020","It's not that customers don't ""get to"". It's more that customers don't ""have to"" because they can see working software coming out of the team, and they are confident that things are progressing.There are no ""rules"" in agile that says who can do what, just teams of people negotiating what works best for them. ""Individuals and interactions"" over process."
Agile's early evangelists wouldn't mind watching Agile die,BurningFrog,"on April 25, 2020","Well, I'm saying that the team needs to insist on those boundaries, to keep the relationships healthy.Not claiming it's inscribed on some sacred tablet."
Agile's early evangelists wouldn't mind watching Agile die,PeterStuer,"on April 25, 2020","If you do not change the power dynamics in companies, then the exposure of agile will rapidly descend into micro=management, metrics gaming, pass the hot potato and self promotion."
Agile's early evangelists wouldn't mind watching Agile die,drawkbox,"on April 25, 2020","Projects that involve value creation contain ""open"" and ""closes"" modes. Any process that squashes the ""open"" mode and only has ""closed"" modes will stagnate, fail or acquire technical/creative/product debt.A great talk that I make everyone watch is John Cleese on Creativity In Management, it is a must watch for value extractors dealing with value creation that ultimately is creative work [1][2].The open mode is allowing space, time and confidence. Closed mode is finishing/ship it mode.""CLOSED"" MODE> By the ""closed mode"" I mean the mode that we are in most of the time when {we are} at work.> We have inside us a feeling that there's lots to be done and we have to get on with it if we're going to get through it all.> It's an active (probably slightly anxious) mode, although the anxiety can be exciting and pleasurable.> It's a mode which we're probably a little impatient, if only with ourselves.> It has a little tension in it, not much humor.> It's a mode in which we're very purposeful, and it's a mode in which we can get very stressed and even a bit manic, but not creative.""OPEN"" MODE> The open mode, is relaxed… expansive… less purposeful mode… in which we're probably more contemplative, more inclined to humor (which always accompanies a wider perspective) and, consequently, more playful.> It's a mood in which curiosity for its own sake can operate because we're not under pressure to get a specific thing done quickly. We can play, and that is what allows our natural creativity to surface....> Humor is a natural concomitant in the open mode, but it's a luxury in the closed {mode}.COMBINING OPEN and CLOSED MODE> Once we've taken a decision we should narrow our focus while we're implementing it, and then after it's been carried out we should once again switch back to the open mode to review the feedback rising from our action, in order to decide whether the course that we have taken is successful, or whether we should continue with the next stage of our plan. Whether we should create an alternative plan to correct any error we perceive.> And then back into the closed mode to implement that next stage, and so on.EXAMPLE> ...one of Alfred Hitchcock's regular co-writers has described working with him on screenplays.> He says, ""When we came up against a block and our discussions became very heated and intense, Hitchcock would suddenly stop and tell a story that had nothing to do with the work at hand. At first, I was almost outraged, and then I discovered that he did this intentionally. He mistrusted working under pressure. He would say ""We're pressing, we're pressing, we're working too hard. Relax, it will come."" And, says the writer, of course it finally always did. We need both modes.The world is value creators (product/engineer/creative/imagination) and value extractors (business/management/finance). Once the latter group get control, they end up squashing the ""open"" mode that is so key to making good products. The value extractors increase pressure but sometimes lowering pressure will let the product iterations flow to a better product end result.Value must be created first before value can be extracted, but you can't force value creation with only the ""closed"" mode.Value creation processes that make sure there is an ""open"" mode along with the ""closed"" mode are always more successful, and sometimes the ""open"" mode doesn't look like work so the value extractors cut it first unknowingly killing the product slowly.The wrong type of Agile removes the ""open"" mode and cuts prototyping, iterations and refinement of creative value creation.  A more open type of iterative development is always better.[1] https://www.youtube.com/watch?v=Pb5oIIPO62g[2] https://genius.com/John-cleese-lecture-on-creativity-annotat..."
Agile's early evangelists wouldn't mind watching Agile die,artsyca,"on April 25, 2020","This has a lot to do with putting processes over people and it's been a lengthy process of us as so called engineers getting our hands forced while maintaining an appearance of being cool and entitledIt's well known that the systems an organization produces are bound to reflect the communications structures within that organization this is known as Conway's principleIn order to maintain flexibility in the design it's necessary to maintain flexibility in communication but engineers have no incentive to push for free communication and stick together to see the job done right, each of them is attached to a management minder who reports to a rigid top-down governance structure with very different ideas on how software should be done,  effectively stifling any potential dissent at the source and acting like an authoritarian regime with the desire to divorce the workers from ownership of their work and turn them into compliant and productive cogs in the machineThe reason for this is not because corporacy sucks but because humans suck at corporacy and when placed in group environments of over a handful of people we tend to resort to mob rule and groupthink at the expense of culture and individual rightsIt's rather complex but incentives are the clearest indicator of outcomes people simply have no incentives to help each other but every incentive to seek permission and recognition from managementIn such an environment it's been postulated that four types of personalities emerge as people attempt to exert control and these are known as Control Dramas:- The Intimidator- The Interrogator- The Aloof and- The Poor MeYou can look these up there are several good articles online about identifying and mitigating these but it's not always just one but a combination that people exhibitFramed in this context you can see corporations as implemented naively operate on only four cylinders even if it's only figuratively or intuitively true it's far from the humane ideal of what agile intended and this also has to do with metrics becoming targets and incentives trumping ethicsIn the end we trumpet DRY and try to 'focus on our work' while we repeat the same inane insane dramas day after day expecting a different outcome that's the worst form of repeating yourself but we collectively walk into it in every caseI'm personally carrying a lot of resentment at the engineer class because we've been trained to know better but we simply can't get over ourselves and wake up to the fact that we're not just part of the problem, we are the problem but as such we also possess the solution if we really sit down and think about itThe solution lies in the following conceptsA) it's possible to have alignment and autonomy it's not necessary to choose between chaos and blind complianceB) It's possible to have investment and productivity but it's necessary to trust people and that ultimately is where we fail"
Agile's early evangelists wouldn't mind watching Agile die,timwis,"on April 24, 2020",Really insightful. Thanks for sharing.
Agile's early evangelists wouldn't mind watching Agile die,zubairq,"on April 26, 2020","I wish I could +1000 this. ""Standups and Demos were all about self-promotion"""
Agile's early evangelists wouldn't mind watching Agile die,0x262d,"on April 24, 2020","Agile/software engineering practices broadly suffer a lot from the fact that not only is selling software a business model, selling Agile is also a business model, and when you buy Agile consulting it's impossible to disentangle whether it's being sold to you because it works or because it makes that person money. They don't even know because it's their job and they convinced themselves of its usefulness.It can still be evaluated on the merits but IMO this greatly pollutes the speed at which software devs as a broadly conceived community can come to consensus understanding of this.Also I think the comparison to lean manufacturing has always been very shallow. I get the metaphor, I just don't think that human resources in engineering can be optimized like manufacturing processes. This quote is the best part of the article:> ""You’d never hear anyone say, 'We help mechanical engineers be agile. That would be silly. And I mean that in the worst possible sense of the word"".As for the rest of it, I'm not dying to hear what the person who invented Agile thinks we should do next lol."
Agile's early evangelists wouldn't mind watching Agile die,wpietri,"on April 24, 2020","> selling Agile is also a business modelAbsolutely. And, having done some agile consulting long ago, I'd say it's more pernicious than that.The people who truly want to make deep change in pursuit of deep improvement are a small segment of the market. Worse, they don't need a lot of help. In the aughts, I had a few clients who really got it after 3 months of focused work, and then they were off and running.But a large company that only wants to talk about change and maybe make some 5% improvements if they aren't too hard? That can be milked forever. Well, I can't, because I care about results. But consultants who either don't care or don't notice? They're golden.And I think this failure of the Agile movement has been obvious for a decade. I gave up on Agile conferences circa 2009, and wrote a long piece about this in 2011: http://agilefocus.com/2011/02/21/agiles-second-chasm-and-how..."
Agile's early evangelists wouldn't mind watching Agile die,oceanghost,"on April 24, 2020","It's also a way to get promoted.I've seen several director types get promotions promising to get faster and more reliable work out of existing engineers by implementing this new religion... Agile.The results were always predictable. Layering more meetings and stress on people who already have too much work to do, doesn't help things. But, you're still vice president."
Agile's early evangelists wouldn't mind watching Agile die,the_duke,"on April 24, 2020","> I'm not dying to hear what the person who invented Agile thinks we should do nextAgile has plenty of good ideas.The problem is the almost religious following and, as you mention, the whole industry that has sprung up around it.Even the initiators said that it was supposed to be a rough framework, to be adapted to your individual circumstances and teams. It was also a (much needed) counterpoint to the then prevalent waterfall model.Now we have consultants, people strictly following something they read in a book or learned in a course, adhering to strict structure of meetings/processes,  and even a big association with a single software product, Jira. (""You are doing it wrong!"")When you step back, a lot of the ideas make sense, and many teams will even implement similar workflows without having ever heard about ""Agile"".Common sense has to prevail though."
Agile's early evangelists wouldn't mind watching Agile die,AnimalMuppet,"on April 24, 2020","> ... it was supposed to be a rough framework, to be adapted to your individual circumstances and teams.> Now we have consultants, people strictly following something they read in a book or learned in a course, adhering to strict structure of meetings/processes, and even a big association with a single software product, Jira. (""You are doing it wrong!"")Yeah.  Part of agile is that your process is an adjustible parameter.  If you're doing it with a rigid process - any rigid process - then you are not actually doing agile."
Agile's early evangelists wouldn't mind watching Agile die,nradov,"on April 24, 2020","When you have a large program team with mixed experience levels who don't fully understand fundamental principles, sometimes the only way to keep your sanity is to force everyone to strictly follow a defined agile methodology (LeSS or SAFe or whatever). That isn't optimal, but if you have to deliver working software right now you can't wait around to figure out an optimal process for your unique circumstances. Pick something good enough and move forward, then improve as you go"
Agile's early evangelists wouldn't mind watching Agile die,Jtsummers,"on April 24, 2020","Agile doesn't ask you to figure out the ""optimal process"", it asks you to learn. One of the key things I've seen missed in almost every attempt at Agile/DevOps/whatever is the retrospective or the learning component.The team/organization has to become a learning organization. That means a number of things, but the critical one here is learning from past failures and successes and incorporating that feedback into their model (ideally continuously, but in Scrums it'd be the end-of-sprint retrospective). You start down a path, and you find it's difficult. You don't press on just because it's the one you selected, that's the way of idiots. You examine the hardships you're facing, and you address them."
Agile's early evangelists wouldn't mind watching Agile die,wpietri,"on April 24, 2020","Absolutely. To my mind, the one vital agile practice is the weekly retrospective where the team looks at how things went, thinks a bit, and decides to try something in following weeks. Everything else is just tools people can try applying to solve the problem of the week."
Agile's early evangelists wouldn't mind watching Agile die,rapind,"on April 24, 2020","And yet I've heard the opposite argument that ""It didn't work because you weren't strict when adhering to it."""
Agile's early evangelists wouldn't mind watching Agile die,znfi,"on April 24, 2020","I remember someone giving a lecture on software engineering methodologies who gave a pretty good summary by saying that ""The methods are there to help your brain, not to replace your brain."""
Agile's early evangelists wouldn't mind watching Agile die,cs02rm0,"on April 24, 2020",It was also a (much needed) counterpoint to the then prevalent waterfall model.It still is and it's barely in the fight still in some corners of the public sector.If Agile dies (and SAFe might succeed there) then there would be nothing left except Waterfall and people others would call cowboys.
Agile's early evangelists wouldn't mind watching Agile die,gridlockd,"on April 24, 2020",> If Agile dies (and SAFe might succeed there) then there would be nothing left except Waterfall and people others would call cowboys.Saddle my horse.
Agile's early evangelists wouldn't mind watching Agile die,RealityVoid,"on April 24, 2020","Haha, this was hilarious to read, mainly because, on some occasions, I've been a cowboy, at least in the context of this post. I like to think it worked pretty well, since, for what we were trying to do, the processes were fighting against us, so I just... did what I considered right technically, regardless of tickets and sprints and who's team should do what.Whether it was right, I'm not sure, but people have been happy with my work, so that allowed me a bit of leeway."
Agile's early evangelists wouldn't mind watching Agile die,bregma,"on April 24, 2020","> The problem is the almost religious followingYes. I have found doing agile ""properly"" to be too rigid. What we need is something more flexible than agile."
Agile's early evangelists wouldn't mind watching Agile die,aquadrop,"on April 25, 2020","Ironic that something called ""Agile"" is religious forced as a rigid system by consultants."
Agile's early evangelists wouldn't mind watching Agile die,thaeli,"on April 24, 2020","> “You’d never hear anyone say, ‘We help mechanical engineers be agile.""I have literally heard this pitch."
Agile's early evangelists wouldn't mind watching Agile die,ashtonkem,"on April 24, 2020",The chance of something being pitched is correlated more strongly with it making money than with it actually being a sane idea.
Agile's early evangelists wouldn't mind watching Agile die,Florin_Andrei,"on April 24, 2020","> The chance of something being pitched is correlated more strongly with it making money than with it actually being a sane idea.More generally, it's correlated to it bringing some real or perceived advantage to the person doing the talk.I mean, have you been watching the news lately?"
Agile's early evangelists wouldn't mind watching Agile die,meheleventyone,"on April 24, 2020","Yup, I've an Aunt who works for an environment agency that now does all her work using Agile down to Sprints etc. which is mildly confusing."
Agile's early evangelists wouldn't mind watching Agile die,mindcrime,"on April 24, 2020","There really is no methodology called ""Agile"". There are things like Scrum, SAFE, AUP, XP, etc. Some of those may or may not mandate things like ""sprints"", but the essence of agile (the Agile Manifesto) doesn't even mention the term ""sprint"".The closest it gets to that is where it say:We follow these principles:<snip>Deliver working software frequently, from a
couple of weeks to a couple of months, with a
preference to the shorter timescale.<snip>"
Agile's early evangelists wouldn't mind watching Agile die,james_s_tayler,"on April 24, 2020","The funny thing about the agile manifesto is that it doesn't actually say anything remotely related to process.It basically states a set of attributes your process should exhibit.Agile as I have experienced it in practice almost never displays those attributes.The whole thing makes very little sense. I mean read it.>""We are uncovering better ways of developing
software by doing it and helping others do it.
Through this work we have come to value:Individuals and interactions over processes and toolsWorking software over comprehensive documentationCustomer collaboration over contract negotiationResponding to change over following a planThat is, while there is value in the items on
the right, we value the items on the left more.""How the hell do you get from that to where we are today?What it ought to say is:""We value short feedback loops that minimize risk and maximize learning.We value flexibility.We welcome change.We don't know what we are doing, only what we intend to do. The outcome is a guess. Our guesses could always be better. We strive to make them so."""
Agile's early evangelists wouldn't mind watching Agile die,meheleventyone,"on April 24, 2020","Oh for sure, but that doesn't mean she isn't doing something she's been told is Agile and involves Sprints."
Agile's early evangelists wouldn't mind watching Agile die,mindcrime,"on April 24, 2020","Yeah. :-( It bugs me to no end when companies do that, but what can ya do?"
Agile's early evangelists wouldn't mind watching Agile die,0x262d,"on April 24, 2020","It wasn't by a Boeing exec, was it lol?https://www.bloomberg.com/news/features/2019-05-09/former-bo..."
Agile's early evangelists wouldn't mind watching Agile die,monksy,"on April 24, 2020","""You're doing it wrong""First words of an agile consultant."
Agile's early evangelists wouldn't mind watching Agile die,ben509,"on April 24, 2020","""S/he was doing it wrong.""First words of the next agile consultant."
Agile's early evangelists wouldn't mind watching Agile die,nogabebop23,"on April 24, 2020","""That's not agile. TO be agile it must include practices x,y,z...""First words of an agile zealot responding to any complaints or negative comments about agile."
Agile's early evangelists wouldn't mind watching Agile die,OrangeMango,"on April 24, 2020","It's a good thing there is a limit to nested replies, because this could go on for a really long time."
Agile's early evangelists wouldn't mind watching Agile die,AnimalMuppet,"on April 24, 2020","Typically, until the company runs out of money..."
Agile's early evangelists wouldn't mind watching Agile die,bregma,"on April 24, 2020",... or until all the original team members have left and now work in places where methodology is not the primary job.
Agile's early evangelists wouldn't mind watching Agile die,james_s_tayler,"on April 24, 2020","""You're doing it wrong"" is the meta of Agile."
Agile's early evangelists wouldn't mind watching Agile die,hvis,"on April 24, 2020",Agile consultants are not the only people who do that.https://i.imgur.com/ecsh9yp.png
Agile's early evangelists wouldn't mind watching Agile die,InternetOfStuff,"on April 24, 2020","> This quote is the best part of the article:> > ""You’d never hear anyone say, 'We help mechanical engineers be agile. That would be silly. And I mean that in the worst possible sense of the word"".This quote is silly.To me, agile is just good engineering practice, applied to software. Of course mechanical engineers apply its principles, and have for decades before the term Agile was coined.And as such, this practice is far older than software.The Apollo space programme is my favourite example: the ultimate goal remained fixed (man/moon/before end of decade), but all steps of the way were discovered and redefined over the programme's course.Mission objectives were changed depending on what was learned, often even in flight.This was a very nice and agile (and sensible) approach, regardless of what it was called."
Agile's early evangelists wouldn't mind watching Agile die,mattmanser,"on April 24, 2020","You're just offering your own special definition of ""agile"", that of course doesn't fit anyone else's definition, and especially any agile consultant's.Of course, even more ironically, it doesn't fit the original agile manifesto:Welcome changing requirements, even late in
development. Agile processes harness change for
the customer's competitive advantage.https://agilemanifesto.org/principles.html"
Agile's early evangelists wouldn't mind watching Agile die,raverbashing,"on April 24, 2020","Yes, selling Agile is a business modelWhich bothers me much, much less than selling things like CMMI/PSP certifications or EUP/RUP which are done purely for paper pushing and selling the paper value.Agile is an improvement on waterfall and you don't need to be certified to do it."
Agile's early evangelists wouldn't mind watching Agile die,vpeters25,"on April 24, 2020","> Also I think the comparison to lean manufacturing has always been very shallow. I get the metaphor, I just don't think that human resources in engineering can be optimized like manufacturing processes.Agile and Lean are empirical process controls, they are based on the same concepts. Ken Schwaber explains all this on the first chapter of his book ""Agile Software Development with SCRUM"":Defined process control: same inputs always result in same output (manufacturing widgets on a production line).Empirical process control: same inputs not always result in same output.Schwaber conceived SCRUM (and was among the founders of Agile) after realizing software development required an empirical process control: give 2 dev teams same specs, 2 different apps will come out (they might do the same thing, but in different ways)"
Agile's early evangelists wouldn't mind watching Agile die,allover,"on April 24, 2020","If you're genuinely confused, I assume they missed out the word ""selling"" before ""software""."
Agile's early evangelists wouldn't mind watching Agile die,0x262d,"on April 24, 2020",This is correct and I edited the post to avoid this sort of criticism.
Agile's early evangelists wouldn't mind watching Agile die,james-mcelwain,"on April 24, 2020","I don't know if something is wrong with me, but I simply cannot ""decompose"" a single feature into 500 different sub-task Jiras.I understand why it would be super cool if software worked like that, but I have to iterate on features holistically and sometimes speculatively.At least for me, software development has never been able to be so cleanly broken down into ""first, implement the button"" type tasks.But maybe I'm just dumb."
Agile's early evangelists wouldn't mind watching Agile die,HeyLaughingBoy,"on April 24, 2020","It can usually be done. The problem is that people assume that now that you have that list of subtasks, you can iterate through them one at a time until you've built the feature. That's the major disconnect.What I do with my guys is I make them decompose the feature, but with the understanding that they'll probably be jumping from one subtask to the other, back and forth, as they understand what it is they'll be building. AND they'll probably come across new subtasks as they work through the feature.It makes Jira look crappy, but it Reflects Reality (tm) which to me is far more important than keeping Jira clean."
Agile's early evangelists wouldn't mind watching Agile die,Ididntdothis,"on April 24, 2020","That's how it works. Touch something here, touch something there, learn from it and slowly build up the whole thing. I think Scrum and Kanban may work if you have a somewhat mature system where you add incremental features but if you do something relatively new and big the backlog can not reflect reality. Or it forces a workflow that doesn't make sense. I have seen it multiple times where people refused to make changes to something because their story was done already. Never mind that the design turned out to be unsuitable."
Agile's early evangelists wouldn't mind watching Agile die,mark-r,"on April 24, 2020","I saw this happen before Agile was even a thing.  The possibility of a bug in the spec was never a consideration.  You had to hope your assumptions going in were correct, or your users were screwed."
Agile's early evangelists wouldn't mind watching Agile die,HeyLaughingBoy,"on April 25, 2020","A story I love to tell is the time where I was in the medical device industry. A requirement was formally reviewed with the owner and he signed off on it. The design was completed and reviewed and found to match the requirement, I implemented it, tested it and found it worked as expected and handed off to QA. QA tested it and verified that it correctly implemented the Requirement. The feature was turned over to its owner for so he could use it and his response was ""that's not what I asked for!"""
Agile's early evangelists wouldn't mind watching Agile die,Ididntdothis,"on April 25, 2020","I work in medical too and I have seen the same thing.  But to be honest, the same happened when I was consultant. You painstakingly go through every detail, everybody is happy, but when the product gets delivered, it just doesn’t feel right. That’s where rapid development with quick customer feedback is useful. Unfortunately often the customer doesn’t have the time to look at things."
Agile's early evangelists wouldn't mind watching Agile die,GrumpyYoungMan,"on April 24, 2020","> ""I simply cannot ""decompose"" a single feature into 500 different sub-task Jiras.""Nobody can; that's the primary failure mode of waterfall.  Anybody who is telling you to decompose a feature into that many subtasks might claim to be doing agile but they really are trying to do waterfall."
Agile's early evangelists wouldn't mind watching Agile die,mumblemumble,"on April 24, 2020","> that's the primary failure mode of waterfallThat's the primary failure mode of a straw man software development methodology called waterfall that Scrum practitioners like to use as a bogeyman to appeal to for rhetorical purposes during the inevitable arguments about niggly little details of how to implement Scrum during sprint retrospectives.I've never actually done real waterfall, but I did study it way back when I was in college, and I have worked in government contracts, which tend to handle the work in a way that is similar to the waterfall I read about in school. One thing I distinctly remember is that it was designed to be a flexible and iterative methodology that would have been difficult to cram into a ticketing system in the first place, let alone cram into Jira while simultaneously carving the work into tiny pieces, up front, all at once.FWIW, the only place I've ever been asked to do something like that is in ostensible Scrum shops. In fact, the only time I've ever seen anything that looks like the Waterfall of scrum lore is in shops that are trying to do Scrum. I am beginning to suspect that the Waterfall of Scrum lore isn't actually a thing that happens outside of Scrum at all. It's actually what naturally tends to emerge when you try to apply Scrum methodology in a situation where something along the lines of the real, textbook waterfall model would have been more appropriate.As a concrete example, I currently work at a team that ostensibly uses Scrum, but where QA is a separate department with its own practices that the dev team does not control. They do still want some ability to anticipate work that's coming their way, though, so they're monitoring the scrum board for that purpose. This is the moment where it gets messy, because we're then asked to document things ahead of time, and it's a minor crisis if we keep it flexible during the sprint because any changes to the set of tickets becomes an inevitable hassle as they complain that we've screwed up work product that they generate based on those tickets. It's absolutely something straight out of waterfall horror stories from Scrum lore. But it's only happening because we're doggedly insisting on something that's at least cosmetically similar to scrum. If we weren't doing that, we'd be freer to choose modes of interaction and business artifacts that are better suited to the reality we occupy."
Agile's early evangelists wouldn't mind watching Agile die,wpietri,"on April 24, 2020","Waterfall was the dominant model of software engineering up until the late 1990s. It is how managers want software (and projects generally) to work. I promise, it was real! Back then, a quarterly release cycle was fast; 12-18 months was more common. With the rise of the Internet, everybody knew that couldn't work, but didn't know what to do, so there was a lot of experimentation in the late 1990s: Scrum, FDD, Crystal, Extreme Programming, and more I've forgotten or that were never named.Out of this chaos, eventually came order. It turns out what mattered most in practice, just like before, was pleasing managers and executives. Effectiveness was generally secondary. So what we ended up dominating is Scrum, the most waterfall of Agile processes. Most shops ""doing Agile"" these days are still following a top-down, control-oriented, ineffective and unrealistic process, just like before. But now they use Agile labels for their mostly-unchanged process, albeit with a faster release cadence."
Agile's early evangelists wouldn't mind watching Agile die,einpoklum,"on April 24, 2020","In much (most?) of software being worked on these days,* A quarterly release cycle is indeed fast.
* 12-18 months between releases (ignoring perhaps bugfix/point releases) is quite common.You write that ""everybody knew that couldn't work"" - for some projects.Definitely agree with your second paragraph - except that Agile labels can be used even without a faster release cadence :-)"
Agile's early evangelists wouldn't mind watching Agile die,wpietri,"on April 25, 2020","I don't believe that to be the case. The surveys I can find suggest that releasing quarterly or less often is very much in the minority. If you have data otherwise, I'd be interested to see it."
Agile's early evangelists wouldn't mind watching Agile die,james_s_tayler,"on April 24, 2020",Nailed it.
Agile's early evangelists wouldn't mind watching Agile die,Jtsummers,"on April 24, 2020","A reason you often see Waterfall-in-Scrum is because people who were using Waterfall wanted to get away from it, and they made it as far as Scrum (the name). They usually keep the same practices of massive design/spec documents that are developed in advance. They try to plan out the next 20 sprints (hah, I saw a team that tried to plan out 60 sprints 4-week sprints, it was kind of hilarious if I wasn't dying inside from the thought of it).The biggest difference for Waterfall-in-Scrum versus Waterfall is that they've sufficiently (hopefully) decomposed tasks to have short target dates for delivering something to a test team or facility. They don't use it to get feedback from customers (the actual users, not the ones writing the checks). They don't use it to replan when things go wrong. They just use the whip and OT and get back on track."
Agile's early evangelists wouldn't mind watching Agile die,wpietri,"on April 24, 2020","Yeah, I think trying to perfectly describe the work in advance is Waterfall thinking. Most of what gets sold as ""Agile"" these days is Waterfall dressed up in Agile terms.But as an example of early Agile intent, here is how we worked in 2004: http://williampietri.com/writing/2004/teamroom/You'll note that we never did detailed planning more than a week in advance. We could have, but it would have been a waste, because it would have been speculation on speculation. Instead we'd agree on something small to build, get it working, and then see what we thought."
Agile's early evangelists wouldn't mind watching Agile die,jtdev,"on April 24, 2020","Creating a huge list of tasks is actually what I would call an Agile anti-pattern. It's something that I unfortunately see all the time. User stories are meant to be written from a business or end-user perspective. It's a high level description of what is to be done, for who, and why, not how. I personally don't even like having tasks on the board, just give me a well written story and I'm happy to complete it based on what's written in the acceptance criteria."
Agile's early evangelists wouldn't mind watching Agile die,barrkel,"on April 25, 2020","How would you implement a database, or operating system, without a big list of tasks?Some things need to be designed, and don't work terribly well if they're evolved incrementally from user-visible features. Incremental additions can be, but there's also a risk of gradually degrading the architecture of a system through risk-minimized local changes by interchangable resources, I mean developers - which is what I generally see occur under Scrum."
Agile's early evangelists wouldn't mind watching Agile die,mindcrime,"on April 24, 2020","I don't know if something is wrong with me, but I simply cannot ""decompose"" a single feature into 500 different sub-task Jiras.No, nothing is wrong with you. But let me note that the Agile Manifesto doesn't say anything about Jira, or anything prescriptive about how small to make your stories.If your methodology asks you to do that, I'd argue that your methodology is broken. But it's broken because it's shit, not because it's ""agile."""
Agile's early evangelists wouldn't mind watching Agile die,polotics,"on April 24, 2020","Well ""individuals and interactions over process and tools"" is in the Manifesto, so I would say JIRA is implicitly covered. I am being asked to do ""proper structured agile"" by writing up many JIRA tasks in advance of learning what best to write, and I find it funny. It's not the disease though, just a symptom of having too many nonprogrammers around. Will resolve itself."
Agile's early evangelists wouldn't mind watching Agile die,mindcrime,"on April 24, 2020","I am being asked to do ""proper structured agile"" by writing up many JIRA tasks in advance of learning what best to write, and I find it funnyYeah, it's hilarious how people are being told to do something in the name of ""Agile"" that is almost completely opposite of the spirit of the Agile Manifesto. sigh"
Agile's early evangelists wouldn't mind watching Agile die,BigJono,"on April 25, 2020","> just a symptom of having too many nonprogrammers around. Will resolve itself.Parkinson's Law doesn't get enough of the blame for bad dev environments. It's so easy to feel like you're doing 40 hours of difficult, important work a week, while actually accomplishing fuck all at best (or generating more work overall at worst).I bet a big chunk of the problems raised in this thread don't exist if everyone experiencing them cuts their team size in half."
Agile's early evangelists wouldn't mind watching Agile die,alistairSH,"on April 24, 2020","But maybe I'm just dumb.No, not at all.Decomposing a new feature into digestible pieces is hard work and a skill that is learned over time. It's also a skill to know when something is small-enough, or has enough unknowns that further decomposition is wasteful.Good product owners and managers know this and are good at it themselves.  And the decomposition is typically at a story level - ""can we take story X, break it into 2 smaller stories, and still deliver something of value?""  The tasks are usually pretty self-evident once you break down the stories a few times.For a lot of my work, if the story is ""As a user, I need to do X"" the tasks are simply broken into distinctly testable pieces.*  Is there a database change? That's a task. Is there an API change? That's another task. Front-end change? Third task.  And if you get half-way through and need to start over, that's life and it happens reasonably often. Yeah, there might be some re-testing.  Or, a new story for next sprint.It's up to me, as the manager, to make sure the stakeholders are informed and on-board. At the end of the day, as long as the team is making progress, I'm happy.  And if the team isn't making progress, it's probably my fault (and almost never the fault of an individual contributor).* In my world, tasks don't exist in isolation.  They're all subordinate to a user story.  Every task (piece of work) we do is done in the furtherance of a well-defined need of the user.  And developers are never defining tasks on their own - it's done as a team."
Agile's early evangelists wouldn't mind watching Agile die,ben509,"on April 24, 2020","To some extend, you could if you worked on the task and, as you worked, said, ""what am I doing now and what do I need to do next?"" and then plugged that into something.It wouldn't be a complete decomposition, of course, a person watching would see your thinking unfold. I think speculative decomposition would be very interesting, especially in retrospective if we could see the rabbit holes we went down.Decomposing is easy since we naturally have to do that as we work. Heck, those 500 tasks are probably in your shell, browser and commit histories, mixed in with a bunch of other junk.The problem is tools like Jira make this heavy-weight, doing it up front makes it nigh impossible, and having others review all this stuff and it becoming promises blows up the LOE significantly. And, I don't think I'd want to be under that much of a microscope as I work.But if it were very lightweight, where I'm just posting my thoughts and can see them as a quick dependency diagram, and maybe attach notes, commits and URLs to them, and other people can see them, that'd be pretty helpful."
Agile's early evangelists wouldn't mind watching Agile die,Jtsummers,"on April 24, 2020","> But if it were very lightweight, where I'm just posting my thoughts and can see them as a quick dependency diagram, and maybe attach notes, commits and URLs to them, and other people can see them, that'd be pretty helpful.That's precisely the objective of ""user stories"" and other things. You write a high level version, put it in a backlog with priorities. When you get to it, you realize it's bigger than anticipated (""Oh, I can't just do X, I have to do A, B, and C.""). So you turn X into three things, one of which you work on now, and the others in the backlog. Repeat until done.I don't think Jira is necessarily too heavy-weight, it's the way everyone seems to use it. They want to assign the tasks now, not treat them as backlog items or things that can be modified in the future. Which pushes them back towards big-design-up-front and entirely defeats the objective, you're back to low throughput, high latency development."
Agile's early evangelists wouldn't mind watching Agile die,stickfigure,"on April 24, 2020","It sounds like you're trying to decompose software into developer tasks, which is not what (my interpretation of) agile is about.Forget the developer for a moment and take the user perspective. What's the first thing the user wants to do? Log in? Ok, that's a story. What's the next thing the user wants to do? See a list of widget prices? Ok, that's a story. What's the next thing the user wants to do? Change a price? Story.If you can't sit down and think of a dozen narratives like this, then the fundamental problem that you don't really understand how people are supposed to use your software or what your software is supposed to do."
Agile's early evangelists wouldn't mind watching Agile die,CyberDildonics,"on April 24, 2020","Calling everything a 'story' is just another in a long line of trends that pretend making up a new name for something is progress.(Also a user doesn't actually want to log in, they want to do something and you are making them log in)"
Agile's early evangelists wouldn't mind watching Agile die,jussij,"on April 25, 2020","I would think if 'login' was simple enough to write as a single story then that login feature would be next to useless.The task of login is more about security, access control, authorization and tracking, not just giving the user access to a web landing page.That level of complexity makes it a project in itself."
Agile's early evangelists wouldn't mind watching Agile die,stickfigure,"on April 25, 2020","That depends on business requirements. In simple cases, auth can be as simple as dropping a little javascript on the page.But sure, you can have follow-on stories like ""user is denied access protected resource"" or ""admin sees resources accessed by user"". Enough individually-useless stories and you end up with a useful app. That's kind of the point of agile."
Agile's early evangelists wouldn't mind watching Agile die,loopz,"on April 24, 2020","Actually, those are stories developers tell themselves, not users!"
Agile's early evangelists wouldn't mind watching Agile die,goalieca,"on April 24, 2020","No, you're not dumb. Telling someone precisely how to work and then tracking every bit of it is called micro-management."
Agile's early evangelists wouldn't mind watching Agile die,virgil_disgr4ce,"on April 24, 2020","> but I have to iterate on features holistically and sometimes speculatively.YES. THANK YOU! I've been trying to tell people this for ages. Maybe other people are somehow capable of perfectly predicting every conceivable edge-case and consequence without even starting to work on something, but I can't. I have to start building something in order to see it clearly. And this ENRAGES certain kinds of managers, I have found."
Agile's early evangelists wouldn't mind watching Agile die,anon9001,"on April 24, 2020","Managers just want you to deliver on a predictable schedule.Here's how you can solve your problem:  Make as many tickets as you can think of, it doesn't really matter if they contain the essence of the problem or not, it just matters that there are many tickets associated with the task.  Once you have your tickets, estimate them with as much padding as possible.  If the manager complains that you're padding a ticket too much, make two tickets and split the estimate.Once you have a big pile of tickets and estimates, you've bought yourself enough time to do the work.  Go do the work, then mark all the tickets as complete.  You'll figure out the edge cases as you go, as long as you've made enough tickets and time to do the job at a reasonable pace.If you have extra time left over, get started on the next thing, improve your tooling, or try to help someone else with their tasks.  If you don't have extra time left over, make more tickets next time."
Agile's early evangelists wouldn't mind watching Agile die,gilbetron,"on April 24, 2020",Managers want a fiction to present to their superiors - the most happy my managers are is when what you describe happens.  I like your approach :)  I might have to be more explicit in creating a fiction.  The only issue is if/when you actually run into things that significantly delay things right towards the end.
Agile's early evangelists wouldn't mind watching Agile die,alistairSH,"on April 24, 2020","Ack, please don't.  As a manager, I'm pretty sure I'd see this as the bullshit it is and call you on it.  We're not all morons."
Agile's early evangelists wouldn't mind watching Agile die,anon9001,"on April 24, 2020","Where exactly is the problem with my strategy?  I'm also a manager of a small team.  My main goals are to make sure everyone is not idle, not burned out, and not missing deadlines.My boss's goal is to try and get everyone to work every waking hour so we can deliver faster.  My job is primarily to keep the peace between the executives and the workers.  When I fail the workers, it looks like unpaid overtime.  When I fail the executives, it looks like undelivered features.I think the actual purpose of agile, from a developer's perspective, is to create more time to deliver quality engineering work product.  From an executive's perspective, agile exists to squeeze developers into completing tickets faster.  As a manager, it's my job to keep both parties as satisfied as possible.  If engineers have enough time to build and executives get enough deliverables, then the company succeeds.What's your strategy?"
Agile's early evangelists wouldn't mind watching Agile die,alistairSH,"on April 24, 2020","I read your comment as ""create as many tickets as necessary to throw off management's understanding of the effort and complexity of the problem.""  Creating more tasks than necessary sounds like a waste of everybody's time.As I noted in a parallel comment, on my team, developers are never creating tasks on their own or in a vacuum.  It's done as a team effort during planning meetings.Perhaps I should add that my boss (senior director) has never asked me about my board, velocity, or anything like that. Discussion is higher level - ""is project X on schedule?"" or ""are you going to miss anything on your roadmap?"" not ""why is task X or story Y not done yet?""  If your director is asking that, he has too much time on his hands."
Agile's early evangelists wouldn't mind watching Agile die,watwut,"on April 24, 2020","Through, project managers lie about the being on roadmap. The answer to higher management is always ""we are on time"" to look good.Asking specifics from higher ups is just smart."
Agile's early evangelists wouldn't mind watching Agile die,alistairSH,"on April 24, 2020","Perhaps project managers who aren't good at their jobs.I've reported to two different directors since moving into management.  Both were very clear that they'd rather hear about problems early.  And both have been nothing but reasonable when I've reported problems. Of course, the entire team needs to be reasonable for this to work, from the product managers to project managers to individual contributors.And as a manager, nothing annoys me more than an employee who tells me everything is fine then misses a deliverable.  Tell me you're having problems so we can find a solution.  Please. That's why I'm paid what I'm paid."
Agile's early evangelists wouldn't mind watching Agile die,noelsusman,"on April 25, 2020","Eh, those of us who work with morons need to figure something out, and a form of this strategy has worked pretty well for me.  They're not even really morons, they're just more focused on having something to cover their ass than giving a shit about building the product.  I can get away with making stuff up because they don't actually care about how I get the work done, they just need a long list of things they can check off to show progress to whoever is hassling them."
Agile's early evangelists wouldn't mind watching Agile die,james-mcelwain,"on April 24, 2020","This is also what I do, but it seems so antagonistic and deceptive. I want my relationship with my PM to be productive and collaborative."
Agile's early evangelists wouldn't mind watching Agile die,gdilla,"on April 24, 2020","What I find helpful as a product manager, I discuss each feature with engineers - and we collaboratively break it down into a bare-bones ""MVP"" version, but consider nice to haves as future stuff or TBD based on what we learn. That helps push scope down and manage holistic iteration. Every feature should have an MVP version of it. At least asking the question can help break down that first user story."
Agile's early evangelists wouldn't mind watching Agile die,texasbigdata,"on April 24, 2020",How did you learn this?
Agile's early evangelists wouldn't mind watching Agile die,burner831234,"on April 24, 2020",I learned it through the job. I think thats the quiet secret. Engineering is best learned through a form of apprenticeship but so is product.
Agile's early evangelists wouldn't mind watching Agile die,loopz,"on April 24, 2020","Too bad corps optimize away apprenticeship, and then wonder why their processes delivers less and less..."
Agile's early evangelists wouldn't mind watching Agile die,gdilla,"on April 24, 2020",by making mistakes and making efforts to get better. Reading stuff by smarter people too helped.
Agile's early evangelists wouldn't mind watching Agile die,Swizec,"on April 24, 2020","Software is like gardeninghttps://blog.codinghorror.com/tending-your-software-garden/The reality is that your ability to break things down depends on experience. I’ve built so many landing pages, for example, that I can tell you an exact breakdown of tasks. Been a part of so many SaaSes, I can tell you exactly what non-core features you’ll need, when, and how much work they are. I can also predict where you’ll hiccup.But ask me to build something new that’s never been done before (at least by me) and the most I can do is shrug and  guess. Maybe give you a rough sketch of an outline of subtasks."
Agile's early evangelists wouldn't mind watching Agile die,danieldisu,"on April 24, 2020","Don't get me started when they try to push all clients into one jira, each one of them with their own complexities, release cycles etc.
Or when they try to measure team effectiveness using Jira un some way or another, every team is capable of doing more Jiras in the same time by just splitting them more!"
Agile's early evangelists wouldn't mind watching Agile die,danielrhodes,"on April 24, 2020","You're right that there is a limit to the usefulness of breaking down sub-tasks. It's up to a team how granular they get.Here is why it is important:a) Risk management - if you break a feature down into sub-tasks at any granularity, you are creating an agreement (or at least a conversation) among your peers that this is how something will be implemented, and digging in beforehand to uncover areas which might impede shipping the feature sooner.b) You're going to have to break down the feature at some point. Being able to think through this ahead of time can be challenging, but often times is the meat of the work you do. You have to get into the hang of it -- think top-down or bottom-up ways of approaching it.But what if you don't have enough information or understanding yet to do that? Agile is not great for these tasks where you need to take some time learning or experimenting.I would offer you a couple extra tools here:- A ""spike"" ticket -- Agile is all about deliverables and commitments, but sometimes that doesn't work. So create a spike ticket, and define what it is you want to investigate. If you deliver something, great! If not, no worries. The important part is that in the future you've done work that enabled you to learn how to estimate or break down that task in the future.- A time-boxed ticket -- similar to the spike, but you just make sure you don't spend more than an allotted time on a task."
Agile's early evangelists wouldn't mind watching Agile die,Rapzid,"on April 25, 2020","Spiking is great as just a general development process even if you don't have tickets/time-boxed items just for them. For example in Basecamp's ""Shape Up"" process spiking may be an initial uphill technique used to suss out the rest of the cycle's work and uncover all the hidden issues.Basically, you blaze a trail to the most disgusting, kluge-y, and otherwise slapdash implementation that validates your assumptions and satisfies your constraints while making note of everything that needs further work. That lets you bail early if some unknown issue will block success given the current criteria and constraints, and sets you up with the a list of the 80/20 work required to deliver the completed project."
Agile's early evangelists wouldn't mind watching Agile die,mmcnl,"on April 24, 2020","That's not agile, that's waterfall. With my team, I usually have just 2 or 3 ""stories"" that are taken up during a sprint. The rest is up to the development team. Works quite well. No one's asking to create dozens of tasks. A rough outline of what we're trying achieve combined with a high-level overview of what we think would need to be done is usually enough to get started in a sprint. If we fail, we fail, no one gets mad. That's agile if you ask me."
Agile's early evangelists wouldn't mind watching Agile die,sdiupIGPWEfh,"on April 25, 2020","The likes of SAFe argue otherwise, having you plan out and commit to _three month's_ worth of stories in advance. It's supposedly still ""agile"" because the plans you've ""committed to"" are expected to change as you go. Oh, and it's set up such that other teams are expecting to be able to depend on your team delivering stories by the sprints you said they'd be done, of course. No problem, as those dependencies probably existed anyway and now they're made explicit and public. As long as you've delivered the increment of work you'd promised when the three months are up, nobody gets fired. Totally agile."
Agile's early evangelists wouldn't mind watching Agile die,Buttons840,"on April 24, 2020","Is it a case of too many cooks in the kitchen?Company and developers are busy and successful, so they hire more, which continues until they are no longer successful.They remain busy, however, progress on the product is roughly constant. All the additional work capacity is spent on meetings and otherwise organizing the increased worker count.I believe the above describes every situation in which I have been asked to break down Jira tasks into unnaturally small tasks."
Agile's early evangelists wouldn't mind watching Agile die,ebiester,"on April 24, 2020","This is not a question of agile or not. This is software estimation and design.To be able to decompose a feature, you need to learn how to build the software in your head before you go to paper. Consider a large billing page, for example.Step 1 is to look at the front end. What components do I need to build? (React might use components, or a set of partials and templates in rails, for example.) So, then, I know I need X subtasks, where I will build the pieces I need to expose that behavior to the client to start.I then look down into the backend. That might be a simple task on the backend, or given 20 minutes of looking, I might see problems that I'll need to tackle. The problems are their own subtasks. I may be able to group some of the front end to a single back end ticket, or I might need a separate subtask for each.Now, I'm likely to miss something. However, that's why this is an estimate rather than a concrete task list. It's to get started so that we know, at minimum, what it's going to take.It's not necessarily simple, but it is a skill that can be developed."
Agile's early evangelists wouldn't mind watching Agile die,wvenable,"on April 24, 2020","> To be able to decompose a feature, you need to learn how to build the software in your head before you go to paper.Even easier than building the software in your head is actually building the software.  I often don't know what the shape of the problem is until I've built something.  The users often don't know what they want until they've seen something.The failure of Agile as implemented is that it's still all about extensive meetings and planning.  Software is not like building a bridge where you write out the blueprints and the expensive part is then building the bridge.  Software is the blueprint.To be truly agile is to be able to get software features and changes running and out to users as quickly as possible.  You can never get all the information -- if users could provide the details absolutely necessary to build the software on day one then they'd be the programmers.  Being experienced helps you naturally scope problems but you'll still be wrong from time time.  Being able to iterate on users feedback and dealing with your own failed assumptions is the key."
Agile's early evangelists wouldn't mind watching Agile die,constantine42,"on April 26, 2020","Yes and no. Testing is a very important part of agile, yet if you don't have a somewhat final internal design, you will find yourself changing your unit tests every time you refactor your code. As a rule of thumb, changing your unit tests is a no-no.First off, it means your code is brittle. Second is that you can't trust tests that must change every time your code changes. Might as well not even have them.Unit tests are supposed to tell you if your refactoring is still working. For the most part, you should only refactor implementation details, not the ""API"".There is also a design to uncertainty trade off. The less you know about something, the less time you should spend designing because you can't design something you don't understand. But the more your understand something, the more time you should probably spend designing.Knowing how much design is too much is subjective and personal. I forget where I read it, XP(Extreme Programming) or Code Complete, but someone worth listening said, to paraphrase, ""I've never regretted spending more time on design before I started coding"". And I'm pretty sure it was part of XP that said the main purpose of XP(Agile) is to deal with the unknown. The more you know, the less Agile and the more waterfall you should be, saying that for some projects, a 6 month sprint is perfectly valid.I am in an interesting situation where I am both the programmer and the domain expert. Generally customers come to our team describing a problem that other companies can't figure out. We're pretty much allowed to design everything how we feel like because we're the best at it. We can do virtually any project in a single go of it without feedback from the customer, but we still do agile because it helps with scheduling, planning, prioritization, etc.We're a ""value add"" team, which makes things really interesting. None of our work is sold, but the work is important to land large contracts for the companies core services."
Agile's early evangelists wouldn't mind watching Agile die,seangrogg,"on April 24, 2020","> I often don't know what the shape of the problem is until I've built something.This is the majority of estimation failures as far as I've seen. You can only ""estimate"" so far and then leave significant padding for all the other minutia that will likely creep in."
Agile's early evangelists wouldn't mind watching Agile die,BigJono,"on April 25, 2020","This is why I like to estimate on a more macro level. Define features loosely, with a few lines of text about what they are and how they relate directly to a business goal (how will it make money, make the product better etc), then as a dev, you should be aligning the work to that (which is a piece of cake because they're still flexible).You should still have more granular planning, but it should serve the purpose of aiding the dev in completing the feature. You decide to do more granular planning when, as a dev, you look at a feature and go ""The implementation is still ambiguous or I still have questions about how it relates to business goals"".Basically, invert the communication channels and shift responsibility to the devs. They have some loose business goals to hit, and the other staff provide support when they need it.This solves so many problems I run into in enterprise dev. It kills Parkinson's Law (since the team members that are in the bottleneck are now responsible for the bulk of work generation within the team), it also gets rid of a whole class of poor decisions that are made without the proper context (since now you have a closer relationship between business goals and development)."
Agile's early evangelists wouldn't mind watching Agile die,FridgeSeal,"on April 25, 2020","I have the same issue!Maybe it was just my particular job, but so much of my work was figuring out how to do xyz, so it was hard to give estimates for something whilst I was still figuring out the scope and complexity of along with how it even works and I was rarely, if ever doing the same/similar thing multiple times. Whenever project managers did push for me to break things down further they’d then immediately complain about too much technical detail."
Agile's early evangelists wouldn't mind watching Agile die,rezendi,"on April 24, 2020","I wrote this, so I'm obviously biased, but: https://techcrunch.com/2018/12/09/jira-is-an-antipattern/"
Agile's early evangelists wouldn't mind watching Agile die,anthonyrstevens,"on April 24, 2020","Nobody can. But anybody can ask ""What is the next task that needs to be done?"""
Agile's early evangelists wouldn't mind watching Agile die,loopz,"on April 24, 2020","So building constructions blindfolded is the norm? Sounds like recipe for entangled messes.It has always been at systems thinking, design and architecture, in that order. Doing it organically is a magic feat rarely done well."
Agile's early evangelists wouldn't mind watching Agile die,grobins2,"on April 24, 2020",You're not the only one. My team and most teams in my company made the conscious decision to not use subtask.
Agile's early evangelists wouldn't mind watching Agile die,Someone1234,"on April 24, 2020","Agile is the worst form of Software Development Methodoloy, except for all the others.Which is to say: To all the people jeering for Agile's demise, please provide a superior alternative. I came from a world dominated by Waterfall, and I never want to go back to that. A lot of companies get Agile wrong, and it isn't a panacea, but it is much closer to what developers are naturally inclined towards (e.g. rapid incremental improvements) than Waterfall ever was.So I challenge anyone who wants to replace Agile, please lean into how developers work rather than trying to mold their work onto your rigid front loaded methodology. Trying to bring in ideas of other industries, like engineering or architecture, that build physical goods and only have one shot at is a folly."
Agile's early evangelists wouldn't mind watching Agile die,quicklime,"on April 24, 2020","Agile is the worst form of software development methodology, second only to waterfall. It's still pretty shitty, though.One of the reasons Agile (with a big A) is so successful is that its peddlers have convinced everyone that there are only two options: Agile and waterfall. When you're up against a strawman, it's easy to win. But it's absolutely a false dichotomy.There's a quote in the article that I like:> Find me an actual tech company that talks much about Agile, and I will be astounded.In my experience, people at tech companies (at least the FAANGs) rarely talk about Agile, although they do talk about things like continuous integration/testing/deployment. They do not obsess over methodologies for how to move post-it notes around a whiteboard (Scrum vs Kanban) or agonize over how to word a user story narrative, or other parts of Agile Theatre.People at some non-tech companies, especially those supposedly going through a ""digital transformation"", seem to have fully bought in to the crap that Certified Agile consultants are selling though.So a superior alternative to both Agile and waterfall is what's in use at a lot of the big tech companies. For example, the engineering culture at Google, which relies on design docs and a very good set of developer tools and infrastructure. It's not perfect, but it's far, far superior to Agile.And before anyone makes the argument that those non-tech companies are not doing ""real Agile"", but Google is, let's be linguistic descriptivists and accept that Googlers don't call their methodology ""Agile"", whereas the Scrum consultants at big corporates do."
Agile's early evangelists wouldn't mind watching Agile die,parasubvert,"on April 25, 2020","This is ultimately the point I think Mary is trying to make.  Agile became and end to itself rather than a way to learn how to build software within minimal waste and delay given imperfect information.   Obsessing over it is a cargo cult.That said , plenty of tech companies have inconsistent practices that don’t necessarily lead to great success.  To say Google’s methods are “far far superior” to Agile assumes they’re uniform, portable or relevant externally, or that they lead to above average success.  That’s debatable given Google’s reputation for abandoned half-built products and an almost comical lack of customer focus."
Agile's early evangelists wouldn't mind watching Agile die,cachestash,"on April 25, 2020",Are there any public examples of a google design doc? Would like to study it
Agile's early evangelists wouldn't mind watching Agile die,CraigJPerry,"on April 24, 2020","Yeah people have short memories of the pre-agile role demarcation and wasted handover time between them.It was utterly frustrating to be powerless to improve specification quality and find out you built exactly what was asked but you were asked for the wrong thing.The silos were horrible. Devs were often as bad as BAs, dev’s just were just crapping on the testers instead. Spare a thought for the production ops person at the very end of the chain. Here comes 3 months of developer work in one weekend and no it doesnt work but we’re still going live because the entire tech org is invested in this release. Now you have smaller squads, you can postpone a release without it looking bad on the top person and thus affecting your career prospects.In agile models you have the power to fix crap processes that don’t work. You can call out any BS on the retrospective and make it super visible when things are being swept under the rug."
Agile's early evangelists wouldn't mind watching Agile die,Spooky23,"on April 24, 2020","This.I worked on the customer delivery side of a $750M software project that was a steaming pile of shit, with critical defects that were known for a year with zero effort to address. The integrators were paid to deliver a spec, and it took about a year to get change orders created to diverge from the spec.The old school waterfall outsourcing models are truly awful, but you don’t really understand how bad unless you’ve lived it. Stupid agile religious practices are dumb for any startup type org, but are probably better than the alternatives in many big enterprise scenarios, where the goal is chunk up the work so marginally qualified people can do something."
Agile's early evangelists wouldn't mind watching Agile die,thomascgalvin,"on April 24, 2020","> To all the people jeering for Agile's demise, please provide a superior alternative.The goal of Agile is to let smart people work incrementally towards a somewhat nebulous goal. The ceremony that's arisen around that tends to be put in place by people who feel the need to manage, but don't know how to help their developers achieve that goal.The alternative, as far as I've seen, is to hire smart, curious people, let them work closely with the end user, and pay them a lot of money. In this situation, the engineers will typically self-organize effectively."
Agile's early evangelists wouldn't mind watching Agile die,closeparen,"on April 24, 2020","My org was like that when it was 20 people on one floor doing pretty much their own thing in groups of 2-4.Now it’s 100 people across two countries, expected to collaborate closely with sibling orgs. Management philosophy has shifted to “we will ask a few handpicked experts to write down the best way to do a thing, and then everyone else is a machine for executing that procedure.”If software engineering worked like that, we would have automated it."
Agile's early evangelists wouldn't mind watching Agile die,username90,"on April 24, 2020","> To all the people jeering for Agile's demise, please provide a superior alternative.Give individuals ownership over different parts and then let them self organize, that is all you need if you hire competent people. I'll never work at a place which doesn't work like that again."
Agile's early evangelists wouldn't mind watching Agile die,closeparen,"on April 24, 2020","To be fair, there are a lot of engineers on the market with a small-but-positive value under a structured process who would be totally useless in an environment like this. I can see why it might be rational to managers."
Agile's early evangelists wouldn't mind watching Agile die,_glsb,"on April 25, 2020",Sub prime loans are the only thing out of that list where the public was scammed. Everything else you listed are internal banking things.
Agile's early evangelists wouldn't mind watching Agile die,closeparen,"on April 28, 2020","The bailouts were loans and equity stakes which got paid back, not grants."
Agile's early evangelists wouldn't mind watching Agile die,drapred7,"on May 4, 2020",https://en.m.wikipedia.org/wiki/Martingale_(betting_system)Gambling with unlimited amounts of other people's money is going to be profitable.https://www.rollingstone.com/politics/politics-features/2008...
Agile's early evangelists wouldn't mind watching Agile die,sourcaustic,"on April 24, 2020","Please do not aim to replace Agile, you'll just be creating new problems. Go back to the basics of the Agile Manifesto, understand where your organization fits in the problems that it aims to fix, then overview the different solutions proposed by various methodologies, pick and choose the ones that address the biggest problems that you're facing and adapt them for your own purpose. Start small, as each solution may introduce some processes and distract from the actual mission. Augment only when necessary. You're Agile.You don't need to buy entirely into a single methodology. When people say Agile in software today, they really mean the Jira-flavored Scrum. Some now claim that they've abandoned Scrum and you hear more about Kanban. Sometimes they really are switching, other time they're really just doing Scrum with a Kanban board. But again, they're often falling into the same traps of forcing solutions, rituals, and processes they might not really need into their flow.You want to be Agile? Start small. A simple checklist is a good way to start."
Agile's early evangelists wouldn't mind watching Agile die,opportune,"on April 25, 2020","I currently work at a FAANG and we have a chaotic, low-touch approach that honestly seems to work pretty well. There are only two issues I see with it: it requires a high degree of trust in the engineers from management, and it could be possible to skate by doing the bare minimum without it being noticed (it is noticed usually, it's just not publicly shamed in regular standups). This has the major benefit of allowing developers to manage priorities as things change/pop up/assumptions change, and gives them the latitude to take on complex tasks that aren't easily decomposed or estimated a priori.I think part of the issue is that Agile is meant to be a Process imposed from top down to improve productivity by X%, a way for management and a small army of backlog/task managers to say they are doing Something and having impact (or literally the only thing they actively do). Not only can it easily get in the way of that, it almost always fosters an environment of shaming and lack of trust, because it is too tempting for estimates to be taken too seriously or productivity/performance measured ""objectively"" by invoking the task-tracking system (in which case you incentivize only taking on very easy, very well understood tasks). It doesn't always devolve to that, but I think at many places if anybody Important up in the management chain starts thinking that way, it will inevitably trickle down. Thus any sufficiently large organization will corrupt Agile.Perhaps some companies need that level of accountability and visibility, even knowing and disliking the drawbacks, but not all of them. I am honestly not convinced that a rigid process is necessary at all. Yes it makes sense to have a system where you keep track of things that need to be done, but if there's a culture of trust, I don't think the system needs to be gamified or fetishized as much as it usually is."
Agile's early evangelists wouldn't mind watching Agile die,ebiester,"on April 24, 2020","I think you're debating a strawman there. The argument is not that we need to return to other pre-agile SDLC methodologies but rather take what we've learned and go further. From the article:> Now, continuous delivery is what’s expected, and the industry is ready for the next thing. But that next thing shouldn’t be another methodology, according to Mary.> There is no methodology in my field of software engineering that can conceivably last more than five to eight years,” she said. “Everything that is 10 years old is obsolete. Everything that is 20 years old is archaic.”> Furthermore, she said, methodology requires codification. Beginning with the Capability Maturity Model (CMM) in the ‘90s, software development methodology meant developers had to show they had standards and that they followed them, rather than demonstrating that their standards were constantly in flux depending on consumer needs. That’s the definition of quality standards lean manufacturing practitioners in Japan originally espoused, Mary said, and they’re not compatible with methodology. Instead, they’re all about learning.> To that end, Mary is excited about all the ways artificial intelligence will allow software engineers to learn better and faster. Automated testing, continuous deployment and cross-functional collaboration are now table stakes, Mary and Tom agreed. Cutting edge companies will discover the next great approach through an engineering mindset and a willingness to learn.___Consider that Mary and Tom Poppendieck were responsible for many of the Lean inclusions of the agile movement, which (largely) came from watching plant manufacturing at Toyota. Similarly, much of the DevOps movement was tied to this as well. If you want to talk about what is next, it is likely taking a first principles look at what we're doing today, questioning best practices again, and saying, ""if we were going to make a manifesto in 2020, what would it look like?"""
Agile's early evangelists wouldn't mind watching Agile die,tootie,"on April 25, 2020","I honestly don't understand anything that was in this article. Continuous delivery is directly applicable to agile. They are complimentary, but not even really related. From my point of view, the essence of agile development is just continuous improvement. The notion of user stories is a proxy to delivering a small unit of user value from idea to tested and deployed as quickly as possible without having to worry about future requirements."
Agile's early evangelists wouldn't mind watching Agile die,Someone1234,"on April 24, 2020","You claim I'm ""debating a strawman"" but then quote the article that literally says they have no alternative in mind (my chief critique) and point towards artificial intelligence to solve the issue somehow.The only ""strawman"" here seems to be taking my point about pre-Agile methodologies out of context, and using it to dismiss the entire idea that this article is unconstructive/has no actionable solutions."
Agile's early evangelists wouldn't mind watching Agile die,ebiester,"on April 24, 2020","The advice they are giving is to stop trusting methods, take the best practices that make sense, and trust your engineers to build a bespoke process from those building blocks.> “I don't care if it’s Lean or Agile, there’s no silver bullet where if you just follow this formula that somebody else followed, you’re going to be great,” she said. “So today, my favorite word is ‘engineering.’ Just let engineers be engineers.”Maybe we need to call it the Lego process. SCRUM is Duplo. Waterfall is worse Duplo. Start there if you need, but get to Lego instead. Maybe Duplo is enough for you."
Agile's early evangelists wouldn't mind watching Agile die,ulisesrmzroche,"on April 24, 2020","You don't need to provide a viable alternative when you criticize something, this is a false dilemma."
Agile's early evangelists wouldn't mind watching Agile die,Someone1234,"on April 24, 2020","Nobody you replied to said they shouldn't be allowed to criticize Agile.The criticism in this comment thread was that their advice wasn't actionable, not that actionability was a prerequisite in order to criticize Agile at all. There was no false dilemma here because there was no choices provided (false or otherwise), merely a weakness in an argument raised."
Agile's early evangelists wouldn't mind watching Agile die,hinkley,"on April 24, 2020","> ""Everything that is 10 years old is obsolete. Everything that is 20 years old is archaic.”Which is not entirely true since some of the best parts of Agile are XP practices that almost everybody does by default now...Someone once said that the only successful Scrum projects are also doing half of XP (as in, things Scrum doesn't prescribe but are essential anyway). I am still looking for a counterexample."
Agile's early evangelists wouldn't mind watching Agile die,downerending,"on April 24, 2020","There are plenty of examples.  The Linux kernel development process comes to mind.I suspect that most knowledgeable developers rolled their eyes when Agile was ""invented"".  It's a mish mash of a lot of things that were already obvious at the time and some weird kool-aid like pair programming.  And just one more in a long line of consultant enrichment schemes."
Agile's early evangelists wouldn't mind watching Agile die,drngdds,"on April 24, 2020",Yeah. I maintain that most complaints about Agile are actually just complaints about crummy managers. It's really not that bad (in my experience) when the people you're reporting to have reasonable expectations and treat estimates as estimates.
Agile's early evangelists wouldn't mind watching Agile die,seph-reed,"on April 24, 2020","For the most part.  Nobody who wants to be a manager should, and everyone who could would rather not.The big drawback to good managers is that they stand up for their teams and don't kiss boot the way bad ones might."
Agile's early evangelists wouldn't mind watching Agile die,dionian,"on April 24, 2020","Agile is supposed to be the rejection of methodologies and embracing of people over processes. That's the sheer irony in all this.""Individuals and interactions over processes and tools"""
Agile's early evangelists wouldn't mind watching Agile die,jimbob45,"on April 24, 2020","The problem with Agile is that vanilla Agile almost certainly doesn't fulfill your company's requirements. However, if you put some serious thinking into tuning it for what you need, it will be serviceable.Agile would work much better if every implementation stated upfront, ""Does not work right out of the box""."
Agile's early evangelists wouldn't mind watching Agile die,Groxx,"on April 24, 2020","Agile's pretty much only defined by being ""not waterfall"" (which is defined as ""not agile, and worse"") and ""if it doesn't work, you did it wrong"", so that's sort of a tautological statement."
Agile's early evangelists wouldn't mind watching Agile die,tremoloqui,"on April 24, 2020","The terms ""agile"" and ""Agile"" have two separate meanings.Big 'A' - ""Agile"" is waterfall re-branded - an excuse for corporate empire building and business as usual.  It involves lot's of meetings and not trusting those who build software to do the right thing.Small 'a' - ""agile"" is the implementation of the manifesto, which basically comes down to smart people figuring out how to work together towards a goal, often by taking small steps.Until the terminology is sorted out the discussion can't help but be confused."
Agile's early evangelists wouldn't mind watching Agile die,Frost1x,"on April 24, 2020","Since businesses are the ones who employ software developers, 'Agile' is the only Agile that matters because that's the definition the people who pay money use.We can talk all day about principle philosophical differences and what is/isn't 'agile,' but there has been a consensus from businesses in industry that 'agile' is 'Agile.'Agile has become an excuse for terrible planning and offloading more and more work with ever increasing responsibilities to developers. At some point, enough professionals will reject following these terrible frameworks through different mechanisms. We're definitely not there yet, unfortunately."
Agile's early evangelists wouldn't mind watching Agile die,tremoloqui,"on April 24, 2020",The solution imo is to remove those parts of the industry that are driving the mistaken consensus.Build software in small firms or consultancies who will treat it as a craft.Maybe more a hope than a solution.
Agile's early evangelists wouldn't mind watching Agile die,a_c_s,"on April 24, 2020","Agree 100%: agile practices can be great.Hiring a consultant to teach 'Agile' is easy: the change of practices from something completely top-down to something that empowers the people at the bottom is the hard part and some orgs aren't capable of changing. Too many orgs are built around micromanagement, they don't know any other way."
Agile's early evangelists wouldn't mind watching Agile die,tremoloqui,"on April 24, 2020",To these orgs it's a matter of trust and power.
Agile's early evangelists wouldn't mind watching Agile die,ska,"on April 24, 2020","In my experience ""agile"" was a loose rebranding of ideas that had been around for a long while (see all the other non-waterfall approaches that predate it) and ""Agile"" (i.e. the manifesto) was just one attempt at one of these sort of methodologies.Once it got popular, ""Agile"" was co-opted by all the usual players (cf ""extreme"" before it, to a lesser degree).The important idea is ""agile"" vs. waterfall, whether or not that includes anything directly recognizable as ""Agile"".  Or call it something else, doesn't really matter.Recent history shows you can certainly do things directly recognizable as part of the Agile methodology while demonstrably not being agile, so modulo the no true scotsman fallacy it's a much less fruitful distinction to draw."
Agile's early evangelists wouldn't mind watching Agile die,dennis_jeeves,"on April 24, 2020",">In my experience ""agile"" was a loose rebranding of ideas that had been around for a long while (see all the other non-waterfall approaches that predate it) and ""Agile"" (i.e. the manifesto) was just one attempt at one of these sort of methodologies.You are correct. The Agile term was probably marketed to the management types as a some breakthrough methodology to _finally_ control the budget for software development. Then it took a life of it's own as many things do."
Agile's early evangelists wouldn't mind watching Agile die,tremoloqui,"on April 24, 2020",Most good ideas predate their branding.
Agile's early evangelists wouldn't mind watching Agile die,ska,"on April 24, 2020","True, but they were already branded albeit not as successfully.  And this is very much one of those things that is somewhat evergreen - it just gets a new branding every decade or so.I guess I'm saying ""Agile"" was/is one of several, and that's ok (good even).  It's worth not getting bogged down on the ""Agile"" part and focusing on the more essential things."
Agile's early evangelists wouldn't mind watching Agile die,lunias,"on April 24, 2020","IMO Agile has become regulatory capture. It's a means by which non-engineers can extract value from a booming market which doesn't directly benefit from their skills.That being said. I think there is a lot of wisdom in the original agile manifesto. The core principles are solid, but the methodology has clearly been co-opted by consultants and supported by management looking to increase the headcount under themselves.I've often struggled to understand why my team is made up of only 20% engineers with the other 80% pretending to create value by holding meetings to tell engineers what to build next when I feel like it's your clients that should be doing that.Ultimately it's engineering that becomes the constrained resource which leads to technical debt in favor of pushing out product's features.I would venture a guess that most engineers have used (critically) more software in their lives than any non-technical person driving the development of the product. Why then are engineers not the most consulted people on the efficacy and value of new features? I think there is a big myth out there that engineers are incapable of directly handling client feedback."
Agile's early evangelists wouldn't mind watching Agile die,omerbensaadon,"on April 25, 2020",This completely short-sells the role of good designers in an organization.Creating the _right_ thing is extremely hard.
Agile's early evangelists wouldn't mind watching Agile die,lunias,"on April 26, 2020","Forgive my omission I didn't have designers in mind when I wrote that.Here is what I think: I would place designers closer to the engineering (necessary) side of the spectrum. Designers do in some cases build tangible things, are very technical, and they approach refinement from angles of impact that some engineers may be unaware of.I do think there are quite a few interpretations of what a ""designer"" does across many industries. In the field of software did you have in mind architects, UX, product, something else, all of the above?The definition of engineer includes design in both it's noun and verb form:""a person who designs, builds, or maintains engines, machines, or public works.""
""design and build (a machine or structure)""But the definition of designer makes no mention of engineer.As such, I would enforce that my designers are actually engineers and stay away from ""pure"" designers that do not have the technical foundation necessary to validate their designs. Design in a lot of ways is an emergent property of the engineering task at hand - unless we're talking about purely artistic pursuits."
Agile's early evangelists wouldn't mind watching Agile die,amznthrowaway5,"on April 26, 2020",Good designers can't design without a deep understanding of the engineering. Non-technical people shouldn't be driving or designing engineering projects.
Agile's early evangelists wouldn't mind watching Agile die,mywittyname,"on April 24, 2020","I've been through three full-fledged ""agile transformations"" in my career.  I hate agile so much.  I hate it because it encourages dogmatic behavior instead of rational behavior.I think it has survived so long because it provides its practitioners with two ace excuses:  when things fail, they say, ""what we did wasn't really agile,"" and when somebody proposes and improvement they don't like, it's always, ""that sounds like waterfall.""  A team can't recover from their agile transformation until both of those phrases disappear from the team lexicon.> “Way too much of Agile has been not about technology, but about people and about managing things and about getting stuff done — not necessarily getting the right stuff done, but getting stuff done — rather than what engineering is about,”I'm not sure agile was ever designed to fix this.  The whole process is really handy-wavy about the actual engineering: ""we'll just make this a spike.""  The process also demonizes documentation and design work, which is antithetical to most engineering.That being said, I love iterative development, and I like the concept of stories as descriptions of functionality.  But I do think agile, as taught by most consultants, is really designed for consultants who build CRUD web-based applications.  Sprints are timeboxed so consultants can charge by the spring, and stories lack implementation details because companies hiring consultants don't want or need to know how their sausage is made.  The further away your product is from that area, the less effective agile is; some companies really need to design their sausage well, up front, because they are going to be eating it for years.A process that's built up over years has become the way it is typically for good reason.  And in my experience, teams forced to transition to agile will end up shoehorning their existing process into ""agile"" and calling it done, so most executives don't really see how their ""transformation"" failed."
Agile's early evangelists wouldn't mind watching Agile die,woutr_be,"on April 27, 2020","> I've been through three full-fledged ""agile transformations"" in my career. I hate agile so much. I hate it because it encourages dogmatic behavior instead of rational behavior.I'm going through that right now, in fact for the past two years our team has been transforming into agile. Although when I say team, it's more the developers that are forced to work in an agile way. The business is still very much waterfall, but for them it's okay. If they want to throw a new story into the sprint, they'll just call it being ""flexible"", and adjusting to business requirements. It's not because they can't plan two weeks in advance.There's also way to much time spend on story points, I always assumed these were estimates, to get a sense of how much can be achieved, if a story runs over, so be it. However here, these are seen as deadlines, a 3-point story shouldn't take longer than a day or two. Our ""scrum master"" is constantly asking wether we can achieve all our stories this sprint, what's the point of even estimating if you're going to do that. And recently, we now have to plan our two week sprint, day by day, committing to 2 week plan before the sprint even starts. There's nothing agile about that to me."
Agile's early evangelists wouldn't mind watching Agile die,bane,"on April 25, 2020","It's gotten to the point where it seems that the projects that do more of the Agile ""stuff"" move much slower because they're spending so much of the working time doing that stuff than slinging code. Where I'm at, we're running something around 4 dozen projects at once and the teams that really focus on doing all the ceremonies are simply left in the dust by the teams that don't.Here's another anecdote, a couple big teams that went the full SAFe route spent 3 years building something that ended up being thrown away and replaced in 4 weeks by 3 staff working part-time who were just given some instructions, some deadlines, and told to go code.It's become repeatable, big teams toiling for years getting outpaced by smaller, more ""agile"", teams.The balance has gotten out of whack again and it's really time to start over again. When I go back and read the original manifesto, what I see today in modern practice looks nothing like what was intended. The point in too many shops has been to accomplish the Agile things, not to deliver."
Agile's early evangelists wouldn't mind watching Agile die,jpswade,"on April 25, 2020","In your anecdote, though I don't doubt the situation, it seems to me that something has gone wrong.The manifesto itself says:> Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescaleI get the impression as to what you're witnessing is, water-scrum-fall...See: https://i.imgur.com/6eqk7eF.pngOn the flip-side, your team of renegades managed to deliver in 4 weeks, while being great, I would question how sustainable that is. Also I get the impression they had skin in the game.> what I see today in modern practice looks nothing like what was intendedYou're 100% right. I don't think it means agile should die, I think it means people have forgot what it set out to do.Scrum existed before agile and is a framework to help people work in an agile way. However people have got too wrapped up in the orthodoxy and have forgot what agile is actually about.My mantra is simple: Release early, release often, listen to the customerWhen I first got into software development it was because of open source software. On the SourceForge website, under the “Promoting your project” section, you’ll see it say “Release early, release often. Frequent releases state loudly that your project is alive”.Years later, I learned that this philosophy was popularised by Eric S. Raymond in his 1997 essay The Cathedral and the Bazaar. Only, his version also says “listen to the customer”, an important part that’s all too easy to forget."
Agile's early evangelists wouldn't mind watching Agile die,bane,"on April 25, 2020","> My mantra is simple: Release early, release often, listen to the customerI just wanted to amplify this simple, elegant, statement. I don't have anymore to add, but this is a better statement than the entire Agile industry has managed to produce."
Agile's early evangelists wouldn't mind watching Agile die,RcouF1uZ4gsC,"on April 24, 2020","> At the time, software development was suffering from a mistaken belief: that building things fast and building things well were fundamentally opposed.I thing “good, fast, cheap; pick 2” is still generally valid."
Agile's early evangelists wouldn't mind watching Agile die,riazrizvi,"on April 24, 2020","Note to self: Remember whenever you think ""Good,fast,cheap; pick 2"", it frames your choices as either ""produce something not-good"" or ""produce something and take your time or hire lots of people"". You are again regressing to your ivory-tower-inventor tendency, you spend too long perfecting and the perfecting gets worse and worse. Instead it's ""fast+cheap, fast+cheap, fast+cheap"" to minimize the time between customer-hypothesis and customer-trial. You do that until you achieve ""good enough"". This is the surest and most economical way to achieve ""good"". This is agile."
Agile's early evangelists wouldn't mind watching Agile die,MattGaiser,"on April 24, 2020",">  until you achieve ""good enough"".Or until the ever-growing pile of garbage that agile produces gets too tall and tips over. Then you throw away the codebase and start again :)."
Agile's early evangelists wouldn't mind watching Agile die,analyst74,"on April 24, 2020",This is the way.
Agile's early evangelists wouldn't mind watching Agile die,Tade0,"on April 24, 2020","> Instead it's ""fast+cheap, fast+cheap, fast+cheap""I've seen this before. After the second iteration it becomes neither fast nor cheap."
Agile's early evangelists wouldn't mind watching Agile die,joejerryronnie,"on April 25, 2020","A colleague once had a paper taped to the outside wall of their cubicle which read “Why do we never have time to build it right, but we always have time to build it over again?”Management was not a huge fan of this piece of paper."
Agile's early evangelists wouldn't mind watching Agile die,koonsolo,"on April 24, 2020","Developers are your biggest cost, so I never understood why fast and cheap would be opposed to each other. And if you buy off the shelve, most of the time it's both faster and cheaper than building it yourself.So I always felt that fast and cheap go hand in hand.I think the triangle is:- features- quality- cost (=both price & time)Edit: I forgot to mention that you cannot just throw more engineers at a problem to make it go faster. There is such a thing as an optimal team size.Another edit (sorry it's Friday evening here;)): The faster you can get it done, the cheaper it will be."
Agile's early evangelists wouldn't mind watching Agile die,OrangeMango,"on April 24, 2020","> Developers are your biggest costThis is unlikely to be true.  Bad decisions are your biggest cost.An employee has a ""return multiplier"" - for every dollar you spend on them, what is the return to the business?  Sometimes it is high.  If so, the developer is very cheap.  Sometimes is it low, or negative.  If so, the developer is expensive.Why would it be high or low?  Part of that is developer skill, but mostly it is how well your organization runs itself and makes decisions."
Agile's early evangelists wouldn't mind watching Agile die,koonsolo,"on April 25, 2020","I 100% agree with you. I have this in my head like this: a developer with a low rate might be very expensive, and a developer with a high rate might be very cheap.Organization is definitely a big factor.But when I said developers are your biggest cost, this is from an accounting point of view."
Agile's early evangelists wouldn't mind watching Agile die,EdSharkey,"on April 24, 2020","We have to peg quality with rigorous testing or else cost (time spent) will be variable upwards to infinity (due to accumulation of untenable technical debt).Therefore, if cost must be pegged due to limited time/funds and quality must be pegged due to existential risk then quantity/richness of features must float and be flexible.All good product owners will learn this truth eventually."
Agile's early evangelists wouldn't mind watching Agile die,namdnay,"on April 24, 2020","Sometimes I’m not sure you can have just good and fast, however much money you throw at it. Some things just take time to work through."
Agile's early evangelists wouldn't mind watching Agile die,vpeters25,"on April 24, 2020","Every time I see an ""agile sucks"" post, I take the time to read it and every time (so far) I have found they blame the process for some key part of agile they missed. Quote from the article:“Way too much of Agile has been not about technology, but about people and about managing things and about getting stuff done — not necessarily getting the right stuff done.”This is the whole point of agile: progress on iterations, inspect and adapt at the end of each iteration.Your team might build the ""wrong stuff"" for an iteration, realize it (inspect), then make a course correction (adapt). If you end up delivering the ""wrong stuff"" is because you didn't follow this very core principle of agile.I find it hard to believe these so called ""Agile Early Evangelists"" can make such a statement. Their background in lean development should have made the familiar with empirical process controls, from where lean and agile come from.My guess the author quoted them selectively to fit the ""agile sucks"" narrative of the article.Edit: expanded last 2 paragraphs."
Agile's early evangelists wouldn't mind watching Agile die,ebiester,"on April 24, 2020","So, it gets complex.I have been privileged to work in a company that really thought about and worked to prioritize the four values on the left. I would follow those agile coaches to any place they wanted. I have been a staunch defender in real life and online, because I've seen it work very well. I also have been on teams with other processes and seen how much worse it can be.I will take the values of agile and push for those, and I'll take the lessons learned such as quick feedback loops, continuous integration, relative estimation, automated tests (which came from people like Kent Beck and Robert Martin pushing them so hard alongside agile), and the good stuff.However, after seeing how badly it can be weaponized against developers, I'm certainly ready to throw out the bathwater, and I think this is what they're talking about. I've seen far too much cargo cult agile and far too much command and control with a light layer of SCRUM.We have agile ""coaches"" who have never learned to code! They take a set of color-by-number technical practices but don't understand how or why they matter! I had to correct someone's slide that got the four values wrong, and their consulting group apparently had been copying and pasting them incorrectly from presentation to presentation!The values and principles of agile are great. The current implementation has some serious debt.(And while we're at it, we could update it. Too many people misunderstood the documentation part. Continuous attention to technical excellence needs to be upgraded to a value. Delivering frequently today means days instead of weeks.)"
Agile's early evangelists wouldn't mind watching Agile die,vpeters25,"on April 24, 2020","> However, after seeing how badly it can be weaponized against developers, I'm certainly ready to throw out the bathwater, and I think this is what they're talking about.Poor management is a separate issue from agile. Even so, I would rather stay on a poorly managed agile shop than go back to a waterfall shop.As far as the ""values on the left"", I like to explain them as a 55/45 split (and adjustable depending on your reality): we still deal with processes and tools, we just take a second to think whether a process is actually needed when we can just talk to someone instead.Example: on a small team, you might just ask ""can someone please approve my changes?"" instead of having a whole jira workflow with code reviews and approvals."
Agile's early evangelists wouldn't mind watching Agile die,ebiester,"on April 24, 2020","Again, you're fighting a strawman.The only alternative to Agile isn't Waterfall. The right alternative is probably something entirely new."
Agile's early evangelists wouldn't mind watching Agile die,loopz,"on April 24, 2020",The alternative is always Doing What Works. Alot of Agile is superfluous Waste. With time it'll only grow more added layers of inefficiencies. The true costs and risks always get hidden away.
Agile's early evangelists wouldn't mind watching Agile die,arduinomancer,"on April 24, 2020","Every time I see a comment on an ""agile sucks"" post I see people saying ""well that's not true agile"".Which sounds a bit like the ""no true scotsman"" fallacy.If so many people have trouble implementing agile maybe it just doesn't work?"
Agile's early evangelists wouldn't mind watching Agile die,vpeters25,"on April 25, 2020","> If so many people have trouble implementing agile maybe it just doesn't work?The problem with agile and other empirical processes of project control is that it goes against the OCD tendencies of scientifically minded people. They assume that, since programming is all math and logic, software development projects should be as well.They add micromanaging processes in a futile effort to control what they perceive as chaos and end up trying to fit a square peg in a round hole."
Agile's early evangelists wouldn't mind watching Agile die,jillesvangurp,"on April 25, 2020","I.e. the old ""you are doing it wrong"" argument. My experience is that there is no right way that you can blindly apply on any project. There is no set of magical agile dogmas that works everywhere. And there is no substitute for decent engineers doing what needs doing.Agile was a neat idea 20 years ago and it changed the engineering practices. However, unlike the methodology, engineering practices continued to change and modern software development practices automate away a lot of what agile processes tried to orchestrate.If you are doing continuous delivery and lean development, you should be conceiving of and shipping software features in time units smaller than a sprint (i.e. continuously). That was very rare 2 decades ago and has become the norm for a lot of tech companies. It requires asynchronous processes and practices. It's enabled by having automated builds, automated tests, and automated deployments. These tools barely existed 2 decades ago and have had a far larger impact on software development then any form of agile.Lots of large OSS projects and software companies have made the shift from doing feature based software delivery to time based software delivery. E.g. MS famously kept missing its own deadlines with windows vista, windows 7, etc. and shifted to having a more predictable release schedule. Ubuntu's LTS releases appear regular as clockwork in April of every second year. Linux ships a kernel every 2-3 months. Mozilla ships Firefox every month.Time based releases are basically about releasing an unknown quantity of software at specific intervals and with a high level of quality. It involves having multiple asynchronous tracks of development and instead of planning which of them need to be ready they simply use quality gates to determine which of them are actually ready to ship. It's a shift from what to when and it emphasizes quality (i.e. good engineering) over schedule.Most agile methodologies are still stuck trying to do feature based planning. It's the project mentality from the nineties where things get commissioned and have to be delivered on a particular schedule. Worse, these things are often under specified and then blow right by their planned deadlines. Just like in the nineties. I've seen a lot of agile projects shipping low quality software doing the wrong things right on time."
Agile's early evangelists wouldn't mind watching Agile die,interactivecode,"on April 24, 2020",With these things the reality of agile is within corporate constraints. The Big managers will want to steer the company and dictate deadlines or goals. While the pure form of agile might work the reality of agile causes a lot of friction.Keep in mind though problems also show up with waterfall or young small startups. Its just which flavor of friction/pain project issue you are willing to deal with
Agile's early evangelists wouldn't mind watching Agile die,legitster,"on April 24, 2020","There are many fingers to point here, but I point mine at bigger consulting firms like Accenture. I have first hand experience with their miserable ""agile"" process at Microsoft.If you want a stapler, you have to schedule a meeting 3 weeks in advance with 2 team leads and 3 contractors who decide what sprint ""getting a stapler"" will be assigned to. Then ""getting a stapler"" gets pushed back two sprints because some priority came along (a vice president somewhere just learned that his binder was on hold for four months). An Accenture contractor from India informs you that a hole punch is on the way. Apparently you checked the wrong box on the stapler requisition form, so you have to start the process over again.Then the Accenture quarterly deck shows they met 97% of all stapler demands for the quarter! Isn't life so much more easier and more measurable now? But they will need to hire more contractors to keep up with capacity."
Agile's early evangelists wouldn't mind watching Agile die,MattGaiser,"on April 24, 2020",That is Agile as a religion.
Agile's early evangelists wouldn't mind watching Agile die,vbtemp,"on April 24, 2020","For the past several years now, each time I join a new team or project, my first objective is to detach and destroy the ""Agile"" process workflow.When you finally liberate a team from Agile, it's just breathtaking how much you can focus on delivering working software that gets deployed with quick iterations that's closely aligned with the business and customer's needs. When free from the tyranny of Agile, teams can be effectively self-organize, remove micro-managers, and quickly adapt to changing needs and requirements. My experience is that staff are usually much happier, more productive, and less stressed once agile is gone.I mean contemporary Agile as pushed by corporations and those awful ""coaches"" (who never seem to be actual developers) --- if you were you design a system whose end goal was making great developers unhappy, unproductive and locked into a dysfunctional system, Agile would be it."
Agile's early evangelists wouldn't mind watching Agile die,trimbo,"on April 24, 2020","> it's just breathtaking how much you can focus on delivering working software that gets deployed with quick iterations that's closely aligned with the business and customer's needsThat's literally the agile manifesto.""Scrum"" is one implementation of what agile was trying to achieve. Maybe that's what you're thinking of?"
Agile's early evangelists wouldn't mind watching Agile die,Jtsummers,"on April 24, 2020","There's Big-A Agile and agile. The manifesto is really the latter, the former is a set (different depending on where you are) of very specific practices that neglect the principles in the manifesto (though, typically, they were derived from them originally).Read SAFe Distilled or SAFe 4.5 Reference Guide for what happens in large enterprises (god SAFe is a fuck up). It consists of some good ideas, but also some very explicit practices that don't help in every effort (and sometimes hurt). It is literally the opposite of Agile, which is supposed to be about flexibility.If you want to hear about its ""success"", just remember it was used for F-35's software...Big-A Agile is based on the belief that adoption of practices is sufficient, and that deep understanding is unnecessary. This is the realm of cargo cults."
Agile's early evangelists wouldn't mind watching Agile die,vbtemp,"on April 24, 2020","> If you want to hear about it's ""success"", just remember it was used for F-35's software...This is the example I use all the time!!Maybe agile is great when you're making an online shopping cart for a e-commerce website, but the idea of using Agile for complex, engineered systems is laugh-out-loud hysterically absurd. And this does not just mean spaceflight software, it basically means anything more sophisticated than a CRUD app."
Agile's early evangelists wouldn't mind watching Agile die,dankoss,"on April 24, 2020","Totally agree. I believe Agile works well in environments with shallow tech stacks, but it has worked terribly in my experience in product companies that build hardware, FPGA dev, embedded software, and other disciplines that can't deliver on two week increments or increments that align well with other disciplines."
Agile's early evangelists wouldn't mind watching Agile die,Jtsummers,"on April 24, 2020","Agile can work well in embedded, I've seen and done it.The thing people have to forget is the notion of ""deliver on two week increments"". It's not about delivering a product that can be fielded each increment, in the case of an embedded system, but about delivering something that has some improvement or new testable component. I can't make an embedded radio handle, in two weeks, a completely new message type (well, depends). But I can do things in each two week interval that is verifiable. I can show that I've actually received the new message, that I can send it back out, that I can pass it through the various internal processors (if multiple processors are used) or processes (if a single one). Then I can start transforming it, storing it, changing other things about the radio state based on the message contents. Each of those is independently verifiable and completable within a short period of time. But taken as a whole, it's a 6-month project. The agile way has you make those small things, verify them, and then move on to the next thing. I can deliver (to the test team, to others using the system) the partially-completed system, it just can't be fielded (and that's fine).And that's not unique to embedded. If you only focus on things that can be fielded in each increment, you'll never develop the more complex tasks, or address the tech debt."
Agile's early evangelists wouldn't mind watching Agile die,vbtemp,"on April 24, 2020","> That's literally the agile manifesto.I know, that's the irony. Agile as pushed today ends up with the compete anithesis of that. It's the difference between ""Agile"" (Capital A), and ""agile"""
Agile's early evangelists wouldn't mind watching Agile die,balfirevic,"on April 24, 2020",Parent's post so closely resembles the agile manifesto that it's got to be on purpose.
Agile's early evangelists wouldn't mind watching Agile die,bjohnson225,"on April 25, 2020","I never really understood the amount of criticism aimed at agile by developers until I switched to a large enterprise. I feel like I’ve gone from a company focused on delivering working software which was supported by the common agile practices to a company which is Agile, really wants you to know just how Agile it is in every other company email, and one where our team will only be judged based on how Agile we truly are.For example, there are days towards the end of the sprint when I’m not allowed to pick up new work and the infinite wisdom of the agile coach is that a ‘clean’ board by the end of the sprint is the what we’re really being paid to deliver (and starting something else would compromise that). This runs alongside serious customer deadlines which are hidden  by the dates the Agile program runs by."
Agile's early evangelists wouldn't mind watching Agile die,raiyu,"on April 24, 2020","Can we just replace agile, and every modern management practice with some mix of common sense, talking to the customer, talking to the team, and being able to voice concerns to upper management where people actually listen instead of running their own agenda? =]"
Agile's early evangelists wouldn't mind watching Agile die,hn_acc_2,"on April 24, 2020","But this is the root of all these issues... Because everyone has a different perspective that underlies their ""common sense,"" so this system of unspoken agreement just falls apart.When you throw in the incentives of compensation and career advancement, politics and human nature are bound to corrupt the process further.This is why codified process will always be better in the long run for most companies, because it's the only tool possible for combatting this"
Agile's early evangelists wouldn't mind watching Agile die,asplake,"on April 24, 2020",...until codified process becomes the problem. It never ends!
Agile's early evangelists wouldn't mind watching Agile die,brazzledazzle,"on April 24, 2020",People that corrupt a process are often the ones it’s designed to stop. It’s not even done with ill  intent more often than not.How do you create a paradigm or process that can be amended adapt to a persistent threat without that amendment process itself being used as a tool to corrupt it?
Agile's early evangelists wouldn't mind watching Agile die,asplake,"on April 24, 2020","I completely agree that you don’t need to assume ill intent. But by that same token, the fact that a paradigm or process isn’t invulnerable does not mean that it shouldn’t be used.Bureaucracy, heavyweight process, and all rest are ways that systems protect themselves. Wasteful though, which is why new paradigms such as Agile come along.Now the Agile ecosystem has become corrupted by a process not comparable to all the above. Not solvable by those means either. It’s a toughie."
Agile's early evangelists wouldn't mind watching Agile die,Ididntdothis,"on April 24, 2020","“being able to voice concerns to upper management where people actually listen“I think that’s what’s missing in most companies. We have 360 reviews, retrospectives and all kinds of stuff but there is no feedback channel up the chain. At my company whenever there are obvious problems management secludes itself and then a solution will be revealed to the underlings who never got heard. Especially in tech it’s pretty safe to assume that engineers at the bottom of the pyramid are as intelligent and educated as people further up the chain so I think their input  is valuable."
Agile's early evangelists wouldn't mind watching Agile die,btilly,"on April 24, 2020","This problem is endemic.It is human nature that when talking to your boss you put things in the most optimistic way that fits your understanding, and your boss hears it even more optimistically.  After a few steps up the chain this results in a complete disconnect from reality.http://www.stamey.info/Humor/shithappens.htm is a humorous but basically accurate take on the dynamic.Now, you say, reality eventually intrudes.  Yes, but it is normal for upper management to not realize that deadlines will slip until about 2 weeks before they do.  And will continue to think it is about 2 weeks off indefinitely."
Agile's early evangelists wouldn't mind watching Agile die,Jtsummers,"on April 24, 2020","> It is human nature that when talking to your boss you put things in the most optimistic way that fits your understanding, and your boss hears it even more optimistically. After a few steps up the chain this results in a complete disconnect from reality.I learned this the hard way, maybe 3 months into my first real job. I was testing safety critical systems, but it was still being developed so the tests procedures were also being developed and executed. I was asked for my status, I said: I've tested about 60% of the system (this one was small enough that that sort of statement was actually valid), everything has passed so far. My boss heard: Everything passed. He released the build to the customer, who found a failure almost immediately (about the same time I did, but I had no idea it had been released). I was taken into a conference room and chewed out for making us look like amateurs (we were, when it came to software). I learned several things: 1) I needed a new job; 2) Never use the words ""done"", ""everything"", ""all"" until everything is actually all done, managers only hear those words and nothing else.> Now, you say, reality eventually intrudes. Yes, but it is normal for upper management to not realize that deadlines will slip until about 2 weeks before they do. And will continue to think it is about 2 weeks off indefinitely.A manager, fortunately not mine I was his peer though he got promoted for his ""successes"", would always say that his products never shipped late. ""How can you say that? I know your last release was 3 months late."" ""We updated the schedule and we hit the new schedule."" ""But you didn't update it until the last month. It was 2 months late by then already."" ""But we hit the final scheduled release date."" He just got lucky that the customers weren't loud enough for his boss to realize the spectacular, repeated failure until after he got promoted. The new manager got hit with it instead."
Agile's early evangelists wouldn't mind watching Agile die,karatestomp,"on April 24, 2020","I too have seen that hears-half-of-what-you-said-and-only-the-good-parts, then gets mad at you because they are shitty listeners, in action. Hell, I've seen it with a guy who appeared to constantly be taking diligent notes, they were just very often incorrect! It's infuriating and there's no arguing with them because they just think you're lying or misremembering (even if you also took notes, or even prepared them in advance then read from them, and, unlike theirs, yours don't suck). The only way to deal with it is to communicate in writing."
Agile's early evangelists wouldn't mind watching Agile die,balfirevic,"on April 24, 2020","Are you saying we should emphasize individuals and their interactions, customer collaboration and responding to change? Perhaps also working software?Well, who would have thought :)"
Agile's early evangelists wouldn't mind watching Agile die,Ididntdothis,"on April 24, 2020","Publish it and you will be rich. Just don't call it ""Agile"" and nobody will notice."
Agile's early evangelists wouldn't mind watching Agile die,danieldisu,"on April 24, 2020","The main problem for me is the misalignment of goals between upper management, middle management and the rest, the higher you climb the less interested they are in they user/client, they only care about some bullshit metric that will end up paying their bonuses. 
This is specially visible in public companies where they only chase the metrics that the market looks in that decade, ignoring the rest or the actual user satisfaction (they do try to put a metric on that, with bullshit forms and all :))"
Agile's early evangelists wouldn't mind watching Agile die,projektfu,"on April 24, 2020","XP, and several other processes, identify the problem as a mismatch between the goals of the developer and the actual customer (not necessarily the end user).  Management doesn’t figure prominently in the solution which is probably one reason why a different form of Agile is usually chosen.  I also don’t know why businesses are so reluctant to have their customers involved in software development.  But you’re definitely right, when all the incentives align on the axis of management and their needs, you get garbage.This is not to say that management isn’t useful or necessary, but they are a facilitator of work, not the patron."
Agile's early evangelists wouldn't mind watching Agile die,Leherenn,"on April 24, 2020","Because the goals and needs of the upper management and of the customers do not align.There's a lot of companies where delivering what the consumers want/need is not the end goal of the company, at best it's needed to help fulfill the end goal."
Agile's early evangelists wouldn't mind watching Agile die,projektfu,"on April 24, 2020","Most process pathologies are the result of common sense.  Waterfall is a description of the usual reaction to undesirable results on the first project—add more planning steps and make people sign off on phases before moving to the next, more expensive phase."
Agile's early evangelists wouldn't mind watching Agile die,commandlinefan,"on April 24, 2020","None of that is ever going to happen until management accepts that developers can't give an accurate timeline on the spot, immediately, after a 10-minute overview of the project.  Which means never."
Agile's early evangelists wouldn't mind watching Agile die,darepublic,"on April 24, 2020","Product Manager > Everyone vote on the story points for this task.  Hold up fingers two or three.  You there.. why did you put up three?Me > Well um.. because I just thought ticket B is a three and this is comparable complexity.Lead Dev > Yea... this is a two.  I mean ticket B.. that can be a two too.Me > OkProduct Manager > Next ticket.  Let's say a five?  Or a four.  Everyone hold up your fingers, is this a five or fourMe > (Looks around to see the popular choice.  Holds up the same number of fingers)"
Agile's early evangelists wouldn't mind watching Agile die,dane-pgp,"on April 24, 2020","I experienced a similar situation.  The team leader looked back at the past few sprints and worked out how many story points we had completed, and calculated how much our salaries had cost the company in that time, to work out a ""cost per story point"".He then went off on his own to talk to upper management and committed, without our input, to large new pieces of work, and was told what the budgets for those deliverables were.At the next sprint planning, he was basically telling developers their estimates were wrong because the number of story points we were deciding equated to more money than the budget for those features.Rather than play along, I simply said ""Well why don't you come up with the estimates for us, then?"".To his credit, he did then stop trying to influence the votes after that, but it wasn't long before the product was put into maintenance mode and he was assigned to a different team."
Agile's early evangelists wouldn't mind watching Agile die,Hermel,"on April 24, 2020",That sounds almost like the original agile manifesto.
Agile's early evangelists wouldn't mind watching Agile die,adamsea,"on April 24, 2020","I think the words we're looking for here are ""accountability, responsibility, leadership"" ;) :/ :| :("
Agile's early evangelists wouldn't mind watching Agile die,robjan,"on April 24, 2020","What you just said can't be packaged up and sold as training courses or countless books, which is why it hasn't prevailed."
Agile's early evangelists wouldn't mind watching Agile die,cs02rm0,"on April 24, 2020","No, because management.A key success of agile was to provide a buzzword that let engineers say no when they were asked for a fixed estimate for a fixed-until-it-changes scope to fit in a Gantt chart.Take agile away and they'll be straight back to demanding to know how long it's going to take to build something when no one's really sure what the something is."
Agile's early evangelists wouldn't mind watching Agile die,adwn,"on April 24, 2020","> Women dominated computing professions from their inception in the 1940s all the way through the 1960s. As the scope of computers’ usefulness became clearer, however, those jobs started going to men.Bullshit. Back then, the term ""programmer"" didn't mean what it means today. A ""programmer"" was someone who entered a program into a computer, or even earlier, plugged in wires according to a schematic. The actual development of the program was almost exclusively done by men, even more so than today (this is not supposed to be a value judgement, nor do I want to justify the situation back then or today).It's really disappointing to see this tired myth of a supposed ""Golden Age of women in computer science"" repeated in the article."
Agile's early evangelists wouldn't mind watching Agile die,raarts,"on April 24, 2020","Related: the article is misguided on the women thing.I teach CS in college. I see it every day. Women on average are more interested to work with people  than men. This hasn't changed despite trying to boost girls' interest in typical STEM fields for 25 years. HR departments have been pouring money into this like mad. Hasn't moved the needle. Research  has shown that girls don't fare worse in math tests if they are told beforehand that girls are worse at math. In countries where the sexes are treated more equally men more often choose thing-jobs and women more often choose people jobs.Who thinks that if society would treat everybody completely equal, all occupations would end up exactly even distributed across the sexes? There are real differences between the sexes.The push towards exact equal distribution in everything is futile, hasn't worked and will not work.I think it's more important that people can choose to do what they want to do.Sounds like a rant, sorry."
Agile's early evangelists wouldn't mind watching Agile die,raarts,"on April 24, 2020","Do note that stem is not one field. It contains medicine and biology but also IT and physics.
Likewise IT is not one field. UI/UX design is very different from infrastructure or backend work. 
Many stats and research lump things together."
Agile's early evangelists wouldn't mind watching Agile die,lunias,"on April 24, 2020","Even if the percentage of women in STEM has gone up do you disagree with the assertion that: ""Women on average are more interested to work with people than men""?I believe that while societal factors have contributed to women pursuing specific career paths, if one was to factor that out or course-correct in some way you'd still see less women in engineering due to their preferences.Is it wrong to feel like on average men and women are different in their preferences? This is not to say that there are not men who exhibit traditionally female preferences and vice versa. If we could undo the last 2000 years of societal programming (and run a new experiment) I think we'd see different preferences in men and women then we see today, but I seriously doubt you'd see 50/50 engagement across the board because men and women are distinct - although they certainly share a common set of attributes."
Agile's early evangelists wouldn't mind watching Agile die,at_a_remove,"on April 24, 2020","I was exposed when it was still eXtreme Programming (back when ""extreme"" was the most nineties adjective you could have) and didn't much care for it then.I keep hearing it touted as this kind of universal cure-all but I just do not think it is applicable everywhere.  On a personal level, the more any given thing is touted to me as the solution for any and all problems, the more suspicious I grow.  The more fervor, the more I draw away.  The more cultish it seems (convert, adhere, rituals, special names, and then finally the narcissism of small differences in practice as exemplified by that old Emo Williams routine), the less I want to participate.The more I have seen it shoehorned into places where it seemed ill-suited, the more this was revealed to me, yet the evangelism continues.  Nothing like watching the tape backup guy, suffering from a flare of gout, hobble over to a room to perform his ""stand-up"" routine to hammer that home.  Of course, we ""probably weren't doing it right,"" but the more I have seen the slavish adherence to the strictures of Agile the more it seemed like this was an exercise in polishing a boss' resume so that he could say he had done The Things when he went elsewhere.Reader, he did.Perhaps the Agile that can be critiqued is not the eternal Agile."
Agile's early evangelists wouldn't mind watching Agile die,MattGaiser,"on April 24, 2020",The project where extreme programming came from.https://en.wikipedia.org/wiki/Chrysler_Comprehensive_Compens...Not a good start
Agile's early evangelists wouldn't mind watching Agile die,dragonwriter,"on April 24, 2020","The weird thing is that all the criticisms of misplaced focus in agile made in the article were criticisms commonly made by early Agile evangelists (including Poppendieck!) of pre-Agile approaches, and the things pointed to that are needed which make Agile irrelevant are the things that Agile methods were specifically advocated as superior for by those evangelists.The real problem doesn't seem to be that Agile is irrelevant, it's that Agile (and this is actually fairly quickly explicit in the Manifesto and accompanying Principles) cannot be limited to a siloed tech organization but must fully incorporate the business sponsor of the project, whether that's the firms business management for a software/services firm, whether it's an external customer for a firm doing bespoke software development, or whether it's an internal customer for an IT organization doing enterprise-internal development. And despite that being clear in the Manifesto and Principles, it very often is the case that “Agile” is seen as something the tech team is (or worse, does) that stops at their boundaries, and that fundamentally doesn't work.There are other equally serious problems, like ritualistic adoption of fixed processes being described as “Agile”, which it clearly is exactly what Agile is most opposed to; the use of the phrase “Agile (or Scrum) ceremonies” is a clear sign that an organization has been infected with this toxic mindset."
Agile's early evangelists wouldn't mind watching Agile die,_lqaf,"on April 24, 2020","Having been through ""agile conversion therapy"" at two different companies and then having seen what the companies actually did several months later, I think most of the value of 'agile' has been realized. To get much more out of it, you need some combination of a more capable culture and better disciplined people.And I'm not talking about just engineering - I'm mainly talking about customers and management.Most of the gains come from tighter feedback loops between engineers and other stakeholders than tend to happen without an intentional effort. This works because it is simple - tell teams to talk amongst themselves every day, get feedback from customers more incrementally than you otherwise would, etc.Most of the rest of the promised gains need better disciplined customers and managers - ill-defined specs, dropping projects to pick something else up, only to switch back a couple months later, managers who don't pay enough attention to what's being done until it is too late, etc.Perhaps the problem is that it is a management fad aimed at engineers. It needs a v2 aimed at nontechnical people,  ""become competent at asking for what you need""."
Agile's early evangelists wouldn't mind watching Agile die,dropit_sphere,"on April 24, 2020","In practice, this can only happen in a few ways:- development becomes a 1st-class ""business"" activity a la accounting, sales---not that you necessarily do it as aanger, but you're looked down on if you can't- a culture of ""ask about the internals"" becomes prevalent, where anyone who bought software without knowing how it worked was looked on as an idiot- developer coup"
Agile's early evangelists wouldn't mind watching Agile die,flohofwoe,"on April 24, 2020","Call me jaded, but that's probably because the cow stopped giving milk, and they need to come up with a new cult/religion/ideology to continue selling books and conference tickets (and consulting gigs of course)."
Agile's early evangelists wouldn't mind watching Agile die,baryphonic,"on April 24, 2020","I think Zed Shaw had the best (or at lest most entertaining) take on being jaded about ""agile."" Though, fair warning, it is even more vulgar than the URL indicates. http://programming-motherfucker.com/He subsequently gave a talk comparing agile (and open source and consulting and startups and...) to fascist propaganda. https://www.youtube.com/watch?v=c5Xh2Go-jkMI'm not promoting it or saying I agree with it (I actually disagree with quite a bit of it), but it is entertaining."
Agile's early evangelists wouldn't mind watching Agile die,drewcoo,"on April 24, 2020",Or a new metaphor to sell milk?
Agile's early evangelists wouldn't mind watching Agile die,Yhippa,"on April 24, 2020","Nearly everywhere I've worked the quarterly earnings report is the problem. Due dates mean that time has to be managed so any attempt to use a methodology seems to regress to some not fun way of developing software.In places I've worked without the pressure of the quarterly earnings report I've seen that developers tended to use whatever methodology worked best. It could be Agile, pair programming, or just walking over to each other's desks and talking on IM."
Agile's early evangelists wouldn't mind watching Agile die,commandlinefan,"on April 24, 2020","I don't want it to die, I want it to become what it was originally supposed to be."
Agile's early evangelists wouldn't mind watching Agile die,kerkeslager,"on April 24, 2020","Agreed.As far as I'm concerned, ""agile"" refers to the principles on this page[1], and ONLY the principles on this page. Not Scrum, not Lean, not Kanban, not Xtreme.The problem is, it's hard to sell a set of principles. To understand people and interactions takes months of working with people: it's much easier to sell them a process or a tool and leave. Customer collaboration requires building a relationship: it's much easier to negotiate a contract for your client and leave. Responding to change requires you to stick around and see what changes happen: it's much easier to sell them a plan and leave. And to arrive at working software you have to get a lot of things right: it's much easier to sell a bunch of documentation for software that doesn't exist, and then leave. Money ruins everything: the reason agile had to explicitly deprioritize the things on the right side of the list in the first place is that all the incentives in a software company push you toward the wrong priorities. The things on the right side of the list are all quick, easy wins that look good on a quarterly report.There are companies who I've worked with who do agile (the principles) well. There's nothing wrong with looking at Scrum/Kanban/whatever as inspiration, as long as you realize that they're  just processes: individuals and interactions matter more. There's nothing wrong with using Pivotal/Jira/Trello/whatever, as long as you realize they're just tools: individuals and interactions matter more.[1] https://agilemanifesto.org/"
Agile's early evangelists wouldn't mind watching Agile die,swagtricker,"on April 24, 2020",This.
Agile's early evangelists wouldn't mind watching Agile die,genezeta,"on April 25, 2020","Speed. Sometimes I wonder if people mean speed as in velocity, or if they mean the drug, seeing as they seem to obsess so much about it.> Engineering is about seeing a problem, understanding it and using the technology you’re good at to solve it as quickly as possible.Everywhere you turn to there is someone thinking that speed is the most important thing ever. Everything must be done quickly. The best way to do something is quickly. If something takes longer, it's clearly worse.Even in an article about ""the problems with Agile"", people still fall into the trap of speed.Engineering is clearly not about solving problems ""as quickly as possible"". It's about solving them in the best way possible, where you first define ""good"" as a balance between all the advantages and all the disadvantages of each possible solution. Speed is but one of the factors you evaluate."
Agile's early evangelists wouldn't mind watching Agile die,boris,"on April 25, 2020",The need for speed is the direct result of worse is better.
Agile's early evangelists wouldn't mind watching Agile die,alangibson,"on April 24, 2020","I'm not here to defend Agile, but one of the things people get perpetually wrong is thinking about Agile as methods and tools. Agile is actually a set of values and principles. You were supposed to fill in your own methods and tools to support Agile values and principles, but everyone basically just said 'too hard; do Scrum'"
Agile's early evangelists wouldn't mind watching Agile die,Buttons840,"on April 24, 2020",https://www.halfarsedagilemanifesto.org/
Agile's early evangelists wouldn't mind watching Agile die,alangibson,"on April 24, 2020","> and we have mandatory processes and tools to control how those
individuals (we prefer the term ‘resources’) interactThis was/is literally true at a place I worked. Their official enterprise Agile process includes a long list of mandatory documents, one of which is a list of all sprints and sprint goals for the duration of the project, that must be checked into a document control system."
Agile's early evangelists wouldn't mind watching Agile die,Ididntdothis,"on April 24, 2020","""we prefer the term ‘resources""I so hate the use of the word ""resources"". so dehumanizing."
Agile's early evangelists wouldn't mind watching Agile die,kolanos,"on April 24, 2020",http://programming-motherfucker.com
Agile's early evangelists wouldn't mind watching Agile die,Ididntdothis,"on April 24, 2020","You should defend Agile as described in the Agile Manifesto. Problem is that what's usually called ""Agile"" has nothing to do with the Manifesto."
Agile's early evangelists wouldn't mind watching Agile die,xnx,"on April 24, 2020",One of the all-time most cursed diagrams I've seen: https://www.scaledagileframework.com/ . I could not believe it was not parody.
Agile's early evangelists wouldn't mind watching Agile die,cs02rm0,"on April 24, 2020","This has been following me around recently, I can't seem to get away from it.SAFe is everything that has ever been wrong with the software industry rolled into one terrible thing that is anything but agile.I can't fully express here quite what I think of it!"
Agile's early evangelists wouldn't mind watching Agile die,Ididntdothis,"on April 24, 2020","I still remember when a PM distributed this diagram as recipe for ultimate happiness. I only could think ""are you kidding?"". when you look at  details nothing makes sense or it's just a bunch of words that sound and look good.Tech guys like to do the same. One director once showed the ""architecture"" of the next big thing in our department. It was a bunch off boxes with ""authentication"", ""JSON"", ""distributed"", ""NOSQL"", ""JSON"", ""Roles"", ""reliability"" and twenty other buzzwords. He asked for estimates how long it would take. after asking what this means and what it's supposed to do I was out of the planning. Two years later there are still two guys developing it but nobody knows what it does."
Agile's early evangelists wouldn't mind watching Agile die,karatestomp,"on April 24, 2020","Message aside, that is a terribly organized diagram. It looks like someone dumped all the things they wanted in it on the screen, moved them around just enough that they weren't overlapping, then simply... stopped, having done no actual organization."
Agile's early evangelists wouldn't mind watching Agile die,MattGaiser,"on April 24, 2020",> having done no actual organization.So it was done using agile diagram methods?
Agile's early evangelists wouldn't mind watching Agile die,peteri,"on April 24, 2020",Anywhere that does SAFe is somewhere to avoid.The other issue that agile conferences don't have developers anymore.
Agile's early evangelists wouldn't mind watching Agile die,_bxg1,"on April 24, 2020","Agile is one of those words that's come to mean nothing at all. It can be anything from ""iterate fast and do weekly stand-ups"" to ""spend all of your time allocating point values to planned sprint tasks so that management feels like they're in total control"". It's been co-opted by the very bureaucracy it was designed to reign in."
Agile's early evangelists wouldn't mind watching Agile die,empath75,"on April 24, 2020",I was saying in a team meeting the other day that using jira stories as any kind of performance metric is wrong-headed and counterproductive and metrics should focus on the business value provided by the team and people looked at me like I grew a second head.
Agile's early evangelists wouldn't mind watching Agile die,bob33212,"on April 24, 2020",I had a situation where the CEO was bringing up complains from the PM to me about how there were so many Jira issues in the back log that I should have been hiring more people.I said that it would take me 5 minutes to go into Jira and close out all the existing issues if that is what they are worried about?
Agile's early evangelists wouldn't mind watching Agile die,karatestomp,"on April 24, 2020","I've written something similar on here recently, but to repeat: I am, at this point, pretty sure that trying to combine manager-facing and team-facing planning/tracking/task/reporting tools into one thing is fundamentally a bad idea."
Agile's early evangelists wouldn't mind watching Agile die,empath75,"on April 25, 2020","The problem is that jira gives you a unified interface into all the stories that all your teams are doing, while not doing anything to track the business value they’re providing."
Agile's early evangelists wouldn't mind watching Agile die,adamsea,"on April 24, 2020",Two heads are better than one! ;)
Agile's early evangelists wouldn't mind watching Agile die,illuminated,"on April 24, 2020","The main issue my teams have been facing with Agile methodologies is the number of the workflow interruptions built in. The only team members happy with those interruptions were Scrum Masters and PO's but that's because those were parts of their flows, so they had to have them in order to have their job done.The only long term solution for us was to have days dedicated to Agile ceremonies and days where no team member can be interrupted based on an agile ceremony need (there were few exceptions, like critical bug discovery, etc.). In weekly sprints, we had at least 3.5 days of uninterrupted time and in two-week sprints we had 7-7.5.That changed a lot the pace of those sprints as people had a lot of time to do their job and everyone was happy."
Agile's early evangelists wouldn't mind watching Agile die,projektfu,"on April 24, 2020","Scrum has always been the problem, IMO."
Agile's early evangelists wouldn't mind watching Agile die,anthonyrstevens,"on April 24, 2020","By ""ceremonies"", are you referring to daily standups? And/or something else?"
Agile's early evangelists wouldn't mind watching Agile die,illuminated,"on April 24, 2020","Everything but the daily standups... We had each day to begin with it, and it was great as it provided a more broad visibility into what is being done, if there are any issues, etc. But every other agile related meeting was a ceremony we have tried to manage as best as possible while not blocking its benefits."
Agile's early evangelists wouldn't mind watching Agile die,cesium,"on April 24, 2020","When something develops to an extreme, it becomes its opposite. This is true for ""agile"". Agile has become synonymous with ""Jira"", which is a direct contradiction of its original premise. The original ""Agile Manifesto"" states: Individuals and interactions over processes and tools, Working software over comprehensive documentation, Customer collaboration over contract negotiation, Responding to change over following a plan. Ask somebody these days what agile means and they'll tell you ""Jira"" or some other tool combined with heavy process. Another example of people confusing the means for the end itself."
Agile's early evangelists wouldn't mind watching Agile die,temac,"on April 24, 2020","And also ask people if they really want all of ""Individuals and interactions over processes and tools, Working software over comprehensive documentation, Customer collaboration over contract negotiation, Responding to change over following a plan."" That might not really make sense in some industries...And if they really want to consider all of that in a dichotomous way. Who really does not want ""working software"", and why would I even have to ""prefer"" that? this is just too much fundamental that we could as well say: we don't want to work on garbage projects, and it is stupid to have an extremely good documentation of a pile of crap. But why jettison documentation if ""working software"" is not even considered optional to begin with? I fucking want stellar documentation. Because why not? I'm tired of reading source code all day to try to understand what things were even supposed to do...In some industries ""agile"" in its original definition can make sense. In others, not at all. Yet, tons of people will pretend they do ""Agile"" regardless of what it is, what they think it is, and of what they do. This is sometimes some kind of management virtue signaling; except it is not signaling positive things anymore to those who work.It really has no meaning anymore. To be honest I'm not even sure it ever had, as implemented by most, out of the industry it came from (with associated practices that were also highly contextual)People should just avoid focusing on fashionable shallow words, and skip right to the ideas: if all of Agile and even all of Scrum is what will make your project shine, just do it, but writing essays about it is not really doing it, nor is pretending it is a kind of universal panacea, nor constructing consulting services around cult practices. If you must do the complete opposite; do the complete opposite. And tell everybody you are ""agile"" without an once of shame, if that can help raising money or stupid shit like that -- I mean what is even more agile than doing otherwise than ""Agile"" if it is a better idea in your context; so you are not even lying :p"
Agile's early evangelists wouldn't mind watching Agile die,davnicwil,"on April 24, 2020","The process is invented to help to do your job.Problems begin when that gets forgotten, and following the process becomes your job -- not following the process is doing your job wrong.Always remember that your job is to build stuff, any way that works."
Agile's early evangelists wouldn't mind watching Agile die,AgloeDreams,"on April 24, 2020","Spot on. The problem with much of Agile today is that Jira, the product is sold to management as effectively employee tracking tools that enable them to know who is good and who is bad and what was accomplished. It tends to turn engineers into ticket crunchers (chopping their heads off of thinking about products and isolating them from the customer) and causes planning to be incredibly near sighted or excessively structured."
Agile's early evangelists wouldn't mind watching Agile die,0xbadcafebee,"on April 24, 2020","The core of Agile, Scrum, DevOps, XP, TDD, etc, is just to get a developer to truly understand what it is they're doing and make a meaningful connection to the real results of it. But before they can ever begin to do that (which is a huge challenge in and of itself), the organization needs to get the hell out of their way, but at the same time, invest tons of money and effort to help them do what they should be doing.If you just ""step back"" from trying to control the average bunch of engineers, they will miserably fail, because they have never gone to a school that taught them how to rapidly drive business value through software. If you hire the right people, they already learned all of that, and so they'll be successful.That's how the Netflixes of the world survive. Their organization and process would seem totally insane to any ""average"" tech engineering organization. But it works for them because they learned how to work together the correct way, the business got the hell out of the way, and it also invested a ton in helping them do what they need to do.Agile does not give you any of that. Agile is just a promise of what should be happening, but it doesn't tell you how to get there at all. It's a pipe dream.Agile is not the problem, though. It's businesses thinking the engineers are simple tools to be used to produce widgets, and if they just shove enough extra business roles and processes around the engineers, that will end up creating value. But the solution is actually to remove all that extra crap, and get the engineers to do everything in a way that the PMs and DMs and QEs etc are no longer necessary."
Agile's early evangelists wouldn't mind watching Agile die,betaby,"on April 24, 2020",Interesting perspective. Could you please explain what do you mean by 'Netflixes'. What precisely they do and don't (in contrast with less successful companies)?
Agile's early evangelists wouldn't mind watching Agile die,0xbadcafebee,"on April 25, 2020","This talk sums it up, from a lead SRE at Netflix: https://m.youtube.com/watch?v=UTKIT6STSVM"
Agile's early evangelists wouldn't mind watching Agile die,pragmatic,"on April 25, 2020","Speaking of Lean, I remember my mother telling me about their hospital adopting lean and that meant they could keep only so many supplies on hand in the lab. I remember thinking at the time ""wow, isn't it a bad idea to try to limit the amount of supplies on hand at a hospital""I guess we'll have to see if we ever have a major health care crises. Wait...And we wonder why the hospitals didn't have enough PPE on hand. Did the MBA virus spread to hospitals and did they misapply methodologies like Lean where it had no place, except as short sighted cost cutting?One of the major problems in industry I've seen again and again is management, etc pretending they know more about the job and it's requirements than the people doing it.As Lean originated in manufacturing with the WORKERS making the improvements and the WORKERS being empowered (anyone could stop the line if there was a problem) it's bit ironic that a corrupted version was used later to beat workers into submission and achieve petty cost cutting versus process improvement as in the health care anecdote above."
Agile's early evangelists wouldn't mind watching Agile die,aeturnum,"on April 24, 2020","If you should meet Agile along the road, destroy it!"
Agile's early evangelists wouldn't mind watching Agile die,wodenokoto,"on April 25, 2020","What is the alternative to agile?Calling it a to-do list instead of user stories? Not aligning teams on where we are in the to-do list regularly and removing and adding things?Agile proponents often say ""waterfall"", but I have no idea how you would go about working waterfall day to day.Would you just make all your user stories/to-do's on day one and never update them and now you have waterfall?Having entered the industry long after agile became the new normal, it seems like the whole discussion is either ""stand-up sucks"" or people discussing variations of what is essentially ""Regularly report where you are on the to-do list, often update the teams to-do list"", but never ""Why not this different paradigm instead"".Maybe I am lacking imagination, but I am not really sure what a serious alternative is here."
Agile's early evangelists wouldn't mind watching Agile die,temac,"on April 24, 2020","> At the time, software development was suffering from a mistaken belief: that building things fast and building things well were fundamentally opposed. Mary knew this to be untrue from her work in product development and manufacturing, where the ‘lean’ practices that sprung up in Japanese car factories and subsequently spread across the globe often ruled the day.If that's part of the original reasoning, then it was very random. R&D has not much to do with manufacturing. So I would greatly prefer an actual example from ""product development"" rather than car factories...I mean what build our software is e.g. gcc. I don't know if gcc is feeling lean, and actually I don't care much :)"
Agile's early evangelists wouldn't mind watching Agile die,arminiusreturns,"on April 24, 2020","I recently listened to a lecture about the future of programming, and there was a sentence that really stuck out to me. The speaker said something along the lines of ""If you go to an agile conference, there aren't that many devs there and it's mostly management.*As an ops type usually only on the peripheral of sprints etc I feel I don't fully grasp the nuances of the different methods enough to really comment, but that just really got my attention for some reason.Found the video, linking at the timestamp that includes the manifesto for agile (which I think has some obvious flaws)https://youtu.be/ecIWPzGEbFc?t=3678"
Agile's early evangelists wouldn't mind watching Agile die,brainless,"on April 25, 2020","So much frustration over something that in theory is so good for building stuff.If you go over to http://agilemanifesto.org/ and read these simple 4 sentences, it makes sense:  * Individuals and interactions over processes and tools
  * Working software over comprehensive documentation
  * Customer collaboration over contract negotiation
  * Responding to change over following a plan

What goes horribly wrong is managers, and their incapability. They do not work with teams, instead they use agile as a means to simply get updates at the end of week and set orders down the ranks every Monday morning."
Agile's early evangelists wouldn't mind watching Agile die,nicetryguy,"on April 25, 2020","- Individuals and interactions over processes and tools- Customer collaboration over contract negotiation- Responding to change over following a planWould any of these work for, say, building a house?I hate agile from the bottom of my heart."
Agile's early evangelists wouldn't mind watching Agile die,brainless,"on April 25, 2020","I can not even try to answer that since they are not even remotely equal. How often do you change the way you walk through your house, or how the water flows or the walls look?Do you launch a new bed in your house to charge people to see every month?They are not even comparable, like at all. If all you have is hate for something sure you can not understand it."
Agile's early evangelists wouldn't mind watching Agile die,nicetryguy,"on April 25, 2020","I have seen and tried to maintain the years of spaghetti code and quick hacks that Agile projects generate. It is a nightmare. I think i understand it just fine. It is a flawed premise. Projects should have concrete specifications and expectations at the get go. I shouldn't be forced to code quickly with a sprint gun to my head at all times, generating heaps of tech debt by having no time to retool unstable or inefficient portions of a project, as i am always busy scotch taping on new features that the codebase was never designed to handle.If the customer wants a horse to run 60mph backwards, and the project manager has no idea that a horse cannot possibly do that, i have to hear why my ""horse"" should have been designed with Agile philosophy in mind. Agile is nothing but a bunch of techno-babble that ""sounds good"" but offers no practical advice on how to achieve those ends. It is the scourge of the earth and would love to see it purged from collective consciousness."
Agile's early evangelists wouldn't mind watching Agile die,winrid,"on April 24, 2020","When I was a manager I'd get the team together every quarter and we'd agree on ""this is what we're going to do"" - and then we'd do it, usually. At the end of the quarter we'd have to explain why certain pressures pushed things out, but usually the business cared more that we kept churn down.For over a year I pushed back on story pointing and things that felt micro manage-y to me.It was very hard on me, but it was worth seeing the productivity.Eventually I was forced to give in to Agile with the big A and left soon after.I can't get another management job because everyone wants to do Agile in a way I hate to manage - so now I'm a developer again... :)"
Agile's early evangelists wouldn't mind watching Agile die,ghevshoo,"on April 25, 2020","In my experience the main reason that agile mostly sux in large enterprises is because it is agile in name only. Not a single one of the people who are responsible from managing the process have even heard of the “agile manifesto” let alone read it, nor have any of them ever worked as a software engineer. So in most cases it could easily be better than what it is.But I object to the authors complaint “and it’s pushing women engineers into non-technical roles.” and elevating the primacy of engineering above all else.People come in all levels of competencies and have all manner of skills. I don’t care if you are a man or a woman. I care about how good you are at doing the tasks that need to be done to get the job done. And in large companies there are big jobs that require a lot of people and a lot of coordination.I work with a woman who is not a very good software engineer, but she is good at administering and coordinating the work among other software engineers and she quite enjoys doing those tasks.While she can improve on some of her skills as a software engineer and I try to help her with those, the author’s recommendation seems to be that because she’s a woman, I should push her away from work that she likes doing, that she’s good at doing, and which is important work to do.This is objectively terrible advice, but some might accuse me now of male chauvinism. If so, fine. But I will forward this article to my colleague to ask her what she thinks and I’ll let her opinion be the ruling decision."
Agile's early evangelists wouldn't mind watching Agile die,kitotik,"on April 24, 2020","A lot of the bastardization and commercialization of the Agile core tenets could have been mitigated by the early pioneers broadcasting the dirty secret:To deliver any real business value following these philosophies requires an extremely mature, experienced team. Not just great engineers, but also great communicators that actually care at least a little bit about the mission/product/goal.This simply does not scale and is a complete antithesis of 99% of organizations culture and hierarchical structure."
Agile's early evangelists wouldn't mind watching Agile die,KingOfCoders,"on April 25, 2020","I was a coder in the 80s and did XP in 1999 and became an early Scrum Master as a developer. Agile has been stolen from developers. The rise of Scrum came at the same time as the rise of the product manager, and the Scrum PO became a PM. From then on in many companies it was not about doing the right thing but getting the most features out of developers, to implement the PO vision, with little say. We became assembly line workers, put to comfort with high salaries."
Agile's early evangelists wouldn't mind watching Agile die,brightball,"on April 24, 2020","Ultimately, people need agreed upon terms for communicating planning and expectations.That's it. The more people are involved, the more complicated the process gets and all of these approaches evolve out of trying to find an agreeable and effective way of doing it so that everyone doesn't have to figure out a new solution every time.As much of a buzzword hell as it is, I really believe that Scaled Agile Framework (SAFe) is the closest thing to the right balance of trade offs."
Agile's early evangelists wouldn't mind watching Agile die,joejerryronnie,"on April 24, 2020","When I'm hiring scrum masters, seeing ""Agile Coach"" and ""Agile Transformation"" on a resume is actually a bit of a red flag for me.  I don't need someone who can teach my organization how to theoretically run Scrum, I need someone who can engage with our dev teams, understand the expectations they're being held accountable for, the challenges in meeting those expectations, and tailor a methodology (probably Scrum-based) which puts the dev teams in the best position to succeed and be happy while doing it.This may be a bit different depending on the make-up and maturity of the team.  Sometimes, we need daily engagement with team members and ""structured"" collaboration, other times we just need to make sure everyone understands the sprint goals and then get out of their way.  The challenge has always been when upper management wants to see a single dashboard which boils all teams down into a set of pre-defined metrics - and then positively reinforces teams (or their managers) for hitting metrics instead of delivering solutions.  Training your VP's can be exhausting."
Agile's early evangelists wouldn't mind watching Agile die,viburnum,"on April 24, 2020",Corporate agile is a mixed bag but Extreme Programming is still good though.
Agile's early evangelists wouldn't mind watching Agile die,swagtricker,"on April 24, 2020","I fully agree.  In general, any flavor of agile for software development that doesn't include the engineering focus that Extreme Programming's technical practices bring in (fast feedback, refactoring, good testing & design, CI/CD deployment, team ownership of the solution - weather you pair program or not) is doomed to become intractable legacy after 12-18 months at the most optimistic."
Agile's early evangelists wouldn't mind watching Agile die,larkinrichards,"on April 25, 2020","I still think agile has a place as a focus for discussion when you're taking a large organization from a waterfall model (or any model that tries to commit to delivering a set of uncertain features by a specific deadline) to a more reasonable and effective process for software development.In this situation, you'd get shot down for following rigid Agile, because the process gets in the way of delivering value.   What you end up doing is using the concept of ""agility"" to sell some agile-lean-hybrid-involve-the-stakeholders-think-small-and-demonstrate-the-value-of-delivering-value.  It's not about the Method, it's about the outcome.No one needs to go black-and-white rigid Agile, that's where it went wrong.  But agility is a good way to describe the concept of efficiently changing (and handling change).I just feel that every article about capital ""a"" Agile immediately sinks to level of pedantry that is a complete waste of time, so... I didn't read the OP."
Agile's early evangelists wouldn't mind watching Agile die,joejerryronnie,"on April 25, 2020","The problem isn’t “Agile”.  The problem is organizations which are not good at software development.  Teams which fail with Agile will also fail with Waterfall or any other development methodology.  Teams which generally succeed with one methodology may find a different methodology a bit more efficient, but they’re gonna be successful either way."
Agile's early evangelists wouldn't mind watching Agile die,jquast,"on April 25, 2020","And just like writing software, when specifications of the agile process are not clear, almost founded on a “chose your own implementation” scheme, the result is a big-ridden over-designed and terribly unclear (and endlessly debated) process. implemented differently at each and every company. Just grand.Just like the very process of software design this was meant to aid, they failed to understand the importance of clarity, brevity, and providing exacting specifications or instructions.Fuck you, agile. This is not how engineering should be done in any profession. Thousands of hours of my career has been wasted clarifying this unclear process to swarms of people who have no single resource to learn from. And each new company brings a new “we do agile, but....” exception to adapt to, and damned be if anyone ever writes a single fucking rule of this process down, so we get to endlessly debate what is this “agile” thing at each and every opportunity."
Agile's early evangelists wouldn't mind watching Agile die,AzzieElbab,"on April 24, 2020","Here is the talk by Dave Thomas
https://en.m.wikipedia.org/wiki/Dave_Thomas_%28programmer%29...https://youtu.be/a-BOSpxYJ9M"
Agile's early evangelists wouldn't mind watching Agile die,netjiro,"on April 26, 2020","Agile, as commonly encountered nowadays, is mostly just cargo cult. People chasing dogma and buzzwords with zero understanding of why and when it has great application and benefits. Just like so many other trends in the past.Way too easy to ""seem"" productive while actually being net negative for the project.That said, I've had excellent agile projects that have delivered huge value to the customer at cost and time well below initial estimates.These days I ask people who shout for agile to actually explain the fundamentals to me, as though I have no clue. Very rarely do I find anyone who can hit even one of the four original core ideas and values of ""agile"":https://agilemanifesto.org/And when I bring up the core ideas, and why they can work really well, I often see that the people who shout agile actually don't agree with the fundamentals."
Agile's early evangelists wouldn't mind watching Agile die,5cott0,"on April 25, 2020",Agile is what happens when stakeholders want a car but really need a wheelbarrow & end up with a skateboard that only has 3 wheels. Product re-brands it as a scooter and takes a victory lap & now your company culture is an extremely toxic work environment of implicit & unaccountable power structures.
Agile's early evangelists wouldn't mind watching Agile die,fourseventy,"on April 24, 2020","I like the development methodology laid out my David Cancel in his book Hypergrowth. I like it because he has founded several large successful companies and actually used this methodology successfully. Unlike most of these ""agile gurus"" who have never sold a product to a customer in their lives."
Agile's early evangelists wouldn't mind watching Agile die,redisman,"on April 24, 2020","In my experience ""Agile"" whatever that means is still the best of all the bad options. Is there really a better methodology? I feel like it works pretty well as long as management doesn't pick and choose the easy parts of it and then add their own layer of BS on top, which is very common."
Agile's early evangelists wouldn't mind watching Agile die,rafaelvasco,"on April 25, 2020","Well, every company I worked with, ""Agile"" was just a means for management to keep feeling they're in control, when they're not, there's no such thing as in control, or to promote themselves with the higher ups.My best team is me alone, but other than that, the best team I ever had was one in which there was no meetings, no dailies etc. It was just me and a few others, receiving the outlines of what the final product had to do, what inputs and outputs it should process, and then filling this outline with code and hard work until it was whole. It was far from perfect of course, but we weren't bothered by unnecessary processes. There was no agile back then yet....That said, the methodologies are not the problem. The problem is peoples attitude and mentality and how they use them."
Agile's early evangelists wouldn't mind watching Agile die,MattyRad,"on April 24, 2020",I think the spirit of the article is summarized by Putt's Law  https://en.wikipedia.org/wiki/Putt%27s_Law_and_the_Successfu...
Agile's early evangelists wouldn't mind watching Agile die,helen___keller,"on April 24, 2020","I've come to best appreciate agile by calling ""agile"" whatever practices work best for my team.Sometimes we move things in and out of a sprint mid-sprint because new information came up and it's high priority? It's not ideal (and we'll discuss it in retro) but that's agile.We've sat a fat 5-point ticket in our backlog for 3 sprints straight because it needs a decent sum of meeting time and dedicated attention from multiple engineers who keep facing higher priority work and not quite having time for it? That's fine, we're being agile.Our backlog grooming meeting ended after 8 minutes because we had nothing to discuss and we're all focused on delivering? Very agile."
Agile's early evangelists wouldn't mind watching Agile die,HeyLaughingBoy,"on April 24, 2020","Three sprints? LMAO. I've had tickets that sat ""In Development"" for the better part of 6 months because higher priority stuff kept coming up, but no one wanted to acknowledge that we had more pressing work to do :-)"
Agile's early evangelists wouldn't mind watching Agile die,joejerryronnie,"on April 25, 2020",Each of the things you mention sound perfectly fine if it works for your team and you are able to deliver your customer’s highest priority items while keeping your team happy.
Agile's early evangelists wouldn't mind watching Agile die,d--b,"on April 24, 2020","One thing that's for sure is that Agile completely shifted the culture of software engineering, and generally in a good way. I am very thankful for that, and I think that this is where Agile has done its job.Then, the problem with frameworks like Agile is that smart people will use them wisely, and less smart people will try to apply the concepts without really grasping the ideas and not really gain anything out of it.But you can't really prevent people from reading the book, and do stand-up scrum meetings and sprints and shit...Unless someone comes up with something else (which most likely will be equally twisted) Agile is here to stay. I just wouldn't mind watching conversations about Agile die."
Agile's early evangelists wouldn't mind watching Agile die,lifeisstillgood,"on April 25, 2020","Some thoughts I wanted to get out:I think we need Outcome Driven Development- we define a metric measured in say graphite, we link a ticket to that asserting the ticket will make the metric change this way or that, and we commit code to make the metric changeso we start a process of defining what we want, implementing how to measure it (there could be a null metric and the ticket is to make it not null) and then measuring our success of changing the metricthis will have organisational impacts as well - no one should take a ticket without authority span to impact that metricthis will start in the direction of software as literacy or the developer anarchy"
Agile's early evangelists wouldn't mind watching Agile die,zabil,"on April 24, 2020",> software developers need to become what they truly are: engineers.I couldn't agree more
Agile's early evangelists wouldn't mind watching Agile die,drapred7,"on April 24, 2020",What does that even mean? Its just some vague feel-good platitude like everything else in agile.
Agile's early evangelists wouldn't mind watching Agile die,zabil,"on April 24, 2020","Fair point. I wish I could explain, but don't want to try. For the record, I've been knee deep in Agile."
Agile's early evangelists wouldn't mind watching Agile die,zhenchaoli,"on April 24, 2020",Distracting snake oil. That’s what I think about when I hear agile.
Agile's early evangelists wouldn't mind watching Agile die,uDontKnowMe,"on April 24, 2020","Tangentially related, has anyone tried to implement the ideas described in Juval Lowy's new book, ""Righting Software"" (https://www.amazon.com/Righting-Software-Juval-L%C3%B6wy-ebo...)? His methodology of project management seems much more systematic than week-by-week sprint planning."
Agile's early evangelists wouldn't mind watching Agile die,S_A_P,"on April 25, 2020",I’ve worked for 2 big oil and gas firms. I don’t care much about checking agile boxes. I went from being damn near employee of the month to short list for being let go when those companies started to live and die by “agile”. I’m about 50% to blame as it’s a great demotivational tool. The other half is managers forgetting why they are running those agile projects. I left both places within 6 months of agile being gospel. Not sad at all.
Agile's early evangelists wouldn't mind watching Agile die,projektfu,"on April 24, 2020",I agree with the title but find the reasoning hard to follow.  It seems like the author keeps changing playing fields and tries to stitch a single narrative.
Agile's early evangelists wouldn't mind watching Agile die,shaunxcode,"on April 24, 2020",Csp should replace it. Dog food and turtles all the way down. If you can’t model your workflow in terms of processes and typed channels with buffers what business do you have implementing anything more complex (conways law etc.)THAT said agile was a breath of fresh air at the time and it got us to question a lot of assumptions related to how we specify and develop software.
Agile's early evangelists wouldn't mind watching Agile die,temac,"on April 24, 2020","You want to replace Agile with CSP? Interesting. Why not replacing Agile with FSMs, though? Or continuations? Or monads?"
Agile's early evangelists wouldn't mind watching Agile die,koonsolo,"on April 24, 2020",There are only 2 things your agile team needs: a retrospective and a manager that wants to improve the process.Everything else can flow from there.
Agile's early evangelists wouldn't mind watching Agile die,jackcosgrove,"on April 25, 2020","I never understood story points. Is it just psychological to use a different unit of time, so that managers' expectations aren't so hard and fast?Story points remind me of those weird units of work the cloud providers bill you for, or the company scrip that a coal mine would have issued 100 years ago. I call story points AgileBucks.Why not just use standard units?"
Agile's early evangelists wouldn't mind watching Agile die,joejerryronnie,"on April 25, 2020","I think it’s a purposeful abstraction for relative estimation of a task.  Since nobody is good at estimating the exact number of days a particular task will take, story points are a way to give a general estimate of task complexity (usually people end up equating this to a rough timeframe) without having to commit to a specific number of days.In our 2 week sprints we have four possible story point values - 3, 5, 8, 13.  If the story should take a couple of days, it’s 3 points.  If the story will probably take the full sprint, it’s 13 points.  If the story is somewhere in between, pick 5 or 8."
Agile's early evangelists wouldn't mind watching Agile die,mindcrime,"on April 24, 2020","Agile's early evangelists wouldn't mind watching Agile dieIt's easy to say that, but the obvious follow-on question is ""and replace it with what, exactly?"" Maybe the answer is in TFA, but I didn't read it yet. I hope they have something to propose, otherwise this discussion is pretty vacuous."
Agile's early evangelists wouldn't mind watching Agile die,mjfisher,"on April 24, 2020","This seems like as good an excuse as any to share a link to ""Modern Agile"" again:http://modernagile.org/I think it's probably a good reinterpretation of the original manifesto that is a bit more fundamental and a bit more direct. I like the concepts a lot."
Agile's early evangelists wouldn't mind watching Agile die,ChicagoDave,"on April 24, 2020","The Agile paradigm has been corporatized and all of its capabilities turned into heavy process and oversight bullshit. But worst of all, management rarely sees the need to get involved, especially from the financial management perspective. It's very often a zombie project management apocalypse in the making."
Agile's early evangelists wouldn't mind watching Agile die,PeterStuer,"on April 25, 2020","There is a surplus of ""organizer"" roles in IT, call it PM's, call it Agile Coaches, call it PO's ... for every software engineering methodology. This is indeed because these roles are far more accesible than the 'hard' engineering skills in IT."
Agile's early evangelists wouldn't mind watching Agile die,say_it_as_it_is,"on April 24, 2020","How many people here refused advice suggesting to go with one's strengths and instead took a different path in life, developed new capabilities, and acquired new strengths?  Progress was slow and difficult.  Yet, you persevered.  You weren't agile, were you?"
Agile's early evangelists wouldn't mind watching Agile die,jayd16,"on April 24, 2020","Did anyone actually read as far as the sub-header?  ""Agile"" is used to scapegoat a lot of issues but gender equality is a new on me.  Pigeonholing women into non-technical roles is a problem but I don't see how dumping agile would solve it."
Agile's early evangelists wouldn't mind watching Agile die,bdcravens,"on April 24, 2020","Agile as it is practiced has created a new set of roles, like ""scrum master"". However, if not agile, that role would probably be called ""project manager"", another role that female engineers are often pushed toward."
Agile's early evangelists wouldn't mind watching Agile die,therealdrag0,"on April 25, 2020",Are they pushed towards it or do they gravitate towards it?
Agile's early evangelists wouldn't mind watching Agile die,bdcravens,"on April 25, 2020","It seems to me those are two sides of the same coin. After all, gravity is an external force that takes significant effort to work against."
Agile's early evangelists wouldn't mind watching Agile die,kchoudhu,"on April 24, 2020","They've all moved on to newer grifts, and don't need competition from legacy grifts."
Agile's early evangelists wouldn't mind watching Agile die,zwieback,"on April 24, 2020","I thought it was dead already. The people that pushed agile where I worked already moved on the next hot thing twice. Now programmers may have a chance to go back to the roots of agile and do it right, without micromanagement from evangelists."
Agile's early evangelists wouldn't mind watching Agile die,achenatx,"on April 24, 2020","the essence of the article is that agile is mainly a project management methodology. It is for decomposing tasks into chunks that allow you to deliver something valuable in the given time frame. One of the best parts is that if you run out of time or money, you have something that is usable with what should be the most important features.What it doesnt give any guidance to is how to organize information about how to build the right thing. If a system is very large, without some methods to understand and communicate what you are building, it just becomes ad hoc. Agile is not a product management/requirements identification methodology."
Agile's early evangelists wouldn't mind watching Agile die,postfacto,"on April 25, 2020",Agile In Their Own Wordshttps://github.com/rayfrankenstein/AITOW/blob/master/README....
Agile's early evangelists wouldn't mind watching Agile die,robjan,"on April 24, 2020",The site has blocked Hong Kong (and possibly other) IP addresses for some reason.Here's an archive link https://archive.is/wip/OFF0F
Agile's early evangelists wouldn't mind watching Agile die,zabil,"on April 24, 2020",IMHO the Agile manifesto still holds good. It applies to arguments in the article around processes (and tools) to ironically fix itself.
Agile's early evangelists wouldn't mind watching Agile die,csours,"on April 24, 2020","If you consider that science advances, what did Agile improve on, and where has Agile been been improved upon?"
Agile's early evangelists wouldn't mind watching Agile die,a3n,"on April 25, 2020","Ugh. I sometimes miss software development, but I don't miss any of this."
Agile's early evangelists wouldn't mind watching Agile die,softwarejosh,"on April 25, 2020","proper agiles a way of life, cramming the unproductive types of people into it was never going to be as good as making a team of agile people"
Agile's early evangelists wouldn't mind watching Agile die,atulatul,"on April 25, 2020",All movements go too far.- Bertrand Russel
Agile's early evangelists wouldn't mind watching Agile die,charles_f,"on April 24, 2020","Agile is not a methodology or a process, it is literally[1] a set of values and principles which can be summarized by ""stop being stupid and trying to reproduce what they do in construction engineering, and start discussing about the why and collaborate, doing things that matter, and being flexible, since after all, we're doing _soft_ware.The set of methodologies and processes that ensued, as well as the entire industry of coaches, consultants, evangelists and ""practitioners"" was probably coming from a good place - trying to propose an implementation for how to put in place those abstract values and principles, or to help with that. The commercialization, envy and corruption that followed is what the problem is. ""Agile"" has become a synonym for ""cargo-cult brainless implementation of sprints and stand-ups to copy something called scrum but effectively doing things in a very much waterfall and old fashion that isn't even remotely close to the original intent"".The problem is of semantics order. What does need to ""die"" is the  ""agile"" industry, with cargo-cultish coaches whose only value is to repeat Scrum says X, XP says Y, Agile says Z, my other customers do Ω, without trying to convey the reason behind those implements ; ""agile"" methodos like ""safe"" which have very little agility backed in and whose ""Enterprise Architects"" proponents usually don't get any of the intent.But take a look at the manifesto[1] and tell me that you want it to die, I feel like the arguments will be very complex. Re: the that we should become ""engineers"" (semantics and cargo-cult again), there's a very good reason why agile applies well to software, but not to mechanical engineers. The economic equations between those two practices are completely different[2][3], the ""engineering"" phase of mechanical engineering is cheap compared to the production costs and so iterations have effectively an extremely high overhead cost, whereas the ""engineering"" phase of software engineering represents most of the cost, and so iteration and adaptability have a very low overhead.But saying ""agile needs to die"" because of how the ""agile industry"" corrupted it is similar to saying ""email needs to die"" because what you see most is spam.[1]: https://agilemanifesto.org/[2]: https://www.developerdotstar.com/printable/mag/articles/reev...[3]: https://www.youtube.com/watch?v=RhdlBHHimeM"
Agile's early evangelists wouldn't mind watching Agile die,parasubvert,"on April 25, 2020","I’ve been doing XP for 22 years, and was on Ward’s wiki as the C2 project was being executed, watching the ideas grow in real time.  I worked for Pivotal for the last 5 years.  Here are my thoughts.Agile alone is insufficient to successful products, which the original proponents would tell you.  It’s a body of practices.  There are more practices than just those.  People seem to want “12 steps to an easy rich life” and want to scream when someone offers only 6 of them.Most of the Agile practices the industry has adopted and evolved without calling them agile.  So in that sense, it’s a “success”.But agile coaches often are so focused on the original 20 year old practices and they miss the bigger picture of business and products and supporting technology, and the evolution that’s taken place in each during that time.Any software method that is delivering software for users to consume has to be complemented by outcome-focused approaches like user-centered design, product development, customer development, and  budgetary funding / management practices that don’t weaponize the use of openness, sharing, and metrics for political purposes that hurts people’s self worth.  If you’re missing those, agile isn’t going to help you much.Ultimately just letting engineers be engineers is partly how we got into this mess in the first place.  People don’t know how to organize themselves without some kind of constraints:  design constraints, time, physics, customer constraints, quality, etc.   Talented teams turned loose that ultimately deliver little of value is a cliche at this point.  Agile tries to use time as a constraint to limit active work in progress to force the delivery of customer visible / valuable results that can be tweaked.  It’s not the only way to constrain the problem space, but “cost of delay” does have a fairly universal explanatory value in showing what really matters to a business, as lean product development and manufacturing has shown.  But that might not be the outcome you’re looking for.whatever process or practices you do, Agile or not, it has to be organized end-to-end to be tied to some kind of tangible mission or outcome or else it’s just a form of self-deception.  For example, if we think products need to be usable and solve actual problems, and that design can evolve, then Product owners need to speak for the Customers and have the power to make decisions. Engineers need to be empowered to make the technical decisions.  These seem obvious but they’re rare:  committees and political strings attached are the norm.   If you get both an empowered balanced team of product, design, and engineering you’ve got potential for an engine of collaboration and learning, which is the whole point.  Don’t build projects, build human/techno systems that grow and improve and evolve.Agile is also not universally applicable and much of the resentment stems from a  religious conversion therapy or Developer Rehab approach to marketing (even though some really could use a stint in rehab).  Agile is applicable to some kinds of software (user-Centered software in particular), which happens to be a big chunk of industry.  It isn’t applicable to everything, such as deeply technical components, pure or applied scientific R&D, or certain kinds of exploratory work.  Nor is it applicable to jobs with set and unchangeable   requirements.People are best to understand there are a spectrum of practices and processes suited to different environments and stages of organizational evolution.  Or they could reject such complexity and nuance and just adopt SAFe, I guess."
Agile's early evangelists wouldn't mind watching Agile die,caseymarquis,"on April 25, 2020","The article mentions Agile as an attempt to bring lean manufacturing methodology to software development. I make software which is used as part of lean manufacturing initiatives (among other initiatives), and see a lot of different manufacturing environments. I want to point out that lean manufacturing is often the wrong tool for producing significantly more of something complex or ramping up production speed of a complex product. In its defense, you could say that lean should be this tool, but is usually so misinterpreted or done so incorrectly that it fails to be this tool. (funny that agile reportedly has the same problem)Generally speaking, lean is a tool for reducing various kinds of 'waste' and 'doing more with less'. That's the part people seem to focus on anyway. The problem is that people become myopic. Lean becomes the justification for premature optimization and focusing on details that don't matter.Sometimes, waste is good. Or, stated differently, not all waste is equal. If you have 5 machines that each produce $1000 of value per hour run, and you're attempting to go lean by rearranging them so you can lay off a $20/hour employee, then you are focusing entirely on the wrong thing.Lean is often pushed with the idea that employees shouldn't be standing around doing nothing, or that you shouldn't produce excess material which will sit in a pile. The problem with this is it often fails to account for needed excess capacity, and when something goes wrong, everything falls apart.The correct move (depending on margins) is usually to hire more inexpensive humans to stand around and make sure the expensive machines never stop generating value because you overburdened one of the humans. When you want to make things faster, you don't stop producing when the next machine in the process can't keep up (producing a pile of unused parts). You buy another machine that performs the next process or figure out what it needs to run faster.Lean is the methodology most people use when they can't make big changes that will have a major impact on production. It's a tool for making the existing (possibly broken) system function better.  It's culturally good to focus on reducing waste, but often it's the waste you're not measuring or thinking about that's killing you.Lean isn't bad any more than optimization is bad, it's just not the tool you typically want to be starting with. I work directly with customers, have no deadlines that aren't self imposed, and couldn't tell a story point from a scrum master, so I can't say if the failures of lean manufacturing implementation extend to agile, but I'd be curious to hear if they do.A tool I find more useful than lean: https://en.m.wikipedia.org/wiki/Theory_of_constraints"
Agile's early evangelists wouldn't mind watching Agile die,jahaja,"on April 24, 2020","I guess it's hard to keep methodologies from being co-opted by management for their own ends, since they do after all have the ""power""."
Agile's early evangelists wouldn't mind watching Agile die,kradroy,"on April 24, 2020","I implemented Agile scrum on my team at the behest of my organization.  I did it enthusiastically at first, because I thought it might make a difference.  My opinion changed within the first 6 months.  I think it's a waste of time.Our stand-ups are pointless because they're just status updates.  Not much of consequence can happen in 10 minutes anyway.  I ignore our metrics at the end of each sprint.  They're meaningless.  Our retrospectives are largely useless other than giving shoutouts to team members.  I feel the sprint structure leads to Parkinson's law.This situation, however, is perfectly normal because Agile advocates ""people over processes.""  My team doesn't give a shit about the Agile process, so it's mostly like forced physical training but without the fitness benefits."
Agile's early evangelists wouldn't mind watching Agile die,swagtricker,"on April 24, 2020","Scrum should at best be viewed as training wheels for agile teams.  Not the end state.  Good teams abandon scrum for Kanban / Lean concepts once they start building good collaboration structures, better communication with business, earn trust by delivering and recognize (as you point out nicely) that the sprint timebox is artificial B.S. in practice.  I think the Parkinson's law can be a common trap for teams to fall into with the Sprint timebox malarkey."
Agile's early evangelists wouldn't mind watching Agile die,vpeters25,"on April 24, 2020",This 100%. One of the reasons people hate Agile is because they miss this point and keep micro-managing.
Agile's early evangelists wouldn't mind watching Agile die,corpMaverick,"on April 24, 2020",Managers trying to control engineers. I don't know how we are OK when people in charge don't understand what they are managing. Agile was an attempt to take control back to engineers but it was co-opted.
Agile's early evangelists wouldn't mind watching Agile die,andarleen,"on April 24, 2020",“and it’s pushing women engineers into non-technical roles” - wtf
Agile's early evangelists wouldn't mind watching Agile die,drapred7,"on April 24, 2020",Feminists are always promoting  numerous and spurious explanations for why women seek out non-technical roles The qualities of women themselves being a sexist and therefor a priori false explanation.
Agile's early evangelists wouldn't mind watching Agile die,werber,"on April 24, 2020",Because we’re still dealing with it everyday. I can’t even count the number of basic trainings I’ve gone through and then seen everything they preach go directly out the window
Agile's early evangelists wouldn't mind watching Agile die,Frost1x,"on April 24, 2020","As many pointed out, unfortunately most businesses employing 'agile' don't seem to be 'agile' at all from management side, so we still have all sorts of broken practices used industry wide which are absolutely idiotic.I'm working with a team that the PM follows Agile like its a silver bullet solution but is obviously terribly flawed."
Agile's early evangelists wouldn't mind watching Agile die,Glyptodon,"on April 24, 2020", Because many companies are still transitioning to the realization that software is a core part of their business even if their product is physical.
Agile's early evangelists wouldn't mind watching Agile die,0x262d,"on April 24, 2020",it's fully mainstream. my company (mid sized tech company far from any coast) is adopting it for everyone right now.
"Dear Agile, I’m Tired of Pretending (2018)",bougiefever,"on July 1, 2019","I've been developing software for over 20 years, and I still can't estimate how long something will take me when I've never done it before. This uncertainty needs to become more than just a stick to beat developers about the head and shoulders with. Most of the time the PMs understand this, but there have been many projects where they just don't get it. I have suffered great anxiety from being forced to give estimates when the truth is I have no clue. It depends on how easy it is and how many unforeseen issues I encounter. It was so bad that once my husband asked me how long it would be before I was done cooking something, and I practically had a meltdown. That's when I knew it was time to leave that team. Can we stop pretending we can forecast the unknown? (edit typo)"
"Dear Agile, I’m Tired of Pretending (2018)",xwdv,"on July 1, 2019","No.Even bad estimates are better than no estimates. If you are having meltdowns your reputation is being tied too closely to your ability to give estimates.You must never turn estimates into a promise, always remind people they are estimates.Want to give fast estimates? Here’s how:1) first determine the scale of the task? Is it a year, month, week or day kind of task?2) Then, it’s just 3 of those units. The smallest task takes 3 days. One day to completely fuck up, one day to figure out why, one day to get right. The longest takes 3 years. One year to fuck it all up, one year to learn why, one year to finish it.I suggest never giving estimates in units smaller than a day. They just become noise. If a task is smaller than dayscale just say the task is too small to provide any meaningful estimate but won’t take more than a day."
"Dear Agile, I’m Tired of Pretending (2018)",bb88,"on July 1, 2019",">  Even bad estimates are better than no estimates.No estimate is clearly better.  Here's a common story I've seen across multiple companies.1.  Marketing management asks Engineering management how long it takes to do feature X so they know when to launch the online ad campaign.2.  Engineering management then asks potentially good coder how long it will take.  Coder replies with a time and ""it's just an estimate.""3.  Engineering management reports to Marketing that coder's estimate leaving off the most important caveat, and Marketing treats that as the gospel truth.4.  Coder takes longer than expected because of some bad technical cruft that some other engineer put in because he was potentially rushed or just plain inept.5.  Marketing is pissed because they now have to withdraw the ad campaign, and starts blaming engineering.6.  Under increased scrutiny, Engineering gets a bad reputation, who then throws the coder under the bus in front of Marketing and other managers.7.  This shows up on the coder's annual review who then leaves.8.  Engineering hires replacement which will have a 3-6 month learning cycle, and potentially writes worse code than the person that just left.EDIT:  The point is that if there's no estimate, management has to deal with the uncertainty that the coder experiences.  Hope for the best, plan for the worst."
"Dear Agile, I’m Tired of Pretending (2018)",karmelapple,"on July 2, 2019","What is plan for the worst in a scenario with literally zero estimate?“It may take 0 to 3 years” ?“We literally have no way of knowing?”
“Not even a ballpark?”
“No.”This is what you’ve proposed with no estimate, and this seems extremely unhelpful towards the goal of helping all groups at least have some idea when certain “next steps” can be accomplished."
"Dear Agile, I’m Tired of Pretending (2018)",atoav,"on July 2, 2019","I work as a sound mixer for film and estimating how long it will take is always hard, but I never really got a bad reception when I just said: I canlt tell you unless I see the thing.Hell if you ask a mechanic to fix your car they will also have to check the thing first before deciding how long it is going to take.This is the professional thing to do: gauge the situation, take tour time to figure out the scale of the thing as long as you need and then give a pessimistic guess with a disclaimer that things can easily get out of hand without anybodies fault if unforseen problems arise."
"Dear Agile, I’m Tired of Pretending (2018)",Traster,"on July 2, 2019","Right, but there's a big difference between ""Don't estimate until you've done your due diligence"" and ""Don't estimate"".It's perfectly reasonable to say ""This is a big project, it'll take me a week to know where we stand""- there, you've provided an estimate of the scoping task and promised an estimate in the future as well."
"Dear Agile, I’m Tired of Pretending (2018)",bob33212,"on July 2, 2019",My advice would be to live in the real world. We don't know how long it is going to take. Just like if you go to turn on your car and it doesn't start. Maybe it was a minor issue and the next time you turn the key it will start. Maybe there was a short circuit and the car is totaled. A passenger asking you when you are going to get moving is no help.
"Dear Agile, I’m Tired of Pretending (2018)",sopooneo,"on July 2, 2019","If your car won’t start, it will take more than a second, but less than a year to fix. That is a bad estimate, but better than no estimate for a space alien that doesn’t know what a car is.PM’s are space aliens."
"Dear Agile, I’m Tired of Pretending (2018)",bb88,"on July 2, 2019","The only tool the space alien's PM has is a deadline.  ""Do X by this date or else.""  Because he has no hope for understanding the true problem domain before the project deadline -- just like a space alien can't be expected to learn english in 4 days.A PM with a deep understanding of the software process, can ask insightful questions, identify and possibly mitigate many of the issues beforehand.  So when it gets to the software lackeys, many of the resource/architectural issues may have been solved."
"Dear Agile, I’m Tired of Pretending (2018)",dragonwriter,"on July 2, 2019","> If your car won’t start, it will take more than a second, but less than a year to fix. That is a bad estimateIt's actually a better estimate than most software estimstes, because it isn't just an expected time but a range that results will usually fall within. It would be better if it included an explicit degree of confidence that th actual result would be in the range, and if it was centered around the average time it would take for events in the class."
"Dear Agile, I’m Tired of Pretending (2018)",Aeolun,"on July 2, 2019","In these cases it’s often a matter of ‘give me a week and I’ll tell you’.Then again, a similar number of times, the only information you get is ‘we need a chat program, can you please estimate how long that will take?’. Which will leave it forever impossible to estimate."
"Dear Agile, I’m Tired of Pretending (2018)",notyourday,"on July 2, 2019",> “We literally have no way of knowing?” “Not even a ballpark?” “No.”That's when the engineering lead or whoever was giving that as the answer is told that his services are no longer required.
"Dear Agile, I’m Tired of Pretending (2018)",gomox,"on July 1, 2019",Oh come on. Any decent project manager understands the difference between an estimate and a deadline and plans and communicates accordingly. It's not rocket science. Stuff gets shipped on time all the time.
"Dear Agile, I’m Tired of Pretending (2018)",bitwize,"on July 1, 2019","Any decent project manager who wants to keep their job will acquiesce to people further up in the org chart who want deadlines, not estimates, and who consider the difference between the two to be as fuzzy as it needs to be."
"Dear Agile, I’m Tired of Pretending (2018)",bb88,"on July 1, 2019","> Any decent project manager who wants to keep their job will acquiesce to people further up in the org chartIn my book, that project manager is not ""decent"".  A decent project manager would recognize the situation for what it is and leave."
"Dear Agile, I’m Tired of Pretending (2018)",Aeolun,"on July 2, 2019","Then there won’t be any good project managers, as I’m fairly certain most executives do this shit."
"Dear Agile, I’m Tired of Pretending (2018)",bb88,"on July 2, 2019",That's the problem I've been seeing in non tech based companies.  IOW when tech isn't what they're selling.
"Dear Agile, I’m Tired of Pretending (2018)",dragonwriter,"on July 2, 2019","A deadline is a requirement. It is not a PM’s job to reject requirements, though it is their job to help th customer understand and manage resolution of situations where the combination of requirements given are in conflict, such as when a deadline is insufficient to acheive the functional requirements."
"Dear Agile, I’m Tired of Pretending (2018)",dragonwriter,"on July 2, 2019",And any decent engineering team will accept that a project has deadlines and raise progressively more serious risks with appropriate explanations up the chain as the confidence that completion will occur before the deadline declines below near-certainty.Deadlines can be legitimate project requirements as much as functional requirements are. Identifying practical conflicts between requirements is part of what an engineering team does. Managing resolution of those once they are identified so that the customer gets the best result achievable is what a PM does.
"Dear Agile, I’m Tired of Pretending (2018)",rramadass,"on July 2, 2019",">who want deadlines, not estimates, and who consider the difference between the two to be as fuzzy as it needs to be.This is exactly it. Well said!"
"Dear Agile, I’m Tired of Pretending (2018)",bb88,"on July 1, 2019","There's two issues right?1.  Inability to estimate effort.  Admittedly an academic issue, and should be taught to all engineers in college.2.  Inability of management to deal with delays due to bad estimation.  This might be caused by a ""bozo explosion"", say, (where inept managers hire more inept people underneath them.)Edited to add:3.  Why do we keep making assumptions that management must be infallible?  In any dysfunctional organization, it might just take one bad manager high up in the chain that causes pain for the entire organization beneath him."
"Dear Agile, I’m Tired of Pretending (2018)",redhale,"on July 1, 2019","I cannot believe how much I love the term ""bozo explosion"". I see this situation all the time as a consultant, and now I have a fantastic term for it. Thanks for sharing!"
"Dear Agile, I’m Tired of Pretending (2018)",bb88,"on July 2, 2019","I'm a consultant as well.  You go through enough companies and you can see how much of a problem this actually is.As much as I did not particularly care for the management style of Steve Jobs, as far as I know, he was the one that first used the term.https://guykawasaki.com/what-i-learned-from-steve-jobs/Edited to add:This just happened recently.  Maybe you'll appreciate it.15 years ago or so (before the term ""technical debt"" got widespread usage) management kept asking why we working on so many bugs.  The solution was to label them as ""enhancements"".Just recently within the past year, I saw the exact same thing happen again."
"Dear Agile, I’m Tired of Pretending (2018)",Aeolun,"on July 2, 2019","> If you ask customers what they want, they will tell you, “Better, faster, and cheaper”Amazon took that to heart. Seems to have worked out for them."
"Dear Agile, I’m Tired of Pretending (2018)",gilbetron,"on July 2, 2019",They were the first that made online retail work.  Plus there's the whole AWS thing.
"Dear Agile, I’m Tired of Pretending (2018)",_mdpn,"on July 1, 2019","I want to work where you do, where friction is negligible, cows are perfectly spherical, wind resistance is never a factor, all functions are continuous and differentiable across their entire domain, and all project managers are decent."
"Dear Agile, I’m Tired of Pretending (2018)",gomox,"on July 1, 2019","I'm not saying the story is implausible, but I dispute the idea that estimating software development efforts is an intractable problem that is better left unattempted."
"Dear Agile, I’m Tired of Pretending (2018)",krageon,"on July 2, 2019","Estimating things is important and valuable, but as soon as you get large corporate structures and multiple levels of people communicating involved it becomes a really bad idea. That's why it shouldn't be attempted in those kinds of situations."
"Dear Agile, I’m Tired of Pretending (2018)",james_s_tayler,"on July 2, 2019",Please don't assume decent project managers. That's how you get in trouble.
"Dear Agile, I’m Tired of Pretending (2018)",mbesto,"on July 2, 2019","> Hope for the best, plan for the worst.Oh dear, have you ever spoken to a finance department before?Here's a common story I've seen across multiple companies[0].1. The Finance department alots the marketing department with a $500k budget.2. Marketing department blows through the $500k budget on the engineering department and has no productive app to speak to.3. The Finance department goes back to the Marketing department asking what happen to all of the money they gave them.4. The Marketing department says ""well engineering told it was agile, which meant they didn't know when it would be done and for how much""5. Finance department: ""Ya, you're not getting a budget ever again from us""> No estimate is clearly better.Sorry, but this is not how the real world works. Agile assumes a perpetual budget, which is not realistic for most businesses in the world.[0] -  Personally seen among 100+ and counting."
"Dear Agile, I’m Tired of Pretending (2018)",Aeolun,"on July 2, 2019","Doesn’t agile presume you have some deliverables every week? At the very least they’d have ‘something’. It might not be fit for purpose, but that should have been fairly visible a ways before they blew through the whole budget.Unless, you know, there are other systemic issues in the company."
"Dear Agile, I’m Tired of Pretending (2018)",bb88,"on July 2, 2019","I'm sorry, but if you're spending $500k or more based upon one engineer's ""estimate"" (for which you're paying $10k/month) then something is more fucked up in that company than what appears on the surface.But I agree with you, if the engineering management can't budget and prioritize work to get done, that's a larger issue."
"Dear Agile, I’m Tired of Pretending (2018)",mbesto,"on July 2, 2019","> but if you're spending $500k or more based upon one engineer's ""estimate"" (for which you're paying $10k/month)The $500k was just a random number I came up with. Budgets wildly vary based on whether they get allocated weekly/quarterly/yearly/etc. And also it's never ""one engineer's estimate"", it's usually a project manager who works with N number of engineers to come up with an estimate."
"Dear Agile, I’m Tired of Pretending (2018)",bb88,"on July 2, 2019","And that's the way it should be.But keep in mind that if a developer is in a sprint, he might start adding tickets to the epic because of technical/organizational issues.  Suddenly the epic might look 3x more work than was originally planned.  Note this is not theoretical, as it's happened 3 times to our team already this year.But meanwhile in the example I gave, the developer gets held accountable still for not making the correct estimate.  Management just passes it up the chain rather than trying to increase the confidence around the estimate."
"Dear Agile, I’m Tired of Pretending (2018)",elindbe2,"on July 2, 2019","It's even worse in my organization.  Funding is based on projects so the amount of funding you receive is based on exactly how long your estimate is (if they choose to fund your project).  Often projects are estimated based on ""here's how much money they are willing to spend, so we'll just figure out the number of man hours that amounts to and give that as an estimate."""
"Dear Agile, I’m Tired of Pretending (2018)",notyourday,"on July 2, 2019","> No estimate is clearly better. Here's a common story I've seen across multiple companies.As strange as it may sound to developers, the salary is paid by the customers, current or future."
"Dear Agile, I’m Tired of Pretending (2018)",rubidium,"on July 2, 2019","I’m sorry for your bad experience, but some companies are able to do this well."
"Dear Agile, I’m Tired of Pretending (2018)",TheOtherHobbes,"on July 1, 2019","Because campaigns have to be planned ahead too - anywhere between a few weeks and a year or so, depending on the size of the project and the company, and often timed to match big trade events.And there's always the possibility that if you announce too late competitors will eat your lunch.One way to handle this is to spend some time on a formal estimate. Two to four weeks of R&D to scope a project can help narrow estimates to something approaching realism. You'll still be wrong, but you're less likely to be hopelessly wrong.Asking someone for an instant opinion is madness. That's not an informed estimate, it's just a guess, and usually worthless."
"Dear Agile, I’m Tired of Pretending (2018)",fuzz4lyfe,"on July 2, 2019",Sounds like marketing needs to be agile
"Dear Agile, I’m Tired of Pretending (2018)",rch,"on July 1, 2019",Because if they launch on the original schedule with Partner X they get Massive Benefit Y that could make or break the product. For example.
"Dear Agile, I’m Tired of Pretending (2018)",ScottFree,"on July 1, 2019","This. Most developers either don't want to or can't understand that there are real and valid reasons for wanting a predictable software production schedule.That said, I've only ever seen one software project consistently meet production deadlines. Is there benefit to committing to the original schedule with Partner X if there's no way you can deliver on schedule? Or is it one of those things where Partner X has committed itself and they have no real choice but to work with the sliding deadlines?"
"Dear Agile, I’m Tired of Pretending (2018)",rch,"on July 2, 2019","In the example I'm thinking of the partner wasn't really bothered that the schedule slipped, but the ideal marketing window came and went before the product officially launched, which certainly affected sales. They were really excited that all the planned features made it to market though.I'd say that some aspects of the capability maturity model make sense, even for engineering groups that practice agile day-to-day."
"Dear Agile, I’m Tired of Pretending (2018)",ScottFree,"on July 2, 2019","> the ideal marketing window came and went before the product officially launched, which certainly affected sales.Definitely. I used to see that all the time in the games industry. Getting the right launch window is critical because most of a game's sales happen in the first few days of launch. And yet, games are famous for shipping months, even years late. They usually seem to make it work. I guess you'd be particularly hosed if you couldn't afford the burn rate for the extra X months it would take to get to a decent launch window."
"Dear Agile, I’m Tired of Pretending (2018)",bb88,"on July 1, 2019",Lots of reasons:1.  Marketing management is full of idiots.2.  The coder's estimate is used to tell the CEO when a product will be rolled out.  Who then questions why it didn't get rolled out on time.3.  Marketing gets a bonus for rolling out ad campaigns on time.4.  Marketing is using this for their big trade show  coming up and wants to make a big announcement for maximum impact.Why do you assume management is always competent?
"Dear Agile, I’m Tired of Pretending (2018)",bobm_kite9,"on July 1, 2019","I think this comes down to the idea that estimates are really for coordination.At least, I think that’s the best reason for using estimates.  I wrote something about this here:  
https://riskfirst.org/Estimates"
"Dear Agile, I’m Tired of Pretending (2018)",bobm_kite9,"on July 1, 2019",Actually I don’t really understand why all the HN posts on agile just devolve into a discussion about the difficulty of estimating.Surely there’s more to it than that?
"Dear Agile, I’m Tired of Pretending (2018)",ahelwer,"on July 1, 2019","Well, standup is also terrible. In addition, there's the general agile assumption that developers are capable of consistently producing X hours of work per day. Maybe it's just me, but I'm a bit more burst-y with my work habits than that."
"Dear Agile, I’m Tired of Pretending (2018)",majikandy,"on July 1, 2019","I wouldn’t say Standup is terrible but one where you go round the room giving updates is almost useless. It’s not just you, most developers can do 8 hours work in an hour if they aren’t interrupted with meetings."
"Dear Agile, I’m Tired of Pretending (2018)",Aeolun,"on July 2, 2019",Shouldn’t it average out over 2 weeks?
"Dear Agile, I’m Tired of Pretending (2018)",ahelwer,"on July 2, 2019",Not if you're doing standup every day and expected to report daily progress.
"Dear Agile, I’m Tired of Pretending (2018)",jldugger,"on July 1, 2019",Because the superbowl comes once a year -- seasonality matters!
"Dear Agile, I’m Tired of Pretending (2018)",loup-vaillant,"on July 2, 2019","> You must never turn estimates into a promise,Whoever asked you for that estimate will do that for you…> always remind people they are estimates.…even if you remind them. I mean, the reasonable ones won't, but many people aren't that reasonable.I've been in an interview last week where they told me the teams were strongly committed to the features they planned to do each sprint. Which I interpreted to mean that their estimates are promises.> Want to give fast estimates? Here’s how:My, this looks like it could actually work. I'm going to try it right away."
"Dear Agile, I’m Tired of Pretending (2018)",davidjnelson,"on July 2, 2019","It’s funny because even with capital a Agile / Scrum, in 2011 the term commitment got changed to forecast [1].  But then many companies who are dogmatic about Agile still use estimates as commitments anyway.  That makes technical debt really hard to avoid...  One solution is to create technical debt tickets in the backlog so people become aware of it.1. https://www.scrum.org/resources/commitment-vs-forecast"
"Dear Agile, I’m Tired of Pretending (2018)",rramadass,"on July 2, 2019",">Even bad estimates are better than no estimatesAbsolutely not! An estimate should not be a random number but should be constrained with available data however small it might be. If you feel that you don't have enough to form a ""guesstimate"" do not give me a number but first work on finding the data which will enable you to form a proper estimate.Once you give an estimate, no matter how many times you explain that it is a ""guesstimate"" people tend to lock on to the given number. It then becomes a real battle trying to explain the hurdles (and there are always some unknowns) while revising the original estimate. Soon mutual distrust develops between the implementation engineers (stressful and detrimental to actual execution) and the management leading to everybody losing faith in estimates. Agile/Scrum have exacerbated the problem with their short time windows and sprints. In one team that i was on, people just gave up and started quoting 2 weeks for any and every feature, trivial or non-trivial and the whole exercise became meaningless.PS: The book ""How to Measure Anything: Finding the Value of Intangibles in Business"" is worth reading to get some ideas on how one might do proper estimation."
"Dear Agile, I’m Tired of Pretending (2018)",freshhawk,"on July 1, 2019","> You must never turn estimates into a promise, always remind people they are estimates.The person giving the estimate isn't the one who does this. Other people turn them into promises, because that's what they were actually asking for when they asked for ""an estimate"".Giving some kind of uselessly vague estimate isn't particularly useful from an engineering perspective and everyone else has been trained by scrum the last decade to treat them as promises. So don't do the thing that you know will have a bad effect."
"Dear Agile, I’m Tired of Pretending (2018)",Redoubts,"on July 2, 2019","> The person giving the estimate isn't the one who does this. Other people turn them into promises,Why is that your problem? If someone tried to hold me to such an estimate, I would simply say ""I never promised this, in fact I explicitly didn't promise this. I'm sorry X lied to your face about this."" Don't own other people's failures."
"Dear Agile, I’m Tired of Pretending (2018)",matwood,"on July 1, 2019","> Even bad estimates are better than no estimates.I disagree. The only bad estimates that are ok have to error on the high side. I have found that biz side may not like the longer estimate, but they much prefer that over missing a date."
"Dear Agile, I’m Tired of Pretending (2018)",humanrebar,"on July 1, 2019","Right. If they asked for a 95% confidence number, they would get something to depend on more whole heartedly. But that date will be too far in the future to be comfortable.So they look for more of a natural median. And then are shocked when dates are missed more than half of the time (!).So if you want honesty, ask for estimate ranges or 95% sure estimates. Then pareto your plan to hell and back so everyone understands the risk. Then reestimate periodically as you home in on completion."
"Dear Agile, I’m Tired of Pretending (2018)",ehrm2017,"on July 2, 2019","Great you know how you work best.There are other ways. The best of humanity have a wide range of methods they use to get shit done at a level most of us dream of.So I have a hard time taking a straight jacket process like you suggest as some sort of panacea. It’s essentially another manifesto. What’s the expiration date on this.Everyone goes on about the value of writing less code, and here we are incentivizing manufacturing line processes for crafting more code?Note the authors of things like the Phoenix Project: rich Silicon Valley types. We’re just discussing how to be better assembly line workers for tech aristocracy.Figure out how to build your business in such a way it works for the business. Google didn’t get big because it has perfect process; it can and often is a mess. It got big solving it’s problems and monetizing the solution (every company will need to search for digital files, send email, edit docs, etc).Figure yourself out, compare with others. There’s is no one size fits all to thinking about problems and even the biggest winners don’t have all the customers there is. Why isn’t Gmail the only email solution?There’s never a perfect process."
"Dear Agile, I’m Tired of Pretending (2018)",sbov,"on July 2, 2019","I do something similar, except don't assign to a number.  My back of the envelope estimates are: hours, days, weeks, months.This gives people enough information as to whether or not a change is worth it.  If the difference between, say, 2 and 5 days  makes or breaks the feature it's probably not worth exploring in the first place."
"Dear Agile, I’m Tired of Pretending (2018)",DigitalSea,"on July 2, 2019",">You must never turn estimates into a promise, always remind people they are estimates.Herein lies the problem. Many companies that do ""Agile"" fail to realise that estimates are just guesses, they're not accurate and yet, the issue is companies taking these estimates and holding developers to them. That's the real problem.It's all well and good to say, remind people they're only estimates, but many of us who have been in this industry longer than a minute knows that estimates nine times out of ten are taken as promises and that's when we get crunch and burnout as developers are forced to achieve the impossible with excessive hours.Deadlines need to drop dead. Code quality suffers when you put a timeframe on it."
"Dear Agile, I’m Tired of Pretending (2018)",ryanthedev,"on July 1, 2019",Features and stories should be completable in the span of an iteration.Epics and Features are prioritized by the business and product.  They can be expected to slide from iteration to iteration.Any User Story or task should be expected to be completed an a single iteration.If you keep having open stories stop bringing in a complete story.  Just assign tasks.Features and Epics are pointed.Business looks at points earned per year or quarter.  Look for trend.IT leadership looks at amount of open stories and tasks that were moved from iteration back to the backlog.  Over the span of all iterations.This will ensure teams are breaking down work into actionable goals.
"Dear Agile, I’m Tired of Pretending (2018)",rramadass,"on July 2, 2019","Good lord! Buzzword Bingo and Obfuscation at its finest!Nothing personal, but you have just confirmed to me why i loathe the Agile/Scrum/[fad] processes so much. Take easily understood commonsense ideas/terms and invent fancy names for them, convert heuristics to axioms and sell a business around it."
"Dear Agile, I’m Tired of Pretending (2018)",Redsquare,"on July 2, 2019",So said the 2 day scrum master
"Dear Agile, I’m Tired of Pretending (2018)",dragonwriter,"on July 2, 2019","> Even bad estimates are better than no estimatesBad estimates are worse than no estimates, but if you are doing work complexity estimation and measuring velocity (which you need to do to evaluate internal process changes, manage workload, and for lots of other purposes), you are incidentally gathering the info you should need for excellent estimates, which are not necessarily hyperprecise but are excellent instead because they can explicitly quantify uncertainty as well as mean expected delivery time."
"Dear Agile, I’m Tired of Pretending (2018)",shados,"on July 1, 2019","> Can we stop pretending we can forecast the unknownWithin reason. Ive worked in orgs where there is no estimate at all, and that bring a different set of problems (unbound projects and no work getting done because of the complete lack of pressure).Now you're totally right: software engineers rarely do the same thing (or even similar things) twice, so estimating is somewhere between ""very hard"" and ""impossible"".""Scoping"" however is still needed.If you ask me ""How long will it take to add a button to this page"", that's a very ambiguous question.I can solve the problem in a few ways:
- Tack on a plain html button element
- Add a button from an existing styleguide/library/design system.
- Build our own button component instead of reusing one.
- Build a full blown button editor that allows a non-software engineer to use a WYSIWYG editor that will create their own custom button and insert it on the page without code.Now obviously there's a range between these, going from a few seconds (plus deploy), to months or years of work.The project/product/whatever managers and the tech leads/engineers need to work together to agree on scope. An arbitrary deadline can be picked and then engineers have to do whatever they can up to that deadline. Or we can agree on minimum functionalities with onbound deadline that MUST be created regardless of how long it will take. Realistically, successful projects will be a mix of both, along with various forms of padding and revisiting estimates along the way to account for unknown and mistakes."
"Dear Agile, I’m Tired of Pretending (2018)",jrs235,"on July 1, 2019",> because of the complete lack of pressureI would say it may be due to more of a lack of focus.
"Dear Agile, I’m Tired of Pretending (2018)",mizchief2,"on July 1, 2019","estimating is either easy or impossible. You either have done it repeatedly and have data to show how long it took, or you have no fucking clue.Focusing on the most important features of each module first, and then the most important of the next then the next with a focus on progress towards something useful is the only way to go.When you have a consistent team and some tracking data to compare task size to hours required to complete, then you can start doing estimates for future work, but you never have to ask the dev team to estimate other than setting some relative size between tasks and trying to stick to the sizing system. I prefer Fibonacci story points, but it can be anything that has a number."
"Dear Agile, I’m Tired of Pretending (2018)",RocketSyntax,"on July 1, 2019",It's more about what is BEHIND the button.
"Dear Agile, I’m Tired of Pretending (2018)",hnick,"on July 2, 2019",The Why rather than the What. Maybe they don't even need a button.
"Dear Agile, I’m Tired of Pretending (2018)",humanrebar,"on July 1, 2019",> unbound projects and no work getting done because of the complete lack of pressureActual demos seem to help a lot here in my experience.
"Dear Agile, I’m Tired of Pretending (2018)",RogerL,"on July 1, 2019","Great! Please let us know when cancer will be cured.In other words, ""I don't know"" is sometimes a complete answer. I don't know. Period.This is supposedly one of the main points of this religion (agile). Some things are unknowable. So you move ahead a bit, and reassess. If you are scrumming, that is usually 2-3 weeks, and don't get me started on that arbitrary limit. But, you try to move forward for a bit, learn something, and then that might1) let you know enough to know how to estimate2) give you some information on what not to try next (I tried a, b, and c, and they all failed)3) give you guidance on what to work on next (d seems promising, I can flesh it out more and see if it still seems like a promising avenue).You proceed on, and eventually get your hands around the problem, or the person writing checks decides this is not an economical search (because that is what this is, search on a multidimensional surface) and change/delete the requirement.That's what agile is supposed to be, with a nod to the fact that yes, we can estimate writing a single database query or something fairly well, so in some cases estimates can be useful at this scale.The bane of my existence is the endless pressure for estimates. I'm doing research; no one has done this stuff before. It is truly unknowable. If it was known it would be in a paper somewhere, and I would merely be implementing that paper. So I get told ""break it down into smaller chunks"", as if my 30 years of success didn't teach me how to break down problems. Thanks PM that has never coded or produced anything intellectually novel before! I'm surely being dumb and/or obstinate!I got that written in my previous performance review, that I don't know how to plan and break down problems, because I flatly refuse to play this game. You get punished for trying for hard things. It's nonsense. ""I don't know"" cannot be changed by insisting on an estimate."
"Dear Agile, I’m Tired of Pretending (2018)",JetezLeLogin,"on July 1, 2019","Insisting on the estimate in that situation is basically a special case of the old trope of using something meaningless but easy-to-measure as a proxy for something important but hard-to-measure. It's hard to know how long something will take, and easy to ask someone how long they think it will take (or if it's you, to pull an estimate out of your butt)."
"Dear Agile, I’m Tired of Pretending (2018)",isoskeles,"on July 1, 2019","> Please let us know when cancer will be cured.An absurd comparison given most software engineering tasks have been done before, they're simply difficult to estimate for some given team without expertise in doing some particular task."
"Dear Agile, I’m Tired of Pretending (2018)",mplanchard,"on July 1, 2019","TBF, GP said they were doing research, so it’s entirely possible that they’re working in a space with little to no prior art."
"Dear Agile, I’m Tired of Pretending (2018)",sopooneo,"on July 2, 2019","More than a day but less than a millennium. I am 99% certain on that.Granted that’s more broad than a PM (or humanity) would want, but it is SOMETHING."
"Dear Agile, I’m Tired of Pretending (2018)",rramadass,"on July 2, 2019","Assuming you are not being sarcastic, quote from another post;>the old trope of using something meaningless but easy-to-measure as a proxy for something important but hard-to-measure"
"Dear Agile, I’m Tired of Pretending (2018)",rhizome,"on July 1, 2019",">I feel as you should be able to provide an estimate even if it something that you have not completely done before. One should spend some time to gauge how much of this new thing is really ""new"" and what parts should be easy to figure out. Then, try to look at resources about those unknown parts, and that should allow to provide a rough estimate.This isn't personal, just a comment on a way of thinking that is not uncommon: each of those sentences are insane and not based in reality. You may ""feel"" these things are possible, but that's about as far as it goes. ""Just look up all the unknown stuff."" OK."
"Dear Agile, I’m Tired of Pretending (2018)",xmprt,"on July 1, 2019","I wish people were more comfortable saying ""I don't know but I can do some research and get back to you later."" Often times that's where the conversation about time estimates ends because they don't ask you again unless it's actually important. And if they do ask you, now you have a better answer (assuming you actually looked into the problem you're trying to solve).The other problem with time estimates that I find is that even though I might know for sure that a certain feature will take only a day or two, I can't tell when it'll be done because I usually have other things to work on as well."
"Dear Agile, I’m Tired of Pretending (2018)",JustSomeNobody,"on July 1, 2019",Well here's the thing. Often I'm asked for my estimate in the same meeting I first see the story. I have no way of researching before giving an estimate.> ... and then if PM/boss don't understand there is not much you can do but probably look for a better gig.If only it were that simple.
"Dear Agile, I’m Tired of Pretending (2018)",shados,"on July 1, 2019","> Often I'm asked for my estimate in the same meeting I first see the storyThat's definitely awful. Personally when I was leading agile teams, for anything non-trivial we'd start by creating an issue to scope the individual parts of the project, frequently allocating several days to do so.And some stuff is still mostly unscoppable. That's where Fermi estimation and the whole ""How many chips can you fit in the empire state building"" time deal comes into play. You have no way to really know how long something will take, but we need to allocate resources SOMEHOW, even if its completely off. An imperfect guesstimate is better than none at all.The catch is that everyone involved has to know that its an imperfect (and potentially completely wrong) guesstimate, and it has to be revisited regularly as new information comes in. Everyone also has to be ok with restructuring the project (or even cancelling it, in extreme cases!) if we learn its completely wrong.We recently discovered at work that an assumption/decision that was made nearly 2 years ago turned out to be totally false. The project that relied on that false assumption was about 10% in (the assumption was made long ago, but actually work started recently). We had to sit together and ask ourselves if it was actually worth pushing through the 90% (and likely regret it in a year), or agree to scrap the 10% and start over now that we know what we're doing. We have to be careful not to pull off a Vista/WinFS resource blackhole though!"
"Dear Agile, I’m Tired of Pretending (2018)",chrshawkes,"on July 1, 2019",It's even worse when your lead is giving timeframes for you...
"Dear Agile, I’m Tired of Pretending (2018)",ScottFree,"on July 1, 2019","I used to think that too, but is it really? If estimates are always wrong, then is there really much of a difference? Besides, the lead often has business related information that informs his decision of ""this feature must take no longer than X amount of time or we're going to have problems with Y"" where Y is often political and not technical."
"Dear Agile, I’m Tired of Pretending (2018)",chrshawkes,"on July 3, 2019","It just goes against agile development so it seems like if we're doing that, we're not doing agile.  Then again, nobody is it seems? :)"
"Dear Agile, I’m Tired of Pretending (2018)",ScottFree,"on July 6, 2019","I remember when Agile development used to involve chickens and pigs. If you have no idea what I'm talking about, then you're not doing Agile as it was written. Almost nobody is today."
"Dear Agile, I’m Tired of Pretending (2018)",Eupolemos,"on July 2, 2019","I don't agree with you - you're presenting the view which is the exact position people here are trying to put words to why doesn't work (and often hate about their jobs).But downvoting you is just as counterproductive as burning the devil's advocate and you have my upvote. I hope people will get a hold of their emotions.I've just spent a month doing a script I thought I could do in a weekend. I didn't realize several of the difficulties inherent in the data, I didn't realize I'd have to up my game with regard to techniques in shuffling data and I didn't know I'd run into so many quirks in the programming language.I didn't know what I didn't know. That's why I guessed wrong.In everything you haven't done before, you don't know what you don't know - and only a small portion of those things could have been realized by spending some hours researching the work I needed to do. Those didn't pop up on my radar until I had to solve them :(But that knowledge isn't without value. Knowing that it is doing stuff you haven't done before that is risky (timewise) means you can underscore when you have a high-risk assignment."
"Dear Agile, I’m Tired of Pretending (2018)",kryogen1c,"on July 1, 2019","Im not a coder, so maybe the domain is different in a way i dont understand, but I agree with you 100%.Refueling nuclear aircraft carriers have projections start to finish, a half decade long. There are countless pre and co requisites with interrelated projects, not counting the mundane issues like material and manpower.I simply do not accept it is impossible to project a timeline for software. If someone stops you in the hall and says ""hey you, how long will this take?""  That is not a reasonable question, so sure you cant give a reasonable projection. If youre a professional coder and you show up to a planning meeting and your answer is ""I dont know, i have no idea and its not possible to provide an answer even on an order of magnitude"" thats just ridiculous."
"Dear Agile, I’m Tired of Pretending (2018)",chhickman,"on July 1, 2019","> Refueling nuclear aircraft carriers have projections start to finish, a half decade long.The difference is that those projections weren't spit out on the fly by a engineer after a 15 minute pitch of some manager's great new idea. Those plans took many months of effort to put together by a team of specialists planning out the various details of the project. Software does have the equivalent of this, it's called waterfall development. The reason we don't do this is because, unlike aircraft carrier design, if you take six months to create a project plan your requirements will have likely already substantially changed."
"Dear Agile, I’m Tired of Pretending (2018)",lazyasciiart,"on July 1, 2019","I'm not a nuclear aircraft carrier refueller, so maybe the domain is different in a way I don't understand, but it's ridiculous to need a five year plan to just refuel something, people refuel cars in five minutes everyday.I simply do not accept that it is impossible to refuel in a week or so, assuming it's a couple orders of magnitude more complex than refueling a car.Thats about how your comment sounded."
"Dear Agile, I’m Tired of Pretending (2018)",kryogen1c,"on July 1, 2019","+1However, your comment didnt help me understand. It doesnt help because even if i embark on something i have no idea about, even in total ignorance i can _bound the problem_.I dont understand how a professional coder can approach even a problem and have no idea - you have to DO the problem, so what is your approach? Just start coding and somewhere between 5 days and 5 years you stop?Planning meetings dont happen in a vacuum, so what kind of problem can you research but have literally no guess about its solution? Bear in mind, we're not talking edge cases (research grants or whatever), but coders hired to do a job."
"Dear Agile, I’m Tired of Pretending (2018)",rramadass,"on July 2, 2019",">i can _bound the problem_This is the nub of the problem when it comes to software. I understand your skepticism but software development is really very different from other activities. It is ""mind-stuff"" (and thus quite unstructured) which needs to be expressed in very precise language to solve an [almost always ill-defined/constantly redefined] problem. The inherent complexity involved is huge due to the number of degrees of freedom and malleability involved.I can do no better than point you to the article ""The Humble Programmer"" (http://www.cs.utexas.edu/users/EWD/transcriptions/EWD03xx/EW...) written by one of the pioneers of Computer Science to really understand the issues that make Software Development such a complex and difficult activity. And since then (the article is from 70's) we have made matters exponentially worse by orders of magnitude."
"Dear Agile, I’m Tired of Pretending (2018)",thwarted,"on July 2, 2019","The top answer to ""Why are software development task estimations regularly off by a factor of 2-3?"" on quora is a great analogy.https://www.quora.com/Why-are-software-development-task-esti..."
"Dear Agile, I’m Tired of Pretending (2018)",mdpopescu,"on July 2, 2019","Here's an analogy.The spell for floating an object is Wingardium Leviosa. It usually takes an 11-year old a few days to become proficient at it.Please give an estimate for a modification of this spell that will make the object lift, complete two vertical circles (720 degrees) and then go back to the starting point.(Before you ask: yes, we're doing magic. We're combining words in specific ways to create significant effects in the world.)"
"Dear Agile, I’m Tired of Pretending (2018)",jdlshore,"on July 2, 2019","Software development is filled with fractals. To do A, you break it down into A1, A2, and A3. To do A1, you break it down into A1.1 and A1.2. To do A1.1, you break it down into A1.1.1 and A1.1.2.In even a small project, that means that your moment-to-moment work might be something like ""do task A4.1.2.3.5.3.2.1.5.4"". Not literally, but conceptually, that's what's happening. Every task involves a bunch of other tasks, which involve a bunch of smaller tasks, ad infinitum.This is probably similar to your refueling of a nuclear aircraft carrier. Big tasks involve little tasks, which involve smaller tasks. I assume. I've never refueled a nuclear aircraft carrier. But I have developed a lot of software.Every software project is a working a plan that has never been done before. Because when it is done, the result is software that is infinitely reproducible, so there is no need to do it again. It's as if somebody needed to figure out how to refuel a nuclear aircraft carrier once. And then after that, everybody who wanted to refuel just cut-and-pasted a fully-fueled carrier.In many ways, writing software is like figuring out that plan. It's not following the plan, it's creating the plan. And somebody who knows how to do A can figure out that involves A1, A2, and A3. And they can probably figure out that A1 involves A1.1 and A1.2. But they can't predict all the way to A2.3.1.5.2.4.2.2.5.1.1.1.5.2. (It's been tried. It didn't go well. Google ""Software Crisis."") Too many issues don't appear until you try to solve them for real.And those little edge tasks way down at the bottom? They might take five minutes. Or they might turn into another nested set of tasks that takes five hours. Just today, I was working with a team trying to solve a simple problem: print the URL of their current web page. This was no problem. The tool we were using to serve web pages told us the current URL. But it only told us the url's path (the part after the domain name). We also needed the scheme (""https:"") and the domain name (""news.ycombinator.com"") and the port ("":80"").And that wasn't something our tool expected us to want [1]. So a five minute task turned into a half-day marathon of reading documentation, trying things, and reading more documentation. It took us half the day to figure out how to do something that should have taken us five minutes, and we had assumed it would only take five minutes when we estimated the larger task two weeks ago.Coders who know professional estimating techniques approach this problem by using Monte Carlo simulations that provide a probabilistic range of dates. The high-confidence numbers resulting from these simulations are usually way too far in the future to satisfy stakeholders, because the simulations have a long tail. (More can go wrong than can go right.) Professionals have found it's often easier to refuse to provide estimates than to fight over high-confidence estimates or educate stakeholders in interpreting probabilistic date ranges. Not estimating saves lots of time, too.I hope this long-winded explanation is the help you were looking for.[1] For the nitpickers in the audience, I'm obviously leaving out a huge amount of detail about how our REST API was actually interacting with its framework. But that's the gist--we were trying to find a clean way to translate our current absolute URL to another absolute URL. Even now, I'm sure we were missing something obvious."
"Dear Agile, I’m Tired of Pretending (2018)",mdpopescu,"on July 2, 2019","This is a much better explanation of the problem with estimates than my analogy :)Especially this part:Professionals have found it's often easier to refuse to provide estimates than to fight over high-confidence estimates or educate stakeholders in interpreting probabilistic date ranges. Not estimating saves lots of time, too."
"Dear Agile, I’m Tired of Pretending (2018)",ehutch79,"on July 1, 2019","False equivalence.You planning 'how to put fuel in a nulean aircraft carrier'.For most software projects the equivalent question being asked is 'can you put some fuel in this thing we have'.When asking things like
    * what kind of fuel
    * is the thing a container or a vehicle
    * etcThe response is often 'isn't it obvious, you're the developer you should know'.Can you tell I'm in the middle of training coworkers to offer up proper requirements."
"Dear Agile, I’m Tired of Pretending (2018)",darkr,"on July 1, 2019","Very true; to expand on this metaphor, past experience has lead me to ask “does this thing actually need fuel, or is it in fact a bicycle?”; aka: please give me the full context - what are you actually trying to achieve and why?"
"Dear Agile, I’m Tired of Pretending (2018)",uygarpe,"on July 1, 2019",I'm going to steal this if you don't mind.
"Dear Agile, I’m Tired of Pretending (2018)",ehutch79,"on July 4, 2019",feel free to
"Dear Agile, I’m Tired of Pretending (2018)",coldtea,"on July 1, 2019",">I simply do not accept it is impossible to project a timeline for software.Well, as you said, you're not a coder.""Refueling nuclear aircraft carriers"" has so fewer fail states and unknowns, it's not even comparable to writing a large piece of software."
"Dear Agile, I’m Tired of Pretending (2018)",Scarblac,"on July 1, 2019","> If youre a professional coder and you show up to a planning meeting and your answer is ""I dont know, i have no idea and its not possible to provide an answer even on an order of magnitude"" thats just ridiculous.True, but it's because that question is often ridiculous.If it's technology I've never worked with before, in a domain I've never worked, for which the test data doesn't exist yet, it's perfectly reasonable to be outside an order of magnitude.E.g., we mostly do Web app development with React and Django, sometimes going into more complicated data processing and visualization. In a recent planning meeting we were asked about recognizing waterways from aerial photographs to improve local government's GIS datasets. Ummm..."
"Dear Agile, I’m Tired of Pretending (2018)",shados,"on July 1, 2019","> we mostly do Web app development with React and Django, sometimes going into more complicated data processing and visualization. In a recent planning meeting we were asked about recognizing waterways from aerial photographs to improve local government's GIS datasets. UmmmTo be fair, thats something that happens all the time in ""normal engineering"". While the field itself is much better understand (mostly because aside of record beating sky scrappers, its usually within the same problem space), not everyone knows everything.For a more down to earth example, if I ask my carpenter to scope out a bathroom remodel, the first thing he's going to do is call a plumber to take a look. The carpenter's not going to be able to give an answer on the plumbing themselves, but they sure as hell can say ""Im going to ask someone and get back to you on it"".As a software engineer, I have a network of connections I can reach out to if I'm asked about a problem completely out of my space, and you'd be hard pressed to ask about something that no one in my team knows or has a connection to someone who knows. Definitely won't get the answer today or even tomorrow, but we can get SOME information."
"Dear Agile, I’m Tired of Pretending (2018)",davesnothere,"on July 1, 2019",The domain is different in a way you don't understand.
"Dear Agile, I’m Tired of Pretending (2018)",repolfx,"on July 2, 2019","The domain is different, indeed.Refuelling a nuclear aircraft carrier may be a complex operation but it's one for which the plan was already developed quite some time ago.To compare to software development is missing the point. Building a PC, installing Windows and all the apps you need might take half a day if you're experienced, and it'll take half a day each and every time: it's labour and you can't reduce the time taken to zero. That's like refuelling an aircraft carrier: executing a plan.But software development isn't like manual labour where you execute a pre-determined plan. It's more like researching how to build the aircraft carrier. Once the plan (the software) is built, installing and executing it is trivial and takes very predictable amounts of time, which means software developers are almost always doing ""research"" even if it doesn't seem that way.How long did the first nuclear aircraft carrier take to design? Well, literally the first sentence of the Design section of the wiki article for USS Enterprise says:Enterprise was intended as the first of a class of six carriers, but massive increases in construction costs led to the remaining vessels being cancelledSo I guess ship designers suck at estimating about as much as software developers do."
"Dear Agile, I’m Tired of Pretending (2018)",BurningFrog,"on July 1, 2019","One way software is different is that you're always doing things you've never done before. Because if you've done it before, you can just reuse that code.This is probably not how the refueling nuclear aircraft carriers projects work.That said, it's usually not quite as completely unknowable as  your last sentence. Then again, it frequently is.The real tension is about trust. When people think engineers are lying about their estimates."
"Dear Agile, I’m Tired of Pretending (2018)",zentropia,"on July 1, 2019","I will say that in sfortware you can estimate but because there are many unknown things it's difficult.Is a bit like ""How long it will take to discover the cure for cancer?"""
"Dear Agile, I’m Tired of Pretending (2018)",mdpopescu,"on July 2, 2019","Yes!""We have this problem, you see, where cells sometimes start to multiply aggressively instead of doing their job. That's a bug, the customers are complaining. How long will it take to fix it? What do you mean you don't know - not even a ballpark estimate?"""
"Dear Agile, I’m Tired of Pretending (2018)",reroute1,"on July 1, 2019",You refuse to accept that there's a possibility of something in a domain you have no understanding of... That sounds like a very illogical refutation in itself
"Dear Agile, I’m Tired of Pretending (2018)",buzzerbetrayed,"on July 1, 2019","Could you expound on this? I’m not saying I disagree, I’m just not sure which part of what he says disqualifies software engineering from being “engineering”"
"Dear Agile, I’m Tired of Pretending (2018)",rhizome,"on July 1, 2019","Start with the HUGE failure rate in software development. There is no provable reliability and/or costing, nor is there any form of standardization beyond RFCs and ""best practices."" One might even doubt that it's even possible for there to be standards like you see in capital-E Engineering due to the unique and complex nature of general computing systems.To sum up, software development requires too much trust, way more than would be acceptible in an aircraft carrier or airplane or nuclear bomb. Or refrigerator."
"Dear Agile, I’m Tired of Pretending (2018)",tra3,"on July 2, 2019","What about Engineering (or, construction, say) being hundreds of years old vs software development only 50?Not arguing with your main point, but curious to hear your thoughts."
"Dear Agile, I’m Tired of Pretending (2018)",repolfx,"on July 2, 2019","Software engineering is clearly engineering. The main difference is simply that in the software world, engineers often report directly to people who aren't engineers. This basically never happens in other fields - e.g. all buildings, tunnels, railways etc are built by dedicated engineering firms founded and run by more engineers. The exception in software is of course the tech industry, which routinely pulls off engineering marvels.Projects usually go wrong, or are ""late"" (relative to estimates engineers didn't want to give in the first place), when they're being closely controlled by people who are not engineers. The recent article on Berlin's new airport being a case in point, where the politicians tried to double its size after it started being constructed and the entire project collapsed in a heap.Now imagine that happening all the time, every day. That's the enterprise software world."
"Dear Agile, I’m Tired of Pretending (2018)",Frost1x,"on July 1, 2019","I'm the same way but only about 15 years experience. I have a friend recently retired who has done a wide variety of software development since the era of punch cards (at least 40 years development) and he agrees with me entirely.I'm not sure how people can provide any reasonable estimates, especially these days when technology is shifting even faster under your feet unless it's a clone of something you've already done in a specific set of technologies that haven't changed.For me, I simply make a very conservative guess and use a 2x or 2.5x multiplier to be safe. I'm usually far ahead of schedule but there have been occasions I as happy I added a 2.5x multiplier in. Everyone is typically happy... the fact is, my estimates are garbage."
"Dear Agile, I’m Tired of Pretending (2018)",danmaz74,"on July 1, 2019",Even those estimates are good for people who have no clue if something can take 2 weeks or 6 months. They're not garbage.
"Dear Agile, I’m Tired of Pretending (2018)",vnorilo,"on July 1, 2019","This is what I do! I disagree on 'garbage', though, I would say that you sound like you estimate very well, and that factor of 2.5 uncertainty is reasonable given all the unknowns in this line of work."
"Dear Agile, I’m Tired of Pretending (2018)",username90,"on July 1, 2019","> Everyone is typically happy... the fact is, my estimates are garbage.If people are happy with your estimates then they are good estimates."
"Dear Agile, I’m Tired of Pretending (2018)",snarfy,"on July 1, 2019","You go to the mechanic and tell them your car won't start - nothing happens when you turn the key.  You ask them how long it's going to take to fix and how much it will cost.They don't assume it's the starter and tell you it will be $400 for parts and labor.  They tell you it will be $150 diagnostic fee and the diagnostic will take two hours.  Then they call you and tell you the cost to fix and time it will take.For whatever reason, software engineers don't have the luxury of doing a diagnostic.  We are made to guess up front and assume it's the starter, when we really have no idea what rat's nest is under the hood until we look."
"Dear Agile, I’m Tired of Pretending (2018)",theptip,"on July 2, 2019","> software engineers don't have the luxury of doing a diagnosticThese are called ""spikes"" in the agile community (no idea why), and ""prototypes"" elsewhere.If you feel that the error bars are too wide on your estimate, you should build the minimum prototype required to reduce the uncertainty to tolerable levels.I like to schedule these at least a sprint prior to kicking off the main task, so that you can benefit from the improved estimate accuracy when actually scheduling the thing."
"Dear Agile, I’m Tired of Pretending (2018)",rufflez,"on July 2, 2019","Often, you think it is a car, and then when you start to work, you realize it is actually an octopus"
"Dear Agile, I’m Tired of Pretending (2018)",gilbetron,"on July 2, 2019","I love this comment!The analogy I've been using lately is that it's like estimating how long it will take to pack your kitchen when you are moving, except sometimes you open a cupboard door and there's another kitchen inside."
"Dear Agile, I’m Tired of Pretending (2018)",GFischer,"on July 2, 2019","For whatever reason, software engineers don't have the luxury of doing a diagnostic.That´s not necessarily true. I´ve worked with very good, serious consultancies, and I´ve seen a quote for thousands of dollars for exploratory work to give an estimate. Of course that was for a million dollar project - smaller projects might not have this opportunity.Other companies had some interesting approaches where they gave order-of-magnitude estimates and then refined the estimate iteratively."
"Dear Agile, I’m Tired of Pretending (2018)",disqard,"on July 1, 2019",This was a good analogy!
"Dear Agile, I’m Tired of Pretending (2018)",jtolmar,"on July 1, 2019","Most time estimates aren't necessary in the first place and it's aggravating that we need so many of them. Yes it's mostly a stick to beat devs with.But since folks reading this will probably need to make estimates anyway, this tends to be accurate: Estimate it'll take as long as the most recent similar thing you've done (real time, not heads down time). Resist the urge to trim out parts of the previous task that aren't related (you'll have new yak shaving) or related to mistakes you've learned not to make (you'll make new ones). If it's really different from anything previous, look for a time you had to learn something and implement a new system based on what you learned (you're allowed to be meta)."
"Dear Agile, I’m Tired of Pretending (2018)",jen729w,"on July 1, 2019","After many years in large infrastructure transformation projects, Johnny’s Rule of Threes now goes like this:1. The first time you do something, you can guess how long it will take and what the detailed steps will be, but that is all. You should still plan it, but during execution of this phase you must take copious notes. Do not expect it to be correct.2. After you have done something for the second time — using what you learned from the first time — you should end up with an accurate schedule. This schedule contains all of the steps required to do the thing along with accurate estimates of time and cost.3. The third time you do the thing, you are able to do it to schedule and to budget."
"Dear Agile, I’m Tired of Pretending (2018)",nitely,"on July 6, 2019","I can see how this would work for software boutiques doing fairly similar projects each time, or projects with very similar parts, but not in complex products. Much less for software that does not use any kind of framework or follows any kind of recipe. Sometimes it's just step 1 in a loop."
"Dear Agile, I’m Tired of Pretending (2018)",allenu,"on July 1, 2019","I agree. My theory now it's due the fractal nature of the tasks in software development. To design at a high level and break out the work, you have to make some assumptions about the ground-level designs (i.e. how individual components talk to each other). As you start implementing those, you'll have often encounter unexpected constraints that require you to rework the high-level design. As you progress through implementation, you find more and more tasks that need to be done and eventually the number of tasks generated levels off and starts to decay and it's only then that you really have an idea of how long you need (assuming no large bugs surprise you at that point).I find even heuristics like double your estimate or padding it aren't useful because there's so much variance."
"Dear Agile, I’m Tired of Pretending (2018)",cwyers,"on July 1, 2019","Flip it around: it's really hard to budget, plan for staffing, make commitments, etc. without the ability to give estimates of this sort. The best thing to give yourself when giving estimates of a dificult sort is the freedom to be wrong, and the ability to express how confident you are in such an estimate."
"Dear Agile, I’m Tired of Pretending (2018)",bsder,"on July 2, 2019","> Can we stop pretending we can forecast the unknown?Except that you're wrong.We predict quite well, thanks.  The problem is that everybody ignores the predictions.Most people predict approximately where the 50% probability is with maybe a little fudging.  And they tend to be pretty good at it.The problem is that everybody just adds those up.  And that's the disaster from a statistical viewpoint.Things can only come in so early, but they can come in infinitely late.  A blown schedule on an early dependency throws everything out of whack far more than a late dependency would.We can roll these up in a proper way.  We can run Monte Carlo simulations and get ""real"" numbers.  People have done this and the results are remarkably accurate.The problem is that someone in management will always undercut the realistic estimate for personal gain.  And then wind up longer than the estimate at the end.And, the worst part is that this is RATIONAL.  The only way to get a project completed is to start and get the sunk-cost fallacy rolling in the powers-that-be."
"Dear Agile, I’m Tired of Pretending (2018)",matthewhartmans,"on July 1, 2019","I think this is where a 'spike' solves your problem.By creating a spike, you can do some initial investigation into how the code is written, what's involved, how long it will take, etc.Once you have completed your spike, you can come back to the original piece of work and give a better estimate based on your findings."
"Dear Agile, I’m Tired of Pretending (2018)",eropple,"on July 1, 2019","In the perfectly spherical Agile world, yes.In practice, for anything that's new, your project devolves into a set of spikes for development because your time-boxed investigation leaves unknown unknowns everywhere. Which is fine in that perfectly spherical Agile world, but it makes less-than-perfectly-spherical stakeholders very upset that they are not getting to use the Agile stick to beat over their developers' heads, as they have been trained to do."
"Dear Agile, I’m Tired of Pretending (2018)",dymk,"on July 1, 2019","Maybe a spike takes a week. Maybe a spike takes an hour. I can't estimate that.Which would be fine, but then management or the PM expects me to loop back around when a spike is complete. I'd rather just continue engineering a solution when I'm done investigating, which is the natural progression of things.I'd rather treat {get requirements, investigate, implement, debug, deploy} as a single atomic task, rather than splitting it across N meetings for planning the sprint, planning the spike, meeting with the PM for more requirements they forgot to put in the user story, describing it at a retrospective, showing it at a demo.Now I know somebody will say ""But that's now how agile works!"". Well, we have a few agile ""coaches"" that were embedded in our teams who would disagree."
"Dear Agile, I’m Tired of Pretending (2018)",nprateem,"on July 1, 2019","What are you doing in a spike? If you can't work out after a day the rough complexity of the task (bearing in mind you should be working on a small deliverable) there's something seriously wrong. You're not meant to be doing the work in the spike. If your research spike shows that it could be a can of worms, then the outcome of it should be another ticket for a proof-of-concept for another sprint, but with specific goals (e.g. ""get a POC working that does X, Y & Z"")."
"Dear Agile, I’m Tired of Pretending (2018)",theptip,"on July 2, 2019","> Maybe a spike takes a week. Maybe a spike takes an hour. I can't estimate that.Timebox it then! If you think the spike is going to take a day, and it turns out you'd need a week to even get the prototype working, then that's a successful spike -- you dramatically increased the lower bound on your estimate.(Sadly by the asymmetry of estimation it seldom happens that you think it's going to take 5d and it ends up taking just 1d)."
"Dear Agile, I’m Tired of Pretending (2018)",matwood,"on July 1, 2019","> Which would be fine, but then management or the PM expects me to loop back around when a spike is complete. I'd rather just continue engineering a solution when I'm done investigating, which is the natural progression of things.This has nothing to do with agile. Feature X may sound great if it takes 2 weeks, but if it takes 6 months I may not consider it worthwhile right now. Engineering is not just about building something, but dealing with constraints like time and cost."
"Dear Agile, I’m Tired of Pretending (2018)",omikun,"on July 2, 2019","Sure, that works for adding something without a lot of connections. But if you are tasked to add a feature that has many hooks into a complex system (plus additional unforseen hooks that you won't realize is needed until you implement it), it's basically a stab in the dark. You can guess a time, then triple it."
"Dear Agile, I’m Tired of Pretending (2018)",Isamu,"on July 1, 2019",">That's when I knew it was time to leave that teamCurrently in that situation. My ""agile"" estimate blew up by a factor of as much as 10, just because the ask was conceptually very simple, even to the domain experts I consulted. And by bad luck the way I was implementing the story it happened that the issues unfolded one-at-a-time, rather than somewhere in the beginning where we could have broken things up into more stories with additional time.I mean, it happens in engineering sometimes. We engineer our way out of it, and the engineering is solid in the end. But no, we blew up our story, so all that working nights and weekends to get back on track are for naught."
"Dear Agile, I’m Tired of Pretending (2018)",matwood,"on July 1, 2019","In retro we would have asked 'what happened and could we have avoided this?'. Then we would have broken up the now expanded unfinished work, and asked the PM if they want to continue knowing it is 10x more work than expected. If yes, cool we pull in the tickets next sprint and keep going. If no, we wrap up anything in progress and maybe come back to it later.Shit happens. The end of a sprint is there to highlight issues like this so the business side can re-evaluate if continuing is still a good idea.I don't want anyone on my team working nights and weekends to finish a sprint task (system going kaput is the only time I would reach out for help). Anyone letting their team work normal sprint tasks on nights/weekends is not going to keep their team very long. They will either quit or burn out and stop working."
"Dear Agile, I’m Tired of Pretending (2018)",jboy55,"on July 1, 2019","I've had to give estimates for my entire 20 year career, half of which wasn't 'Agile'. So first, Agile has nothing to do with this, in fact, Scrum tries to over come this by splitting up tasks into smaller chunks with frequent demoing, re-prioritization etc. It was much worse before this.But to everyone, if management is going to beat you up with your estimates, maybe find a place where management doesn't? The pathological thing described in all of these situation isn't Scrum, Agile, or giving estimates... Its the managers who beat up employees."
"Dear Agile, I’m Tired of Pretending (2018)",matwood,"on July 2, 2019","> Its the managers who beat up employees.Agree completely. There is a difference between management pushing and beating up though. Sometimes I wonder if people get upset at normal pushing/asking for clarification. I've seen both from management, but have also seen engineers get unreasonably upset at simple questions around an estimate."
"Dear Agile, I’m Tired of Pretending (2018)",jboy55,"on July 2, 2019","What I've found is that when engineers are sensitive to giving estimates its a symptom of some sort of insecurity around their work. They're probably also feeling that they are 'outside' the decision making/power structure.What helps is first identifying why an engineer is feeling insecure about their job, imposter syndrome, some sort of life events you may not know about. If the engineer hasn't been having issues delivering, then you want to really talk with them and find out what it is. Why do they feel they're going to get in trouble or 'beat up' if they don't hit the estimate. If they have been having issues, then you should be identifying why those issues have been having, but that is a whole different set of issues than what I think this thread is talking about.If they are feeling outside, this is probably evidence that this engineer feels that they've been shut out giving input for the 'how' or 'why' questions surrounding the design of the project. They also maybe having resistance to opting into what the goal/product is. Perhaps the goal isn't clear, perhaps the goal isn't well defined, or there is some bigger issues.Finally, if you as a manager aren't constantly getting estimates as the project is progressing, especially if you aren't using an agile framework, then you need to. If you are using it, have you pointed your backlog without input of the team? Are the scores stale and if you repointed, with new info the scores would be much different?If you (anyone reading this) are a manager and you think your job is to get an estimate and drive your engineers towards that, then you are only doing only a superficial part of the job."
"Dear Agile, I’m Tired of Pretending (2018)",rhizome,"on July 1, 2019",">My ""agile"" estimate blew up by a factor of as much as 10, just because the ask was conceptually very simplePlease do not feel bad, nor let anybody make you feel bad about this. It's absolutely natural for this to happen. If anything you could use it to ask for a junior or intern to delegate implementation details while you dig further into the coal mine of this feature.""Simple is hard."" What you can learn from this (beyond team pushback) is what kinds of questions can be asked to figure out if a simple ask is masking 10 other things."
"Dear Agile, I’m Tired of Pretending (2018)",celticmusic,"on July 1, 2019",why in the world would you ever use the end of a sprint as a hard deadline?That's broken from the get-go.
"Dear Agile, I’m Tired of Pretending (2018)",abawany,"on July 1, 2019","Broken, but very very common, IME. All of the agile-phile places that I have had the misfortune to interact with had things like sprint commitments, and etc. Very abusive and quite the opposite of 'people over process'."
"Dear Agile, I’m Tired of Pretending (2018)",Isamu,"on July 1, 2019",>That's broken from the get-go.Indeed.
"Dear Agile, I’m Tired of Pretending (2018)",rhacker,"on July 1, 2019","I know that kind of environment too. Usually some department head is a YES person, saying the delivery can be done in some timeframe X. Then timeframe X is told to the dev team and the dev team says X + 50 days. Then the dept. head goes back to the sales team and by that time it's too late. Then the entire organization pushes down on the dev team with fury. The product is of course released in X + 75. (because you always need to double or triple the dev team estimate)Those environments are toxic and the sign of toxicity is that the estimation process is not up for discussion (AKA the dept head keeps doing it again and again and no heads roll)"
"Dear Agile, I’m Tired of Pretending (2018)",bfrydl,"on July 1, 2019","There's a balance to it for sure. It sounds like estimation was taken far too seriously on your team if it was affecting you outside of work too. However, estimation is one of the primary skills of a software engineer. It's always hard to estimate well, but it's infinitely harder for a less technical person to do it for you. I think it's important to understand that and do one's best to improve at it over time."
"Dear Agile, I’m Tired of Pretending (2018)",tootie,"on July 2, 2019","I just screamed this at someone (over IM, not really screaming) that estimates in scrum are meant to measure complexity and not time to completion. There are still people in 2019 saying things like ""1 point is 1 day of work"" and I want to murder them. The whole point of scrum is that time estimation is futile.Estimate complexity and then measure your velocity as tasks get completed and you can make a rough forecast of future velocity."
"Dear Agile, I’m Tired of Pretending (2018)",matwood,"on July 1, 2019","Estimates are like the cones of uncertainty NOAA publishes during hurricane season. A simple task I have done before is at the bottom of the cone.Possible complexity and unknowns push my estimates further out the cone. Less than a year, but more than 3 months is my standard answer for those random 'how long will this feature take' that I only have a vague idea about [0]. I then follow up asking if they would like to schedule a few weeks of research to close the cone a bit.The point is that you have to manage the person asking for the estimate. Teach them that unknowns means something could take a day or a month.I've only had one person really be a jerk about it, and my response was to make the estimate whatever they wanted. If they were not going to listen to me, then there was no point in giving an estimate at all. That response was from my younger, smart ass self though YMMV.[0] This also depends on what is being asked. How unknown are the unknowns? For example, is the feature clearly visible in another product?"
"Dear Agile, I’m Tired of Pretending (2018)",ericmcer,"on July 1, 2019"," If you are a good engineer and a valuable member of the team people will know, whether you hit your estimates or not. It’s almost like the better you are at actually producing the less you need to worry about the red tape. If you are invaluable and crushing projects no sane manager is going to fire you over your estimate accuracy, but if you are doing poorly and not producing they may point to it as a problem area. I have only worked for small-mid size teams though so maybe it is not like that for huge ones."
"Dear Agile, I’m Tired of Pretending (2018)",galaxyLogic,"on July 1, 2019","I usually reply: Give me a week to look into it then I will have more insight into how long it might take.But you are right the problem is you can't estimate (correctly) how long it will take to do something your organization has never done before, that's what should be made clear to them.At the same time it is true that estimates get better as we start working on it, and the work can start by focusing on the unknowns to figure out how difficult they are to do. If that is a plan they agree to."
"Dear Agile, I’m Tired of Pretending (2018)",gesman,"on July 1, 2019","Sometimes it's good to give people what they ask for [insist on], even if it does not make a sense.No anxiety needed.Then calmly explain that the reason things didn't work out as [they] expected is because in real world things doesn't work the way they want or fantasy about.Suggest better approach. If they refuse and keep doing [asking] the same thing all over again and expect a different result - then let it be their insanity [or anxiety], not yours."
"Dear Agile, I’m Tired of Pretending (2018)",majikandy,"on July 1, 2019","Spot on! I’ve also been developing software for over 20 years and my estimates have never improved. I think an order of magnitude is the only reasonably useful estimate, which can then feed into the question “is it worth doing it or not?”"
"Dear Agile, I’m Tired of Pretending (2018)",carlmr,"on July 1, 2019",Use a random number generator to generate your estimates and slowly modify the mean until it matches expectations.I bet your estimates won't be as far off as your colleagues'.
"Dear Agile, I’m Tired of Pretending (2018)",LyndsySimon,"on July 1, 2019","> I think there is a way to give an estimate (have been doing it myself for a decade), even for dependencies that are not known from the start.I agree with this. The problem is that estimates vary, and that management teams often don't understand the way they vary. It's one thing if your estimates are precise and are generally accurate within 20%; it's another if your estimate is ""it will likely take between six months and three years"", and a third of the time the actual required time falls outside even that range.... and yes, there are many projects for which such a large estimate wouldn't be unreasonable; nor would it be unreasonable for there to be unexpected breakthrough or challenges that significantly impact the timeline.> Is this something that HN audience is interested in?I can't speak for the community, but I think the only way you can know the answer to this question is to post it :)"
"Dear Agile, I’m Tired of Pretending (2018)",justinpombrio,"on July 1, 2019","> Is this something that HN audience is interested in?Are you teasing? Yes, we want to know! Though frankly I'm incredulous."
"Dear Agile, I’m Tired of Pretending (2018)",java-man,"on July 2, 2019","No, I wasn't teasing, but I wasn't sure that people would find it interesting (at least, this was my expectation based on experience).I tried to describe the process somewhere in this thread."
"Dear Agile, I’m Tired of Pretending (2018)",justinpombrio,"on July 2, 2019","It just sounded like teasing because it's a famously hard problem.But having read your proposal, I actually totally believe that that could result in accurate time estimates. To summarize, remove the unknowns by planning things out beforehand, then count how many hundreds of small pieces you'll need! That sounds plausible as long as what you're doing is straightforward. (E.g., no crazy database optimizations needed to make things fast enough, no crazy ML techniques needed to make things accurate enough, no crazy algorithms needed to solve NP-hard problems, etc.)"
"Dear Agile, I’m Tired of Pretending (2018)",java-man,"on July 2, 2019","You are right: non-trivial things are hard to estimate - as tasks may not even have an upper time limit.But in the majority of software development projects the tasks are trivial, and it is possible to enumerate all the little details and their dependencies.I was thinking of writing a tool to support the process instead of using excel, but unfortunately the dev has stalled due to lack of time on my part.https://github.com/andy-goryachev/ReqTraq"
"Dear Agile, I’m Tired of Pretending (2018)",rhizome,"on July 1, 2019",Fred Brooks would be incredulous.
"Dear Agile, I’m Tired of Pretending (2018)",Bjartr,"on July 1, 2019",I'd love to hear what you have to say in the topic.
"Dear Agile, I’m Tired of Pretending (2018)",java-man,"on July 1, 2019","Sorry, tried to answer and apparently I was ""posting too fast"".One may start with enumerating the features that needs development (a.k.a. ""user stories"").  Also enumerate external dependencies, team overhead (more people working together means overhead is greater).  For each feature enumerated in step 1, try listing as much detail as possible, also listing open issues and unknowns.For example, list all the UI elements under development.  List all individual functions / use cases that need distinct functionality (classes, functions) to be developed.  List all the test cases.  List external APIs, enumerate different ways the said API can be used.  Enumerate failures and possible recovery actions.I'll give you an example: a login dialog for an application.  This starts as a two page requirements document, which balloons to around 120 items using this method.This alone should give a good idea at the start of the project.  Keep doing it (enhancing the level or detail), while keeping the ratio of initial estimate vs real value - that will help in estimating the remaining portion of the work.The problem (the way I see it) is that we don't really have the tools to do this kind of tracking and analysis.  Jira and similar systems don't even come close.Here is an attempt to apply the methodology using Excel:https://github.com/andy-goryachev/PasswordSafe/blob/master/F..."
"Dear Agile, I’m Tired of Pretending (2018)",silveroriole,"on July 1, 2019","This is roughly how I was taught to estimate. It is accurate but takes time and everybody hates the result. Management halved my estimates without telling me, made fun of my mentor’s estimates, complained about needing to know everything upfront (not very agile eh!), etc. I think you are right and estimating is more of a solved problem than we think, some people just don’t want to admit it!"
"Dear Agile, I’m Tired of Pretending (2018)",java-man,"on July 1, 2019","Oh yes, my experience as well.  I just hope these companies do not manufacture aircraft or nuclear power plant software."
"Dear Agile, I’m Tired of Pretending (2018)",stronglikedan,"on July 1, 2019","And then the customer decides that they don't want to move forward with the project because it's too expensive. Oh, and they don't want to pay you for all the time you spent estimating because no one pays for estimates up front anyway."
"Dear Agile, I’m Tired of Pretending (2018)",java-man,"on July 1, 2019","Yep.  30% upfront.But actually, once you show the customer what's involved, and give them a realistic estimate, it might reduce the chances of cancellation.  The discussion might be steered towards what they really want, or prioritization of deliverables.A mockup (and multiple iterations thereof) might be necessary as well."
"Dear Agile, I’m Tired of Pretending (2018)",DougBTX,"on July 1, 2019","https://www.microsoftpressstore.com/store/software-requireme...That book is from this perspective, that you can work out what needs to be done for a project before actually doing it."
"Dear Agile, I’m Tired of Pretending (2018)",NullInvictus,"on July 2, 2019","I've become convinced over the years that upper management doesn't really care about 'estimates'. What they care about 'commitments'.Every team I've been on has had upper management drive team leaders to get 'commitments'. They want some form of emotional investment in the work. That way, when scope has arbitrarily changed or a massive problem has lead to run over, they can stare at you like a whipped puppy-dog and say ""I know it's 10PM and you want to get home to your wife, but you promised us, you committed, to getting this done on time...""Pure emotional exploitation. The ideals of agile are laudable. I was the excited bannerman of my first agile experience and I read the manifesto with a lot of hope. However high-minded agile is, the language is too easily co-oped into the worst sins of management. In many places it exists solely to blackmail free overtime out of engineers, get away with micro-management, and ride engineers with false deadlines under a guise of hipness and modernity.Estimates are just there for a false sense of stakeholding, or at best a ballpark cap so you don't work yourself into suicide. They can't be made accurately even if we could estimate properly, because all estimates are constantly second guessed by people who are making judgmental jokes about sandbagging, or asking ""Are you really sure it'll take that long?"" in voices that practically scream ""chilling effect"". More than a few possibly realistic estimates are torpedo'd by managers who are looking at their roadmap and tsking about how they don't line up.I would even say accurate estimates are actively undermined. I've worked at companies which have positive work images abroad, and even there any team which was on time found either its sprint budget slashed, or scope increased until it was forced behind. The underlings won't do over-time if they don't feel the squeeze.Story points, velocity, burndown, and any other metric you can think of that Agile courts are absolutely useless, because this industry refuses to come to terms with Goodhart's Law. I just watched a 10 million dollar project go up in flames. Their sprint graphs were great, and a constant buzz was going about the company about how these teams were setting the standard, meeting their metrics and goals consistently. Only recently did the CEO get down to business and figure out that all the metrics were bogus, and that for the past year all of the PMs and teams had been gaming the system to hide the fact that they were way behind schedule and over budget. The project was quietly scrapped and nothing changed. The shell games continue to actively sabotage data. I only know of the fallout because of who I sit next to.Most of the benefits of agile seem to fail basic contact with humans unless they are backed by outstanding and visionary leadership. Most companies do not have that, yet they still find value in switching to Agile. Why? Maybe because even in total collapse it provides an unparalleled system for squeezing out more overtime, in my cynical opinion anyways.I don't really what else to offer in place of Agile. I'm not that intelligent, but I don't really feel the industry can come up with a good development model of software development culture until it stops what it's doing and starts acknowledging problems arising from basic psychology, politics, and data gathering."
"Dear Agile, I’m Tired of Pretending (2018)",agumonkey,"on July 1, 2019",Probably lost 10 years due to that.
"Dear Agile, I’m Tired of Pretending (2018)",curtis,"on July 1, 2019","Any software development methodology or process is going to come up short if it ignores the fundamental nature of software development, which is: We do not know what we're doing until we do.  Any process or methodology that tries to extract promises out of the software development organization about things that are still in the we do not know what we're doing phase is going to result in disappointment at best and serious harm to the overall effort at worst.And it turns out that it's not unusual for software developers (and consequently software development organizations) to spend more time in the we don't know what we're doing phase than the we do know what we're doing phase.  That sucks from a management point of view, but no amount of process is going to make the problem go away.  The best you can do is manage the risk.  We don't need good processes or methodologies nearly so badly as we just need management enlightenment about how software development actually works."
"Dear Agile, I’m Tired of Pretending (2018)",LarryDarrell,"on July 1, 2019","That's the truth, except, I can't tell clients that ""I'll know how long it will take when I'm halfway done."" The best I can do is look at prior work and multiply by the LarryDarrell Constant of 1.5."
"Dear Agile, I’m Tired of Pretending (2018)",klodolph,"on July 1, 2019","I think one of the top skills for management / senior dev is to be able to translate between software estimate uncertainty and the business reality surrounding the schedule.For example, if you ask, ""How long will this project take?""You could just say, ""I don't know. At least two weeks, but it might take as long as six months."" This may be accurate but it's not helpful.Or you could say something like, ""In a half day I could put together a preliminary design, and identify the most uncertain parts of the project. From there we could figure out what is needed to tighten the schedule or adjust the requirements.""And I think that one of the more common problems with managers in larger orgs is that they can't tell the difference between somewhat arbitrary deadlines (we want this for Q3 to look good in our org, but we can break this project into smaller milestones and push it back if necessary) and deadlines that reflect the reality of business (we want this for Q3 because this will have cascading effects on other parts of our business, and if there are problems we need additional resources or an adjusted scope).Any time there is a deadline, the manager should have a clear understanding of the consequences of missing that deadline, and be able to communicate that to the engineers. The efforts to come up with a schedule and milestones should be collaborative. Too often there are mandates that have unclear consequences for missing them, and when schedules slip you have no idea what you are supposed to prioritize."
"Dear Agile, I’m Tired of Pretending (2018)",Skunkleton,"on July 1, 2019","> multiply by the LarryDarrell Constant of 1.5.Funny thing. If you do this organizationally, then you eventually end up making larger and larger estimates. IMO it is better for management to understand the inherent risks associated with engineering estimation and build the padding on their end."
"Dear Agile, I’m Tired of Pretending (2018)",Sharlin,"on July 1, 2019","Hofstadter’s law: It always takes longer than you expect, even if you take into account Hofstadter’s law."
"Dear Agile, I’m Tired of Pretending (2018)",Scarblac,"on July 1, 2019","And the time estimated is always used up, at a minimum."
"Dear Agile, I’m Tired of Pretending (2018)",lettergram,"on July 1, 2019","I usually do 2x my expectation. I keep track of my prior estimates and compare against my real time. I normally miss by about 30% - 50%, this leaves me a fair margin. It’s also been improving with time, which means I’m getting better at assessing my skills and problems.For me, I tend to work quicker than other contractors / employees, so I still often beat out the other quotes (time or money). That’s not always the case for others, so they margin of safety may not be there. In which case, multiply by a smaller constant."
"Dear Agile, I’m Tired of Pretending (2018)",namaemuta,"on July 1, 2019","You can tell them ""A wizard is never late, nor is he early, he arrives precisely when he means to."""
"Dear Agile, I’m Tired of Pretending (2018)",curtis,"on July 1, 2019","I kind of lean towards double the schedule and cut the scope in half and hope that maybe we can deliver a little extra credit work.It's important to note that padding schedules is not just done in software, it's a common practices in all sorts of engineering.  It's not bad that we do this, it's bad that management often doesn't understand that we do this and doesn't understand why.  The understanding why part is actually really important, because that means management can be expected to do their part in managing the uncertainty or at the very least they can be expected to be careful about not making the situation worse."
"Dear Agile, I’m Tired of Pretending (2018)",ianstallings,"on July 1, 2019","It's a tough nut to crack. Think about fields like architecture and engineering, where the historical knowledge is well over three thousand years. Yet they still have failures, go over estimates, and generally suffer the same issues that we do, but at much greater costs."
"Dear Agile, I’m Tired of Pretending (2018)",ryanmarsh,"on July 1, 2019",We do not know what we're doing until we doIronic that so many Agile coaches like to bandy about Dave Snowden's Cynefin and then act entirely opposite of what it recommends.
"Dear Agile, I’m Tired of Pretending (2018)",curtis,"on July 1, 2019",From https://en.wikipedia.org/wiki/Cynefin_framework:> The Cynefin framework is a conceptual framework used to aid decision-making.
"Dear Agile, I’m Tired of Pretending (2018)",tootie,"on July 1, 2019","I was prepared for our weekly ""I Hate Agile"" post, but this one is actually really great. It's a lot of the arguments I make to Agile haters. The fundamental problem that drives most agile failures isn't in the team's execution, it's in the business' expectations. One side is signed up for incremental delivery, and one side is set up for a fixed scope and deadline and the result is misery. I think this article makes a lot of good points. Scrum isn't the complete answer, but it's a big step in an organizational transformation. I think it's suffered a lot from being oversold."
"Dear Agile, I’m Tired of Pretending (2018)",Bartweiss,"on July 1, 2019","> One side is signed up for incremental delivery, and one side is set up for a fixed scope and deadline and the result is misery.This is a brilliant summary, thank you.The best 'agile' experiences I've had are situations where the 'clients' are directly involved, often within the same organization. Instead of a hard scope or deadline, there's just a shared interest in producing a valuable product efficiently, and the users are on-hand throughout the process for feedback and reevaluation.The worst experiences have been waterfall contracts, developed by an internal simulation of agile. The software team does frequent ""releases"" to business or management, who provide feedback and feature requests, but the actual recipients are uninvolved outside of occasional demos, or contacted only indirectly by non-programmers. The result is almost always thrashing, with time and effort spent pointlessly satisfying the forms of agile even though the real timeline and customer feedback are unyielding."
"Dear Agile, I’m Tired of Pretending (2018)",opportune,"on July 1, 2019","In large enough orgs, internal clients can end up being just as bad as external clients, or even worse since they have a direct line to your PM, can track your feature board, etc. yet there is basically no sense of camaraderie or shared goals.I'd say generally IME they are still preferable, but occasionally can be more painful."
"Dear Agile, I’m Tired of Pretending (2018)",madeofpalk,"on July 1, 2019","> waterfall contracts, developed by an internal simulation of agile.We call this wagile"
"Dear Agile, I’m Tired of Pretending (2018)",goalieca,"on July 2, 2019",I just call it agile. It’s the common form.
"Dear Agile, I’m Tired of Pretending (2018)",ksenzee,"on July 2, 2019",We call it scrummerfall.
"Dear Agile, I’m Tired of Pretending (2018)",tootie,"on July 2, 2019",We call it frAgile.
"Dear Agile, I’m Tired of Pretending (2018)",wayoutthere,"on July 1, 2019","I agree entirely!I often sit between the business and tech orgs, so the way I explain it to the business is this: I can get you detailed status reports and metrics, but they will slow progress and be expensive. So think about why you need that information: if there are legitimate business reasons with dollars attached, go for it. If it’s just to soothe your anxiety about the timeline, a therapist will be far cheaper and more effective."
"Dear Agile, I’m Tired of Pretending (2018)",usrusr,"on July 1, 2019","“One side is signed up for incremental delivery, and one side is set up for a fixed scope and deadline and the result is misery.“That's just one example of the general value I like to ascribe to ""AINO"": it gives you a useful mental model of the delta between what you have and a known good process, making it quite easy to name the missing pieces. This usually doesn't make it easier to actually fix their absence, but at least you know where to start with damage mitigation. When waterfall fails, you just throw your hands in the air and say ""more of the same""."
"Dear Agile, I’m Tired of Pretending (2018)",arendtio,"on July 1, 2019","Actually, I think Scrum is just a first step to give the development team some autonomy to create a bubble in which it can play by its own rules. AFAIK, mediating between the development team and the expectations of the management is the job of the Scrum Master [1]:> The Scrum Master serves the organization in several ways, including:
> ...
> - Helping employees and stakeholders understand and enact Scrum and empirical product development;So, I am not saying that it is an easy job. Many managers just hear what they want to hear, so it can be quite difficult. But if your team has such issues, be sure to support your Scrum Master with good arguments to help him make managers understand what it means to use Scrum (and become Agile).[1] https://www.scrumguides.org/scrum-guide.html#team-sm"
"Dear Agile, I’m Tired of Pretending (2018)",dsego,"on July 1, 2019","The author (https://medium.com/@charles.lambdin) has a whole series of blog posts on this and similar topics, a very interesting read."
"Dear Agile, I’m Tired of Pretending (2018)",quadcore,"on July 1, 2019","Agile never gave organizations a holistic, viable alternative to Waterfall. Because there’s a difference between theory and practice. Product work is more about practice. When we complain about “AINO” (Agile In Name Only), we’re not being honest with ourselves.I agree with most of the article. Specially the keep-learning part.All Agile did was put software development teams unfairly under a microscope.I believe Agile has been tremendously beneficial for the industry globally, especially in some subtle ways. For example, Agile says you have to communicate a lot, if you want to get software done. Here is the subtlety: if, today, you stop telling the average programmer to communicate, they will stop and go back to silo mode, ""naturally"". At least some of them. If you think about software at the industry scale, you have to think about a wide population which require processes.I was once working in a nice little company where, one day, they introduced agile. It was so much beneficial. Before, the bosses thought that talking was simply a lost of productivity. You're a programmer right? So code, don't talk. So we would develop software without talking to each other. After we had daily meetings, scrums things and stuff. Our velocity has sky-rocketed.You have to realise that before Agile, a fair portion of all software development projects that were started would simply bust and never get shipped. The code is a complete monster or the budget is nuked. When I started in the company I just mentioned, I started working on a codebase that was the worse code I've ever seen in my life. You would touch one line and everything would stop working. It was a condensed piece of spaghetti with hacks on top of hacks on top of hacks. Software architecture? That requires some talking and thinking, forget about that, not permitted.Now I agree with you, agile is not much useful for a hacker who consistently get software done and understand deeply what's happening.edit: not that I'm an agile guru or anything. Actually I only know the thing superficially. I show up at the meetings, when I'm ask how hard something is, I answer, then I mess around with my office friends. Still I can appreciate it works much better than any process the bosses can come up with."
"Dear Agile, I’m Tired of Pretending (2018)",Bartweiss,"on July 1, 2019","> You have to realise that before Agile, a fair portion of all software development projects that were started would simply bust and never get shipped.I have plenty of gripes with Agile, but there's definitely a ""victim of its own success"" aspect to the whole thing.""Agile in name only"" is frustrating compared to a good system, but in many cases it's still far better than what came before it. Basic ideas like ""we should expect requirements to change"" and ""if the programmer doesn't know what their code will be used for, something is wrong"" weren't necessarily accepted prior to agile. Projects that are chaotic, mismanaged messes under AINO might well have been orderly deathmarches or cancelled outright in the past. Some of this progress is technological (source control, post-release patching, digital distribution), but some of it really does owe to Agile.It reminds me a bit of the scientific method. The elaborate eight-step thing taught in school feels like silly boilerplate, but it's shocking to realize that ""ideas are tested by experiment"" was a genuine breakthrough from a past that made major choices like disease treatments and scurvy cures based on 'reasoning' without testing them at all."
"Dear Agile, I’m Tired of Pretending (2018)",b_tterc_p,"on July 1, 2019","> You have to realise that before Agile, a fair portion of the software development projects that were started would simply bust and never get shipped. The code is a complete monster or the budget is nuked.This still happens, all the time?"
"Dear Agile, I’m Tired of Pretending (2018)",andyroid,"on July 1, 2019","The difference is that of ivory tower planning and the following phases of development, testing and a “big bang” release (waterfall) vs working with an MVP with the purpose of releasing as soon as possible and then work in iterations based off of actual feedback and demand (agile). If you manage to nuke your budget or create a monster of a code base already at the MVP stage no methodology is going to save you."
"Dear Agile, I’m Tired of Pretending (2018)",Bartweiss,"on July 1, 2019","I really do believe agile (or at least ""not waterfall"") has reduced the rate of major software flops. But I'd be fascinated to know how often it turns failures into successes, versus revealing failures earlier in the project cycle. Both are valuable, obviously. It's just interesting that part of Agile's value is in revealing engineer dysfunction or fundamentally bad ideas at the MVP stage instead of the completion stage."
"Dear Agile, I’m Tired of Pretending (2018)",braythwayt,"on July 2, 2019","Revealing failure early is at least as valuable as succeeding more!Imagine a system that couldn’t help you pick winning stocks, but It could cap the losers at 10% loss, maximum. You’d get rich. Very, very quickly."
"Dear Agile, I’m Tired of Pretending (2018)",celticmusic,"on July 2, 2019","I'd be more inclined to give the credit for less software flops to the rise of the internet and the ability to update easily.Even traditional software projects are now much more incremental due to the ability to update once a week (FF, chrome, etc).That's had an effect regardless of agile."
"Dear Agile, I’m Tired of Pretending (2018)",andyroid,"on July 2, 2019","That’s a point, and I agile development would not be possible without the internet. But working incrementally based off of customer/user input is only possible after the first release. What was observed here was the huge number of projects that would previously fail without ever getting that point."
"Dear Agile, I’m Tired of Pretending (2018)",Bartweiss,"on July 1, 2019","I have the subjective sense that the rate of massive, irreparable flops in software has gone down a lot.  (Very anecdotally, the latest ""permanent failure"" on Wikipedia's list of major failed software projects is from 2014. That list is worth a read regardless.)Projects still get cancelled, budgets and timelines get blown out, features and testing get compromised. But at least in dedicated software companies, it's pretty rare for something to get through 90% (or 150%) of its allotted development time and then be completely discarded as unsalvageable. (For technical reasons; market changes are a different beast.) Projects in technical crisis are either apparent sooner or have usable elements, rather than failing outright at the end of a waterfall.Of course, there's a lot of room to debate what changed and why. If Agile led projects to fail sooner or less dramatically, that's still important, but less notable than if it changed them into successes. And a lot of technological advances have helped too; things that might have been outright failures as shrinkwrapped software can become late or overrun projects in the era of digital distribution.https://en.wikipedia.org/wiki/List_of_failed_and_overbudget_..."
"Dear Agile, I’m Tired of Pretending (2018)",mixmastamyk,"on July 2, 2019","When that point is reached much more quickly, it saves $$$."
"Dear Agile, I’m Tired of Pretending (2018)",xfitm3,"on July 1, 2019","I was interested in comp sci precisely because I didn't have to talk to people, an area where every interaction is a performance. I want to be alone - what's so wrong with that?"
"Dear Agile, I’m Tired of Pretending (2018)",myrion,"on July 1, 2019","Nothing per se, is just going to make both your life harder and make it very difficult to produce software that is useful for others.You need to talk to people to be able to produce the software they need, ultimately."
"Dear Agile, I’m Tired of Pretending (2018)",filoleg,"on July 1, 2019",">I want to be alone - what's so wrong with that?If you are writing software just for yourself, there is nothing wrong with that. If you are writing software for others, be prepared to be steamrolled by people who know how to write good code AND how to communicate with consumers of the software (i.e., paid customers, OSS devs, enterprises, etc., that one will depend on what kind of software you are writing).I think that a lot of developers with a mindset similar to yours tend to underestimate how important good/valuable feedback (and communication in general) is. And I am saying that as someone who initially went into comp sci for reasons similar to yours. Some of the best engineers I ever worked with had amazing communication skills, and it acted as a x10 multiplier to their technical skills and overall productivity."
"Dear Agile, I’m Tired of Pretending (2018)",quadcore,"on July 1, 2019","an area where every interaction is a performanceFeel ya. Surprisingly enough, I'd say that I've not had to attend so many boring meetings in my career but certainly I'm just lucky. Also, once I did get a manager who was an ""agile guru"" and he was annoying. He talked to me like he's the jedi of software development and I'm his padawan. Thankfully, he got fired."
"Dear Agile, I’m Tired of Pretending (2018)",threwawasy1228,"on July 1, 2019","I had a professor at university who acted that way about Agile. He thought he was literally Uncle Bob incarnate. But when you looked at his credentials, he had never once worked in a real production environment, he had only ever taught."
"Dear Agile, I’m Tired of Pretending (2018)",stronglikedan,"on July 1, 2019","Teach, those who cannot do, do.-- Yoda"
"Dear Agile, I’m Tired of Pretending (2018)",madeofpalk,"on July 1, 2019",Sounds like a bad manager.
"Dear Agile, I’m Tired of Pretending (2018)",lonelappde,"on July 1, 2019","Nothing is wrong with that, but don't expect to keep a job where you don't have someone to do all the business and project planning and coordination for you, at the expense of your salary. If your computer science talent is good enough, that might work for you."
"Dear Agile, I’m Tired of Pretending (2018)",CraneWorm,"on July 1, 2019","I had a similar sentiment - As a programmer, I did not want to be communicating with a client, I wanted to be left alone in a sense that I only ever had to interact with people that understand how coding works.I think it's doable; say you are the sole developer of a massively used library. The programmers being your only users - they read the API docs, submit an occasional feature request/bug report."
"Dear Agile, I’m Tired of Pretending (2018)",TeMPOraL,"on July 1, 2019","Heh. I have a reverse sentiment. As a programmer, I want to communicate with the actual users who'll be using my product. But without two layers of intermediaries on both our and customer side, who end up turning this whole thing into a game of telephone, ostensibly in the name of all the other important stakeholders."
"Dear Agile, I’m Tired of Pretending (2018)",giobox,"on July 1, 2019","The programmer users are arguably ""clients"" in this context too. Much the same sorts of issues, different labels.One need only look at the bug tracker on the average ""massively used library"" to see that you will be communicating with clients a great deal. Your dream of a small group of perfect programmers filing neat and accurate feature requests or bug reports doesn't match any reality I've ever seen. To expect them all to ""understand how coding works"" is also likely a pipe-dream - users of all ability levels are out there writing code, filing bug reports for things that aren't bugs, asking questions in forums that aren't meant for those questions, mad at you because the direction the project has taken isn't the one they or the company they work for want/need, etc etc..."
"Dear Agile, I’m Tired of Pretending (2018)",Sharlin,"on July 1, 2019","Users of a library are still users. You can write a library in an ivory tower, just like you can write applications in an ivory tower, but that kind of software is written for yourself and only incidentally for anyone else. People might still use it if there are no viable alternatives, but don’t expect them to be very happy about it. Especially because scarcity of communication also implies scarcity of documentation."
"Dear Agile, I’m Tired of Pretending (2018)",ebiester,"on July 1, 2019","You're abdicating your responsibility of developing working software. Your job is to solve problems, using code where appropriate. Your job is to understand the entire system and explain how the corporate system above interacts with the technology you are tasked to develop.If you can't do that, what is the difference between you and a group of outsourced employees making pennies on the dollar?"
"Dear Agile, I’m Tired of Pretending (2018)",techslave,"on July 1, 2019","you’re presupposing he wants to fit into that holistic model, as a senior person. maybe he is fine plugging away at code, the task defined, like a monk transcribing texts.the world needs both kinds, and a range in between."
"Dear Agile, I’m Tired of Pretending (2018)",collyw,"on July 3, 2019",">the world needs both kinds,But if one kind can do both types of tasks then you only need that kind."
"Dear Agile, I’m Tired of Pretending (2018)",madeofpalk,"on July 1, 2019","Ultimately, these days programming is table stakes - IMHO you get zero credit for knowing how to code. The best developers are those who are able to step up and actually interact with people to articulate and understand problems. Whether that's with fellow developers about code, with managers/stakeholders about technical things, or with end-users/clients about users needs.You're more than welcome to want to sit in isolation and code away, but I would suspect you would find it difficult to do this and be happy. I've never worked in a team that would work with someone like that."
"Dear Agile, I’m Tired of Pretending (2018)",opportune,"on July 1, 2019","Nothing is wrong with that, but if you want to work like that, don't be a software engineer"
"Dear Agile, I’m Tired of Pretending (2018)",kjsbfkjbf,"on July 1, 2019","There is nothing wrong with that, but careers under capitalism are about _signaling value_. I hope you find a place (or have found a place) where you're appreciated. :)"
"Dear Agile, I’m Tired of Pretending (2018)",unreal37,"on July 1, 2019","Upvote to this.As far as your career - salary and promotions and recognition - you can't just sit in a corner and be quiet. People have to recognize that you're good at what you do and it's hard for others to see when you only communicate in code check-ins.You have to start attending meetings, speaking at meetings, and being useful beyond the code."
"Dear Agile, I’m Tired of Pretending (2018)",ok_coo,"on July 1, 2019","I'm not sure why you're being downvoted but some of the best career advice I've heard is someone saying you should assume when you go to work that you're working under a communist dictatorship. I.E. Toe the party line, make your boss look good, (pretend to) eat up the company propaganda, assume the leader(s) (C-suite) will do whatever they want, when they want, especially giving themselves bonuses regardless of company performance.It's a weird contrast to normal life, considering a lot of us live in democracies, but once I understood this and started acting accordingly, it helped me handle my work life."
"Dear Agile, I’m Tired of Pretending (2018)",TheGRS,"on July 1, 2019","I don't know if that's great advice, but its certainly advice that will help get you promotions and salary bumps.Like anything there's a grey zone here. Understanding the political realities of a business is highly beneficial and will help you move forward with the company and let you know when to pick your battles. But I've watched people who do nothing but this lose the trust of those at their level. And that trust is crucial for agile development. I also personally feel like pushing back on the company when appropriate can indeed provide a lot of value to the organization. ""Why are we doing this meeting?"" ""We need another week for testing"" ""I'd like to see the roadmap you are planning"". Just don't push back all the time."
"Dear Agile, I’m Tired of Pretending (2018)",Nasrudith,"on July 1, 2019","It is probably good advise for most cases but individually depends on the shop and culture. Like if you really should always wear a three piece suit to interviews regardless of what they request. Some are flatter, others are more hierarchical (ironically practice can fail to line up with org chart structures).Some are all about the politics, others don't have the luxury of self delusion or actually value the sort of brutal honesty to say ""I have looked at the new framework - while trendy it is buggy inefficient crap."" The ones who lack the luxury tend to be smaller but small size is no guarantee that they'll just say no to the flavor aid."
"Dear Agile, I’m Tired of Pretending (2018)",SkyBelow,"on July 1, 2019","Why?In all areas of life we judge those around us not by the true facts, but on our limited knowledge.  Working to improve that knowledge can result in a change in judgment.  It seems completely reasonable for there to be a person who does good work but who isn't know for doing such, and as such is viewed worse than they should be.  By working to increase the knowledge of the work they do, their evaluation in the eyes of others will improve.Of course, it isn't a straight forward or simple in practice.  There are those who lie and misrepresent, and if you are to obvious about your intent you will be viewed as manipulative.I don't see why this deserves either the label of BS or a ban from HN?"
"Dear Agile, I’m Tired of Pretending (2018)",madeofpalk,"on July 1, 2019","Perhaps some thing think it's uncomfortably close to the 'slur' of 'virtue signalling' that people throw around. While I'm sure the intention was nothing but pure in how it was used here, it did make bit second-read the comment to assess whether it was being used in a negative way, and to really understand the point being put across."
"Dear Agile, I’m Tired of Pretending (2018)",0815test,"on July 1, 2019","> > All Agile did was put software development teams unfairly under a microscope.Most managers crave control over their teams; this is not something that Agile introduced. If anything, Agile let them use the sort of control they were already demanding towards more useful and productive goals, by introducing bazaar-like practices to centralized software development (release early, release often; shorten feedback loops as much as possible; make extensive use of refactoring, software testing and XP principles); while at the same time not being altogether incompatible with self-organizing development teams (these were mentioned in the original Agile manifesto, after all)."
"Dear Agile, I’m Tired of Pretending (2018)",Bartweiss,"on July 1, 2019","Eh? I'd compare it to No True Scotsman, not AI: I mostly hear people insist that anything which doesn't work isn't Agile.I'm extremely grateful for the changes agile wrought on the software industry, and while I think many of the best insights have become commonplace, I don't think formal Agile methods are outdated or exhausted yet. But I do think formal Agile is extremely hard to do right, and has very common failure modes of knowingly-unrealistic planning, unproductive meetings, excess design changes, and tech debt neglected to ship MVPs.One measure of a methodology is how much value it provides when it's used right, and I agree that Agile shines here. But it's also worth asking how easy a method is to get right, and how gracefully it devolves when things aren't perfect. My experience is that agile advocates commonly neglect those parts, dismissing widespread frustration with 'bad agile' on the basis that if it had been implemented perfectly, those issues wouldn't have come up."
"Dear Agile, I’m Tired of Pretending (2018)",me_again,"on July 1, 2019","I have a theory that commercially successful software development methodologies are like diets: they have to be almost impossible to follow. This ensures that when you fail to lose weight/achieve bug free software, you blame yourself for not following the rules exactly, rather than the rules for not working."
"Dear Agile, I’m Tired of Pretending (2018)",Bartweiss,"on July 1, 2019","At the very least, I think it's common to judge methodologies by ""how well does it work when it's done right?"", when we should be using a three-part test.1. How much value is there if it goes right?2. How easy it is to get right?3. How gracefully will it break down if it's not done perfectly?Methodologies don't have to shine on 2 or 3. NASA-style clean-room coding is the gold standard of hard-but-effective; you have to suck it up and commit entirely with a great team, but the results are unbeatable. Waterfall was ""good, bad, bad"", but used by lots of less-exceptional teams with hideous results.Agile, I think, improved #3, but not #2 so much. It's commonly sold by appealing to how much it can potentially help, but I think the more honest pitch is ""it's tough to do right and it'll sting if we get it wrong, but it hurts a lot less than getting waterfall wrong."""
"Dear Agile, I’m Tired of Pretending (2018)",dclowd9901,"on July 1, 2019","Then maybe there should be one rule (as was my most successful dieting effort): Is what you're doing helping make or save money?I know such a simple rule is probably causing a lot of you to cringe, but I can very easily fit just about any activity of value you or your team embarks on into that question, and it's a rule the entire company can get behind."
"Dear Agile, I’m Tired of Pretending (2018)",sombremesa,"on July 1, 2019","I think with this analogy you're presuming that people are exposed to a variety of foods and there is some positive correlation between action and awareness. However, for someone who only ever goes to McDonald's to eat, they'll just switch to french fries and ketchup for your nonsense diet."
"Dear Agile, I’m Tired of Pretending (2018)",orblivion,"on July 1, 2019","I've definitely seen a ""your cholesterol going up only means you need to Paleo harder"" post on a forum."
"Dear Agile, I’m Tired of Pretending (2018)",nosianu,"on July 1, 2019","""Thou shalt not be negative"" (HN) - well I'm sorry. Just some example text:> both Agile and Waterfall are focused on building. Design is about validating.or> So…what’s the way out? It’s a smart focus on clear outcomes, not output, with roadmapped outcomes replacing planned milestones, with trusted product teams, not project teams, empowered to vet assumptions and discover the minimal path to value.Satire? Enough words to fill a hot air balloon or two. ""Smart"" focus, ""clear"" outcomes,  ""outcomes"" vs. ""milestones""(?), ""trusted"" product teams (as opposed to... what?), ""empowered"" etc.?Far more interesting than the contents of many links that make it to the HN homepage is discovering the fact that they do so."
"Dear Agile, I’m Tired of Pretending (2018)",tootie,"on July 1, 2019",Honestly that statement is the nail on the head for me. There's a huge distinction between an output and an outcome and a huge distinction between a project plan and a road map.
"Dear Agile, I’m Tired of Pretending (2018)",nosianu,"on July 1, 2019","> between an output and an outcome and a huge distinction between a project plan and a road map.I mention neither of those.I'm not complaining about your reply, I think it shows how those texts are (to be?) used: Just like art. You project your own experiences into it, it's more about getting you to think. So naturally different people are going to react differently and read different things into the same text. That's perfectly alright - you get something out of it (only) if you put something in. If there is nothing to begin with, which may just be lack of experience (new programmer), you'll get less out of it. If you have two decades large project experience in various companies and teams you'll get a lot out of it. Let's attempt to make the best out of it then, out of any text, if we are presented with that opportunity and the headline got us to click on it :-)"
"Dear Agile, I’m Tired of Pretending (2018)",itsdrewmiller,"on July 1, 2019","I think you misread the part you quoted, while GP read it correctly - it's comparing outputs and outcomes, not outcomes and milestones."
"Dear Agile, I’m Tired of Pretending (2018)",jeremyjh,"on July 1, 2019","> It’s a smart focus on clear outcomes, not output"
"Dear Agile, I’m Tired of Pretending (2018)",cljs-js-eval,"on July 1, 2019","In the spirit of that second paragraph - focusing on outcomes, not specific implementations - here's a rewrite:Original:> So…what’s the way out? It’s a smart focus on clear outcomes, not output, with roadmapped outcomes replacing planned milestones, with trusted product teams, not project teams, empowered to vet assumptions and discover the minimal path to value.Rewritten:> So… what’s the way out? It’s a focus on clear outcomes, not output.  There should be dates for when specific outcomes should happen.  Teams should be empowered to find the minimal amount of work needed to achieve the outcomes.It's a really wordy way to say what any good leadership class would tell you.  Focus on what you want more than how you get it, and let your subordinates decide how to get it.  Both good product teams and project teams are capable of working that way.This kinda sums up my problem with endless agile vs. waterfall vs. whatever discussions.  The interesting parts aren't really new ideas and the extra buzzwords add nothing."
"Dear Agile, I’m Tired of Pretending (2018)",Terretta,"on July 1, 2019","Interesting, I’d interpret “roadmapped outcomes replacing planned milestones” to mean there should not be predetermined dates and deliverables (planned milestones), but rather, a sequence of value-delivering outcomes (roadmapped outcomes)."
"Dear Agile, I’m Tired of Pretending (2018)",cljs-js-eval,"on July 2, 2019","A relative order of outcomes could also work, yeah.  You'll have a date in there somewhere, though, even if it's not driven off the amount of work.  Could be ""and if we can't achieve this outcome by X date we give up on this whole outcome""."
"Dear Agile, I’m Tired of Pretending (2018)",commandlinefan,"on July 1, 2019","You don’t hear the name Joel Spolsky much any more, but he was pretty influential in software process thinking in the 90’s - not really for being particularly insightful or original, but more because he was one of the first people who thought of writing a blog about software design.  One of his early “observations” about software project management was that “you wouldn’t buy a pair of jeans without knowing how much they were going to cost, why would you expect your manager to sign off on a software project without knowing how much it was going to cost?”  The utter blithering stupidity of this perspective highlights how managers look at software design: the purpose of software methodology is to put a fixed cost on every software project.  As long as that’s what they’re looking for, software methodology is going to continue to be a lost cause."
"Dear Agile, I’m Tired of Pretending (2018)",lbotos,"on July 1, 2019","Your argument here is against ""business"". In a dream world, where we could build for building's sake, and create ""more perfect"" things with no considerations for cost, I'd agree with you, but businesses (in the abstract) are a math function: Does it cost us less to make this than we charge for it? If so, we are a profitable business, if not, we are an unprofitable business.Managers are there to manage costs, to protect the ""business""."
"Dear Agile, I’m Tired of Pretending (2018)",unreal37,"on July 1, 2019","I think every owner of a casino knows there is luck involved in their profits, and that the odds are stacked slightly in their favor.I don't think any owner of a business thinks that there is luck involved in creation of their software systems. They absolutely look at the $10 million per year they are spending on ""IT"" and look at the $26 million per year in value that spending is unlocking in absolute dollar terms."
"Dear Agile, I’m Tired of Pretending (2018)",commandlinefan,"on July 1, 2019","> thinks that there is luckYou mean ""realizes there is luck"".  And hence the problem."
"Dear Agile, I’m Tired of Pretending (2018)",andrey_utkin,"on July 1, 2019","I'm sure they have very good idea. Statistics, game processes design, everything is engineered towards stable and predictable profits."
"Dear Agile, I’m Tired of Pretending (2018)",pluto9,"on July 1, 2019","But they know that the sum of all cards drawn will be profitable, because their practices guarantee it. Normal businesses cannot guarantee that the sum of all their projects will be profitable."
"Dear Agile, I’m Tired of Pretending (2018)",brightball,"on July 1, 2019","That's one of the big reasons that I've become a proponent of Donald G. Reinertsen's approach to product development.He emphasizes a variation of the cost benefit formula + urgency, called Cost of Delay for prioritizing that basically boils down to ""Value / Time Remaining"" because your cost is the time remaining. It naturally prioritizes work based on shortest time to value because, unless the value proposition is enormous, dividing by estimated time is almost always going to favor the shorter tasks.This will of course vary by team, but in general it puts a focus on responsiveness and getting the little stuff out of the way first (including tech debt). When you have a formula that doesn't let the little stuff build up, it gets easier to focus on the big stuff too. It's also make it easy to pivot because it totally disregards prior time investments.It meshes better with what agile is supposed to be better than any other methodology that I've encountered to this point."
"Dear Agile, I’m Tired of Pretending (2018)",reallydude,"on July 1, 2019","> including tech debtTech Debt is not little, or we wouldn't carry it around, rather than devote time (and risk of revealing new unknowns) to fixing it. My agile experience has always favored conquering little stuff first, since ppl recognize stories more than points (which vary in value, over time). This, unfortunately, sometimes leads to the hilariously subversive act of splitting a story up into as many tiny pieces as possible so that some people may inflate that ""What have you done for me lately"" list while more tangible coding is done by others."
"Dear Agile, I’m Tired of Pretending (2018)",nitrogen,"on July 1, 2019","splitting a story up into as many tiny pieces as possibleHonestly I think that's the intended outcome from the business's perspective.  The smaller the piece of work, the easier it is to assign a cost and a benefit to it, and the easier it is to hand off to another developer."
"Dear Agile, I’m Tired of Pretending (2018)",Groxx,"on July 1, 2019",">... and the easier it is to hand off to another developer.I have never seen this work out in practice.  And it's like a 1%-of-the-time thing anyway.On the flipside, I've seen quite a few hours wasted adding fake subdivisions to tasks, probably close to 30% of the time.  Outside of small, known bug fixes or tech debt cleanup, it's rare for a thing to wholly fit within a sprint."
"Dear Agile, I’m Tired of Pretending (2018)",brightball,"on July 1, 2019","Cost of Delay metrics do a good job of explaining how the cost of that debt can grow over time the longer it goes unfixed. Some are smaller than others, but uniformly it tends to get harder to fix the longer you wait to fix it.He also doesn't place any type of value in points or other, bluntly, useless metrics for measurement. The entire focus is around delivered value. You can break it into however many stories you want, the value is the same. The measurement of how many things you delivered or how much time they took is not important to the company.What's important is how much value was been delivered to the company. It's the only metric that matters."
"Dear Agile, I’m Tired of Pretending (2018)",emiliobumachar,"on July 1, 2019","The subtler point is that if the developer won't make an estimate for how much time a feature will take, than the manager will. And the manager's estimate will tend to be even worse than the developer's, so we should all prefer that the developer makes the estimate even though it will be a bad estimate in an absolute scale.Note that the manager's estimate may be implicit or explicit, conscious or unconscious, but they will make one in the absence of the developer's. An implicit estimate would look like the manager doing a ""gut call"" when deciding whether or not to give the go-ahead to a feature, with no numbers attached to time and cost."
"Dear Agile, I’m Tired of Pretending (2018)",mcv,"on July 1, 2019","The problem is that if the developer gives an estimate, the manager might hold him accountable to it. If the developer can't even meet his own estimate, that proves to the manager that he's a bad developer. (He's not; he's just bad at estimating development time, as is everybody else.)And that's what Scrum and story points are for: to help you make long term estimates once part of the work has been done. You use the feedback on how abstract story points turn out in practice, to get a rough long term estimate of how long the work is actually going to take. Without being so explicit that anyone can be held accountable to them."
"Dear Agile, I’m Tired of Pretending (2018)",emiliobumachar,"on July 1, 2019","The real problem is treating the estimate as a commitment, but Spolsky does rail against that."
"Dear Agile, I’m Tired of Pretending (2018)",geezerjay,"on July 1, 2019","What's stupid in wanting to get an idea of how much a project costs in order to decide if it's a good idea to pursue, let alonr allocate resources?"
"Dear Agile, I’m Tired of Pretending (2018)",ALittleLight,"on July 1, 2019","""How long will X take?""""I don't know, I've never done X before.""""Yeah, yeah. It doesn't have to be perfect analysis, just a rough idea for scheduling. Not written in stone, ha ha.""""Uh, a week?""""Okay, great, so if I say 8 days you should have it done by then?""""Yeah, I hope so.""""Great, thanks.""Day 3: actually doing X requires unforeseen Y and Z which will each take a month.""We need to add Y and Z to the schedule, which will each take a month.""""There's no room for that in the schedule.""""Then I can't do X""""We've already costed X and committed to it. We've got to do X. We need to make X happen. When can you get back to me with a path to green for X?  And also, let's schedule a post-mortem to figure out why we missed on X.""At the post-mortem, PM doesn't show up: ""Uh, turns out we missed on X because I estimated it too quickly and the PM committed to those estimates. I didn't know about Y and Z when estimating, and these are things I could have done to detect them as requirements if I had known to do so.""Email from PM: ""Hey, could you give me an estimate for X'? Doesn't have to be perfect, ha ha."""
"Dear Agile, I’m Tired of Pretending (2018)",unreal37,"on July 1, 2019","""A week"" is a terrible estimate for complex things that have components that you can't foresee. If you lose ""a day"" on some problem outside of your control (compiling starts to fail and it turns out someone checked in some code into your branch by mistake), you've basically wasted 20% of your estimate.Never say a week when there's the chance something will require a month because you didn't understand it.You need to learn this lesson. A week is a blink of an eye in software, and only things you understand take a week."
"Dear Agile, I’m Tired of Pretending (2018)",ALittleLight,"on July 1, 2019","""Really?  X will take 'a month at least'? Why?""""I don't know why, but I don't feel comfortable guessing less because I don't fully understand X.""""Okay, that's not a good way to estimate. Why don't you spend some time to come up with a plan for X and we can estimate it after that. When can I have the plan?"""
"Dear Agile, I’m Tired of Pretending (2018)",aidenn0,"on July 1, 2019",You can have the plan in a week.
"Dear Agile, I’m Tired of Pretending (2018)",ant_li0n,"on July 1, 2019",Yes. This happens at my shop all the time and it's absolutely terrible.  Each sprint starts out positive and ends with panic attacks.
"Dear Agile, I’m Tired of Pretending (2018)",asark,"on July 1, 2019","I've solved this by not panicking about software someone else owns. Worked out OK so far. They can fix their processes and expectations (I'll help!) to get more value out of me, or choose not to. Not my problem. Environment gets too toxic, well, see ya, and good luck (you'll need it)."
"Dear Agile, I’m Tired of Pretending (2018)",cr0sh,"on July 1, 2019","This would've worked if you'd taken your initial estimate (1 week) - bumped it to the next unit (1 month) - then doubled it (2 months). Maybe you would've been given 9 or 10 weeks, so you'd have the week for X, and 1 month each for Y and Z.I understand this is a contrived example, but it's strange that, when you take a real project that ""overran"" based on the initial estimate(s), and you apply the formula - just how often the formula is actually really close to the actual amount of time.Not always - but more often than not."
"Dear Agile, I’m Tired of Pretending (2018)",ALittleLight,"on July 1, 2019","I've worked about 10 years at FAANG companies and I'm yet to meet the experienced and expert devs who are good at estimating things. I think your characterization of ""inexperienced and clueless"" devs is off.The reason I think my example illustrates a problem is it's moving away from agile. I shouldn't estimate X without understanding it?  Okay, I'll take the time to figure out, look around corners, etc. I realize I need Y and Z. I've got to estimate those, to estimate X, so I start working with other teams to figure these things out, and drawing up plans and schedules and who's doing what when to get all this stuff delivered. Now we're basically at the waterfall model where we're planning everything out before doing it.The other problem is that all the process is genuinely a waste. If we need X then let me work on it rather than do all the planning and scheduling nonsense. The schedule will be wrong anyway. If I have problems, need help, etc with X then I can raise those concerns and management can react in an agile way."
"Dear Agile, I’m Tired of Pretending (2018)",commandlinefan,"on July 1, 2019","> If we need X then let me work on itIf you look through the managers who are weighing in on this thread, you’ll notice a common perspective: they don’t trust you to actually work on something.  That’s why I have so little hope for any software methodology - even if it starts from something positive (like XP, which was the precursor to “agile”, did), it will be turned into “I know all of my programmers are stealing from me, how can I stop them?”"
"Dear Agile, I’m Tired of Pretending (2018)",hinkley,"on July 1, 2019","In part because we still measure effort in hours instead of in wear and tear.  That guy answering comments on Hacker News is probably trying to recharge, not steal from you.I learned recently that the crane operators that unload cargo ships at some major ports can’t work more than four hours at a time. The movements are too precise and take a great deal of attention. I think you can work two shifts per day but there’s a mandated gap of some number of hours between them."
"Dear Agile, I’m Tired of Pretending (2018)",outworlder,"on July 1, 2019","> At most your example argues that asking inexperienced and clueless devs to estimate stuff they know nothing about produces highly unreliable information.Wow, so much hubris in such as small post.Unless you have been doing the exact same thing forever(in which case you are at a risk of being replaced), new work _always_ comes with a degree of uncertainty. Be it new technologies, new business requirements or what have you. I have never worked in two identical projects in my life.The correct answer would be a 'spike' or proof of concept. Either that, or hire those magical developers you seem to have who know everything there is to know."
"Dear Agile, I’m Tired of Pretending (2018)",twic,"on July 1, 2019","Writing software is design, not manufacturing [1]. Do companies know accurately in advance how much it will cost to design a new nuclear power plant, aircraft carrier, or jet engine?[1] http://www.bleading-edge.com/Publications/C++Journal/Cpjour2..."
"Dear Agile, I’m Tired of Pretending (2018)",apatters,"on July 1, 2019","There are times when something truly original is being built and it's a valid argument for estimate uncertainty. But a significant portion of the industry is engaged in building CRUD app #237 or Ho-Hum SaaS #17, and a significant percentage of estimates end up wrong because some developer who was bored with his job decided to use a blingy new Javascript framework he had no experience with because he wanted a challenge. Money gets lit on fire again and again this way and it's frankly selfish and irresponsible."
"Dear Agile, I’m Tired of Pretending (2018)",sarchertech,"on July 1, 2019","If the software is truly that unoriginal, use something off the shelf. The issue is that in literally every non-toy product I've every been involved in the product owners will always turn CRUD app #237 or Ho-Hum SaaS #17 into something significantly more custom and much more complex.>because some developer who was bored with his job decided to use a blingy new Javascript framework he had no experience with because he wanted a challenge.That definitely happens, but I think it's a different problem."
"Dear Agile, I’m Tired of Pretending (2018)",asark,"on July 1, 2019","> The issue is that in literally every non-toy product I've every been involved in the product owners will always turn CRUD app #237 or Ho-Hum SaaS #17 into something significantly more custom and much more complex.YES! The cost of custom-everything design and bespoke gee-whiz is vastly under-appreciated, IMO. CRUDy Android and iOS apps using built-in widgets and simple color theming? Relatively easy to estimate, and pretty damn fast. Custom-everything, we want both to look pretty similar (so, probably Material-ish given current trends, which you'd think would come for free at least on Android but... doesn't), custom animations everywhere, oh I hate that default date picker on this particular Samsung phone (and sure, it's god-awful) can we customize it, and the designer came up with this layout for this form that requires all kinds of twisty-bendy manipulation to reproduce versus something more straightforward but that's what the ""stakeholders"" approved so let's do that.Et c. et c. and pretty soon the app's 10x as expensive (no exaggeration!) because you couldn't live with the easiest-for-the-user-anyway default styles with some custom coloring.And the Web's at least as bad. Often you're also making your page way less usable and breaking it on certain browser/device combos due to the extra effort you put in to make it ""pretty"", at great cost.[EDIT] in fact I've in the past suggested providing design points for ""pretty gee-whiz versus not-actually-bad straightforward implementation"" to make product owners choose between getting e.g. three normal (and OK-looking but not ""pretty"") features or one pretty feature in a sprint, to make this cost more visible and give owners on a budget more flexibility in shipping features, but it never caught on—in particular designers hate, hate, hate the idea, I think because it might expose that their work is sometimes (often...) more expensive than it's worth (and vastly more expensive than they're being paid, since it also eats huge amounts of developer time) given you've got some developers with even a hint of aesthetic and UX sense on a project."
"Dear Agile, I’m Tired of Pretending (2018)",cr0sh,"on July 1, 2019","I wonder if you looked at time estimates from developers of common process applications (like CRUD) in say, the 1980s, who used COBOL or FORTRAN, vs say those using Pascal or C - if those developers of code using extremely well known processes and libraries had better estimates than those using the ""newer bling""?"
"Dear Agile, I’m Tired of Pretending (2018)",hinkley,"on July 1, 2019",Design or repair.These are the same people who get furious at their mechanic or plumber when they double the time estimate.
"Dear Agile, I’m Tired of Pretending (2018)",danielbarla,"on July 1, 2019","Nothing, inherently, except perhaps the fallacy of comparing a pair of jeans to the rather chaotic and unpredictable world of bespoke systems development.  One is inherently known (a pair of jeans you've presumably already manufactured), the other is one big unknown, basically."
"Dear Agile, I’m Tired of Pretending (2018)",commandlinefan,"on July 1, 2019","Right.  You can imagine a conversation something like:""Ok, how long is this project going to take?""""Well, it's still being defined...""""What do you mean you refuse to tell me how long this project is going to take?""The analogy is so ridiculous that the person making it clearly doesn't even comprehend the domain he's discussing."
"Dear Agile, I’m Tired of Pretending (2018)",ellius,"on July 1, 2019","Aircraft, hospitals, hotels — a million complex bespoke things are built every day. Cost and time projections are inevitable."
"Dear Agile, I’m Tired of Pretending (2018)",marcosdumay,"on July 1, 2019",> Cost and time projections are inevitable.As inevitable as blowing through the projections.
"Dear Agile, I’m Tired of Pretending (2018)",ben509,"on July 1, 2019","He compared to jeans because they're an extremely trivial purchase that someone would give little thought to, but still demand to know what they cost. The point is that in all cases you need that information, with a major software project you simply need it far more."
"Dear Agile, I’m Tired of Pretending (2018)",commandlinefan,"on July 1, 2019","> you needAnd that's the core of the problem (which, ironically in the context of the article, agile methodologies were supposed to address): wanting or needing something to be true/exist doesn't make it so."
"Dear Agile, I’m Tired of Pretending (2018)",mstade,"on July 1, 2019","I think maybe the point they're trying to make is that comparing a software development project that may include a number of unknowns to buying a pair of jeans where there are probably very few if any unknowns is fallacious and a waste of time.That said, I don't think it's black and white. Some projects, making a simple web site that follows whatever Squarespace template is popular and filling it with some relevant content can be a pretty simple project, even to the point where the buying a pair of jeans comparison makes more sense.The problem, I suppose, is when you believe strongly that every project can be accurately priced up front. Not every project is a moonshot, but some truly are and it's not always obvious up front which ones are."
"Dear Agile, I’m Tired of Pretending (2018)",asark,"on July 1, 2019","It is when stakeholders throw curveballs.""We want you to do this.""""Sweet, easy enough, I'll just use X, Y and Z, no problem.""""Oh but sorry you have to use A, B, and C instead. Oh and it'll need to connect to D for reporting, and we'd like it to sync with E which we've never done but they have an API so it can't be too hard, right? Oh and it needs to fit this design we've already approved that's about as far from native to the platform you're developing for as it could be and has a ton of UX issues that require fundamental changes to fix, which you'll uncover as you work. That's about as easy, right?""""....""[EDIT] oh and also one ""minor"" feature we're going to toss in later is actually big enough to build an entire company around so you'll have to waste a bunch of time talking us down from that while we quietly lower our opinion of you, and we've accidentally described a few things which are basically impossible by egregiously violating e.g. CAP theorem or being what's effectively a highly-available distributed filesystem that needs to fit without our timeframe and budget, which is 1/20 what it would take to maybe build that and that alone."
"Dear Agile, I’m Tired of Pretending (2018)",duchenne,"on July 1, 2019","As a consumer, I can buy an already manufactured pair of jeans or an already programmed Adobe Photoshop for a fixed price.As a producter, the cost of building a jeans factory does not seem to be inherently more predictable than the budget of a software development project."
"Dear Agile, I’m Tired of Pretending (2018)",ghostpepper,"on July 1, 2019","I think, to take this analogy a step further, you need to make sure your manager realizes the factory is not built yet."
"Dear Agile, I’m Tired of Pretending (2018)",threwawasy1228,"on July 1, 2019","The recent Foxconn plant in Wisconsin that may or may not be happening is a great example. They committed earlier, and claim now that their initial estimates were incorrect and that a plant in that area will not be profitable for them. They have now stopped the plan entirely and reworked what it is they are going to build completely from scratch. This despite having already committed to building the factory.Even at scale people can pull out of complex agreements if their estimates turn out to be faulty."
"Dear Agile, I’m Tired of Pretending (2018)",cc81,"on July 1, 2019",You should be able to put it in a range otherwise you probably don't know enough to build it. You don't want to spend 100 millions on something that will save 1 million a year.
"Dear Agile, I’m Tired of Pretending (2018)",celticmusic,"on July 2, 2019",managers and business leaders make decisions based upon those estimates.Imagine if that cable guy coming your house said between 1 hour and 2 weeks.  Good luck making anything approaching a good decision surrounding the cable guy's visit.
"Dear Agile, I’m Tired of Pretending (2018)",lordleft,"on July 1, 2019","The best way I've seen agile described is ""designing code in a way that acknowledges change.' I think there's a lot of value in understanding that you may have to go back to the drawing board when designing parts of your program. I have little regard for the entire industry that has risen up around agile, however."
"Dear Agile, I’m Tired of Pretending (2018)",collyw,"on July 3, 2019","That makes complete sense as a good way to go about designing software, but I don't think I have seen anywhere else describe agile in that way."
"Dear Agile, I’m Tired of Pretending (2018)",marapuru,"on July 1, 2019","Yeah, coming to the point where it's never completely finished. You just always anticipate on going back."
"Dear Agile, I’m Tired of Pretending (2018)",FpUser,"on July 1, 2019",Exactly my thoughts.
"Dear Agile, I’m Tired of Pretending (2018)",musicale,"on July 1, 2019","There is a similar problem in the research world; the work must be genuinely novel (and fundamentally unpredictable), but funding organizations such as NSF/NIH/etc. demand a timetable and specific deliverables.The problem is usually solved in three important ways:1) making the deliverables as vague as humanly possible2) promising experiments and not results3) applying for grants for work that you have already completed, and using the money to work on the next grant's projectThe problem of having deadlines that are too far out is mitigated somewhat by the pressure to publish. Publishing has fixed deadlines but somewhat flexible deliverables."
"Dear Agile, I’m Tired of Pretending (2018)",Isamu,"on July 1, 2019","Agile is not science-based, it is an ad hoc bag of techniques that seem to have merit. As such you have to be able to reason about what your practices are and you have to relate everything to concrete business goals.Your goal should never be to become ""more agile"". You should be looking to improve efficiency, to make sure you are building the right thing, to improve communication so that everyone is on the same page, etc. ""Agile"" is never going to magically improve anything."
"Dear Agile, I’m Tired of Pretending (2018)",FpUser,"on July 1, 2019","""Agile is not science-based, it is an ad hoc bag of techniques that seem to have merit""Each participant of ""Agile"" development should have this hung on their work place."
"Dear Agile, I’m Tired of Pretending (2018)",taylodl,"on July 1, 2019","Uncle Bob wrote about this in The Tragedy of Craftsmanship (https://blog.cleancoder.com/uncle-bob/2018/08/28/Craftsmansh...). His perspective is Agile lost its way once the Project Managers stepped in. It seems to me the problem with Agile in practice today is there's too much focus on process and not enough focus on, you know, the actual software being delivered. Add to that a host of less-than-desirable ideas that have taken hold (don't even get me started on emergent architecture) and you realize modern Agile has become a cesspool.What to do if you're on an Agile team? There's value in the Lean Methodology. Remember, the whole point was to deliver software your customer needs to fulfill their business objectives. Continually assess your Agile practice and see if what you're doing still makes sense for the project you're working on right now and for the current stage that project is in. This continual assessment with a focus on the end goal of delivering software can go a long way to addressing Agile's modern ills."
"Dear Agile, I’m Tired of Pretending (2018)",F_J_H,"on July 1, 2019","I had not heard of ""emergent architecture"" until you implied you hated it, and so I thought I would Google it.I have no idea what emergent architecture is in the agile context, but the idea of emergence is fascinating to me, and has been ever since I read ""Emergence: The Connected Lives of Ants, Brains, Cities, and Software"" by Steven Johnson.We see the idea of emergent design everywhere in nature and society.  I'm not suggesting everything can be built and designed ""emergently"", but certainly some things can be.  See the book (and concept of) ""the cathedral and the bazaar"". The idea of something useful coming into existence without central planning is an enticing one, and so I can see the draw."
"Dear Agile, I’m Tired of Pretending (2018)",LyndsySimon,"on July 1, 2019","Thank you for that book recommendation - I just bought it and am looking forward to reading it :)I also had not heard the term ""emergent architecture"" in relation to software development. I'm intimately familiar with the concept of emergent order, though, and my grokking it was part of my ""political awakening"" in my 20s. It led me from being a libertarian-leaning conservative to an anarcho-capitalist. To put it another way, I believe that the system create by independent actors acting in their own self-interest naturally create the most efficient system possible within the constraints of the environment within which they operate.There's a name for this concept when applied to company management, but I can't recall it at the moment :(. I want to say the word has a Greek root, and it reminded me of ""autarchy"" (""self organized"") but that wasn't what it was called."
"Dear Agile, I’m Tired of Pretending (2018)",F_J_H,"on July 1, 2019","You'd probably like Milton Friedman's ideas, and I'd be surprised if you've not already come across his work and YouTube lectures.There is something to be said for small government, but also can go too far: actors acting in their own best interest can obviously cause harm to society or to the larger group as a whole (See ""tragedy of the commons"").Related to emergence is rapid iteration, and it's importance to analysing complexity, which is caputured nicely in ""Boyd's law"". See https://blog.codinghorror.com/boyds-law-of-iteration/, and then see if you can find the referenced paper by Roger Sessions. (Sessions seemed to caputure the essence of ""Lean Startup"" before it was cool...)"
"Dear Agile, I’m Tired of Pretending (2018)",mcv,"on July 1, 2019","""It’s just that everyone does Agile wrong.""Not everyone. Some are very successful with it. The problem is that everybody wants to copy that success and tries to cargo cult themselves through it without understanding it.""let’s stop pretending Agile was some sort of cure all.""That's certainly good advice. Agile is more of an attitude than a solution, and attitude is not going to solve all your problems. Even if you are as Agile as you can be, you still need to solve your problems. It's just that being Agile might make you more flexible and effective at solving those problems.And Lean is certainly more comprehensive than Agile. And I don't think they contradict each other. In fact, they're very similar; they're both about empowering the people who are doing the actual work.""management thinks the focus should still be scope and deadlines and efficiency, ignoring that the deadlines are arbitrary and the requested time estimates are a form of waste.""Then management is not Agile and hasn't properly learned what it is. That is sadly common. Agile is not magically going to solve bad management, but Agile does emphasize keeping management at a distance and empowering developers.""Agile actually tends to mask the core problem, which is a systemic, bidirectional lack of vertical trust.""Does it mask that? I think it exposes it. Without that trust, Agile cannot work. Agile insists on that trust. I suspect that every case of broken Agile is caused by a lack of trust. Fix the lack of trust (or use a system that works without trust if you absolutely must).""Did you know story points were actually invented to obscure time and help alleviate this problem? That backfired too, didn’t it?""Yes I did and no it didn't. Every single team I've worked in over the past 6 years knew this and kept repeating it every time someone comes along and tries to match story points to actual hours.This first half of the article suggests the author has mostly worked in very toxic management cultures."
"Dear Agile, I’m Tired of Pretending (2018)",unreal37,"on July 1, 2019","I agree with a lot of what you said.My last company (before going self-employed) had an agile environment and it was mostly a good system to work in.I don't recognize the fairly strictly Agile (not AINO) environment I worked in in that article. Not perfect, but it worked and better than a lot of places that had no good methodology."
"Dear Agile, I’m Tired of Pretending (2018)",mpweiher,"on July 1, 2019","I agree that almost all of the orgs I encountered that were Doing Agile were pretty horrible.On the other hand, I've also been in orgs that were very successful in developing software in a way that we would recognise as being agile.  We just didn't make a big deal out of it.  And we didn't do standups (most of the time), or 2 week sprints, or retrospectives.  We didn't even pair consistently:  we split up on trivial stuff, paired on hard stuff, as needed and available.In one org we started without TDD, and even without having much in the way of automated tests at all.  But when we discovered testing and TDD, boy did we ever embrace it.  Not because anyone told us to (mid-to-late 90s, so no Agile Manifesto), but because the difference for us developers was night and day.So develop software.  Concentrate on what helps you develop software.  In my experience, you will probably discover something recognisably agile all by yourself.  So when you discover that, help yourself to what helps you.  Don't make a big deal out of it."
"Dear Agile, I’m Tired of Pretending (2018)",maxxxxx,"on July 1, 2019",What you are describing is exactly what Agile should be. You have a team of people who care about the craft and they slowly improve processes based on real world feedback and experience. If something doesn't work you drop it and try something else. This happens in environments where people respect each other.
"Dear Agile, I’m Tired of Pretending (2018)",rtikulit,"on July 1, 2019","Management does not want to hear that software development is a craft. They want it to be a trade, with fungible workers operating in a predictable process with fungible components. The great tragedy of Agile is that it was co-opted as the vehicle of this transformation. It was seized by management, weaponized to other purposes, and then aimed right back at us."
"Dear Agile, I’m Tired of Pretending (2018)",bloorp,"on July 1, 2019","Yeah, I've come to similar conclusions about Agile. It can be a great way for an already well-disciplined organization to think about the work they're doing. But many, many undisciplined organizations thought that Agile would be a catalyst for them to become disciplined. But the nitty gritty of ""doing Agile"" required EVEN MORE discipline than what all these organizations were already capable of exercising, so it just highlights all the frustrations everyone already has.That does seem to be the downside of Agile. It's a collection of maybe a dozen different techniques and practices. But if one of those practices falters, whether it's the TDD, or the business side still wants a certain deadline, or you don't bother to demo at the end of a sprint, then the whole house of cards falls like dominoes..... checkmate!"
"Dear Agile, I’m Tired of Pretending (2018)",hef19898,"on July 1, 2019","Sounds a lot like TPS, I assume Toyota did a lot of the stuff before any books were written. Also, my personal experience, the more companies talk about Lean and Six Sigma the less they do it."
"Dear Agile, I’m Tired of Pretending (2018)",mpweiher,"on July 1, 2019","Similar with ""culture"".  Companies with a great culture don't talk much about it, they just get shit done without much fuss and typically have some fun doing it.  Because getting shit done is fun.On the other hand, if the company all about how fantastic the culture is...run!  Or at least tread very, very carefully."
"Dear Agile, I’m Tired of Pretending (2018)",maxxxxx,"on July 1, 2019","Totally agree. Talking about culture or hanging up ""inspirational"" posters is usually a warning sign. Good organizations live their values and don't feel a need to constantly talk about them."
"Dear Agile, I’m Tired of Pretending (2018)",HeWhoLurksLate,"on July 1, 2019","That reminds me of my two favorite interviewee questions:""What's your company culture like?""  - the way that the interviewer responds is a pretty good indicator of what their culture is like.""If someone does something exceptional, how do you reward them?""  works in a very similar way."
"Dear Agile, I’m Tired of Pretending (2018)",rtikulit,"on July 1, 2019",Maybe even step back to first principles... “Can your company even recognize when someone does something exceptional?”
"Dear Agile, I’m Tired of Pretending (2018)",asdfman123,"on July 1, 2019",Build trust and respect instead of elaborate processes to compensate for the lack of them.
"Dear Agile, I’m Tired of Pretending (2018)",marcosdumay,"on July 1, 2019","> Doing AgileYou mean the ones following one of those canned ""agile processes""?It always amused me how people could read the Agile Manifesto and then conclude that it's best satisfied by following a canned process."
"Dear Agile, I’m Tired of Pretending (2018)",Zenbit_UX,"on July 1, 2019","Got any insight as to why TDD is such a great thing?From how Ive heard it described it seems to be a way for management to impose rules on how developers can approach writing a feature and not necessarily a benefit to the devs.If I understand it properly, it's essentially write a test so it fails then fill in the feature gap. The whole write first bit is just so you don't have to retest later to verify that your test didn't hit a false positive, right? Something a careful person would check anyways..."
"Dear Agile, I’m Tired of Pretending (2018)",mpweiher,"on July 3, 2019","1. It's not a management-imposed thingTDD was discovered as technique by developers, for their own benefit.  Management imposing it can be a bit of an anti-pattern, though it may be well-intentioned.  I have certainly pushed teams to TDD, though primarily by example and by the positive experience you quickly get.Anyway, TDD has nothing to do with management imposition.  It is really diametrically opposed, at most orthogonal.2. ""test didn't hit a false positive""Yes, that's a good thing, though hardly the main point.  You write that a careful person does this anyway.  I'd rather have a machine do that for me, and have less of a requirement on me to be careful.  Computers are much better at being careful, and I want them to do the tedious stuff.I also am wary of claims of ""you just need to be careful"".  Probably lots of bugs ahead!3. So why is TDD so great?First, it's a design technique.  Writing the test first forces you to think about how your new production code will be called.  It also forces you to be clear about what the code is supposed to do, precisely, before you write the code.  Writing the test tends to be significantly less difficult than writing (correct) code to solve the problem.  You then write only the minimal code that is required to pass the test, which surprisingly also tends to be fairly trivial.  Also, you know when you're done:  when the tests are green again.So you've transformed one difficult step into two fairly trivial steps.  Which sounds weirdly magical, but actually works in practice.  Also, since you only wrote the minimal code that was required for the tests to pass, you know that you have good test coverage.After you've done a few, you're in a place to detect duplication and eliminate it by refactoring.  This tends to be somewhat more intellectually challenging.   However, you are truly refactoring, that is not changing the functionality, so you have a great safety net with the good test coverage you achieved before.So you get this small steps that are fun and easy, and you tend to not regress.Psychologically, it's also very pleasant, compared to the usual flow, which goes somewhat as follows:   1. I have a rough understanding of the problem,
   2. I code a solution, which is at the limits of my understanding 
      (because everything is up in the air)
      This part feels very good, ""I am the master of the universe""
   3. Then I should write some tests, but the incentives are a bit negative
       -> if the tests all pass, nothing happens, so why did I write the tests?
          also if nothing happens, how do I know I actually tested something?
          (not by ""being careful"")
       -> if the tests do show a failure, it's a distinct downer from step 2
          (and so I probably subconsciously write my test so they don't fail)
   4. I don't really want to refactor, because my solution from step 2 was already awesome!


TDD:   1. I write a test.  It fails appropriately.                        That makes me happy.
   2. I write minimal code.  Tests go green.                          That also makes me happy.
   3. I refactor.  The code now is much nicer and tests still green.  More happiness.

So with most normal development flows you get that initial rush and then a lot of downers.  With TDD, you don't get quite the same initial excitement, but instead you get these nice regular dopamine hits without really much downside."
"Dear Agile, I’m Tired of Pretending (2018)",bewo001,"on July 1, 2019","Agile has fallen into the hands of big consultants. Now the focus is on process, with more meetings and presentations than ever before."
"Dear Agile, I’m Tired of Pretending (2018)",ataturk,"on July 1, 2019","Am tired, just dead bones tired of all of it.  It's all just this or that money making scheme with guys like me caught in the middle.  I despised Waterfall, fell into scrum and in the past ten or so years kinda sorta saw one project where agile basically worked right.  The rest has been mostly waste.  I've worked on billion dollar systems on down to just little nothings.  Doesn't matter, companies are struggling to make anything work.  I think there's just too much complexity and they all believe IT solutions can manage that complexity.  It's failing like never before while expectations have never been higher.Message to the Fortune 500:  Just get rid of anyone with the title ""scrum master"" they're dead weight.  You were fooled, deal with it.  I am trying to move my team over to Kanban right now, but we have all this reporting crap up the chain all designed around CA Rally, the worst productivity tool ever made."
"Dear Agile, I’m Tired of Pretending (2018)",JoeAltmaier,"on July 1, 2019",Good advice for an experienced team. Couple it with good reporting (who's job is that?) and management could be good with it.Green teams may need more structure. But the structure should not take over; it should be a tutorial and get rethought as the team matures.
"Dear Agile, I’m Tired of Pretending (2018)",maxxxxx,"on July 1, 2019",You also need to give people the chance to make mistakes and learn from them. I don’t envy a lot of the young developers who get micromanaged all the time and  never have a chance to try something.
"Dear Agile, I’m Tired of Pretending (2018)",alexanderdou,"on July 1, 2019","Perhaps I've just always been extraordinarily lucky, but I've never heard the developers I work with complain about our Pointing and Development cycle (and I'd like to think I do try my best to 1) proactively ask them for feedback and 2) recognize and squelch any of my own reactionary defensiveness that comes from feedback).One thing I see a lot in the comments is about time estimates and the amount of pressure that that brings and the rarity in which it works.In my teams we NEVER talk about time of delivery with Engineering. I've always been trained to think of pointing as an estimate of ""complexity"" (e.g. 1 point is roughly the complexity associated with a copy change).Then, by getting a track record of historical points completed in a week, we can transform our way from feature => complexity => time."
"Dear Agile, I’m Tired of Pretending (2018)",t0mbstone,"on July 1, 2019","Complexity only matters if it can be correlated to time.For example, if you ask someone to transcribe 10,000 pages of text, and you know that they type 60 words per minute, and that there are an average of 300 words per page, then you can estimate that it will take approximately 833 hours to transcribe.If we followed your method of estimating stories strictly by complexity, however, this is clearly only a one pointer story. After all, there is nothing complex at all about the dull task of rote transcription, and all quantities are known and established.When people talk about ""complexity"" in software development, what they are really talking about is how certain they are in their knowledge about all the things they have to touch. The more things they have to touch, and the more things they are unfamiliar with, the more things can unexpectedly go wrong.Each task should really receive two estimates:1. How long do you think this will take?2. How certain are you of this estimate, given all the factors you are aware of?That would be too much work, though, so people condense this into a single point value and hope for the best."
"Dear Agile, I’m Tired of Pretending (2018)",nerdponx,"on July 1, 2019","Ah, yes, the old ""you're not doing it right, so read these 3 books and follow 10 bloggers every day"" argument."
"Dear Agile, I’m Tired of Pretending (2018)",unreal37,"on July 1, 2019","That was the weirdest part. ""How many books do you read? Go read more books."""
"Dear Agile, I’m Tired of Pretending (2018)",bendixso,"on July 1, 2019",Seriously. Just keep piling more bullshit on top of the bullshit
"Dear Agile, I’m Tired of Pretending (2018)",collyw,"on July 3, 2019","That would be more helpful than the far more common response of just ""you are doing it wrong"" argument with absolutely no indication of how to do it right."
"Dear Agile, I’m Tired of Pretending (2018)",Zelphyr,"on July 1, 2019","The biggest problem I’ve found with Agile hasn’t necessarily been Agile itself but the lack of buy-in from company leadership. Even when we’ve had professional Agile trainers come in and tell them that not only must they embrace it for us to be successful, but they themselves must go through the training. They usually waive it off as something they’ll get to eventually. Almost immediately we wind up with a bastardized version of Agile that basically doesn’t work because the leadership doesn’t understand why we “can’t just” do something."
"Dear Agile, I’m Tired of Pretending (2018)",rayanm,"on July 1, 2019",Agile was dead to me when I finished my PhD and joined a company that paid a Scrum consultant more than they paid me to help us move tickets without knowing what was the project about.
"Dear Agile, I’m Tired of Pretending (2018)",kybernetikos,"on July 1, 2019",You'll probably find that the most highly paid people in most organisations only have a fairly abstract understanding of the work being done. This is nothing to do with agile.
"Dear Agile, I’m Tired of Pretending (2018)",rayanm,"on July 1, 2019","I am perfectly fine with paying more for a technical project manager, or a team lead who can help us glue things together and see the big picture. But I am not fine with hiring a consultant who doesn't know anything about our product and thinks that Agile has some magic to deliver products."
"Dear Agile, I’m Tired of Pretending (2018)",bitwize,"on July 1, 2019","Agile in practice is a way for Corporate to have its cake and eat it too: get the results and productivity associated with outstanding programmers, using the programming talent they have/can hire, with a minimum of risk exposure. Part of this is the attempt (also seen in other corporate quality efforts like ISO9000) to distill skills into process: to produce a book of rules that, rigidly enforced on relatively unskilled workers, will cause them to perform at the level of highly skilled workers. Hence my repeated quip that ""Agile is attempting to emulate a good programmer with an array of average programmers"". Unfortunately for Corporate, It Just Doesn't Work That Way.Now I believe that Agile was started with good intentions, but today it is much more a motte-and-bailey doctrine. The motte being ""Agile is the values in the Agile Manifesto"". The bailey being ""Agile is Scrum and SAFe, and all these meetings, ceremonies, and process are a necessary component of Agile"". And I think this is why people fall into no-true-Agile discussions and eventually end up disappointed with something that showed a lot of promise. Agile started off a plea from programmers to Corporate, and it caught Corporate's ear. But once in Corporate's possession, it was deployed to serve Corporate ends only."
"Dear Agile, I’m Tired of Pretending (2018)",andrei_says_,"on July 1, 2019","I love this talk by Dave Thomas, one of the people whose names are on the original Agile Manifesto.Among other things he speaks about the simplicity of the Manifesto, about the cultish movement and consulting services which rose around it and the cultish, distorted, complex vortex of BS that has formed around a super simple concept.https://m.youtube.com/watch?v=a-BOSpxYJ9M"
"Dear Agile, I’m Tired of Pretending (2018)",logfromblammo,"on July 1, 2019","The longer I stay in this industry, the more anecdotes I accumulate that suggest that software development is not exclusively software development.Software development is solutions development; but for a large subclass of problems, custom-built software that automates the tedious, predictable, and repetitive parts of the solution has been and always will be a competitive way to solve them.  It's synecdoche, a metonymy for ""software development [and other assorted disciplines of problem-solving]"".Software is the hammer in the toolbox.  Things that look like nails get hammered.  The hammer is so useful to organizations that have many nail-like objects sticking up, that handypersons who only have a hammer in their toolbox can still work continuously, and may never need to do anything else but hammer things.  This may become common enough that folks who also keep vice grips, screwdrivers, hand saws, duct tape, and penetrating oil in their toolboxes are forbidden from using those tools.  They were hired for the hammer; they should use the hammer.  And what's all this nonsense about non-hammer tools, anyway?  We've never needed anything but hammers here, and that's the way we like it.Agile is about advising organizations with strict rules and style guides for nail-hammering to loosen up and let the hammerers determine how to wield their own hammers, and possibly also choose the length and width of the nails.Despite the amount I actually get paid, working upstream of the problem far enough to eliminate both the nail and the hammer--possibly using a more appropriate tool--is apparently above my pay grade.  Agile never fixed that.  It never even suggested that a non-hammer world exists.  Even the CTO position might as well be chief hammering officer.  The 'T' restricts the domain of authority.  An organization that is agile instead of just Agile needs to have someone around that can meaningfully restructure the company itself, such that the assumptions already built in to its organizational hierarchy are not inevitably replicated in the processes of all of its subdivisions.  That's why Agile never fixed anything.  The CEOs still kept telling their CTOs to take charge of all the hammers and pound something out.  Those companies founded to be Agile put different assumptions into their organization.  When that changes, going through the motions of Agile won't help them any more."
"Dear Agile, I’m Tired of Pretending (2018)",inlined,"on July 1, 2019","I’ve been a tech lead for 6 years and Agile has given me a lot of imposter syndrome because I can’t seem to make it work for me. The biggest point for our org is to cost work items and realize a consistent throughput for our team on which we can make scheduling predictions.Unfortunately my tasks tend to be nebulous. They involve investigating very large potential systems and breaking out smaller tasks, many of which won’t be fully understood till we’re in the trenches. How do I cost the time it takes to learn how Spanner will handle my design and update architecture accordingly? How do I cost “interrupt driven” work like getting buyoff on a given architecture? One of my OKRs was literally “Create a security model for a new foundational technology that is acceptable to all integrators, follows Google Cloud best practices, and can be represented in Kubernetes.” How would you break that into (bi)weekly sprints? You don’t even know what work you’ll have to do until you go to a committee of stakeholders and get told where you have to go back to the drawing board."
"Dear Agile, I’m Tired of Pretending (2018)",keithnz,"on July 1, 2019","See, this is about agile going wrong....  back in the early days of XP, a term started popping up ""Brain Engaged"", meaning that you don't blindly follow perscribed processes.  The manifesto tried to capture this in somewhat frilly language.  So be agile ( not in the dogmatic process sense of Agile with a capital 'A').  You have to do something like ""create a security...blah blah"".  You don't have to do anything bi weekly, what you need is a way of of doing that where you can get feedback as soon as possible, how do you iterate through possibilities and arrive at a good decision? how do you involve the people who need to be involved in a way that you get good contribution? How do you make it so it is robust, how do you progressively work towards the goal while minimizing risks and failing fast? If nothing else, the core of agile is feedback loops and communication with the various people involved at a rate that people need."
"Dear Agile, I’m Tired of Pretending (2018)",inlined,"on July 1, 2019","To expand a little, since the org wants accurate estimates we need to accurately measure throughout and the total quantity of work. Though throughout trends stabilize pretty quickly, the system falls apart when one task reveals another. Accurately breaking down and costing every sub task at sub-week granularity for a multi-year project is an almost insurmountable task. It requires effectively doing all the work in your head.I’ve seen one compromise and benefit to the system:Compromise: push back on scheduling until the date you give for coming up for a date of completion. This works best during the final phases of development.Benefit: with weekly throughput info, it’s easy to tell if someone is trying to do too much in a sprint."
"Dear Agile, I’m Tired of Pretending (2018)",RocketSyntax,"on July 1, 2019","""We don't want to follow the agile process..."" followed by ""why isn't agile working for us?!""I blame the ambiguous manifesto."
"Dear Agile, I’m Tired of Pretending (2018)",specialist,"on July 1, 2019",The Agile Methodology is to argue about The Agile Methodology.
"Dear Agile, I’m Tired of Pretending (2018)",KZeillmann,"on July 1, 2019","Oh look, it's the weekly ""Agile is bad"" post. I've successfully worked on two teams (including my current job) where we're a truly agile dev team. We value interactions over processes and tools, collaboration over contracts, and responding to change over following a plan.Agile is not and has never been a cure-all. Scrum doesn't solve any problems. It's supposed to reveal the problems that exist and make them apparent to anyone looking at the scrumboard. If you don't change your team dynamic and just start looking at a JIRA board every day in 30 minute ""standup"" meetings, you're not agile. You're just cargo culting.I'm tired of people blaming ""agile"" -- which is mainly about self-organizing teams and adapting quickly to changing circumstances, for what's really a management failure."
"Dear Agile, I’m Tired of Pretending (2018)",stcredzero,"on July 1, 2019","But but but, the problem is Waterscrumfall, not Agile as intended in the ManifestoHere's the thing. Corporations are hierarchical. Human beings are  hierarchical. We're also communal, but start putting us into larger and larger group situations where we're facing competition, stress, and we must engage in concerted effort, and we go into hierarchical mode.Why does everything tend to go back to waterfall? It's because that's how management likes it, for reasons which go down to basic human nature in the kinds of environments technology companies create. Heck, even the financial markets demand fictional planning and forecasts of the unknowable future. Bosses want to be able to make plans.One thing which Waterscrumfall has achieved, is that the iterations are much faster. That even fits the ""next quarter"" mindset of the financial markets."
"Dear Agile, I’m Tired of Pretending (2018)",mbar84,"on July 1, 2019","Very well said. If there's a methodology that starts with: these are the people involve, these are their incentives and this is the expected outcome in game theory, then I think we'll be making progress on methodology."
"Dear Agile, I’m Tired of Pretending (2018)",stcredzero,"on July 1, 2019","Methodologies are pretty good about that in the short term. If Agile were bad at that, then it wouldn't have spread. I think the problem is more Agile in the long term. It's a more general problem faced by longer term software projects.The answer might be to have shorter term software projects. Make everything more modular, have a standard backplane into which everything can plug into, and enable competing short term projects. I think today's trend is to make corporations into ecosystems, and this change might be able to shape incentives positively."
"Dear Agile, I’m Tired of Pretending (2018)",arendtio,"on July 1, 2019","> How does the first line of the Agile Manifesto begin?It is kinda funny. For me the first line has always been:> Individuals and interactions over processes and toolsAnd when I am asked to explain Agile, that is always at the core of my message. Form a team, let them do their work and start learning how they can improve how they do it.From my perspective, the primary role of a (software development) Project Manager/Scrum Master is to create an environment where the team can optimize itself while not drifting into personal conflicts (create a healthy environment for collaboration and feedback). Everything else, like planning/risk management/change management/stakeholder management/reporting/presenting come afterward.Those other things are important too (and should not be skipped completely), but if the team doesn't work, most of the other tasks create little value."
"Dear Agile, I’m Tired of Pretending (2018)",forgottenpass,"on July 1, 2019","I don't know any description of Agile better than meaningless buzzword.  Buzzwords are not without value. They are a tool for selling a change without describing all the nitty gritty.""Agile"" is a lie that before 2001 nobody at all had ever done iterative software development, and all software process ideas that came after 2001 are by definition ""agile.""""Agile"", as with any other buzzword, is not for people who actually understand the details of the change; it's for someone who needs a handle onto concepts that would fly over their heads without a buzzword.  Lets stop litigating the term, and move on."
"Dear Agile, I’m Tired of Pretending (2018)",SkyBelow,"on July 1, 2019",">Quit with the local optimizations already, and realize trust is the №1 issue.So how do you trust someone who would outsource your position if they believed it would save money and reduce their work load?  Management and employees have an inherently adversarial relationship that is poisonous to trust.  I think it can still develop at times, but under our current culture where everyone knows someone whose job was made redundant with little recourse for their employment, you might as well be asking for a coconut to grow in an active lava flow."
"Dear Agile, I’m Tired of Pretending (2018)",jacques_chester,"on July 1, 2019","In my experience, these discussions boil down to anecdotes at twenty paces.I've seen software development done very poorly and done very well, sailing under a variety of flags. But on an eyeballing there are far more bad experiences than good that get labeled ""Agile"".Whether this is because of causal differences or because it's easy to affix any label to anything (and most experiences suck regardless of the label) is hard to tell without a control-group universe were the Agile Manifesto was never written.If anyone needs me, I'll be counting to twenty."
"Dear Agile, I’m Tired of Pretending (2018)",wayoutthere,"on July 1, 2019","I have a theory here... culture beats process, but companies without the culture have to rely on process. So you’ll find that companies with the right culture can deliver better results without needing a bunch of process, but companies without the culture end up having to force it with process.And tbh, despite how bad “Agile” process can be, it’s a lot better than pure waterfall."
"Dear Agile, I’m Tired of Pretending (2018)",chris11,"on July 2, 2019","How do you like agile at Pivotal? I'm curious, they have some really strongly heard opinions about how to do agile correctly."
"Dear Agile, I’m Tired of Pretending (2018)",jacques_chester,"on July 2, 2019","Pivotal on the whole does software development as well as I've experienced. When you hit the sweetspot for our core practices it's really impressive. Everything just sort of flows.Sometimes it goes off the rails. That is in the nature of things. But it goes off the rails as an exception, rather than as a rule.If there's a key to the magic it's (1) hire for empathy as well as smarts and (2) reflect on what can be done better."
"Dear Agile, I’m Tired of Pretending (2018)",todd8,"on July 2, 2019","In addition to the difficulty in making a meaningful estimate, I'm frustrated by how often management really wants to hear a particular answer and won't settle for anything but that answer. It can go like this:1. Developers size development of X and says it will take roughly 12 months.2. Management says the rest of the organization is going into system test in 9 months and needs X finished by then. Couldn't there be some way of speeding up the development of X without impacting the rest of the organization?3. X's developers say no, not really.Now management tries one or more of the following:-- find someone else to size the work that X's developers will be expected to do-- hire some outside ""expert"" to size X-- hire contract programmers that claim to be experts in X that will join the X team-- suggest reduced functionality for X-- propose some modified ""streamlined"" component testing for X-- promise to provide X's required dependencies ahead of their scheduled completion dates so X's development won't be gated by these requirementsNow jump back to step 1. Repeat until X's team relents and says that maybe, just perhaps they might be able to finish X in 9 months if everything goes perfectly even though the company has never done X beforeThis is now passed up the management chain and it becomes part of the official overall system's schedule that planning, marketing, sales, finance, etc. is depending on.Iterating over all of these estimates is a big waste of time. Management has already decided that they want X in the system and will keep pushing until an estimate comes back that they accept.If X's team is lucky, some other team will fail to make their estimated completion date and X will end up with the 12 months it might take to finish X. Every team in the organization is hoping that it will be a different team that first has to admit that they will not make their date. This causes a kind of game of chicken where every manager is unwilling to be the first to admit that their team is going to miss it date. Consequently, every date in the organization cannot be relied upon. The distributed file system needs the TCP stack to be finished on time, but the TCP stack needs the ethernet device drivers to be finished on time and no one will admit slippage of any dates first."
"Dear Agile, I’m Tired of Pretending (2018)",tra3,"on July 2, 2019","> -- suggest reduced functionality for XLimiting the scope in a reasonable matter should reduce dev time, no? Assuming it's a true reduction in scope and not just lipstick on a pig.."
"Dear Agile, I’m Tired of Pretending (2018)",todd8,"on July 2, 2019","Yeah, I thought that point might be confusing because I wasn't clear. You're right limiting the scope could reduce dev time and it might often be a welcome suggestion. It doesn't always go that way though and some proposals for modifying the functionality are costly because they can require re-architecting the design even before development starts.Usually, lightening the ship by throwing functionality overboard in a panic doesn't happen until around half way through a project, but what I was referring to was the sort of impractical proposals that come from non-developers about how to reduce development time.""Couldn't we remove the ability to customize user icons--everyone in the icon based user view can have the same icon."" Okay, why have icons at all if every icon is identical?""Deadlock, what's that?, do we really have to detect it in the first release?"" Hmm...""Can we leave out distributed shared virtual memory segments?"" They weren't included in the original sizing""Do we have to do persistent client caching?"" Well then we will be no better than competing products.""Does X have to run over both UDP and TCP?"" That was originally a requirement. We can go back and examine that in light of other parts of the system depending on X."
"Dear Agile, I’m Tired of Pretending (2018)",dnprock,"on July 2, 2019","I personally found that a good methodology: each team member has clear area of ownership/responsibility. John does X, Jane does Y, Ann tests X, Jeff tests Y. Everyone logs their own tasks. We define and work towards a sprint. No elaborate planning, no estimates. The peer pressure is enough to get everyone moving.Managers often tell me that my process is chaotic. They want more visibility and deterministic completion dates. We adopt Agile process.  Now we have long sprint meetings. I think we get less done."
"Dear Agile, I’m Tired of Pretending (2018)",couchand,"on July 1, 2019","One of the most useful segments of the article:> So find a good booklist. Follow some good blogs. Here’s a start: If you haven’t read Sense & Respond, Lean Enterprise, A Seat at the Table, and Everyone Is a Change Agent, I suggest you do so pronto. Your leaders too.I'd add Peopleware to that list.> Start reading posts by John Cutler, Melissa Perri, Bob Marshall, Allen Holub, Laura Klein, Erika Hall, Neil Killick, and branch out from there.Anyone care to add their own handful of books and bloggers to these recommendations?"
"Dear Agile, I’m Tired of Pretending (2018)",0xbadcafebee,"on July 1, 2019","> let’s stop pretending Agile was some sort of cure allBut we won't. That's why snake oil salesmen were so effective: we want to believe in the cure-all. No matter how often you chastise, people'll keep buying it, because they're aspirational. They want there to be greener grass on the other side, and they're willing to try anything to find it.The business doesn't actually care about Agile at all. It just has heard of the term and realized it has something to do with getting work done better. So leadership will say things like ""We're an Agile organization now"", not having the faintest idea what that means. A snake oil salesman doesn't need to know how snake oil works; he only needs to know what it promises, and how to sell it.You can have the perfect software development methodology and people will still do it wrong. But if everyone has the same goal in mind, is highly motivated, and is willing to cross aisles to work with other people to do the best job possible, a methodology will naturally arise. Self-motivating humans can get some crazy shit done. The best working organizations I've ever seen followed no methodology. They just did what was needed to keep a site running well and making money, and it was kind of wonderous."
"Dear Agile, I’m Tired of Pretending (2018)",zug_zug,"on July 1, 2019","I think this is one of the most realistic responses here.I think it's in most party's self-interest to keep playing the ""agile panacea"" game.1. Salesman sells something that doesn't exist, pats self on back2. Engineers asked to build integration/features on arbitrary timeline3. Doesn't happen, everybody unhappy4. Scapegoat needed. Says we didn't agile right. Project Manager hired / Deck of Fibonacci cards bought.5. Go back to 1"
"Dear Agile, I’m Tired of Pretending (2018)",giglamesh,"on July 2, 2019","People complain endlessly about snake oil, but honestly, have you ever heard a creaky snake?"
"Dear Agile, I’m Tired of Pretending (2018)",tetha,"on July 1, 2019","I'm currently experiencing this, and especially the whole delivery vs discovery, knows vs unknowns and their impacts on estimations. It's quite interesting, especially how differently you have to handle delivery vs discovery projects.Basically, my team consists of some devops engineers mostly working on maintaining and extending the config management, and some other technical consultants who deliver and execute projects, ideally fully standardized.For the standard delivery projects, it's extremely valuable to hammer the scope down into a precisely known constant and track the time spent to implement specific parts, as well as the delays incurred for different reasons. This allows for a strong, deliberate optimization of execution time with a measurable, predictable business impact as well as a reliable estimation of these tasks.Discovery projects on the other hand? Yeah. We're pretty good at giving a lower bound for the time necessary by tracking similar tasks in a job. Extending a database entity is going to take a roughly similar time each time. Packaging, downloading and extracting binaries isn't going to differ that much in time from the last 3 times we did that. If you can identify a bunch of similar tasks you've done some time ago already, you can give a lower bound - ""The tasks we consider familiar will take about 2 weeks"".But after that? Who knows. At that point we're rather estimating by asking: When do you stop feeling silly about it? Do you need a year to do this? A month? Two weeks? A week? A day? So usually we hand our project managers something like ""This will take 2 weeks we know, plus 3ish weeks we don't know""."
"Dear Agile, I’m Tired of Pretending (2018)",karmakaze,"on July 1, 2019","I wish the post visited each of the principles. I can't find one I disagree with. It's all in the interpretation and implementation. Agile for me is not a single methodology that you develop. It's about refining and redefining processes that work for you team and org.Principles behind the Agile ManifestoWe follow these principles:Our highest priority is to satisfy the customer
through early and continuous delivery
of valuable software.Welcome changing requirements, even late in 
development. Agile processes harness change for 
the customer's competitive advantage.Deliver working software frequently, from a 
couple of weeks to a couple of months, with a 
preference to the shorter timescale.Business people and developers must work 
together daily throughout the project.Build projects around motivated individuals. 
Give them the environment and support they need, 
and trust them to get the job done.The most efficient and effective method of 
conveying information to and within a development 
team is face-to-face conversation.Working software is the primary measure of progress.Agile processes promote sustainable development. 
The sponsors, developers, and users should be able 
to maintain a constant pace indefinitely.Continuous attention to technical excellence 
and good design enhances agility.Simplicity--the art of maximizing the amount 
of work not done--is essential.The best architectures, requirements, and designs 
emerge from self-organizing teams.At regular intervals, the team reflects on how 
to become more effective, then tunes and adjusts 
its behavior accordingly."
"Dear Agile, I’m Tired of Pretending (2018)",_lx4l,"on July 1, 2019","Most of my complaints about agile have centered around estimates. I'm of the opinion that anyone claiming to give accurate estimates for software development is a liar.But I would like to see an organization that only had the team lead give estimations. This would remove the temptation on individual team members to size too large and fill the time, while also keeping management happy that they're receiving estimates for tasks they requested. Measuring throughput would immediately become a lot more natural since team members wouldn't fall into the trap of ""When a measure becomes a target, it ceases to be a good measure.""I was actually just rejected from a job I applied to since I  voiced a few small concerns with agile/scrum in the interview. My friend that joined that company recently reported he was doing maybe 10% of the work he and I were doing before he left my team. Even though I aced the technical portion they didn't want to risk hiring me since I asked their willingness to flex the rules of scrum."
"Dear Agile, I’m Tired of Pretending (2018)",bpyne,"on July 1, 2019","Organizations have to find their own way of working. It's going to change based on the size of the organization, its goals, and its people. With the exception of 1.5 years in a software company, most of my organizations have been internal IT. What I find is that user areas, who initiate projects with us, often don't have a clear view of what they want but think it's going to help the organization. Our job is to build models quickly so that they can validate an idea. Only after iterating through a few models can they reliably say the benefit/cost of the idea.A very good engineer within my organization said to me, ""Our job is to get something in front of them quickly so they can figure out what they don't want."" Our successful projects have been ones in which we kept to this maxim.I think this is what the author was trying to say but I had a hard time following his writing style."
"Dear Agile, I’m Tired of Pretending (2018)",mizchief2,"on July 1, 2019","The whole point of Agile is to force the entire organization to recognize the fact that we don't know how long it will take to crate a satisfactory product. That doesn't mean just dev time but also figuring out what you want it to actually do throughout the process.Instead of thinking you can write a perfect requirements document, then can just design and build it (waterfall) doesn't work.The idea that you can have any sort of meaningful estimate even when you don't have perfect requirements is insane. Having an estimate with perfect requirements doesn't even work.The most effectivly analogy I've used lately is: ""Take your car to a mechanic and say ""My car is making a funny noise, how long will it take to fix?"" and see what kind of response you get"""
"Dear Agile, I’m Tired of Pretending (2018)",jnwatson,"on July 1, 2019","In the same way that software is eating the world, software management is eating traditional company management.  Software projects are getting more important, sometimes centrally important to the future viability to more and more companies that aren't traditionally software oriented.  Software projects are moving up the stack so they touch every part of an organization.Agile is being blamed for problems that are really organizational, company-wide issues that a software team has to deal with because they now are central to how everything runs.  The author's suggest to read more general business/organizational management type books is apropos, because the overall goal is agility of the entire organization, not just the software team."
"Dear Agile, I’m Tired of Pretending (2018)",btilly,"on July 1, 2019","Software development has some fundamental challenges that have been faced since the start, and always will.  Understanding them matters.  Here are some of the big ones.1. Developers need to communicate with each other.  A lot.  This takes time.  The amount of time goes up non-linearly with the size of the team.  (The Mythical Man-Month claims a scaling law of n^2.)2. Adding process + documentation of various kinds can turn that from unbounded time spent speaking to a large but bounded written effort.3. Nobody is good at predicting schedules.4. Good news travels, bad news doesn't (until the last moment).The traditional solution was to solve #1 with #2, put a lot of effort into schedules for #3, and get blindsided over and over again by #4.  The average result was that the average delivered software project took over 2x what was estimated, cost over 2x, and was delivered with under half the promised features.  But, no matter how delayed, usually didn't start slipping the promised deadline until about 2 weeks before the first official release deadline.  And these were the success stories, since most software projects never really got delivered.What Agile opened up was the perspective that there were other approaches possible.  For example we can solve #1 by having small teams, which makes #2 unnecessary, solve #3 by making projects small enough to not need good prediction, which creates a feedback loop to avoid #4.  And that is not the only valid tradeoff.But this is not a one size fits all.  Real world data shows that a team hits peak throughput at 5-8 people, declines, and doesn't get back to the same overall throughput until 20+.  (After which it is almost linear, but with much lower individual productivity.)  The teams as drawn on the org chart don't matter.  The teams as they actually interact, do.If you understand your options, and understand the tradeoffs, you can figure out how to customize the right solution to the people/organization.  If you don't understand the tradeoffs, the best that you can do is blindly copy what worked somewhere else and pray that you got it right.  And if it turns out that you didn't, develop superstitions about what you should have done instead."
"Dear Agile, I’m Tired of Pretending (2018)",chiefalchemist,"on July 1, 2019","> ""So let’s get on board with continuous learning, and let’s stop pretending Agile was some sort of cure all.""Did anyone - who has seen shiney new panaceas come and go - believe it was a cure all? What it is, like MVP, is a way to mitigate risk. It doesn't eliminate risk. It can only mitigate it.Furthermore, it still boils down to team and people. No tool will save a dysfunctional team. The key isn't the tool. The key is the key agreeing on the tool, and sticking to it. That is, tool is not a proxy for deep and solid team work."
"Dear Agile, I’m Tired of Pretending (2018)",awinter-py,"on July 1, 2019","IMO focusing more on systems than people in management is a mistake.To the extent your work isn't repetitive, the only job process can do is set a cadence on communication & decisions. Yes 2-week scrum does this but in my experience it distracts companies from the real goal of management -- attaching subject matter experts to projects, i.e. concentrating time & resources towards a goal.Process can get rid of bad people and share around your best people, but unless you have an assembly line, beware of any other claim."
"Dear Agile, I’m Tired of Pretending (2018)",rb808,"on July 1, 2019","I think most of the people who wrote the agile manifesto said ""Agile"" been warped into something they don't agree with. Its supposed to empower teams, not enforced from on high to increase pressure on teams.Heres's a good one by Dave Thomas. A quote: ""Agile is an adjective not a noun"". 
https://www.youtube.com/watch?v=a-BOSpxYJ9M"
"Dear Agile, I’m Tired of Pretending (2018)",acbabis,"on July 1, 2019","""Agile transformations"" are bad, but I still think agile itself is fine. Teams of self-organized, competent developers tend naturally toward agile-like practices. I've seen agile's story-centric model of development help new developers grow by giving them responsibility for specific, testable units of work.As a lot of people have already said, the problems arise when managers expect agile to give them software on a timeline."
"Dear Agile, I’m Tired of Pretending (2018)",mixmastamyk,"on July 1, 2019","So, Agile solved one problem when requirements are less than clear.  Small batch sizes improve responsiveness, costing a bit of throughput.  Like the old kernel HZ setting.  Now you've got 99 problems, and responsiveness ain't one.Yet folks expect Agile to solve everything for some reason, and forget all the other issues around bags of meat working together.  Those continue to need handling and still get out of control at times."
"Dear Agile, I’m Tired of Pretending (2018)",petemill,"on July 1, 2019","It is a balance: We don't know how long something we've never done before is going to take, and at the same time, we often need some time boundaries so we don't go off tangent building some wildly ambitious re-write of the world.Perhsps the qustion we ask in projects shouldn't be ""how long will this take?"" but: ""How long do you want to spend on this problem?""."
"Dear Agile, I’m Tired of Pretending (2018)",akkartik,"on July 1, 2019","""Stop unfairly putting dev under a microscope and letting everyone else hide in a black box. Why aren’t we just as concerned with how strategy teams operate? Or how legacy architects are constraints in the system?""Are other ladders in an organization not subject to performance review?! Managers? PMs?"
"Dear Agile, I’m Tired of Pretending (2018)",outworlder,"on July 1, 2019",They usually don't get _anywhere near_ as much scrutiny.Dev gets performance reviews _plus_ the microscope.
"Dear Agile, I’m Tired of Pretending (2018)",thrownaway954,"on July 1, 2019","I just always double what I think it will take. I've been doing software now for 20 years and I have NEVER seen something come in on time. If I think it will take a month, I say it will take two. This has saved me more than I can count since I pad for the unseen circumstances that will occur."
"Dear Agile, I’m Tired of Pretending (2018)",_pmf_,"on July 1, 2019",But think of your manager. He cannot stop pretending because that's all he has.
"Dear Agile, I’m Tired of Pretending (2018)",ltbarcly3,"on July 1, 2019","It's almost like there is ""No Silver Bullet"".https://en.wikipedia.org/wiki/No_Silver_Bullet"
"Dear Agile, I’m Tired of Pretending (2018)",amai,"on July 1, 2019","Agile works since 1947 at Toyota: 
https://en.m.wikipedia.org/wiki/The_Toyota_Way"
"Dear Agile, I’m Tired of Pretending (2018)",perfunctory,"on July 1, 2019","The root cause of the problem is that workplace is inherently undemocratic. While we live in democratic societies, we work in feudal organizations. Unless we fix that, nothing will change."
"Dear Agile, I’m Tired of Pretending (2018)",bassman9000,"on July 2, 2019","*And while we’re at it, we’ve got to stop treating dev teams like they work in a factory.""Beautiful"
"Dear Agile, I’m Tired of Pretending (2018)",LeonigMig,"on July 1, 2019","Great rhetorically, not sure how comprehensible the logic was."
"Dear Agile, I’m Tired of Pretending (2018)",mratsim,"on July 1, 2019",Pardon the interruption ...
"Dear Agile, I’m Tired of Pretending (2018)",ChrisCinelli,"on July 2, 2019","“I estimate that 75% of those organizations using Scrum will not succeed in getting the benefits that they hope for from it . . . Scrum is a very simple framework within which the “game” of complex product development is played. Scrum exposes every inadequacy or dysfunction within an organization’s product and system development practices. The intention of Scrum is to make them transparent so the organization can fix them. Unfortunately, many organizations change Scrum to accommodate the inadequacies or dysfunctions instead of solving them.”This was Ken Schwaber, co-creator of Scrum. 10 years ago.
Ten years after, things did not get a lot better for big corporations that were born with leaders used to waterfall.I agree with almost everything in this article and I completely agree with what Tootie wrote above: ""The fundamental problem that drives most agile failures isn't in the team's execution, it's in the business' expectations. One side is signed up for incremental delivery, and one side is set up for a fixed scope and deadline and the result is misery.""As the article rightly noticed being Agile is not just building faster. It is delivering ""value faster"". That also means: ""do not build what does not need to be built"" and every 2 weeks be willing to scratch what you have worked on. Instead in most of the big companies the business people present shiny objects to the leadership and their goals is to build those shiny objects. Nobody wants to say: ""We were wrong"". The result is a few projects were people worked for 1 year and then the project is abandon. Even if the idea was good, nobody wants to work on little improvements.It seems that Agile, Scrum, and most of classic agile lingo have a bad connotation for most of the people in these days. Some (over) simplifications that were made to make Agile  easier to adopt ended up making things worse.People in big corporations are used to the ""flavor of the month"" Most of the people really do not look for a revolutions there. They are just looking to how they can seem smart to impress their bosses and being promoted. That how Scrum got in. And that is why it will never realize its full potential  there. They do not want to change how they think and how they do things.I run a pretty successful team inside a bigger organization. I wanted to use story points. Start from scratch and have the team get a sense for what 1 point is. And my boss really wanted us to use story points. He only had one requirement we had to use this equation 1 story point = 1/2 day of work...Trying to explain him that one of the reason you use story points in the first place is to stay away from time did not go anywhere. All the other teams were using that equation and we could not be the only team that was not to using it.Frankly speaking, I think it is hard to work at the ""inter-team"" level if you cannot use the same unit. That's why in Agile you want truly autonomous teams. But big organization were not organized in that way. So you need to re-organize the company in a different way... but assuming there is the desire, who is going to drive that change? Who is going to take the risk of changing something that work in some way in a way that is not going to work too well for a few months?In my humble opinion, it is almost impossible to change an existing a waterfall organization and make Agile work inside of it. Only a leader with a lot of trust by everybody in the company and a lot of courage may be able to make it work.Most of the people that hate Scrum, Kanban or other flavor of Agile had experience with a ""Cargo Cult"" Agile preached in big companies and usually end up thinking that Agile is sooo screwed up. A big corporation will usually embrace embracing some things that usually really help (ex: standup meetings) and change a ton of other things that will make things worse.You like the Agile mindset, you are going to be a lot more successful if you start from scratch with new young people or people that really want to commit to make things great.For a new organization is easy to start with a simple ""Agile template"" and make sure that the team is really onboard with a continuous improvement mindset. Keeping regular retrospectives will make things evolve quickly in the right way."
"Dear Agile, I’m Tired of Pretending (2018)",sureaboutthis,"on July 2, 2019",People get far more done if they spend less time labeling things and thinking there's a new canned technique that's better than what's been done before.
"Dear Agile, I’m Tired of Pretending (2018)",goto11,"on July 1, 2019","I have experienced Agile being quite successful. Maybe that is an uncommon experience, but it is certainly possible."
"Dear Agile, I’m Tired of Pretending (2018)",tyingq,"on July 1, 2019","Curious if you had success with ""generally following the Agile manifesto"", or some specific framework like XP, Scrum, Scaled Agile, etc."
"Dear Agile, I’m Tired of Pretending (2018)",goto11,"on July 2, 2019","I have tried Scrum. I have also tried various pick-and-chose hybrid approaches which were generally less successful. For example having scrum-like sprints and daily stand-up, but still having a fixed feature set and fixed deadline. This doesn't really work. (You can have deadlines in Scrum, and you can have fixed feature set, but you cant have both!) This happens if management does not really buy into the process. The place where scrum worked was because management was willing and able to try something new and willing to learn.For what it is worth, I have also seen classic waterfall be successful. But I have also seen several big-scale disasters with waterfall, and in my experience waterfall carry much larger risk and is much harder to salvage when it goes off track."
The SAFe Delusion,twawaaay,"on Oct 29, 2022","I wasn't aware of SAFe until one new manager got our director to loose his head for it and institute it in all teams.It was a total disaster.The idea of Agile is for each team to be responsible to improve their processes. Because improvement loops involving higher management are taking forever to complete and because each team has its own needs. ""Agile"" (quotes intentional) as practiced today is bad enough -- teams are not really improving their process, only implementing something taken from a book.SAFe is taking it one step further by absolutely obliterating team's ability to influence the process.At least with ""standard Agile"" it was possible for some teams to do the right thing, as long as they had a manager that understood what Agile really is.With SAFe that was gone.I was told that we can't even modify our t-shirt sizing because ""It has to be standardised, otherwise there would be too much chaos. BTW, we are definitely not creating a new request form to change t-shirt sizes in Jira""Forget about changing any other part of the project. We had a bunch of testers and business analysts which did absolutely nothing but had to stay on the team because they were required in the process by higher management. We did not need them. I spent time hiring people who could do the work from discussing requirements with the business people through design, implementation up to deploying it to prod, but that did not matter.Talk about crazy projects..."
The SAFe Delusion,closeparen,"on Oct 29, 2022","The middle manager brain has ""consistency"" as a terminal value. Being responsible for more activity than they can hope to substantively understand, they ""need"" systems that make it all look the same so it can be measured, summarized, compared, etc. Otherwise they get the intuitive sense that it's all chaos and mayhem and can't possibly be working well. It's the same sort of thing as an architect being mad that different services have different internal architectures, tech stacks, code styles.It's true that such differences make it unreasonably difficult to understand or manage things at the abstraction level of the middle manager or architect's portfolio. But it misses the question of how and whether things should be managed from that level at all. Often you have someone stepping into a working bottoms-up emergent order (like the internet, or a market economy) hamfistedly trying to implement top-down central planning control. SAFe is a tool of choice for these attempts.The radicalism of ""true agile"" is not about the duration of the planning cycle, but about the level of autonomy and control vested way down in the leaves of an org chart."
The SAFe Delusion,twawaaay,"on Oct 29, 2022","I think the issue is that middle management does not yet have ""true"" leadership ability. Rather than getting people to do what they want, they are trying to build systems to achieve the same. Too bad they don't understand you can't force people to do things. Not knowing how to actually manage at larger scale, they are trying to solve the problem the same way that worked for them at small scale and just scale it up.The issue with the place I worked and described was the director tried to build systems to ""ensure"" everything was organised. He could not conceive this could actually be bad. That his job was actually to focus on building environment, making sure lower levels have everything they need to be able to build more efficient systems at small scale.He was a low level manager promoted too fast and missed the fact that his job changed."
The SAFe Delusion,cdavid,"on Oct 30, 2022","One issue is visibility. If things are perceived as not going as well as they should, and there is no visibility, it is extremely difficult for any leader to defend their group.To focus on building the environment, there are broadly two situations that can happen. 1. your director has broadly speaking total support from his leadership,  and the leadership will be ""patient"" and trust the director to do things. 2. there is no such support, you better deliver on your KPI or you're next.In most cases, it is in between 1 and 2 of course. If it is not mostly 1., there the director will not be able to do much without understanding the delivery. If your director needs to ""push back"" to help foster a good environment, they will need some ammunitions, which will likely require commitments (in time, KPI, etc.).To be honest, it is really hard. I myself recently became director, taking over teams that were self-organized but had high attrition. ""Do I enforce too much / not enough process"" is a question I ask myself very regularly."
The SAFe Delusion,rab-the-goat,"on Oct 30, 2022","This comment gets right to the root of the problem. People standing above emergent order looking down (typically) want to control it, but they'll never have the knowledge or bandwidth to control it well. So we play out Soviet economics over and over again in the corporate world."
The SAFe Delusion,Terretta,"on Oct 30, 2022","Big difference between consistency* and rhythm.  Teams should play jazz with other teams.* “A foolish consistency is the hobgoblin of little minds, adored by little statesmen..."" — Emerson"
The SAFe Delusion,acjohnson55,"on Oct 30, 2022","That's a failure mode of middle management, but it's not a problem inherent to middle managers. Good middle managers know that every team has its own best ways of working, just as a good manager tailors their actions to individual reports' needs."
The SAFe Delusion,bane,"on Oct 29, 2022","SAFe seems to be a bit like ""internet scale"", it's designed for very large organizations building very large single software solutions. Most organizations wildly overestimate their size and the size of their solutions. A Microsoft Office release probably can benefit from SAFe, an update to an auth microservice maintained part/time by a team of .75 FTE doesn't.SAFe seems to sort of be a micro-waterfall approach inspired by Conway's law [1]. It build massive communication and coordination teams so that this gets reflected into short-term development waterfalls that produce software that mirrors the system that managed it. But this team needs to be dwarfed by the development effort they are trying to push forward or they'll end up dominating all of the activities with largely useless communication and coordination activities resulting in very slow forward software movement, confused goals and priorities, and overstaffing of projects.Example: I once ran a team that was developing some internal tools for a large org, but we were outside of the main SAFe effort. At one point we became dependent on some service the SAFe effort was going to produce. It took 60 people 3 years to not produce a correctly working service. Exhausted with this, I finally just had 1 person build the service we needed as a stopgap. She spent 3 months building it with part-time support from one other engineer for a couple weeks. More than 3 years later that is the service that's still running and the SAFe effort never did manage to get a properly working solution out the door. I can think of half a dozen similar examples where the parallel effort by a smaller team with less organizational overhead radically outperformed the giant SAFe team -- and they did it mostly by just ad hoc communication channels between the small teams.1 - https://en.wikipedia.org/wiki/Conway's_law"
The SAFe Delusion,_fat_santa,"on Oct 29, 2022","I've worked in a number of large orgs that have used SAFe and it always seems that you end up spending more time on the bureaucracy than actually writing any code.My team just finished a ""Release Train"" where we supposably adding in a massive feature from a legacy app that required a full team of developers. The team could have probably been half the size and we could have most likely finished it in half the time, what slowed down our velocity so much was all the bureaucracy that SAFe created around doing the most simple piece of work.The company says that need SAFe to properly track the work that is happening, but they place such a massive reporting burden on the people doing the actual work that things crawl at a snails pace. I once had to push a bug fix for which I had to create a JIRA story. I spent 20 minutes creating the story and attaching all the correct labels, 5 minutes implementing the fix and opening a PR, and then another 15 minutes fighting the time tracker to log the 5 minutes that I worked on the story."
The SAFe Delusion,jffhn,"on Oct 29, 2022",">It took 60 people 3 years to not produce a correctly working service. [...] She spent 3 months building it.Using 60 people to produce something 1 person could do, is like cutting this person's brain in 60 parts and connecting them with 1Hz data links.V. Lextrait (CTO of Amadeus at the time if I recall properly) had a rule of only splitting a piece of work between multiple developpers if it couldn't fit in the otherwise single developper's head."
The SAFe Delusion,quickthrower2,"on Oct 29, 2022","It is worse than that. Try to get 60 people to pick up one spoon for example. The coordination overhead and arguing “which spoon”
and “we should consider picking up a knife!” means it is easier
for one person.Otoh, searching for a criminal in the woods is embarrassingly parallelizable and would benefit from a 60 search party (forget dogs in this imperfect analogy).Most software dev like the spoon is not super parallelizable. But probably more amenable to a single person working on each project than developers think."
The SAFe Delusion,lodovic,"on Oct 30, 2022","To me, it feels like SAFe was specifically designed to insert some expensive consultants between the developers to profit off software development without doing much actual work.Instead of working together with developers to solve a problem we now have to use these rigid structures, release trains, system teams, and sync meetings, to do our work. If I want to approach a developer in a different team I'm supposed to go through two scrum masters, and setup multiple meetings with clueless people, this is madness.Instead of using decades of professional developer experience to make strategic decisions we now get these complex decision processes such as WSJF, designed by a group of MBAs. It only seems to complicate things.And we have an army of clueless but very expensive people (scrum masters and ""release train engineers"" with minimal experience) who have been brainwashed to think that despite minimal training and experience they have some SAFe gospel to spread, they are the one source of wisdom, and developers are just a nuisance standing in their way."
The SAFe Delusion,steve1977,"on Oct 31, 2022","> To me, it feels like SAFe was specifically designed to insert some expensive consultants between the developers to profit off software development without doing much actual work.That's exactly what it is. And that applies to many methodologies and management practices. In our company there are whole layers of management that are totally useless and unnecessary."
The SAFe Delusion,RajT88,"on Oct 29, 2022","I took a SAFe training class once, and they explained that Wal-Mart does this sort of exercise quarterly.  Rents out a warehouse, flies in all the dev managers and leads, and does sprint planning using all the boards they have stood up everywhere.I am not commenting on how effective it was for them of course.  It seemed to me to be a bit overkill for the size of the company I was in (about 5k people)."
The SAFe Delusion,coredog64,"on Oct 29, 2022","I worked at a company that did something similar.  IT was west coast and business stakeholders were east coast.  Twice a year the business stakeholders would come out to present the current landscape, work out their roadmap, and maybe even focus on detailed requirements for immediate stories.  At the end, the business stakeholders would all get in a room and present their roadmaps.It worked pretty well.  A few weeks of F2F with business folks built up some rapport if nothing else."
The SAFe Delusion,com,"on Oct 30, 2022","I’ve seen this work really well in a successful globally-distributed business with a few thousand employees, the majority being devs. The outcomes of building rapport between people who work intensely with each other a few weeks a year is hard to beat, except maybe by the impact of getting whole of business alignment including bigger and bigger groups inside the magic circle.A couple of times a year, commercial, product and tech folks would run sort of iterative challenge/ opportunity/ response/ scoping exercises within their product area, then run a couple cross-area starting with most adjacent and ending at whole business. There’d be a roadshow cycle in major locations and online for all staff.A big investment of time, but a lot of the priority and coordination issues, as well as unexploded bombs would come out of the woodwork.For me it was interesting to see how this kind of regular big investment in time meant that the whole org ran very lean and very client- and market-responsive."
The SAFe Delusion,cpeterso,"on Oct 30, 2022","Here's a 2018 GDC session about the game developer Bungie using ""big room planning"". Once a quarter, 300 people (40 dev teams) come together in one big room to collaboratively plan their next quarter's deliverables and sprints.https://www.youtube.com/watch?v=ndPyhgorOKY"
The SAFe Delusion,marcosdumay,"on Oct 29, 2022","Getting everybody together once in a long while, and synchronizing a ""what are you working on?"" is a good exercise.But only if that while is long."
The SAFe Delusion,jimmaswell,"on Oct 29, 2022","It's absolutely useless to me. I cannot possibly sit there for hours, listen to other teams drone on about things that have nothing to do with me, and be expected to retain any of it. I can barely tolerate the ""smaller"" weekly ones where I have to listen for my name to read my script I wrote about what I did last week, and I'm very thankful for work from home because for the super long company-wide bullshit meetings where I don't participate I can simply mute it."
The SAFe Delusion,quickthrower2,"on Oct 29, 2022",I am in two minds about leads only vs. everyone. Obviously both have advantages.
The SAFe Delusion,pieterr,"on Oct 30, 2022","""What one programmer can do in one month, two programmers can do in two months."" - Fred Brooks"
The SAFe Delusion,swagtricker,"on Oct 29, 2022","Don't forget the classic parody of SAFe which shows it as the overblown ""waterfall in agile clothing"" that it is: LAFABLE. https://www.lafable.com/"
The SAFe Delusion,ButterWashed,"on Oct 29, 2022","I'm currently a year into a role as Lead SRE in team working in SAFe.  We plan five 2 week sprints for which we immediately write off 50% of our time as ""BAU activities"" and the rest of our time is spent lurching from one deliverable to another in the hope we actually achieve something before we get ""re-prioritised"" yet another time.  It's not even SRE, it's 2nd line support and platform engineering.
I really have no idea how SAFe works or how it's meant to work, but everyone seems happy so long as I complete my JIRA tickets on time because that's what the users want."
The SAFe Delusion,ethbr0,"on Oct 29, 2022",I worked for a SAFe company like that once.Took a salary cut for another job.Haven't regretted the choice for a second: life's too short to waste one's talent in service to a bad employer.
The SAFe Delusion,BizarreByte,"on Oct 29, 2022","I don't know if we claim to use SAFe were I work, but this sounds very similar to my experience. It frustrates me to no end, but as a contractor I don't get a say and the full time employees seem to be okay with the status quo.I am constantly amazed that any working software comes out of such a process, but against all odds it does."
The SAFe Delusion,yborg,"on Oct 29, 2022","I was originally trained as a lad in classic waterfall and was a CMM auditor at one point - I got SAFe certification a few years ago and my overwhelming impression was that they had replicated all of the flaws of these methodologies, just with the word ""agile"" inserted wherever possible. I suppose that it is the final representation of the principle that any revolution becomes the new orthodoxy in a generation and ends up as ritualized as what preceded it."
The SAFe Delusion,onli,"on Oct 29, 2022","I thought Scrum would be more a candidate for that, when the rituals from there become useless orthodoxy. If (since) SAFe implementations are just waterfall with all its flaws rebranded, it's more the counter-revolution disguising itself."
The SAFe Delusion,roguecoder,"on Oct 29, 2022","As soon as people forgot that Agile was about organizing workers & having management trade its power for more-valuable software, it was basically doomed.Executives would rather give money to the people who promised that they could get the more-valuable software without giving up any of their power and control."
The SAFe Delusion,electrondood,"on Oct 29, 2022","At my last company we used SAFe and I was blown away at how effective it was. Once a quarter, we had a 3-day event in which the entire next 3 months were planned out, with dependencies between teams, with wiggle room/flexibility, by the end of the event.I understand this can depend on how well it's implemented, but in my experience I've never seen anything like it before or since."
The SAFe Delusion,JamesSwift,"on Oct 29, 2022","It sounds like you had a healthy org. The problem with most other orgs is that they do the same planning, with the same care and attention paid that yours did. But then 2-4 weeks after, everything that was discussed and agreed upon and planned around is upended when ""priorities changed"" or ""something else came up"" (i.e. the wind slightly blew). For whatever reason, they feel like they are making more effective planning decisions now, by the seat of their pants, than they did when literally everyone was in the same room and putting real thought into the whole thing.Can you tell I'm not a fan?"
The SAFe Delusion,sanderjd,"on Oct 30, 2022","It's funny because I have the opposite criticism. What I dislike is that when people discover things that need to be done, there is all this pressure to wait months to prioritize that work. Not very ""agile""! I already dislike the pressure not to work on things we didn't have a conversation about in a sprint planning meeting, and that's only a week or few. Detailed planning months ahead just doesn't click with me; it feels like guesswork and I don't like guesswork.You say ""for whatever reason"", people feel like they are making more effective prioritization decisions in the present than they did in the past, as if there isn't a good reason, but there is: there is more information about the present in the present than there was in the past.To me, if you aren't updating a plan in real time as information comes into view, then you're missing opportunities."
The SAFe Delusion,JamesSwift,"on Oct 30, 2022","Yes, something unexpected should change things. I'm not talking about those situations. The situations I'm describing are artificial. The only thing that changed in my scenario is people started getting antsy and playing politics to get their thing more attention than some other thing, both of which were discussed and prioritized in the very detailed all-hands I'm referring to. Or some higher-up asked about when something was going to be done and that spooked the product owner.In the size of org that does SAFe, I would argue the real ""unexpected"" priorities that come in and require shifting significantly are few, and likely regulatory. And if you are in that sort of business environment then that unexpected stuff is also theoretically accounted for in the PI planning!"
The SAFe Delusion,sanderjd,"on Oct 30, 2022","I think more different kinds of organizations have started doing SAFe than you think!I agree that both real priority shift / additional information based changes and also politically and paranoia motivated changes occur, but I don't think it's as straightforward or obvious how to differentiate one from the other as you seem to be implying. I'm sure many of the clear cut priority shifts based on new information to me have been the obvious politically or fear motivated changes to other people with different context than me.Personally, I just think a better solution is to prioritize detailed work immediately before it is done, whenever possible."
The SAFe Delusion,quickthrower2,"on Oct 29, 2022",If something else came up is not allowed it means you need a perfect plan that survives contact with reality. This is possible for short tasks perhaps but not an entire team for 90 days.If they have completely ignored company priorities that is bad but often it is some technical glitch has come up that moving a box 1px to the left really wasn’t as easy as first thought.
The SAFe Delusion,sanderjd,"on Oct 30, 2022","Yeah, ""company priorities"" is the level I like longer horizon planning to be at. ""It's important that we achieve X, Y, and Z in the next quarter"", with well thought out priorities and clear communication, then let teams figure out how to deliver."
The SAFe Delusion,hef19898,"on Oct 29, 2022","Why does that sound so awefully familiar? Even worse when you throw in good old re-inventing the wheel, not revise the decisions that should be and giving Agile coacjes and scrum masters more influence over the content of what should be delivered than the actual domain experts doing the work. I'll let you guess what role I have in all of that right now..."
The SAFe Delusion,ResearchCode,"on Oct 29, 2022",Imagine taking a two day course and then going into the office of a law firm or a hospital and micromanaging the staff. Tragic that software engineers put up with this.
The SAFe Delusion,kqr,"on Oct 29, 2022","> Once a quarter, we had a 3-day event in which the entire next 3 months were planned out,This is the part I don't understand. What sort of business are you in where you can actually meaningfully predict which will be the most valuable opportunities and ideas that will come your way in the next three months?"
The SAFe Delusion,mvdwoord,"on Oct 29, 2022","I would honestly like to reverse this question...What sort of business can't look three months ahead?! Seriously, updating business logic rules to catch a trend or adjust for changing external conditions, I understand. But for software development?!"
The SAFe Delusion,tikhonj,"on Oct 29, 2022","You can predict some things, sure—but there's a massive leap from that to planning ""the  entire next 3 months""!If you can get a bunch of people into a room and plan out what everyone on a software team is doing for the next three months, there's a pretty clear cap on how creative or adaptable the work can be. What is everyone doing for the rest of the quarter? ""Executing""? Just filling in the ""obvious"" implementation details to program exactly what they're told?"
The SAFe Delusion,brightball,"on Oct 30, 2022",I guarantee your product team has enough things that they want done to plan your next 3 years.Getting a clearer picture of the next 3 months should be a piece of cake. As a bonus once it’s planned you should get to focus without a sudden shift in priorities.
The SAFe Delusion,kqr,"on Oct 30, 2022","Oh the product team has good ideas for the next decade. The question is how many of them have they actually had a real chance to validate with real users in production? Close to zero, in my experience. That's one reason why you want to be able to change priorities quickly.(Note: quickly, not suddenly. Bad performance in market validation should never come as a complete surprise. It always slowly dawns on you over the course of days/weeks.)Another reason for changing priorities quickly is that the specification drawn by the product team happens to be technically very complex because it interacts in unforeseen ways with other functionality, and this is discovered early in implementation.Basically, in product development, you're constantly running into things that either provide less value than expected, or cost more than expected. That's when you should do something else instead.Once you have a great idea, yes, you should sink all of your effort and focus into that to get it to market quickly. But the idea is that if you start cautiously and change your mind early and often, you can actually implement the winners with blazing speed later without looking back."
The SAFe Delusion,hackerfromthefu,"on Oct 30, 2022",This goes out the window if your org does any sort of sales or strategic initiatives that weren't in view of the product people you're working with.Which is most orgs I've worked with.
The SAFe Delusion,marcinzm,"on Oct 29, 2022",Your team is working on a dozen features for the next three months. After looking through the code to start implementing one feature (4 weeks into the 3 months) the team realizes there is need to change another team's API. The other team already has all their time booked with feature. Cue a cascading set of slightly changing priorities. Now multiply that by every team in the company hitting something like this.
The SAFe Delusion,tonyarkles,"on Oct 29, 2022","> After looking through the code to start implementing one feature (4 weeks into the 3 months) the team realizes there is need to change another team's API.On the estimation side of things, I've worked with teams that do estimates in concrete hours, days, weeks, etc, and teams that work in abstract feature points, bushels, etc. The number one factor for whether the estimates are successful is the time spent before providing the estimate to figure out what the actual scope of the task is. If you've planned and estimated a task and didn't discover the cross-team dependency during that planning, you've failed at planning. It happens. It sucks. It should be very rare.I've worked with teams where ""sprint planning"" every two weeks/whatever cadence is basically an entire engineering team getting pulled into a room for a morning, the manager/scrum-master/whatever pulls up their backlog and starts picking tasks off the top. The team is expected to provide estimate efforts on the fly in the meeting, and then expected to spend the next two weeks perfectly executing on the work they've committed to. How in the hell is a process like that going to allow people to really think through the issues that are going to arise (like needing an API change on another team, or even verifying that a 3rd-party API is compatible with what the task is trying to achieve)? These teams constantly run into the issue you've described and it absolutely sucks for everyone (the business, the managers, the developers), but the process just keeps being adhered to. Maybe in the post-mortem someone will say ""we need to do a bit more analysis before doing estimates"", and the outcome is that during the next sprint planning session the SM will say ""HAVE YOU REALLY REALLY REALLY THOUGHT THIS THROUGH?"" but... they're still doing analysis on 12 new tasks blind..."
The SAFe Delusion,theptip,"on Oct 29, 2022","Dream scenario - in the planning session note you depend on an external API. Prioritize an early spike/prototype of the feature to flush out dependency risks. Discuss relative priorities with the other team & schedule the work to modify their service.This requires teams to have slack/contingency time in their plans. That’s important.Of course, there will always be situations where you don’t spot a dependency until you start coding. But in the loosely-coupled mode, that is what happens every time you have a dependency on someone else, ie you have no opportunity to spot in advance. Worth some planning exercise you get an opportunity to spot the dependency and deal with it gracefully, even if you don’t catch 100%.But yeah, if there is no benefit to spotting early because the other team doesn’t have slack for the Q, then less point in planning in advance."
The SAFe Delusion,drran,"on Oct 30, 2022","It looks like risk planning was not done by your project manager. Risk planing includes risk prediction, calculation of possible time and/or monetary damage, risk reduction. For example, if we see that Foo can cause problem in near future with probability of 10% and can delay project with 5 members by 3-40 days, then average risk of lose is `0.1 * (40 - 3)/2 * 5 = 9.25` man-days. If we can reduce risk probability by factor of 10 by spending 2-man days of work early (1 man day of project manager + 1 man-day of a developer), then we will reduce cost to `0.01 * (40 - 3)/2 * 5 + 2 = 2.925` man-days, so 6.325 man-days are saved."
The SAFe Delusion,roguecoder,"on Oct 29, 2022",Collective code ownership is a prerequisite to most Agile processes for this very reason.
The SAFe Delusion,marcinzm,"on Oct 29, 2022",In my experience most companies specialize teams to various extents which makes true collective ownership difficult. An iOS team is likely going to have difficulty dealing with the ML code. This becomes even worse if the change is complex or touches the domain specific patterns.
The SAFe Delusion,drran,"on Oct 30, 2022","It's known as «the bus problem». Peer review is used to address this, to make someone else a bit more familiar with your code, so he will be able to help you when you are overwhelmed and need help (or when you hit by a bus). Also, built-in documentation, run books, guides, and automated test cases are very helpful for those, who are not familiar with your code base. It reduces job security tough. (I hit by that multiple times, because, for management, it feels like good developers and good administrators are doing nothing or constantly pick-up very easy tasks to do)."
The SAFe Delusion,manmal,"on Oct 30, 2022","But the iOS team can’t know everything about the server API, the ops team has no control over App Store release processes, iOS team usually has no push permissions for Android etcDifferent code bases in the org might even have different process certifications they have to follow, eg in medical software or some other industries. In those cases it’s downright impossible/illegal to give every team access to every repo.SAFe is supposed to solve this. I haven’t heard anything good come out of it though so far, so I find this thread very interesting."
The SAFe Delusion,kqr,"on Oct 29, 2022","Sure! I often start to make things which seem like a good idea at the time but after 1--8 weeks of A/B testing (or other verification methods) it turns out the market was not what I thought and it would be a waste of time to pour more work into it.At that point I can either ""stick to the 3 month plan"" and do something which I know has at best no value, or... try something else."
The SAFe Delusion,tonyarkles,"on Oct 29, 2022","> What sort of business are you in where you can actually meaningfully predict which will be the most valuable opportunities and ideas that will come your way in the next three months?I've got one foot in the pure software world and one foot in electronics hardware. I've worked with a number of startups, and some larger organizations and government.The SaaS startup world is the exception here, not the rule. Virtually any business that is not ""we're ready to pivot on a dime"" SaaS should be able to plan 3 months out. Generally speaking, any kind of strategic initiative is probably going to take longer than that to roll out. If there's any kind of manufacturing involved then design, V&V, manufacturing, and QA are likely going to be running on at least 3 month cycles.Sometimes things do pop up and it makes strategic sense to do a mid-quarter tactical shift to attack an extremely valuable lead, but that should be exceptional. Even in the SaaS world, people tend to jump on new ""valuable opportunities"" without really sitting back and assessing the cost of delaying everything else. This kind of organizational ADHD (one board member at a company called it ""chasing butterflies"") tends to result in a bunch of half-finished projects/products that all could have been valuable in their own right if they'd been run to completion instead of abandoned in favour of the next ""golden opportunity""."
The SAFe Delusion,ThalesX,"on Oct 29, 2022","Three months!? Is this the stability we expect from companies in our day and age? I would think it's a lost company, one that couldn't somewhat predict what the next three months are going to look like."
The SAFe Delusion,pflenker,"on Oct 29, 2022",Just look back 3 month and assess how many of the things that happened were predictable (keeping in mind the fact that hindsight is 20/20). I wager every company in the world was affected by the world wide  changes right now. Those who cling to plans are at disadvantage against those who have the ability to quickly adapt to the change.
The SAFe Delusion,hef19898,"on Oct 29, 2022","Just throwing things to the wall and see what sticks is not agility, nor is it just mindlessly running after any random car like a dog chasing the mail man."
The SAFe Delusion,tikhonj,"on Oct 29, 2022","Who said anything about ""mindless""? Just because work wasn't planned in detail in advance does not make it mindless—the people actually doing the work make creative, nuanced decisions as they're working. Not pushing a top-down, up-front plan gives people more room for careful nuanced thought.That isn't ""throwing things to the wall"" or ""mindlessly running around"", that's trusting a team of professionals to make effective creative decisions."
The SAFe Delusion,ThalesX,"on Oct 30, 2022",Who said anything about detailed planning? You’re throwing this in and then using it as a lever to push an engineering led approach. There is no such argument in this thread.There is however the argument of whether companies should look ahead for more than three months. And brilliant and trustable professionals don’t change my assessment that they should.
The SAFe Delusion,hef19898,"on Oct 29, 2022","I agree, if you have team of experienced professionals tgat is. If not, well, stuff to the wall it is. If wrapped in sometjing something agile, at least it looks good."
The SAFe Delusion,roguecoder,"on Oct 29, 2022","Trying to guess the future of complex systems is an exercise in hubris.Success is far more likely if you decide on a goal, and then build feedback loops that let you learn. And in the internet age a feedback loop of a month is painfully slow, never mind three."
The SAFe Delusion,ThalesX,"on Oct 30, 2022",Is that goal for next week? Two weeks? My argument was that three months is too little for any sort of company strategy. We’re talking about a financial quarter. You don’t even have the time to measure your decisions.
The SAFe Delusion,hef19898,"on Oct 29, 2022","Not everything is a consumer facing app, you know?"
The SAFe Delusion,SpicyLemonZest,"on Oct 29, 2022","I'm pretty skeptical of this kind of thing even for enterprise software. I can imagine scenarios where it's relevant - if you're planning to release Disney+ in 6 months, yeah, you'd better coordinate pretty tightly to make sure you're not missing some key dependency when you flip the switch. But I've seen multiple incredibly successful enterprise products developed through the ""throwing things to the wall and see what sticks"" approach."
The SAFe Delusion,kgwgk,"on Oct 29, 2022","""In preparing for battle I have always found that plans are useless, but planning is indispensable."""
The SAFe Delusion,ThalesX,"on Oct 30, 2022","> Just look back 3 month and assess how many of the things that happened were predictable (keeping in mind the fact that hindsight is 20/20).The company I work for hasn’t changed a single procedure or milestone. Neither have my clients. I am also not talking about predicting the world, but of predicting an internal kitchen.This is just n = 1 but I’ve never seen a company that does it’s strategic planning in detached 2 week sprints.If anything, if any sort of coherence exists I’d say that the previous sprint, the current sprint and the next sprint should have an understandable connection, and then we are already talking about a month and a half.> I wager every company in the world was affected by the world wide changes right now.Affected? Perhaps. Derailed? Not so much.> Those who cling to plans are at disadvantage against those who have the ability to quickly adapt to the change.Both have their advantages and disadvantages, but I’d trust and would like to work, more, for a company that doesn’t flap in the wind.No one in the industry expects stability like in the waterfall days, but to expect a company to change / adapt their strategy in less than a financial quarter is just marketingspeak in my opinion."
The SAFe Delusion,ethbr0,"on Oct 29, 2022",> Those who cling to plans are at disadvantage against those who have the ability to quickly adapt to the change.https://en.m.wikipedia.org/wiki/OODA_loop
The SAFe Delusion,doctor_eval,"on Oct 29, 2022","> The OODA loop has become an important concept in litigation,[2] business,[3] law enforcement,[4] and military strategy. According to Boyd, decision-making occurs in a recurring cycle of observe–orient–decide–act. An entity (whether an individual or an organization) that can process this cycle quickly, observing and reacting to unfolding events more rapidly than an opponent, can thereby ""get inside"" the opponent's decision cycle and gain the advantage."
The SAFe Delusion,sanderjd,"on Oct 30, 2022","""Somewhat predict"" is incredibly different than ""make a detailed plan for"". I like strategic planning in 3, 6, even 12 month increments, but doing the detailed work toward those high level plans in much shorter and less static increments."
The SAFe Delusion,ThalesX,"on Oct 30, 2022","Let’s assume you have a strategy for the next 3 months. You identified / endivisioned a need in the market and came up with a reasonable solution; you locked in the budget, you allocated the resources. How many times are you going to change these in the 3 months?"
The SAFe Delusion,sanderjd,"on Oct 30, 2022","But that's not the kind of plan that comes out of these planning sessions. What you're describing is more like the effort to put together organization / unit level OKRs. That is a good thing. But getting everyone together to guess ahead of time how they'll execute that solution in detail is a poor use of time in my opinion. I think the planning exercise is useful for cross organization alignment at a high level, but for individual contributors, I think it at best makes their eyes glaze over and at worst makes them frustrated and demoralized, and then once the planning is done everyone goes back to doing the actual work, which of course doesn't match the plan very closely."
The SAFe Delusion,cortesoft,"on Oct 29, 2022","If you have a company that has more than 200 developers, there is a certain level of inertia involved in everything you do. You can’t be shifting projects nearly as quickly as when you have 10-50 developers.Having worked at both very large and very small companies, people who have not worked in the other just don’t understand what it is like at the other scale."
The SAFe Delusion,Yizahi,"on Oct 29, 2022",For example the sort of business which supplies hardware needed to write yours or mine comment. Not everyone is deploying to production every day or even every two weeks. Not everyone has feature development measured in hours.
The SAFe Delusion,skeeter2020,"on Oct 29, 2022",">> I was blown away at how effective it was. Once a quarter, we had a 3-day event in which the entire next 3 months were planned outYep, you get this, a 13 week PLAN. Just adopting plan-old maligned waterfall can give you a plan lasting years! Unfortunately software development teams are supposed to deliver more than plans.You can totally do quarterly planning without SAFe, cross-team colaboration can be achieved, and having teams spend time digging into future work is immensly valuable. SAFe leeches from these positives without actually enhancing them, while adding an imense amount of overhead and real costs."
The SAFe Delusion,zogomoox,"on Oct 29, 2022","Even if it worked, who wants to be in a 3 day long planning meeting every quarter? It sounds like a worse kind of hell to me."
The SAFe Delusion,user_named,"on Oct 30, 2022","In our scrum process, I spend 6 days spread out over three months in sprint planning."
The SAFe Delusion,sanderjd,"on Oct 30, 2022","Yes, but quarterly planning does not preclude sprint planning... You do both."
The SAFe Delusion,config_yml,"on Oct 30, 2022","I’ve been there. A meeting with over 900 people, half of them in a different timezone, looped in via video feed on a big wall. Fortunately it was also my last meeting of such kind. The following 3 months were a total waste of time."
The SAFe Delusion,tsimionescu,"on Oct 29, 2022","What happened when two months in the priorities changed, or when a feature that looked like it might take a turned out to take a month?"
The SAFe Delusion,JamesSwift,"on Oct 29, 2022","Priorities changing is one thing, but the answer to the second one is that priorities are priorities. If something to the left-side of a timeline now takes longer, it usually shifts everything else to the right. Thats just the reality of the situation, and the point is to have the awareness of the impact and be able to adjust accordingly."
The SAFe Delusion,Yizahi,"on Oct 29, 2022","You change priorities then. If a set of features takes much longer due to whatever reason, you just pare them down  or postpone release accordingly. If you have important customers waiting for the release, you then first talk to them and then cut or postpone depending on their opinion and common sense. Delaying release doesn't summon demons or cause apocalypse, despite what some managers try to bs us."
The SAFe Delusion,sanderjd,"on Oct 30, 2022","I think maybe this is the confusing thing to me. What ""release""? It seems like plenty of people are doing this for service-oriented software where these ""releases"" are totally arbitrary. Most of us are not putting CDs in boxes..."
The SAFe Delusion,sanderjd,"on Oct 30, 2022","It's interesting to me that you saw this as such a success story. In my organization, people have worked hard to get it down well under three days, and to me it still feels like a ton of effort for dubious benefit, because no plan survives first contact with the enemy."
The SAFe Delusion,bl4ckm0r3,"on Oct 29, 2022","How big was the team and what type of project?
And what amount of level of detail did you put in the planning/roadmap?
Did you also had experiments and investigations taken into account?"
The SAFe Delusion,tapatio,"on Oct 29, 2022","Same. I found it to be very effective, especially having a bunch of release trains in sync. Obviously this applies to large organizations."
The SAFe Delusion,rootusrootus,"on Oct 29, 2022","It's difficult to really articulate just how much damage SAFe safe has done to our organization.  But senior management loves the waterfall planning and the finance guys love the level of detail they can stuff into their spreadsheets somewhere.That it cuts our actual development output by half or more is not relevant.  As long as we can churn out meaningless Jira tickets to describe all that we aren't really doing, management is happy.The important work still gets done, but it's off the books.  It would never survive PI planning."
The SAFe Delusion,63,"on Oct 29, 2022","As someone who just finished a week of 8 hour PI planning meetings with another week of the same starting Monday, I wholeheartedly agree. My experience of SAFe has been shorter term waterfall with a couple steps cut out. It's definitely better than waterfall and I'm grateful for that, but I wouldn't call it agile."
The SAFe Delusion,tootie,"on Oct 29, 2022","SAFe almost feels like a ploy lead by waterfallistas to sneak their agenda back into the mainstream and call it ""agile"" to fool everyone. It's a shame because there is room for a toolkit to help scale agile. There aren't great tools for managing dependencies between agile teams."
The SAFe Delusion,roguecoder,"on Oct 29, 2022","It follows the outline of taylorism, just one level up from the team: measure, control and manage."
The SAFe Delusion,brightball,"on Oct 30, 2022",A week? It’s supposed to 2 days. 2.5 if you are partially time shifted.
The SAFe Delusion,throwaway93494,"on Oct 30, 2022","I mentioned this in another reply, but it bears repeating. Our current PI planning is 2 weeks not counting the half day before in Pre-Planning for PI Planning.I sincerely wish that was a joke. It's a 4 hour team wide meeting to review all work items are ready to be planned during PI planning, as well for us to identify dependencies and schedule meetings with those dependencies. There isn't enough time to to that during the actual planning."
The SAFe Delusion,sas224dbm,"on Oct 29, 2022","I have been involved in 2 medium sized-ish (~300) software support projects for western-nation's land forces project that brought in SAFe with a fanfare. Lots of ($$) training, everybody gulping down the coolade etc etc. It started off OK, but as with most of these ideological methodologies, our projects' circumstances started to clash with the SAFe 'way'. Our customer was very fond of his existing rituals (meetings, committees, progress meetings etc), but we also folded in all the SAFe rituals too. It seemed we were in meetings too much of the time, and we did a poor job of convincing the customer to move wholesale to the SAFe way. In addition, the organizational structure and governance models never operated in the SAFe way, with the customer's insistence on being in our shorts on every decision hampered most of the 'delegate decisions as deep as possible' philosophy. At the end of the day, it steel feels like RUP re-invented for 'agile' .. never again."
The SAFe Delusion,flerchin,"on Oct 29, 2022","The thoughtworks case study is repeated. Otherwise wholeheartedly agree. I have delivered plenty of software during 10 PIs, but that was in-spite of SAFe, and the whole thing was harder and slower because of it.Since then, I reorganized a team of ninjas away from the trains and have delivered at 3x the velocity using kanban methodology."
The SAFe Delusion,lee,"on Oct 29, 2022","I worked for a company that adopted SAFe and sent me to get certified as a SAFe Program Consultant.  So I worked to set up ""Agile Release Trains"" and coached a few teams that had never used any Agile methodology before.I can absolutely understand the frustration that many have with SAFe, especially when it's pushed from a top-down manner.  However, It's not entirely terrible as it provides some tools that can be address some organizational problems.I think at best if a large organization is already doing well and is ""agile"" overall, SAFe won't provide a lot of value and is unlikely worth the investment.  If an org is highly siloed, dysfunctional, and lacking inter-department coordination then SAFe it at least offers some tools to address those issues."
The SAFe Delusion,tonyarkles,"on Oct 29, 2022","I have never worked in a SAFe environment, but have worked with multiple teams that have followed various Agile methodologies over the years, with varying degrees of ""compliance to the process"".> I can absolutely understand the frustration that many have with SAFe, especially when it's pushed from a top-down mannerThis is the wrinkle, and in my experience the #1 factor for whether or not any particular methodology is going to work within an organization: top-level buy-in. Before I got too jaded, I worked with and helped some teams that wanted to try bottom-up agile, and it would help the team get better, but if a layer or two up in the management chain still wants e.g. fixed timeline, fixed budget, fixed scope projects, you're going to run into impedance mismatches all over the place and lose most of the benefits in the medium term.This can also happen in the other direction. An organization I worked with adopted EOS on the business side of the company but didn't really roll it out on the engineering side, except for expecting everyone organization-wide to specify their quarterly goals. After setting those quarterly goals, the engineering teams would still get yanked around in multiple directions, being asked semi-randomly to work on things that had nothing to do with their quarterly goals and then at the end of each quarter everyone just scratched their heads and went ""why didn't we accomplish what we wanted to accomplish?""Maybe I'm jaded, but I've gotten to the point where I don't really care which methodology is used, but rather that everyone top-to-bottom is on-board with it and actually following it. If it's Scrum, management needs to 100% buy in to the idea that they're going to get releases at a constant cadence and that those releases will contain whatever was prioritized as the highest value, with lower value features potentially missing. If it's something more conventional/waterfall-esque, management needs to be on-board with the fact that there's going to be some very costly analysis up front (that must include engineering) and that changes to that plan are expensive and will cause the schedule to slip; engineering needs to be on-board with the fact that they will be expected to deliver everything according to the schedule they built. It doesn't matter nearly as much which approach everyone wants to take, just that everyone understands the tradeoffs with that approach and that everyone's going to follow it."
The SAFe Delusion,heisenbit,"on Oct 29, 2022",The critique by agile experts of SAFe would be more convincing if they had shown earlier how to scale up agile.While not a fan of SAFe or any agile cargo cult implementation there were a few things I liked about SAFe: Some acknowledgement of the role of planning which imho. is needed at that scale and some framework to handle architectural concerns.
The SAFe Delusion,kitsune_,"on Oct 29, 2022","Self-organization at scale: Teal / Holacracy / Sociocracy. In the case of holacracy: Imagine a world where your company, its rules and all its employees including the bosses are bound by a constitution [0].Or have a look at Coplien's Scrum patterns [1] patterns that do involve ""planning"", and that are also supplemented by his decade old organizational pattern work outside of just Scrum.[0] https://www.holacracy.org/constitution/5[1] http://scrumbook.org/ and https://sites.google.com/a/scrumplop.org/published-patterns/..."
The SAFe Delusion,kevinmchugh,"on Oct 30, 2022","The idea that you can scale agile is false. It's fake. Agile experts didn't say how to do it because it can't be done. They put everything they knew, as clearly as they could, in the manifesto. And then they described themselves. And almost all of them were consultants. They found that delivering software frequently to their customers worked better than any alternative.If you can do that, you can do agile. It doesn't matter if your customers are internal or external - internal might be better, because you can work with them more regularly."
The SAFe Delusion,ineptech,"on Oct 29, 2022","I don't really understand SAFe, but from the outside looking in, it seems like the answer to ""How close can we get to agile while still employing an army of Project Managers?""  Which is to say, not very."
The SAFe Delusion,vesinisa,"on Oct 29, 2022","SAFe not only keeps middle managers employed and feeling important but also forces lots of unnecessary pencil pusher type work on the engineers and designers. It's a strain on all parts of the organization that are forced to use it.This is why most companies will abandon SAFe after a couple of years, like the case studies show. I have personally left one employer (a bank) because SAFe made the job unbearable.Both this company and their larger competitor abandoned SAFe after a couple of years. I now categorically ignore any gigs and openings at companies using SAFe - it's a glowing red flag to me."
The SAFe Delusion,teeray,"on Oct 30, 2022","I have also left an employer with MBAs that continually tried to find and mandate the One True Way of building software. I noped out when I found myself in multiple status meetings every day repeating myself to different middle managers (and having to update a Slack status channel as well). Spoiler: they adopted SAFe after I left, which told me everything I needed to know about SAFe without having to experience it firsthand."
The SAFe Delusion,chris_nielsen,"on Oct 30, 2022","When I read it, I see a devastating critique of SAFe from every big name I trust in the Agile space. I would never recommend SAFe. But no-one is asking me…How would a potential customer of SAFe see it?Right now somewhere in the world there is probably a C level exec of a large org reading a powerpoint about how transformative and agile SAFe is. They’re probably in their mid fifties and have never worked in tech before. They know agile is good, but any large IT project is risky.What would they see if they read this? Would it mean anything to them? Or would they see a bunch names they don’t recognise, and a list of failed IT projects blaming SAFe."
The SAFe Delusion,29athrowaway,"on Oct 29, 2022","I like this take on SAFe. Steve Denning has great talks about what agile is, and what it is not.https://www.forbes.com/sites/stevedenning/2019/05/23/underst...The SAFe training is predominantly a bunch of pointless games, marketing, and baseless claims. Leaving all that aside, it's just fake agile."
The SAFe Delusion,synu,"on Oct 29, 2022",It’s agile for companies that absolutely do not want to adopt agile but want to be able to tell their (prospective) employees that they have.
The SAFe Delusion,29athrowaway,"on Oct 29, 2022",That is a nice way to describe it.SAFe puts a bunch of layers between you and the customer.Agile is about removing layers between you and the customer.
The SAFe Delusion,ResearchCode,"on Oct 29, 2022","Are employees looking for ""agile"" companies? Seems more like a red flag for micromanagement nowadays."
The SAFe Delusion,synu,"on Oct 29, 2022","My personal experience is that, while you’re absolutely right for startups, large multinationals and companies that don’t see themselves as necessarily tech-first still use it as a selling point.I don’t know if it is effective to do so or not, but I do see it highlighted on job ads/recruiting landing pages."
The SAFe Delusion,29athrowaway,"on Oct 31, 2022",Better to be micromanaged by 1 person than 10.
The SAFe Delusion,retrocryptid,"on Oct 29, 2022","This seems a bit of a hit piece, but it seems like a safe target as at least half the people I know seem to hold it (SAFe) in disdain.  I've consulted for organizations that started using it and have a mostly negative opinion.  Organizations that are in near complete disarray may find it useful; but then again, they might also find a return to old-school waterfall useful.  Where I've seen SAFe not work so well is organizations that are doing reasonably well with planning, but have some deficiencies or some corners of the organization that aren't doing too well.Traditional Agile doesn't scale well above the team level (not that it's bad, it's just that benefits from its processes don't seem to be focused on that level of the organization.)  Scrum of Scrums is rarely executed well and Lean and XP don't really describe practices for that echelon.  (I'll have to re-read my Kanban books and see if it addresses it.)My take on SAFe is that it rigidly adds dependencies between teams, even if such dependencies are counter-productive.  But like the manager who uses the daily standup as a status meeting, it seems like it's serving the ""bean counters"" instead of the people doing the work."
The SAFe Delusion,brightball,"on Oct 29, 2022","I’m going to summarize my earlier comment with this:SAFe with Scrum teams (how instructors are taught SAFe) merely adds more ceremonial meetings and sucks for everyone.SAFe with Kanban teams trades the scrum ceremony for less frequent SAFe ceremony and is a much better experience for developers.SAFe corporate needs to change the way they teach it to address the clearly visible issues coming from the way they currently teach it, based on the comments here."
The SAFe Delusion,csours,"on Oct 29, 2022","SAFe is not about software development or planning. SAFe is about funding software development in a cost center. I haven't seen anyone address how to do the accounting for software development for a large organization, where that software is not being sold for money."
The SAFe Delusion,roguecoder,"on Oct 29, 2022","You are absolutely right about the short-sighted problems created by incompetent finance models.I've seen two successful approaches in practice. The first is vertically integrated companies using easily-measured labor-saving techniques like ML to justify the infrastructure costs required to support those innovations. And the second is places where workers have the institutional power to advocate for investment in the tools they have to use.It seems to me that there should be an effective strategy where we treat software as capital spending that gets appropriately depreciated, but mostly what I see is finance departments trying to micro-manage development and in the process costing their company a lot of money."
The SAFe Delusion,ethbr0,"on Oct 29, 2022","Internal billing + discretionary ""keep the lights on"" budgeting?It has its flaws, but it's not the worst approach."
The SAFe Delusion,mindwok,"on Oct 29, 2022","I view the implementation of SAfe anywhere as a huge red flag. To me it suggests that the decision makers read about Agile and what it proposes and decided that for whatever reason they don’t want it, in its unfettered form it scares them, or they don’t understand how to adopt it. As someone who prefers working in Agile workplaces, that tells me all I need to know."
The SAFe Delusion,JamesSwift,"on Oct 30, 2022","My experience in an org that introduced SAFe during my time there, was that it was actually a misguided bottom-up introduction. A couple teams went agile and found it really effective then thought ""if it was this effective for 1 team just imagine if we scaled it up to everyone!"". Spoiler: I will likely never work for another SAFe org again."
The SAFe Delusion,oneplane,"on Oct 29, 2022","Seems to me that SAFe like so many business ideas only exists because companies that work well without it may still work well despite having to use SAFe. Companies that don't function well are not magically turn into well-functioning companies because someone threw a book at it. When you can restructure a company from not-working to working order, it's not SAFe that did it, but someone with enough time and energy. At that point it doesn't matter if SAFe was involved or not, because that's just an idle wheel coming along for the ride."
The SAFe Delusion,heynowheynow,"on Oct 29, 2022","When consultants suggest a ""new"" fad, they're all about charging money to help businesses adopt that fad to avoid FOMO. Predictably, there will be a new fad next year and the year after that. Waterfall: elevator control systems, agile: expense reports UI, and apply a blend to things in between."
The SAFe Delusion,doctor_eval,"on Oct 29, 2022","100% agree. I worked at a large telco where this happened. Brand-name consulting company “changed methodology” half way through the project and charged the customer for it.I couldn’t believe it. But then again, we were quite literally the only team that delivered a product, so naturally we were seen as a threat and our contract was cancelled.True story."
The SAFe Delusion,heynowheynow,"on Nov 6, 2022","Those who can't tend to hurl negativity and sabotage at those who do.Or people who are too dumb or lazy to try language X or approach Y (minus fads) tend to reiterate how wonderful their stale way and obsolescence are.There are people at my work (MAANG) who say Rust is too ""esoteric"" and ""impractical"" despite the whole company and industry moving that way, but they're comfortable in just now finding Go and being religious about it, maybe 8 years late to the party that's now over because it's ""worse is better"" shit in the long term. I'm looking around because I think my team is doomed since it lacks coherent leadership (the lead was playing with VR and skipped their own conference), it's full of ""senior"" people who lack professional career development goals and are uninterested in leveling, they're fine with ignoring software craftsmanship and tech debt, and they don't interact with me with any regularity. I can't get anything done or propose any ideas because the lead looks at me like Tucker Carlson before I can finish a sentence. They don't include me on anything, so I don't know why I'm there."
The SAFe Delusion,mrweasel,"on Oct 29, 2022","I've never worked in an organisation that used SAFe, but to be honest I've never worked for one that used SCRUM either. The only semi-structured method I've ever been part of has been ""SCRUM BUT"".What I find weird about both SCRUM and now SAFe is that pretty much every single agile expert I've read articles and blog post from dislikes it. My take away is that the agile purist, if you can call them that, are focus on delivering high quality software and user satisfaction, that's the focus, that's the goal. SCRUM and perhaps now SAFe (presumptuous acronym btw) seem to be focused on managing software deliveries in larger organisations.As some one who studies software engineering and process management 18 years ago, I can't say that time has made me think that things have improved much over time. I am especially skeptical of processes that comes with certifications and titles. The original agile manifesto is beautiful in that it's something we can all do. There's are no training, no certification, no corporate backer. Its principles, and you can either agree or disagree, is something the team can reflect and meditate on how to best incorporate the ideas into their work.Overall, more and more I start to think that PHK was right in his talk ""Entirely Predictable Failures"" in 2012[1]. It's snake oil, almost all of it.[1] https://www.infoq.com/presentations/Predictable-Failures/ (At around 24:30 and a few minutes from there)."
The SAFe Delusion,29athrowaway,"on Oct 29, 2022",Scrum is not an acronym.
The SAFe Delusion,rileyphone,"on Oct 29, 2022","I strongly agree with this, but you need some more editing, especially to convince the leadership types that keep making this mistake."
The SAFe Delusion,cpeterso,"on Oct 29, 2022","And if you’re going to say “Don’tdo SAFe, you sure suggest some alternatives."
The SAFe Delusion,nvr219,"on Oct 29, 2022",Agreed.  The decision makers at my company would not read this.
The SAFe Delusion,mkw2000,"on Oct 29, 2022","I had a recruiter mention to me that the company is all about SAFe and I should express my interest and enthusiasm for it during my interview.  I looked it up, saw a diagram describing the process that actually made me burst out laughing and ran far away from said company."
The SAFe Delusion,brightball,"on Oct 29, 2022","I'm a SAFe certified SPC and RTE. Also a programmer with 20+ years of experience.IMO the only real issue with SAFe is that the quality of trainers have probably become diluted. If you have a SAFe instructor without a programming background to go along with it who can understand how all of the pieces involved will affect the people and the process, you're going to end up with pure by-the-book rigid implementer...because they probably don't know any better.I was drawn to SAFe after posting a lot of venting thoughts on my blog, that got picked up here and somebody on this forum recommended a fantastic book to me. The Principles of Product Development Flow: 2nd Generation Lean Product Development by Donald Reinertsen.https://news.ycombinator.com/item?id=17154355This book is not rigid, nor are the principles within it. I used those principles to very successfully run a development group, but I was failing at consistently involving the business side of the house effectively. I looked around for something more formal that was based on his work and I found SAFe. Going through the training, it's about 80% based on that book. You'll recognize all of the underlying principles.But I took so many classes on it because I wanted to make sure I understood SAFe well enough to know the goals of it's structures so that I knew how to adapt effectively. I don't think a lot of SAFe instructors do that.So here's what you need to know about SAFe. They flat out tell you, you are NOT trying to fit the organization into this structure. You're trying to see how the principles of this structure can benefit your organization.If you want an effectively summed up list of the keys of SAFe from everything I've learned it's this:1. Continuous Delivery & Deployment are the primary goals of this structure. There is a huge focus on development pipeline automation and all of the efficiencies that come from it. I have no idea why anyone would think otherwise based on comments in that link, because it's absolutely core to the entire process.2. Prioritization without emotion. SAFe prescribes a formula based approach to prioritization that is essentially a dressed up Return on Investment formula called Weighted Shorted Job First. It recommends structures to get a lot of representatives from the business side of the house to go through and apply relative weights to 3 different factors to establish a Value metric called Cost of Delay and then counts on the technical side of the house to estimate the workload. This helps you prioritize in a way that factors in Opportunity Cost. You have X amount of developer time, if you spend it on this you can't spend it on that.This process is FANTASTIC for everyone involved except the person at the company who is used to getting things prioritized by yelling the loudest. On the business side, everybody has a clear place to have a voice in the company priorities. On the dev side, you never get the ""everything is top priority"" answer that is so common.3. Feature Flags. This is one of the absolute keys from a best practices perspective and it also critical for a continuous delivery environment. It allows dev to deploy to production behind a flag rather than hold stale branches while waiting for marketing, product, etc to give feedback, documentation etc. Product gets the benefit of being able to show features to specific clients, gather feedback, etc in a production environment while everyone else can prepare to release when they are ready...without having to bog down development with that entire process. The idea of separating Deployment from Release is hard for a lot of people to wrap their heads around.The biggest complaints that I see around SAFe are that it's too rigid and/or that it's waterfall.It's neither of these things. It's made to be adapted to your company and all it involves is a collection of best practices that work really effectively together. They adopted a lot of current practices, like Scrum, into Reinertsen's work because it's easier for an organization to adopt it if they think they're already doing a lot of it. Each team within a SAFe environment can use Lean, Scrum, Kanban, etc. It's up to the TEAM entirely. Scrum structures are just there because a lot of people are already using them.As for the waterfall bit, I reject this entirely. There's a large group of people out there that seem to think even acknowledging a dependency means you have a waterfall process and I bristle every time I hear it. The PI Planning structure allows you to coordinate team planning over 8-12 weeks.Have you ever been in a scrum environment where the teams didn't have a clear path to coordinating? It's awful.Moreover, the structure allows (and insists) that your developers actually provide the plan. This means nobody else has handed you a deadline and your entire team gets to have a dialog about what can be done in what amount of time. You discuss tradeoffs with management if they ask for the world and they only really need a piece and then discuss how to get that piece.How many environments leave developers out of this process entirely? Just handing you tasks?I'm a huge fan of SAFe because it's goal is to provide an environment where developers can thrive. Every time I see comments about SAFe and ask questions about it, I get responses like ""they didn't do that in our SAFe implementation.""That's because your upper management nixed it. It's not because it wasn't supposed to be there.Personally, I'm a huge SAFe with Kanban advocate.If you have questions about SAFe at your company or you simply want a second opinion on what you're being told, feel free to hit me up. I'll be happy to answer any questions that I can."
The SAFe Delusion,skeeter2020,"on Oct 29, 2022","This post is classic SAFe and SAFe-certified trainer talk:* It starts by stating ""I'm a SAFe consultant now, but at heart I'm a developer just like you!"",* It conflates what SAFE says it does (continuous deployment; empower developers; responsive teams) with what it PRESCRIBES (coordinated release trains; process over people; commitment to long term deliverables up front),* It speaks to the executives and management that will decide to adopt SAFe, not the developers who will need to somehow work within it,* It somehow promises to combine bottom-up agile with top-down date-based delivery commitments then hand-waves away the collision of these intractable approaches,* It pleads that SAFe is not heavy weight even though all SAFe offers is hundreds of pages of process and rituals,* It attacks anyone who is concerned or unwilling to do SAFe, as obviously they'r the ones with a vested interest in not adopting SAFe,* It presents the straw-man argument that the alternative to SAFe is teams that can't coordinate,* It concludes that if you didn't see all the supposed benefits from SAFe, ""you did it wrong"",* Like SAFe itself,it's long, full of platitudes, self-promotional and in the end leaves you ready to surrender just to make it stop.Question for the group: Do you know anyone who's livelihood doesn't directly depend on adopting or enforcing SAFe who is a big booster?My favorite SAFe quote:""SAFe uses agile like a drunk uses a lamp-post: for support, not illumination""."
The SAFe Delusion,delusional,"on Oct 29, 2022","> * It conflates what SAFE says it does (continuous deployment; empower developers; responsive teams) with what it PRESCRIBES (coordinated release trains; process over people; commitment to long term deliverables up front),As is common with political initiatives. First the values are listed, then the motivation for those values are presented in a way that nobody can disagree with. Then the slight of hand: the proposed solution is assumed to be the only possible fulfillment of the values. All discussion about the mechanisms by which the solution fulfills the promises of the values is cast as disagreement about the values. ""How could you disagree with coordinating your work"" instead of ""how do you think our activities don't lead to coordination between teams"".It's unfortunately a very effective strategy."
The SAFe Delusion,brightball,"on Oct 29, 2022","I’m not a SAFe consultant. I’m certified but I consult on a lot of things: Postgres and application performance tuning, DMARC deployment, pipeline automation and organizational process.I’ve also never certified anyone in SAFe professionally. The principles work but I’m not a believer in adopting it strictly in organizations. Instead I observe and recommend improvements in existing companies once I understand their dynamics.In many cases, aspects of SAFe are effective recommendations.Whether you formally follow the PI Planning approach to get everybody together or you find a better fit for remote staff, letting your devs plan 10 weeks at a time instead of 2 is beneficial for everybody. And cuts down on a lot of every 2 week meetings to support it.And all I’ve shared is my own experience. I constantly see straw men arguments against it posted.When you scrap the SAFe with Scrum approach and replace it with SAFe with Kanban 90% of the ceremonial meetings go away.Most devs I talk to don’t even realize there’s supposed to be a backlog that they prioritize without having to consult the business side of the house.There’s no question that the anti-SAFe crowd has legitimate gripes with bad environments. Their concerns aren’t any more
valid than the concerns of anti-Scrum proponents who have been in bad environments.It’s trying to solve a hard problem but under the hood it’s just best practice after best practice smooshed together.Get the scrum ceremony out and SAFe gets a lot cleaner for everyone involved. You’re basically just adding more ceremony if you use scrum within SAFe. If you use Kanban, you trade for much less frequent ceremony so you can focus.SAFe instructors are taught WITH the scrum ceremony and IMO that is the root of all of the blowback."
The SAFe Delusion,29athrowaway,"on Oct 30, 2022","If you haven't met the customer, it's not agile.Product owners are not the customer. Scrum is watered down agile.SAFe is simply not agile."
The SAFe Delusion,namdnay,"on Oct 29, 2022","Ahhh feature flags, the sick organization’s last crutch.Three years down the line, every customer is using a slightly different combination within the hundred flags that have appeared, you’ve just fallen back the latest release for the fifth time because of an unforeseen interaction between three unrelated flag states, and then you go through the test suites and you realize that it is mathematically impossible for you to cover every combination :)"
The SAFe Delusion,brightball,"on Oct 31, 2022",That's not feature flags. You're referring to user options that individuals or companies can enable or disable.Feature flags are controlled entirely by the product team and designed to be removed after the product team has formally released the feature everywhere. Good feature flag systems like Unleash even track stale flags so you don't forget to remove them.
The SAFe Delusion,asplake,"on Oct 29, 2022","I know Don Reinertsen and I did his training workshop a years ago.The thing is, you can’t take a set of principles (which his stuff is) and then claim that rolling out your design (a different beast entirely) means that the poor customer is following them too. Ok you can try, but it wouldn’t be true.FWIW I’m the author of one of the better-known Kanban books. Plenty of Don’s influence in that world too (a good thing), not that I’m active there now"
The SAFe Delusion,brightball,"on Oct 30, 2022",Just ordered a copy. Looks like a great read.
The SAFe Delusion,flerchin,"on Oct 29, 2022","In practice, all the ills that you decry as NOT SAFe, are what happen at every organization that I have been a part of that tried SAFe. The prescriptive framework and focus on process over people are the easy part, and an easy trap to fall into."
The SAFe Delusion,CipherThrowaway,"on Oct 30, 2022",Have you worked in many environments that have implemented SAFe well? These theoretical benefits seem to be hard to translate into practice.
The SAFe Delusion,throwaway93494,"on Oct 30, 2022",">The biggest complaints that I see around SAFe are that it's too rigid and/or that it's waterfall.It is incredibly rigid though.Very few people on my team files defects; in fact in the last year we've probably had 4 maybe opened internally. This is in spite of the fact that there's constant complaints and identified problems and risks that we keep finding.The problem is that in filing a defect, we must go through the entire ceremony. The PO and SM must evaluate and prioritize, then gather the team so that more details can be filled, a Definition of Done written, acceptance criteria written, and the time estimates voted on. Along with the the fact that the defect requires two reviewers to read over and approve merges, and then an additional two reviewers to read over and approve the defect.It's more time and cost effective for us on the team to wait until either someone else finds it, or until it actually explodes, rather then going through the rituals of preventing the problem in the first place because we strictly follow good SAFe practices.During PI planning is when it really comes to a head; often times stories have to be tortured into either fitting into our mandates that no stories can be over estimated over 3 points. The mandates been a mixed bag; in some cases it sensible splits the feature into an investigative phase and an implementation phase. But other times we have to torture the story to the point where the split is meaningless or even detrimental to the delivery of the feature.Just a rough example; if we split the time boxed investigation, the implementation story is in the next sprint kept at the same story points even if it turns out we've drastically underestimated the work. It also perverse incentivizes just voting 3 points even if it's a slightly more complicated work because the team often doesn't want to deal with the headache of writing more stories, and pressure during PI planning to get it done.>Have you ever been in a scrum environment where the teams didn't have a clear path to coordinating? It's awful.It's still pretty bad. PI planning for us is 2 weeks of planning for a 12 week PI. 8 hour days of nothing but sitting in a virtual meeting room staring at someone write up stories and then voting on them (to be fair we've gotten it down to 2 weeks now by running some of the ART planning in parallel). And these stories are not easy to write; the current standing directive is that they need to be detailed enough so that anyone off the street, irregardless of level of skill or familiarity, can read the story and bring it to completion (which has led to some disagreements on how long it should take to write a story). Then voting on story points which in theory are supposed to be complexity but in reality are treated as 1 story point = 1x 8 man hours.The two week sprints in the PI starts with a 3 hour review meeting. During this time we also have to come up with sprint goals, often times an exercise that ends up with our SM instructing that he didn't care what goals were (which has about the effect one would expect; meaningless goals).Then we have another 3 hours planning where the PO reads off a chart that could've have sent prior to the customer as an email with an executive summary, followed by time spent by the SM calling out stories and then asking for volunteers. And then voluntelling if no one does.Each day is then set with a 15 minute scrum and then an additional hour standing review / second daily check in. So every day is at minimum 75 minutes of meetings per day. And the SAFe process really does encourage mediocrity if not idiocy (one of the biggest pushes for return to the office I've heard in fact is because SAFe requires face to face meetings. This was said by certified SAFe Professionals).>I'm a huge fan of SAFe because it's goal is to provide an environment where developers can thrive. Every time I see comments about SAFe and ask questions about it, I get responses like ""they didn't do that in our SAFe implementation.""I went through SAFe training. We have something around 15 or so certified SAFe Professionals. One of the things that really stuck with was this ridiculous sentence; that we have teams build ownership by letting them pick their own team name. Not by letting them decide architecture. Or somehow figuring out how to build trust between the SM/PO and the team. By letting them pick. A team name. And this was stated straight faced and completely seriously by a certified SAFe Professional with two other certified SAFe Professionals.Kind of gives you a hint of how we've implemented SAFe. All of the rituals followed, all of the ceremonies performed, but done in an air distrust between management and  engineers. It's not that it's all bad; there's many pieces that makes sense but many more that don't and if the foundation is on the view from management that engineering is little different then factory work..... well, just look around this thread. I think you can see the result."
The SAFe Delusion,brightball,"on Oct 31, 2022","There are two things you're saying that simply don't align here:> we strictly follow good SAFe practices.and> PI planning for us is 2 weeks of planning for a 12 week PIThis is a hellhole that in no way reflects good SAFe practices. PI Planning is 2 days. 2.5 if you're partially time shifted to accommodate teams in disparate time zones.There's so much more about this that I want to respond to but I'm going to shorten it to this: SAFe calls for planning a maximum of 2/3 of your estimated capacity (based on historic velocity) and then leaving the last 2 weeks of the PI entirely unplanned. All of this is built in buffer time specifically to ensure time built in to deal with unexpected things that will inevitably come up. Defects in production should be addressed immediately in any environment.Any label put on the process your describing is probably not fair, whether somebody called it SAFe or Scrum or Kanban or Lean or Extreme Programming or whatever else.This is simply a terrible and broken environment facilitated by people who apparently had no idea what they were doing. This is an environment where managers have exerted strict control rather than allowing people close to the problem to take the action that they know needs to be taken. Which is again...not SAFe."
The SAFe Delusion,throwaway93494,"on Nov 2, 2022",">This is a hellhole that in no way reflects good SAFe practices. PI Planning is 2 days. 2.5 if you're partially time shifted to accommodate teams in disparate time zones.Our PI planning consists of a combined demo session and Q&A, a combined I&A, then separate demos and I&A's for each of the ART's. That in of itself can take 1 to 2 days because of the number of demos that each ART has to include. Then 3 or 4 days of team breakouts for writing stories, a full day for draft plan review, then another 2 to 3 days ish days to take in feedback from the review and adjust the plans, then another day of final draft plans review.You can't fit that into two days. You can't even fit that into a week. But those those rituals are more core to SAFe Agile then an arbitrary time frame for PI Planning. So the 2 day limit had to be dropped to fit in the core principles of SAFe.So yes it does align and yes it follows good SAFe Practices. Didn't you yourself say that one shouldn't try to the organization into SAFe's structure?> There's so much more about this that I want to respond to but I'm going to shorten it to this: SAFe calls for planning a maximum of 2/3 of your estimated capacity (based on historic velocity) and then leaving the last 2 weeks of the PI entirely unplanned. All of this is built in buffer time specifically to ensure time built in to deal with unexpected things that will inevitably come up. Defects in production should be addressed immediately in any environment.Our sprints are loaded to 50% to 65%, with few exceptions. But with how big our team is, that means that 2/3 loading is around 40 points per sprint that needs to be planned. And our standard practice also are expected to pull in New Features / stories from the next sprint, or work on items as assigned by the PO from the backlog if things are finished on schedule.>This is simply a terrible and broken environment facilitated by people who apparently had no idea what they were doing. This is an environment where managers have exerted strict control rather than allowing people close to the problem to take the action that they know needs to be taken. Which is again...not SAFe.All our Certified SAFe Professionals says this is SAFe. The training I got aligns to what we practice. This is SAFe by the strictest definition of following processes and practices.But like Russian elections and referendums, you can have all the form, technically meet all the criteria, and have none of the of substance. And be honest... would it surprise you one bit to think that insincere ceremony isn't exactly what many so called leaders want?"
The SAFe Delusion,tbalsam,"on Oct 30, 2022","Thank you for helping me recognize that the hellhole I'd previously worked in in my first software dev job out of college was a SAFe gig. I'd referred to it a lot as ""weaponized agile"" (which I believe it is), but somehow I hadn't connected the dots of my middle manager casually mentioning safe to the inane, almost preschooler level of sticker-award-insult that strips away developers abilities to, well, do what they've spent their career learning to do and instead ""gives them the ability"" to ""pick their own team names (and we can name our epics in a theme! :"") )"" (insert gratuitous ""yay""s, clapping, and suggestions of how fun it will be).This helps paint a lot of things in retrospect a lot more clearly. As you can see, I am still intensely salty about this experience many years later. >:')"
The SAFe Delusion,skeeter2020,"on Oct 29, 2022","I'm currently going through my second company implementing SAFe. The first one no longer does it, and I'm likely to quit here because of the adoption. You should try to experience first-hand rather than come to a conclusion from random detractors and random SAFe consultants. My single piece of data: If I poll all the software developers who I've worked with directly under SAFe, some hate it, many just live with it, but NONE are huge boosters or advocates. I think that speaks to disconnect between SAFe advertising and SAFe reality."
The SAFe Delusion,ketzo,"on Oct 30, 2022","I did work at a company that implemented SAFe, and it was miserable. I am interested to read commentary from someone who has had a good experience, because those seem to be so rare."
The SAFe Delusion,charbull,"on Oct 29, 2022","I had a very good experience using safe 4.x
The whole department participated.
Edge Software
Cloud platform
Application teamIt allowed the 3 teams to have better communication, things were written, we knew what we are building and how/who is using it. 
Met with stakeholders regularly for feedback and better understanding of the business in general, the strategy and why we need to land this feature either to differentiate or because it is priority 0 asked by many customers.As a team member safe allowed me to understand why what I am working on is important for the business and how it brings value.I wonder if it is a people problem that we are blaming safe for or an actual process problem?"
The SAFe Delusion,tbalsam,"on Oct 30, 2022","Some problem might be it's both a people and a process problem. There may be little to nothing about it that is objectively, technically ""wrong"". But maybe it doesn't work for 90-95% of people.It sounds like most of what you listed is something that could be accomplished with a good scrum team that has a well-defined, prioritized, and pruned backlog (as necessary.... :))"
The SAFe Delusion,derekbaker783,"on Oct 30, 2022","None of that requires SAFe, and would be probably be less costly to achieve without SAFe."
The SAFe Delusion,lostdog,"on Oct 30, 2022",Describe how it works in 1 paragraph or less.
The SAFe Delusion,orzig,"on Oct 29, 2022","I read as much of the site as I could, but could  somebody explain: how is SAFe different than the original agile manifesto?"
The SAFe Delusion,fidrelity,"on Oct 29, 2022","The agile manifesto does not dictate any team or organisational structure.SAFe prescribes a bunch of structures, councils and processes. It is by design anti agile.Edit: this image highlights the paradox: https://www.agilest.org/wp-content/uploads/2018/03/scaled-ag...Just try to count all the roles and processes prescribed."
The SAFe Delusion,JamesSwift,"on Oct 30, 2022","And I would just like to emphasize, most of the terms and titles you see on that slide are capital-letter Proper Nouns. The agile manifesto is more a _vibe_ about how to think about work, and how to approach the process. SAFe is a full on cult that absolutely depends on every single part on that slide doing exactly what is prescribed, or else it all falls apart."
The SAFe Delusion,isoprophlex,"on Oct 29, 2022","If anyone comes and tries to sell you stuff using a chart that looks like that, better show them the door immediately. That thing seems optimized to cause upper management hypnosis by its expertly designed cavalcade of hollow bullshit terminology."
The SAFe Delusion,FridgeSeal,"on Oct 30, 2022","I've never seen this chart before, but I've worked with people previously that I  know would get instantly giddy with excitement looking at this.The meaningless terms, the disconnected-flow-chart-but-not-a-flow-chart, the deluge of acronyms, the weird visuals and the inscrutable words and relationships, it's all there.It's a document I'd attempt to create if I was trying to parody consultants and business shenanigans, but it's real."
The SAFe Delusion,db48x,"on Oct 29, 2022",I’m having an allergic reaction after looking at that chart. Where did I put that epipen?
The SAFe Delusion,gherkinnn,"on Oct 29, 2022",Very lean indeed.
The SAFe Delusion,bitwize,"on Oct 29, 2022","SAFe is basically Rational Unified Process (cross-team waterfall) with a coat of Agile paint. No one in a SAFe organization thinks it's particularly agile, but it meets certain business needs (total visibility and the appearance of control by upper management).SAFe is a key component of an ""agile transformation"" which is a bit like the ""peace process"" between Israel and Palestine: the participants who implement the process are best served if no progress is made while they project the illusion that progress is being made."
The SAFe Delusion,cpeterso,"on Oct 29, 2022","Here's a 2019 presentation from Lockheed Martin about how they are implementing SAFe for their F-16 software development. They went from throwing a whole new program over the wall to flight test in 3-4 years to delivering an testable increment (of the new program) in 9 months. Their total program delivery is no shorter, but they now get test feedback on increments years sooner.https://www.youtube.com/watch?v=nvfYLZ52zX0"
The SAFe Delusion,pjbeam,"on Oct 30, 2022",SAFe was implemented top down at CVS Health when I was there. Main benefit I got from it was the parties in the evenings after PI Planning days were excellent.Otherwise I don't miss anything about it.
The SAFe Delusion,muaytimbo,"on Oct 30, 2022","I worked at a company where the new CTO instituted SAFe (which he used at a previously failing company).It was an unmitigated disaster, everyone was miserable. Developers were leaving so quickly consultants were brought in to stem the bleed.When I left the CTO was trying to retain the little talent there was left by holding monthly Q&A sessions. The final question I heard before I left was something like, “why are the consultants treated better than the employees? They don’t have to do SAFe.”"
The SAFe Delusion,anyonecancode,"on Oct 30, 2022","I worked for several years at a company that was known for its use of agile. I had my critiques, but overall was a fan. Then I moved on to a much larger company and heard of SAFE, and my initial reaction was ""isn't SAFE axiomatically an oxymoron?"". Subsequent experience at that large company reinforced that initial impression."
The SAFe Delusion,danabrams,"on Oct 29, 2022","The SAFe promise is that you can make your enterprise agile without any of the difficult changes that senior and middle management have to make to truly make agile. Just pay scaled agile lots of money for your project managers to become certified.It’s like a diet that promises you can eat as much of whatever you want, as long as you pay."
The SAFe Delusion,jxf,"on Oct 30, 2022","As a former Thoughtworks leader who is mentioned by proxy on this website, it's pretty lightweight in how it describes the attitude towards SAFe. It was almost universally a failure in any company that adopted it. Frequently I landed business merely because a company was trying to unwind SAFe."
The SAFe Delusion,oaiey,"on Oct 30, 2022","SAFe is agile process for the R&D management level and not on team level (where it is effectively a 3 months waterfall).This analogy never fails me. SAFe brings tools and benefits on that level. For everyone below, it is waterfall pain."
The SAFe Delusion,ChuckMcM,"on Oct 29, 2022","What SAFe does is provide some sort of visibility and accountability to senior management. (Which waterfall did before it) Until the Agile community can come up with a reliable way of identifying and firing the low performers for senior management, they will keep pushing down requirements like SAFe on the organization. Fortunately, the level of opacity between budget managers (P/L) vs execution managers usually doesn't get this bad until you've got 10 - 20K employees."
The SAFe Delusion,ResearchCode,"on Oct 29, 2022","How does SAFe reliably identify ""low performers""? Top companies tend not to do SAFe, I don't see the issue this solves. But I'd easily see SAFe creating low performers."
The SAFe Delusion,ethbr0,"on Oct 29, 2022","By mandating visibility.And let's be honest, SAFe is not for ""I can attract talented people who can self-manage"" companies. It's for ""75% of my developers are scraping the bottom of the barrel, but I take what I can get because my company isn't sexy."""
The SAFe Delusion,bitwize,"on Oct 29, 2022","> What SAFe does is provide some sort of visibility and accountability to senior management.This is true of all Agile methodologies adopted by corporations.If it weren't true, the methodology would not be adopted."
The SAFe Delusion,dunno7456,"on Oct 29, 2022",This is a reflection of agile brin dead on the water when it comes to it's promises.
The SAFe Delusion,rqtwteye,"on Oct 30, 2022",Anybody who looks at the SAFe diagram and doesn’t think it’s sheer lunacy has never done any real project work. And calling this “agile” is an insult.
The SAFe Delusion,JulianMorrison,"on Oct 29, 2022","In my experience, if what you've got is a months-ahead plan where management sets the deadlines AND controls the scope via pressuring the line manager, and delivery relies on crunch time and panicky de-scoping and working to the letter and not the spirit of the contract, then what you have is waterfall in a fedora and a Groucho Marx novelty disguise."
The SAFe Delusion,yakshaving_jgt,"on Oct 29, 2022",> is there anything betterYes. Not doing SAFe.
The SAFe Delusion,Smeevy,"on Oct 29, 2022",Doesn't that fundamentally undercut the incremental value delivery and CI/CD progression that SAFe promises?
The SAFe Delusion,derekbaker783,"on Oct 30, 2022",Yes
The SAFe Delusion,29athrowaway,"on Oct 30, 2022",The max size of an ART is 125
The SAFe Delusion,travisgriggs,"on Oct 30, 2022",SAFe is to early agile what modern Christianity is to early Christendom.(I am a frustrated Christian)
