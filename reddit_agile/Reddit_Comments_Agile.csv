author,score,Review,Publication Year,Discussion
theavatare,559,"Agile can’t die because is everything and nothing.

But im seeing more upfront work done in projects and longer iterative cycles or just kanban style with releases",2024,Is Agile actually dying
ninetofivedev,438,"This is correct. The ""service"" version of agile, which is what everyone refers to... is dying. Turns out hiring a bunch of college flunkies who spent 8 weeks getting a certificate certifying their ""Agile"" skills is all bullshit. Who could have seen that coming?

Now if your company is like ""Hey, let's be flexible in our process, iterate on our product, deliver software bit by bit, and constantly try to improve our process and workflows""...

Well, you'll have more success.",2024,Is Agile actually dying
diablo1128,107,">Now if your company is like ""Hey, let's be flexible in our process, iterate on our product, deliver software bit by bit, and constantly try to improve our process and workflows""...

Isn't that what Agile is at it's core?  

My understanding is how you get there is something that teams were suppose to define on their own.  That's because every team is different and has different needs from a process.",2024,Is Agile actually dying
xcrszy360,83,"It is..., the problem I think is the gap between principles and actual steps needed to get it implemented, that everybody has a different view on it

Also, I think most people don't work well under uncertainty, and when you try to force push constant changes to these people, what you get is get is resistance, and low engagement",2024,Is Agile actually dying
diablo1128,36,">Also, I think most people don't work well under uncertainty,

This is definitely true from my experience.  This is not just in terms of process, but just general work.  I think I lucked out in this department because uncertainty doesn't bother me.  

I have seen many SWEs get all flustered when they are giving some open ended task and are told to investigate, come up with a solution, and come back to them to discuss.  I love these tasks because I feel like I'm in control and get to come up with ideas to how I think things should happen.  If I'm wrong or miss things then I just take that as input moving forwards.  

It seems like many SWEs I have worked with, from senior to junior, want clear tasks because they fear being wrong or something.",2024,Is Agile actually dying
ArcanePariah,40,"I think that's partially driven by fear from product/management, because those groups are even MORE fearful of uncertainty. So they seem to want to shift responsibility down to the engineers. Which might work except engineers are rarely given the power to make systemic change, so you get all the responsibility and consequence and no power to make things successful. Basically setup to fail. So engineers correctly want nothing to do with that, they want all the uncertainty removed BEFORE, so they can the deliver the certainty desired by management.

How many times have we heard stories of engineers asked to make an estimate only for that estimate to either be taken as gospel/hard commitment, or instantly ignored in favor of whatever the deadline is, decreed from on high?",2024,Is Agile actually dying
The_Krambambulist,7,">How many times have we heard stories of engineers asked to make an estimate only for that estimate to either be taken as gospel/hard commitment, or instantly ignored in favor of whatever the deadline is, decreed from on high?

To add unto this, there is a lot less complaints if something takes less time than the other way around.

A lot of incentives to either pad the estimate or get to a place where a decent estimate can be made.

The deadline from above is just horrible, either results in shittier products or people working extreme overtime. Usually also with a lot more mistakes because people aren't well rested.",2024,Is Agile actually dying
diablo1128,-1,">I think that's partially driven by fear from product/management, because those groups are even MORE fearful of uncertainty.

Again I think I lucked out in mental state because I don't really give a shit to a degree.  I can definitely see that fear of management being part of the problem.

&#x200B;

>So they seem to want to shift responsibility down to the engineers. Which might work except engineers are rarely given the power to make systemic change, so you get all the responsibility and consequence and no power to make things successful.

What is the definition if successful here?  The perfect design or the solution to the problem management wants solved with a given set of constraints?

I don't know, this is probably just me but I have no problem working with management to understand what they want to solve and the concerns they want to address.  I don't need to make the ""perfect"" software solution at the end of the day.

It's like if I hired an architect to create plans for a house that I want to build.  I give them an overall idea of what I'm looking for, but don't know enough to know what is and is not possible. They do their thing and give me a preliminary design.

I'll probably give comments say what I like and don't like about it and then ask for the feasibility of changes.  Granted my changes are probably more superficial, like I want a bigger room here or can we get more natural light in that room, as I see it as their job to figure out the structural and safety stuff.

I've never built a house, but that's how I see it going in my mind, lol.

&#x200B;

>How many times have we heard stories of engineers asked to make an estimate only for that estimate to either be taken as gospel/hard commitment, or instantly ignored in favor of whatever the deadline is, decreed from on high?

I just ignore all that shit.  If management wants to impose unreasonable deadline I just work normally and if the deadline passes then it is what it is.  I keep them up to date on progress and revise estimates as needed with reasons.

If they choose to ignore them then I don't really care and it's not going to change how I work.  It's really never a surprise to anybody that we missed arbitrary deadlines since we communicate status constantly to set expectations. In my 15 YOE that has never been an issue.  Management knew the deadlines was arbitrary and was just happy things got done.

Hell I remember one time a project was over a year late and they still had a company party celebrating victory.  Not one time they look to see why it was late.  They just kept setting arbitrary and unreasonable lines in the sand until things eventually got done.  Nobody on the SW team worked over time or killed themselves to get things done faster.

I don't know if it's because I worked on safety critical medical devices at shitty non-tech companies in non-tech cities that this worked out for my 15 YOE.  I would not be surprised if somebody said this would never fly at a company like Google due to their significantly higher bar for employees.",2024,Is Agile actually dying
ArcanePariah,5,"> I worked on safety critical medical devices

I think this is a key aspect to your experience. A lawsuit, or getting FDA approval yanked can be a death sentence to a company such as yours. Also FDA approval is critical, you don't get to just slap a new version out. Also, while there is competitive pressure, like any other industry, medical device and medical in general moves a lot slower. Other industries, being 6 months late means your competitor gets to bury you.

Also, and I may be wildly mistaken, but how susceptible is your industry to being outsourced to some contractor in some random part of the world? I get a feeling it is less common, so there's less pressure to deliver by some deadline, lest you be laid off in favor of some offshore contractors.",2024,Is Agile actually dying
RougeDane,1,"> I just ignore all that shit. If management wants to impose unreasonable deadline I just work normally and if the deadline passes then it is what it is.

I love deadlines - I like the wooshing sound they make, as they pass by.",2024,Is Agile actually dying
ArcanePariah,1,"Yeah, in most cases, deadlines are amusing. However in certain industries, they are hard deadlines, as in, you will lose massive amounts of revenue for missing a release window (think holiday stuff), or you start suffering mega fines (things like GDPR compliance, or COPA compliance, etc.)",2024,Is Agile actually dying
itsgreater9000,1,"> It seems like many SWEs I have worked with, from senior to junior, want clear tasks because they fear being wrong or something.

I used to be like this, but after one too many run-ins with other devs looking to weasel a promotion in via management-by-ticket-output and not solving the given problem, paired with managers who have 0 interest in understanding the outcomes besides ""ticket moved right"" has caused me to not want to deal with the crap associated with unclear tickets.

Also, I've worked at one place in a decade of experience where I had significant freedom, latitude, and support from management to learn, discover, and implement good solutions. Every other job has been ""yeah, but like, we needed it yesterday, where's the time machine at?"". So, it highly depends on the work environment I'm in. If I'm surrounded by a bunch of machiavellian developers and incompetent management, I will _always_ push back on significant ambiguity.",2024,Is Agile actually dying
Dx2TT,-1,"Half of the SWEs I deal with neither want to think nor make decisions and are literally punching a clock. They want spoon fed tasks they can slow roll and cash checks. At the same time, companies cannot figure out how to actually vet good candidates nor pay them appropriately, so we get a team of 2 terrible devs being carried by one average and one really good.",2024,Is Agile actually dying
diablo1128,1,">so we get a team of 2 terrible devs being carried by one average and one really good.

I feel like that's every company I have worked at.  90% of the work is really done by a small subset of SWEs.  I'm not even saying the best SWEs on the team but the SWEs motivated to get things done.",2024,Is Agile actually dying
Butterflychunks,28,"We had this issue on my product. 80% of the engineers were < 2YOE and we struggled hard with agile. Basically turned into waterfall with sprints.

Fast forward several years later, more senior talent enters and the juniors have more experience. We’re executing in a far more agile way than before.

I think it does come down to experience. If you lack experience, the uncertainty is crushing. Once you have a few years under your belt, you understand that no matter the situation/uncertainty, you’re a few 1-pagers away from understanding the problem better and resolving the unknowns so it’s no big deal.

So I think it’s more a product of the market being flooded with junior engineers.",2024,Is Agile actually dying
drslg,2,"> a few 1-pagers 

Shudders in documentation that goes immediately out of date",2024,Is Agile actually dying
Butterflychunks,2,"Rely on the docs to truth seek and develop a plan, then never look at those things again. Code is the only source of truth :))",2024,Is Agile actually dying
CpnStumpy,2,"I feel like it's always flooded with junior engineers - people don't like the work, and until they do it a few years they don't know it. So they get the paper, get a job, work a couple years and be like ""Oh.. uh, sitting at a computer all day long every day is uh... No like it..."" So they leave and one less experienced engineer in the pool",2024,Is Agile actually dying
Hog_enthusiast,39,"That gap exists because there are no principles of agile. The principles on paper are incredibly vague, and one of the core tenets is “disregard any of these principles if you need to”.  

It’s like if I said “I’m founding a political movement on two principles, people always need to wear blue hats when they are inside, and people can decide whether or not to follow the first principle whenever they want with no repercussions”. What is the point?",2024,Is Agile actually dying
Comfortable_Ask_102,11,Agile does have some [principles](https://agilemanifesto.org/principles.html) and a manifesto.,2024,Is Agile actually dying
Smallpaul,-6,"Liberal democracy:

""Our government is based on the premise that we're going to have a strong constitution to protect people and provide stability. And also, that constitution is mutable.""

It's a good thing, not a bad thing.",2024,Is Agile actually dying
Hog_enthusiast,7,"That’s not the same thing though. The constitution may be mutable but the belief in the constitution is not, and there’s a defined process for changing it. Agile is like if we said “here’s a the agile constitution, you can change literally everything in it even to the point of not having a constitution at all, and there’s no defined process for how you make those changes”.",2024,Is Agile actually dying
delphinius81,2,"You need to be iterating towards an ever clearly defined goal. If iteration is doing 90 degree turns every sprint you end up back where you started with no progress. That's frustrating and more a sign of poor management / product owners, and no one wants to put up with that for long.",2024,Is Agile actually dying
ninetofivedev,40,"Sure. That's what it's supposed to be. 

But like most things, if it can be packaged up as a product or service and sold to the masses, it will be. Today, you can't talk agile without talking about a bunch of BS rituals that come along with it. Or worse, some completely bastardized version of it like SAFe. 

Today if you join a company that is strict on agile usage, what you'll find is a bunch of bullshit ceremonies that everyone spends 80% of their work attending. Fuck all gets done. A bunch of people, who aren't your boss, act like they have decision making power. When their job is literally to hop on meetings all day and try and direct things they don't even understand.

Some companies probably have success with Agile. But more often than not, those are companies that abandoned the ""service"" model and did things their own way.",2024,Is Agile actually dying
potatolicious,13,"Sure. Kind of. Depends on who you ask.

The trick is that Agile is both a general approach to software development and also an extremely regimented process with a lot of arbitrary rituals.

As originally proposed in the Agile Manifesto by Beck et al, Agile is mostly a philosophy and loose set of approaches.

As actually implemented in-industry it became a funhouse mirror caricature of itself. One of the original tenets was ""Individuals and interactions over processes and tools""... and in practice there was/is an intense focus on processes and tools. So much so that you have certifications around it.

Relatively few companies/groups practice Agile in the way that the original Manifesto proclaimed, many more follow the dogmatic version. So as to what Agile ""is"", you get into the age-old problem of whether something is defined by its theoretical ideal or its practical real-world use.

\[edit\] Worth adding - since I think I'm coming off as pretty pro-Agile-Manifesto here is that the Manifesto is quite a vague document. It proffers a lot of principles and some general vague gesturing at solutions... This is the Agile leads so much to ""you're doing Agile wrong"" type accusations - because the document is so vague that you can project basically whatever you want on to it!",2024,Is Agile actually dying
Schmittfried,1,"> also an extremely regimented process with a lot of arbitrary rituals.

Such as? What exactly about reviewing your finished work, reflecting on the team and process, and planning the next iteration seems arbitrary to you?

The only ritual I find redundant is the daily standup (with that frequency). ",2024,Is Agile actually dying
potatolicious,4,"> What exactly about reviewing your finished work, reflecting on the team and process, and planning the next iteration seems arbitrary to you?

That's literally every type of product development, including non-Agile. The above description *literally can also describe waterfall*.

""We have cycles of reflection and planning, followed by execution"" is literally how 95% of software is made.

This is what I mean by the Manifesto being vague to the point of uselessness in general - it proffers platitudes that sound obviously good but also apply to many other schools of software production.

The rituals that I'm talking about are the common manifestations of Agile that *aren't* also simply universal to every other type of development: backlogs, planning poker, stories, burndown/velocity, kanban, etc. These are concrete practices that are fairly unique to Agile, as opposed to simply being general practice across all schools of development.",2024,Is Agile actually dying
Schmittfried,1,"> That's literally every type of product development, including non-Agile. 

So? What makes Scrum worse than those others then?

>The above description literally can also describe waterfall.

Not really. Waterfall typically doesn’t include short iterations with continuous reflection and improvements. That’s literally why it’s called waterfall.

> ""We have cycles of reflection and planning, followed by execution"" is literally how 95% of software is made.

Yes. The difference is waterfall does it at the end of the project whereas agile methods typically consider the project an ongoing stream of requirements and do these things in short intervals.

Of course, everything works with cycles of planning, execution and reflection if you consider the trivial case of one big cycle, too.


> backlogs

How is that a ritual? How is it unique to Scrum/agile? And how is it arbitrary?

>planning poker, stories

Fair enough. Then again, they have their reasoning behind them. I don’t consider them completely arbitrary. 

>burndown/velocity

Measuring progress. What’s the problem? How is it unique to agile?

>kanban

That’s not a ritual, it’s a whole different method. I‘m not even sure if you’re criticizing agile as a vague concept, all agile methods or Scrum specifically at this point.

> These are concrete practices that are fairly unique to Agile, as opposed to simply being general practice across all schools of development.

Yes and for quite a few of them there are analogs in other methods. My point is: You‘re just enumerating stuff, not explaining why agile methods are so arbitrary and (I suppose) bad.",2024,Is Agile actually dying
robhanz,3,"The daily standup is *really* useful if you're trying to get as much stuff done as possible, and if you aren't pre-assigning tasks.

Making sure that people aren't working on the same thing, and that anybody blocked (and using blocked in an *extremely* wide sense) gets unblocked ASAP makes the daily standup super helpful.

It's used like that maybe 5% of the time. MAYBE.  Most of the time it's just a daily progress check, and that isn't helpful.",2024,Is Agile actually dying
Schmittfried,1,"I find the standup useful too, just not on a daily basis. But that may be because I was primarily in companies that struggled to package stories small enough that daily coordination made sense. ",2024,Is Agile actually dying
robhanz,1,"Any time someone says ""you're doing X wrong!"" they should be required to come up with *specific* things that aren't being done, and what should be done instead.

Otherwise, STFU.",2024,Is Agile actually dying
Hog_enthusiast,6,"On paper, at its core, agile is nothing. But we don’t define things how they are on paper. The definition of a term is based on what people as a society use it to represent. So while the agile die hards may say Agile is flexible and whatever you want it to be, that isn’t really true. Because businesses, agile certification programs like SAFe, they all rigidly define agile to be a system of specific meetings. People use the word agile to represent those meetings and processes.",2024,Is Agile actually dying
Schmittfried,2,"No, you’re talking about Scrum and Safe. ",2024,Is Agile actually dying
Hog_enthusiast,6,Those are agile. When companies say they do agile that’s what they’re talking about. When people say they have agile certifications that’s what they’re talking about. When devs complain about agile that’s what they complain about. That overrules whether or not the agile nerds believe scrum is different than agile,2024,Is Agile actually dying
Schmittfried,1,"Kanban is also an agile method, to name a counter example.

Regardless, I don’t see much to complain about with Scrum that wouldn’t be true with any other method as well. ",2024,Is Agile actually dying
Envect,0,"People misusing the term agile doesn't somehow invalidate the manifesto that lays out what, exactly, is agile. You'd do well to read it rather than call people nerds for having a more complete understanding of the topic.",2024,Is Agile actually dying
NUTTA_BUSTAH,3,"You are not wrong, but their point is that agile is no more a philosophy, but part of language, and it is describing completely wrong things. Same goes for many things in the tech space, DevOps coming to mind as the first thing. That was also a philosophy, and now it's just ""an infrastructure-focused engineer that wears 10 hats and hiring them is supposed to fix everything"".",2024,Is Agile actually dying
Hog_enthusiast,2,"Exactly. Using “well that’s not agile” as a response to legitimate complaints about the thing everyone refers to as “agile” is counterproductive and aggravating. The same people who say it isn’t agile will refer to it as agile, as long as it isn’t in the context of it being criticized.",2024,Is Agile actually dying
Izacus,1,"Words mean what people think they mean. And right now when people say ""agile"" they mean scrum ceremonies.",2024,Is Agile actually dying
Envect,1,"Well, I and many people like me think it means self-organizing teams. Why is your interpretation the correct one?",2024,Is Agile actually dying
diablo1128,2,"While you and me hear Agile and think the manifesto.  The vast majority of people hear Agile and think Scrum.  It's not really a matter of who is right or wrong, but everyday nomenclature has resolved to Agile == scrum because that's what most companies are using as a process.

The vast majority of SWEs don't care enough to internalize Agile and learn how it came to be.  They just blindly follow a process that companies call being Agile and complain to the internet along the way.",2024,Is Agile actually dying
xelah1,1,"> Isn't that what Agile is at it's core?

I quite like the idea that it's like treating your work as a series of experiments: have a hypothesis that doing a certain thing in a certain way is valuable and technically sensible, do some small amount of work in that direction, and then validate that the hypothesis is correct....and do all of that in as short a loop as possible, over and over.

Following that it's not enough to be iterative. Many fake-agile people iterate, trying to do a little step of their pre-determined plan at each iteration and/or doing nothing to validate it.",2024,Is Agile actually dying
Perfect_Temporary271,1,"""Doing Agile"" should die. Classifying ""Agile"" as a verb should die. 

This is what the Mckinsey style consultancies who are leeches and pests to Software development do with their Scrum and SAFe BS.

The real intention of Agile maifesto was to treat ""Agile"" as an Adverb - it qualifies ""how"" you do things. Like ""Be Agile in the way you work and deliver Software incrementally"".

That can be Implemented in many different ways. 

But just see the r/agile sub - it's infested with Scrum Masters, Agile coaches and POs who benefit from the Agile industrial complex and they have now fully invaded Software development - partly to be blamed on the Techies and Tech leaders for giving up the space and the influence so meekly. They are not going to give the control back to developers and development teams.

But they can't hide their shit for long. There are already several movements gaining ground - like NoEstimates, Story Mapping etc. that are driven by develoeprs and self-driven techies and most of the Big tech companies don't do the Agile TM nonsense anyways. Let's see how the future turns out.",2024,Is Agile actually dying
AideNo9816,0,I don't know if it is or isn't and quite frankly I don't care to waste brain cycles thinking about it. If you got ten smart people and just let them get on with it I'm sure they'd negotiate a working style that would be effective. Way too much time and effort is spent on process rather than just letting adults work it out for themselves.,2025,Is Agile actually dying
darknyght00,-1,"Nope, that's what agile is at its core. The core of capital Agile is tool and process bloat that only benefits Agile coaching firms and the type of management that spends the two hours a day they aren't holding useless meetings and pestering ICs for updates jerking off over the latest Gallup survey results",2024,Is Agile actually dying
Bullshit103,46,"lol I hate these fucking bootcamps. 

My best friend did a Front End Developer bootcamp around 10months. Got his certification and can’t get a job because he still has no idea what an API is. It drives me bonkers. I hate how all these dumbass tech influencers have convinced people that coding is easy. 

I love my best friend, but he’s not an engineer. He’s a salesman and that’s okay, they make a fuck ton of money too.",2024,Is Agile actually dying
orbtl,12,"You only get out what you put in.  IMO the boot camps are there to give you a base level knowledge of how coding works and how to do your own research to learn more with that fundamental knowledge you gained.  If you go and expect them to teach you everything you need to know you will not likely succeed.

I went to a 3 month boot camp and got a job a month later.  But I spent every free moment I had doing more research to learn more stuff, reading docs, watching youtube vids, practicing leetcode problems etc",2024,Is Agile actually dying
gHx4,4,"> *""If you go and expect them to teach you everything you need to know you will not likely succeed.""*

The problem is that many bootcamps do sell themselves by convincing people to expect that. For example, by throwing around figures like post-camp employment rates.",2024,Is Agile actually dying
nzifnab,8,"One of our hires out of boot camp is a VERY solid junior, I've also seen some come out that were... missing some fundamentals or just couldn't complete a task for the life of them.

It really depends on the individual and what you put into the boot camp. They can work, or they can be a waste of time if you aren't invested in it.",2024,Is Agile actually dying
TTCondoriano,3,"I've seen the same. One of the best engineers I've ever worked with was fresh out of a 12 Week boot camp.

But also one of the most helpless engineers I've ever worked with was fresh out of a 12 week boot camp.

There was a third I worked with who was also helpless after a boot camp but eventually became one of the best engineers I've ever worked with.

I think it especially depends on the individual (and also the program). Also just because someone is weak at something today doesn't mean they can't grow.",2024,Is Agile actually dying
7HawksAnd,0,"I am certainly not Pro Bootcamp, but I do concede it’s largely because people conflate bootcamp with some sort of [Matrix Cheat Code](https://youtu.be/6vMO3XmNXe4?si=3LsjwD_RPsuqcMu1).

Where bootcamp originates is the military, right? No one expects someone who just finished bootcamp to be able to be some seal team 6 operative taking out bin Laden in  40 minutes.

All that’s to say, I agree with your sentiment that it’s just a quick crash course to jump start your education journey and not the end of it.

If bootcamps were pedagogically sound, all the top schools would start ever CS student with a bootcamp instead of intro to CS.",2024,Is Agile actually dying
Ok-Yogurt2360,5,Bootcamps can be quite nice but they oversell themselves a lot. Bootcamps work when you already got the core skills needed to learn programming.,2024,Is Agile actually dying
nightzowl,5,If he is your best friend and you know the problem he has then why not explain to him what an API is or even send him a YouTube link explaining it?,2024,Is Agile actually dying
DeathVoxxxx,6,"A lot of bootcamp grads truly believe they are employable after, and won't care to listen to anyone telling them otherwise. Some guy I knew went to a bootcamp. When I found out, I reached out and tried to work my way towards gently letting them know they'll need more upskilling. He was pretty dismissive before I could get to that, so I let it be (wasn't gonna hassle him with unsolicited advice). He ended up not doing anything with the bootcamp.",2024,Is Agile actually dying
Deleted Account,1,I’ve seen CS majors come into the embedded industry and are completely clueless as to what a register is and how to read/mod/write and/or mask some bits. It’s like all they know is web oriented development. So it goes both ways and shows it’s about what you put in to it as well as the curriculum.,2024,Is Agile actually dying
theavatare,5,Might be the first time someone say i said something right on the internet so thanks! Only took like 25 years of use!,2024,Is Agile actually dying
dablya,6,">Now if your company is like ""Hey, let's be flexible in our process, iterate on our product, deliver software bit by bit, and constantly try to improve our process and workflows""...

The problem is your company most likely isn't like that... If it was, it would've succeeded with agile or ""agile"". More likely your company is like ""We'll pretend to adopt a flexible process that allows us to iterate and deliver software bit by bit until that process fails to deliver on a 6 month project plan we committed to in advance. And then it's crunch time/do whatever it takes to deliver something that looks a little like delivery""",2024,Is Agile actually dying
ninetofivedev,2,I’m not describing my company. I’m describing a lot of people’s companies.,2024,Is Agile actually dying
dablya,1,"My point is that you’re not, actually.",2024,Is Agile actually dying
aristarchusnull,1,But only if those are more than mere words....,2024,Is Agile actually dying
readynext1,1,I think a lot of companies interpreted agile as upper management can control the development process,2024,Is Agile actually dying
NightflowerFade,1,"What the hell are agile ""skills""? I'm no agile expert but all I've known of agile is putting cards in a jira board for each sprint.",2024,Is Agile actually dying
Nulibru,1,"I think the problem is you need technically good people who work well as a team to make it (2nd last paragraph) happen.

And they'd probably do a decent job using any methodology.

But if you have bad developers who are too busy playing politics agile won't fix it.",2024,Is Agile actually dying
ReflectionEquals,1,Convincing 20-50 people that this approach is good can be done. Convincing a large company where people are just in it for the pay check and benefits… that’s where agile fell down.,2024,Is Agile actually dying
Perfect_Temporary271,1,[https://safedelusion.com/](https://safedelusion.com/),2024,Is Agile actually dying
_AndyJessop,18,"Do you mean ""scrum"" is dying? Projects with longer iterative cycles and kanban with releases is not incongruent with Agile.",2024,Is Agile actually dying
theavatare,7,"No my point is talking about agile these days is useless.

Is better to just talk about a specific methodology and how it got adapted to a domain.",2024,Is Agile actually dying
jacobissimus,44,The real agile was the scrum inside us all along,2024,Is Agile actually dying
Infamous_Ruin6848,8,"Same here. We just do waterfally ""agile"" because we deliver embedded devices and kanban for the cloud tech. There's no reason to go full on agile.",2024,Is Agile actually dying
Hog_enthusiast,41,"Agile is basically just “what if we had a business methodology based on the no true Scotsman fallacy?”

“I don’t like how agile forces you into meetings that waste your time”

“Well actually agile is supposed to change based on your needs so that’s your fault, you’re just not doing agile correctly”

“But every single place I’ve worked has implemented agile in basically the same way and it has the same issues and agile certifications are based on teaching people to do things the same way”

“Nuh uh that’s actually not agile”


If the definition of agile is just “when it works it’s agile and when it wastes your time it isn’t agile” then there’s no actual value to it.",2024,Is Agile actually dying
theavatare,23,"Agile was a reaction to a previous movement like CMM certification. But for real we need to stop saying the word agile and just talk about specific processes and its variants for different domains.

Like web development for a e commerce should look different from and ai chat application on your phone",2024,Is Agile actually dying
Schmittfried,-5,"> But every single place I’ve worked has implemented agile in basically the same way and it has the same issues

I seriously doubt that. I’ve never seen it implemented the same as in a different company and I‘ve worked for 5 different companies. 

> Agile is basically just “what if we had a business methodology based on the no true Scotsman fallacy?”

Not really, no. ",2024,Is Agile actually dying
Neurotrace,3,Who could have forseen that stopping to think for a minute before committing code to file could be useful,2024,Is Agile actually dying
brazzy42,2,"Agile was a reaction to people stopping to think *for half a year* and producing hundreds of pages of detailed specifications before writing *any* code.

Yes, people actually used to do that routinely. It did not work well. See https://en.m.wikipedia.org/wiki/Software_crisis",2024,Is Agile actually dying
Neurotrace,1,"True. I think we just swung the pendulum too far the other direction. Just recently I got the opportunity to work on a project with, I think, the right balance. Planning time was about 3 days, execution time was about 4 weeks, we're scheduled to finish 1 day ahead of schedule. Previously this project got tossed to the side because it required planning for more than a couple of hours and wasn't expected to be done in 2 weeks. Absolute insanity in my opinion",2024,Is Agile actually dying
tamasiaina,4,"In all my ""scrum"" teams I've worked on. It eventually devovled into Kanban style eventually because scrum was just too expensive with so many different ceremonies.",2024,Is Agile actually dying
MistryMachine3,8,"Yeah, what exactly is the alternative to Agile?  Waterfall?  Is there a company in the world still doing that for software?",2024,Is Agile actually dying
ninetofivedev,43,"If it were simply ""do agile or do waterfall"", this would be the case. In reality, it's ""We're doing agile. We're doing scrum. We're having these 18 ceremonies. We plan with t-shirt sizes and points because that's what the cargo cult told us to do. Every 8-10 weeks, we spend a week pretending we're going to make a plan and stick to it, even if it doesn't make any sense. Week 1, our entire plan will be thwarted because some bullshit will take priority. We invite all our devs to all of our meetings because we need everyones input. Nothing seems to get done and our developers spend 20 hours a week in meetings, but we can't figure out the problem. Only certain people are allowed to move things into the current sprint. If you have something you think needs done, you can throw it in the backlog and you'll need to get like 16 people to agree to it before you can work on it.

So yeah, I think there is something between that and waterfall.

In other words, most teams would be better off having no ""framework"" than whatever that nonsense is.",2024,Is Agile actually dying
hubeh,3,"We've switched to poker chips now, clearly points and t-shirt sizes weren't fast enough.",2024,Is Agile actually dying
Schmittfried,8,"> We're having these 18 ceremonies

What 18 ceremonies are prescribed by Scrum exactly?

> Every 8-10 weeks, we spend a week pretending we're going to make a plan and stick to it, even if it doesn't make any sense.   

Let’s not get into the „That is not agile“. How is that even Scrum?

> Week 1, our entire plan will be thwarted because some bullshit will take priority. 

Rash and chaotic management will produce bullshit with *any* project management methodology. How does this truth warrant cynism against the method rather than stupid management? I mean seriously, how is any method supposed to clear the bar of reigning in idiotic managers?",2024,Is Agile actually dying
ninetofivedev,4,"Because it's bad more than it's good. The purist form isn't a methodology at all by being so vague, that it's not really useful. The other forms are solutions looking for problems.

And because the majority of people have a bad experience with it, Agile becomes a meaningless term. Because who knows what level of top down management style you're getting that has been deemed ""Agile"".",2024,Is Agile actually dying
Schmittfried,4,">Because it's bad more than it's good. The purist form isn't a methodology at all by being so vague, that it's not really useful. 

That’s why I didn’t talk about it. My questions, that you didn’t answer, were specifically about Scrum.

>The other forms are solutions looking for problems.

Projects incapable of reacting to change, years of development without deliverables, madeup deadlines and stuff like that are not problems that needed (and still need) solutions in your opinion?

Scrum isn’t perfect at solving all of them, but it makes an effort to establish a structure that addresses all of them.
>And because the majority of people have a bad experience with it

Source?
>Agile becomes a meaningless term. 
That’s a non-sequitur. And again, I didn’t ask about Agile.

>Because who knows what level of top down management style you're getting that has been deemed ""Agile"".

Again, that’s criticism of bad management. Not of Scrum, and not of Agile.",2024,Is Agile actually dying
ninetofivedev,2,"Source: read the fucking comments on any agile related post on a dev subreddit

Scrum is another meaningless term. 

I’m not saying that people can’t figure shit out. They can. I’m saying most companies are top down driven, which means things either get whored out to agile consultants who will do whatever it takes to keep those billable hours rolling or some clown exec will start an entire organization for project management. And that org will be so disconnected from everything following their bullshit “teachings” from some other agile organization.

The entire project management as a service industry has made this shit absolutely horrid.",2024,Is Agile actually dying
Swamplord42,2,"> read the fucking comments on any agile related post on a dev subreddit

Most workplaces have some level of dysfunction  and no one is going on reddit to talk about the parts that are going well.

On top of that, the entirety of scrum and Agile in general is about parts of the job that people don't like to begin with. A lot of people would rather do whatever they want (or not do any work at all if we're being honest). Agile/Scrum are about organizing how work is done, there will always be resistance to that.",2024,Is Agile actually dying
aristarchusnull,2,"This is the sad truth, I'm afraid. I've been in places that are relatively better at agile, and places that aren't. The place I'm at now is very much like what ninetofivedev describes. We've snuck in waterfall-like practices, such as due dates, without realizing they are anti-agile. We have this silly notion that story points are equivalent with time. We think we're doing a kind of scrumban, but it obviously isn't. We could be so much more efficient and agile, but we're not. No one seems to notice this but me.",2024,Is Agile actually dying
MistryMachine3,-5,"Agile doesn’t mean doing stupid shit.  Whatever you want to call your methodology, if you are being dumb it isn’t the methodology’s fault.",2024,Is Agile actually dying
ninetofivedev,8,"""Just not doing it right"" is the excuse as old as time.",2024,Is Agile actually dying
MistryMachine3,-2,The whole point of Agile is to modify it to get the job done and put productivity ahead of documentation.  If you are wasting developer time in meetings etc. that is not the methodology’s fault.,2024,Is Agile actually dying
ninetofivedev,8,"You're not the first person to say that, but you're denying how nearly all organizations operate. 

Like I hear what you're saying. You're not saying anything new. That's not the reality of the situation. I'm not blaming the methodology. I'm saying that for some reason, there is a phenomena where despite all that, that's not what ends up happening.",2024,Is Agile actually dying
theavatare,5,We just need to stop using the word agile is not useful in conversation. What is more useful its the specific agile methodology being practiced and what domain.,2024,Is Agile actually dying
Deleted Account,3,[deleted],2024,Is Agile actually dying
MistryMachine3,2,Waterfall is great when there are mostly knowns.  Works well for physical infrastructure.  Software is a moving target and the tech you will use in 2 years hasn’t been invented yet.,2024,Is Agile actually dying
Izacus,2,"Really? What kind of tech are you exactly using that hasn't been invented like 10 years ago? (React is 10 years old now, most common libraries and languages are nearing more like 20-30 year mark.)",2024,Is Agile actually dying
Deleted Account,2,"We are. Tho, we specialize in critical sw, so niche case. And also, in many ways, it's a false dichotomy",2024,Is Agile actually dying
_alber,1,my team does shape up and it's amazing,2024,Is Agile actually dying
khooke,1,I’ve worked on many large government projects recently that were strongly committed to waterfall development methodology.,2024,Is Agile actually dying
Double_A_92,1,Government contractors maybe that don't care about the product and just want to milk that sweet sweet tax money.,2024,Is Agile actually dying
MistryMachine3,6,I was a government contractor for a long time.  We certainly didn’t milk anything.  The jobs I have had in other sectors are waaaay less concerned about getting things done in a timely manner.,2024,Is Agile actually dying
Double_A_92,0,My point was more about the waterfall process that usually produces something that nobody wanted at the end...,2024,Is Agile actually dying
abrandis,1,"Kinda funny how before Agile came onto the scene people were building software ....Agile in its original form was about empowering developers, but then managers and the agile consulting cottage industry became a  thing and executives were giddy about seeing progress via dashboards the entire thing went to shit ...

. We really don't need agile in the state it is today, building quality software is the same as it always has been, small talented motivated teams building well defined projects with minimal scope creep.",2024,Is Agile actually dying
ledouxx,1,Communism,2024,Is Agile actually dying
larsmaehlum,326,Right now most Agile companies are doing semi-waterfall with Jira.,2024,Is Agile actually dying
Deleted Account,89,wagile!,2024,Is Agile actually dying
enceladus71,21,"This term deserves its own logo. Something consisting of 2 parts, split vertically, perhaps with some water dripping because it's supposed to indicate the relationship with waterfall. And if we want to go crazy we can add something that indicates iterations like a shaft going back and forth.",2024,Is Agile actually dying
Deleted Account,11,[deleted],2024,Is Agile actually dying
agumonkey,1,on point,2024,Is Agile actually dying
NUTTA_BUSTAH,0,Would probably work best in a black and white format or perhaps in a yellow tone.,2024,Is Agile actually dying
morphemass,10,"Ahhhh, yes - where the requirements are drip fed to the engineering team as POs think of them.",2024,Is Agile actually dying
Mortal_Crescendo,2,Fragile!,2024,Is Agile actually dying
Sensitive-Flatworm87,1,OMG you made my day.,2024,Is Agile actually dying
bulbishNYC,66,"Managers gets the best parts of agile and waterfall - can keep shifting priorities and requirements(we agile), and our engineers will need to deliver the above mess on waterfall timeline.

Engineers get the uncertainty of agile AND deadlines.",2024,Is Agile actually dying
PoopsCodeAllTheTime,9,"Managers love it so they will keep implementing it. As long as engineers don't learn to hold leverage and keep competing amongst each other, we will lose.",2024,Is Agile actually dying
ZennerBlue,29,Iterative Waterfall,2024,Is Agile actually dying
Shnorkylutyun,19,Waterfall was always meant to be iterative. Just none of the business people bothered to look past the first slide...,2024,Is Agile actually dying
Convenient_Wisdom,4,"Iterative in what way? 
AFAIK Waterfall was based on traditional engineering project management, which were planned beginning to end with phases like design finishing before implementation started. For example, building a bridge over a river - which you cant do iteratively.",2024,Is Agile actually dying
Antilock049,2,Gut reactions and gumption is all you'll get from a business degree tbh,2024,Is Agile actually dying
larsmaehlum,14,If it was only iterative.,2024,Is Agile actually dying
mjratchada,1,"Having done iterative waterfall, I would say Agile is nothing like that.",2024,Is Agile actually dying
keefemotif,20,"Everything is agile, everyone is an engineer, etc. I have had the worst experiences with waterfall shoved into agile shoes.  So many status meetings, jira tickets, kanban boards endlessly inflating a simple task to look big on some quarterly report.",2024,Is Agile actually dying
SkyPL,5,"Status meetings, jira tickets, kanban boards, were all born out of Scrum, not Waterfall.

Waterfall requires *zero* meetings, boards or tickets, outside of those between the developers themselves. But it does require a technical specification to comply with. It's a kind of development that is done *very* rarely.",2024,Is Agile actually dying
keefemotif,5,"Real waterfall I've only ever seen on government contracts, with specific SLAs. It can be effective, if you've got the time and money to do it. 

I'm a big proponent of rapid prototyping, small teams and largely informal meetings.",2024,Is Agile actually dying
SkyPL,2,"> Real waterfall I've only ever seen on government contracts, with specific SLAs. 

Me too!",2024,Is Agile actually dying
augburto,40,"1000% true. They'll even have all the ceremonies like demos and retros but when things come up that differ from original design (which is the entire point of agile -- to be able to catch these things ahead with stakeholders so you don't end up building something completely out of line with what is desired), rather than changing things and course correcting, they just say ""Fast follow"" and then never get to it lol",2024,Is Agile actually dying
LearningAllTheTime,12,Scrumfall,2024,Is Agile actually dying
aristarchusnull,4,"Yes, that's right. I was astonished to read in my copy of _The Art of Agile Development_ that the authors explicitly tell you multiple times not to use anything like Jira.",2024,Is Agile actually dying
larsmaehlum,3,There’s a big difference between agile and Agile,2024,Is Agile actually dying
xdyldo,2,Why?,2024,Is Agile actually dying
aristarchusnull,2,"Because Jira et al. have features that are waterfall-like, and thereby encourage you to lose focus on the simplicity of agile and be anti-agile.",2024,Is Agile actually dying
xdyldo,2,It also has features that are agile as well? You don’t have to use all features,2024,Is Agile actually dying
aristarchusnull,2,"I suppose that the authors might say that having those non-agile features so readily available would make it easier to slip into anti-agile, especially if the corporate types up above were enamored with the waterfall-like reporting and so forth.",2024,Is Agile actually dying
whisperwrongwords,1,Yay scrumfall,2024,Is Agile actually dying
derpdelurk,1,Aqua scrum.,2024,Is Agile actually dying
jdlyga,176,"We're due for a ""protestant reformation"" of agile. Use the principles from the manifesto and work from there. There's so much cargo cult and overly prescriptive processes that don't necessarily work and actually violate many manifesto principles that we're due for a massive overhaul. The manifesto itself is great.",2024,Is Agile actually dying
espo619,52,"Yeah somehow my company adopted so much of ""agile"" and yet completely missed the intent of providing quick, iterative value to stakeholders",2024,Is Agile actually dying
szank,27,"I struggle with ""value"". How can a team provide a value in a two week sprint if delivering any mid-sized feature on the backend takes 2 months?  And the work is hard serialised. Run db migration. Update the db access layer. Update the rpcs. Update the rest api. Run another db migration. Qa stuff. Update auxiliary processes.",2024,Is Agile actually dying
RockleyBob,11,">How can a team provide a value in a two week sprint

Especially when your org defines ""value"" or ""done"" as ""delivered to the business"" aka ""in prod"". 

If all developers at my organization had to do was hand code off to QA or a release team, we could easily get stories done in two weeks.

But when we're pressured to provide estimates based on incomplete knowledge or assumptions about the capabilities of our infrastructure and support teams, or the delivery isn't clear because we haven't had a dedicated product owner, or we can't get decisions from architects or principals because they're stretched too thin, and then because of shifting requirements the devs couldn't give the testers a heads up on what to expect, so they twiddle their thumbs until the final few days when everyone hands them their stories all at once, and then there's a mad dash to complete the elaborate maze of change requests and you beg and plead and cajole and soothe enough egos to coordinate your database changes or get the security people to place your production credentials in the right file and hope that a million things fall into place but your production deployment goes tits up anyway so your story carries over to the next sprint - AGAIN, and during sprint review someone mentions your team's velocity is down and you imagine burn-

Sorry, I blacked out. What were we saying?",2024,Is Agile actually dying
Smallpaul,20,"You could break down the mid-sized feature into small features.

You could figure out why running db migrations and updating db access layers are taking more than a day, and optimize those processes.

You can put the feature behind a feature flag so QA can get to it in the next sprint.

You can keep a facade to make the auxiliary processes happy until you update them in a later sprint.

This is the work of agile: to figure out what in your processes are slowing you down and fix it.",2024,Is Agile actually dying
szank,6,"I've been in the industry for long enough to comfortably be an ""experienced dev"". I know all these things. I know the solutions. Unfortunately I am not running the show.",2024,Is Agile actually dying
Envect,2,"Agile is about letting teams self organize. If your company was adhering to agile principles, you *would* be empowered to change it. Agile is great when management trusts developers enough to actually do it.",2024,Is Agile actually dying
szank,1,"Somehow that place was pushing ""agile"" the most 🤷‍♂️. At this point agile is just a meme.",2024,Is Agile actually dying
Smallpaul,2,"""Agile"" is the right way to think about it. Scare quotes.

The term Agile was coined by the people who wrote [this](https://agilemanifesto.org) and [this](https://agilemanifesto.org/principles.html). 

If those are the things that the company were pushing, then I don't know why your builds take months. And if they weren't, then they just weren't pushing Agile, so why prioritize their lie over the truth?

If we allow people to steal the name Agile for things at odds with those two documents then we'll just end up re-inventing Agile under another name in a year. Seems kind of a waste of time to me. Makes more sense to defend the name by reference to the canonical docs.",2024,Is Agile actually dying
szank,1,"This is what the company was pushing. Unless the devs were trying to enforce any kind of accountability against the non-devs. Then it was just silence and pushback.

It was all about giving the dev team the support and trust to the dev team until the dev team flags a communication problem with the produc owners. The it's top down stfu and do what you are told (which is usually incoherent gibberish in the guise of requirements).

But we had agile coaches!

I don't work there anymore. Given the perennial discussions about failings of agile I see everywhere I've personally concluded that the management at large has captured agile and turned into a means of oppression and micromanagement.

At some point it's time to look at how agile is being used in real life and not how it's is supported to be used.",2024,Is Agile actually dying
Smallpaul,2,"So if you don't think that these are good practices:

[https://agilemanifesto.org/principles.html](https://agilemanifesto.org/principles.html)

Then what do you think *are* good practices.",2024,Is Agile actually dying
Envect,0,People getting it wrong doesn't invalidate the tenets of the agile manifesto.,2024,Is Agile actually dying
szank,1,"You could say the same about communism.  It's not bad, just let *me* do it this time and it will be a paradise! It will work this time, I promise !

If a good theory doesn't work in practice is it a good theory ?",2024,Is Agile actually dying
Smallpaul,1,"But it DOES work well for the teams I've worked with.

The people I work with know what Agile means, know what the documents say and practice its principles.

At this company that you work for that pushes the word ""Agile"" the most, how often do you discuss the documents at this site?

[https://agilemanifesto.org](https://agilemanifesto.org)

[https://agilemanifesto.org/principles.html](https://agilemanifesto.org/principles.html)

The difference between this and communism is:

a) some people use agile and succeed with it

b) the people who mess up communism are usually DEEP into communist theory and it's their implementation that's messed up. The people who mess up agile have generally not even read the Agile manifesto, despite the fact that it's so short.",2024,Is Agile actually dying
Marck112234,1,Right analogy but on the wrong system - 'Agile' is a mindset and a culture. The communism analogy should be applied to the BS like Scrum and SAFe - which is what many companies are doing nowadays - they don't have an Agile mindset or culture.,2024,Is Agile actually dying
szank,1,"Honest question. Why do you think agile has been so widely adopted and so widely butchered (scrum, safe and friends). Did we (as devs) asked for agile and let the management run with it ? Or was it destinies to be made a parody of itself by design?

I've worked in a few high performing teams and we really didn't have all that much processes in place. Just enough so that management knew what's going on.

I doubt we would be working differently if agile as a well published methodology never existed. On the other hand the dysfunctional teams would still be dysfunctional waterfall teams. At least we wouldn't have had waterfall coaches.

So, why are we where we are ?

If you ask me, agile was perfect excuse to push more responsibility on the developers without giving us more power, and it's the main reason it was adopted in the first place.

I still stand with my opinion that agile is a methodology that promises great thing for perfect people. And terrible outcomes for real flawed people. Like communism .
(Although I feel like I am pushing this analogy a bit too far now).",2024,Is Agile actually dying
omgz0r,8,"The pressure of incremental delivery flags those latencies as dubious - why must it take 2 months, there must be a holdup somewhere and it is likely communication. Alternatively, there might be a slicing or MVP opportunity. Agile is big on “just barely good enough” - does your increment fit that?

Things don’t change overnight - but now that is a smell that encourages someone to dig deeper, and likely lead to faster flow.",2024,Is Agile actually dying
szank,7,"Passing a new value from rest api to the db and returning it back to the rest api in a microservice setup takes 2 weeks. 80% of it is not dev time. 2weeks trying to wrangle out some answers to basic questions from the pm.
1 week for the fe to use the new field.

So I guess it's communication. 
The thing is that when a ""simple change "" takes 5 weeks then the pm and the management are happy to blame the devs and don't want to hear about the real problems the devs are dealing with .

Like bad product/project manager.",2024,Is Agile actually dying
omgz0r,7,"Perfect. We tackled this by ~~changing the definition of done~~ raising our bar for refinement to identify and supply these prerequisites. Why it was valuable… the engineering team had tons of work and was a bottleneck, and so any time work sits half complete it is bad, as you aren’t getting payoff for that work. So as part of refinement/estimating we required these things to be figured out. Talk about that a bit here: http://blog.con.rs/2024/05/08/shipping-software-jit.html

We also switched to a spec first style design using Openapi so that we could iterate with the PM but block implementation until the interface made sense. It helped a ton with domain driven design and saved a lot of wasted effort.",2024,Is Agile actually dying
Slappehbag,6,"Half of my role as a consultant tech lead is to get teams to appreciate that thinking about the work ahead of time IS work. 

Many engineers only pride themselves on their code output and struggle to engage properly in all the pre-work. 

Product refinements, technical refinements, DDD, TDD, Spec first design, RFCS, ADRs, sequence diagrams, C4 diagram, state diagrams, ERDs, breaking down stories, mapping dependencies, roadmaps, story maps etc etc etc

There are so many tools we have to accelerate work by just thinking about the next iteration beyond acceptance criteria but many teams naturally fall into a vague fence throwing between product and engineering. 

I've been able to course correct this most times, but have also ended up the bane of both product and engineering and behavioural change can be glacial even with evidence. 🤷‍♂️🤷‍♂️


... Sorry, had a bit of a mini rant there. Aha.",2024,Is Agile actually dying
omgz0r,2,I know the feel. I’ve actually been more or less shown the door more than once when folks simply aren’t willing to tackle the political winds. Local optimization can only do so much - they need to learn their Theory of Constraints :),2024,Is Agile actually dying
szank,2,"I appreciate the response. On reflection I think that my initial rant was about a dysfunctional organisation where any change was met with a total apathy.

You're making good points,  but trying to use spec first openapi design was met with resistance in my case for example. Both from devs and the management. Imagine that agreeing on the spec first and blocking the implementation did put some responsibilitity on the pm. That was deemed unacceptable. And half of the team did not see the point of doing it this way either, while it was a no brainer for the other half.

Agile was not the problem it seems, but all my experience there was filtered through the agile workflow.",2024,Is Agile actually dying
omgz0r,1,"Yeah. This is where escalation or exit comes up. And most of the time, odds are it is going to be exit. A lot do the math and pick the familiar but miserable, avoiding either option.

I made openapi more adoptable by using it as a POC for an internal service - standing up a github repo and a generated Swagger UI docs site and all. Then I’d use it during chats and it also helped that sdk, type generation, and validation generation happened “for free” (open source generators coupled with internally published npm module). People liked it and started using it. It still isn’t everywhere but now is clearly better and the friction of picking it up is minimized. Kind of a “platform engineering” approach.",2024,Is Agile actually dying
szank,1,"Yeah, but people need to actually like it. And some people (devs) there were dead set on not liking any kind of improvement no matter how many metrics you could come up with in favour for the improvement. 

I did my share of platform engineering in the way you've described. Worked well in the teams that actually cared about good engineering.",2024,Is Agile actually dying
mjratchada,2,The issue seems more to be about lack of clarity of what needs to be done. That would make it more a case of Definition of ready to be pulled into the sprint. My issue with DoD and DoR it can lead to similar issues experienced with Waterfall and can go against agile principles.,2024,Is Agile actually dying
omgz0r,1,"You’re right - I totally meant that as opposed to “done” - thanks. Essentially, quality gates on the incoming work so it passes it before hitting eng.",2024,Is Agile actually dying
omgz0r,4,"Sorry to double reply, but forgot to add: talking about this stuff in terms of its impact helps bypass bad management - they end up having to justify why this won’t help save wasted effort, rather than just shooting it down in the moment because it wasn’t their idea. I use metrics and impact a lot for harder conversations like these - essentially try and keep the conversation as far away from the person’s identity/ego as possible.",2024,Is Agile actually dying
szank,3,"Oh I did. I just got a feeling that the middle management didn't really care.

 For the record, the places where me and the team were delivering the most value quickly was not using any scrum methodologies, maybe kanban to track work.

In the places I was ranting in the post above me and let's say half of the team had a really bad chemistry with the management/pm. The other half of the team did not give a damn about anything, total apathy when ""we"" were trying to improve anything.",2024,Is Agile actually dying
Deleted Account,1,">Passing a new value from rest api to the db and returning it back to the rest api in a microservice setup takes 2 weeks.

This is my life, every day, all day, over and over and over.

'Agile' has become a neverending rerun of the shit-show called corporate software development.",2024,Is Agile actually dying
mjratchada,1,That sounds like the requirement is not well defined or understood. That work should not enter a sprint until there is a clear vision for it.,2024,Is Agile actually dying
mjratchada,3,There is no stipulation on the length of a sprint. Delivering a piece of vaueable functionality in two months sounds quite a long time. Though if that is how long it takes then simply make your sprint 2 months or break down the work if that is possible.,2024,Is Agile actually dying
SkyPL,1,"> I struggle with ""value"". How can a team provide a value in a two week sprint

Agile does not have any sprints. Agile does not have any X-week timeboxes.

That's Scrum you're talking about. It's not Agile.",2024,Is Agile actually dying
Izacus,1,"That's kind of the issue with this - it's preached by people who do one type of thing (churn out web-ish type features) and then they sell it like it fits to all type of work, even when such work can take months.

But that's a common problem with all the prescripivists that see their success in pushing their thing to as much people as possible.",2024,Is Agile actually dying
hubeh,1,Same here. 18 months ago they committed to a huge rebuild of basically the whole backend architecture. Nothing as yet has gone live and I'm not sure when it will. But we're doing standups everyday so we must be agile!,2024,Is Agile actually dying
aroras,25,"The issue is that the agile principles were commercialized.  Shops were set up to ""certify"" people in Scrum and other processes that claimed to adhere to the principles but missed the mark significantly.  Now there are people out there in the work force pushing bad ideas -- because their livelihood \_depends\_ on us adhering to bad ideas they are ""experts"" at

I'm all for a return to principles -- but the minute it becomes commercialized again under a new brand name, the cycle will continue",2024,Is Agile actually dying
Deleted Account,5,"Yes, and many of those people don't understand anything about software so have no context for applying their agile ideas. I was asked by someone newly hired as a agile manager ""what's a server?""",2024,Is Agile actually dying
PoopsCodeAllTheTime,2,why hire a manager that has experience as an IC when you can hire a charismatic salesman with a certification for much less?,2024,Is Agile actually dying
TotallyNotUnkarPlutt,11,Now I just need to decide if I should post 95 theses to my companies door or just send them in a mass email.,2024,Is Agile actually dying
rwilcox,4,I love a good 500 year old reference,2024,Is Agile actually dying
rayfrankenstein,4,"Reformed Manifesto For Agile Software Development

https://github.com/rayfrankenstein/reformed-agile-manifesto/blob/master/README.md",2024,Is Agile actually dying
theavatare,2,"I feel like this manifesto is only good for one side of the team. Management needs predictability(i get it is hard and impossible in some cases) but switching to what works for engineers only devalues our role.  

Instead of a manifesto i feel we are at a point we have enough engineering projects that we should have prescriptive examples of how to run things and that we should study them.

Building software for a rocket booster cooling thingimajig go heavy waterfall.

Doing consulting showing apps that integrate with llms. Just put them in prod without tests",2024,Is Agile actually dying
acidw4sh,1,Why do managers need to exist? ,2024,Is Agile actually dying
Lgamezp,1,"I dont agree with writing code over plan. If you don't include someone who knows about the bussiness and you start coding it usually ends in rework.

Maybe a different phrasing. Also, it starts to sound  anti-bussiness-people which wont help you sell it to them.

They are the ones who pay, like it or not.",2024,Is Agile actually dying
rayfrankenstein,1,It’s very intentionally written in way that 97% of all business people will reject it.,2024,Is Agile actually dying
combatopera,3,"My first job used the extreme programming agile methodology with minor adjustments. It worked! A team of mostly graduates delivered good stuff, and as others have said, it's because we lived the process not just box-ticked. Since then I've seen agile rebranded a few times, and each time it gets more diluted to pacify the waterfall addicts. Most recently something called 'flow' which doesn't have any new ideas. The extreme programming website still exists, c2 wiki still exists, but certain individuals prioritise sucking up over adopting simple measures proven to work",2024,Is Agile actually dying
Jestar342,2,https://agile2.net/,2024,Is Agile actually dying
robhanz,3,"The whole original scrum idea was basically:  ""You know how we work in the last few weeks of a project?  We seem to get a lot done.  Let's just do that all the time.""

People who haven't worked like that can't see it.

How do you work like that?  You focus on *done*.  You don't worry about who's assigned what, you grab the most important thing to do and *do it*.  If somebody is having issues and not making good enough progress, you work with them to figure it out or take the task, because you can't wait for them to figure it out.  You don't build out crazy infrastructure, you make sure stuff works and then improve if you need to and if you have the time.

I've worked in those situations, and that's how I see scrum.

That has nothing to do with 99% of scrum situations I've seen.",2024,Is Agile actually dying
Deleted Account,6,[deleted],2024,Is Agile actually dying
robhanz,3,"I mean that in terms of workflow, not in terms of hours.

Nobody can sustain that.

Another thing that two-week increments does (that massive planning doesn't) is push to get something at least sort-of-working as quickly as possible.  I""m a huge believer in Gall's Law.  I just inherently don't trust something that's 80% done, and 0% functional.  I do trust something that has 80% of the functionality in place.

Make it work, make it better.",2024,Is Agile actually dying
InfiniteMonorail,1,"The message is okay but manifestos feel like cults. They were really full of themselves, making a website that looks like some Jesus painting.",2024,Is Agile actually dying
IAmTrulyConfused42,1,"Dave Thomas told us this nearly 10 years ago

https://youtu.be/a-BOSpxYJ9M?si=Pen8PE6UwXhkaIok",2024,Is Agile actually dying
omgz0r,1,"I’m not convinced the core problem of Agile is the manifesto. I think the main problem is people  looking at only the process, and not understanding why the process works.  

In other words, the problems with Agile aren’t going to read the new manifesto, either. So, you have to educate them - Retro is the place to adjust process, and you can use the core tenants and theories (TQM, Theory of Constraints, etc) to justify your adjustments. 

If you can’t adjust your process incrementally then you aren’t doing Agile - try to escalate this as high as you can, with your risk increasing of being stuck with “””Agile””” if nobody in the chain understands it. Fortunately, in that case, you’re now a pro on advocating for optimizing flow and process for your next gig.",2024,Is Agile actually dying
TheophileEscargot,237,"No matter what they tell you it's[ a people problem](https://blog.codinghorror.com/no-matter-what-they-tell-you-its-a-people-problem/).

Any methodology works mostly as well as the people implementing it. Are they doing it seriously, or just box-ticking, or trying to cater to delusions of senior managers. Waterfall done well is better than Agile done badly. Whatever replaces Agile will have the same problems.",2024,Is Agile actually dying
yolobastard1337,62,">As Weinberg said, *it's always a people problem*. If you aren't working with people you like, people you respect, people that challenge and inspire you-- then why not? What's stopping you?

\*sob\*

i wish i knew",2024,Is Agile actually dying
gyroda,34,"Very much asking this question of myself today.

I used to love my team. Then all the people who knew what they were doing left, now it feels like I'm handholding. I have been told to delegate more, but every time I give someone an inch of rope they find a way to turn it into a Gordian knot.",2024,Is Agile actually dying
Nulibru,1,"Low pay, or some other reason the good people left?

And why are you still there? (only joking)",2024,Is Agile actually dying
gyroda,1,"Pay isn't that high. Not terrible, but you can get higher. 

A lot of them left to get promotions. I've managed to get promotions in part because these people leaving cleared the way - when we had an opening for senior dev there was no competition because he had taken a senior role elsewhere (I also applied for the job he took but didn't take it, he quit it a  year later). When the most recent couple left I was given a ""half"" promotion (increased pay and responsibilities, no new title) because they had to reshuffle people.

Other than that, there's a few people employed here that I just don't get to work with closely anymore for various reasons.",2024,Is Agile actually dying
DuckDatum,7,">Whats stopping you?

I’m 27 with two kids attending elementary, not even making it by paycheck to paycheck, 3yoe, 20k+ in non-student debt, already had a bankruptcy once, and I keep up on my countries current politics. Things are grim. I take what I can get, which happens to be $85,000 right now as a- idunno- data engineer turned fullstack devops, BE, and FE on a one man team.",2024,Is Agile actually dying
Deleted Account,8,"Those aren't stopping you though. If you were given an opportunity to work with a great team with decent pay you would take it right away. 

What is stopping you from working with good people is that good people are hard to find. And even then they are burned out and hamstrung.",2024,Is Agile actually dying
TuataraTim,2,"Because you usually interview with only a smart part of the team you're joining. You don't always get a chance to talk to the jerk on the team. Or you'll talk to the manager that seems really nice and says all right things but winds up being a slave driver. It's a total crapshoot whenever you join a team. Unless everyone on the team is toxic, you might very well have a better chance waiting for the bag eggs to leave rather than roll the dice on another move.",2024,Is Agile actually dying
diablo1128,35,">Are they doing it seriously, or just box-ticking, or trying to cater to delusions of senior managers.

Every place I've worked in my 15 YOE boiled down to this.  The majority of SWEs didn't care about the company process and just did the bare minimum to not be bothered by others.

The SWEs who tried to take it seriously and point out issues / improvements were hushed by the majority for the most part.  They didn't want things to change because they knew what to do and didn't care more than that.  Changing process would create different work that they didn't care to learn since they were already comfortable with current process.",2024,Is Agile actually dying
Careful-Combination7,7,How do I solve for 'do you like the people you work with?' and the answer is no lol,2024,Is Agile actually dying
Deleted Account,1,[deleted],2024,Is Agile actually dying
Careful-Combination7,3,Wish I were better at it not gonna lie,2024,Is Agile actually dying
last-cupcake-is-mine,20,"This is it. Agile, and all other project methodologies are only as effective as the people running and executing it.",2024,Is Agile actually dying
Hog_enthusiast,3,"The whole point of a business methodology IS to solve people problems. If agile isn’t doing the one thing it’s supposed to do and you have the same people problems as before, then it’s shitty. Sure the core problem is herding cats, but if I told you I had a solution to herding the cats and then you still couldn’t herd them, it’s not valid for me to say “well that’s just because you’re trying to herd cats”.

A good business methodology should work, and it should work regardless of the people implementing it because it is just that good. Look at how book keeping operates. Imagine if your ability to keep financial records was dependent on your employees being good at accounting. It would be a nightmare. So we develop business practices that eliminate that variable and force all employees to be good at it. Agile claims to do the same thing with software development but it just doesn’t.",2024,Is Agile actually dying
soundwave86,3,"I agree with this.  Having talented people working in a transparent and merit-based environment will likely make any methodology work.  That is why I like Agile, because it champions transparency and adaptability, which tends to reward merit or at least helps expose things that can be improved upon.  As such, it limits gatekeeping, silos and propagation of bad top-down decisions.  Being transparent also implies being able to speak truth to authority when technical limitations make certain deliverables unrealistic, so that you are not devolving into box-ticking a doomed project.  Waterfall done well probably incorporates the most beneficial practices that Agile done well does.  Certain team dynamics just work, regardless of what you label it or how you try to formalize it.  On the flip side, certain team dynamics are not salvagable regardless of what methodology you are using.  Agile is just a tool that can be used well or poorly.",2024,Is Agile actually dying
kjmerf,1,I read the article anticipating an argument but all we really get is an assertion.,2024,Is Agile actually dying
fudginreddit,1,"Could not agree with this more. Im only 5 years deep, but in my experience, teams are held up by 1 or 2 extremely strong engineers (or management) while the rest are just ticking boxes and doing enough to not get fired. Not that I can blame anyone for that, I dont expect everyone to be obsessed with this shit like I am.",2024,Is Agile actually dying
Droi,0,"This is not a logical argument. You are claiming that the process doesn't matter at all. So if the process is ""go play sports outside instead of work"", it's still the people's fault for not delivering and good people would have somehow delivered working code as they do something else.

Of course the process is important, of course some processes are inherently better than others - and good people makes the best of the situation regardless.",2024,Is Agile actually dying
Deleted Account,-6,"Agile and communism, always a people problem…",2024,Is Agile actually dying
PhilosopherNo2640,-1,This is the answer.,2024,Is Agile actually dying
Hot-Hovercraft2676,99,Have worked in several companies all claimed they are agile. It turns out that you are the one that has to be agile. Allow unclear requirements and priorities but finish your work before the deadlines.,2024,Is Agile actually dying
KaleidoscopeLegal583,37,Thank you for encapsulating perfectly why agile is so popular with management.,2024,Is Agile actually dying
TheRealJamesHoffa,8,"Yeah they use all these productivity tools and tickets etc etc, but it all boils down to just tracking progress in my experience. Not actually being useful to the developer experience. There’s so much that goes unused and is instead replaced with daily/weekly meetings with way too many people who don’t need to be there. Asynchronous communication needs to catch on more.",2024,Is Agile actually dying
jeerabiscuit,5,"Oh boy if I did that, the manager and client would blow up the roof",2024,Is Agile actually dying
Varrianda,28,"Agile started to become process over people(which is exactly what agile is NOT about). That’s, at least IMO, why it’s dying. It’s basically a bastardized version of what it used to be.",2024,Is Agile actually dying
SkyPL,1,"Process over people is the essence of Scrum, not Agile. People confound the two all too often.",2024,Is Agile actually dying
pydry,35,"It was never defined properly in the first place so I'm not sure what there is to ""die"" exactly?",2024,Is Agile actually dying
Deleted Account,13,Exactly how can it die if it never really lived.,2024,Is Agile actually dying
arbitrarycivilian,2,*What is dead may never die*,2024,Is Agile actually dying
Chem0type,1,"It's a mindset that's well-defined in the manifesto. What's dying is the hype around it, and I think OP is talking about Scrum than Agile, two things that often get mistaken by the other but they're totally different concepts.

Agile is simply:
>We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value:
>
>Individuals and interactions over processes and tools
>
>Working software over comprehensive documentation
>
>Customer collaboration over contract negotiation
>
>Responding to change over following a plan
>
>That is, while there is value in the items on the right, we value the items on the left more.",2024,Is Agile actually dying
pydry,5,"It blows my mind that you think that the principles you listed are well defined. 


It's more of a lame rallying cry than a battle plan.",2024,Is Agile actually dying
Chem0type,0,It's a mindset that offers you a quick way to make good decisions in a software development project.,2024,Is Agile actually dying
pydry,4,"Ive seen these very principles used to justify all sorts of bad decisions like not writing documentation and tests.


I think there *is* a kind of mindset that leads to better software development but it's not described by any of those principles.",2024,Is Agile actually dying
Pure-Finance-5759,1,Where is a mindset that leads to better sw development described? Would appreciate a link or reference.,2024,Is Agile actually dying
soft_white_yosemite,1,They’re talking about “capital A” Agile. The thing that has become a huge certification industry. Not “agility” - the thing that a team and company IS when they prioritise some things over others,2024,Is Agile actually dying
pydry,1,Yes so am i,2024,Is Agile actually dying
SilentButDeadlySquid,48,"I was in a discussion group with some ""Architects"", this must have been like ten years ago, and one of them said ""I hate big A Agile. Little a agile I like quite a bit, but when everyone starts talking it up that's when it sucks.""

It's like everything, it was a good idea, it became a religion.  Once you have a religion you need heretics and infidels. Anyone not doing the Agile dance the way your Priest-King thinks is right should be executed.

We do this a lot.  I am sure other fields do too but I only know this one.",2024,Is Agile actually dying
rubizza,8,"The accountability of standup, the kanban board, and pointing/breaking down tasks are the vital parts of the framework for me. My first tech job was in an XP shop, so Scrum feels showy and overblown. 

But I do love the pigs and chickens metaphor.",2024,Is Agile actually dying
rayfrankenstein,16,"> The accountability of the standup

That’s some maximally toxic agile, right there.",2024,Is Agile actually dying
rubizza,2,"I guess. I’m thinking about my own accountability, though, not others’.",2024,Is Agile actually dying
soft_white_yosemite,2,Accountability for what? Are you not working during work hours?,2024,Is Agile actually dying
rubizza,2,"Do you think that a 1/2 hour standup would accomplish that? So no. Reporting progress every day gives me incentive to make progress every day. 

Are these real questions? Do you not need to sometimes be accountable to yourself? That must be so nice, having a self that just does exactly what it’s ordered to. I’m not so fortunate.",2024,Is Agile actually dying
rayfrankenstein,1,"If you want to be accountable to yourself, then by all means write in a journal your goals for the day and measure your progress in the next entry.

But I don't want to have to justify on a daily basis to the rest of the team and to a manager (who technically shouldn't even be at standup) ""yes, I didn't get yesterday's required daily quota of work done because I hit an unexpected rabbithole that required an entire unexpected day of reading docs.",2024,Is Agile actually dying
SilentButDeadlySquid,1,"That's fine, you should do what works for you but I have never worked anywhere with a standup that it wasn't a huge waste of time and never saw the value in it. 

I would describe the way I do work as Agile-ish. I use a Kanban board, I break down works into tasks, I do work over iterations. I do this because it keeps me on track and it is also how I keep client's informed.",2024,Is Agile actually dying
rubizza,3,"My wife and I are both devs. We have a family standup now almost every day. It’s extremely useful (especially for getting recognition/awareness for things you did that might otherwise go unnoticed—which works well in relationships, but may also apply to the workplace). 

We tried the kanban, but it didn’t move like it does when everyone is getting paid.",2024,Is Agile actually dying
SilentButDeadlySquid,1,Lol,2024,Is Agile actually dying
negativecarmafarma,1,"Why ""Architects"" in quotes?",2024,Is Agile actually dying
SilentButDeadlySquid,2,"Lol, that's because when we talked in the group we always air quote ""Architects"". I doubt at the time any of us had that title, I know I never have, and I have build a lot of software from the nothing for a lot of different people.

It was an interesting group and it was all put together by a tech recruiter. I ended up having to leave it because of other commitments and I wonder how long it went on but I never forgot the big A Agile thing.",2024,Is Agile actually dying
InfiniteMonorail,1,Have you seen the website? It looks like a Jesus painting.,2024,Is Agile actually dying
Hot-Profession4091,37,"Story time. 

A _decade_ ago we were interviewing for a dev mgr. I asked everyone of them the same question, “Have you read the Manifesto?” All of them had “Agile” on their CVs. _None_ of them had read it. None. One guy even said, “I’ve been meaning to, but haven’t had the time.” I told him, “It’s on that poster behind you. You can read it on your way out.”",2024,Is Agile actually dying
hippydipster,31,">“It’s on that poster behind you. You can read it on your way out.”

lmao.  That's fantastic.",2024,Is Agile actually dying
Hot-Profession4091,14,"I was normally nicer than that, but that _particular_ guy had an ego and needed knocked down a peg.",2024,Is Agile actually dying
Pure-Finance-5759,1,"Having the privilege of a non-open landscape, non-hot desk office situation I’ll be hanging up the manifesto in my office! 💡🖼️",2024,Is Agile actually dying
Hot-Profession4091,1,It was actually kind of really cute. My boss was so excited when he gave me that poster and asked “where we hanging it?”,2024,Is Agile actually dying
gk_instakilogram,43,"Kanban style all the way. Daily stand-ups and retrospectives are beneficial, but agile practices are declining because they have become confused and inconsistent. Despite the intentions of the manifesto and various coaches, there are constant contradictions and shifts in approach. For the sake of efficiency, I think it is good that it is declining, but it might resurge if the industry becomes complacent and stops prioritizing efficiency, as it once did.",2024,Is Agile actually dying
Spring0fLife,36,"I'm always puzzled when people say retros are beneficial. Any way of making them *actually* beneficial?

In my experience it's always a repetition of the same structural issues. And a circlejerk of praising team collaboration or full sprint completion. Do you ever discuss anything apart from those in retros?",2024,Is Agile actually dying
szank,40,And God forbid you address the real problem ! Shit subcontractors integrated into the team? Untouchable . Broken infra ? Nothing can be done about it. Shitty requirements from the PM ? Sacrilegious.,2024,Is Agile actually dying
FanoTheNoob,10,"In my experience, it depends on how the retros are structured, retros can be just a place to vent your frustrations out into the void with fellows devs, or a place where action items get created and followed up on throughout the week.

Obviously you'd rather be in the kind of workplace that allows for the latter, but the former can also work as a way to build camaraderie if you're stuck in a place where actual change isn't possible.",2024,Is Agile actually dying
somesortofusername,2,"I'll go one step further and say that the griping and grieving that builds camaraderie _also_ is really valuable from the process improvement perspective. It forms a great starting point for discovering what's really bothering the team. An attitude of always looking for solutions in my experience makes retro discussions far too reasonable, since people are looking for problems that seem concrete, solveable, and a little too safe. Griping makes the necessary space for those problems that people are less sure about, seem insurmountable, but are honest. From there, the entire team can work together to try and validate, diagnose, fix or mitigate the issues, which is IMO a much more valuable use of the time together.",2024,Is Agile actually dying
FanoTheNoob,1,"You're definitely right.

On the other hand, what I've also seen in some terrible adaptations of agile is that management and stakeholders always like to stick their noses in these retrospective sessions which are supposed to be for devs only, making it impossible for it to be a safe space to vent frustrations without fear of retaliation or repercussions.",2024,Is Agile actually dying
BlackCow,1,"Is it just me or is griping becoming less tolerated in our profession in recent years? I miss working with grumpy devs who knew what they were talking about, seems like most are just defeated and checked out now.",2024,Is Agile actually dying
Feroc,5,"I think you make them beneficial by giving the team the power to change things they don’t like. 

I worked with teams who decided to switch from Scrum to Scrumban. Code reviews and branching strategies were changes in retros. We added rules and processes for our unbeloved support ticket work. And so on.",2024,Is Agile actually dying
nyanyabeans,3,"I've noticed retros are much better the more anonymized the feedback is, but also still relies on the team actually wanting things to improve/change.

The least productive retros I've participated in have been retros where people have to announce their feedback adhoc, verbally, themselves. I think it puts people on the spot, and feels more like trash talking if you are critical. 

Google doc where everyone types in long lists/exerpts? More anonymous, but your teammates can probably guess who's who based on writing style, or view edit history. 

One of the best retros I've been in used a sticky note retro tool. The stickies were short, so it kept peoples feedback concise and therefore less identifiable. Lots of conversation elucidating details and asking questions.",2024,Is Agile actually dying
gk_instakilogram,1,"The way I prefer to handle it is to allow all team members time to add topics they want to discuss or issues that bothered them. Then, you can address the top three issues based on votes. When discussing these issues, create an action item based on team consensus, which can be a ticket with a description of how to address the issue. Additionally, you need to assign someone to work on it, typically decided by the manager. In the next retrospective, review the progress made on previously raised issues before creating a new list of current problems. You can also have a praise section to mention wins, but I personally don't think it's necessary. The focus should be on raising and addressing issues. Once you have actionable items that the team believes they can address, and these issues are revisited in stand-ups, it becomes easier to tackle structural problems. By keeping records of how often issues arise and who was responsible for addressing them, you can better quantify and manage these structural challenges. Rinse and repeat.",2024,Is Agile actually dying
Spring0fLife,5,"This only works if the said issues are related to something you could fix inside your team. I don't really see any benefits in spending 30-60 minutes per sprint on those, do you not have a dev chat to raise and tackle such things?

And then, when it comes to actually blocking cross-team or even company-wide issues, they tend to come up every time and nothing can really be done about it.",2024,Is Agile actually dying
gk_instakilogram,2,"You just have to keep bringing it up. If it depends on other teams, mention it in the action item or ticket, ask them to address it, or at least create a record that it's on their plate. Keep following up and recording their responses. If no progress is made and it affects everyone on the team, escalate the issue and keep a record of the escalation. Ideally, all information and steps taken towards resolution should be added to one ticket, so everything is in one place. If nothing can be done, then you just have to live with these issues. Keep a record of how many times they come up and what has been affected by them.",2024,Is Agile actually dying
koreth,3,"> Daily stand-ups and retrospectives are beneficial

I think if both of these things are true, it's a sign that the team's communication has room for improvement. Ideally, people shouldn't be waiting until the standup or the retro to identify blockers or point out process problems.

Another reply talked about retros, so I'll do standups: a 15-minute daily standup meeting is 1.25 hours of meetings a week, but worse than a single meeting of that length because it's five interruptions instead of one. IMO it's usually possible to spend _much_ less time than that to communicate the things a standup is supposed to communicate.

On a team of 6 people, a 15-minute daily standup would need to save you an average of at least 7.5 hours of engineering time every week to break even with its time cost. Emphasis on _average_: ""A couple months ago, our standup saved one of our engineers two days of work"" isn't breaking even.",2024,Is Agile actually dying
slicker_dd,2,Dailies and retros are like the biggest cancer of agile.,2024,Is Agile actually dying
BlackCow,3,I think the stress of needing to give a status report *every day* ends up hurting my productivity more than it helps.,2024,Is Agile actually dying
Feroc,0,It's cancer to plan the day and to change things that don't work?,2024,Is Agile actually dying
slicker_dd,1,"Yes.

Dailies are basically micromanagement and retros are like talking to the police, anything you say can and will be used against you.",2024,Is Agile actually dying
Feroc,-1,"Who micromanages you in the dailies? The daily is a meeting from the developers for the developers. There is no manager who could manage you.

The retrospective is also only for the Scrum team. If you are blaming people instead of working on issues, then that's a people issue and shows a major dysfunctionality in the team.",2024,Is Agile actually dying
Deleted Account,1,"My team was Kanban since formation for the last four years, and we were all happy and productive as could be. Company recently mandated that all teams start adhering to Scrum practices with ceremonies and two week sprints. Not a fan.",2024,Is Agile actually dying
LaintalAy,12,"Processes can’t replace people. Incompetence won’t be fixed by a process. 

Also processes need to be adopted as a means to a specific goal. I’d say that if you have a software development team and adopts agile ‘just because’ the result won’t be great. 

Agile and the agile manifesto provided a series of guidelines that if understood, make sense (remember, people over processes and all that). But this is seldom the case and people think that you are agile if you use Jira.",2024,Is Agile actually dying
bwainfweeze,2,"Graphs are for asking better questions, not answering them.

Processes are for making people better, more responsible. 

Any metric or process that fights those goals needs a time out. Either ban it outright, or (more realistically) relegate it to being used at infrequent intervals.",2024,Is Agile actually dying
PoopsCodeAllTheTime,1,"tbh the manifesto is just bad. None of its points are rules, it's all up for interpretation, this gives absolute power to the ruler and no one can tell him that the is implementing ""people over process"" the wrong way, because the manifesto is not giving any way of measuring the implementation thereof.

It is a bible, it sounds great, every church says they know the true way of interpreting it and everyone else is going to hell.",2024,Is Agile actually dying
LaintalAy,1,"There is no silver bullet process that can be applied for every team and every product. The manifesto is just a compass with general instructions to where to go. That doesn’t make it bad, it is just reality.",2024,Is Agile actually dying
PoopsCodeAllTheTime,1,"It makes it bad for implementing a process!

I mean, it MIGHT work in a communist-like organization where everyone has the same amount of decision power. After all it is a manifesto, lol!

Jokes aside, REAL processes that are certifiable are not up for debate, when you are doing compliance with some ANSI standard or whatever, you are either doing it correctly or you aren't. 

Of course, if I were selling a process-improvement plan for your organization, I would leave all the leverage to myself by never talking up points that would hold me accountable. So Scrum is born.",2024,Is Agile actually dying
LordRelix,24,"We went full Kanban. Just put cards in the board and we will move them along to complete features. Purely sprint based agile development should be used for junior teams in my opinion but more experienced teams? Just do kanban. Hell, we do trunk based development without problems if you have a kick ass team. 

Agile ceremonies are a massive waste of time, and if the team can’t communicate well enough asynchronously then your team is busted.",2024,Is Agile actually dying
Feroc,3,"Though I also met quite a few people who think that Kanban is just the board and they pick the top item and that’s it. 

While they ignore things like WIP limits, pull principles, right to left rule and retrospectives (even if they aren’t called that way)",2024,Is Agile actually dying
SkyPL,0,"> WIP limits, pull principles, right to left rule and retrospectives

Yes, because those are not a part of Kanban ([edit: ok, except pull principles]). They are not a part of Agile either.

The *team* can agree *between themselves* to follow these practices, but by no means they are universal rules. They can also agree to make exceptions when needed.",2024,Is Agile actually dying
Feroc,0,"> es, because those are not a part of Kanban. They are not a part of Agile either.

Retrospectives are part of agile:

""At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly. ""

This and all those parts are key elements of Kanban. If you are just saying ""we do Kanban, because we use the Kanban board in Jira"" that's as valuable as ""we do Scrum, because we use the Scrum board in Jira"".

The whole point of Kanban is to visualize the work and to create a smooth workflow. That's why also Kanban comes with some rules.

Of course the team can change the rules, you can also meet with friends to play baseball and change the rules. Though are you still playing baseball if you remove the ball and the bat?",2024,Is Agile actually dying
SkyPL,1,"> Retrospectives are part of agile:

That's not a retrospective though. Agile's ""team reflects"" is a broader, more lose *thing* than Scrum Guide's ""timeboxed"" ""Retrospective"". You could say that they're 95% the same, and 5% different.

> This and all those parts are key elements of Kanban.

They're really not. They are often used because they are a good practices, but Kanban doesn't *necessitate* any of that.

Also, Kanban isn't just a one *thing,* it doesn't have a clearly defined framework, there's no ""Kanban Guide"" the same way there is the Scrum Guide.",2024,Is Agile actually dying
Feroc,1,"> That's not a retrospective though. Agile's ""team reflects"" is a broader, more lose thing than Scrum Guide's ""timeboxed"" ""Retrospective"". You could say that they're 95% the same, and 5% different.

Retrospective is just a name and not automatically a ""sprint retrospective"". The name doesn't matter, the format doesn't matter. Reflecting things and changing things that don't work is what is important.

> They're really not. Kanban as a process does not have stuff like pull principles. They are often used because they are a good practices, but Kanban doesn't necessitate any of that.

Don't know how else to say it, but you are simply wrong. Especially the pull principle is probably one of the most important parts after the visualization.

""Work is pulled as capacity permits, rather than work being pushed into the process when requested.""

https://en.wikipedia.org/wiki/Kanban_(development)

""Limiting the work that is allowed to enter the system also
creates a continuous flow of work in which drawing or “pulling”
work only happens if there is capacity.""

https://kanban.university/wp-content/uploads/2023/04/The-Official-Kanban-Guide_A4.pdf

""Kanban is a strategy for optimizing the flow of value through a process that uses a visual, pull-based system.""

https://kanbanguides.org/english/

Even in the automobil origins of Kanban it's a key element:

""Work is pushed into the queue step and pulled into the process step.""

https://en.wikipedia.org/wiki/Kanban",2024,Is Agile actually dying
SkyPL,1,"> Retrospective is just a name 

I disagree. Retrospective is a relatively clearly defined meeting in the Scrum Guide. In Venn Diagram Retro is inside Agile's Reflection.

> pull principles

Fair, you got me there.",2024,Is Agile actually dying
Feroc,1,"In the Scrum Guide it's the ""[Sprint Retrospective](https://scrumguides.org/scrum-guide.html#sprint-retrospective)"", because you look retrospectively at the sprint. A retrospective itself just means ""looking back"". You can do retrospectives for basically everything that happened in the past: software projects, sport events, your last gaming session, your last vacation or the last week, month, year of work.

The goal is the same: See what worked and what didn't work and hopefully learn for the next time.",2024,Is Agile actually dying
SkyPL,2,"IMHO, fundamentally Kanban in much closer to being Agile than Scrum ever even pretended to be.",2024,Is Agile actually dying
Vasivid,1,"Very well said. This is the sober thinking and comparing the right things for value. The sad part is that so many implementations of either Kanban or Scrum end up with using Jira... I am biased here but this is why we have started Teamhood, there are so many issues with Kanban implementations among current top tools, that they bring false understanding of what is value and how to get that value. 

Frameworks and methods become equalized with tools, which is absolutely the wrong order of things from the get go.",2024,Is Agile actually dying
Deleted Account,1,This is the best answer here. So true. ,2024,Is Agile actually dying
Franc000,10,"The main thing that is making agile dying is the problem that it serves a different purpose than upper management needs. 

So in environments where the power balance is heavily skewed by upper management that do not know the purpose of agile, agile will die. For agile to thrive, it needs to be in an environment where the workers have more power in the balance, or the upper management is very well versed into the why devs need agile (very rare that upper management deeply understands the why.)

Upper management needs predictability, because they are steering a huge ship, and it doesn't turn on a dime. So they need to see what is going to happen down the line to make decisions and steer the ship properly.

Developers need adaptability because the customers don't know what they want, and the path to get there is not fully known. They do not necessarily know ahead of time how to get there. So they need to adapt on the fly. This is the purpose of working with an agile mindset.

Predictability and adaptability are the sides of the same coin, or they are a spectrum. When you cannot adapt quickly, you need to predict to be able to thrive. When you cannot predict you need to adapt quickly to be able to thrive. If you cannot do either even god can't help you.

So, upper management needs predictability, and devs needs adaptability. If the upper management has too much power and not enough wisdom, they will enforce their need down the line, forcing dev to not work with agility. 

The middle management is the one that needs to translate the adaptability into predictability, and predictability into adaptability. If things don't work well (the upper management is not able to have the required visibility/predictable outcome to make their decisions, and devs are enforced to work in a predictable way (not agile/usually waterfall)), its because the middle management do not make the bridge properly. Assuming they are competent, it's usually because they are strong armed by upper management.

/Rant",2024,Is Agile actually dying
Altruistic_Brief_479,5,"Really well said. I'd also say that prioritizing predictability over adaptability on the dev team harms velocity. I've always liked to optimize for velocity and control the predictability problem with conservative estimates. Middle management isn't fun, but being able to keep upper management from messing with the dev team is key. It means staying up to date and understanding why they're taking the direction they are so you can tell good stories to get upper management to go away. And sometimes, it means reeling the dev team in from turning a bug fix ticket into a massive refactor.",2024,Is Agile actually dying
hippydipster,2,"> The main thing that is making agile dying is the problem that it serves a different purpose than upper management ~~needs~~ desire for control. 

ftfy",2024,Is Agile actually dying
Franc000,2,I'll allow it.,2024,Is Agile actually dying
TheChewyWaffles,9,"I think \*institutionalized\* Agile is dying - it's already apparent imo that feedback loops and solid delivery pipelines are among the best way to deliver customer value. This is simply the best way to deliver complex work (in the Cynefin model sense of the word).

I think companies are going to view Scrum Masters and Agile Coaches as unnecessary overhead. There's already evidence of this happening post-COVID. I guess we'll see.",2024,Is Agile actually dying
bwainfweeze,8,"XP era Agile was a magic box where the management team had to trust the team to accomplish goals, to strive for professionalism under their own steam. I will go so far as to say that it was a form of organized labor.  Little clusters of XP people were effectively crypto-unionists. That's one of my hottest takes.

Schwaber let the magic smoke out of that box, and I don't think I will ever be able to forgive him for it. His solutions are a pessimization of Agile, and all the levers and screws are management-facing instead of internally-facing. Scrum is more about institutionalized distrust of the devs. Treating us as dumb animals that need the lash  (an unrelenting sense of false urgency) to be useful and valuable. 

He staged a counter-coup to put the old bosses back in charge and they couldn't be happier about it.",2024,Is Agile actually dying
TheChewyWaffles,7,Schwaber and let’s not forget others like Jeff Sutherland who need the temple of Agile (and especially Scrum) to remain standing in order to have a paycheck. I want to throw up in my mouth whenever I hear the phrase “good Scrum”. And mgmt in my company swallowed it hook line and sinker.,2024,Is Agile actually dying
Blues520,1,Well said! It's a way to create a false sense of urgency to manage devs. It's creates an vs them mentality where development is a commodity. The whole idea of team spirit and building an environment that fans the flames of the creative process is lost on these imbeciles.,2024,Is Agile actually dying
bwainfweeze,1,"I’m always trying to build team throughput at least enough to fight entropy, but I guess they don’t teach in MBA programs that software cycles will slow down without a countervailing force.  They just take for granted that of course we will do as many features this year as last. That is very much not a given in my experience.

But the thing with doing things right the first time is nobody appreciates how hard it was.",2024,Is Agile actually dying
pathema,1,Ha! An actually experienced dev. Preach!,2024,Is Agile actually dying
bwainfweeze,2,"The worst part about Scrum is that I was happily trucking along, kicking ass and taking names on a Kanban project when I ran into my first Scrum sycophant. He was using bluster to cover up the fact that his team was all sizzle and no sausage. 

I didn't use Scrum until my next project after that one. It's really all been downhill from there. Look how they massacred my boy.",2024,Is Agile actually dying
Deleted Account,1,Such wisdom. Love your hot take. ,2024,Is Agile actually dying
Deleted Account,6,"continue marble physical cats cow thought pen dog head outgoing

 *This post was mass deleted and anonymized with [Redact](https://redact.dev)*",2024,Is Agile actually dying
timmytester2569,6,Kanban/XP is king. Scrum is a huge waste of time for small teams. Companies are just using it like waterfall with a Jira board. Gross. 🤮,2024,Is Agile actually dying
Fiskepudding,1,"This. Scrum sucks (most of the time).


Kanban is great. Combined with Acceptance Tests and trunk based and ci/cd it is awesome. We also do standup (sucks slightly) and retros (hard to actually implement the outcomes), and a weekly roadmap/planning/pirority meeting (20 min, like a super light sprint planning at the epic level to sort the todo column).",2024,Is Agile actually dying
fzammetti,7,"Agile isn't dying.

It's just being turned into Enterprise Crap(tm).

What I mean is you have a lot of companies proclaiming they're ""agile"", but what they're doing is building an insane amount of process and procedure around agile, making it as rigid as anything that came before, just in different ways.

Developers are starting to WISH Agile would die as a result, but they're not really wishing for the death of Agile so much as the death of turning it into just another corporate abomination.

Turns out, those in the C-suite don't actually like giving control to their underlings.",2024,Is Agile actually dying
aroras,25,People misunderstood Agile and never practiced it in the first place (spoiler alert: the thing you call Scrum probably does not adhere to Agile principles).  That bastardized version of Agile is dying (and should).  Real Agile is still beneficial and may reemerge under a new brand name in the future.  The principles still hold.,2024,Is Agile actually dying
caksters,18,"Agree. Many people equate doing waterfall type of planning in Jira and split work into 2 week sprints as Agile (Include ceremonies, story points etc) as Agile (note capital A).

Agile has nothing to do with those. Being agile means to ship software quickly to get customer feedback and readjust what you are building to ensure it meets the expectations. Thus priority is not the process or tools, but to quickly ship code to the end user acknowledging it will not be perfect and will require iterations and adjustments.

How you want to do this totally depends on the team. Most companies don’t practice agile because they don’t follow the most basic principle of shipping quickly and getting feedback. Minimising the feedback cycle as much as you can.",2024,Is Agile actually dying
NUTTA_BUSTAH,3,"To fix it a bit, quickly ship value, not just code. And to add, fail fast. If you know after the first iteration there is no saving the original idea for whatever reason, kill it and move on to the next project.",2024,Is Agile actually dying
_ak,4,"Yep. Agile as such is fairly abstract, but once you read the Agile Manifesto (most people doing Scrum that I met haven't, shockingly) and internalised it, it's easy to spot the projects that aren't agile.",2024,Is Agile actually dying
hippydipster,2,">  Agile as such is fairly abstract,

It shouldn't be:

1. Feedback loops: shorten them (ALL of them whether it's tests, or customer feedback or sales results)
2. Experiments: do them
3. Data collected from experiments: use it  (I find this needs to be said explicitly continually since people by habit go by gut rather than data).",2024,Is Agile actually dying
Izacus,1,"It's funny how this no true scotsman fallacy appears in these conversations. If noone could implement the process correctly, it's kind of a crappily defined process innit? Just like an API which noone can use correctly is a horribly designed API.

(Agile was, after all, designed by consultants to consult about it. Take from that what you will.)",2024,Is Agile actually dying
aroras,1,"That's false. Uncommon does not equate to impossible. I've worked on teams that adhere to its tenets -- and it was great.    
  
Also, Agile was not designed by consultants...one flavor of ""agile"" was \_commercialized\_ by consultants who really have no clue how to do it right (because the practitioners often don't even have a background in software)",2024,Is Agile actually dying
Izacus,1,"""Uncommon"" also can mean ""it's a lucky fluke"". If it fails most of the time, it's a bad approach. This goes for engineering, process and social solutions. Even if you've seen it work once or twice - I've also seen waterfall working amazingly a few times.

>Also, Agile was not designed by consultants...one flavor of ""agile"" was \_commercialized\_ by consultants who really have no clue how to do it right (because the practitioners often don't even have a background in software)

The manifesto was literally written for consulting gigs.",2024,Is Agile actually dying
aroras,1,"> ""Uncommon"" also can mean ""it's a lucky fluke""

It wasn't a lucky fluke; we just had team members who took an active interest in the principles behind Agile.  Those team members read extensively on the subject and convinced the other team members to do the same.  They taught what they knew and recommended books so others caught up if they were new to the subject.

Once you have a group that is reasonably knowledgable; then you can do it.  I suppose it  \_would\_ be extremely ""lucky"" if the team just ""happened"" to practice Agile without putting any effort into it...

> The manifesto was literally written for consulting gigs

This is just gross misunderstanding and oversimplification of what they are saying.  The principles of the manfiesto are applicable to software development processes, regardless of the terms of any participant's employment",2024,Is Agile actually dying
Logical-Idea-1708,5,"Agile was never mainstream. It’s just people fail to acknowledge it.

Agile is about being agile about requirement changes. What management fail to acknowledge is that agile requirement change also requires agile deadline change. You can’t change requirements while standing firm on delivery date. The whole pipeline needs to be agile.

People need to realize all the red tape around design docs and RFCs is waterfall process, and that’s ok! What’s not ok is doing waterfall while calling it agile 😂",2024,Is Agile actually dying
jakofranko,10,"I don’t think Agile is actually possible in publicly traded companies, because every quarter investors need a report, which means that at some point, somebody is going to ask “please give me an exact time you will deliver X”. This means that at some level of the organization, it doesn’t matter what your velocity is, hard times are required.

All of the effort that goes into agile is meant to abstract real time estimates, and break down work into deliverable chunks. That’s why agile is always this mishmash of waterfall, fake story points, and lots of meetings. The good aspects are often better than old waterfall methods, but “pure Agile” is just not possible imo. If somebody is going to need a real deadline, then all the ceremonies are pointless, and I think people are starting to realize, and what you’re left with is something that’s not Agile.",2024,Is Agile actually dying
metaconcept,3,"That also applies if the software is made with a fixed price contract. Management want requirements upfront, accurate estimates, gantt charts and burn-down charts. Any user feedback that might change requirements need to go through a guantlet.",2024,Is Agile actually dying
jakofranko,1,100%,2024,Is Agile actually dying
SkyPL,1,"Fixed-price software is only possible to be accomplished in 2 scenarios:

1. project has a fixed *technical* documentation, and the team that's left on its own to meet it, while said team also participated in the negotiations of the pricing and that team gets paid in line with that pricing (preferably: no money until project is completed).
2. customer is accepting all of the down-scoping that the dev teams decides to be necessary in order to meet the budget.",2024,Is Agile actually dying
wearecyborg,1,"I was thinking along these lines based on my experience. Not sure if directly related to being publicly traded, although that makes sense.

I had thought (in relation to my experience) that large and/or specific domain companies by their nature can't move so fast due to management processes. My company creates software in a heavily regulated and evolving domain for multiple clients. Each client will have a legal team and management that need to approve certain things, so sometimes we can have a ticket come in for a sprint and not even be signed off by legal. They sometimes want to launch a new product and tell us about the idea and a rough date, then don't even have a set of requirements until a month or so before the date.

So my company using Agile makes no sense with this model. 

All these companies heard about fast iterative start-ups and wanted to get on board, but have no understanding why they were able to iterate so fast.",2024,Is Agile actually dying
jakofranko,1,"Yeah it's similar for sure. The ""true Agile"" approach is actually supposed to protect you from that, because the tech team would not start a story until it is sufficiently refined, meaning requirements are in, definition is set, acceptance criteria is written, and the story is pointed. Only at that point would the technology team say ""ok, we should have that to you about X time based on our velocity."" I'm a huge fan of making your product team accountable for the work they're asking you to do, and not allowing the tech team to have to eat the cost of last-minute decisions.

  
But to your point, if the deadline can truly not be negotiated, then just drop all the ceremonies and get the work done, everything else is a hinderance. For these big companies, Agile is the new hotness even though it's like 20+ years old at this point.",2024,Is Agile actually dying
obscuresecurity,4,"SCRUM is rarely agile.

The process has too many tricks and traps to be effective in many situations.  It needs the right situations and discipline to work, which rarely exist IMHO.

Lighter weight agile processes can be done at smaller scales and with less support, Kanban for instance.  It's pretty hard to stop a team from using kanban, because they can still largely react like any other team, they just have internal processes to help various things and prevent various things.  None of which show up at the ""team API"" per-say.

SCRUM is like a hard API break via sprints.   Once you understand this, agile as in what the C2 wiki promoted is much easier to sneak in the side door, and you often just look like ""Wow, that team is getting things done.""  Product Owner can often be synthesized if needed.  If it keeps the damn chickens out.... It may even be worth it.  Getting user feedback, as an engineer?  Depends on your firm.

That's my view on agile.  Good agile is really good, but bad agile is possibly the worst clusterfuck known to man.  I will take waterfall first.",2024,Is Agile actually dying
SkyPL,1,"> SCRUM is rarely agile.

I'm yet to see a Scrum project that would be agile. And I did see several Agile teams (typically doing Kanban or XP as their framework).

Agile Scrum is like that mythical beast that all the Scrum proponents talk about, but noone ever seen.",2024,Is Agile actually dying
i_has_many_cs,4,Everything Works under perfect conditions/teams,2024,Is Agile actually dying
bwainfweeze,1,"""In theory, there is no difference between theory and practice.""",2024,Is Agile actually dying
i_has_many_cs,1,🤣,2024,Is Agile actually dying
questi0nmark2,4,"I think agile is not dying or going anywhere because so many core elements of its philosophy are now fully baked into software production. Shorter iterative cycles vs multi-year scoping and specs; CI/CD, some degree of Kanban (not least Kanban boards as a framework) and many smaller details and nuances.

What I do think is changing is the deification of Scrum specifically. I've seen scrum done well, but extremely rarely and with pretty huge investment. Most implementations of scrum violate the agile philosophy. I think this has always been the case but there was a sense that if you didn't do scrum you were letting the side down, and that seems to be fading, because so much damage was done by poor implementations and a scrum certification industry with too many perverse incentives or inadequate filters.

I've enjoyed working in Shape-up which doesn't describe itself as agile, but it is philosophically if you've actually dived into its literature and leading voices. I have then iterated over Shape Up to be true to agile principles, adding retros from scrum, and kanban, and we are currently iterating over cycles.

I think dogmatism is generally a poor approach to any essentially facilitatory approaches, but as a way of thinking about process, I would say agile principles and design templates stand well the test of time. Agile techniques I think are more variable, and context dependent. I think it is fair to say that good teams are agile, whatever techniques they employ, while I also think that solid agile leadership and processes fosters better teams. The techniques are good starting points, but as skill based and above all intentional processes and frameworks, not as formulae. 

The reverse of your point is also true, anyone who would approach agile techniques in dogmatic, inappropriate, anti-agile ways, would probably mess up any other approach or technique they embraced. Having said that, some agile artefacts are likely to reduce the cost of poor management, like short iterations, ci/cd, tdd, etc",2024,Is Agile actually dying
bwainfweeze,4,"We all do at least half of eXtreme Programming now without even talking about it. Someone once asserted to me that Scrum cannot function without it and I think that's probably true. It's certainly been living rent free in my head for almost ten years.

(The problem is not that Scrum needs support, it's that it pretends it doesn't. Pride goeth before a fall.)",2024,Is Agile actually dying
questi0nmark2,1,"Yeah that's where I'm coming from. Even if the industry dumped the ""agile"" terminology and framework and never spoke of it again, I suspect core parts of its principles have been baked into software development for a long time to come. In 10 years or 20, maybe people will forget about agile, but the oldies amongst us, and those who like reading about the history of programming will recognise a bunch of ""common sense"" stuff as having first been introduced in eXtreme Programming, Scrum, Kanban, and agile manifesto and adjacent talks.

A bit like not many programmers realise how much of modern programming patterns, tools and approaches were adopted from Smalltalk into the mainstream, from MVC to IDEs to the heart of OOP. Most people who use these concepts may not even have heard of Smalltalk or anything beside the name, yet so much of it's approach is baked in in so much of modern programming.",2024,Is Agile actually dying
SkyPL,1,"> The problem is not that Scrum needs support, it's that it pretends it doesn't.

That's an *excellent* line!",2024,Is Agile actually dying
Agilitis,11,"I think it’s just a matter of too many people confusing scrum with Agile. Agile really can’t die because all it says is: Look at what you are doing, and if something does not work, change it. 


So if agile is dying means you are changing stuff so it better suits your company: you are being agile.",2024,Is Agile actually dying
Smallpaul,6,"Agile says a BIT more than you are giving it credit for.

[https://agilemanifesto.org](https://agilemanifesto.org)",2024,Is Agile actually dying
danknadoflex,6,I hope so.,2024,Is Agile actually dying
por-chris,6,"Agile principles are applied everywhere. Fast and short feedback cycles, iterative and incremental approach, adaptiv ways of working. For example continuous deployment and A/B testing are very much agile. Today it's a normal practice in many companies. Technology has enabled us and the ""baseline"" is simply more agile today than 10 years ago.

Talking about it as a pure project management approach skews the discussion. It's also where most marketing happens.

I'm just 10 years in the business, so my perspective is limited.",2024,Is Agile actually dying
mattgrave,6,"5 year startup, we ditched agile and do a kind of waterfall right now.

Rarely we have any downside that waterfall is preached. At all.",2024,Is Agile actually dying
supyonamesjosh,1,"Startup waterfall seems fine?

The problem with waterfall is its inflexibility. That is much less of a problem with fewer people.",2024,Is Agile actually dying
WJMazepas,3,"Look at the agile manifesto. Those rules/advices are still very much valid and good to implement on it. 


One of the most important aspects of it is to let teams manage themselves and see what fits them and their use case.


Most companies have a top to bottom way of implementing Scrum, even if it is not the ideal method for that team or project. 
That's why Scrum shows problems in a lot of places. 


Hell, there were places that even our JIRA board was dictated by the CEO because he wanted to, very occasionally, enter our board and see our progress. 
But it was structured in a way that he better understood, not how we preferred. 


Was that agile? No. But if any potential investors asked him if it was, he would proudly say that it was.",2024,Is Agile actually dying
metaphorm,3,"""Agile"" (note the capital A) isn't a software development methodology, it's a set of business management practices. 

The kind of agile software development that was described in the original manifesto is also not a software development methodology, it's a set of perspectives that developers are encouraged to integrate into their own relationship with work and how they organize their time and attention. 

So in that respect agile software development was never alive in the first place, and therefore can't die. To describe it such would be a category error. All of us, as working developers, can incorporate certain types of perspectives in to our decision making process, but that's as far as it needs to go. Use it pragmatically. 

""Agile"" as sold to corporations was another productized management fad, like many others before it. It does seem to be well past its peak though that means we've still got several years to go before the lagging sclerotic BigCorps actually stop trying to do it by hiring ""Scrum Masters"" and ""Agile Coaches"" or whatever they're doing. I hope it dies sooner rather than later. This was a very bad thing for the industry.",2024,Is Agile actually dying
ConsulIncitatus,3,"Whenever given the choice, my dev teams stop using agile immediately and switch to kanban.  Put tickets in a prioritized queue and just leave them alone.  Let non-devs determine after which ticket we cut a release.

That works if you have a high performing team who doesn't procrastinate and has earned trust.  Scrum is a punishment.",2024,Is Agile actually dying
CNDW,3,"We recently had ""Agile Training"" for our entire department + Product. It felt like a gigantic waste of time. I don't think it will have any substantive impact on any of our product processes since we were already following an ""agile"" process. The whole thing felt like a racket, cooked up to convince high level executives to fork over cash.

I'm also very cynical about process, it really boils down to people management and there is no one size fits all methodology.",2024,Is Agile actually dying
ancientweasel,3,"IMO, no. Just the garbage scaled frAgile versions dreamed up as manager porn.",2024,Is Agile actually dying
tugs_cub,3,"I don’t know why people even bother to talk about big-A Agile a lot of the time. I’ve never had an experience with it (or with whatever name brand version) where it didn’t end up getting bent and hammered into a shape that fit better with what management really wanted to see. There are plenty of things that came out of Agile - the quick feedback cycles, the tools to support that - that make a lot of sense, at least in appropriate domains, and aren’t going anywhere. There’s obviously a lot of bullshit attached, too.",2024,Is Agile actually dying
remington_noiseless,3,"One of the problems with agile is that it takes power from management and gives it to the people who do the work. That's why so few places do agile based on the manifesto.

Instead scrum is more prevalent because managers love having the daily standups to micromanage people and can track everything that people are doing every day.",2024,Is Agile actually dying
Agent666-Omega,3,"I have seen agile work well and you are right, it works well on fantastic team. Like any process, you need everyone's buy in. I think the problem with agile philosophy and scrum is that it is treated like a panacea, thrown in haphazardly and hope that it works.

If you are using a process that needs everyone to buy in to it, that means when it comes to compensation/promotion and performance reviews has to be tied to it in some way or form. YMMV but there are companies who practice agile and have ICs who don't take it seriously enough and managers who don't take it seriously enough. And they get away with it. I'm sorry, process isn't a thing you just do. Process is part of the job and if it is part of the job, it needs to be scrutinized. But because it is not, because people don't understand it properly and because people know they can get away with not taking it seriously, agile/scrum ends up being more performative than effective leaving that impression that a lot of engineers have for it.",2024,Is Agile actually dying
jonmitz,11,"the alternative is waterfall. Go try that out with software, let us know how that goes (it won’t)",2024,Is Agile actually dying
tdatas,15,"Same story there though. For a skilled developer waterfall will still probably work fine because people will anticipate and deal with needs outside of what ""the framework"" says. Especially for projects that aren't websites where you aren't so easily able to break it down in to ""change this button colour"" ""do this bit"" etc etc. The fact it was used before agile implies that a lot of stuff was successfully built with Waterfall methodologies so there must've been some way people made it work.

A lot of non-trivial projects and/or mission critical software you can't just wing it/""iterate"" as you're going along, you \*\*have\*\* to spec and plan things quite extensively upfront anyway and build a load of things that a customer will never use and will only use indirectly (e.g a DBMS system). At the point where you're spending a sprint or two in planning/design what stops anyone accusing you of doing waterfall?",2024,Is Agile actually dying
pemungkah,15,Many projects at NASA were waterfall and succeeded fine. Voyager is certainly an example.,2024,Is Agile actually dying
tdatas,6,"""Ok we descoped the navigation for now, we probably won't need that till a later release anyway, not flying into the sun is a non functional requirement so how many sprints can we push that back?""",2024,Is Agile actually dying
daedalus_structure,14,"Waterfall works as well as anything else, and misses deadlines and costs just like everything else, it just requires planning which most people don’t want to do.

Go do fixed price contracting and agree on Agile and see how quickly undefined scope at time of signing makes that a horrible deal.",2024,Is Agile actually dying
Potato-Engineer,2,"""Plans are useless, but planning is invaluable.""

If you've done the planning, then you have at least half of a Plan B that you can scrape together from the ruins of Plan A. If you didn't do any planning, then you're fumbling much more.",2024,Is Agile actually dying
Solrax,12,"Probably 90% of the people here have never done waterfall, and so when they badmouth it they are just echoing what their ""Agile Coaches"" taught them.

I was in Agile training once and the trainer said ""it is impossible to write good software without Agile"" I raised my hand and said ""excuse me, I worked for a number of companies that made hundreds of millions of dollars on very successful software long before Agile existed"". I was unpopular with that trainer for the rest of the course.  But the problem is more junior engineers would have just absorbed that ""fact"" as truth, because they don't know better.",2024,Is Agile actually dying
brolybackshots,4,"My real question here is, what the fuck is an agile ""coach"" and why were u being trained by one of these fraudsters lol",2024,Is Agile actually dying
Solrax,1,"You think that's bad, I recently interviewed for a Principal role that they decided mid-way should really be a Team Lead. Interviewed with 10 people (most I've ever had), and finally the last person I interviewed with, right after their Director was... wait for it... their Scrum Master. They apparently wanted to make sure I would be fully on board with and help facilitate their Agile Transformation. It would seem I did not exhibit enough enthusiasm for Agile and was not offered the job, despite acing all the technical interviews. I had already decided I would turn it down if offered, and having to pass muster with the Scrum master was the reddest of red flags.",2024,Is Agile actually dying
Izacus,1,"Well, agile coach is a guy that spews out bullshit like ""the only other option is waterfall"" ;)",2024,Is Agile actually dying
TheBrawlersOfficial,24,"What do you mean? It's simple, just take this 200 page spec I wrote and go build it - see you in 2 years, I'm sure it'll be exactly what I was expecting!",2024,Is Agile actually dying
Deleted Account,8,"Maybe an unpopular opinion, but for small projects, waterfall generally works better than agile.",2024,Is Agile actually dying
Altruistic_Brief_479,2,"Waterfall works perfectly fine as long as the customer knows what they want, you know what the customer wants, and it's unlikely to change. It's actually cheaper than agile in these cases because the quick releases can add quite a bit of overhead.

Agile is industry's response to the fact that rarely are those conditions true in software. The rapid feedback was meant to allow course correction before going too far down the wrong path, and preventing expensive redesigns. Agile is only cheaper if customer needs change. 

I think the pushback on Agile is probably closer to pushback on scrum. Or at least to me, if feels like people were expecting Agile to come in and reduce cost significantly and it was going to radically transform companies. At first, customers get happy because people take their feedback and pivot. When they get stuck with the overrun cost because they changed their mind 40 times, they get less so and the money dries up and they get stuck with half of what they originally wanted. Or the company ends up footing the rest of the bill.",2024,Is Agile actually dying
PhilosopherNo2640,6,I've worked on waterfall projects that went fine.  A strong team can overcome a questionable methodology.   A weak team will struggle with any methodology.,2024,Is Agile actually dying
Potato-Engineer,19,Waterfall was always a non-existent counter-example. No project has ever been perfectly waterfall. No project has ever been perfectly agile. Reality is always somewhere between the two theoretical extremes. Even waterfall projects pivot.,2024,Is Agile actually dying
tonjohn,6,It’s not one or the other - there are infinite alternatives.,2024,Is Agile actually dying
Awric,2,"My company has small waterfalls, I think. We spend 2 weeks planning everything for the next 5 weeks and have minor adjustments to the design throughout.

I kinda wish we had a ~~scrum master~~ technical program manager to enforce the book keeping honestly. Sometimes key information between backend and frontend isn’t communicated because one side assumes the other doesn’t need to be in the loop for some things, even if it touches the API contract (which is wild to me)",2024,Is Agile actually dying
Resident-Trouble-574,2,"Or the V-model. Or the spiral model, that is still iterative, but tend to improve the whole project at each iteration.",2024,Is Agile actually dying
thodgson,1,"The corp I work for dropped Scrum for Agile because leadership wanted deadlines and to dictate when user stories and bugs had to be completed by.  

After 7 months, it's awful.  No visibility into process.  Poor communication.  Loads of overtime.",2024,Is Agile actually dying
Mtsukino,1,"ugh, i hate waterfall so much.",2024,Is Agile actually dying
siege_meister,1,They call it SAFe now,2024,Is Agile actually dying
SkyPL,1,"There are multiple other alternatives than waterfall. Eg. Scrum, Rapid, Chaos, etc.

Also, there's nothing wrong with waterfall, if applied to a correct type of projects. The stupid mistake people made in the past was trying to apply it *everywhere*, just like right now people are trying to apply Scrum *everywhere.*",2024,Is Agile actually dying
reddit_trev,2,"> …apply Agile…

The phrasing of much of your post suggests your only experience of ""agile"" has been Agile™, some kind of prescriptive process teams follow. 

This is most teams experience of agile and is mostly why everyone hates it. 

The original philosophy behind agile is that engineers and real users work directly together to produce working software in small iterations.

The other key philosophy is that the team chooses and runs its own process and adapts it over time as they see fit. There are, of course, a whole load of techniques and disciplines teams can pick from. 

This is not the same as most organisations adoption of scrum, which is to break a fairly waterfall project into 2 week chunks under the watchful eye of a project manager (who may be called a project manager, product manager, product owner, scrum master, etc but is still performing the role of project management).",2024,Is Agile actually dying
Lower_Sun_7354,2,"Idk.  I think agile is what you make it.  When it driven by the devs who use it, it's fine.  When it's driven by upper management to keep tabs on their employees, *coughs in micromanagement*, it kinda sucks a lot.",2024,Is Agile actually dying
jeerabiscuit,2,Fsck no it's being replaced scaled fragile with hard deadlines in advance. Let's break software!,2024,Is Agile actually dying
andymaclean19,2,"As with everything you have to take the good, throw out the bad and tailor it to your own needs.  There are good ideas in there but it is not a set of rules that you can just follow and automatically be successful.  It never was.",2024,Is Agile actually dying
El_Gato_Gigante,2,"The core problem is almost always management.  It's easier to bring in scrum coaches to passive aggressively blame devs than admit that what they do day-to-day is not working.  These processes are easily toppled by endless meetings, constant fire drills, devs as tier 1 support, and overall lack of investment.",2024,Is Agile actually dying
hippydipster,2,"It should be a requirement before writing any post about ""agile"":

Define what you mean by it.",2024,Is Agile actually dying
bwainfweeze,3,"I think it's safe to say that in many cases when we have an anti-agile post we are talking about second hand agile - whatever amorphous blob of confused ideas came to management through a sad game of Telephone. Semantic Dilution means that it doesn't matter what Platonic Ideal of an idea exists because we are never going to experience it. We just have the vocational version and we have to deal with the consequences of that.

And as one mentor who actually wrote books on the subject observed, sometimes people think they are doing Agile but they are doing Lean, and [the cognitive dissonance] makes things turn out poorly.",2024,Is Agile actually dying
hippydipster,2,"> Semantic Dilution means that it doesn't matter what Platonic Ideal of an idea exists because we are never going to experience it. 

Not with that attitude!  

The important part of agile isn't the what and how of the processes, but the whys and wherefores.  If you understand why, then the platonic ideal isn't hard to recreate for oneself.  Agile grew out of solving a problem, which was ""we have to build some software, but we don't really know what that software is - we tried specifying everything up front, but we just ended up wasting time on things it turned out no one wanted"".",2024,Is Agile actually dying
slimscsi,2,"My opinion is that developing software is a bespoke process. And management would prefer it be assembly line. Programmers, being obsessed with efficiency, buy into the assembly line approach because logically, it “should” work. When money was cheap, things became blurry, because throwing developers and process a problem “seemed to work”. Now investment is more scarce, and all of a sudden the existing methods that seemed good on paper are not withstanding reality under financial scrutiny.",2024,Is Agile actually dying
bwainfweeze,2,"I have to use a lot of my creativity and brain cells to make distinct processes and features look alike to my brain or others in order to get better at doing the class of things.

Because here's the thing: I hate doing the same thing three times. The Rule of Three says I must accept it's true, but I'll be fucked if I'm going to do the same thing six times. As a programmer, I have the tools *and the mandate* to replace actual repetition with codification of a process. Developers who don't agree that this is the case drive me nuts, and there are at least 3 on every team.  

So when I repeat an action I engage in team improvement (fix the problem). For *self* improvement I must look for tasks that are of a kind, so that I can compare and reflect on how it went this time and see if there are things I have improved since last time, or want to improve next time. 

Though in saying that I think that's one argument for short tenure at companies. When you switch jobs you often do repeat the exact same tasks, and a task you haven't done for four years is not a very good feedback loop.",2024,Is Agile actually dying
Facelotion,2,"""The reality is that bad teams will never do true Agile or true scrum.""

I am failing to see how this is Agile's problem.",2024,Is Agile actually dying
NotSoMagicalTrevor,2,I was doing agile before it was called Agile. And I'll keep doing it after people stop calling it Agile. The name is not important.,2024,Is Agile actually dying
IGotSkills,2,Oh I hope so. Agile is fine... It's fake agile that's terrible and unfortunately you can't have one without the other,2024,Is Agile actually dying
paulydee76,2,"If Agile dies, what replaces it?

I don't know how old you are, but everyone who complains about Agile remember a time before it.

Do we go back to Waterfall? Get requirements, spend a year designing, building and testing against those requirements, present it to the client, find out the requirements have completely changed, then rewrite the entire system in a couple of weeks? No thanks.",2024,Is Agile actually dying
Schmittfried,2,"No. And the negativity is because people like to complain (esp. online where it gets you karma or ad money) and because they need a scapegoat.

Agile is here to stay. For most kinds of projects we are not going back to waterfall. It didn’t work for anything but the most strictly defined projects where lives are on the line and where the additional cost can be justified (like NASA). For most projects it’s just not an option to be stiff and *not* react allow for changing specs, which is all agile reallybis about.

Scrum however, I don’t know. Specific methods come and go. But I don’t see anything particularly wrong with Scrum compared to most of the alternatives and it does quite some things right if implemented well (which is a requirement for all methods).

All the „no true scottsman“ talk about it is nonsense. Yes, if a tool requires perfect humans, the tool sucks. The thing is, all tools suck in this domain. Some just suck less than others. Humans just suck with long running projects with ever changing specs.

>But isn’t the promise of Agile to fix broken processes or teams. If I can’t apply Agile to one of the worst teams, and it doesn’t make it better. Then what is Agile actually doing.

Name one methodology that doesn’t produce terrible results with a terrible team.

Yes, useful tools need to produce good results with imperfect humans and the art lies in being less dependent on individual players to achieve optimal results. Again, feel free to name a method that works consistently better than Scrum.",2024,Is Agile actually dying
dudeaciously,2,"Management has forgotten all the preconditions of Agile and want all the benefits, with none of the sacrifices.  So we have the worst of both worlds.  Work is pushed and assigned instead of pulled.  Releases are fixed and committed months in advance.  But the waterfall positive of getting formal requirements are absent.  And no career progression.",2024,Is Agile actually dying
perdovim,2,"To me there's a important distinction, there's Agile (capital A) that follows a dev methodology like Scrum to the letter, and agile (lower case a) that looks at the dev methodologies and finds what works best for the team/product (and is continually evolving).

Agile (capital A) has become yet another dev methodology where the practices and procedures are more important than delivering a good product as efficiently as possible (like Waterfall before it).

agile (lower case) hasn't fallen into that trap quite as easily (due to the focus on adaptability to the team's needs). Which isn't to say team's have not fallen into that trap (I've seen many teams fall), but since there isn't an overriding methodology to blame, it's harder to say it failed...",2024,Is Agile actually dying
codyisadinosaur,2,"It seems like every few months I hear variations of all 3 of these things at the same time, coming from different sources:

* Agile is dying
* Agile is alive and well
* Agile is already dead

Agile development is an attempt to reconcile business processes with 2 truths of software development:

1. Development is an iterative process
2. Customer feedback is valuable

As with all processes, there's never a one-size-fits-all solution, so I expect Agile to be simultaneously ""dying"", ""alive and well"", and ""already dead"" for a looooooong time.",2024,Is Agile actually dying
tr14l,2,"Agile is not a silver bullet and things have to be set up for agile. If you have an org that has been architected around project management for two decades, trying to move away from project management and careful planning is going to hurt because dependency management has always been handled via process enforcement, not architecturally. 

It's not about which one is right. It's about which one is right for the org",2024,Is Agile actually dying
drake2k2,2,"Agile isn't dying. 

What I've seen is companies realizing that Agile just doesn't fit their requirements. So they either do Watergile in Jira or do SAFe so they can call themselves agile.

There is nothing wrong with doing waterfall if it fits your needs.

Sometimes pms in these companies will also firmly believe they are doing agile, and the whole discussion becomes very misleading.",2024,Is Agile actually dying
Strenue,1,"Waterfall fits very few needs in today’s complex times. That’s the issue. I’m a fan of rethinking things based on context and doing what mostly makes sense to developers. That’s why Agile exists, after all. However it’s been co-opted by the project managers…",2024,Is Agile actually dying
jba1224a,2,"Enterprise and corporate agile is failing because they try to make it something it isn’t.

Agile is just a mindset, a way to think about building things.  It isn’t one size fits all and above all, it’s adaptable.  The core tenets are things that if respected will generally lead to better product.

Enterprises get sold on frameworks.  Frameworks imo are inherently not agile.  Things like SAFE and scrum etc are rigid, and operationally heavy.

If orgs focused on being agile and not trying to “do agile” they would have much more success.  But to do that you need to push decision making and control down, which is the polar opposite of how for profit orgs work.  


Tldr - worthless middle managers ruin agility by trying to justify their useless existence.  There, I said it.",2024,Is Agile actually dying
senatorpjt,2,"spectacular illegal cooperative far-flung payment simplistic threatening dog gray dependent

 *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",2024,Is Agile actually dying
sbditto85,2,"Agile doesn’t fix broken teams, neither does agile.

Broken teams need to identify the problem and fix that. An agile approach to do so may help. Using Agile without considering the problem and cargo culting practices thinking it will magically make things better doesn’t help at all and often makes things worse.

The latter is what I’ve seen “broken” teams doing. When questioned about changing the process to fit their team (agile) they push back because some book or whatever says to do X so they must. That mentality has lead to Agile being considered bad-ish because it didn’t magically make everything better.

The reality is no two teams are identical and as such the processes will often need to differ so adjustments should be made (agile). People don’t want to think so they just go looking for some other prescription of what to do. It may be better, but it also probably isn’t _really_ what needs to be done so fads come and go.

I wonder what this next fad will be.",2024,Is Agile actually dying
tamasiaina,2,"I haven't really seen agile dying. I've seen Scrum dying. Most of the teams I've worked on eventually just start doing everything in Kanban boards.

I worked with an engineer that really didn't like Agile, but he would basically preach the failures of agile without anything to replace it. What really happened was that the guy was just a shitty communicator and just didn't like telling people what he was working on. It drove me nuts because I had to ask him what he's working on all the time. In team meetings he just wouldn't tell people, so you keep on thinking he's doing nothing.",2024,Is Agile actually dying
NiteShdw,2,"There is ""Agile"" and there is ""agile"". Capital-A Agile is corporate BS with tons of process and ceremonies. ""agile"" is constantly adapting your process to what makes your team more effective at deploying consistently good working code that addresses business needs.",2024,Is Agile actually dying
Jestar342,2,"No. Those of us who got it stopped calling it ""agile"" a long time ago. It doesn't even have a name anymore, it is just intrinsically how we do work.",2024,Is Agile actually dying
CalmButArgumentative,2,"Scrum is dying in my department, and I was part of killing it.

But the real reason it's going out the door is that the ""scrum master"" decided that the company didn't take ""scrum"" seriously enough, so he is leaving for some other place. His position is not being backfilled, so now the team just does Kanban. Good riddance.",2024,Is Agile actually dying
UncleGrimm,1,"I had a “Scrum Master” at my last job. Nice guy, but seemed like a total waste of the company’s money (startup), all he really did was get paid to schedule meetings and be the one screen-sharing whatever it was. When they hired 2 more I got an awful gut-feeling about leadership’s competence, applied for new roles, they folded into a huge portfolio hoarder that sacked almost everyone 3 months after I resigned lol, there were other signs they were being dumb with the money but that decision in particular just struck me the wrong way.",2024,Is Agile actually dying
mjratchada,2,"Principles of agile and the values are not dying. What is waning is the hype cycle and Agile gravy train whereby ""Agile Coach"" (Process Jocks), ""Scrum Master"" (command and control project managers), ""Agile Delivery Lead"" (Programme Mangers) start to become roles rather than job titles closer aligned to more traditional methods. The idea that the concept of delivering more regularly, faster and at high quality with high levels of automation is dying is ridiculous. I heard similar things about C++ in 1997 to be replaced by VB, Java in 2006 due to the success of C# and more recently that GraphQL would eradicate the need for REST based services.   


Scrum has its place, most critics of it prefer something else yet cannot put a good case forward when to use Scrum with the usual alternative being Kanban, I have seen far more issues with the implementation of than I have with Scrum.",2024,Is Agile actually dying
kaiju505,2,Agile was a good idea but corporate nepo babies turned it into a rabies infested abomination because they were more concerned with cosplaying Steve jobs than actually delivering a product.,2024,Is Agile actually dying
johnsdowney,2,"Disdain*

Wince*",2024,Is Agile actually dying
RDOmega,2,"Managers. You can basically blame the ""management class"" in organizations. The hamfisted butchering of agile on their part ensures they always have a self renewing source of problems to tend to and crises to respond to. 


Kanban, good mentorship and autonomy are all you need.",2024,Is Agile actually dying
mangoes_now,2,"I don't think Agile fixes bad teams, it was really in essence just a way to manage expectation and be actually agile, as in responding to change quickly, making turns faster.",2024,Is Agile actually dying
Deleted Account,2,"Unpopular opinion: Agile never made sense except for consulting. 

Agile as a system was designed to get working prototypes in front of stakeholders quickly, at the risk of having to redo work due to less up-front design and planning, so consultants could respond to feedback quickly.

This doesn't make sense in a typical corporate environment, where requirements usually *are* known up-front because the project is just one piece of a much larger initiative. 

There are some benefits to following *some* parts of the agile process outside of consulting, but it mostly makes no sense to do so, which is why most companies don't actually do agile but rather their own version of waterfall with agile terminology thrown on top.

Basically almost nobody is doing agile, and for a good reason!",2024,Is Agile actually dying
SkyPL,2,"Wrong title. It should be ""Is Scrum actually dying"".

Scrum is not agile. Scrum is a stiff, clearly defined framework, which is fundamentally incompatible with the first value of Agile (or, if you really want to argue, it's incompatible with all four values of Agile).",2024,Is Agile actually dying
zacksalah73,2,I wish nothing more than it to die,2024,Is Agile actually dying
pachumelajapi,3,"Agile requires motivated individuals. Thats one of the main problems I see in todays industry. Like others mentioned, its a people problem.
What companies will buy into after their poorly implemented scrum proves itself not useful for them is some sort of agile for minions.
In this new methodology, micromanagers will get to measure productivity using SLOC and percentage of time active in teams/slack/whatever.
Ive seen agile methodologies work very well when folks are getting paid well, work in something they like and they tolerate eachother. 
If you got all of that, you dont even need scrum to achieve goals. Kanban works just as well.",2024,Is Agile actually dying
Solrax,4,"""However I think good teams are good with or without Agile.""

Bingo.  How many successful projects are attributed to Scrum/Agile when it was just a great team? Likewise, how many non-Agile failures were attributed to waterfall/not-Agile when it was a dysfunctional team to begin with?",2024,Is Agile actually dying
kodakdaughter,4,"Agile is great if every team member is experienced, gets enough stock that there is an incentive to not check out, and have a general mindset of just get done what needs doing. 

I would rather go to the dentist then deal with daily stand-ups.",2024,Is Agile actually dying
chicknfly,3,"> bad teams will never do true Agile

That’s because you don’t “do” Agile. You *are* Agile. Seriously, go to [agilemanifesto.org](https://agilemanifesto.org) and read the four values. That’s it. That’s Agile. (Okay, there are 12 principles, too)

If you have a garbage team, they’re going to be garbage no matter what process they use. But that’s not a failure of Agile; it’s a failure of management and leadership.

Not to sound like a jerk, but do you genuinely know what constitutes a Waterfall design from a project management perspective? Even if you don’t, you can look up screenshots of Microsoft Project and ProjectLibre (gantt charts) to get an idea of how waterfall project management works. If you think that is how Agile works, you haven’t worked in Agile.

To answer your last question, business people generally don’t know Agile. They know processes such as Waterfall. Those processes afford tangible metrics that they can use to determine project completeness, to forecast events, balance budget, etc. Agile makes that challenging, which is why frameworks exist to find that happy medium. I have always found Scrum to be the most useful, and SAFe can kiss my backside — but no matter what a framework is still a process over people to some degree and, when bastardized, still won’t be Agile.

You can’t get just the buy-in from the project managers. Adopting Agile can not simply be bragging rights or an accomplishment on someone’s résumé. You need them — and everybody below them, down to the developer —to actually embody and enforce Agile values/principles and to keep others accountable to the same. (which, coincidentally, is the one-sentence simplified definition of a scrum master.)",2024,Is Agile actually dying
morosis1982,3,">But isn’t the promise of Agile to fix broken processes or teams

Not even close. The point of agile is to get value to the customer sooner and be able to pivot when requirements change. So that instead of being a year in to an implementation that took a year to design before finding some basic assumptions are wrong, you get an MVP out in a couple months and get real feedback from your end users that may cause re-evaluation of the initial high-level design.

A lot of the agile frameworks are built up around that core to enable capacity and velocity planning which are often abused but at their core are simply to provide visibility for if X has to change and the extra effort is y, what about the existing deadlines/priorities needs to change to accommodate it. Without at least even a guesstimate value you have zero chance of making that evaluation.

Our org has a decent grip on agile, and while 'scrum' is the official methodology most teams operate on a loose version combined with kanban where necessary. We still have quarterly planning with the stakeholders because things that take time need to be vetted that they are of value before we even start down that path, comms and training need to be flushed out, dependencies on other teams, etc, but the epics and stories are only given high level estimates to see if they'll fit.",2024,Is Agile actually dying
Ragnarork,3,"> I would say I’ve seen Agile work very well. But here is the secret. It only works on fantastic teams. However I think good teams are good with or without Agile. 

I've seen it work, inside a fantastic team, and I would argue the team was actually fantastic because it adhered for the most part to the agile principles, not just blindly following whatever process was currently in place at a given point in time, and cared for each other (which in my opinion is what's meant by ""people and interactions"" in the core principles), with a strong awareness about the actual end goal of what they're working on.

I don't think Agile is dying. I also don't think it's always relevant. But I think the frameworks that some parts of the industry have been gulping so much like scrum, and especially SAFe, are becoming visible hurdles that hamper productivity, team cohesion, and reaching objectives. And I think there's more and more pushback against that outcome (in my experience, YMMV).",2024,Is Agile actually dying
WizzinWig,2,"I think theres just too many companies doing it wrong thinking theyre agile.  I worked in a team where because we did daily scrum and every 2 weeks, we would start a new sprint in jira, they claimed to be doing agile. Yet everything else was kanban. We even pre assigned tickets, estimated were in 30 minute chunks and if you took longer than 30 minutes from the original estimate you were interrogated by management. 

If companies were actually following agile processes properly I don’t think this would be an issue. It’s also not a one size fits all approach. Sometimes kanban for certain management styles works best, or lean. 
I’ve never seen waterfall work well though.",2024,Is Agile actually dying
RealFrux,2,"IDK, what is the better alternative?
Even though I hate time estimates and that a 3 week sprint comes with a lot of “administrative” meetings I actually enjoy scrum when done in a team of grown ups.

When the project lead tries to minimize meeting time. How both team and client plan for 3 week deadlines. When time estimates is about finding the team’s velocity so that the work load in each sprint becomes better and better. The transparency it gives between stakeholder/client devs, management etc. Everyone get to speak up about the last sprint in retros etc etc. How every sprint brings the team and its capabilities closer to a shared sense of the reality and pace of the project.

In a functional team I kind of enjoy scrum. I don’t like scrum when you should do scrum because someone says scrum is the way things should be done.",2024,Is Agile actually dying
robhanz,2,"Most of the ""agile"" I've seen that's failing is really just people that have taken the meetings and reports of agile, while *completely* missing on the principles.

The principles are *hard*.  And they have uncertainty based in them.  And businesses do not like those things.

Waterfall and other methods have uncertainty, too, but they pretend that they don't.  And people like the appearance of certainty, even if it doesn't work out that way.",2024,Is Agile actually dying
Deleted Account,2,"I hope not, generally speaking.  The philosophy is solid and it beats the pants off the DOD, NASA, and RUP methods that dominated the 80’s and 90’s for most software efforts.

I started with XP in 1999.  I’ve used lean, kanban, crystal, scrum, safe, feature driven development, and many more branded methodologies that fall under the agile methodology.  Methodologies help as long as they are matched to the organizational culture and software you are building.  

Some examples.  If I was building out a complex multi state asynchronous messaging system around a business process, I’d use FDD.  If I was building out a new feature set for an eCommerce site, I’d use kanban.  Most of XP is now generally accepted good engineering practices, so it’s almost always incorporated no matter what methodology is chosen.  But XP isn’t gospel - most of us do a variation on git distributed commits and PRs rather than only commits to main backed by CI as insurance; things change.

I detest scrum.  Scrum is agile on training wheels and its only two purposes are to provide transparency into progress (good, but not a productivity enhancer) and sell certificates (bad).  I remember back in 2016 a large company’s CIO mandated all their third party service provider staff needed scrum certs.  Within a week, they all got certs.  He immediately declared victory as the company was now agile.  Checked that box.  Talked with one of the third party folks after and he said his team spent the previous week getting six sigma certs.  Checked more boxes.  None of this changed anything.  

Changing culture and processes is hard.  Agile gives a loose framework for it.  What actually worked for the checkbox company above?  Sending the entire North America based team ( product leads, all of eng, qa leads) to a series of 2 week hands on seminars, seminars on how to build agile software in Mexico, with follow up support when back in the US.  It was customized for the org and internally done and incredibly expensive (sorta - they just hitched them to a mature training process developed by an acquired company).

That said, there are times where restrictive processes and over engineering do matter - medicine, weapons, planes, spacecraft etc.  self driving vehicles fall into this group.  These types of organizations really want the productivity gains from agile.  Just look up DOD software modernization on a search engine.


I don’t want Agile to die, but I’ll happily and violently put Scrum out of its misery.",2024,Is Agile actually dying
Mister2112,2,True Scrummunism has never been tried,2024,Is Agile actually dying
blingmaster009,3,"Agile was always process heavy and required building a specific culture and management buy-in. What I have found after many years is that most companies simply adopted it as the latest fad , mangled and broke most of the rules and are now tired of it. 

I think beyond a certain point in your career , you want to and are expected to work independently and all the agile process and ceremonies become a burden and obstacle in completing your work.",2024,Is Agile actually dying
ahoravemos,1,"I think it won't die in the short term. It's not even about the flaws we are mentioning here. It's about money, business, and the kind of Ponzi schemes our field has a lot of: like agile certifications. Company A, which has a few certified Scrum Masters, can sell a staff augmentation team to Company B, charging more because, hey, they are ""agile experts."" After all these years, I'm still impressed by the tons of shallow and superficial processes, technologies, hypes, and trends companies sell to each other that don't help the niches they work in. And then they preach and ask about performance optimizations, lean architectures, flexibility...",2024,Is Agile actually dying
sidhuko,1,Agile is just a way to breakdown deliverables into waterfall based on prior team performance while teaching management some ground rules that doesn’t mess it up. Once you’re honest about what it does you see your implementation is usually set by what’s important to management and what is holding back your engineers to give reliable timescales,2024,Is Agile actually dying
drmariopepper,1,I think scrum is dying. Agile is so vague though it would be like saying is “good process” dying,2024,Is Agile actually dying
BitSorcerer,1,"I dislike scrum methodologies.  Seriously having a hard time being productive due to the constant context switching.  

I also seem to have meetings during prime brain operational hours.  So that doesn’t help.",2024,Is Agile actually dying
ShodoDeka,1,"Agile is a tool, a tool its proponents sees as universally applicable. 

But in reality for it to work well you need the right domain area, the right organization and the right people to drive it. Pretty much all the stars need to line up for it to really make sense. 

What people are now describing as the death of agile is just the more broad acceptance that it’s not universally applicable.",2024,Is Agile actually dying
wichwigga,1,"Someone here said it best. ""Agile is perfectly useless: those who understand it don't need it, and those who need it don't understand it."" I don't remember who said this but yeah",2024,Is Agile actually dying
bwainfweeze,1,"There are a bunch of things people take as dogma that would be better treated as a growth exercise to be done once a quarter or three times a year for an interval to refresh/check in on your skills.

There are certain kinds of growth you only see in the rearview mirror. Like people taking before and after pictures while losing weight because they can't see their incremental progress otherwise. Coming back and seeing your progress is highly motivating. Day in, day out slogs kill the spirit.

Stand ups are one. Once you understand how to pace yourself those could be replaced with a chat channel or more methodical use of Jira. Not forcing everyone to have a ritual that is either too early or too late in the morning to avoid screwing up their deep work.

And I respect TDD people a lot but I can't do it every day and am still on the fence about whether that says something about me or the practice. You are certainly poorer for having never done it, and a frequent booster shot helps my code quality a lot. But as a way of life? Nah, dog.",2024,Is Agile actually dying
Both-Personality7664,1,"There are lots of software products for which the basic idea ""we can work out the requirements as we go"" is just badly wrong.",2024,Is Agile actually dying
Cod-Born,1,"I'm pissed that the business partners seem to think Agile means they can drop last minute requirements and expect us to stop the last thing they said was the ""big priority"" and immediately pivot to the new ""big priority.""

And what makes it worse is the new things won't even be usable when we're done with, but by golly, we need to implement it ASAP so that it can sit on the shelf.",2024,Is Agile actually dying
HelloSummer99,1,"No, managers love it, workers hate it. As long as workers stop taking offers from agile placed it’s not going to go away. By the way guys NEVER forget that in a software company, you, the workers are 100% of the company value.",2024,Is Agile actually dying
cran,1,"Agile has emborged every project management style that isn’t waterfall. It’s never going away. However, I see the death of sprints as possible and a good thing. Kanban with project level progress tracking feels pretty natural.",2024,Is Agile actually dying
BlackHumor,1,"The point of capital-A Agile is to be little-a agile. It's more important to keep little-a agile as a goal in mind then to implement any particular version of capital-A Agile. In this sense, yes, capital-A Agile is becoming less popular, because as-implemented it's getting increasingly disconnected from its goal.

However, little-a agile software development was and is just a good idea, and so if you develop software in an agile manner you're likely to be more successful. Other important keywords here are ""flexible"" and ""non-dogmatic"", which does sort of show the problem with formalizing a methodology around this mindset.",2024,Is Agile actually dying
HolyPommeDeTerre,1,"Used kanban and scrum. Variations obviously. It works mostly from my point of view. Always has to adapt and to compromise.

IMO an agile framework must adapt to your team level and more importantly, to the company capacity to switch to agility. I think you can apply it to a ""bad"" team. If the team is capable of following some of the principles, you should be able to iterate to a better place. When you talk and compromise, you look for a win/win situation and go from there. Nobody refuses a win/win situation unless they are self sabotaging.

The main factor IMHO is the company's mindset and ability to engage change. Which is impacted by the chaos of all the managers' ideas and objectives.

If the company isn't able to adapt to agility, whatever your team's level, agile frameworks will fail. You can't say to house builders to be agile without the providers for materials to work in an agile framework too. Else, agility fails because of mis management between dependencies and mis alignment on the ways used to produce.

I've seen scrum applied in very big banks. And it was working. As long as all your dependencies are agile too and sub dependencies have no blockers from non-agile teams too. They drove the change around 2000/2010. Took a few years and some iterations. Again, bad and good teams were using it.

What happened is: bad teams had now a way to understand why it didn't work and how to improve from there. Which will drive more change in the org.

The paradox is that, it's when it's easier to implement agile (early startup time) that it's the worst idea to do so. You're gonna bloat your quick process with agile meetings when you need to go as fast as possible (reduce meetings, increase quick communication...)

But when your company has operating teams, sales teams, product, design, accounting... All the teams must pivot to an agile process. And driving this change across multiple completely different teams is something totally different than ""just"" teaching a team to follow an agile framework.",2024,Is Agile actually dying
saposapot,1,"If not agile then what are they using? 

Waterfall?",2024,Is Agile actually dying
djnattyp,1,They're using whatever ad hoc process the manager came up with and calls agile and never lets the team question or improve cause he's the manager and he's always right.,2024,Is Agile actually dying
Iyace,1,"I don't know what Agile is, as it's been described to me, over and over. It seems just like ""getting work done"", so no, in the sense that Agile has always had a meaningless, tautological definition, it's not dying.",2024,Is Agile actually dying
Deleted Account,1,Its being replaced with Kanban. Multiple companies lost top devs due to equating story points with dev skill level.,2024,Is Agile actually dying
edthesmokebeard,1,Lets hope so.,2024,Is Agile actually dying
nimloman,1,I hope so I hate so called “agile” companies are using.,2024,Is Agile actually dying
SarahAlicia,1,Was it ever alive? I have worked at 3 places claiming to use agile. We really didnt,2024,Is Agile actually dying
SpaceDoink,1,"Nope, not dying…evolving.

If agile was initially a response to a crisis / opportunity, then consider focusing on what the next c / o is and then work to evolve the best stuff learned (under the agile and agile-at-scale journey / experiment) to address that.

Also, agilists next roles may need to be managers / leaders / execs in order to continue to affect change of the world agility has helped to create over the past 2 decades.

Buckle-up…",2024,Is Agile actually dying
Fidodo,1,"Everyone implements agile differently to different extremes. The companies that talk about how they're big on agile will be on the more extreme end of it. Some structure is good, but if you're dealing with managers that think the secret to a good team is implementing random processes from management books then you're gonna have a culture that focuses on the wrong things.",2024,Is Agile actually dying
Zulban,1,"The team dynamics I encourage are agile inspired, not agile.",2024,Is Agile actually dying
byronka,1,"Not many of you have been professionals in a wholly different field.  I was a licensed architect before I became a programmer. Think bricks, steel, cranes.  

We had ways of executing our work that would seem strange to an outsider.  Even to a neophyte designer.  But they worked - and the risk of failure and history of our profession ensured that we would continue to pass down those strange but correct ways of working.

In software, like any other knowledge-based endeavor, there is a wisdom that takes time and repeated failures to carefully develop.  

That wisdom was named agile. 

In bricks and steel architecture, there are state laws and organizations like NCARB that ensure all licensed architects will acquire that knowledge.  There is a mandated internship process for the experienced architects to bring new people into the fold.  Because the cost and risk are so high (people dying in fire, etc), it is incredibly important to continue passing that wisdom along.

Programming, however, is still an immature industry, lurching from one short-lived trend to another.  The concept of carefully building long-lasting systems is a pipe dream for a huge percentage of our industry.  Unfortunately, ambitious people sensed an opportunity to exploit the nascent agile and bundled a flashy but deeply flawed shallow version to anyone willing to pay, even though they had not acquired the hard-won wisdom themselves.  

Management doesn't know any better.  Business is interested in business, and since they are very often in direct control of how the programmers behave themselves, they do not realize what they are foisting on their technologists.

Each new generation comes along, finds themselves essentially unled, learns the wisdom the hard way, only to move out of the practice of programming and into management, at which point a new generation arrives.  Rinse and repeat.  When I say they learn it the hard way, I mean it takes years or even decades for mindful people to slowly experiment through trial and error to an improved path.  

Our industry will continue along its lurching path until an external force imposes itself. At one point, engineers and architects did not need a license.  Look up ""Engineer's ring"" on wikipedia.  That summarizes the seriousness of their obligation.",2024,Is Agile actually dying
mjukvarecom,1,"Yes, this answer is possibly the best I've seen on why tradition, expertise, and internship matters, and why ""agile"" in modern organizations is terrible.

Management imposing some stupid, shallow version of agile onto its development teams is just insane to me.",2025,Is Agile actually dying
EnoughLawfulness3163,1,"That's a pretty dramatic question. Like most ideas, people are learning what's good about it and what's bad about it. Full-time scrum masters is probably a thing of the past, though.",2024,Is Agile actually dying
master_mansplainer,1,"The point of agile isn’t to make bad teams good. You still need to hire properly and have comptent leadership. It’s about delivering quality  products that the customer actually wants at the end of it, involving them in the process, validating as you go and adapting early when it’s off track. 

I’ve seen great teams ruined by badly implemented agile. Again, not the fault of the concept or the participants. It ultimately falls on how management decides to adapt/modify it.",2024,Is Agile actually dying
TTCondoriano,1,"Like what others say, good teams are good teams and deliver good work. 

Now if you are in a team with poor morale or inefficiencies rather than wasting time and money learning agile take the top 3 inefficiencies in your team, your dev work, or your collaboration with partners. Try something to fix them, if it works keep doing it.

If you found too many bugs and had to delay your last release brainstorm with your team.
* Could you think of a way to identify bugs faster
 * Automated tests, More regular bug bashes including non tech people?
* Could you release less features
 * Include engineers in product designs, Product/UX in engineering weeklies or stand-ups to get a better idea of how much time each feature costs
 * Break large releases into smaller Milestones each with a prod release wherever possible estimate Milestone by Milestone to avoid estimation errors compounding.

The point is to build an environment where your team can take the top #1 or top 2 issues and mitigate them moving forward at a regular pace while accomplishing normal responsibilities.

I've heard that this is or that this isn't agile. Personally I don't really care. Building a good team is more important than worrying about being agile or not.",2024,Is Agile actually dying
cygnus83,1,"As the member of my team who had to the most outside experience with Agile, I did weekly iterative trainings for my team and my skip level manager in the ideology, workflow, ceremonies, etc.

A week after it concluded, the skip level manager told us to put all of our tickets on the board for the next six months and put completion dates on them all.

It may not be dead, but my interest in reviving what’s left of it is.",2024,Is Agile actually dying
Secure_Maintenance55,1,"Agile is just a show for management. If everyone's average development level and mentality are very good, it will go very smoothly, but it will run smoothly even without agile.

If acting could get people promoted, everyone would do it, instead of focusing on how many functions are actually completed on the project. It all depends on the company culture.",2024,Is Agile actually dying
TainoCuyaya,1,"Agilists are agile in the  moving the goalpost sport. Meaning, you won't get an actual answer, this is the only actual answer that you'll actually get",2024,Is Agile actually dying
Ripped_Guggi,1,"In our case the client and sometime the lead-devs are the bottleneck. 
We deliver whatever the client want. Two sprints later we have to change it because the client changed his mind. One year later we have to revert a bit chunk of functionality because the client changed his mind again.
And some of our lead-devs are busy refactoring the existing code so we can’t deliver anything.",2024,Is Agile actually dying
BorderKeeper,1,"Agile works as a foundation that a team can grow with and eventually modify for its needs as it gets better is how I see it, but it’s also always going to get hated by devs imo as it forces thinks like quality reporting of your work and look back both things which make customers and higher ups more informed and team learn while sacrificing productivity a bit.",2024,Is Agile actually dying
Deleted Account,1,"As a consultant, I mostly hear Agile and take that as meaning ""We want to move fast"", not ""We accept flex on features, we understand the iterative development process, and we accept documentation will come later"". 

I've only ever once seen an Agile implementation that actually reflected Agile, and that was on a decade long project with a virtually unlimited long-term budget but fixed year-on-year budget.",2024,Is Agile actually dying
Thin_Mousse4149,1,Agile is about finding the process that works best for your team. That’s what retros are for in each sprint.,2024,Is Agile actually dying
theoneandonlypatriot,1,Whoever decided that we need to shoehorn all work into two week or three week “sprints” is a dunce.,2024,Is Agile actually dying
gravity_kills_u,1,At my workplace the management is using SAFe (ick) but not communicating agile to any other departments.  From Salesforce to Jira one day with no warning!  Lol,2024,Is Agile actually dying
kincaidDev,1,"Agile is just a way for non technical people to micromanage developers.  It turns into that even on good teams as soon as someone in a different department decides to start using agile for developer metrics, which always happens.  Our focus should be on building features and products, not complying with a dumb managerial philosophy. I worked for the same company Im at now many years ago, before they started doing agile.  Now they do agile and the old process, which takes up half our working hours and makes most of the team miserable. We now have to turn down bug fix requests because the company cares more about complying with agile than actually shipping code or making improvements.  They want us to finish all sprint tickets in 1 week and spend the second week testing, and after testing everything requires approval from external teams which pushes our release date back, which then triggers a week of meetings with middle managers who accuse us (of nothing, they literally just get angry and say someone needs to be held accountable but never articulate what they need to be held accountable for).",2024,Is Agile actually dying
No-Rush-Hour-2422,1,"I think the problem with agile is that there isn't enough hard rules set in stone. It's all open to interpretation. And most people are interpreting it wrong, and doing it in ways that make it awful and unproductive. Something has to change.",2024,Is Agile actually dying
hippydipster,1,What's dead can never die,2024,Is Agile actually dying
st4rdr0id,1,"You wish it was.

""Agile"" has made two generations of developers miserable.",2024,Is Agile actually dying
IHeartFaye,1,I hope it is,2024,Is Agile actually dying
rob-at-brackket,1,"I don't think agile will die. It's at the stage now where you have big4 consulting companies consulting banks on how to do development work. It's been like that for awhile.

New ways of working could easily prop up and be the hot new thing. Don't forsee anything on the horizon for that.

Most sensible companies car less about a specific methodology, traditions, etc. And instead focus on doing good work that solves customer problems and delivers business value. As you mentioned good teams do good work regardless.",2024,Is Agile actually dying
ashebanow,1,"I think of it like this: ""Agile"" is a religion ruled by scripture, and a wasteful one at that. Using agile tools & techniques, adapted to fit your team's needs & culture, is a whole nother thing.",2024,Is Agile actually dying
coffeeToCodeConvertr,1,"I've moved entirely to goal driven development, gotten rid of the whole story point BS etc, makes it much easier for my teams to self manage",2024,Is Agile actually dying
equalsme,1,"In real life: Owner > manager

In Agile: Product Manager > Product Owner

It was doomed to fail from the get go.",2024,Is Agile actually dying
Afraid-Sky-5052,1,"Agile is barely for ‘software only’ products and even then, the support to test, release and control is horrific. It’s a joke. It’s for the impatient and those who can’t plan.",2024,Is Agile actually dying
YodelingVeterinarian,1,*wince (sorry),2024,Is Agile actually dying
Sensitive-Flatworm87,1,"I agree with points that bad teams won’t do proper agile. As well as good teams do not really need agile to function. At the same time i’d consider it as a ‘common language and naming’ so that teams can understand each other easily as they use same terminology, tools, etc.",2024,Is Agile actually dying
trenobus,1,"Software methodologies exist to take the blame for failed software projects, e.g.:

""Project failed because we used the wrong methodology.""

""Project failed even though we used the right methodology, but we were doing it wrong due to insufficient training.""",2024,Is Agile actually dying
dapudx,1,"I am finding that I am feeling more and more disdain for agile lately. But I associate it with the higher amount of non technical leaders and product managers being left in charge of the team. 

If Agile is left unchecked, the raw speed of it can lead to an unsustainable tech outlook. How do you prioritize fixing technical debt or solidifying foundations vs building new features? What do you think the non technical product manager will choose when building a roadmap? 

Agile needs to have technicians advocating for the proper implementation of it.",2024,Is Agile actually dying
_-PurpleTentacle-_,1,"“Agile” or “scrum” are just names describing proposed ways to work. 

Whenever people start blaming the words I’m thinking they don’t get it. It’s not about doing the prescribed methods correctly. It’s about making a particular team work effectively. 

Think of agile, scrum etc as proposed methods. If a method doesn’t work for a team. Adjust it or don’t do it. Don’t blame an instruction for not working for a certain team in a certain situation. Adapt and adjust. Be agile. Forget about the recipe. 

Background:  I’ve worked with many teams and found it’s more about what works for the team than following a certain prescription. What works for one team doesn’t for another. But worst is those expecting any method to be recipe and calling it a failure when it doesn’t work exactly as prescribed. 

Humans are the hard part about software.",2024,Is Agile actually dying
johnpeters42,1,"In our case, it was less about bad devs (even the worst made some non-trivial contribution still reflected in the current product), and more about getting management to stop trying to schedule things on a waterfall scale (""we allocated two years and now you're two months behind schedule"", compared to ""okay you spent two weeks and got these twenty things done but these two other things bumped to the next sprint"").",2024,Is Agile actually dying
Perfect_Temporary271,1,"""Doing Agile"" should die. Classifying ""Agile"" as a verb should die. 

This is what the Mckinsey style consultancies who are leeches and pests to Software development do with their Scrum and SAFe BS.

The real intention of Agile maifesto was to treat ""Agile"" as an Adverb - it qualifies ""how"" you do things. Like ""Be Agile in the way you work and deliver Software incrementally"".

That can be Implemented in many different ways. 

But just see the r/agile sub - it's infested with Scrum Masters, Agile coaches and POs who benefit from the Agile industrial complex and they have now fully invaded Software development - partly to be blamed on the Techies and Tech leaders for giving up the space and the influence so meekly. They are not going to give the control back to developers and development teams.

But they can't hide their shit for long. There are already several movements gaining ground - like NoEstimates, Story Mapping etc. that are driven by develoeprs and self-driven techies and most of the Big tech companies don't do the Agile TM nonsense anyways. Let's see how the future turns out.",2024,Is Agile actually dying
Perfect_Temporary271,1,[https://www.reddit.com/r/agile/comments/1dq45z1/agile\_is\_not\_scrum\_or\_safe\_or\_kanban\_its\_a/](https://www.reddit.com/r/agile/comments/1dq45z1/agile_is_not_scrum_or_safe_or_kanban_its_a/),2024,Is Agile actually dying
Sorry-Sir1240,1,There are no good or bad teams - only good or bad leaders. The problem where Agile is not working is leadership.,2024,Is Agile actually dying
Own-Score-105,1,"I appreciate this insightful discussion on the effectiveness of Agile methodology. It's concerning how Agile has evolved into a rigid process filled with unnecessary meetings, which often detracts from its original intent of flexibility and team empowerment. Many teams struggle with its application, especially when faced with inexperienced members or rigid frameworks like SAFe.

What I find interesting is the potential for tools that can enhance Agile practices without forcing teams to abandon their existing workflows. For instance, Effilix aims to streamline Agile processes without imposing strict changes to how teams operate. It provides real-time insights and supports Agile frameworks, making it easier for teams to identify what works for them. This kind of approach could help mitigate some of the frustrations mentioned here by ensuring that Agile remains true to its core principles of collaboration and iterative development.

Have others had experiences with tools that complement their Agile practices without dictating how they should work?",2024,Is Agile actually dying
Sensitive-Ear-3896,1,In most places it never really lived.,2025,Is Agile actually dying
funbike,1,"sigh.  If agile is dying, it's only because people are uninformed of what it is.  Most of the problems are with Scrum, which isn't fully agile and management screws with it making it anti-agile.

When someone says, ""We aren't doing agile anymore, we are doing this instead..."" they usually end up describing what I would consider an agile-based process.  Unfortunately, sometimes they go backwards and describe a waterfall proces.

Agile is not a process.  It's values and principles.  Processes can be based on those.",2024,Is Agile actually dying
TheSauce___,1,"I think scrum might be, I've seen a lot of bad press go to agile that's really more anti-scrum.",2024,Is Agile actually dying
ultra_nick,6,"Scaled ""Agile"" < Scrum < Waterfall < Kanban


More status updates results in fewer product updates.  ",2024,Is Agile actually dying
TheSauce___,2,"Scales Agile is waterfall lmao

Scratch that, from what I've heard, waterfalls not even that bad if you don't have morons in charge of planning. Scaled Agile is waterfall + micromanagement.",2024,Is Agile actually dying
Iannelli,1,"Its reputation is dead, yes. 

Its practice, implementation, and proselytization is far from dead, though. 

It's the ""new normal"" in corporations. I was working back in the 2010s era where every corporation and their mother enacted a ""Digital and Agile Transformation."" I witnessed the Excel project management templates get put in the recycle bin in favor of the whiteboard with post-it notes. Then Jira and Azure DevOps hit the scene and *everyone* migrated to those tools. 

Like I said, its practice is here to stay. But its reputation is all but destroyed. Most people are simply not cut out for practicing Agile and/or Scrum the way it was originally intended to be practiced. Most people are putting round pegs into square holes. 

Nothing can actually be done about this on a macro level. All you can do is try to change shit at a micro level. Teach your boss about how this shit should be done. Join a company that *actually* practices a bottom-up approach, not top-down. If *your* voice can be heard, you may be able to make your life - and the devs/testers/BAs/POs lives - much easier. That counts for something. 

I work at a company that actually does practice bottom-up. I'm an individual contributer Business Architect. If I tell my boss, ""we really should not be doing this Agile ceremony in this cadence,"" he listens. We challenge each other and we come to an agreement.

Hire awesome employees, let their voices be heard, unite around a common vision that everyone is motivated about, and shit will fall into place.",2024,Is Agile actually dying
meatdrawer25,1,"Agile is just a set of principles . It’s not dying, most people just don’t know they’re doing it. 

It’s my understanding that most people don’t actually know what agile is, they’ve just seen an agile process and kind of know what it looks like. 

For the uninitiated, here’s the very brief agile manifesto: 

https://agilemanifesto.org/principles.html",2024,Is Agile actually dying
davearneson,-1,The whole point of scrum is to continuously improve based on rapid feedback. That's great for poorly performing and inexperienced teams. And it's why the experts advise you to do shorter sprints when the teams not going well. But it sounds like you never worked in a team or organization that did this.,2024,Is Agile actually dying
ResearcherDear3143,0,Like you pointed out and others are saying.. its a people problem. It is important to use methodologies that work best for the team. Project management is a skill of its own and.. there are a lot of sub-par project managers out there.,2024,Is Agile actually dying
Mammoth-Clock-8173,1,"If only scrum masters would let the team self-manage!  Quickly followed by: if only the people on the team would take responsibility for accomplishing commitments, e.g., ask for help, or reach in and help when it’s needed but not being asked for…)",2024,Is Agile actually dying
chordol,0,"Like you said, it only works on fantastic teams. 

I'm on one right now and it's _blazing fast_, quality progress. I've been on many teams where it failed miserably. 

My recipe for using Agile is a team of engaged seniors, which is expensive.

Most times, tenets from Agile manifesto are not being followed or supported, and it becomes a day to day of gaming silly rituals. 

It is in no way one-size-fits-all methodology.",2024,Is Agile actually dying
bwainfweeze,0,"Maybe, maybe not. 

We are undoubtedly hitting the Trough of Disillusionment (see also: Hype Cycle). Not all tools and processes die after the ToD. Some get serious, are more selective about their friends (no more Golden Hammer) and have a renaissance or become de facto standard. 

It may be years before they experience something like Hype again when someone builds a new thing upon this more sober foundation.

As I implied elsewhere, XP experience this around the time Scrum took off. But what happened is that instead of failing it blended into the woodwork. We all do half of XP or more. It's just taken as table stakes for a growing company now. The presumption is that XP without pair programming ceases to be XP. I'm not convinced that's true.",2024,Is Agile actually dying
scientific_thinker,0,"I have never liked Agile. I remember what it was like to program before Agile. I think I had a much better process than Agile and I don't think I was alone. That said, a lot of programmers did not know how to share progress with the business interests. Worse, a lot of programmers didn't have a repeatable process for building systems at all.

Agile attempts to be good at managing the communication between the business and the developers but it's clumsy and time consuming at it. There are strange inefficiencies built in to sprints like QA having nothing to do at the beginning of a sprint and devs having nothing to do at the end if you want to make sure the tickets are closed at the end of the sprint.

I hope we go back to developers having their own processes. Then we can steal the best ideas from each other and eventually standardize on something much better.",2024,Is Agile actually dying
Deleted Account,0,"Agile is like communism - it always fails because it’s never been done properly. 

And like communism, Agile as an idea will never die.",2024,Is Agile actually dying
Embarrassed_Quit_450,0,"Agile is not dying, waterfall with a scrum suit is.",2024,Is Agile actually dying
Tawoka,0,"Agile is an idea. You can't kill an idea. What companies do of it, is very different.

From your perspective, agile was dead at birth. Big companies cannot do, what agile requires, because the mist important thing in agile is two things:
1. Workers that want to be self organised with all the rights and all the duties attached 
2. Managers that trust their teams and put loose guard rails in place to see, when they're needed

The average manager is not just unqualified to do this, they're unqualified full stop. And the average worker wants to get to work, do the work, and go home. Responsibility is not required or demanded.

With good leadership you can form the process to the needs of the team, so I am convinced that the work ethics is a solvable issue. But I am just as convinced that there aren't enough good leaders, and most good leaders are underdeveloped or unrecognized in their organisation.

Hence I gave up on corporate agile. As a team leader I try to work within the limits of the corporate setting, take as much freedom for my team as I can get and then distribute as much down as they're willing to take. I try to work as a buffer between the insanity that is corporate and the blissful ignorance of technical staff. And both sides like it, so it must be good.",2024,Is Agile actually dying
Strus,0,"I would say it's more that people are exhausted with poorly implemented Scrum than the Agile is dying.

* Teams in Scrum should be self-organizing, but middle management will never allow that. So you end up with scrum teams that have a manager that tells them how to work.
* Story pointing and estimating tasks is a very good exercise - if done properly it leads to a discussions about stories and able the team to remove all ambiguities or rethink the scope of work. But many people have a hard time understanding what exactly story points represents, and management likes to treat them as hard commitments or recalculate them to time.
* In mature teams and projects it's impossible to release something user facing every two weeks. Especially if this is not a web app but a desktop one or some embedded code, where sometimes testing takes more than a week. And yet people try to set some arbitrary goals for a two weeks sprints, where these goals are never met. Scrum is also not a good fit to an environment with a lot of bug reports and maintenance work. EVERY team I worked in would work better in Kanban fashion (long term goals, prioritized backlog, we continuously pick up tasks from the top etc.) - yet each one was forced to work in Scrum.

To sum up - IMO Agile would not be associated with Scrum, and therefore would not be associated with something bad, if we would allow dev teams to be self organized and work as they see fit. I thinks this is the main requirement.",2024,Is Agile actually dying
omfg_its_so_and_so,0,"It’s SAFE that made it bad.  Companies didn’t know better, went full SAFE, hired all the roles, and yes, brought in a bunch of people with agile safe certs who don’t add value, resulting in bloat and too many meetings.",2024,Is Agile actually dying
jrodbtllr138,0,"Literally no one does true agile. Show me a real example of Agile as according to the original research paper. If you go back to the original research papers on it, everyone uses the figure that is only like half way through the explanation. Part of actual Agile is THROWING AWAY they entire project and starting from scratch to rebuild with your new understanding from implementing.

Real Agile itself is really hard to justify from a business perspective, so many people’s understanding of what “true Agile” is, is really just a half baked version of it.",2024,Is Agile actually dying
jrbattin,-1,"I think people forget the agile approach grew out of a software consultancy that had to cope with clients who  were incapable of producing high-quality software specifications. When neither the stakeholders nor the engineers have a clear vision for how the problem should (or needs to be) be fully solved, chipping away at it in an iterative fashion is a pretty solid approach. When you strip away all the fancy business-cult-marketing that's ultimately what it's about. Modern agile practices are just attempting to formalize it.

Where people run into trouble is that not everything is going to be solved cleanly this way. What if your ""stakeholders"" have a clear idea of what is needed *and* the expertise to document it *and* can provide feedback as to the efficacy of a proposed solution? Then Big-A Agile is just going to get in the way.",2024,Is Agile actually dying
jeerabiscuit,2,Stakeholders have no clue about the solution but they like to butt in thereby spoiling agile.,2024,Is Agile actually dying
Laicbeias,-1,if you believe in agile you will be agile *heart emoti*,2024,Is Agile actually dying
Abangranga,-1,I hope so. It is fucking horrible.,2024,Is Agile actually dying
sisyphus,453,"> The study's fieldwork was conducted between May 3 and May 7 with 600 software engineers (250 in the UK and 350 in the US) participating. One standout statistic was that projects with clear requirements documented before development started were 97 percent more likely to succeed. In comparison, one of the four pillars of the Agile Manifesto is ""Working Software over Comprehensive Documentation.""

I don't see how anyone who has worked in the industry in the last 10-15 years can possibly think that development done under the aegis of 'agile' in 99.9% of companies has anything to do with the old Agile Manifesto instead of being what it has mutated into--a catchall term for whatever process they happen to engage in devoid of any actual substance or meaning.  Go to a job interview and ask 'Do you do agile here?'  The answer will invariably be yes yet you have learned almost exactly nothing about what your day-to-day experience will be like.",2024,268% higher failure rates for Agile software projects
uptimefordays,43,I mean tbh that’s development everywhere in the real world—which is an adjacent problem to what’s discussed in the article.,2024,268% higher failure rates for Agile software projects
sisyphus,35,"The article conflates what is called 'agile' and what is written in the Agile Manifesto, and so is an incoherent mess which makes no sense at all because they take the failure of agile as practiced to be a critique of the Agile Manifesto.  

Something like:

> Many sins of today's tech world tend to be attributed to the Agile Manifesto. A neverending stream of patches indicates that quality might not be what it once was, and code turning up in an unfinished or ill-considered state have all been attributed to Agile practices...One Agile developer criticized the daily stand-up element, describing it to The Register as ""a feast of regurgitation.""

But obviously the Agile Manifesto has nothing to do with neverending streams of patches or daily standups.",2024,268% higher failure rates for Agile software projects
uptimefordays,24,"True, but I don’t think it’s unreasonable to criticize methodologies as practiced. If everyone is doing agile wrong, that’s seems like an issue.",2024,268% higher failure rates for Agile software projects
pbecotte,21,"Right, that's the thing. When people talk about agile there are a LOT of different approaches they could be talking about. My current gig does SAFe, with three month ""planning intervals"". They spend an enormous amount of time planning precisely what everyone is going to be working on for the next three months, taking a whole week for planning. I could very firmly tell you ""agile doesn't work"" if that's what I am talking about 

If we are talking about the manifesto, it boils down to less planning, do super small stuff and see if it works, and constantly talk about what comes next. I would argue that this dies work, and in fact, being honest with myself, the projects I have worked in that failed the worst were always ones with longer horizons for delivering value. In fact, my current project (my team gets to avoid the safe crap haha) has been one of my most successful-because we have focused on delivering a stream of small features. Sure, there are things we could have done differently if we rolled back time, but we didn't know that then. The younger guys occasionally complain about the lack of a long term plan- but can't really point to how we could have known all the problems we would face six months ago.

Really- software is hard, and coordinating teams to do it is even harder. All of the methodologies try to break it down into a ritual, but those rituals miss the point. If the people following them believe that comprehensive plans and rigorous process and tooling is the right approach, when they do scrum it's gonna look very different than when a team which believes the opposite does it.",2024,268% higher failure rates for Agile software projects
Hacnar,6,"The worst thing is when your development teams try to do the agile thing right, but then sales people overpromise stuff, forcing you into strict roadmap with little to no room to maneuver.",2024,268% higher failure rates for Agile software projects
psaux_grep,6,We also practice sales driven development. My favorite is when someone sells something so ridiculous that there’s no way to deliver it because then I can tell them to fuck off.,2024,268% higher failure rates for Agile software projects
psaux_grep,8,"You need to be clear what you are criticizing. 

Are you criticizing Karl Marx, or Soviet Communism? Those are actually very different things. 

And corporate agile isn’t agile. Corporate agile doesn’t prioritize working software or developer empowerment. It prioritizes control, or the resemblance of it, and reporting and meetings. Never retiring old software, talking about prioritizing things more than actually prioritizing things. And yes, profits. Short term mostly, without understanding the impact that priority often has on long term profits.",2024,268% higher failure rates for Agile software projects
Smallpaul,3,"Sure, but what would the solution be?

Someone takes the Agile Manifesto, renames it the Nimble Manifesto and everyone starts doing that. They see success. So more people start doing it. Eventually the mainstream catches up and wants all of the benefits of Nimble without changing how they think about developers or development. So soon Nimble is contorted to mean ""what everyone was already doing before."" ""Most nimble projects are failures.""

And so we go around the wheel.

Maybe it's more productive to say: ""Everyone is doing Agile wrong and that's not Agile's fault. It's the tendency of business to resist good process that is the underlying problem.""",2024,268% higher failure rates for Agile software projects
uptimefordays,2,"If I had a good answer, I’d be hawking *my* development model!",2024,268% higher failure rates for Agile software projects
Hacnar,3,"I agree with you. As much as I like proper agile development after enjoying 7 years of working in a very efficient agile workplace, I have to say that it needs big update with many counterexamples of which common ""Agile"" bad practices to avoid. Agile Manifesto and proper agile framework is almost like communism now - too easy to abuse and misuse, too difficult to implement correctly without falling into one of the many traps lying along the road.",2024,268% higher failure rates for Agile software projects
Kastar,-1,">The article conflates what is called 'agile' and what is written in the Agile Manifesto, and so is an incoherent mess which makes no sense at all because they take the failure of agile as practiced to be a critique of the Agile Manifesto.

I know comparisons between agile and communism are overdone at this point but this is just too on the nose. You can pretty much just do a find-and-replace here.",2024,268% higher failure rates for Agile software projects
Smallpaul,1,The difference is that lots of places actually do implement Agile well.,2024,268% higher failure rates for Agile software projects
vincentofearth,11,"Okay, but isn’t that just a defense of the _brand_ “Agile”? If we agree that Agile instead refers to the broad category of processes followed by teams today, which at the very least could be described as having minimal upfront planning, then this study’s result is still meaningful.

It says that a vast majority of the industry is relying on a family of processes that have a higher risk of failure and going over budget. I don’t really care if they’re doing Agile properly or not. What matters is that the ideas from Agile, in the way that they’ve been digested and adopted by people in the real world, just don’t seem to work.

If you tell me that that’s just because the ideas weren’t learned or implemented properly then…yeah I can acknowledge that that may be true and that the Real Agile could still have merit…but we’re still left with the broken flavors of Agile that the industry thinks are the gold standard. Maybe it _is_ time to just throw out the baby with the bathwater.

I’d rather have the name of Agile become relegated to the dustbin of history and force the industry to rethink their processes. The alternative it seems is to continue to put the name of Agile on a pedestal as a goal few people seem able to actually attain and many shoot themselves in the foot trying to.",2024,268% higher failure rates for Agile software projects
sisyphus,3,"> I’d rather have the name of Agile become relegated to the dustbin of history

I agree, because I think it's lost all descriptive power in that even if you've adopted and digested almost nothing from Agile you will invariable describe your development process as 'agile', and so it has no meaning at all.

Whether that is because the Agile Manifesto is too vague to be actionable or because middle managers cannot resist the urge to micromanage or because Agile principles aren't as great as advertised or because a horde of consultants have bastardized it to sell a product I don't know.",2024,268% higher failure rates for Agile software projects
alphulmdikoud,2,"I have been a developer for twenty years. I have worked in waterfall, Agile with waterfall, and agile scrum shops. They both have pluses and minuses in my opinion. From the perspective of development, it's better if you have a formalized requirements document in my opinion. Plus you get to build exactly what's in the document and there's less room for them to change things midway through development, which happens all the time with agile. Of course, proponents will say that is the strength of agile, that it is flexible, But I just thought it was a bit easier using the waterfall approach.",2024,268% higher failure rates for Agile software projects
blind_disparity,1,"The study is trash and no meaningful conclusions can be drawn from it. Not even the figures that they claim as results. 

The many issues are all discussed further down in various comments.",2024,268% higher failure rates for Agile software projects
jasonjrr,12,"This sums everything up so nicely. A company that is doing “Agile” is already failing at it. The Agile Manifesto is about developing with agility not doing “Agile Development”. The problem has never been “agile” or the Agile Manifesto, it has always been people.

The worst part of it, is what you try to teach the from the perspective of the Agile Manifesto, you get met with so many people saying things like “I don’t like that”, “I don’t want to do that”, “I’m not going to take part in 60% of what you are saying”… and worse. This is why “agile” fails. People.",2024,268% higher failure rates for Agile software projects
HaMMeReD,9,"Part of the problem is that Agile is a software development methodology, and for that it works really well.

What it's not is a business development methodology, which generally works in quarters and years, and is usually pretty rigid. Like there is room for maneuvering, once the vp's and c-suites do 4 months of assessments and collecting data to justify a pivot.

So developers are really just worried about the quarter that is already packed to the tits, and don't have time to do much assessment of the direction.",2024,268% higher failure rates for Agile software projects
xterminatr,1,"Agile is basically just the easiest method of offloading work to contractors.  It can be broken out into bite sized pieces for people who have no business knowledge, it sounds good on paper, is easy to 'track velocity' and report on financials - it's perfect for management to pretend they are important and justifying lower FTE counts.  It doesn't really ever work in most places for obvious reasons, but that's the main reason it's so popular now.",2024,268% higher failure rates for Agile software projects
TechFiend72,1,Kinda like ITIL for helpdesk... it was to make it easier to outsource with blended teams in multiple countries.,2024,268% higher failure rates for Agile software projects
wknight8111,2,"Yeah, this is exactly the thing. The ""Agile Manifesto"" has almost nothing to do with what companies mean when they say ""Agile"" (and nowadays I almost always use Scare Quotes when I say ""Agile"" because it's not the same thing). What Agile has devolved into is a bunch of ceremonies so that stakeholders can keep a tight grip on status updates. Teams often spend so much time tracking and reporting status, updating tickets, tracking time, sitting in ceremonies, etc that they really struggle to find time to do actual, meaningful work.

A big part of what Agile was supposed to be is a fundamental promise that ""whatever we decide to put in the sprint, we promise come hell or high water that we will complete"", a stance which does require a lot of improvement to estimation, discipline, reviewing and refining tickets to have sufficient information, and a tight control over what actually goes into the sprint. But many companies take both those things away, dedicating very little time to the practice of estimation and deciding by mandate what must go into each sprint because ""the sales team already promised the customer"", etc.

So you have sales teams basically deciding the schedule without tech team input, sprints being filled regardless of the team's time budget, review or refinement of tickets, or any estimation they might do. And no refinement/approval step means tickets often come incomplete. Then, when the sprint is filled with too much work and low-quality tickets, the company sets up a million status meetings under the guise of ""Agile Ceremonies"" to waste time and break up focus and flow.

Some places do alright despite all this, but for a lot of companies ""Agile"" is a real nightmare.",2024,268% higher failure rates for Agile software projects
hogfat,1,"> What Agile has devolved into is a bunch of ceremonies so that stakeholders can keep a tight grip on status updates. Teams often spend so much time tracking and reporting status, updating tickets, tracking time, sitting in ceremonies, etc that they really struggle to find time to do actual, meaningful work.

The PMO Strikes Back",2024,268% higher failure rates for Agile software projects
suddencactus,1,"> Teams often spend so much time tracking and reporting status, updating tickets, tracking time, sitting in ceremonies, etc that they really struggle to find time to do actual, meaningful work... deciding by mandate what must go into each sprint because ""the sales team already promised the customer"", etc.  


Ironically agile was supposed to encourage developers to understand for themselves how to solve customer problems, or how to find more time for ""meaningful work"" and less time on PMO whims, at least according to Marty Cagan's version of Agile. Yet ""stories"" become tasks, sprint deadlines take precedent over customer priorities, and roadmaps are still decided without developer input.  Bureaucracy puts developers, customer support, and marketing/sales in different buildings, on different software, without access to each other's documentation, all while claiming to be agile.


 Something similar happened when Six Sigma gave up on bottom-up management like genchi genbutsu and Andon cords, and became a way to mandate a rigid formula for quality improvement.",2024,268% higher failure rates for Agile software projects
wknight8111,1,"Yeah, the real irony is that Agile was supposed to be a philosophy to empower developers, but ""Agile"" has become a tool for stake-holders to monitor and micro-manage developers, who don't have any more power and often have less.

I'll include a ""#NotAllCompanies"" because I've worked at a few places that did ""Agile"" and were decent enough and didn't fall into the worst pits of awfulness.  Some places actually do well enough with it, but it's certainly not a guarantee.",2024,268% higher failure rates for Agile software projects
Deleted Account,2,"I have worked for and consulted for over 3 dozen software companies panics over 20 years. Every single one said they do agile. Only I think 1 got kind of close and only because we had a badass project manager who beat on management to not do stupid shit, so I think it was mostly her and not agile to credit.

Every company is waterfall development by another name with scope creep under the guise of shifting to new requirements. Agile to me is simply define an mvp with piece deliveries to achieve that, then iterating on that core product while balancing new features. Sprints, story points, retros, planning, scrum, standups are bullshit from management to justify having more managers than employees.

It was never about agile, it’s all about micromanagement. Same as open office plans, return to office, daily standups, etc. it’s to invent managements reason to exist and for their own failures micromanage.",2024,268% higher failure rates for Agile software projects
sisyphus,1,"Indeed.  My current company started doing quarterly planning of all deliverables, but they break that up into 'sprints' and do daily standups (ie. status checks) so it's 'agile'",2024,268% higher failure rates for Agile software projects
oweiler,1,"At a company I've worked 10 yrs ago, there was no Agile, no Scrum, Kanban or every other ideology in place. But we developed software in small increments and were constantly incorporating feedback of our clients.


Basically all projects were on time and on budget, and clients were almost always happy.


After 5 yrs I've switched jobs and found myself spending 2/3 of my day in stupid status meetings, without ever interacting with any client. All projects were severly over time and budget, clients were constantly pissed. But hey, we were doing Scrum!",2024,268% higher failure rates for Agile software projects
Aflyingmongoose,1,"""Agile"" is no longer agile. It was never about the workflow, it was about the adaptability of the workflow.

Everyone seems to recognize this, but nothing ever changes.",2024,268% higher failure rates for Agile software projects
Deleted Account,1,"But are they doing it correctly? Does anybody do it correctly? Agile seems like the REST of running teams: it seems like a great solution until you see others put it into practice, and now you wonder if they can even spell HTTP (or scrum in this case, kinda).",2024,268% higher failure rates for Agile software projects
SurgioClemente,75,If you look at the “research” it’s just an ad for them to sell their book on the new methodology they made up,2024,268% higher failure rates for Agile software projects
OnlyForF1,9,Their methodology just seems to be waterfall.,2024,268% higher failure rates for Agile software projects
Deleted Account,2,[deleted],2024,268% higher failure rates for Agile software projects
sagittarius_ack,1,"The Waterfall model obviously does not require all the requirements to be given upfront. It is not ""black and white"". The Waterfall model is probably going to work well if you have a good idea about what you are trying to build. If you don't know what you are trying to do then the Waterfall model is probably not going to work well (and other methodologies are not likely to work much better).",2024,268% higher failure rates for Agile software projects
OnlyForF1,0,"You're absolutely incorrect here. Waterfall was as strict as any Agile™ framework, if not more, in how it dictated a project's life cycle. It very explicitly mandated that all requirements be gathered before moving on to the next step.",2024,268% higher failure rates for Agile software projects
sagittarius_ack,1,"It depends on what exactly you mean by \`requirements\`. In theory, since in the Waterfall model a phase needs to be completed before starting the next phase, one iteration of the model does require that all the requirements corresponding to that iteration to be given upfront. In practice the Waterfall model is most often applied iteratively. So you don't need all the requirements of the final product to use the Waterfall model because you can construct intermediate versions of the product until you get to the final version of your product.

In the case of complex software systems it is virtually impossible to gather all the requirements. What do you do when you have completed the analysis and design phases and during construction you realize that you deal with conflicting requirements? Do you abandon the whole thing? No. You go back and redo the necessary analysis in order to fix the requirements, update the documentation, etc.",2024,268% higher failure rates for Agile software projects
pragmojo,4,I was curious what this 268% figure was benchmarked against but now I won’t bother,2024,268% higher failure rates for Agile software projects
eraserhd,1,"AFAICT, they asked a bunch of questions about projects like, “Did you have all the requirements before starting development?” “Were the requirements realistic and achievable?” “Were any requirements introduced late in development?” and “Did the project succeed?”. They then noticed that projects that had all their requirements up front, none of which changed, succeeded more often.  They created an idea called “Impact Engineering” which requires all of the things which correlated with project success, and since those things were about having requirements up front, all other projects were labeled “Agile.”. Therefore, Agile fails 268% more than Impact Engineering.",2024,268% higher failure rates for Agile software projects
pragmojo,1,Oh so they re-invented waterfall,2024,268% higher failure rates for Agile software projects
JimDabell,14,"> One standout statistic was that projects with clear requirements documented before development started were 97 percent more likely to succeed.

Is this not one huge example of selection bias? Of course if you can gather clear requirements up-front you will succeed more often – because you are selecting the easiest projects. One of the key parts of agile is the recognition is that it’s incredibly common not to be able to do that, hence the emphasis on responding to change.",2024,268% higher failure rates for Agile software projects
rcls0053,153,Highly doubtful that any of those projects even understood what it means to work in an agile way.,2024,268% higher failure rates for Agile software projects
geodebug,15,Million articles saying the problem is “agile”.   Zero articles saying what other methodology is superior when knowing all the requirements ahead of time is impossible or highly unlikely.,2024,268% higher failure rates for Agile software projects
sisyphus,47,"Nobody does because if we're talking about the Agile Manifesto like the article is, it's too vague to be useful to most companies, and if we're talking about everything that is called 'agile', it's so broad as to be meaningless.",2024,268% higher failure rates for Agile software projects
chicknfly,14,"Makes me wonder if companies using SAFe are part of this Agile article. Because let’s be real here, SAFe is Adaline name only and is really just a bow tie on top of waterfall. One of the cofounders of the program was an agile coach for my the train I worked on, and even he didn’t know everything about the program because it’s so absurd.

Granted, he was a former Marine general who didn’t like civilians telling him he’s wrong, so he likely dig his heels in when presented with the facts.",2024,268% higher failure rates for Agile software projects
technologistcreative,16,I always called SAFe “Synthetic Agile for Executives.”,2024,268% higher failure rates for Agile software projects
chicknfly,4,oooo  that’s a great one! Much more accurate than the official term,2024,268% higher failure rates for Agile software projects
technologistcreative,5,I’m glad you like it. The executives at SAFe shops didn’t like it 🤷,2024,268% higher failure rates for Agile software projects
sisyphus,3,"I think they would, because it seems like they just did a poll, and if you're doing a poll and you ask 'Do you do agile?' and the people do SAFe they will probably say yes.  'Agile' is right there in the name!   But SAFe is obviously not reflective of any the principles laid down in the Agile Manifesto so I don't see how you can draw inferences like the article does.",2024,268% higher failure rates for Agile software projects
MornwindShoma,72,"Is there any project that understood what it means to work in an agile way? 

Using Jira isn't ""agile"" anyway.",2024,268% higher failure rates for Agile software projects
jasonjrr,19,"I’ve worked on a few teams that really understood what is meant to be “agile”. It was awesome. I miss those teams. 

Jira is just a tool, it is neither “agile” or “not agile”. How you use it is what matters. Or how it uses you…",2024,268% higher failure rates for Agile software projects
Hacnar,8,"Yeah, working  in a proper agile environment is something a dev never forgets. It's like heroin, you can't really work without it after you try it once. When you lose that agility, it really sucks..",2024,268% higher failure rates for Agile software projects
jasonjrr,0,"Exactly. When you know what it is like done properly, you really understand what it means when it isn’t. This is why I keep “agile coach” on my resume/LinkedIn.",2024,268% higher failure rates for Agile software projects
godofpumpkins,4,No true agile development process? 😝,2024,268% higher failure rates for Agile software projects
svhelloworld,35,"Uh, this horseshit article and it's accompanying ""research"" is all just advertising for a book that a consultancy is trying to sell. When consultancies sell books, those books are then meant to drive revenue to... wait for it... the consultancy.

Source - I used to work at one of the big 5 consultancies.",2024,268% higher failure rates for Agile software projects
Teh_yak,53,"I know this is a proper ""no true Scotsman"" argument, but I'm willing to bet a lot of this is because it's agile in name only. I bet those developments would have had a similarly shitty outcome with any other methodology. 


I've had great agile and great waterfall projects. The common elements were that the process was understood and followed, even when hard.


I've had so many, many shitty mash-ups of both too. It's painful to see.",2024,268% higher failure rates for Agile software projects
Grannen,1,"Yeah, I feel I vary about that as well sometimes, but it's hard when people are agile is when no requirements or documentation, lol.",2024,268% higher failure rates for Agile software projects
heavy-minium,43,"I've been at enough companies now to see that most companies don't even understand why agile is used. I even had a certified scrum master once tell me it's about being faster and more efficient. Agile is everywhere but nowhere at the same time.

Agile is all about reducing the risks of delivering the wrong results, and to mitigate that one does more iterations and more exchanges with the customer and stakeholders. It actually takes more time overall and is less efficient. And despite that, too many people out there think it's about speed and efficiency.

So as a result, I believe that the results of the assessment might be true but the conclusion is not.",2024,268% higher failure rates for Agile software projects
iamakorndawg,18,Had a PM who thought the point of tracking velocity was so that it increased over time.,2024,268% higher failure rates for Agile software projects
heavy-minium,11,"Oh yeah, that's a classic. It should never have been named ""velocity"", as that easily misleads people.",2024,268% higher failure rates for Agile software projects
jdsalaro,1,"Meh, misguided people would have eviscerated whatever term.

More is good, right? Right?",2024,268% higher failure rates for Agile software projects
Hacnar,3,"at my previous job, we occasionally called this number ""capacity"", meaning how much work is the team capable of delivering.",2024,268% higher failure rates for Agile software projects
Alediran,1,Capacity is a much better name for that number,2024,268% higher failure rates for Agile software projects
br0ck,15,"As a former consultant the magic of agile was not having to commit and sign off to a full requirements document at the start of the project which required eating the overrun costs when it took longer than expected, instead billing by sprint with a loose guess of 10 sprints giving you 1/10 of what the client actually wanted so the client ends up paying you way more.. overruns became a feature instead of a flaw. And all the extra management work required throughout with 5X the meetings and PMs, BAs and Scrum masters out the wazoo was brilliant to because managers bill at 3X the rate of the devs.",2024,268% higher failure rates for Agile software projects
pauseless,1,"As a former consultant and project lead, now quite some years ago, I found it hilarious to know I was being billed at £1000/day *before* becoming lead and then £1.5-2k/day after. My pay certainly didn’t go up a single penny.

I was the only one with the knowledge and the authority to be onsite and challenge vendors, educate the client on the system, and the only point of contact the management consultants would use when they had random questions.

I burned out, but I suspect if I’d seen the difference in my bank account, I’d have gone on for longer.

With respect to agile… we just created a new imaginary long term plan every three months. It was labelled as agile, so that we could say slippage happens, but apart from my team, I don’t think anyone hit a single milestone. We screwed up on stuff, of course, but not every single damn milestone…

My approach: ignore it all, condense it to “we’ve got three weeks to do x, y and z, have at it” for my team. Do the paperwork once every three weeks to pretend we’d been following the desired system.

I’m such a rebel, blush.",2024,268% higher failure rates for Agile software projects
shinku443,9,"While I agree with most of that - I disagree in the overall time. To me it's more of we can do iterative chunks to get closer to the requirements and change as requirements change, instead of pushing out a shit load of useless fluff no one asked for and then having to spend more time stripping or adding in the actual stuff customers wanted. Just my opinion I'd love to see statistics on this",2024,268% higher failure rates for Agile software projects
SecretaryAntique8603,1,"Yeah I agree. The key benefit seems to be less risk of wasted effort and better fit to what the client actually wants, at the expense of more check-ins and realignment. 

My current client loves to plan out elaborate two year roadmaps and then implement it in an “agile  fashion”, truly the worst of two worlds. Result is that we end up committing to building something that everyone recognizes will inevitably turn out as a pile of shit, while also wasting 50% of our work days on SCRUM ceremonies and sync meetings so that it takes three years to fail spectacularly instead of two. Except of course for when we’re lucky and they can it halfway through.

It’s really amazing that such a simple idea, “don’t plan so goddamn much”, has been so catastrophically misunderstood.",2024,268% higher failure rates for Agile software projects
jshen,4,"This is the right answer. The problem with this article is that it defines success as ""delivering high-quality software on time and within budget"". This isn't always the right goal, especially in a highly competitive business environment.  You can easily spend 6 months or a year delivering a project on time and on budget only to find that it's a failure in the market. Customers don't want it, or it doesn't deliver the expected revenues, etc. 

Having said that, many engineers interpret agile as, ""there should be no accountability for developers"".",2024,268% higher failure rates for Agile software projects
suddencactus,1,"Agreed. In areas like Business Intelligence, if the client doesn't look at your first released dashboard or report and want something adjusted to provide more information, you probably failed.    


Boeing's 737 Max was developed more or less on time and within budget.  Compare that to the 787 which was much safer but was completed several years late and about triple the original budget. That's in an industry where the standard for ""deliverable"" is pretty high.  Tyranny of schedule can be far worse in industries like Web Dev where crap can be called ""finished on time"".",2024,268% higher failure rates for Agile software projects
Chippiewall,1,">  And despite that, too many people out there think it's about speed and efficiency.

I agree on the speed front, but the efficiency side I think depends on how you look at it.

As you say, Agile is about reducing the risks of delivering the wrong thing, it's more efficient to deliver the right thing the first time round than to waste time building the wrong thing.",2024,268% higher failure rates for Agile software projects
versaceblues,17,"Isn’t part of the agile mantra the idea of fast failure, learning from the failure, and iterating",2024,268% higher failure rates for Agile software projects
grencez,7,"So... doomed Agile projects are cancelled 62.7% faster than waterfall projects. Tight feedback loops save a lot of money!

But then I actually read the article and saw that ""agile"" is interpreted as ""no plan, code now, test later, yolo"". Kinda pointless results.",2024,268% higher failure rates for Agile software projects
versaceblues,3,"Yup even under a disciplined team I would expect agile to have a higher “failure rate”. Since failure is embraced by agile. 

A failure after a month of work is just information. A failure after 2 years of wasteful is catastrophic",2024,268% higher failure rates for Agile software projects
suddencactus,2,"> Tight feedback loops save a lot of money!


Yeah I'd hate for the takeaway from this article to be ""we need more things like CDR and PDR so we spend millions of dollars before even having a working prototype""",2024,268% higher failure rates for Agile software projects
drmariopepper,12,The learning was to stop using agile,2024,268% higher failure rates for Agile software projects
versaceblues,2,"What did you use instead? What does your process look like? 

Honestly im not even sure what people mean by agile anymore. What my team does is just :

1. stack rank our backlog based on priority    
2. Once every two weeks pick the highest priortiy items to work on (based on quaraterly goals for the bussiness)   
3. We run a two week ""sprint"" to complete after which we have a demo, and retrospective to discuss if we need to change anything.   
4. If unforseen isseus come up we updated our backlog rankings accordingly.   
5. repeat  

Our main goal is to try to deliver incremental customer value every 2 weeks, though we realize its not always possible so we don't streess if it takes 4 or 6 weeks for certain projects",2024,268% higher failure rates for Agile software projects
drmariopepper,6,"I’m being snarky mostly. We have a lightweight process that doesn’t fully fit any of the well known ones. It could be argued that we in fact are agile, but that’s part of the problem. Agile is so vaguely defined that every process fits in one way or another, and people tend to group what is or isnt agile by whether or not its working. Is it working? That’s agile, good job. Oh it’s not? Well clearly you’re doing it wrong",2024,268% higher failure rates for Agile software projects
Hacnar,5,"You might be agile. It is intentionally vague, so that any team could create its own version that suits them. If you are working in small iterations, you're regularly reevaluating what went wrong/right, and you're not afraid to change plans/scopes when new info or new requirements arise, then I think you're agile.",2024,268% higher failure rates for Agile software projects
RareCodeMonkey,17,">the research commissioned by consultancy Engprax could be seen as a thinly veiled plug for Impact Engineering methodology

A study that confirms a consultancy and it is paid by that company is sus.",2024,268% higher failure rates for Agile software projects
i_andrew,6,"""higher failure rates"" - higher than what? Higher than spending 10 months on the upfront specification and only then finding out that the project is not feasible? Paper will accept anything, code won't.

It's obvious that if you freeze requirements the project will be delivered faster - but in 99,9% it won't be what users really need. In my projects there isn't a week when we an original change requirement, because it turned out that end-users changed their minds.",2024,268% higher failure rates for Agile software projects
dominjaniec,5,"😉 as somebody wise said once:

> walking on water, or developing software according to requirements, are easy when both are frozen.",2024,268% higher failure rates for Agile software projects
gareththegeek,6,"I've been on plenty of ""successful"" projects where we've delivered to the detailed spec and on time. Everything is great except the software is completely useless for the end users",2024,268% higher failure rates for Agile software projects
patchwork,2,Lol this is the truth. Reality is no one really knows what they want or how to communicate with other human beings. The only real success I've seen has had nothing to do with the method that produced it but rather whether it actually played a useful role for general (non-deluded) humans.,2024,268% higher failure rates for Agile software projects
geerwolf,22,"Didn’t know the Register is still around

> In praise of knowing the requirements before you start cranking out code

Do people do Agile without requirements? As  I understand the benefit of Agile is in being able to make changes to the plan when new information is available",2024,268% higher failure rates for Agile software projects
krum,20,"How do you do anything without requirements?  Even ""hello, world"" has requirements.",2024,268% higher failure rates for Agile software projects
rr_cricut,2,"It's not that there aren't requirements, it's just that everyone has their own idea of what the requirements are 😂.",2024,268% higher failure rates for Agile software projects
MornwindShoma,13,"Tell that to every damn stakeholder who thinks that agile is ""I'll tell you months later the mandatory and hard to work around features that impact on what you have already done"" so that you end up rewriting the project a dozen times.",2024,268% higher failure rates for Agile software projects
CryptoNaughtDOA,6,If requirements means a sentence then no.,2024,268% higher failure rates for Agile software projects
s73v3r,5,"Far too many people, especially management, take it to mean you don't have to plan. Nothing in the manifesto says that you shouldn't plan, it's just that you should favor being able to react to change",2024,268% higher failure rates for Agile software projects
fbochicchio,2,"Agile requirements would be the ""stories"" that the Product Owner creates to be to implement at each cycle. And the Product Owner should be someone that has a firm grasp of the buisness logic that the software shall implement. Also, the incremental deliveries should go to the user, that should provide feedback to help the Product Owner to write better stories. Failing that, the agile team works in isolation and could very well wander uselessly or producce useless software.",2024,268% higher failure rates for Agile software projects
IQueryVisiC,1,Now that our code corrupts customer data in production I understand what those cryptic sentences in the requirements mean.,2024,268% higher failure rates for Agile software projects
KryptosFR,8,"The projects I used be in that actually followed the methodologies completely (usually SCRUM) worked very well, with a very high satisfaction from both the development team and the final client.

But we did everything that's in the book:
* team of 5 developers (no more), +1 architect at the beginning (sprint 0)
* real daily standup meeting that don't last more than 15 minutes total
* one person working in advance with the client to prepare the stories for the next two sprints
* planning meeting with planning poker done by the development team
* refinement to exclude some low priority/low value stories when we had too many to fit into a sprint
* retrospective to see how we can improve the process, no bullshit
* definition of DONE and of DONE DONE (when tests are passing)
* good test coverage to validate the stories
* deliverable once every two sprints
* no micro-managing by the client or out-of-schedule meetings (only the ones that fall into the methodology)
* not adding any ""high priority"" stories in the middle of a sprint, they could only be added to the next one and discussed during the planning meeting
* rinse and repeat...

Any other projects that didn't have all those items combined, or starting to have out-of-schedule planning/meeting/stories, did fail or had a low satisfaction.",2024,268% higher failure rates for Agile software projects
Hacnar,1,"I was in a team that did something similar, except when there was a new critical story to be implemented (e.g. other team realized this would block them hard), it could be switched for a lower priority one in the first half of the sprint.",2024,268% higher failure rates for Agile software projects
PM_ME_YOUR_MUSIC,2,"Just a quick reminder for everyone, before you read this article make sure to raise a jira ticket and assign story points to it",2024,268% higher failure rates for Agile software projects
abbey_garden,2,"I loved agile and then I burned out on it.  I found some practices within agile worked like intervals of 2 week sprints and quick daily feedback loops (stand-ups).  Unfortunately if you looked at a developer, life was miserable and the control they once had over quality and commitment slowly eroded.  The concept of a sprint scope eroded with new tickets coming in daily for warranty work, production issues, or from politically squeaky managers just changing requirements on a dime.  There was no gate so no commitment.  Developers were context switched, ticket switched daily.  Teams were forced to take in more scope than they could deliver and beg forgiveness every two weeks.  Tickets were one liners but developers had to deliver something.  Churn was a given when pulling code out at the end of a sprint because some other team couldn’t deliver a dependency causing the integrated feature to fail. Cuts came and the scrum masters were cut, testers were cut but expectations on velocity were never cut for the team.

Yes, we’re called it agile but it was really a modern day sweatshop.  The article is lazy and throws a grenade but doesn’t get to the heart of the matter.",2024,268% higher failure rates for Agile software projects
OzoneGrif,4,"Don't blame Agile for your project's failure; blame the poor organization. As an auditor for struggling development teams, I see this all the time. Most failures stem from managers who think Agile means 'do whatever we tell you right now without question.' True agility is far more nuanced and, when implemented correctly, is a powerful tool for efficient, high-quality software production.

The real issue is that Agile itself is just a concept. You need to structure your team and workflow effectively to harness its full potential. One common misunderstanding is around Scrum, a framework within Agile. Many managers attempt to impose a rigid version of Scrum without adapting it to their specific team and environment. This leads to a mechanical application of ceremonies and roles, missing the essence of flexibility and collaboration that Scrum promotes.

Scrum must be tailored to fit the unique dynamics of each team. This means customizing sprint lengths, refining the definition of 'done,' and ensuring that the backlog is a living document that evolves with the project. It's essential to recognize that Scrum is not a one-size-fits-all solution; it’s a starting point that needs to be molded to match the team's strengths and the project's needs.

Moreover, for Scrum to truly succeed, managers need to adopt a horizontal approach to leadership. This involves working with the team rather than dictating from above. Managers should act as facilitators, removing obstacles and providing the resources the team needs to excel. They must foster an environment where team members feel empowered to voice their ideas and concerns, ensuring that the entire team is aligned and motivated towards common goals.

When managers embrace this collaborative mindset, they create a culture of trust and continuous improvement. This not only enhances the team’s performance but also leads to higher job satisfaction and retention. Remember, the true power of Scrum lies in its adaptability and the collective ownership of the process by the entire team.",2024,268% higher failure rates for Agile software projects
Antifaith,2,"this exactly - management hates when you tell them ‘stop doing this work with me not against’ though.

To them you’re just saying no i won’t do it in 10 days even though they know you can",2024,268% higher failure rates for Agile software projects
Waylander,1,"One software project I worked on recently had the PM telling us that we were going to go with a ""Hybrid-Agile Methodology"". When I pointed out that nothing in his plans were actually agile, other than him calling our meetings ""scrums"", he told everyone that it was ""agile-like"" or ""agile-ish"", and that's what ""hybrid-agile"" meant. Yeesh. ",2024,268% higher failure rates for Agile software projects
SittingWave,1,"[Yesterday it was 65%](https://www.itpro.com/software/development/its-time-to-question-agiles-cult-following-experts-cast-doubt-on-methods-future-with-65-of-projects-more-likely-to-fail)

Tomorrow ""1432545% failure rates for Agile software projects""",2024,268% higher failure rates for Agile software projects
eating_your_syrup,1,"The agile I see today is not the agile I saw 15 years ago. It's filled with all the hallmarks of pre-manifesto waterfall style development, just wearing a casual work attire instead of a 2000 dollar suit.",2024,268% higher failure rates for Agile software projects
happy_hawking,1,"One should mention that the culture around ""failure"" is a bit different in Agile than traditional Project Management.

I've never seen a traditional project officially ""fail"" although many of them have been delayed shit shows with inflated cost that never delivered what they were started for. But people will always find a way to show even the most minimal results off as a success.

In Agile you embrace failure and because you want to learn from it. So you would be more likely to call something a ""failure"", figure out what went wrong and then move on with this learning to the next attempt.

But that applies for real Agile. Most ""Agile"" projects are just an excuse to not follow any process. See u/sisyphus's comment: [https://www.reddit.com/r/programming/comments/1d8r9xf/comment/l78o9ew/](https://www.reddit.com/r/programming/comments/1d8r9xf/comment/l78o9ew/)",2024,268% higher failure rates for Agile software projects
Grannen,1,"There are a lot of references to a study, but I can't find the source. Has anyone else been able to find it?",2024,268% higher failure rates for Agile software projects
dustingibson,1,"Wonder if they meant scrum and not agile. A lot of the scrum teams you see don't adhere to agile principles especially ""individual interactions over process and tools."" and ""responding to change over following a plan.""",2024,268% higher failure rates for Agile software projects
Schmittfried,1,Why is this trash article reposted again?,2024,268% higher failure rates for Agile software projects
Ausierob,1,That surprises me not even a little bit…..  <eye roll>,2024,268% higher failure rates for Agile software projects
PlayingTheWrongGame,1,"Man, that project management consultant company has sure gotten their money’s worth out of that press kit. ",2024,268% higher failure rates for Agile software projects
goranlepuz,1,">Waterfall, for example, uses a succession of documented phases, 

**It fucking does not**. I could say ""journalists"", but I have heard that exact same trope from many seniors, architects and other what-have-yous, despite the seminal paper on it showing these phases at the very beginning, then saying ""this is risky and invites failure"", **and then adds feedback loops, iterations, customer involvement etc**, shortly, waterfall has what a lot of what we think today when we say ""agile"".

>of which coding is only a part. While simple to understand and manage, Waterfall can also be slow and costly, with changes challenging to implement...

Coding is always only a part. And **clearly** it is not simple to understand and manage, because it has been ""the"" methodology for a decade or three, and there was a myriad of problems. Heck, agile is one of the answers.

So what gives?

Here's what I think: we should not pay too much attention to the terminology, jargon of the work organization. **They don't matter nowhere near as much**. What does matter is keeping an eye on the execution in simple and practical terms of the work at hand.

Sure, by all means, use the spirit of the methodology to step back occasionally and reflect, but that's about it.",2024,268% higher failure rates for Agile software projects
exomni,1,"The research is even worse than people are guessing.

He literally just asked people whether their last project succeeded or failed, and then asked them stuff like ""were requirements changed late in the software development lifecycle"" and ""did you never get any clear requirements on your project?"" and if they said yes to those questions then he said by his definition they were doing ""Agile"" and if they said no then he says they were by definition doing ""Impact Engineering"".

He didn't actually ask anyone whether they ""used agile"" or not. He just *defined* common reasons people give for project failure, like ""late changes in requirements"", as ""Agile"". It's astonishing to me that he didn't get an even worse result considering how junk and dishonest the study is.

A shame because I hate Agile and I would love a good study to point to to tear it a new one.",2024,268% higher failure rates for Agile software projects
michaelochurch,1,There was someone who pointed this out 10 years ago and a bunch of weirdo psychopaths tried to destroy his career.,2024,268% higher failure rates for Agile software projects
Guillaune9876,-1,Agile is deferred responsibility to a headless (no PO) development team.,2024,268% higher failure rates for Agile software projects
bonjourmr,0,Failed state,2024,268% higher failure rates for Agile software projects
wndrbr3d,-4,"You either die the hero, or live long enough to become the villain.

As someone who has been a proponent of Agile methodologies for close to 15 years, I welcome a discussion around better ideas.

That being said, a return to waterfall? Over my dead keyboard.",2024,268% higher failure rates for Agile software projects
Odd_Ninja5801,2,"This notion that Agile is ""better"" than Waterfall is why we've ended up in the position we're in today. Both have advantages. Both have flaws. Both of them have types of developments where they are clearly the better choice.

But no, we aren't, as experienced developers, allowed to decide which approach best suits the circumstances. Instead we have to slavishly follow whatever the flavour of the month currently is. Even if we know it will make the project worse. Or make the project fail.

Development methodologies are tools. Just one more tool in our toolbox. Yet we keep on trying to use hammers because our hands are tied into a setup that says everything is a nail.

It's infuriating.",2024,268% higher failure rates for Agile software projects
NotGoodSoftwareMaker,0,"All development methodologies eventually converge to the same points of failure. 

You only change the name and the route. Convergence is inevitable.

Its because processes are static things. Some people approach them with good and honest intentions. Most only try to game their way through it and when it fails after enough gaming the system then we all pretend the system is terrible, invent a new one, rinse and repeat",2024,268% higher failure rates for Agile software projects
StruanT,1,"Isn't the whole point of 'agile' to make the process dynamic.


People over process. If people don't like the process or think it won't work they should be free to disregard it entirely.",2024,268% higher failure rates for Agile software projects
Kerial_87,17,"Many of my toughts are already written by others, so yeah, just to confirm, the killers of agile.

1. Lack of management buy-in. They want the fanciness, it sounds good, but please keep everything we did so far, and rebrand ut until it looks agile.1/A. Twisting it one thing at a time until it's everything but agile.
2. Thinking that agile is JIRA, and tasks are now User Stories, with a sprint running every two week, and daily stand-ups are the new mgmt statuses. (HELLO ""Individuals and interactions over processes and tools"" )
3. Lack of trust: u can self organizing teams sound good, but u get a (micro)manager breathing down your neck, but don't worry we will call him/her Product Owner (see also: you can be a cool jazz band, but heres a maestro to conduct you)
4. Resource optimisation: skeleton crewed projects where scrum master is a luxury, so you have one for 4-5 teams or even better: PO can do the SM part. Also it's hard to be self improving and organising when you are overworked and burnt out.
5. We lack any sound project organisation let's label our chaos as agile, so having no plans, strategy, toughts about where to go and what to do can be looked at as an advantage now!
6. Agilefall: (Agile and waterfall) Upper Management's dream of ""Let's innovate and combine the best of both world"" ends up with piling up the disadvantages of both.
7. Having an overpromised deadline vs. ""Continuous attention to technical excellence and good design enhances agility""
8. Backlog grooming vs. too many things where everything is important AND urgent (considering the distinction is clear between the two, which is often not the case).
9. Estimation still being forced in mandays vs. reiterative nature of agile methodologies.

In summary the belief of agile being a more free, reactive, team member empowering framework often highlights the tragic extent of the failings of the previously used, seemingly more organized hierarchical nature of project management practices.",2022,Why is Agile so bad?
tobias_talltorp,2,"Some commentary.

5: Definitely not Agile. That's frAgile.

6: The same idea as the mullet. Really hard pull off short hair and long hair at the same time and have it look good.",2022,Why is Agile so bad?
do_u_even_larp,14,Most companies just think they’re doing it. No leadership buy in or communication.,2022,Why is Agile so bad?
ed8907,13,"One of the main problems is that we have companies implementing Agile just because it's ""trendy"" instead of analyzing if their projects can be Agile, not all projects can/should be Agile. However, since it's ""trendy"" they force the implementation and everyone suffers.",2022,Why is Agile so bad?
0V1E,14,"Lots of reasons:

Organizations try to shift to agile without proper coaching and strategy. This leads to poor execution and results.

Customers don’t realize the first iteration is not going to be the “best iteration” and poor marketing or expectation management leads to poor product acceptance.

People try to fit traditional PM experience into scrum master/product owner roles but they are very different despite organizations trying to make them one in the same.",2022,Why is Agile so bad?
Substantial_Rush_675,2,Thats why we have MVP infinity haha,2022,Why is Agile so bad?
mtlurb,10,Companies think it will magically do more with less in less time and everything is bendable.,2022,Why is Agile so bad?
LogiHiminn,10,"I don’t think Agile as a system is bad, it’s shoddy leadership’s implementation of it that can go wrong.",2022,Why is Agile so bad?
Calico-Traveler,10,"My problem with agile is when management does not commit the resources to work on agile full time for a project. They just become side projects. Management assumes my project’s team can also work on 5 other projects at the same time or work for other managers day to day, so the project does not get the attention it deserves and of course by the first sprint (2 weeks) you will not get an MVP and it takes longer.",2022,Why is Agile so bad?
Deleted Account,1,This. The first thing you learn in scrum training is how quickly productivity goes down the more projects you’re spread across.,2022,Why is Agile so bad?
Harry-le-Roy,22,"Agile isn't bad.

What's bad is when people who don't know the first thing about project management decide that 'agile' means a project managed by whim, and that their own ignorance about project management has suddenly become just as good as someone else's expertise.",2022,Why is Agile so bad?
_CelestialGalaxy,2,Completely agree. One of my colleagues believes you can throw agile at anything and it will work. In reality it falls short. It already is a mess even when it comes to waterfall! Spent the last 6 months trying to get people to understand project management and also see the need for processes can’t just throw whatever you want without planning etc,2022,Why is Agile so bad?
Leo-707,1,"I've seen agile struggle for a few reasons, but yeah, I've seen exactly this. More often than not it is in the mix.",2022,Why is Agile so bad?
pineapplepredator,1,You said this better than I just tried to.,2022,Why is Agile so bad?
Deleted Account,9,[deleted],2022,Why is Agile so bad?
pineapplepredator,4,The last one is big. It’s basically treated as a shortcut to project management if you hate PM because it hurt you once.,2022,Why is Agile so bad?
coysthrow22,9,Because it's a stupid methodology for people who are too lazy to plan their project properly.,2023,Why is Agile so bad?
Psychological_Load21,1,"People need to make unrealistic estimations on new work they have never encountered, and get panalized by not finishing them according to their own estimations. It's just like encouraging people to dig their own graves.",2024,Why is Agile so bad?
El_Serpiente_Roja,7,"Consumers sometimes don't like it because the process arrives at a final-ish product through iterative releases (in some form). After a while the result technically passes all the test and checks all the boxes but consumers don't enjoy the step by step. Waterfall didn't necessarily do this perfectly but it did offer a closer approximation of that ""we just want a final product"" experience from the consumer perspective... Consumer opinions affect management and management affects the implementation of the methodology.",2022,Why is Agile so bad?
tubaleiter,7,"“Agile in name only” is very common. Don’t want to go through the effort of actual project planning, progressive elaboration based on reasonable time scales, etc.? Just slap 6 months of “sprints” on your 1-slide “plan” and call it a day. 

When you don’t achieve anything useful, blame it on the process. 

I don’t have a problem with agile per se, but the terminology gets thrown around a lot without real buy-in behind it. I’m also a supporter of “proper” waterfall, when it’s the right methodology for the project, but waterfall isn’t cool today.",2022,Why is Agile so bad?
808trowaway,3,">I’m also a supporter of “proper” waterfall, when it’s the right methodology for the project

I'm on a waterfall mega project whose schedule has about 1300 lines and counting. It's the right methodology for the project but that doesn't stop me from hating it with a passion. Every time I look at the schedule I want to kill someone.",2022,Why is Agile so bad?
tobias_talltorp,6,"The hardest principle of the [Agile manifesto](https://agilemanifesto.org/) is ""Responding to change over following a plan""

The other four principles can be implemented quite easily on their own, but ""responding to change over following a plan"" goes against a lot of what traditional project management teaches.

It's a complete different perspective on how you behave and think.

And having to change **yourself** instead of **a process** is where most organizations stumble. 

And yes, it's an organizational change that needs to happen.

Responding to change means:

* Being comfortable with constant communication with users. Not just at the beginning
* Thinking in ""themes"" instead of ""milestones""
* Breaking something big into smaller deliverables
* Spend less time with upfront estimating 

And ""responding to change"" doesn't mean ""change priorities all the time"". 

It means ""plan small and plan often""",2022,Why is Agile so bad?
FormicaDinette33,7,"It has only made sense when everybody is on the same project. But at my current job, it is just everybody managed by our manager and we are all on different projects. You just stay on mute, say one sentence “I am working on this ticket.” And go back on mute. It is SO STUPID. now we have a new scrum master and she wants us to do demos to decide if we are done with our project. Are we in kindergarten? I can’t take it.",2024,Why is Agile so bad?
Thewolf1970,8,"I used to be in that camp. It always seemed that it was the way to have a never ending project. It was a bit of an eye opener for me when I worked with a very well funded Agile project that had properly trained members. The organization was so dedicated to making it work they brought in an Agile coach. She was so informative that I totally got it afterwards.

It's one of those methods that you have to embrace e it to make it work. 

It's one of those things that concerns me a bit with the trend towards Agile Hybrid. I think people are going g to take it as an opportunity to not do things properly.",2022,Why is Agile so bad?
belinck,5,"This is it.  Agile gets a lot of hate because most organizations say they're going to try going agile but don't actually commit to it, especially on the side of the product owner.  They don't commit to it because there is a lot of overhead and there isn't a go-live date stamp you can absolutely commit to.  I've seen it run well maybe 1-2 times in 10.  Those 1-2 times were AWESOME to watch and came out with superior results.  Those other 8 instances were exercises in professional torture.",2022,Why is Agile so bad?
Willing_Hamster_8077,1,"I'm going through a tough project currently. basically a micromanaging boss who schedules 30 minutes standups which take up the entire 30 minutes every time lol. And calls everyone in the team randoly throughout the day. and arranges impromptu meetings when he feels like it. No estimates on anything. just a go-live date to meet. Which we're gonna miss by a long shot hahaha

Thing is-agile has been around for 10 years now. It's clearly not being adapted well as we can see from the comments-on various threads. So what next? Are corporate projects always going to be chaotic? Seems like it's what these projects are by nature so there will never be a solution?",2023,Why is Agile so bad?
-Typh1osion-,4,"I haven't necessarily run into a lot of hate, but I feel like the agile framework is often lost on non-technical business leaders. What's a sprint? Story points? So what is that in hours? So you need 6 months just to get this framework off the ground?

Those are often the things I run into and have to work against.",2022,Why is Agile so bad?
Substantial_Rush_675,5,Companies just slap agile on their process but don't know anything about it or how to conduct a flawless agile project in general.,2022,Why is Agile so bad?
Deleted Account,4,It’s not. Poor leadership makes it not work.,2022,Why is Agile so bad?
24fish,6,Because people misapply it and usually don’t do it right.,2022,Why is Agile so bad?
balunstormhands,3,The problem as I see it is that there is no communications API with management. It is very team oriented. But many companies are more than one team and so management kinda jacks in where ever they can and force regular management stuff into agile which breaks agile.,2022,Why is Agile so bad?
Deleted Account,3,"„Agile“ is a marketing term, a name, a myth we think we have. And everybody knows it, nobody wants to admit it and thats why everybody hates it",2022,Why is Agile so bad?
NativeEuropeas,2,"So bad? What do you mean?

It is so far the best project management workflow I've had an opportunity to work with.",2022,Why is Agile so bad?
DinoLavasaur,2,"I feel like my org does good agile type stuff under the kaizen name.   There’s a team of kaizen facilitators that ICs and managers submit ideas for improvement to, the facilitators select which agile/kaizen tool would be appropriate to the thing, and then they work their system.   Some days it feels like kaizen for kaizen sake, but they try to improve things…. And then there’s no accountability for stupid ideas.  Just more agile tools thrown at a process, tool, software.   The company is doing really well though, despite the seemingly large amount of bloat around the process.   Each kaizen event is treated like a project, sometimes more than ten events being planned at a time.  Sometimes they do the heavy “event” 3 projects consecutively.  This usually goes poorly when they all want to pull in support resources (thing maintenance, metrology/calibration, QA and validation, IT support) without communicating they were going to need any of those support functions.  You’d think by now they would know to check with the internal stakeholders better…",2022,Why is Agile so bad?
mmrrbbee,5,Management,2022,Why is Agile so bad?
Gujimiao,-2,Not enough Team member to run it,2022,Why is Agile so bad?
CodeAndBiscuits,100,"Let's be clear, Agile is a philosophy. Usually when we say ""form of development"" we mean ""methodology."" A lot of folks assume Agile and Scrum are the same, but Scrum is just one implementation. Most people who grow to dislike Agile really mean Scrum. I personally quite like kanban and almost everyone I work with does as well. It is very lightweight, emphasizes productivity and output over process and paperwork, and while I know a lot of teams that have ditched scrum, I can't say I know of any that have ever ditched kanban...",2024,“Agile is the worst form of development – except for all the others that have been tried.”
avoere,45,">Scrum is just one implementation

No, Scrum is 100s of different implementations. 5 years ago, everyone did Scrum. But everyone did it in completely different ways.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
CodeAndBiscuits,18,"LOL fair. If you want to finish the joke, scrum is different every week or two even at the same company, if it is implemented properly. Although not everybody takes it all the way, if you do retrospectives, honestly, the process is supposed to evolve. At the end of the year, if your Scrum looks the same as another company's, you are probably doing it wrong. Which is funny as heck to me, but supporters say completely unironically.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
nobuhok,15,"Our retros just go straight to the bin, I wish I'm kidding.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
CodeAndBiscuits,5,"Same TBH. We do the What Went Well, What to Improve, Action Items idea board method in two projects and a) nobody ever looks at them again, and b) the action items never get resolved.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
Wiltix,4,"When I ran retros we would almost accept anything in the process improvement, then I would not enforce it in the next sprint. 

If people did it then it would mean there was benefit and so we would then formally adopt it, if it just got forgotten about and nobody did it then we would put it in the bin. 

These processes become slaved to management and not the developers, so developers end up resenting the processes. I had a lot of fights with management about why we no longer do x, generally we stopped doing x 2 months ago and you have only just noticed it was clearly not giving benefit to anyone and yet we are delivering software.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
Sandurz,5,"A retro for every single sprint is so mind numbingly stupid, what a waste of time",2024,“Agile is the worst form of development – except for all the others that have been tried.”
Wiltix,8,"I disagree, retros each sprint are really good because you should be able to address any issues that prevented you as a team from getting as close as possible to meeting your goals. 

Retros suck balls when they take 3 hours every 2 weeks and nothing changes after them. 

So many people do the ceremonies but never change anything, which is why a lot of people are so disillusioned with scrum. 

I am not a scrum coach or a scrum master, but I have worked in places where it was done well and for baldy. Done well it’s a good process, but it’s become a business in its own right and that just corrupts it.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
Sandurz,1,"If you somehow have new process problems every sprint then sure that sounds useful, but I’ve never had that be the case. Only occasionally is there anything actionable so I’m usually struggling to have anything to contribute at all.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
Wiltix,0,"But it doesn’t have to be new process problems, it can be old process issues. 

If you don’t feel you can contribute to that aspect then don’t, but you should be free to raise and discuss any niggles you have with the process, doesn’t matter how big or small.

They are very worth while meetings if done properly. I have been say in some where they are pointless because you know they won’t change the process it’s just a box tick because some scrum guru told them to have the meeting.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
PoopsCodeAllTheTime,1,"GUIZ, WE COULD HAVE MORE INFO ON THE CARDS, THIS IS THE 22th TIME I TELL YOU THIS IN A RETRO, WHY DO U STILL ASK ME IF NOTHING HAS CHANGED",2024,“Agile is the worst form of development – except for all the others that have been tried.”
Wiltix,1,?,2024,“Agile is the worst form of development – except for all the others that have been tried.”
ISDuffy,1,"My old place we had them weekly on Friday after client demo / review, and I found they work because they more casual and could actively give feedback on the work and as a team how we worked.

New place they get cancelled and issue bubble over until they really big problems and people are frustrated with each other.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
returnFutureVoid,4,This is why I find Agile so exhausting. We already have enough cognitive overhead with all the tech we need to know and learn. Throw this on top of everything and I’m maxed out.,2024,“Agile is the worst form of development – except for all the others that have been tried.”
CrownLikeAGravestone,3,"If there's one thing that all developers can agree on, it's that all the *other* developers are Doing Agile Wrong.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
scylk2,3,"Scrum is a lightweight framework, not a full blown dev methodology specification.  
So it's normal that not everyone's Scrum looks the same.  
On the other hand, if you don't actually follow the core principles of Scrum... then you are not actually doing Scrum.  
And that's very common.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
stormthulu,1,"See, I don’t consider it lightweight. Agile can be lightweight, but I feel like scrum(tm) is very heavy handed and opinionated. In my experience with scrum and other methodologies, scrum is the most prescriptive and rigid version of agile I’ve seen.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
carlson_001,5,"Kanban is just a different way of listing tickets in their respective statuses. You still need processes for gathering requirements, estimation, planning, and testing. Kanban doesn't offer any solutions to that. Neither does ""scrum"". ",2024,“Agile is the worst form of development – except for all the others that have been tried.”
midri,13,"Kanban is where it's at, less ceremony, more getting stuff done. Middle managers hate it though, because there are less metrics to make graphs from.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
TheScapeQuest,6,"What element of Scrum do you pull your graphs from?

It's kanban that brings in ticketing and metrics like production lead time.

Kanban is not ""continually pull tickets from the left"", it's the mechanism that brought in the tickets in the first place 

People complain about Scrum, but what they're normally doing is a form of Scrum with Kanban.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
stormthulu,3,"Velocity is the big scrum metric. How many points did you do last sprint? How many this sprint? How many will you do next sprint? Are your points per sprint increasing? How many points are you having to move out of a sprint because it did t get finished? 

But here’s the thing. It’s like Who’s Line is it Anyway?, “the methodology where everything’s made up and the points don’t matter.”  

I’m a dev now, but I’ve been a scrum master in the past. And one of the most productive things I did for my team was to eliminate points estimation and move into a more Kanban style system. We had developers doing iOS and android dev, two different teams, and their definitions of how to assign points to to stories weren’t even internally consistent. So the poi to truly were a waste of everyone’s time.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
Deleted Account,2,"But that's the problem of points not agile. Even scrum doesn't mention anything about story points, that's just another implementation detail. You could as well measure velocity with LoC or number of tickets.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
comrade-quinn,2,"Yeah +1 for Kanban. 

For me, it’s what’s left when you decide to simply do things in a sensible order and identify bottlenecks that are preventing you from doing those things faster. 

Those two things, progress and visibility, are all you need from an SDLC. The rest is status seeking, visual filler and herd mentality. 

Kanban ticks those two boxes in a beautiful way without adding any bloat to the process",2024,“Agile is the worst form of development – except for all the others that have been tried.”
PoopsCodeAllTheTime,1,"could you tell me what this ""kanban"" methodology entails? Is it just the idea of a trello board by any chance with everything else left to the individuals? lol",2024,“Agile is the worst form of development – except for all the others that have been tried.”
YahenP,33,"Guys, don't forget. We do this:

[https://programming-motherfucker.com/](https://programming-motherfucker.com/)

Managers come up with smart words to justify their existence. Whatever the technology, scrum, agile, or whatever. It all comes down to the fact that we just work.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
zippy72,3,Bookmarking this. This is the way.,2024,“Agile is the worst form of development – except for all the others that have been tried.”
TheBigLewinski,29,"Agile takes quite a bit of discipline from leadership and corresponding culture that most companies do not have. So they just use waterfall, but with sprints and user stories to tell themselves they're operating iteratively. Then, label their deployment pipeline as ""CI/CD,"" even though they release every two weeks, and mission complete. 

Agile doesn't work because the ideas of agile are being used in name only.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
scylk2,5,"Exactly this.  
Then you have ignorant devs coming in these environments, and because they have no knowledge and understanding of themselves about Agile, they conclude that it's BS from managers and that it just gets in their way. Bit sad.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
stormthulu,7,"Right—their agile training is a form of the telephone game, it’s being explained to them by someone who heard it from someone who learned it from someone who was trained by a certified Scrum(tm) trainer.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
stormthulu,3,"Yeah I’ve only worked at one company that truly did actual, honest to god CI/CD. One. Out of like 10? 12? companies…",2024,“Agile is the worst form of development – except for all the others that have been tried.”
Embarrassed_Quit_450,1,They all say they're specisl snowflakes and that's why they can't release faster. Every single one of them.,2024,“Agile is the worst form of development – except for all the others that have been tried.”
Embarrassed_Quit_450,2,They think they are doing devops because they have a devops team.,2024,“Agile is the worst form of development – except for all the others that have been tried.”
Wiltix,2,"It’s become a term sold to companies from an especially awful type of middle management / consultant, that will corrupt absolutely anything.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
marenicolor,1,This. Middle managers / clueless C-suite have co-opted it and made it an enshittification methodology,2024,“Agile is the worst form of development – except for all the others that have been tried.”
marenicolor,1,Good 'ol Wagile,2024,“Agile is the worst form of development – except for all the others that have been tried.”
Deleted Account,40,"Agile went from something I wanted so badly 15 years ago to a word I basically dread hearing now from anyone but a developer. Because what they mean by agile is that they never have to settle on anything with the exception of a timeline, that they cannot possibly move under any circumstance (/s) and the developers are about to bend over and take it raw while wasting loads of time filling out pointless things in tickets and attending 5 meetings a day.  And when it inevitably goes tits up, they will be blamed even though they warned about it the entire way.

This is modern agile methodology in my experience.  You Either Die a Hero or Live Long Enough to See Yourself Become the Villain.  Agile has lived long enough",2024,“Agile is the worst form of development – except for all the others that have been tried.”
Deleted Account,6,"I want to know how many people are actually following Agile. It seems to be implemented differently in every team, every company.

My personal preference is a basic Kanban task board. Sometimes the simple solution works better.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
tamahills,6,"It may help to understand a little about Waterfall, how it was done before Agile, to understand how we ended up with Agile.

[https://en.wikipedia.org/wiki/Waterfall\_model](https://en.wikipedia.org/wiki/Waterfall_model)

It became apparent that it was very difficult to try plan huge phases of work upfront, this led to issues within companies when missed requirements and unknowns came up. Sometime in the 2000s we shifted to Agile where we stopped trying to plan out so much upfront and instead of trying to plan large chunks we plan small chunks, making adapting to unknowns a lot simpler.

I think it can also be helpful to look at the actual Agile manifesto principals...

* **Individuals and interactions** over processes and tools
* **Working software** over comprehensive documentation
* **Customer collaboration** over contract negotiation
* **Responding to change** over following a plan

The issue is, hardly anyone has actually reads and adheres to the Agile manifesto. The term rapidly got embedded in the industry as a bit of a catch all to essentially describe anyone working in sprints and asking 20 people will likely give you 20 differing responses. Most places I go do Agile but no place I've been has implemented it the exact same way, so your experiences can vary, but the core principles aren't inherently detrimental and fairly loose.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
stormthulu,2,"Kent Beck actually started doing what he refers to as extreme programming starting around 1996, and the earliest training I received in agile methods was 2003-ish, so probably even earlier than you suggest.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
tamahills,1,"Oh interesting! I'm not *that* well versed on the exact history, I came into the industry around 2014. Thanks for sharing this cool detail :D",2024,“Agile is the worst form of development – except for all the others that have been tried.”
Csysadmin,6,"Once upon a sprint so dreary, while I pondered, weak and weary,

Over many a backlog item, unfinished from before,

As I nodded, nearly napping, suddenly there came a tapping,

As of someone gently rapping, rapping at my team room door.

""'Tis the Scrum Master,"" I muttered, ""tapping at my team room door—

Only this, and nothing more.""

--

Open here I flung the shutter, when, with many a flirt and flutter,

In there stepped a Scrum Master from the Agile days of yore.

Perched upon a sticky note just above my whiteboard door—

Perched, and sat, and nothing more.

--

Then this stern Scrum Master spoke, with gravitas that made me choke,

""Tell me what you seek, oh Scrum Master, standing on my floor?""

Quote the Scrum Master, ""Do more.""",2024,“Agile is the worst form of development – except for all the others that have been tried.”
Embarrassed_Quit_450,4,"The vast majority of places calling themselves agile wouldn't even be able to explain the difference between agile and waterfall.

Agile is fine, managers are idiots.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
zippy72,12,"IMO, Agile is not a form of development. It's marketed direct to managers - ""here's how to get all your development projects inline"".

And the snake oil salesmen who market it ... Project fails? ""You weren't agile enough!"" Non Agile project succeeds? ""It would have been better if it was agile!""

Kpis? Yes, very agile

Right now, I feel like Agile is marketing speak, buzzwords and a management control system. But as a system for developing good software it should now be considered harmful.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
scylk2,-1,lol. Tell me you have never been trained in Agile nor read anything about Agile without actually telling me,2024,“Agile is the worst form of development – except for all the others that have been tried.”
zippy72,2,"Two things to consider:

https://www.theregister.com/2024/06/05/agile_failure_rates/

https://www.theregister.com/2024/08/07/agile_catastrophes_risk_undermining_the/",2024,“Agile is the worst form of development – except for all the others that have been tried.”
truNinjaChop,8,Waterfall is by far the worst. Hands down. The main reason agile has went to shit is because people cannot grasp level of effort over time.,2024,“Agile is the worst form of development – except for all the others that have been tried.”
djfreedom9505,1,"We recently had to work with a team that does all waterfall planning. It been god awful sitting in 1 hour meetings each day to talk about the smallest bit of detail, and the worse part is that I don’t have confidence that it will be done the right way and we’ll be back here again next quarter.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
Outrageous-Chip-3961,3,"It started for small core development teams to get ahead of blockers to deliver faster. Now its part of every mum and pop's office job and they have 'daily stand ups' and 'do agile' because they 'slice vertically'. 

On a serious note, its not a form of development, its a work practice and style that can help teams organize and align  with not only themselves but other areas of a business. I prefer a vague interpretation, the only thing that matters for me is committing to a two-week cycle and not be interrupted during that cycle with the expectation that any issues that arose over that sprint are talked and discussed about and ideally improved for the next two-week cycle. That's all i'm looking for.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
pinkwar,2,"I hate all the daily, weekly and monthly meetings.
Just let me do my job.

I'm a very introvert person and half my energy is drained during these meetings.

There's no worse way to start my day than a morning stand-up.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
nomaddave,2,"At this point I honestly just prefer old school waterfall. At least then you have something pretty for everyone to look at and some vague idea of what tasks in total are out there and may or may not be able to run concurrently. And you might not have as many meetings for random status updates then since PMs are only going to care about what tasks are active without all the other Scrum-ish ceremonies that they want to plaster on top to try to get Scrum to be waterfall anyway.

I’ll see myself out now.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
scylk2,3,recipe for disaster on any complex project but eh,2024,“Agile is the worst form of development – except for all the others that have been tried.”
stormthulu,2,"Yeah, I have to disagree there. I’ve worked in the software industry dusty since 1998. So I’ve been through waterfall, rational unified process, extreme programming, scrum, etc. I can, without a doubt, say “agile” (not specifically scrum) is the most effective methodology for development—when done right. Even when done wrong, I think it’s an improvement over the other options we’ve left behind.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
funhru,1,"I have one success story with Scrum. We as a team worked together for more than 2 years before the start of the Scrum process, we have spent 3-4 month to get to use to it and  5-6 month to product owner to use for it, so after 6 month everything become smooth. But we were a team of 6 people, fully controlled our env. and 3rd party teams that were helping us deliver something when we didn't have enought capacity.  
But I've never saw successful Enterprise Scrum.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
timwaaagh,1,well if you never tried anything else then how can you know really,2024,“Agile is the worst form of development – except for all the others that have been tried.”
build_ux,1,"XP (eXtreme Programming) captures a lot of the intended value of Agile with fewer of the clunky practices.

Reading early Agile works quickly reveals how far teams have drifted from the original design. Scrum is perhaps one of the most problematic variations.

At the core of the issue, countless studies have shown that estimates are always going to be inaccurate and a waste of time. They found that simply counting the number of tasks, regardless of size, resulted in a more accurate estimate than actual estimations. This points to the whole exercise being a source of waste.

The approach I've found to be most successful is Shape Up by Ryan Singer (formerly of Basecamp).

It focuses much more on de-risking work before committing to it, entrusting the team to define their own tasks and priorities, and embrace ""flexible scope, fixed deadline"". The 6-week cycle is just long enough to achieve a meaningful scope, but not too long that it drags on. Having a 2-week cooldown between each cycle allows the team to make improvements, fix bugs, and ""shape"" the work for the next cycle. The simplest approach is to 6 cycles per year with 2 months each. Sure, there's a little variability due to months having different numbers of days, but it's far simpler than perfectly having 6 week cycles.

The teams I've worked with that do Shape Up vastly outpaced teams doing Agile, especially Scrum. There's very little meeting overhead, there's a lot of clarity and agency around the work, and the cycle length makes for a calm and productive environment.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
the_malabar_front,1,"People always talk about Agile vs waterfall as if the entire universe of software were limited to web sites.

Has anyone delivered a weapon targeting system using Agile development?  Could you scrum your way to safety-critical software like a nuclear power control system or a cardiac pacemaker?  Are user stories enough to guarantee zero loss of life due to software malfunction?

Agile may have its place, and web services are huge, but there are still environments where Agile is not likely to be smartest approach to building sufficient solutions.",2024,“Agile is the worst form of development – except for all the others that have been tried.”
orz-_-orz,1,Waterflow works fine in our company until we switch to agile,2024,“Agile is the worst form of development – except for all the others that have been tried.”
NoidZ,1,Isn't agile intended with a technically endless budget? I forgot I haven't been working with companies who used it a lot.,2024,“Agile is the worst form of development – except for all the others that have been tried.”
scylk2,-3,"Let me translate your post for you:  
  
""I don't understand Agile, and when I don't understand something I prefer to dimiss it rather than properly educating myself because I'm lazy and scared. So I'm gonna post a vague and unsubstantiated criticism on r/webdev with exactly zero argument or example to back my claim, and hope that some fellow lazy and scared devs will validate my feelings, so that I can keep being an ignorant in peace""",2024,“Agile is the worst form of development – except for all the others that have been tried.”
git0ffmylawnm8,1209,Wait you guys only change requirements every 2 weeks? I've spent the past year with changing requirements every few days.,2024,agileScam
Deleted Account,387,"Omg get out of there

Edit: Fully missed the opportunity to say “git” out of there damn sorry I’ll do better",2024,agileScam
git0ffmylawnm8,91,"Oh yeah, I'm out. My manager at the time basically used the whole year as a way to document that I'm not a good engineer to PIP me.",2024,agileScam
GordoMondiola,35,"Ouch, your story sounds way too similar to my current situation. We literally disconnect from a 2hr sprint planning meeting to get all the requirements changed within the rest of the day. And repeat every day after the DSUP.",2024,agileScam
kryotheory,2,Are you me?,2024,agileScam
helgur,11,![gif](giphy|JGF7ctowtLGak),2024,agileScam
SartenSinAceite,3,git pull out of there,2024,agileScam
Soupeeee,49,"We have an app that's supposed to go into production end of February. We just got a bunch of new requirements and changes that absolutely need to get done before they can start using the app, and it's probably going to push back the date.



The worst part of this is that we have talked about these processes hundreds of times. At no point did the customer bring up these ""special cases"". We have statements from them that directly contradict what we are seeing in their live data, which is why we aren't just telling them that this new stuff will need to wait. 


Many of the problems we have encountered with this app could have been avoided with better requirements gathering, but we can do nothing about the customers not knowing or remembering how their stuff actually works.",2024,agileScam
SartenSinAceite,25,"Well, time to bill the customer for last minute changes!",2024,agileScam
Deleted Account,2,"Agreed. Sloppy governance leads to problems.  
If things are agreed and written then changes last minute can be sold as RFCs regarding work time.",2024,agileScam
Unexpected_Cranberry,11,"I've been in meetings as a technical resource in order to answer questions about my field, and I'm constantly in awe with some of the guys there who manage to get a fairly detailed and usually accurate description of a process that the people who perform said process on a daily basis couldn't describe without missing half of the steps.

These guys are probably worth their weight in gold thanks to the amount of time they save for everyone involved.

And if you don't have someone like that at the start of a project it'll usually be a complete shitshow that gets delayed for months or years depending on the size of the project.

I also know that I do not have that particular skill and will always ask to have a skilled technical PM on any larger project rather than try to manage it myself.",2024,agileScam
dobesv,3,"I think that's the whole reason why agile came to be, you can never get good enough requirements, you have to put the software in front of the customer before they can tell you what's missing.",2024,agileScam
ZealousidealPain7976,9,"sense fanatical library edge alive run distinct fade placid grandfather

 *This post was mass deleted and anonymized with [Redact](https://redact.dev)*",2024,agileScam
MyStackIsPancakes,5,Wait... You all are getting requirements?,2024,agileScam
Fifiiiiish,4,"Me neither.

So I make them up, it's kinda funny TBH.",2024,agileScam
_bassGod,2,Had the same thought,2024,agileScam
Cthulhu__,2,"Extreme Agile!

Mind you (unjerk mode), in my experience scrum works better when you’re not live yet and have a long list of work, kanban works better if you’re live and don’t want to plan ahead too much.",2024,agileScam
Cometguy7,2,"Our requirements never change, because they never existed to begin with. We don't have any issues getting code through QA either, because QA doesn't exist.  We've really streamlined the process.",2024,agileScam
CaesarOfYearXCIII,1,">because QA doesn’t exist

And this is the part where I as a QA engineer get triggered, lol.",2024,agileScam
CanIEatAPC,2,"My CTO held a meeting basically being like ""You guys change requirement so frequently, you're wasting our time and our money. If I hear anyone changing requirements without a good reason, we'll have a talk."" Ohhhh boy",2024,agileScam
CardboardJ,2,"Agile means the plan changes every 2 weeks for a year. Waterfall means the story doesn't change for 9 months then changes daily for 2 months, then changes hourly for another week before delivery and then managers spend the next year claiming contradictory versions of what the plan always was while trying to fix bugs.

The old waterfall engineers somehow convinced management to leave them alone for 9 months at a time and for that I admire them.",2024,agileScam
likeaGorilla,2,"Day 1

Head PM: We absolutely need to catch this business opportunity by the end of the month.

Day 3

Project PM: Here is a one page description of what the feature needs to do to catch this business opportunity accompanied with a top level UI design. Please start working on the project while I figure out the rest.

Day 10

Devs: Here's an unpolished version of the feature that will implement the requirements described in the one pager. We made about a hundred PM level decisions on our own. Here is a list of open questions, please clarify them so we can continue.

Day 12

Project PM: From further investigation, we are clarifying a few requirements from the initial plan but the bulk of the feature remains valid.

Devs: Implementing new requirements, but the UI does not fit anymore. Please provide and updated UI design.

Day 14

Project PM: Based on the new requirements, the designers have provided an updated UI.

Devs: This new UI does not adequately fit the new requirements, please clarify these open questions so we can continue. 

Day 17

Project PM: Here is the updated UI that fits the new requirements but here are also a few minor updates. Also, are you almost done? We need to catch this business opportunity by the end of the month.

Devs: Your ""minor updates"" are not minor at all; they change some of the core functionality of the feature. We will need more time to implement them which will probably make us slip. Also the UI does not fit these new requirements anymore.

Day 19  -  1 day to deadline

Project PM: We received a week's extension for the project to implement the new requirements. Here is the new UI.  Also, we really need to be done by the end of next week to catch this business opportunity.

Devs: Some devs might work over the weekend to make the deadline but we may be able to catch it. 

Day 23

Devs: Here is a semi-polished but functional feature ready for bug bash. We have a couple of days to bug fix major issues. We can polish the rest in production. 

Project PM: The feature looks good here is a list of bugs, but now that I look at it, this section does not work as well as I expected. Can WE change it to some other thing by the end of the week?

Devs: Your change is very significant, we would need about 2 weeks of work and a new UI. 

Day 25 - Extension deadline

Project PM: We got another week extension. Please implement the update. Also here is the new UI. Also we ABSOLUTELY need to be done by the end of the week to catch this business opportunity. 

Day 30 - Second extension deadline

Devs: We clocked 70 hours each this week but we got it working. There are no tests and no error handling, we will add them right after delivery. 

Project PM: Great! The feature looks good. The head PM is out for the week on their spiritual retreat; we can present the feature to them next week. Also quality is super important, please jump on the tests asap. Also here is a list of phase 2 requirements that we omitted during this phase, please implement with priority, preferably by the end of the week so they can be part of the presentation.

Devs: This is 3 weeks worth of work...

Day 35

Devs: We clocked another 70 hours each and got only half way through the new requirements.

Project PM: It doesn't matter as long as the core feature works. Let me present to the head PM.

Head PM: This does not adequately catch our business opportunity, here is a broad list of critical changes that need to be implemented. Also there is another team that would be interested in integrating with your feature for an even greater impact. Please integrate with them. Also this ABSOLUTELY needs to be implemented by the end of the month to catch the business opportunity.

Day 37

Project PM: Here is a one page description of what the feature needs to do to catch this business opportunity accompanied with a top level UI design. Please start working on the project while I figure out the rest.

Repeat the cycle: new requirements, UI doesn't fit, a few extensions, no tests, 70 hour crunches, delay because head PM is at an off-site training seminar at the vice-president's lake house.

Day 70 - Fifth extension deadline, over 2 months late.

Devs: ok, we're burned out but the feature is production ready. We will add the tests and error handling after shipping. 

Project PM: Great, the head PM has been promoted to principal PM due to their ability to catch business opportunities and is now managing a large team of PMs. A new head PM was assigned to the project.

New head PM: The previous head PM and my new boss are obviously great at catching business opportunities but we need to put the current project on hold for a bit in favor of a new and exciting business opportunity that we need to catch by the end of the month. Then we can get back to this one. 

Day 72

Project PM: Here is a one page description of what the feature needs to do to catch this business opportunity accompanied with a top level UI design. Please start working on the project while I figure out the rest.

The first project was never seen again. At least I get a six figure salary out of it.",2024,agileScam
git0ffmylawnm8,1,"Fuck me, you had a PM assigned to your project? My boss told me to be both an engineer and PM",2024,agileScam
likeaGorilla,1,"Haha, I'm one of the lucky ones",2024,agileScam
Shadowlance23,1,You guys get requirements?,2024,agileScam
aureanator,1,Y'all have stated requirements?,2024,agileScam
Ange1ofD4rkness,1,"Don't get me started on this. I just learned we have a client going line this week, they are changing the requirements, during the go-live.",2024,agileScam
MajorElevator4407,1,Wait you have requirements.  All I git is it shall work.,2024,agileScam
jl2352,1,"I worked on a project like this. It was to migrate a CMS system along with a redesign + changes to structure and content. We never planned more than a day or two, and had two to four standups a day (yes per day). It was one of the most enjoyable projects I ever worked with.

The key part is we built around the plans changing as we were going. That was expected. It was clear to everyone that’s how we had to build this.

(I’m not in anyway dismissing your story. I just wanted to share. Unexpected changes to requirements all the time is shit.)",2024,agileScam
LutimoDancer3459,1,Fore the same story ofc,2024,agileScam
Kobens,1,"There was one week in particular, where, I'll never forget it... _Every single day_ I would get told ""stop everything you're doing. your main focus now is to be this entirely different project"".

Further more, on Wednesday of that same week, this literally happened to me three times in one single day. Drop _everything_, you're to now do something _entirely different_.

Anytime I bring this up to someone, I say that my employer should have started the week off by essentially taking the money for our entire teams salaries, and tossed those funds straight to the trash. As our employer would have gotten the same value back from our time we all spent that particular week.",2024,agileScam
nasandre,1,Yeah same and we're not even doing Agile,2024,agileScam
ElevatedAngling,1,Ya’ll are getting actual requirements?,2024,agileScam
Torm_,3027,"My team recently got dinged by management for not completing as many points as other teams, because I guess points are an objective measure of productivity that works across teams. We just started giving everyone an extra ""maintenance"" story each sprint.",2024,agileScam
Deleted Account,2136,"Or split into smaller tasks.

Get less done, report more productivity.

I hate this side of programming",2024,agileScam
encryptoferia,530,"I despise when the management starts spewing productivity bullshit without looking at the actual condition of the project  


like yes we tried our best, but if the client itself that makes the sudden changes in the middle of development, why it suddenly become our fault.",2024,agileScam
Deleted Account,229,It requires barely experience in the workplace to realize management is a bunch of morons. Make yourself look good and despise them.,2024,agileScam
GreaseCrow,68,My work mantra and guiding principal to my career,2024,agileScam
ExceedingChunk,22,"My hot take here is that it isn't necessarily management who are morons, but the metrics they are measured on that's completely wrong, and force them to make moronic decisions.

There absolutely exists managers who are morons, but I've seen plenty of reasonable people turn into complete morons when the system/metrics/measurements their performance is judged by are all wrong.",2024,agileScam
zip639,5,"If the management isn't able to distinguish a wrong metric then I don't know what they are doing at this position. 
In the case of OP: using points to measure productivity means that they don't even know what agile is.",2024,agileScam
ExceedingChunk,2,">using points to measure productivity means that they don't even know what agile is.

I completely agree with that this point. But many places, you might have someone above that person who measures them on how many points the teams they are responsible for are delivering per week, which directly impacts their bonus or performance reviews when salary and promotion is discussed.",2024,agileScam
zip639,3,"The scrum master shall do its job and refuse to display points to anyone outside of the team. If he doesn't the whole process is dommed to fails.
However I do understand that management need an easy indicator to monitor the progression. From what I know the method doesn't provide one and this is lacking.",2024,agileScam
flounder19,1,"it's an issue at some level of management but for middle managers at least they may just be stuck getting dictated bad metrics from higher up. 

Of course a good middle manager would also let their team understand that situation rather than just pretending like everything is great.",2024,agileScam
parasyte_steve,1,I always told my team hey I hate this too but unfortunately we have no choice so let's try to make this as painless as possible.,2024,agileScam
flounder19,2,"probably comes down to preference but I'd be fine with a manager who took me into the fold, told me what metrics they/the team are being measured on and instructed me to structure my work to optimize those metrics. Nothing irks me more than being in a situation where people insist you do what's best for the company while not actually wanting you to do what's best for the company when that conflicts with other priorities.",2024,agileScam
ExceedingChunk,2,"Basically have that at my current project. The issue is that short term decisions can make the metric look good *now*, but impacts our ability to keep up the same cause you now have shitty quality software in parts of the system. This in turn makes us slower and worse performing on the metric.

The metric is essentially time spent vs time estimated(by a pricing estimate done algorithmically). Short term you are insetivized to cut corners. The pricing estimater also doesn’t take into account that *adjacent code is crap quality*, which team estimate will do. I have made sure our team typically cares about quality so we can consistently deliver at the same speed, which is turn leads to better metrics over time (but we have gotten flack for it on individual stories). We do have 2 offshore teams that only games the metrics, and they always start out really good on new areas, but deliver far more bugs and always ends up with shitty metrics over time on any area.",2024,agileScam
logicality77,1,"Because everyone is gaming the system, doing their best to look good to their manager, which in turn makes that manager look good to their manager. It’s all a racket.",2024,agileScam
ExceedingChunk,1,"Exactly. The only way to solve that is to not use stupid metrics that can be gamed like that. Cause they will be games. Highly ambitious and aggressive middle managers will also cause a lot of stress on everyone else by pushing others to make their metrics look good.

DORA metrics is one way to do it, as it is a set of metrics that measures quality and throughput of actual software development, rather than just how many stories or hours you deliver. If you game one of the metrics, one of the others will siffer as a result.",2024,agileScam
red1q7,16,So I need the post the „how is the project going“ parrot?,2024,agileScam
Teminite2,35,"I started sending end of day emails for a big project I'm working on in conjunction with other teams. got a big props for that alone since I actively exaggerated everything. ""fixed a bug that caused nginx to not install properly upon running bash sxript"" (sudo yum update)",2024,agileScam
parasyte_steve,3,"I was on the management side for a while and a lot of middle managers know all the updates and bullshit are bullshit but our bosses are breathing down our necks to produce ""metrics"" showing productivity. I would have been so happy if people took 5 minutes to recap the day for me in an end of day email. That way I can explain to big boss idiot fuck why a ""relatively simple change"" was taking so long. 

This shit comes from the top down.",2024,agileScam
Teminite2,1,"This is something that ive noticed as well - management is never as adept as the actual workers. Some guys like to think that transition from dev to prod is always flawless, and i have to convince them why it is never the case. its honestly my least favorite part about the role but ive learned its essential so i started doing it, even if its just to appease upper management. management guys will help you a ton if you communicate what you need done properly.",2024,agileScam
CodeNCats,15,"This was my previous role. We got a new manager or product owner or whatever they call the role these days. New scrum master. We spent so much damn time planning, grooming, and doing dumb meetings to setup work. 

We ended up getting so much less done. I felt like I was doing half the work I previously was doing. Yet the metrics looked good so everyone was like ""great job guys!"" But then after a few months they were noticing shit wasn't really getting done. I then explained to someone. We are constantly talking about doing work, writing stories, or another meeting that's a follow up of some other meeting. Having three meetings spaced throughout my day is terrible for productivity as I can't just do shit. I'm constantly in stop and start mode. 

There's also the big issue not really discussed. You plan work in a road map for the future. Spend half a sprint researching the work, breaking it into tasks, and writing detailed info. Then even start assigning out some of the tasks to start setting it up or even modify other tasks with that new work in mind because why refactor that one module twice?

Then the upper management decides they want to go a completely different direction or they want to change something that seems minor to them but is a pretty big change to the already setup plan. So half the work from about everyone on the team is wasted work. Even worse that work is sometimes required to be done over again to address that last minute requirement.",2024,agileScam
Bartweiss,45,"“Why were your lines of code and commits so much lower than your team for two weeks running?”

Well gee boss, I’m a backend programmer but you assigned me to update an ancient MySQL server and deal with corrupted data on it. Turns out that doesn’t involve writing much code.

“Ok, but last Monday you didn’t commit a single line.”

“Did you check anyone else’s commits? Because I think the company holiday for New Years might have lowered productivity a bit.”

God I hate tracking tools as a way to pass blame.",2024,agileScam
manwhorunlikebear,8,Technically you could write scripts to execute all your DB changes and have them committed ;-),2024,agileScam
Bartweiss,11,"Oh it's worse than that, I *did*.

We had a repository specifically for DB scripts that exceeded simple row changes. Originally it was so they could be replayed in sequence as a ""migration"" if needed. Then when it got too big and messy to ever actually run, it was for documentation and monitoring reasons. Then (extremely bootleg) compliance reasons. Then when compliance got done in a less bullshit way, we kept it just to get credit for our lines written.

But the vast majority of my work was updating the ancient Ubuntu instance, updating packages, updating MySQL, then combing through the repeated failures to track down every corrupt table. Lots of stumbling about with grep and ls going ""What's even *on* this ancient box? Why can't I get vim to open?""

(2/4 sysadmins had recently left, so any box way out of standards was effectively owned by the team that used it.)

In hindsight, I should have said ""fuck code quality, nobody will read this anyway"" and committed my entire bash history somewhere to get credit for a ton of lines. Or maybe the entire terminal output to set new LoC records :)",2024,agileScam
Able_Wheel_1965,2,"I use bash history for env setup, with a specific filename for each test scenario.     Yes, obviously have automated tests, but when manual investigation / debugging is required, this as the fastest way and used alot among the team (and maintained).",2024,agileScam
Bartweiss,1,"This is a great idea, I'm going to do it!

Not sure if it would have worked here (at the beginning), since ""update from an ancient, broken OS version"" was step one, but it would have saved me a lot of time on other incidents.

When you say env setup, do you include things like installing packages/tools you like to use manually? I ask because ""I'm debugging a box that lacks emacs and I don't know vim"" is a situation I see a lot, and I can imagine either a standard setup for this or people having personal versions with their preferred editor configs. (Extended off a shared main setup for better maintenance, obviously.)",2024,agileScam
Able_Wheel_1965,1,"Base setup script
Then each app setup script
Wrapper to do all apps setup

Indiv test scenarios scripts  eg load different types of test fixtures or reference data",2024,agileScam
KingdomCross,1,"I did a final year project for our class. I spent a lot of times making small changes. When our professor suddenly pull out the commits block, it surprises me a lot and suddenly makes me look very productive because of a bunch of small commits I made compare to my team members making one big commit. It made me think if that what it look like to project managers who just only look at GitHub commits activity and Sprint points.",2024,agileScam
xtreampb,251,I advocate for kanban and no story points. Break up the story into tasks still. But it gets done when it gets done.,2024,agileScam
rf31415,67,The problem only arises when management tries to use it to measure stuff it’s not designed for. Unfortunately almost all projects I’ve worked on do this to some extent.,2024,agileScam
stifflizerd,31,">The problem only arises when management tries to use it to measure stuff it’s not designed for.


This is what's known as [Goodhart's Law](https://en.m.wikipedia.org/wiki/Goodhart%27s_law)",2024,agileScam
LiquidLight_,108,"Kanban is definitely freeing after Scrum. But beware, it turns into a depressing endless march. Especially if you're like me and enjoy having a clean to do list.",2024,agileScam
beanalicious1,70,"Good kanban is almost as much work as scrum. I'm always nervous when a team says they are agile and does kanban, because 99% of the time, it means they have a board and zero process outside of that.",2024,agileScam
LiquidLight_,40,"Oh, so you've met my team then. We have the board, our PO runs 2 teams, and I'm not sure I've seen a story that's been more than regurgitation of requirements in given/when/then or a basic ""this feature needs to go in"" in a year.",2024,agileScam
beanalicious1,49,"Lol, I've seen it a couple times :P. At my last company I was their first scrum master, and became somewhat of a hitman for underperforming teams. My first year I rolled onto 9 different teams, 3 at a time, to get them to a point where they were able to recognize when process wasn't working, had the tools to reflect and improve, and had at least the basics on people's roles and responsibilities (more than half the POs didn't even know they owned the backlog.)

Easily 3/4 of the teams were ""kanban"", all of them had tickets that were title only, no ACs or descriptions or any documentation. While I prefer to be framework agnostic and let the teams begin dictating their process (with guidance), in these cases I would use pure scrum as training wheels. Pretty much every team ended up with slightly different processes, a lot of scrumban of different flavors. But, in my mind, that's the point of agile lol. Find what works, learn to experiment, keep on improving.

I get the hate of process. It can be a pain in the butt, especially in the beginning. But even the most difficult, anti SM/agile teams put in requisitions for a Scrum Master after I rolled onto the next team, and that felt pretty good.",2024,agileScam
LiquidLight_,29,"That sounds like the good version of agile. At this point I'm pretty sure ours is intentionally a burnout machine in the name of ""increased profitability"". Org's basically gutted the SM role outside of some SAFE management type ones. If there was good in our agile process, it got converted to a micromanagement framework so middle management could justify its existence.",2024,agileScam
beanalicious1,33,"SM in general is getting cut right now. I was laid off october and to this point haven't been able to even get a first interview. The promising phone screens I've had have all gotten back to me saying the budget they were using has been cancelled and the position won't be filled. It's rough out there.

It really really bothers me when people think the goal of agile is more efficient delivery with unlimited increases in velocity. At some point you reach the balancing point of ""the team is happy with the workload and they can maintain it. If they get more work out they will start burning out"". 

Places don't take burnout seriously enough. And by the time you've gotten there, it's months of reduced capacity for them to recover. One sprint death march equals about 20-30% reduced velocity for 3-4 sprints in my experience. And it's almost always for a false emergency, POs don't know how to say no a lot of the time.

It's always mind boggling to me that I can tell management that this pivot that can and should wait will destroy productivity.   
  
Manager: ""You mean to tell me you had a goal to finish feature A and you didn't accomplish it? We needed that on this timeline.""

SM: ""Remember when I told you focusing on features B and C mid sprint would mean A couldn't be worked on anymore? They worked overtime to get those done in time and need to recover.""

Manager: ""But B and C aren't as important as A, team epsilon needs A to be finished to start on their stuff.""

SM: \*resisting urge to dump coffee in their soulless little butthole eyeballs\* ""Well velocity will be down for a couple sprints""",2024,agileScam
hassium,7,"> I was laid off october and to this point haven't been able to even get a first interview. The promising phone screens I've had have all gotten back to me saying the budget they were using has been cancelled and the position won't be filled. It's rough out there.

Sorry to hear that, have you thought about teaching whilst you're looking for something else? We need more scrum masters with real life experience doing courses, not the freshly minted ""bible bashers"" that are mostly out there.

I know it'd obviously be a lot of work to put those resources together and present them coherently but money can be made offering udemy courses, off of youtube tutorials, hell worst case scenario it's something to add to your CV?",2024,agileScam
beanalicious1,1,"I've cofounded a consultation nonprofit focusing on educating on mental health/team health/working with non-neurotypical people (tech is like 40% autistic. Not sure there's an official number, but it's a high representation and management generally doesn't have any clue). We've had some good classes, but still haven't really found a way to make money from it :P. I have thought about udemy, and I do have a side gig as an adjunct prof to teach software testing, though that's fairly inconsistent.

These are good recommendations, thank you",2024,agileScam
theqmann,1,"As someone who's worked with waterfall style dev for a long time, my experience with agile teams is they rapidly iterate good designs, but the designs don't have a great overarching architecture, and don't efficiently solve the problem the customer needs, but rather seem like a bag of disjointed features that haphazardly sorta work together.  Who's goal is it to do the long term planning (3-12 months ahead) in the agile world, and direct the team so that the right code is actually developed?  Is there some sort of super software architect that the team lead reports to?",2024,agileScam
beanalicious1,1,"That's something that is frustratingly absent in Agile in general. Theoretically, you'll have a PO and PM with that in mind, and it's communicated to both teams and management. It's something I've ever experienced though.

And also, there's a huge attitude agile people have against waterfall, scrum masters especially. ""waterfall is obsolete, anything can be agile!"" and that seems super short-sighted. Yeah, waterfall is often done as poorly as agile can be, but waterfall is simply a better model for plenty of projects. Working with the govt? You NEED to have everything planned out and approved before working. AAA game studio? You need to have a roadmap and overarching architecture. Plenty of examples, and plenty of good concepts to pull from if you want to hybridize a process.

Scaled frameworks like SAFe try to address this, by basically becoming ""the agile you bring home to your CEO"". I find SAFe impossible to adhere to correctly, waaaay too meeting heavy, and no place is willing to hire all the positions necessary to do it ""right"". Scrum at Scale does a bit better, but I still consider it an unsolved problem",2024,agileScam
quantum-fitness,2,Thats technically dark scrum or w/e you want to call the anti-pattern. The whole agile movement where made to protect developers from the morons in the business.,2024,agileScam
Relemsis,6,">scrumban

blocked",2024,agileScam
beanalicious1,10,"xD I encourage the team to empirically test out processes that sound interesting. If there's something equally bad as lack of processes, it's dogmatic adherence to one without testing to see if something works better for your team. 

You can tell an SM is new or bad if they reject an idea solely because ""it isn't in the scrum guide"". I'm already weirded out meetings are referred to as ""ceremonies"", we don't need MORE culty blind following.",2024,agileScam
kurita_baron,3,"so, help your team do it on a better way? isnt that what retrospective meetings are for? or just throw it in the group, if you're going to be making tickets on the kanban board, at least make them properly and informative.

we do at least 1 refirement meeting a week to decide what goes into the to-do column of the board, and do more ad-hoc refinements when the to-do lists starts shrinking. the refinement is where you clarify the exact requirements and everyone who isnt clear on what the ticket entails, should speak up then",2024,agileScam
LiquidLight_,4,"That's a good point. Couple things though. First, we ditched refinements back when we were doing Scrum at the team's request and I don't think we have capacity or will to bring them back.  We do retros, but culturally stuff like this isn't solved in meetings across the board. Great summary of that is stakeholders pinging our PO on a demo item instead of asking the demo presenter. A lot of why I don't is because I don't have a better alternative and if I did, I'd be in charge of implementing it because our PO is buried under work and our SM has effectively been moved off team and my plate's pretty full already. So it's a lot of factors, not all of them in my control, but valid point in trying to address it with the team.",2024,agileScam
oupablo,1,"Maybe i've just been part of different structures but isn't product just responsible for the requirements? I don't think i'd want them breaking down the work. Typically a non-dev will have zero idea how to break down ""product needs to do X"" into steps. The process i've used at multiple companies is that product details the requirements and engineering breaks them in to epics/stories/tasks/whatever and throws them into the ordered backlog on the kanban swimlanes.",2024,agileScam
LiquidLight_,1,"Product does detail the requirements, but stories end up as whatever the PO throws down in the ticket. We should be breaking things down more than we do. There's a lack of will, lack of time, and more and more there's a ""don't rock the boat"" mentality. I think my team and really train (Safe is a whole other monster) are just kinda burned out.",2024,agileScam
Comprehensive-Pea812,1,"well compared to scrum, every 2 weeks is the deadline.",2024,agileScam
guyblade,1,Life is an endless to-do list.,2024,agileScam
SlaminSammons,1,You’ve had a clean todo list?,2024,agileScam
Icy_Manufacturer_977,1,"Changed to kanban this Monday after having done scrum on this project for a little over a year.

Was shocked when I opened the board and saw all the tasks (I forgot we made the change) and was like ""Shit, did I forget about THIS many tasks this sprint?""",2024,agileScam
Arshiaa001,7,Kanban is the only way.,2024,agileScam
Deleted Account,1,"Management the next day: “so how about we put some points on those kanban-tasks, so we can track progress without looking at the board?”",2024,agileScam
xtreampb,1,"Me: If your not looking at the board, then your not tracking progress.",2024,agileScam
EMI_Black_Ace,1,"Kanban I feel really only works with something that's already ""done"" and what you're cranking are minor updates.",2024,agileScam
xtreampb,1,I disagree. Story 1 is create ci/cd pipeline. Story 2 create new project. From there every story can be deployed when finished. Even if it’s just boilerplate and classes.,2024,agileScam
maleldil,1,"I much prefer Kanban to anything else I've been subjected to. Need work? Grab story, work on it until it's done. Repeat. ",2024,agileScam
LeCyador,1,"I've used ""scrum"", ""waterfall"", and ""kanban"".
My favorite so far is kanban.",2024,agileScam
Trick-Report-8041,94,"Nah just increase the number of points given to each task. Instant ""productivity"" increase",2024,agileScam
soonnow,36,Center a div? 1000 points!,2024,agileScam
anomalous_cowherd,16,"To be fair, that can be really difficult.",2024,agileScam
soonnow,14,That was kind of the joke. At least on webdev it's kind of a running joke.,2024,agileScam
mcnello,45,"Imagine if other industries were ran similarly. 

I'm imagining a construction firm that awards 1 story points for each nail hammered into place.",2024,agileScam
TheOnlyVig,12,Ten points to Gryffindor!,2024,agileScam
IAmNotNathaniel,2,lmao this is so appropriate,2024,agileScam
Dynamoproductions,2,"Sorry I am new to agile, story points are not agreed between supplier development team and client?",2024,agileScam
Trick-Report-8041,1,Nope. Story points are given by the team for the team. Meaning it's a way for the team to give an estimate when the job will be done. If they give a collection of jobs 40 points and in their experience that amount would take about 3 sprints (6 weeks) they can tell the client it takes about 6 weeks. But in practice I've never really seen it work. Story points doesn't equal agile. Scrum is not agile,2024,agileScam
IAmNotNathaniel,1,[Welcome to Agile](https://imgflip.com/i/1t6av2),2024,agileScam
dfv157,71,"I mean, before Agile was really a thing, I had management whose ""productivity"" was measured by number of commits....

You know exactly what happened",2024,agileScam
DuntadaMan,64,"Elon firing everyone who had the least amount of code in the database.

""Spaghetti"" Georg over there safe forever.",2024,agileScam
beanalicious1,35,"When I was a tester, the company measured QA productivity in found/reported bugs. With quotas. You can imagine how that app was lol",2024,agileScam
Oriden,14,"Sadly, many projects work like that instead of looking at actual tasks done.

I got laid off due to budget cuts due to this, rest of the team had a higher bug count because they were focused on running daily safe to use builds and other more bug focused tasks while I was focused on the deep dive full test pass that was supposed to be completed once a week and was able to complete like 5 to 10 times as many test cases . Got told to ""find more bugs because management is looking for people to cut to shrink the budget"". My choices were basically write dupes of my teammates bugs that they were already finding or actually get the full test pass done at some point because everyone else was getting pulled off it for other tasks.",2024,agileScam
beanalicious1,18,"I feel that hard. At this place, pretty much everyone had a few unreported bugs under their hat ""just in case"". It was so bizarre. One guy outride made up defects and when they weren't reproducible, marked them as ""fixed in a previous release""",2024,agileScam
Oriden,4,"Yeah, there's a lot of ways people can game bug writeup stats like the ones you mentioned. I've also seen people write like 4-5 bugs based on the same underlying issue and just kinda bundle them together instead of writing just one bug to pad their numbers.",2024,agileScam
Terminal_Monk,28,"my company uses agile and still uses this measure. if you are a senior IC and don't have 2PRs merged per week on an average, that is basically below ""meets expectation"" in your yearly appraisal. for fuck sake rather put a god dam bullet to my head.",2024,agileScam
chatterbox272,22,"Some colleagues of mine were talking about a previous workplace where their KPIs were 4 PRs/day. I can't imagine breaking tasks down into sub-2hr chunks for PRs, nor can I imagine the flood of review overhead that must generate",2024,agileScam
Terminal_Monk,21,"I had a toxic CEO like that once. Mf would read some shit in google news like ""AI is taking over the world"" and then come to office and ask us to build some stupid shit.

He once read somewhere that in Meta, they push some 50PRs a day and was telling us we should be pushing atleast 4-5 PRs a day each. Mind you, we were just 2 developers. I asked him that is absurd. Meta has hundreds of engineers we are just two people.

He told ""no! Facebook has been doing this since it started""

I got super pissed and told ""since the start? you mean Mark Zuckerberg was pushing 50 PRs a day sitting in his Harvard dorm room wearing his boxers drinking red bull?""

He got so pissed I was taken 1:1 and was dressed down my the GM. Fun times.",2024,agileScam
Dobby068,1,Hilarious! I can write a book about similar experiences!,2024,agileScam
xFeverr,14,"It is really a bad thing to use KPIs as a way of rewarding and punishment. You will get people that don’t deliver good work, they just focus on good numbers on these KPIs. 

Like this number or commits KPI. It is so easy to make that look good without really doing anything.",2024,agileScam
Deleted Account,1,They get what they want.,2024,agileScam
soonnow,2,We had a client who specified one line of comment for three lines of code. The client sure got his comments.,2024,agileScam
redspacebadger,1,"Suddenly, as if by magic, all the CI robot tokens would be replaced with an account token from my account. ",2024,agileScam
guyblade,1,[-2000 lines of code](https://www.folklore.org/Negative_2000_Lines_Of_Code.html),2024,agileScam
killem_all,21,"That’s exactly what I’ve doing for a year. Using the subtask functions and padding my sprints.

I’ve been actually getting commended by the PO and PM

smh",2024,agileScam
ReplacementLow6704,15,"Somehow this ""Get less done, report more productivity"" reminds me of how the Soviet Union used to be run... and now I'm creeped-out.",2024,agileScam
guyblade,8,"My company has done this as well, but it takes the form of ""everything must have a cost justification"". My current work is trying to get a legacy system turned down (the replacement has been doing 80-90% of the work for months). The cost is ""we're maintaining two codebases"", but that apparently wasn't sufficient, so I had to write up a doc on it. Madness.",2024,agileScam
perpetualis_motion,3,"Just title it, ""Save millions $$$.""",2024,agileScam
cantproveimabottom,8,"I write my own stories and run my own sprint since I don’t have a project manager and if people complain I’m not doing enough I just double the number of point on a few stories and suddenly all of the non-IT management are happy.

IT management knows that points don’t matter and are just happy I keep everything ticking over",2024,agileScam
jaraxel_arabani,5,"This is what my biggest gripe about estimating is.  I've tried explaining to people but it goes over their heads as a problem

This only is not a problem if the entire team/department is completely aligned EXACTLY how points are estimated, because if it's used as a measurement it'll be eventually used a s a metric.... And losing meaning completely.",2024,agileScam
SunliMin,2,"I’ve said it before and ill say it again: agile and the metrics that come out of it are a tool for the team, not management.

The only time management should know anything is when using it to translate effort. As in, take tasks the team estimated effort in, out that on the X axis. Let management estimate the value of those tasks, put it on the Y axis. You now have a Value/Effort matrix that can justify to developers and to management where effort is best allocated.

The only other thing is burn-down charts, but I even find that isn’t great for managers. The second you let management know about points, it can be misused. It’s much better for the team in the retrophase to refine their systems.

For example, this past sprint, I can see the team did less points than last sprint, about 20% less. But when I ask myself and my co-lead why, it’s because we had 8ish hours of extra meetings, because one large task was not split up appropriately and became less points than it should have been, and because two bugs got fixed without corresponding tickets.

Now we know “put more effort into scoping out and breaking up tickets; make sure bugs are always ticketed; reduce meetings, or at least reduce the amount of people in each meeting”

I can go to the boss with my findings, make the case, and it logically makes sense to them. That’s the power of these metrics. But it’s a team tool, not a management tool",2024,agileScam
squigs,1,Or multiply points estimates by 10.,2024,agileScam
virgilreality,1,"This isn't programming.  It's bad actions by management though either a lack of cultural support, animosity, or just plain stupidity.",2024,agileScam
Bartweiss,1,"“We use Fibonacci numbers only”

“8 points is too big, can you break this down?”

“There are fundamentally two irreducible tasks here, and neither is a 3”

“Ok just throw in two 5s instead”",2024,agileScam
ExceedingChunk,1,"Me too. There are too many companies that use metrics all wrong.

Currently switching jobs to a company that doesn't do it like that and actually works agile, rather than trying to fit in as many ""agile/scrum"" processes as possible without understanding the point of it.

Agile, which came from extreme programming, was never about creating metrics for middle managers to micromanage on. It was about removing process to increase productivity for the company and burnout for the programmers. It's almost become the exact opposite by most companies standards.",2024,agileScam
yungplayz,1,Why hate it if you can use it to your benefit?,2024,agileScam
CuriousCryptid444,1,This is always my strategy. Some of my coworkers love to create giant stories and then point them as if it’s so easy…because ego? Like yall don’t understand the game….,2024,agileScam
Relevant_History_297,1,What if I told you it's not supposed to be like that?,2024,agileScam
Demonchaser27,1,This.  Sadly in order to get enough credit sometimes you have to just break the tasks down into smaller ones so it looks like you got twice as much done.,2024,agileScam
Kuja27,1,This one task can actually be split into 17 sub tasks. Now we can do 17 times the amount of work.,2024,agileScam
Weird_Cantaloupe2757,1,"Just estimate them bigger. Oh a minor bug fix to change two lines of code? 13 points, boss.",2024,agileScam
JaecynNix,201,"I like to drop ""everything's made up and the points don't matter"" during grooming",2024,agileScam
NotStanley4330,78,"Welcome to ""Whose Scrum is it anyway!""",2024,agileScam
mcnello,15,Somebody needs to start a YouTube channel that does this,2024,agileScam
NotStanley4330,2,"*furiously typing""",2024,agileScam
Deleted Account,7,"Today we're playing Scenes from a Jira Board.  First one, things you can say to your dog but not your Scrum Master.",2024,agileScam
thirdegree,2,Ok this has actual potential,2024,agileScam
finneyblackphone,2,Whose,2024,agileScam
spaghettipunsher,18,I will try that next time I visit a Kindergarten,2024,agileScam
DuntadaMan,11,Wait...,2024,agileScam
RMZ13,193,It’s so dumb. Our point scale goes 1-2-3-5-8-13-21 and all hell breaks loose if we ever even try to point something at an 8 or higher. Everything is five or less or we need to stop and talk about it for twenty minutes before not changing anything and pointing it a five. I can’t even.,2024,agileScam
Deleted Account,147,You aren't story pointing properly until you've spent 25 minutes discussing if it's a 2 or a 3.,2024,agileScam
Shinhan,48,The only reason why something should be 13 is if I don't wanna do it :P,2024,agileScam
bobthegreat88,9,"13 pointers are basically ""I'm just gonna let it sit and fester for a few sprints until we decide it's finally time to split It up into smaller stories""",2024,agileScam
AwesomeFrisbee,29,"Oh god and let's not forget talking half an hour about what the sprint goal can be. Guys my previous project didn't care and used something like ""looking forward to the holiday"" and it was fine. Nobody cares and you can use whatever you want since it holds no value to me whatsoever. Even if it makes me a co-conspiror to murder I still wouldn't care.

We've already talked 45 minutes about what is a 1 minute task, and the previous discussion should've been an email, I just wanna get back to work. Guys?",2024,agileScam
SlaminSammons,2,When those discussions start happening I just say “well it’s a 34 then.” Gets people to laugh and makes them realize it’s a waste of time,2024,agileScam
pigeon768,3,"I'm a scrum master and I refuse to allow an estimation discussion go on for more than like 2 minutes. If it does I'll just assign to whoever thought it was the easiest and give it an estimate somewhere in the middle. Most tickets are 20-30 seconds.

Almost all decisions are low stakes. Low stakes decisions shouldn't take up time in meetings.",2024,agileScam
benutzername1337,1,...in a group of 9 people that should be working up the backlog at the same time.,2024,agileScam
Dobby068,1,"What cracks me up is when developers discuss a complex redesign or an algorithm,  then the testers and co-ops join in voting with their own points. They have absolutely no clue, but hey, let's trust the process!",2024,agileScam
das_Keks,68,"And then stories that were forced down to a 5 are not completed within the sprint, what a surprise. :D",2024,agileScam
RelativeAd5406,32,"Every time. I joined a team who notoriously underestimated tickets but when you asked them ‘how would you approach this ticket’, they didn’t even know 100% how it is done. If there are unknown elements, why are you not erring on the side of caution?! Like for example, one ticket involved implementing a new AWS feature (that nobody was previously familiar with) into a very niche configuration and they assumed it was a 1 pointer because it sounded simple. Guys, have we not learned that it’s rarely that simple?! The amount of tickets that I picked up that were ‘2 points’ that had to be changed to 5 points because whoever wrote the ticket made it seem like it was ‘just a minor change’ (that may or may not involve changing out libraries and reconfiguring entire sections of the code base, rewriting all the tests, only to find out at the end the minor change created more issues than it solved . so 3 days of work for nothing etc)",2024,agileScam
Ok-Dark-577,15,"Every. Fucking. Sprint. Planning. Every.

I had the same issue. They describe it poorly and sounds simple. I point out 2-3 things that they have not considered about and every fucking time they reply me in a way like I'm bringing in imaginative problems. I've stopped bothering. I go with a lower 2 or 3 as them. If it is a ticket that I have to take I either just implement the bare minimum described in the ticket and wait for the bug report or I explain them mid-sprint why this ticket cannot be completed because X or Y came up, depending on the nature of the issue. This is ridiculous but at least now I have inner peace.",2024,agileScam
RelativeAd5406,5,"It got to a point where I was working overtime ( 50hrs a week not including lunch breaks, not crazy but still 7am to 6pm every day). All so I could say in the morning stand-ups that I made real progress on a ticket that originally took into account x and y factors, but completely overlooked z, f, l, m, n, o, p. I did overtime because despite knowing this hurdle, the up-tops seem to think time-estimation = absolute deadline. When you explain to them what the hold-up is, instead of putting trust in the team when we say it wasn't as straightforward as we thought, they assume we're half-arsing or under-qualified.

And then because of that pressure, our code reviews are shit because we're rushing to merge work. There was always at least one ticket every sprint that did this but we still managed to get the work done through sheer time and effort. The problem with that is we set a standard of work output that is unrealistic long term so I just moved to a new project",2024,agileScam
Ok-Dark-577,2,good move that you moved away. I would had done the same if I was under similar time pressure as you. I'm just in a point that I don't care,2024,agileScam
RMZ13,1,🙃,2024,agileScam
Wlf773,23,"God, I wish I had this flexibility. We aren't supposed to point anything a 5 or higher. Also, our 1 is ""less than a day"" with a CI pipeline that takes so long its not really reasonable to release something in one day if it ends up needing to run CI more than two or three times. We literally spend hours sitting in meetings going through the entirety of a project deciding if each task is a 2 or a 3.",2024,agileScam
fighterpilot248,10,"Oh dear god that sounds awful. 

During that twenty minute convo, do you guys also go in circles with everyone saying the exact same thing, just in slightly different ways? Like yes, we’re all in agreement here, can we please MOVE THE FUCK ON already??",2024,agileScam
DibblerTB,4,"Nono, the decision maker feels like putting a 13 is a failure, we are supposed to break shit up! But he cant break the argument from the engineers, who know it cant be broken up. So then he asks again, and keeps polishing the turd.

Hah, hear that ai? Cant replicate this!",2024,agileScam
Any-Wall2929,1,"I think this is a good idea, who else thinks we should move fuck in the onward direction?",2024,agileScam
GreySummer,6,"So you never split stories that are too big for a single Sprint? If you have a problem with closing stories within a single Sprint, there is your starting point to fixing it :)",2024,agileScam
Agloe_Dreams,7,"One of my biggest annoyances is that while you can split up a story that is complex into smaller parts, the process also means that the split parts must be QAed on their own. You end up testing the parts of the whole rather than the whole feature and can often miss integration points.",2024,agileScam
GreySummer,1,"> You end up testing the parts of the whole rather than the whole feature and can often miss integration points.

There's a gap in your testing practices if that happens. Do you have automated functional / acceptance testing? Or a tester to validate the user story?

Probably in your story splitting as well, I suspect. Otherwise testing and demoing the new increment should show if its integration broke anything.

Do your stories end up being technical and not functional, from the perspective of a user, after splitting?",2024,agileScam
Agloe_Dreams,1,"So our flow is nightmarish purely due to management not really putting in the effort ha. 
There is no definition of ready or done for the team, tickets often come in lacking requirements and sometimes with zero details. 

We do have automation that ensures everything works but we also will often build a ticket and business will want changes…due to the lack of requirements or because UX doesn’t talk to business so the business doesn’t even like what was created. Refinement often happens in-sprint. The QA testing tends to be  also testing if something “feels” right rather than just broken. 


All of these things are ultimately our fault, as engineers but leadership has little want to change because it would slow them down (even if it would speed us up). I’m fully aware this isn’t most places, or maybe it is.",2024,agileScam
GreySummer,1,"It's not all places, but a lot of them are like that to some extent. You just wrote a laundry list of things to fix for an Agile Coach or the Scrum Masters. Do you have any who could advocate to management?",2024,agileScam
Agloe_Dreams,1,"Well, we fired both our company scrum masters after everyone hated them haha that doesn’t help.",2024,agileScam
GreySummer,1,"Yeah, bringing up to everyone all the ways in which they're doing it wrong is often necessary but unpopular :-D

Without replacement?",2024,agileScam
Agloe_Dreams,1,No replacement at all. It is super wild,2024,agileScam
GreySummer,1,"Let me guess. ""The senior developer can do it"", or ""We will rotate the role around the team""? Or is it ""The PO can do both""?",2024,agileScam
Agloe_Dreams,1,Third time’s the charm!,2024,agileScam
GreySummer,2,"Congratulations, you now have a business / cost focussed team manager. Welcome back to Waterfall.",2024,agileScam
flounder19,1,"> bringing up to everyone all the ways in which they're doing it wrong is often necessary but unpopular

usually when i come to resent a scrum master it's because i have no clue what they do all day and whenever you give them a blocker they either can't resolve it or essentially require you to handhold them through the entire process. 

Chances are they were just overstreched but damn did it get under my skin.",2024,agileScam
Ok-Dark-577,3,"yeah but not all people are capable of correctly identifying the ways that a story can be split in a meaningful and practical way. For example, management has decided that a story has to go through a QA team. Sometimes the only realistic way to split something for a very first step is to lets say pave the road for it. For example create some classes and refactor some others, so that you can actually start working on the feature itself in another story. Well, this is not QA'able and they cannot fathom how we could do it.",2024,agileScam
GreySummer,2,"Refactor incrementally, and do it as subtasks of functional stories. Then the QA teams validates there's no regression due to the refactoring along with the functional QA of the new feature.",2024,agileScam
Ok-Dark-577,1,"yeah I know that this should be the way but they don't like subtasks because they cannot visualise the progress. Progress for them is only when the story itself moves on the next column. 3 out of 5 completed subtasks in a story is pointless at the end of the sprint since the story itself will still be under development. So they need to split the story in 5 stories so that they can see 3 completed thingies in the end. But yes, these ""stories"" should had been in fact subtasks. Its a dead end. I have quit trying to explain or to care",2024,agileScam
kartoffeln44752,2,"This is basically us.


A date change to a flag or something would be a 2, migrating an app to a new framework would be a 3 or a 5. 

No-one really cares about the points for us but there’s a definite pattern of people just voting 3 to get the meeting over with because the discussions are functionally useless if we’ll only vote 3/5 anyway.",2024,agileScam
Mediocre-Monitor8222,1,They into Blackjack?,2024,agileScam
styroxmiekkasankari,1,"Hold up, maybe I’ve been sheltered from this part of agile scrumfall, but why are you not allowed to point higher than 8? Doesn’t that just make 8 the max value and rescales the whole range?

We have a comparatively nicer approach where we point it 1-3 where 1: trivial change, 2: non trivial new development/non trivial change 3: complex feature change that requires refactoring or complex new feature.

We don’t really care about the points other than that we don’t use 1 for anything we don’t already know how to do. Also only devs vote on points, po and scrum master shut up. I don’t think we’ve ever spent more than 5min on deciding the points, although the task planning and all of that usually takes more time that I can stomach.",2024,agileScam
thundercat06,1,"Our point system at a previous place was a full 1 to 30 scale..  Because we had a red D30 assigned..  Seriously, we had a series of project meetings that got so off the rails that someone brought in a gaming dice set and started rolling.  Those in power were going to have final word on points anyway.

Eventually, the point taken.

Imagine if Agile was done like an RPG. lol.",2024,agileScam
IAmNotNathaniel,1,"They got rid of all the scrum masters about 6 mo after I started but left all the rest of the agile/scrum in place. Every team does it differently, and since there's no masters or scrum of scrums or whatever they do, none of us are in sync.

It's fun anytime a team member gets moved to a different teams

Usually takes 2 or 3 sprints before you stop hearing ""in my last team we would make those a 1"" (while we point something a 5) or if they're from a different team perhaps ""I never pointed anything below a 5 before""

years later I'm still not sure if there's someone that's pushing this or if everyone is just in autopilot

all I know is, if I ever went somewhere that did strict scrum I wouldn't have a clue.",2024,agileScam
RMZ13,2,Is just so arbitrary,2024,agileScam
Travolta1984,1,"20 minutes and like 10 people in the call = 200 minutes

or 3+ man hours lost discussing how many points for a task that would take less than these 3 hours to complete",2024,agileScam
AnotherCableGuy,1,We've been doing points=days from day one. Our velocity is awful. Our burn down charts look like this meme.,2024,agileScam
HappyMonsterMusic,68,"You can also half the value of a point.  
What was 1 point before now is 2... etc.  
You have the same reference as the value of a point is relative and management will be happy.",2024,agileScam
CalmButArgumentative,48,It's very entertaining to me how easy it is to look incredibly productive if you start optimizing for specific metrics without any real-world value.,2024,agileScam
soonnow,19,"This will always happen when you set some goal that's not actually the finished product. People have brains and will optimize for those goals rather than outcome. See goals such as lines of code, comments per line, commits, bug, bugs fixed and so on.",2024,agileScam
flounder19,3,"it's all we can really do at a point. If corporate was actually competent, they would align the metrics that reward workers (via accolades, budget, promotions, etc) with what is best for the company.

But you don't get into the c-level via competence as much as glad-handing, butt kissing, and backstabbing.",2024,agileScam
HappyMonsterMusic,1,I love to exploit those metrics hahaha,2024,agileScam
Ciakis_Lee,1,CB is printing more money in that case. I wonder how the world would look like being ran by the programmers...,2024,agileScam
andrewb610,46,"See, I work software, have for the past decade.

I have no idea what the fuck a sprint is.",2024,agileScam
das_Keks,44,"It's what they do at the 100m race during Olympics. Other than that, no idea.",2024,agileScam
rosuav,4,I thought it was an ISP?,2024,agileScam
das_Keks,8,"Hm, what do Internet Service Providers have to do with the Olympics?",2024,agileScam
rosuav,6,No no. Ever figured out the [Specific Impulse](https://en.wikipedia.org/wiki/Specific_impulse) of an Olympic runner's food?,2024,agileScam
whoami_whereami,3,Even if you feed them a beans only diet I don't think an olympic runner's propulsion system qualifies as a reaction engine.,2024,agileScam
GreySummer,22,"A stable, short enough duration to try and make sure that the team's work is broken down in manageable units. As opposed to a long grind with no way to tell what the actual progress is. 

At the end of it, you take a look at what was accomplished, and ask if it's going in the right direction, or if we're in trouble. If we're in trouble, you look for the best way to overcome the problems, and start acting immediately. That's on paper, though. Reality depends the people trying to apply it (duh).",2024,agileScam
andrewb610,6,So weekly meetings? Why not just call it a meeting?,2024,agileScam
TheRedmanCometh,5,"It's a set amount of work you estimate beforehand as well. If actual work done exceeds estimated work for the week or vice versa we adjust our ETAs. 


It also makes it clear who's performing higher or lower compared to other people and compared to their previous sprints. 


Then I can ask that person ""hey did we screw up the ETA on that?"", see if there's a problem they need help with (and have been too shy/etc), if something is going on, or god forbid they're slacking.",2024,agileScam
GreySummer,4,"> It's a set amount of work you estimate beforehand as well.

No, that's the Sprint Backlog. It relates, but it's not interchangeable.",2024,agileScam
GreySummer,3,"Because it's not a meeting...

Are you conflating the Sprint Review meeting, Sprint Retrospective meeting, Sprint Planning meeting with the Sprint itself?",2024,agileScam
outlaw1148,8,It's way more than just meetings. The projects are split into sprints. I really don't know how you worked in software for so long avoiding it tbh,2024,agileScam
andrewb610,1,I’m not in the private sector,2024,agileScam
guyblade,5,"I'm at about 16.5 years as a software developer. I don't know what agile means. When I say this to people, they attempt to explain, but each explanation is quite dissimilar to the others, so I continue to not know what agile means.",2024,agileScam
Deleted Account,1,My experience is this but in reverse.,2024,agileScam
ILikeChilis,44,"I work for a company with 600+ developers worldwide. Guess what's by far the biggest factor in your annual review score... Velocity, aka Story Points / day!       
I shit you not, they measure individual velocity, regardless of how many different projects you've been on. Oh, and every single bug is worth the same number of story points...",2024,agileScam
Fachuro,28,If I worked there that company would very quickly find themselves with 599 developers worldwide.,2024,agileScam
rabidjellybean,2,Not so fast. Exploit the system first!,2024,agileScam
Shinhan,6,How do bugs get story points? And when?,2024,agileScam
ILikeChilis,31,"It's a flat 0.5 SP. There is no decision making or planning involved when this value gets assigned to a bug.      
Typo in text? 0.5 SP. Mystery issue in our most complex processes? 0.5 SP.",2024,agileScam
Shinhan,3,Sheeeeeit. One of my colleagues was fixing a problem with login for some hadoop services for several days and yesterday he explained that it turns out the problem was the logout process.,2024,agileScam
joonty,2,"I mean, on our team bugs are always zero. The reason being that story points represent our ability to get feature work done, not an indicator of whether we're doing our jobs, and bugs are an interruption to feature work so should have a negative effect on velocity. But giving it 0.5 is the worst of both worlds, because it's saying that it contributes to the sprint but doesn't even represent effort. So I feel your pain",2024,agileScam
Additional-Bee1379,1,Refinement sessions? Like other stories?,2024,agileScam
DibblerTB,2,"0.0

I mean.. Just 0.0

There must be an insane amount of gaming the system going on. And of course you cant estimate properly, once you measure on it.",2024,agileScam
ILikeChilis,1,"Yep, pretty much everyone is trying to grab the easy ones, put their names on several simple bugs at once... or even intentionally leave bugs in a story that they can pick up later :D",2024,agileScam
DibblerTB,1,"Any leader who does not intuitively get this, when the idea comes up, should find different work.

(And that work should not be teacher)",2024,agileScam
RelativeAd5406,1,"Sorry teammate, can’t help you if I don’t get the points!",2024,agileScam
kingjoedirt,1,"That's easy though, just point things higher",2024,agileScam
Deleted Account,37,"I feel like the story point / Poker bullets is a fair critism. 

 I hate story points and every time I start a new project I say we can all save ourselves a shit ton of time and just use card count to determine velocity... but a newly minted scrum master or PO always wants to do the poker thing.

Then the project hits a point when some exec wants to know when we will be ready for go-live so I do a quick card count of the remaining work, add 25% an divide by our historical card count velocity and I tell the scum master I think it will be 7 more sprints... but they want to go through and attempt to properly estimate the half baked backlog, so we have 2 all day in person meetings and come up with 6 sprints based on the story points but we make it 7 to have some continengy.  

Smdh.",2024,agileScam
GreySummer,10,"> scrum master or PO always wants to do the poker thing

That's usually when they are not used to split stories efficiently. To do the card count thing, you need to have them roughly similar in size. If they're not skilled in slicing bigger stories, they can't get there.",2024,agileScam
eepboop,2,Ron Jefferies hates story points and he invented them,2024,agileScam
adenosine-5,25,"Management feels about story points like programmers feel about FLOPS, latency or transfer speed.

We all know they are not complete and objective measure of performance, because there are too many other factors, but... but... just... try resisting comparing all those beautiful, clean numbers.",2024,agileScam
Necropaws,35,"Next step, instead of using numbers for complexity use symbols. 

This story is a bike and this one is a toddler juggling chainsaws. What do you mean management can't figure.out what this means?",2024,agileScam
adenosine-5,12,Time to write manifesto and revolutionize entire industry.,2024,agileScam
soonnow,13,"Animal Sizes. Beetle, Mouse, Rabbit, Dog, Horse, Dragon.

Just so I can hear management at the next performance review. Well looks like you managed to only finish 6 horses, 12 dogs, 3 mouses and 15 beetles.",2024,agileScam
smallfried,2,"It's age old. Management wants to know how projects are doing compared to each other. This can only be done by getting into the details.

On the higher levels, there's no time for this, and these numbers are so nice. They have the same name, the projects follow the exact same processes (right?), they should be standardisable and comparable, right? Right?",2024,agileScam
GoaFan77,1,"Also, management has to deal with the business side that has need for things to be measured in actual time. It is natural for them to try and find a way to get the information they need out of the information they actually have, even if they're really not compatible.",2024,agileScam
WexExortQuas,26,"Literally what I'm going through right now.

Had 6 hours of meetings today for planning and we only added 2 tickets from 4 that were carried over.

Meanwhile we did poker planning / hour estimates / burn down charts and have another planning meeting scheduled for this morning.

I contribute nothing to these meetings and get my 16 hour task completed in 2 and then fuck off for the rest of the day/week.

Thank you for the paycheck idiots and I'll see you in hell.",2024,agileScam
chriscoxart,10,"I got heavily dinged in a review because I hadn't completed as many features as other engineers on the team.  Product management never included bug reports/fixing in the sprint planning - and I was the one fixing most of the crashes, memory leaks, vulnerability reports, performance regressions, etc.  Just could not convince my manager that bug fixes took significant time, or were as important as feature requests.",2024,agileScam
abecker93,2,More important than feature requests most of the time.,2024,agileScam
Odd-Confection-6603,32,"Points on their own are completely meaningless. If you tell me that a ticket is an 8, or that you got 20 points done in a sprint, that has no informational value to me. 

Points are only useful in the context of the backlog and the velocity. With the necessary context, points have a lot of value in determining percent compete/remaining and roughly how many sprints will get us to compete.",2024,agileScam
Deleted Account,53,You might even say that everything is made up and the points don't matter.,2024,agileScam
BlackDragonBE,18,"Here, have a point, I mean upvote.",2024,agileScam
NorthboundUrsine,1,Points are meaningless unless there is a consensus among everyone who actually has to do the work that each story/task  is assigned a point value.,2024,agileScam
GreySummer,1,"They're also useful to see if things are going right for the team or not. If velocity drops, it's time for the SM to listen carefully in the retro. Is the team in trouble? Are the requirements less clear than before? Is the team getting demotivated by some recurring issue?",2024,agileScam
soonnow,1,"I hard disagree. While it's nice to use points as a moving measurement of how much work we can complete in the next sprint I find them most useful as a tool of discussion. Which is why some people use T-Shirt sizes, because they are harder to use as a measurement tool and the granularity is good enough.",2024,agileScam
Odd-Confection-6603,1,"I agree that it's a good discussion topic for the people inside the team. It's a process to invoke thoughtfulness of the work.  

But outside of the team, which I am now in my organization, it is meaningless. I only care about how the points and velocity relate to the backlog.",2024,agileScam
MedonSirius,7,Better solution: just estimate 1-2 Points more than usual. You will see how fast you are getting things done,2024,agileScam
beanalicious1,7,"Man that kind of management is infuriating. I always really enjoy that conversation when it comes up in reporting for my teams (if they don't take no for an answer for reporting those metrics, it's not like it's useful info for them.)

Clueless manager: ""How come team A has completed 55 story points but team B has only done 20? What are you doing to improve their numbers?""  
  
Scrumdaddy: ""Oh let me explain, point values are different per team because they create their own definitions, specifically so you can't compare them to each other, but the team can compare themselves against previous sprints. How neat is that?""

Clueless manager: ""Oh""

Agile works great, I really wish tech leadership understood literally anything about it. Or retained what I train them on lol. If you want, I'll gladly ""consult"" your management team for free just to tear them a new one. I've done it before",2024,agileScam
soonnow,6,"Oh my last job the manager would (did) have replied: ""Well but they are paid in money not in story points""",2024,agileScam
beanalicious1,3,I'm sure he would have loved the suggestion of a bounty per story point then lol. Managers like that just don't seem to get that they just incentivize people to lie about capacity rather than get burned out. And honestly for a couple teams I've had to recommend that to protect them from management overworking them.,2024,agileScam
soonnow,1,Of course not. He was just a manager who fundamentally didn't understand Agile or wanted to understand it.,2024,agileScam
Bee-Aromatic,10,"That’s weird. Points should be different for different teams, based on your team’s working agreement and how you estimate.

We measure commit-to-complete and progress versus the timeline we set. It seems to work for us.",2024,agileScam
Shinhan,2,"I'm in two scrum teams (don't ask) and for the old 21 points was a very large task but achievable in a single sprint, so if something is more than 21 points it needs splitting up. For the new team 5 points is too large for one sprint. So when a task was estimated to be 3 points and was then copied to the old teams Jira board (yes, I have to keep the task status synced between the two scrum teams) they also just copied the points making it look as if its a simple task to do.",2024,agileScam
soonnow,1,"Just saying the new team should reestimate the points. 
If one team is a crack team of embedded developers for example and the other team is 5 toddlers in a coat then the second team would estimate developing embedded software at a higher point set. But a web development task might be less points for the second team.",2024,agileScam
Shinhan,1,"> Just saying the new team should reestimate the points.

Oh yea, as soon as I noticed the points in the new board I told the business guy that it needs to be reevaluated and to make sure to inform his entire team that every task needs to be reevaluated when transfering over. 

Points don't have inherent value, they are very subjective and its just one team scoring same amount of effort differently to another team.",2024,agileScam
Terminal_Monk,2,same shit. my company absolutely uses PRs/week as a measure across the board.,2024,agileScam
idrunkenlysignedup,2,I got dinged by management for not making updates to an API that I've never worked with (or even knew about) fast enough. It could have gone to Steve if you needed it so fast - he fucking made it. /Rant,2024,agileScam
dstulle,2,just put a factor of 10 to all estimates and just like that you are the most productive team ever!,2024,agileScam
itsfuckingpizzatime,2,"Yes sir, we will use bigger numbers next time.",2024,agileScam
SuperPotato8390,-4,Have you tried safe? They solved this Problem by normalizing story points. Because without that they have no business value and therefore no value at all....,2024,agileScam
_bones__,20,"The metaphor used by SAFe is a train. Because of the common expression, ""as agile as a train.""",2024,agileScam
SuperPotato8390,5,Yeah it is such a joke that they call themselves agile instead of a waterfall variant.,2024,agileScam
roodammy44,2,"Hey, waterfall is much better than SAFe. I worked in a team working waterfall for a while. We had a week (A WEEK) to write documents and plan our implementation. Then we had two full weeks of testing after 5 weeks of coding.

I have never written better code before or since.

SAFe is like waterfall with the good bits cut out.",2024,agileScam
BlueSpiritPPG,3,Train wreck.,2024,agileScam
LiquidLight_,10,SAFE is called agilefall for a reason.,2024,agileScam
SuperPotato8390,3,Yeah when I read the official reasoning for normalized story points I had to laugh how hard the creators bullshitted to turn waterfall into Agile™.,2024,agileScam
soonnow,2,"This is exactly how I imagined SAFe to be. A total perversion of Agile under the guise of ""grown-up"" Agile for large organizations. Just say you do top-down and save time by not doing pretend Agile.",2024,agileScam
_blue_skies_,1,"Yep, or just assign more points to stories in average, and split complex ones in multiple tasks to go over the limit of 21 per story.",2024,agileScam
JacksOnF1re,1,"Or....oooor....you could explain to management why it's wrong. What you're doing might be clever, but not professional imho.",2024,agileScam
peni4142,1,Just multiply by ten.,2024,agileScam
Tatankaplays,1,"Whut, aren't points supposed to be an internal team thing on which the team can estimate whether they probably can get something done in X time which will then be communicated externally of the team?

Actual management looking into points makes no sense at all.",2024,agileScam
flippakitten,1,"Don't even need to do that. Literally put everything in jira. Comments, threads, questions. 

If it takes longer than 15 minutes, it's a pointed spike. 
If it's waiting on another team and you've done your part as far as you can. New story, linked and closed. Velocity fixed.

Leave a paper trail that shows product is generally a loose cannon changing requirements and rushing things out.",2024,agileScam
cporter202,1,You nailed it! Points are indeed meant to be a gauge for the team's own planning and not a management scoreboard. Mixing the two is like trying to measure your road trip progress using bananas instead of miles. 🍌 Just doesn't add up!,2024,agileScam
SirLauncelot,1,"You can’t use points to compare teams.  They are arbitrary.  You can compare how close estimates are.  But only for improving, not for firing.",2024,agileScam
soonnow,1,Can't you just simply double the points. Or 10x the points?,2024,agileScam
LightofNew,1,As soon as you use points as a metric then you can toss out the whole idea.,2024,agileScam
phlebface,1,"Easy to fix. ""Oh sry, our points where wrong, they will be adjusted by 2x from now on""",2024,agileScam
Daedeluss,1,throw in 8 points per ticket for QA.  Done.,2024,agileScam
roufata,1,Thats why theres story points and team points different metrics,2024,agileScam
Deleted Account,1,"Good management understands that you get what you measure. If they want story points, I'll just estimate higher. Nothing will change other than their graph, though.",2024,agileScam
TheRedmanCometh,1,Points fuck everything up we use time on my team. I don't even really understand why points exist.,2024,agileScam
slaymaker1907,1,"You know how some teams use Fibonacci numbers for points, why not use the Ackermann function?",2024,agileScam
wijsneus,1,You can always double your estimates and report a 100% increase in productivity.,2024,agileScam
Vast_Ad5286,1,"Dude literally. I was in the meeting when our agile coach suggested we start tracking progress via points and I spoke up, pointing out that the data would be immediately contaminated, representative of different things between the teams and not really applicable in any productive manner. We didn't implement it.

Then they fired 40% of the company because of ai.",2024,agileScam
Cthulhu__,1,"Slap them with The Book that says points are for team internal use only, not a comparative measurement of productivity. 

Troll them by doing all numbers x10, making yours the most productive team.",2024,agileScam
SortaSticky,1,you just have bad managers,2024,agileScam
Deleted Account,1,Ours tried using number of check ins as a metric. Everyone started checking in stupid shit like comments just to get the numbers up.,2024,agileScam
waldenducks,1,"“When a measure becomes a target, it ceases to be a good measure.” - Goodhart's Law",2024,agileScam
Deleted Account,1,"Just multiply with 2. Ratio between planned and completed points with remain the same. 
Hell, just increase with a whole factor.",2024,agileScam
havnar-,1,Just increase your estimation scale?,2024,agileScam
SpacecraftX,1,Isn’t “points are never a performance metric” a golden rule because the scrum guide recognises that any performance metric will be gamed?,2024,agileScam
Shadowlance23,1,Shush.. this is why we use points. It makes management happy and we can just come up with whatever numbers we need to. Don't give away our secrets...,2024,agileScam
Olorin_1990,1,"Just increase the base points, 
1->3 
3–>5 
5->8 

Problem solved",2024,agileScam
DualActiveBridgeLLC,1,">  because I guess points are an objective measure of productivity that works across teams

Did anyone tell them that that is explicitly how not to use velocity?  It isn't even hard to explain why it doesn't work that way.",2024,agileScam
kingjoedirt,1,"That happened to us, we instituted our own team policy that story points need to increase by an arbitrary amount every x number of sprints to prove we're doing more work.",2024,agileScam
Gorvoslov,1,"""This request to change banner text to change 'teh' to 'the' is an Epic. We have to have a story for planning the other stories, with all the various stakeholders having a review ticket. Then we will need stories for various tasks including but not limited to: Dev work, code review, unit testing, integration testing, load testing, user acceptance testing.... Anyways, that typo fix is a minimum of 420.69 points... if we haven't missed anything.",2024,agileScam
OddImprovement6490,1,"When I was trained as a scrum master, I was specifically trained not to regard points as a consistent measure across teams.

I don’t do agile in the traditional sense at my current job, but I think the biggest problem was that a lot of people don’t actually understand how to use it correctly.",2024,agileScam
4ArgumentsSake,1,Just double the points on every ticket. Then you hit your sprint goal and bring in extra tickets and have a higher velocity than the other teams. Win win!,2024,agileScam
SimpleMoonFarmer,1,"Easy:


1. Take the number of points for each thing, convert to float. 2→ 2.0 (nothing changes).
2. Decrease by 0.1, for efficiency. 7.0 →6.9 (they will like the reduction)
3. Remove the period, for elegance, just a change of scale. 6.9 → 69 (nothing really changes)
4. Success!!",2024,agileScam
KamikaterZwei,1,why so complicated? just double the points of each story (or jump to the next bigger number if it's those Fibonacci numbers sizes),2024,agileScam
Deleted Account,1,"As a Product Manager, I've been asked to ""baseline* points across teams for performance, and flatly refused. When asked why, I pointed to the *obvious* point inflation as problem #1, and problem #2 being that different teams score differently and work on different shit with differing degrees of... ""OK, OK. Got it"", they replied. 

At least they understood. Gods help ye if your management doesn't.",2024,agileScam
Highlander198116,1,"Yep.  We literally fix ""bad metrics"" by making shit up.",2024,agileScam
ChocolateBunny,1,"shouldn't you just arbitrarily define the points for a story as being a lot more than you expect?

Teammate: This should be a 3 point task

Scrum master: Got it, writing down 6 points",2024,agileScam
whutupmydude,1,The points mean absolutely nothing. If a 1 point task involves coordinating a consensus with a group of people it could take weeks and lots of meetings and perhaps a 5 pt story could just be to develop some complex component but it goes well,2024,agileScam
Deleted Account,1,"That's crap, idiots demanding shit they have no understanding of. I learned early a few bottles of 21 year old Scotch can go a long way.",2024,agileScam
Magallan,1,Do you not size your own stories? Just start adding a couple zeros to your estimates,2024,agileScam
LeadershipDull2605,1,"I don't get why this system is used to control productivity. It is to increase productivity and monitor the progress in order to react to changes in progress speed (add more people, maybe solve an underlying bigger problem,...). I really don't get this misuse, because it clearly is not how it is supposed to be. This is some old school controlling project management shit that old people do because they have no clue abt project management",2024,agileScam
jeff77k,1,Don't forget to peg your points to the rate of inflation.,2024,agileScam
Deleted Account,1,Just move further down the Fibbonacci sequence.,2024,agileScam
Parad0xSDS,1,"As long as you don't have a hard standard on your point scale, just change the magnitude. Make your 1 a 10 and your 5 a 50, etc.. Done and done.

Seriously though, sounds like some education is needed to help management understand the purpose of measuring velocity at a team level",2024,agileScam
CowMetrics,1,"When the metrics become the goal, they cease to be metrics",2024,agileScam
deathentry,1,"Points are meaningless, you should plan up to your capacity for the sprint. Only thing management should look at is if you finished your stories on time or not. If you have 200 hours of capacity and do 200 of work, there's nothing to complain about.",2024,agileScam
NorthboundUrsine,1377,"This is what happens when management cherry picks which agile principles to adopt.

I usually goes like this...

We're going to adopt these agile principles because they benefit management.

We're not going to adopt these agile principles because they benefit the engineers.

And this is how you end up with waterfall, but with buzzwords.",2024,agileScam
Anustart15,464,At my last job they basically just took the word sprint out of context and told us we were being agile. Their version of sprint was to work really hard to do something that should take 4 weeks in 2. And then they decided they wanted to just constantly do sprints and failed to see how that would be unsustainable,2024,agileScam
bric12,229,"""when you're planning, take your best guess for how long it'll take, then cut it in half because why not"" - something my old project manager used to say unironically",2024,agileScam
_blue_skies_,127,"That's when you estimate X2 to get what you really want, we can play the same game.",2024,agileScam
Fachuro,131,"No you estimate X8 because we DONT play the same game, we play it better then them.",2024,agileScam
ABzoker,38,"Updating a Boolean flag, yeah that's gonna take my whole week",2024,agileScam
CosmicErc,22,In our codebases that would be a fact.,2024,agileScam
SartenSinAceite,3,"I'm currently updating a flyway script but the test pipelines take easily two whole frickin hours.

Hell, even to just get to the tests themselves and crash with ""oi, I need an alias after your FROM partition"", it still takes an hour.

It's all smooth sailing until I need to push to git lol, then I spend a whole fucking week with like 3-4 pushes a day...",2024,agileScam
smallfried,2,"I've worked on something, where adding a boolean flag meant changing 40 files.

And then fill in 5 tables with checks.",2024,agileScam
asdkevinasd,2,We must have worked for the same company. 1 flag added and you need to dig up the whole code base and db.,2024,agileScam
Scarbane,2,Now you're thinking with portals!,2024,agileScam
xFeverr,1,4D chess,2024,agileScam
DuntadaMan,5,Scottie curses from the engineering deck.,2024,agileScam
mattaugamer,3,"Ironically I used to know a dev who did the opposite. He would multiply any estimate he heard by 2.5. “That’ll take a week.” He’d write down two and a half weeks. A day and a half? One week. 

He was startlingly accurate a lot of the time.",2024,agileScam
DrJamgo,114,You mean like doing a marathon by just trying to concatenate 400m sprints? Thats what I picture every time I hear the term.,2024,agileScam
Ifnerite,6,"Nice. Sprints are the most pointless part of agile. Things get done at the rate they get done, arbitrary chunks of time is stupid. 

Also, If I'm sprinting for 2 weeks I get to rest for the next 2.",2024,agileScam
Cthulhu__,3,Counter them with other buzzwords like “sustainable pace”,2024,agileScam
XelNaga89,3,"Ah yes - 'We are agile'.

That means that customer will in final week of sprint ask for changes that make everything you did obsolete, increase scope by 30-70% and company expect you finish it by the end of that very sprint and have time for support tickets!",2024,agileScam
Fadamaka,3,That is called a crunch not a sprint.,2024,agileScam
GargantuanCake,107,"OK to make sure we're all on the same team we hired a shit load of scrum masters who will now need to maintain the appearance of productivity without ever doing anything useful, there is going to be an extra 15 hours of meetings per week minimum, and meet the new hire who is going to drag every single standup beyond 90 minutes for no readily apparent reason. We expect to see an increase in productivity starting last week.

Oh by the way when we don't get the results we want, which are actually completely fucking delusional, we're going to randomly fire people, never replace them, and then schedule more meetings every week to discuss some new random things we're adding to all of this because they sounded cool to me now just ignore that I can barely open my e-mail without burning the building down and have no fucking idea what I'm talking about. The marketing guy said this will triple the productivity of our software engineers at minimum and I believed him.",2024,agileScam
Cloudas,36,It gets even better when agile coaches start joining because you are doing agile wrong with all those scrum masters. A plague of idiocy,2024,agileScam
SartenSinAceite,2,">meet the new hire who is going to drag every single standup beyond 90 minutes for no readily apparent reason

Man I'm glad I'm a quiet type",2024,agileScam
vehementi,2,A developer at my company offhandedly mentioned to me that she is considering becoming an agile coach and I just blurted out NO DON'T!!! in a yell without thinking,2024,agileScam
rhazux,63,"Sometimes it can be self inflicted too. I worked at an employer that had ~10 scrum teams, each with 5-6 devs on it. Management was generally interested in giving agile (and in particular, scrum) an honest chance. Everyone went through the same training at the same time, and then we got split into teams and each one ran themselves for the most part.

Some teams really liked scrum. They had good things to say about it, and the junior devs felt like they were getting solid mentor/mentee time.

Other teams absolutely hated it. I'd talk to someone at lunch and they would lament how they spent 7 hours in sprint planning, and at the end of the sprint they anticipate a 4+ hour retrospective. And I totally get why they hated it, because I would hate that too.

My team was one of the ones that did well. We were productive, and we settled into a good cadence in each sprint. 1 hour planning (at a stretch), 30 minute retrospective, 15 minute daily stand-ups, and our velocity stabilized around 6-8 sprints in. We also regularly rotated who the scrum master was so everyone could get the experience. Honestly one of my favorite teams and productivity methodologies in my career. And it has built in mechanisms to say ""this task is fucking horribly defined, why is this in our sprint? 21 points - break this shit up into manageable tasks"".

But I think the thing that sticks out to me is this: we all went through the same training. We were all, supposedly, applying the same rules to how we do things. And yet some teams had horrible experiences. And it's not management that was causing it. Management had zero expectations for any of the metrics. Story points, story count, etc. they just wanted to see how it works. If anything they still had a misled affinity towards SLOC metrics. SLOC per code review, major/minor/redline defects per SLOC, etc. Which existed in their processes before agile.",2024,agileScam
zvictord,27,"People are different.

For a while, among other duties, I was managing a 2-dev team in which the two devs couldn’t be more different than each other: 

* one was very “cut-the-bullshit please” and was happy to work on a kanban with card titles only, missing any detail in it. 5 minutes talk and the guy was good to go for the rest of the week.

* the other was specifications obsessed and it felt like he wouldn’t even change a single CSS line that didn’t have an extensive and well documented waterfall-style task defined. I felt I could never be a good enough of a manager for this guy.

Needless to say it was fucking hard to find the balance in this team, but we managed to be functional only because we were small enough to care about each other and try to accommodate each other’s needs.

I wonder how people expect it to work well when they are all just thrown out there and nobody seems to take into consideration their differences in personality and how they organize/structure their tasks.

The problem is not in the training or the methodology chosen. The problem lies in the fact that you will never just fit in in someone else’s ideal way of structuring tasks.",2024,agileScam
natty-papi,10,"I have a hard time with the second type you described there. At some point, the details and time spent into writing the specifications could've been spent actually doing the work, with some time to spare for documentation.

My experience is that they are sort of traumatized from bad past experiences where they ended up being the responsibility scapegoat in a shitty team, so they developed that defense mechanism.",2024,agileScam
zvictord,4,"Yes! I lost count of how many times i preferred to just do his work instead of writing the damn specification… All I can say is that I had no burnout when I was solely a coder.

Still, I believe from observing him that some people are just different; they handle tasks differently and organize their duties and even life differently. It’s really about personality, nothing else.",2024,agileScam
i8noodles,2,it could be worst. could be like me who wants to cut the BS but still want some defined documentation. i wont sugar coat it. i am a tough person to manage.....,2024,agileScam
cascading_error,18,"Scrum is great if 1. Everyone buys in. 2. You keep a handle on your time. If your standup takes more than a minute to say, scedual a separate meeting with the necessary people.

Scrum falls apart when people start to use the meetings or planning sessions to have arguments. It doesn't matter right now that John gave that story the wrong amount of points, move the f on.",2024,agileScam
SartenSinAceite,11,">Scrum falls apart when people start to use the meetings or planning sessions to have arguments. It doesn't matter right now that John gave that story the wrong amount of points, move the f on.

The best part is when you mention that this should be handled in a meeting after the standup, and you KNOW there won't be that meeting, because nobody cares, not even the person complaining",2024,agileScam
fizyplankton,3,"This could be my team. Every morning, everyone just goes on and on and on, about every detail of their task.

Meanwhile, I'm like ""1488: the dba is still provisioning the service account. 1491: we patched the server, no issues reported. 1493: the business is still testing UAT, if they give their blessings, we'll deploy to prod by EOW""

And I've started to feel like I have to give more flowy bullshit ""well, we started by downloading the patch. That was hard, because its a 6 gig zip file, and most flashdrives can't hold a file bigger than 4 gigs. So we had to dig for a flash drive no one was using, and reformat it. Then, we logged into the server. I checked the access.log in apache, to make sure no one is on. We started to unzip the patch, but ran into an issue where the .properties file was CRLF, so we had to convert it to LF. I couldn't just download dos2unix, because the firewall blocks external internet access. So we needed another flashdrive to.....""

And the worst part is, they seem to LOVE it when I do that!",2024,agileScam
vehementi,2,Did you figure out what those other teams were doing wrong to have 7 hour sprint planning meetings?,2024,agileScam
rhazux,2,"I think a lot of it boils down to communication skills. Since there were a few teams that had problems, there were a couple things I saw in the members of those teams.

Some of those people were hard to socialize with in general so it may have just been arguments that had no place in sprint planning. They were just generally mean and unpleasant to deal with. They would use ad hominem as their main tactic to make themselves look better than others (and fail, but also fail in recognizing that they're failing their attempts to look superior. They just end up looking mean, petty, etc).

Some of them were the type of people where your words are going to be taken 100% literally and must be 100% correct before moving on in a conversation. And I would say the difference with this and the above character trait is that these people aren't necessarily trying to be mean, it's just part of their personality. So I had to learn how to speak very carefully or they would get stuck on mundane bs and miss my entire point. It's like having to prepare your words as if they're being finalized in a legal document, and you better not be wrong because their focus (seems?) to be oriented towards being right, rather than understanding. If they see something they can argue about, and ""win"", then that's more important to them than anything else. And again this may or may not be tied to any sort of malicious intent. I think some of them were incapable of seeing that they get stuck on details and words that are insignificant even after a correction has been made.

I also suspect they were winding themselves up about bidding story points, arguing over what the right values are, and getting lost in details. The above issues are definitely related. It's hard to agree a story is 3 or 5 points if you have personalities like the above that end up behaving like ""it's my way or the highway"".",2024,agileScam
gcstr,1,"Very good points. Had the same experience many times in my career. Just like your examples, all the other people pointing out issues here, are talking about _the wrong implementations of Agile_: ceremonies that expand through long hours, meaningless stand-ups, stretch goals, badly written stories, and the list goes on. 

The meme here points out to story points, and that’s not even officially part of scrum. 

From the management perspective, every attempt to measure productivity will harm delivery. But from the team point of view it is all about seniority. Reject half-baked stories that some PO pushed to the sprint, effectively break down long stories, stick to the time of each meeting, focus on the sprint goal, communicate, and remove blockers. 

It’s incredibly common for less mature teams to end up in an “us vs. them” situation, where everyone is pointing fingers at each other, at that point, the team either gets proper training or will dismantle soon. 

I’m quite old in this area, started in the year 2000 with PMI, and went through all the new things every 5 years or so. I’m way more comfortable with agile for PDLC, but I agree it doesn’t work well without a well rounded senior team.",2024,agileScam
tobi_camp,46,"I keep amazing managers when I explain that agile means fixed time but flexible scope. Their project will be done on time but it is unsure what they get out of it.
If that is not reflected in contracts or customer relationships you are doing waterfall „just faster“.",2024,agileScam
floweringcacti,30,"This has always been a major flaw of agile imo. At the end of the day, customers and stakeholders prefer fixed scope and flexible cost//deadlines. They don’t want to hear “we’ll definitely deliver on this date at this cost but you might only get half a system”. Half a system is actually completely fucking useless most of the time, even though we pretend otherwise with silly pictures about how customer wanted a car but they’re happy with a skateboard MVP. Imagine a builder saying they’ll definitely spend six months but you might get half a house, or a tailor saying they’ll spend an hour but they might only get half your suit done, it would be stupid as hell. I miss doing PROPER upfront costings.",2024,agileScam
biledemon85,22,">  I miss doing PROPER upfront costings.

My experience has been that a scrum mindset can drive out the up-front planning completely, which leads to problems.

On the other side, if you're doing upfront planning a year in advance, forget about it. You might as well be doing tarot readings to see what you'll be doing in 8 months.",2024,agileScam
SartenSinAceite,2,"I guess it's meant to adapt to the complications and ""deliver something by X"", but yeah, it's pretty damn backwards. If the client wants to check out your skateboard MVP, they will do so, but they want a fucking car.",2024,agileScam
tobi_camp,1,"Mmh I guess that depends. For the main things absolutely. These need to be fixed. Like: it needs to be a car. Especially on new developments. 
But longer running projects always have open items so it’s better to end after just a while than spending months on spec and dev for stuff nobody really needs. 
Or take MS Teams or other service/subscription based stuff. Constant money flow, regular releases. Your company probably pays for it but nobody knows what the next update brings.",2024,agileScam
NorthboundUrsine,2,">Waterfall, only faster...

I'm fuckimg stealing that.",2024,agileScam
Deleted Account,2,What an eloquent way to put it. Stealing this.,2024,agileScam
Deleted Account,14,"Do you work where I work? I feel so bad for the engineering team. I’m the PM and I do everything I can to help them play the game. 

I’m so tired of this. I’m so tired of antiquated leaders who throw titles around and just point at gross simplification of the development process as a single “effort” number and go “BE BETTER”.",2024,agileScam
NorthboundUrsine,2,">just point at gross simplification

My boss said, ""So all we have to do is..."" 17 times in a planning meeting today.  At the end of the meeting, when he asked if anyone had anything to add, I revealed that detail... he's a hands-off manager who is terrified to code because he hasn't in soooo long.  I've been trying to motivate him to dive back in.",2024,agileScam
Deleted Account,1,"My Eng lead is too busy dealing with the paperwork the ops team shovels at people in the name of increased productivity. It’s madness. I can’t wait to leave, because there’s nothing I can do. The leaders are too stubborn. It’s offshore. There’s no negotiating. They don’t take feedback. They just want to produce story points to make the CTO happy, nevermind the quality of the work.",2024,agileScam
janne_harju,7,Scrum is not at all for management. They should not be involved.,2024,agileScam
musicartandcpus,2,"Exactly. I’ve been reading these threads and it’s shocked me how some teams have been explaining how teams are being judged and having their performance reviews with managers based around their velocity and points they get done. That’s not what Scrum is supposed to be for at all. All those metrics are supposed to be for developing the team more, create self reflection and growth. But then again a lot of orgs take on scrum agile with this idea that it’s worth it because it’s a big industry buzzword.",2024,agileScam
Wally-m,3,"You are spot on. Most people that complain about agile are caught up in not-agile.

The thing with the agile methodology is that it's an all or nothing approach. If you're only going to adopt some of the principles, you're not doing agile.

For future job seekers, if a company says ""We do agile, but with our own twist!"" That's not agile.",2024,agileScam
Lookitsmyvideo,2,Scrumfall but without complete specs,2024,agileScam
Schorai,2,"Yeah, we have waterfall with plannings, retros, refinements and two scrums every day. Is it better? No, but the pointless meetings take ca 2 hours of each workday. But we are agile. Yay.

We call it waterscrumfail.",2024,agileScam
583999393,2,"I've tried to implement the opposite. Here is a wireframe of an idea, you don't have to build it, you don't have to use it. The idea is I want to accomplish X (X was a pretty small task, show some data on a page with the latest status of the data integration)

Developers: I need detailed AC

Me: There is no AC except the AC you come up with. You can literally do anything to accomplish the goal and we'll show what you got in 2 weeks and talk about how we can improve it.

I need more detail in the ticket. And clear AC.

I dunno, I spent a lot of my career looking at UI screens and fussing that they wanted 3 months plus worth of work before releasing the tool for customer feedback and then getting chastised for not completing it in time but my current team can't seem to live without that level of control.

I'm kind of lost on what to do about it.",2024,agileScam
daguito81,1,Wagile,2024,agileScam
BlueSpiritPPG,1,Scrumfall.,2024,agileScam
GreySummer,1,"""Scrum but""

> We're not going to adopt these agile principles because they benefit the engineers.

It's sad, because they *all* benefit everyone if done right. It's more ""management doesn't know how to apply these, so they stick with what they know, because they're afraid of trying""",2024,agileScam
JupiterSeaSiren,1,"👆🏽 this.  Imagine this scenario: 
* Agile consultants convince management if they buy their consulting projects can get done in a 10th the time and with half the people. 
* They buy six figure consulting and dont rehire for positions to pay for it. [What are people that do the actual work for anyway?]
* Team does project only just standing up and using words like ""circle jerk or scrum"" while using post-its.
* Project takes just as long. Occasionally longer due to changing requirements. Changing requirements are their prerogative but team gets punished and told they are doing a bad job because teams don't meet new expectations consultant set. 
* A few management vanity firings to save behinds. Down more people that do the actual work. 
* they eventually figure this out but consultant is either already gone or says its their fault for them implementing hybrid. Whistles away.

Agile does have nice things about it and is good in concept but the incentives often kill it too. It's a great concept to be more responsive and flexible with users but this also happens.",2024,agileScam
Anders_142536,1,"I like to call it wagile.

Tbh, the joke works better in german, where ""wasserfall"" and ""agil"" have the same sound for the a.",2024,agileScam
Deleted Account,1,This. So this.,2024,agileScam
Unsey,1,">waterfall, but with buzzwords.

I believe that's called PRINCE II",2024,agileScam
albertogarrido,1,"The only principle the agile manifesto advocates is collaboration, nothing else. This brings the consequence of better features, happier users, and not doing anything the user's don't need. And that transforms into speed. 

Story points, sprints, backlogs, pos, pms, burndown trash, etc. is just things the scrum griftes added to keep doing micromanagement and product lead waterfall.",2024,agileScam
Magallan,1,Waterfall but _faster_,2024,agileScam
Deleted Account,1,*scrummerfall,2024,agileScam
SmoothieBrian,1,"They benefit me quite nicely, but only because I get paid hourly now instead of salary 🤣",2024,agileScam
NorthboundUrsine,1,Want more story point? Pay me per story poj t!,2024,agileScam
GenTelGuy,858,"I came up with a brilliant approach for estimating how long a certain dev task takes:

1. Do the work

2. See how long it took",2024,agileScam
deltashmelta,210,"""But, like, couldn't you just know ahead of time? Or something?"" 


 <screams in eternal meeting calendar series>",2024,agileScam
FoldSad2272,124,"""I can guess?""

Brilliant!  We'll hold you to it!",2024,agileScam
anonymousbopper767,17,If your guess is too long then “why can’t do you it in time divided by 2?”,2024,agileScam
SartenSinAceite,4,"Now now, is it me guessing or you? Let's hold you to it.",2024,agileScam
National-Ad67,2,im not a quantum mechanic to manipulate time,2024,agileScam
redlaWw,3,*mutters something about the halting problem*,2024,agileScam
Shadowlance23,2,"Yes, I could do it in two weeks, but I've got three weeks of meetings so it'll take twelve.",2024,agileScam
Ninja_Wrangler,128,"Bossman: ""Will this project take a week?""

Me: ""I can let you know by next Friday""",2024,agileScam
Deleted Account,21,[deleted],2024,agileScam
DrakonILD,4,Man I wish Scott Adams wasn't such a shithead.,2024,agileScam
swapode,19,"Just define ""the work"" as something of a reasonable size, so that you can get meaningful feedback quickly, and you've basically become more agile than pretty much every ""agile"" shop.

The problem has never been agile, but people calling some insane nonsense process agile.",2024,agileScam
CYOA_With_Hitler,24,"Im 7 years into a 4 year project with an estimated 8 to go, agile seems to suck to me, is just lots of talking and no doing",2024,agileScam
Andubandu,40,It also has a pretty sick success rate!,2024,agileScam
PM_ME_YOUR_MUSIC,17,My toxic trait is thinking every task will take an hour. Usually takes me 3 weeks.,2024,agileScam
No_Permission5115,2,I have this problem and I can't seem to fix it.,2024,agileScam
PM_ME_YOUR_MUSIC,2,I can help you overcome this and it won’t take much effort. We can have it sorted within an hour.,2024,agileScam
mannenmytenlegenden,11,It's just an estimate. Is it okay if it takes much more effort to implement it. At least nobody where I work care,2024,agileScam
CatSajak779,3,"My temporary PM is one of us (billable employee, not an actual manager by job title). After we pushed back against estimate requests from upper mgmt, temp PM said “Just put a number in there. It doesn’t need to be accurate.” Anddddd boom - there it is lol. You can request arbitrary data for your spreadsheets all you want. But the people doing the work will prioritize their actual work over stupid processes and just give meaningless numbers to appease the bean counters. Workers waste time “estimating” and mgmt gets inaccurate estimates. Nobody wins.",2024,agileScam
Philipxander,2,How do you put multiple tags??,2024,agileScam
KamikaterZwei,2,"That's how we did it with Kanban. We only estimated a rough size thingy to see if it makes sense to break a Userstory down into smaller Stories. And often enough the planning was like ""Is the task done?"" ""No we found additional stuff that is useful to do in that context, still working on it.""

So the amount of ""User Stories finished"" was quite low, but the quality of work was really high and stuff that was done didn't need to be touched again for ages, because widen the scope of the task was totally ok.",2024,agileScam
Fadamaka,3,"Mine is:

1. Estimate it

2. Multiply the estimation by 3

If it doesn't work, keep repeating step 2 until it does.

PS: Jokes aside, the multiply by 3 method had served me well. Most of the times it took half the estimated time. Some of the times it took all of it. But everything was completed on time and the management was happy since I was the only one actually delivering everything on time on the team.",2024,agileScam
oofthatburns,1,Then multiply by 3,2024,agileScam
Real_Guru,1,"This is ironically one of the fundamental reasons for agile - the developer knows best how long something might take. In practice though, your company has a budget for the upcoming quarter and I, as a PO or higher, need to be able to estimate how much a feature is going to cost me, otherwise I won't get a budget allocation for it. If I don't get a budget, you're all out of a job.
Obviously, we can always just go back to waterfall and instead of you telling me how long you need, I'll tell you how long you have and be up your ass every time we miss a random deadline that I came up with... See how much you'll enjoy that.",2024,agileScam
Mustang-22,271,Story points only exist to give non technical product people the ruse that they have any damn idea about what anything means,2024,agileScam
extracoffeeplease,68,"Yeah, I went to the dark side of product ownership for about a year while no longer developing. Story points make sense if the team can agree in how much work something is, but you don't yet know if it's going to the junior or the expert. But then saying ""we do 50SP in one sprint"" is where shit goes wrong. 

I think it best to just do offline reorganising of a Jira board / backlog, sitting with the tech lead to see when things would be done / conflict with other work going on, make a Roadmap and stick to it.
  
 Stakeholders and business gets to see no lower than the Roadmap. Set up a separate service board for stakeholder complaints if you don't want to give them access to your team's board. Hell, they do t even get to plan a meeting directlt with a developer, and I measured myself in how much meetings dev had",2024,agileScam
Intelligent-Comb5386,7,This is the way to be honest,2024,agileScam
5kl,5,"“but you don't yet know if it's going to the junior or the expert.”

This is an issue I see all the time but it’s not the right way to address it. 

The story is the story is the story regardless of who works on it. Think of a story as a 100 yard dash. The work to be done is a 100 yard dash regardless of who runs it. 

Who’s going to complete it faster, me or Usain Bolt?  Now if I was way younger, trained a bit, and practiced, I could get better and complete that 100 yard dash a little quicker. 

So, in that analogy, how many 100 yard sprints could Bolt run in a week? We’ll say five. How many could I run? One. But maybe in a couple months, I can run two. 

So maybe I can complete two stories of three points each while Bolt is completing five stories of similar size. 

Regardless, the complexity/size of the story doesn’t change no matter who works on it. ",2024,agileScam
QuantumCat2019,0,"story point is not supposed to be used that way, they are not a ""team"" thing but a person thing. e.g. dev A,B,C make estimate , and over time you realize that for a given complexity which can be implemented over a sprint , dev A estimate 20 story point, dev B 30, dev C 10. The team velocity 60 story point is utterly meaningless it is an estimate by hours without telling it, only individual velocity make sense. So the next time the dev give an estimate of complexity/story point you can go back to each individual and see if they can make it in how many sprint. 

Mind you this is still an estimate of time but with extra steps, but at least individual speed make sense, but averaging speed over a team when each individual has a different \*meaning\* for story point make zero sense.",2024,agileScam
Trustadz,-2,"I've been able to work out a velocity with my teams (I'm a scrum master) based on historical data. And with the product owner we were able to plan good sprints with a decent amount of accuracy. It ended up between 22-28sp per sprint, with some outliers, but we basically plotted a graph of how much story points we burned and then took about the center 30% of that as an guesstimate of the amount of work that could be done.

Having good communication with the product owner, and clear stories are essential to this though. And that's sometimes extremely difficult.",2024,agileScam
CombatAmphibian69,-1,I have no idea what the hell you're talking about,2024,agileScam
Trustadz,1,"Tl;Dr: story points can work, but with everything in the future, Shit is still uncertain. Don't fault people for that.",2024,agileScam
Real_Guru,1,"I get the sentiment but please consider the opposite perspective: Without points, the PO is clueless about how much a feature will cost and story points are the olive branch being extended to developers to be able to have a say in the planning process.
No manager in the world will approve you a budget for just aimlessly working on something until it's done. Agile is good for developers, not managers. That's why, if it's done properly, it seldom survives for very long...",2024,agileScam
locri,396,Estimations lost their positive benefits when the numbers were given to higher management. Talking about estimations is more important than the actual numbers themselves and upper management are too out of touch with the real development of stuff to even actually care why something is an 8 rather than a 3.,2024,agileScam
FoldSad2272,197,"""just give me a ballpark, we won't hold you to it""

Like fuck you won't... 6 months to add that tick box.


""Can you improve on that?""

Sure, we'll just abandon QA, I know you think it's just a waste of money.


""Do you really need all this infrastructure?""

Nah, redundancy is for the weak.


""That email is fine already, send it to all our customer base!""

Yep, spam services love that kind of thing, prepare to be shunted off the internet.


...Sorry, just went into a bit of self therapy there....",2024,agileScam
damicapra,63,"It's all right. This is a safe space, you can vent to us",2024,agileScam
rooran,31,This is a SAFe space*,2024,agileScam
CatSajak779,2,Nice,2024,agileScam
odraencoded,2,https://www.youtube.com/watch?v=s-vJcOfrvi0,2024,agileScam
SartenSinAceite,1,"I was enjoying that, moar pls!",2024,agileScam
jonathanbernard,3,"Estimate are for the team, deadlines are for management and never shall the twain meet.

As a lead, and now as a manager myself, my approach is always, ""let's talk *as a team* about how long we think this is realistically going to take, factoring in risk of unknowns, things outside of our control, etc. as best we can."" Then I'm equipped to go into conversations with my peer and leadership and talk about what we can deliver, by when, with what confidence, sequencing, and what levers we have to pull in case we need to adjust (can we cut features? does it make sense to invest an extra month now if it saves us three on the tail-end?). But that estimate never leaves the team.

This only works because I've done the work myself, have enough experience to understand the tradeoffs both in engineering and on the business side, and have the authority to push back on things that are unrealistic (though that's earned as much as given). A lot of places for things to break down. Software is hard at scale.",2024,agileScam
Deleted Account,1,"Here is what I have done. Start with estimates, and actually mean it. Do that for a cycle or two, just save yourself the expensive planning poker BS. Get your folks, have people throw up a numer and when they diverge, settle why that is.

When your team has got the groove down, and you start seeing stories are appropriately sliced and make sense, just take the average of story points and slap that on EVERY story. No discussion. Management is happy because they got numbers, you are happy because you got rid of them. Anything else can be settled internally.

Deadline planning is not a baseless complexity estimate guessing game and takes candid conversations, as you said.",2024,agileScam
Thurak0,2,"Yeah. I have actually some positives coming out of estimations. Especially when the PO himself could then prioritize stuff in a way they wanted.

Or when differences came up and were resolved when people estimated extremely different.

Purely team-intern estimations *can* help.",2024,agileScam
AxePlayingViking,1,"Only thing points should be useful for for management/stakeholders is prioritizing. As in, ""I would rather have these two 2s in this sprint than this one 5"". Or ""this ticket shouldn't be completed right now if it's larger than these things""",2024,agileScam
voodoo_witchdr,563,I know this meme format is supposed to be a joke but holy crap it rings so true.,2024,agileScam
Dx2TT,79,"Option 1: lead puts in tickets provides rough guidance on how it should go, dev gives it a shot. Makes mistakes, gets corrected, eventually merged.

Option 2: create ticket, groom ticket, add to planning, discuss the details of the ticket with the whole team and debate the nuances of it. 2 months later dev gets ticket... all discussion forgotten and we're effectively back at the starting point of option 1 but wasting time on grooming and estimating. Fucking joy!",2024,agileScam
FlamesOfAzure,18,"Lol, did we work at the same company?

Honestly, having to groom tickets that wouldn't be seen potentially 2 or 4 weeks later in the middle of sprint felt like such a waste of time and attention for the majority of us devs because our focus is already on tickets that were also previously groomed 2 or 4 weeks ago that we had to go back and get clarifications on anyway because the documentation was always half-baked or sometimes even just non-existent.

Not to mention there was never time to go back and clean things up. It was always feature after feature after feature.",2024,agileScam
SartenSinAceite,1,"Oh, so this is what I was feeling about groomings. We do them to find out issues and discuss approaches to tickets, which is neat, and they're very useful when you get the ticket assigned, but meanwhile you're already busy with something else, you don't know if you'll get that ticket yourself, and there's already a backlog of like 5 other tickets, so the ""I know about this"" benefeit is already lost.",2024,agileScam
CosmicErc,4,"Our team makes so many documents to try and document the planning of work that by the time you get to do the work you don't know where the actual requirements are anymore and the deeper you get into the PRD and EDD documents the more contradictions you find

And my boss keeps saying 'writing code is easy' and I fucking hate that.",2024,agileScam
SartenSinAceite,3,"Writing code is easy, yes.

Knowing what needs to be done to do X is damn hard though.",2024,agileScam
n_choose_k,103,"Yeah, this is a terrible use of this meme as all of this is true...",2024,agileScam
Deleted Account,5,Yeah. I was confused for a moment,2024,agileScam
Deleted Account,30,"Yup, its basically my team for past 1 year. My team talks about it non stop like it's actual work to be done.",2024,agileScam
JunkNorrisOfficial,4,It's a real joke... It's a 'not a joke' joke... Not a joke which is funny...,2024,agileScam
ipullstuffapart,2,"Having worked at a couple of companies who did Scrum, and one quite prescriptively - it is an immediate red flag in an interview for me now.

Agile good but Scrum was invented by a madman.",2024,agileScam
Deleted Account,2,"Had the exact same thought when I read it. A rush of relief showered over me when reading the comments, seeing they all agree.",2024,agileScam
guyblade,2,This isn't a meme; it is an accurate depiction of reality.,2024,agileScam
EcoOndra,1,It sounds like hell ngl,2024,agileScam
Deleted Account,1,I feel like this rings true when you do all the agile processes without actually being agile. It's like doing all the right things to build a car but still trying to make it fly.,2024,agileScam
yoyo_climber,1,probably cause you've only worked on joke teams.,2024,agileScam
RelentlessAgony123,50,"I do not know how upper management even justified paying for 'scrum masters'. 


I genuinely do not even know what they do in our company. 


They just create meetings after developers say they need to discuss something or they organize meetings where they demand more process ceremonies. Scrum masters constantly ping developers to fill in ticket details,  to write estimates, to move tickets... when this is something they could do or it's something we naturally do once our work is done anyway.
 They don't deal with the project owner, it's what developers do. They don't estimate,  it's what developers do. They don't determine the requirements,  it's what developers do with PO, they don't do anything useful...


Scrum masters also bend the whole sprint backwards so their precious graphs could look good. 


We don't need them for retros since developers do all the talking anyway and get ignored no matter what... unless the Scrum master sees an opportunity to jam some more process ceremonies down their throats.


I have an elevated blood pressure just writing this comment because it makes me realize just how pointless Scrum masters are. Company literally pays them to make everything less efficient. ",2024,agileScam
HearingNo8617,4,"Where I have worked in the past, scrum master was just what they called the team lead, and project managers would do that stuff you describe, and now I'm wondering what the distribution is",2024,agileScam
RelentlessAgony123,4,"In my experience scrum master is a paid role with no ability to do any actual work. They just hop from meeting to meeting as they cannot code so they desperately do stuff to look busy and justify their salary. 


As you may conclude,  I believe their salaries would be better spent by literally burning the money as the process may provide some warmth.",2024,agileScam
pyius,5,"Was certified SM several years ago. SM is just supposed to be a responsibility iirc. Someone to make sure DSUs are not going off track, etc. Not a fully paid title. You can even rotate SMs if you want.",2024,agileScam
Separate_Parfait3084,3,"My last SM (before they eliminated the role) was fantastic.  There was so much data gathering and nuanced busy work we were able to shuffle off.  Prior to that one, you couldn't convince me why that salary shouldn't go to a dev.",2024,agileScam
ChChChillian,254,This is... startlingly accurate.,2024,agileScam
nebulaeandstars,96,"I *wish* the project requirements only changed every two weeks

I can't work on *anything* for more than three days before the PMs declare a state of emergency and we're given a completely new set of priorities (usually to replace the previous emergency, which still hasn't been addressed)",2024,agileScam
NorthboundUrsine,84,"Manager: ""We're implementing scrum.""

Engineers:  ""Awesome... it will be nice that we can't be reassigned to put out some bushfire once a sprint starts!""

Manager:  ""We're not adopting that model.""",2024,agileScam
GordoMondiola,12,I can't even work on anything for more than half day. Then the SM will get upset at me because there is no progress in the board.,2024,agileScam
aaronfranke,6,"We used to have everything as high priority. Then the boss discovered urgent, so now everything is urgent.",2024,agileScam
uniquelyavailable,2,"we're agile, we're efficient, we're scrum masters

/s",2024,agileScam
Aacron,2,"Fucking a that was me this summer. Huge pending deadline for early winter, every time I stop to pay attention to it some jack off that moved his deadline up 6 months without asking is lighting fires and screaming for attention.


Winter rolls around and jackoffs project gets kicked back to after the original deadline, and big winter deadline is a rush job with failures in testing and gets delayed by a year.",2024,agileScam
CleverNameTheSecond,1,I've given up on tracking constant requirement changes and trying to figure out what they even changed. I just wait for the defect tickets to tell me what they are.,2024,agileScam
gregorydgraham,49,"“Plans are nothing, planning is everything”",2024,agileScam
Thurak0,3,"Fuck. This is my workplace in some situations. Endless discussions on plans. But if people just don't follow those plans... absolutely no corrective measures.

What a waste of time.",2024,agileScam
gregorydgraham,2,I’m quoting General Patton,2024,agileScam
twalther,2,Everyone has a plan….until they get punched in the mouth,2024,agileScam
gregorydgraham,2,"Tyson, I believe",2024,agileScam
Deleted Account,203,[deleted],2024,agileScam
PandaNator4343,190,"In other words, ""the primary measure of progress is working software. 

It's agile principle #7.

In a decade of working through agile transformation, I've never heard a single scrum master or agile coach preach that value. They all focus on the ""window dressing"", as you say.",2024,agileScam
KronktheKronk,71,"Well when your job is dressing windows, that's obviously the most important part",2024,agileScam
janyk,14,"For extra effect I like to point to principle #1 and emphasize it's at the top of the page

""Our highest priority is to satisfy the customer through early and continuous delivery of valuable software""

It sets the primary value by which all other parts of the process are evaluated: is what you're about to do going to help you or anyone else deliver more valuable software faster?  No? You don't know?  Then why do it?",2024,agileScam
Deleted Account,9,[deleted],2024,agileScam
maleldil,3,Yeah. Just get out of the way and let me do my job. Wasting my time and focus with meetings is counter to the end goal. ,2024,agileScam
guyblade,2,"The best thing about agile development is that they're a version of agile for every possible development process. I just like pointing out that there exists, on Amazon, a book titled _Scrummerfall: Blending Agile and Waterfall_. Its existence hints at the underlying problem.

I don't necessarily believe that agile is snake oil, but it does seem like snake oil salesmen love it.",2024,agileScam
EudenDeew,1,"Also the literal first line of the manifesto:

> Individuals and interactions over processes and tools.",2024,agileScam
lunchpadmcfat,43,"I’ve found, in my career, the only companies who “get” this are ones with strong engineering cultures with the ability to push back on arbitrary timeline setting. Otherwise it’s just an org faffing around, not meeting targets and wondering what’s going on, and blaming engineers.

Engineers here: you are required to understand agile and when your company tries to implement it but only for management, you need to show them what they’re doing wrong.",2024,agileScam
Deleted Account,21,I wish we had engineers who would push back. Instead I get the famous ‘offshore yes’ and then shit doesn’t get delivered on time and it’s half ass.,2024,agileScam
FoldSad2272,13,"Was in a senior management meeting discussing our feature roadmap for the year, one of them suggested we should 'be more agile'.

I just laughed.  They had evidently heard the term and thought it was a magic spoon or something.",2024,agileScam
templar4522,2,"The problem usually is tech leads being yes men, sometimes they got there because of that. Add to it that maybe they hire consultants to ""improve"" things, so devs arguing back is still ineffective.

You have consultants and tech leads telling upper management that everything is going the right direction so they won't hear what the front line has to say.

I've seen this happening in a place that had a good culture, it was so frustrating. I was a contractor so at some point I just left them and moved on.

The most ridiculous thing is failing fast and continuous delivery for a financial product. The release manager was close to retirement so she just went ""fuck it I can't be bothered to argue, I'm gone in less than a couple of years"". Oh and the stupid idea that one ticket one day max so you can imagine the planning sessions....",2024,agileScam
Dx2TT,1,"I honestly think Agile might be amazing with a team of amazing professional Stanford-level engineers, where each team member is equal and capable.

And none of us have that. We have a team of one 10x dev whos surly and difficult but effective. A cheery friendly guy who can't code his way through a hello world, and 3 people who just seemingly fuck around all the time. You want to storypoint to the lowest team member? Have you seen that person? Fine, 26 points. We just had a dev spend 2 weeks on a 3pt... and then I still had to toss the PR, do it from scratch in 1 day. Yea all of that planning, discussion and grooming really paid off.

Smh my head.",2024,agileScam
Deleted Account,3,Amen,2024,agileScam
RelativeAd5406,2,Exactly! You can guess how long it’s going to take me to drive from point A to point B but it doesn’t affect how long it takes me to get from point A to point B. If you’re going to hold me to that time limit then you’re asking me to take shortcuts and I doubt thats what you want me to do,2024,agileScam
twalther,1,"You’re not entirely wrong, but would you accept this answer from a contractor who is replacing the roof on your house?  There is a balance to be struck here.",2024,agileScam
Deleted Account,1,"I understand that we are in the middle of a circle jerk, but holy shit these comments are ridiculous. ""The project will take however long it takes"" isn't an acceptable answer or realistic. This is doubly true if you work for an outside vendor. No one is going to give you work if you can't tell them how long the work will take. You can't give a customer a price if you don't know how many man hours it will take.

The whole point of a company is to make a profit. You can't do that if you can't even estimate how long work will take and set deadlines.",2024,agileScam
Ok_Dig2200,1,"hurry command silky wild mindless dependent bake sink mourn snatch

 *This post was mass deleted and anonymized with [Redact](https://redact.dev)*",2024,agileScam
Deleted Account,1,"I didn't say anything about roofing. The person I replied to did. There are plenty of industries where the work you will do is one-off. Even if software development was this unique industry that has extreme variations between work, it's not, you still have to give estimates/pricing and timetables. There really is no argument here to he made.",2024,agileScam
Ok_Dig2200,1,"numerous teeny fuel rude stocking chase act coordinated physical existence

 *This post was mass deleted and anonymized with [Redact](https://redact.dev)*",2024,agileScam
Deleted Account,1,"Wow. What a retort. Can't argue with that reply. Also, glad you know about what I've looked into or know. You should start up your own company, since you know that people will just write you blank checks and  not care when you will finish their product.",2024,agileScam
Deleted Account,1,[deleted],2024,agileScam
Deleted Account,1,[deleted],2024,agileScam
Deleted Account,1,[deleted],2024,agileScam
Deleted Account,52,Fire 90% of the managers and you’ll see a real productivity improvement. At least in my experience.,2024,agileScam
RelentlessAgony123,30,"Agreed. I hate how they pat themselves on the back. ""Most things break in the middle  which is why management is so difficult "" they say as they pat themselves so hard their hand is turning blue. 


Naturally,  managers ignore the fact stuff breaks in the middle because they are in there, right in the middle, undermining everything. 


Most productive weeks of the year for me are around Christmas when managers go to a 'well deserved' holiday.  I get to actually work instead of dealing with process ceremonies invented to deal with the fact too much process ceremonies cause delays.


Can you imagine a whole week without interruptions? I miss that...",2024,agileScam
John_Fx,2,"Get rid of maps and the car will get much further! Where? no idea, but look how many miles we went!",2024,agileScam
Deleted Account,2,"Yes, employees would be lost without 12 managers guiding them. Great point! (It’s not)",2024,agileScam
John_Fx,1,Yeah. they would build features to make their own lives easier all day and cry when customers quit their app.,2024,agileScam
IshouldDoMyHomework,54,"I love scrum.

It enables me to tell people to fuck off, in a legit and management approved way.

“Hey can you just fix the this wonky response”

“Sure can. Just get a hold of PO, he can help you make a jira and get it prioritized”.

“Can you make some elaborate analysis of my complex system addition I want to present to the some business board?”

“Absolutely! Just get a hold of that fellow over there. That’s my PO. He will help you make jira and get it prioritized”

No jiras are ever made. Scrum is good.",2024,agileScam
Training-Bake-4004,3,"I have the opposite problem. We’ve got a team with a project Lead, 4 POs, a Scrum master, an Architect and 4 devs. 

The POs live to give us stories, and each one will add stories to the board. Seriously, I woke up today with 11 stories on my board for next sprint. Had to go into the daily being like “seriously guys, you’ve gotta decide amongst yourselves which of these actually needs doing”.",2024,agileScam
IshouldDoMyHomework,6,"You have 4 POs to 4 developers… what the fuck. That is just completely misunderstood. 

1 PO to 1 team of 5-10 devs. Sometimes it is even 1 PO to 2 teams, if the company really want to cheap out.",2024,agileScam
Training-Bake-4004,2,"We had a lot more developers, but they were all externals and then budget cuts meant we got rid of most of the externals but not the POs because they’re staff. 

We do actually need more than most teams since what we are building has to interface with a whole bunch of other teams on other systems and so aligning business requirements across systems is a nightmare, but we definitely don’t need 4. But they’re nice enough, the work is interesting and I get paid so I complain in a “lol this is absurd” kinda way rather than an “oh god my job sucks” kinda way",2024,agileScam
Oblachko_O,5,"Unfortunately, small teams may have no PO. And if you are a small team, Agile may be even worse, because of the time it completely ignores things like:

Communication with a customer took longer
Requirements changed
There are bugs, which need to be solved
Customers didn't provide crucial information in time

And in the end you have more work than you can ever solve, the priority is ""everything needs to be done"" and the end result may create unexpected (well, partially expected due to rush) defects, which may take time, which is not incorporated in a sprint.",2024,agileScam
Soupeeee,6,"Our small team switched to the Kanban method, and it's made a huge difference in how we deal with the problems you describe.


The big revelation was forcing every change to go through a prioritization process, and creating new tickets for change orders instead of amending ones that the customer had declared done. The details of tickets in the in-progress (""doing"") stage can fluctuate a lot, but if as long as the problem is in the correct sized chunks, clearing them out in a timely manner isn't too hard. Something else that has helped is that when a core requirement of a ticket is finished, we sometimes declare it done and create other tickets that refine on it. These usually get assigned lower priority, so we can move on to more important things.



The other part that has been really helpful is putting the tickets in a ""waiting for customer"" state that is separate from the in-progress state. If it's in that category, it's explicitly clear to the customer that if they want it and its dependencies finished, they need to do something about it. We don't touch things that we are waiting on information for, and just move on to the next highest priority task that we can work on. If that means not doing any work or doing low priority things, then the customer only has themselves to blame.",2024,agileScam
its_theDoctor,5,"Requirements changing is literally why things are evaluated frequently. Things taken longer than normal should be expected and accounted for in estimation. If you're not incorporating reality into your sprint, I don't think that's the fault of agile. You're not supposed to just ignore reality and scramble and call it agile.",2024,agileScam
lphartley,1,"Agreed. It's a language everybody more or less understands. That's valuable. 

Try to play along and don't get sucked in. Do your estimates, follow the sprint planning. If you want something done because it's important, just do it. Don't bother creating a 'user story'. Discuss it with your team and then do it. Literally nobody will stop you if you have the support of the team. 

If people ask: 'why did you do less points than estimated', simply say it was an estimate and estimates can be wrong, don't defend yourself.",2024,agileScam
No-Community-2985,1,"I do like the added layer of protection, but there's also just random bullshit added. Let's start estimating using the fibonacci sequence, because science of course!",2024,agileScam
Zephyr_______,59,"This isn't a meme?
This is just an accurate critique of the failing of our industry",2024,agileScam
LeSaR_,5,"who said it can't be both? memes are just yet another format of media that can be used to critique things, just like books or youtube videos (maybe more funny though)",2024,agileScam
Anbcdeptraivkl,29,"Wrong format lmao. This format is supposed to be for inaccurate jokes, not for spitting facts.",2024,agileScam
chrisbbehrens,110,All this from a generation that never knew Waterfall. Because that's the alternative.,2024,agileScam
lunchpadmcfat,66,"Waterfall has its virtues when requirements are stable and there are few unknowns. Waterfall works really well with, like conventional engineering because physics is pretty predictable. 

Waterfall sucks for software as complexity grows because you can’t deliver fast enough for requirements not to change.",2024,agileScam
Pyran,26,"Waterfall is also great when you have a huge, rare, big-bang release.  Want to release every 2-5 years, and then only a complete product?  Waterfall works quite well.  Want to release incrementally, incorporating feedback from users?  Not so much.

Airplanes are the classic case for waterfall, or at least against agile.  ""You can't deliver half an airplane.""

Like any other development language, the methodology used is just as subject to ""use whatever fits best for your situation"" as anything else.

Just don't tell Agile evangelists that.",2024,agileScam
powerofnope,18,Well Boeing begs to differ.,2024,agileScam
TurtleSandwich0,5,You can deliver an airplane with almost all of the bolts.,2024,agileScam
DreamCatatonic,1,Happy Cake Day!!! 🥳🎉,2024,agileScam
rathlord,2,Too soon,2024,agileScam
recurse_x,3,"Oh our first sprint was the seats because user feedback was they like sitting and want more leg room.

Our second sprint was the drink cart because users like ginger ale when they fly.",2024,agileScam
Hideyoshi_Toyotomi,6,"There are so many situations where agile makes no fucking sense. But, you get executives who believe that Agile is 70% more effective than any other methodology and suddenly you've got the whole IT department on an agile mission from hell. 


Meanwhile, the Infrastructure, Change Management, and infosec teams are wondering what the hell happened that they can't use a Gantt chart anymore. ",2024,agileScam
louiebobble,2,"This is what I’ve come to believe.  But I also would argue that those big bang projects are going to be hell regardless of style. 

Been on 3 multi-year SAP upgrades with 100s of resources, and there’s no way to just jump in and do a traditional agile approach on those kinds of projects. 

In both cases, the consultancy has come in and pitched an “agile” approach to management and it immediately turns into some pseudo waterfall method that is overlaid with “sprints” to track milestones. 

When you’re dealing with something that large in scope, you HAVE to have an extensive planning phase but at the end of the day, there really needs to be some kind of buffer to account for the inevitable complexities and changes that will pop up. 

You can’t sell that though. So you always end up in a death march.",2024,agileScam
i_like_tasty_pizza,2,"You can also ship hardware in increments, unless it’s a mars rover. Think of any car or mobile phone and how a new version of the same thing gets released to the market every year.",2024,agileScam
chrisbbehrens,2,"That's an important point. Agile is not the right toolset for building a bridge, for example. If your project doesn't involve any sort of research of uncertainty, Waterfall is just common sense.",2024,agileScam
VMCColorado,35,Back in my day we did RUP up hill both ways.,2024,agileScam
EffectiveMoment67,40,"Yeh wow. I mean any development process done wrong sucks.
But wf done right will fail the bigger it gets. Agile is slightly better over time.
Done right.

I bet none of these commenters even bother to show up to retros. And that just shows they know jack shit about team work",2024,agileScam
distinctvagueness,11,Corporate agile is waterfall that skips planning and sometimes testing phases... yet act surprised its bad,2024,agileScam
TristanaRiggle,40,"Waterfall is better because it is management randomly hectoring you about why a large project that everyone agreed would take months isn't done yet.  That's better than Agile, which apparently is management hectoring you every week (if not every DAY in standup) about why you haven't met whichever arbitrary deadline they choose to be annoyed about today.

I assume that there's some company somewhere that is doing Agile ""correctly"" and is recalibrating projects as needed using the principles therin, but after 8 years of being more and more ""Agile"" the reality is just management shifting priorities on the fly willy-nilly based on what the higher-ups want today because ""that's the way this is supposed to work"".",2024,agileScam
AngryTreeFrog,14,"I honestly think we don't need as many managers anymore they do too much circular ""work"" with very little actual productive value to the organization. Back when managers had to physically go to their individual teams to build reports and collate what people are doing and present up sure. But now it doesn't take that much work to do that. So they came up with all this extra arbitrary stuff that they pass around. 

At my work we have a ""scheduling team"" that takes the schedules that the project managers get, usually handheld by an engineer, then take that put all the same information in another format and send it back to the project managers.",2024,agileScam
asanskrita,16,"You just think this because you have never worked waterfall. Waterfall is two years of people goofing around, talking over each other in meetings, coming up with grandiose designs, and never writing a line of code, followed by six months of absolute freakout when you have to ship something, people working 80 hours weeks, scrapping all their designs, and throwing together something that only one person can get to build and doesn’t work at all. This then ships and you go back to goofing off.",2024,agileScam
TristanaRiggle,9,I've been in software development for over 20 years. I'll take any and all problems working with other developers in exchange for longer stretches devoid of the micromanagement that Agile inflicts.,2024,agileScam
asanskrita,5,"It’s a valid complaint at many places. My company mostly does agile right, and you’d hardly know there *is* a process because it is mostly transparent, but stuff still gets done. I have worked under bad agile management before, it is as you describe.",2024,agileScam
EffectiveMoment67,11,Stop complaing about agile when your issue is shit management ffs,2024,agileScam
chrisbbehrens,3,"BOOM. I was almost there with this. I've had tremendous success with Agile, but there's a downside: I had to have the balls to tell management no and have them pissed at me. I can't recall ever being fired for it, but Agile means **repeated confrontation** \- at the estimation session at the very least, but almost certainly elsewhere. And most programmers are really lousy at confrontations.",2024,agileScam
EffectiveMoment67,2,"This is the truth.
The economist middle manager type steam rolls engineers all the time, usually because they are are brown nosing upper management and just want to be the good boy to them, kicking down whenever they can.

Often you need an engineer that is tough enough to tell them to fuck off (not literally) early on. Else agile wont help you, and can be used against you.

That is why doing the courses is so important (the middle manager too!).
Any disagreements can be easily dealt with: lets consult our scrum teacher!",2024,agileScam
TristanaRiggle,3,"Again, I am SURE that there exist great places where Agile is done ""correctly"" and is pleasant. But in my experience, it is an excuse for shit management. Your culture is toxic (imo) if you need ""stand ups"" to collaborate with your peers. I don't think ""Agile"" matters either way, either you have a collaborative environment WITHOUT management constantly on your ass, or you don't. 

In my experience, MOST of the Agile trappings are used by management to prevent, what they think is, ""sandbagging"".",2024,agileScam
EffectiveMoment67,3,"Its funny because management was adamantly AGAINST agile 20 years ago.
Dev teams had to convince management to try it.

But it seems now management, being suck, use it to mismanage dev teams instead.

Just as they always do.

Its not agile. Its corporate management. 
No dev process can fix shit management.

Atracking agile is stupid. Honestly.
WF is FAR worse for dev teams",2024,agileScam
Pyran,2,"> Honestly. WF is FAR worse for dev teams

Depends on the scenario.  In today's environment of ""Release now and improve over time"", sure.  I completely agree.  That said, I would never want to fly in an airplane that was built using Agile.

Don't get me wrong: I don't think there are a ton of scenarios where Waterfall is a better route.  Just like I don't think there are a ton of scenarios where ""No methodology at all"" is a better route (I can think of one: personal projects.  Building your own scrum board for yourself is... probably overkill.)  But in all of my experience, I'm not quite ready to write off any one tool in particular just because it's not useful in >50% of scenarios.

Except VB6.  And maybe PHP.  And definitely Perl.  Fuck those guys. :)",2024,agileScam
EffectiveMoment67,3,">I would never want to fly in an airplane that was built using Agile.

We are talking about software projects. I have zero idea why you bring up airplanes here. MAkes zero sense, and I am beginning to think you actually dont understand why agile was the most popular choice for software development.

&#x200B;

> can think of one: personal projects. Building your own scrum board for yourself is

&#x200B;

Again you are giving examples which are obvious, and it tells me you havent actually looked into why scrum or agile is like it is. Scrum is set up as a team collaboration process, where the communication in and out of the team is structured in such a way that there is minimal disturbance from outside ""forces""  
Ofc scrum isnt for personal projects. Even thinking that is a relevant thought heere is... what? Why even mention it. Its not relevant.  


Also there are a ton of flavours of agile, which makes this stupid post even more stupid.

Fex in some scenarios, a kanban board is probably enough for a tiny team to maintain some non-cricital system for a loosely organized company.  
Whilst scrum features are necessary in multi-team scenarios.  


You actually have to understand what these different flavours are about.   
The post complains that scrum uses words which mean something else in different areas...poker is a game wtf?! And people agree with it. 

  
Im really surprised that devs are turning their back on methods which are designed to protect them.",2024,agileScam
Pyran,2,"I actually think standups, in principle, aren't bad.  They're a chance to take something fundamentally ad hoc -- essentially water-cooler discussions -- and get all the major issues hashed out up front, freeing people from the randomness of a bajillion conversations over the course of the day.

I tend to think of it this way: if I took every daily conversation with someone I had and put it on my calendar instead, my meeting count would explode.  Standups are an attempt to get ahead of that.

At least in theory.  Too often they turn into ""Ok, now that we're done here let's set up half a dozen meetings over the course of the day anyway"".  But the theory makes sense, at least.",2024,agileScam
Pyran,0,"It's worth pointing out that if every implementation of Agile is shit, calling the process into question is perfectly valid.  The point I always try to make is ""For a methodology whose first tenant is 'People over process', Agile sure has a lot of process.""

It could be that Agile begets shit management, or that shit management begets Agile.  But they seem to correlate.

Truly good Agile implementations are just as much unicorns as truly great management.",2024,agileScam
EffectiveMoment67,2,"Agile is a lot of process?Try Prince 2.0...lol  


Ive set up scrum processes which worked completely fine, even with shit management surrounding it. I dont understand what peeoples problems are, except they dont actually do whawt is necessary.  
Everyone has to do the courses. Everyone. FOllow the guidelines. Suit the process to the goal. Standups are standups. ACTUALLY do retros.   
Dont let PO change requirements on sprints (not this one, or the next) and so forth.",2024,agileScam
Pyran,3,"> Agile is a lot of process?Try Prince 2.0...lol

Sure, we can find worse.  Not the point.  That said, I appreciate the warning, haha!

> Suit the process to the goal.

This.  A thousand times this.  I can't possibly begin to stress this enough.  I've always been an advocate of ""Make the process work for you; don't make yourself work for the process.""  I couldn't agree with you more.

I guess my ultimate point is this: if (nearly) every implementation is Agile, it's fair to ask what it is about Agile that seems to encourage either shit management or shit implementations.  It's *also* -- to be absolutely clear -- equally fair to ask what it is about shit management that they turn to Agile fairly consistently.

> Ive set up scrum processes which worked completely fine, even with shit management surrounding it. I dont understand what peeoples problems are, except they dont actually do whawt is necessary.

I can totally appreciate that.  I've *seen* Agile set up well.  I appreciate the hell out of it when it's set up well, and people like you who do that are worth their weight in gold.  But I've seen it... twice, I think?... in two decades.  That's somewhat alarming.

Point is, while I don't think you can point the finger purely at Agile (which is your point as I understand it) I don't think it gets a free pass either.  There's *something* there that doesn't work, whether it's management, Agile (and here I'm talking about the industry that's sprung up to implement it The Right Way&trade;), or the intersection between the two.",2024,agileScam
EffectiveMoment67,2,"Thanks! I can breathe again now. We agree totally.  


My final point is that to my knowledge there isnt anything better than the different agile methods. And attacking them is counter productive, whilst its shit management that is the actual issue.",2024,agileScam
Pyran,2,"Yeah, I think on our various threads we ended up somehow talking past each other.  We're generally on the same page. :)

Such things happen!",2024,agileScam
RelativeAd5406,1,"I’m one of those were my productivity gets lower under too much pressure which sometimes happens when a ticket was severely underpointed. Dealing with daily stand ups was atrocious in those cases because I have to justify why it’s taking so long when in reality it’s because the ticket didn’t take into account x, y and z when it was pointed out. After a few tickets like that, I think the scrum master and tech lead thought I was underperforming so if it looked like it was taking a bit long, they’d ask another engineer to help out. They soon realised that it wasn’t a skill issue when the other engineers were going to other engineers for help and still not getting anywhere for days. It became a thing in my team that I was cursed when it came to picking up tickets",2024,agileScam
Bob_Droll,-1,Software takes time to build well! Fuck the client that foots the bill for wanting some idea of when the product will be delivered! /s,2024,agileScam
EffectiveMoment67,6,You dont understand agile if deadline does not exist in your agile projects,2024,agileScam
Odd-Confection-6603,8,"Yup, spend months doing requirements and writing design docs. And then once those are done, that's what you go implement. You can't change it a year later when you've realized that you fucked up. 

On my last waterfall program the SCM tool actually wouldn't even allow us to make a branch or commit code until we reached the implementation phase of the project and the associated work tracking tickets were approved by management in the master schedule... And God help you if you estimated the work wrong a year ago! You'll constantly be badgered by management as to why you're behind schedule. It was a nightmare.",2024,agileScam
dewalist,5,"THIS. Sit through three months of design meetings only to have someone point out a fatal flaw. I still have binders with HUNDREDS of pages of requirements. Wanna guess how accurate they were?


Agile isn't the problem.  Pick the rules that fit your team - that's kinda the point. The problems are RTE's and metrics management.  RTE's need to justify their paycheck and expand their reach to get promoted, so they constantly change things or enforce policies that don't fit all teams. And management can't seem to function without metrics, and metrics are useless by themselves, so teams get compared to other teams and things break down from there.",2024,agileScam
i_like_tasty_pizza,2,Watwrfall is not the only alternative to Scrum or not even to Agile. This is the biggest lie.,2024,agileScam
chrisbbehrens,1,"As a programmer who worked in Waterfall and then Agile for thirty years, if you tell management that Agile doesn't work here's what they'll say:

""Oh yeah, I totally agree. It's so unpredictable and everybody is just doing their own thing, which doesn't work. What we need is a detailed plan that we can lock down and commit to.""

Can folks do Agile wrong? Of course, they're human beings. But, for example, which of the tenets of the Agile manifesto are wrong? What method of software estimation other than blind corporate estimation have you worked out that's better? What measure of productivity have you found that is better than velocity?

The answer you get from programmers is ""software takes as long as it takes, and there are no useful metrics, just let me code."" And if you really stick to that answer, management will decide against doing the project. There have to be measures, and however imperfect, Agile creates the best existing measures.

Last point, because this is running long - Agile works because it dispenses of the pretense of knowledge about the project. The knowledge doesn't exist yet - it has to be created progressively as the project moves along. Agile is currently the best reconciliation of this fact with the business and enterprise reality of creating software.",2024,agileScam
WasteProgram2217,3,"This is the clarion call of the born again scrummers.

A false dichotomy, authored by a feeble mind, withered and degraded.",2024,agileScam
9035768555,1,"Yeah, who the hell bothers making blueprints before they construct the house? Let's all just wing it!",2024,agileScam
dantheman999,6,There is a middle ground between absolutely no planning and planning everything up front and sticking to it rigidly even in the face of problems with the original analysis.,2024,agileScam
Michelin123,1,It's crap you mean.,2024,agileScam
chrisbbehrens,1,"Well, I wouldn't be that harsh; it's just that folks don't know how bad it can be with Waterfall. On paper, Waterfall is development paradise; you work hard to come up with a good plan with lots of beautiful design drawings, and then you work hard, knowing exactly what you're doing. But that's not how reality goes...",2024,agileScam
ViewAdditional7400,1,Exactly.,2024,agileScam
LumpyAsparagus9978,1,"Do a little waterfall to have a proof of concept/pilot in one implementation. Then use the proper agile to evolve.

I have been in Agile projects for the sake of agile, where we had months before we could get something functional to show. Wasting hours and hours to said what we were doing.

I have been in Waterfall projects were the final result was totally out of touch with the reality of the users...and then we started a new Waterfall to fix it",2024,agileScam
chrisbbehrens,1,"If you're taking months to get to something functional, that's not Agile. If you're not getting your stuff in the hands of users until the very end, that's not Agile. 

It sounds like you were doing Spikes - you can do it however you want in a Spike.",2024,agileScam
LumpyAsparagus9978,1,"No Spikes, our director said we were doing Agile because that was what she wanted to show to management. All the meetings and ceremonies and stuff just to tell management our team embraced Agile. The only important thing was a name on a PowerPoint.

And the project before that even worst: doing Agile for an app that the business owner did not need, there was  no contract signed with the client. At some point I told my director to remove me from that project, wasting my time with nonsense meetings while an upcoming project highly critical for our infrastructure was moving slowly because I was not there. She agreed, I went to the other project mentioned before and she pushed Agile there.

We did not need sh1t, we needed our space to work.

Edit: and on the long Agile project, we were forbidden to show the end results to some of the owners until being almost ready to implement in prod!!!",2024,agileScam
RamenSlurper01134,13,"THANK YOU This is what all upper management / PMs / SMs have to hear right now.  
I'm already busy and I don't want \~3 hours of my work week taken away for some aGiLe cEReMonIes🤡  
I could get some more actual work done if I had that time.",2024,agileScam
AgentRev,1,"*Only* 3 hours? You mean your dailies are not 2 people arguing with each other for an entire hour while 13 others are dying inside because the scrum master doesn't have the fucking balls to intervene? And then more arguing during the retro, and later on the sub-team sprint planning, followed of course by the full-team sprint planning?",2024,agileScam
RamenSlurper01134,1,"Yeah, luckily I have the privilege to excuse myself in the middle of dailies for some other meetings these days. Still meetings though😞

Anyways, gosh that sounds so tiring...🤦‍♀️  
Is no one escalating that to get it resolved?",2024,agileScam
AgentRev,2,I quit long ago fortunately,2024,agileScam
BratPit24,13,"Ok personal opinion time.

I think agile was made up web developers for Web developers. Think about it. Every webdev project is easily splittable to smaller modules, complexity is reasonably predictable and if you are any good in coding it's quite easy to have continuous deployment. So 
1. build mvp
2. Get feedback
3. Deploy improvement
Loop works very very well here.

Compare that to any other software development. 

Gamedev. MVP? That's just a broken promise you'll be stuck patching till the end of time. You need to nail at least the fundamentals on the first go.

Data science. Have fun estimating complexity here. You may build 100 a/b tests without a single positive. And that's fine. Negative result is also a result worth noting. But if your agile goal is to build a model, it's simply impossible to build it from negatives only.

Data engineering. Yeah build mvp pipeline. I'll see you in a year pulling hair out of your ass trying to address all the data quality issues your silly project left.

These are areas I've been involved in so I can't comment on others. 

Now this isn't to say parts of agile cannot be used. Sure they can. And the agile mindset cannot be used. It's great. But the generic tools we're given just aren't really thought out for these kinds of projects.",2024,agileScam
Deleted Account,35,[removed],2024,agileScam
Deleted Account,6,[deleted],2024,agileScam
wanderinbear,3,"We plan once for 6 weeks and go. Google 6 week planning, that are lot of papers out there  that describe the process",2024,agileScam
Stephen2Aus,3,Sounds like shape up?,2024,agileScam
Flagon_dragon,2,"You are actually *being* agile. You can fuck Shapeup by doing all the nonsense people seem to think is important (planning, estimating, burndowns etc) just like anything else.


And they'll start calling that something like Shapeup@Scale and start peddling certificates and proclaiming it as the saviour to all management woes.",2024,agileScam
Odd-Confection-6603,0,That doesn't make any sense. What do you commit to if there is no planning activity? Somebody is breaking the work down and planning the commitment,2024,agileScam
FulgoresFolly,3,Shapeup is a good model for this and might be what OC is talking about. https://basecamp.com/shapeup/0.3-chapter-01,2024,agileScam
wanderinbear,1,We plan once for 6 weeks and go. There are lot papers out there that describe the process. Google 6 week planning software dev.,2024,agileScam
Iittleshit,6,So you increased your sprint length,2024,agileScam
wanderinbear,0,"No. There are no more sprint planning every two weeks, ticket pointing, retros.. useless meetings to discuss why certain tickers weren't finished in sprint.. you also get 2 week cooldown after 6 weeks to do refactoring, innovative work, etc.. I highly suggest reading about it.",2024,agileScam
its_theDoctor,2,"But you do planning and then work for 6 weeks on that stuff, and you then afterward evaluate how it went...that's planning and a retro, but over 6 weeks instead of 2...",2024,agileScam
Odd-Confection-6603,2,But that sounds like agile...,2024,agileScam
FoldSad2272,3,"...except without the shackles of the term.

By jove, I think we've solved it!",2024,agileScam
enilea,1,It does sound more sensible than 2 weeks though,2024,agileScam
Flagon_dragon,1,"*Agile* doesn't specify a timescale for the timebox, just a preference for the shorter.


*Scrum* actually does say a maximum length of a month, but for some reason everyone settles on 2 weeks because they read it in a book.",2024,agileScam
Odd-Confection-6603,1,"I strongly prefer two weeks. I've never seen a high performing team with a planning horizon of 4 weeks or longer. Parkinson's Law says that ""the work will expand to fill the time allotted for its completion"". If you give people six weeks, it'll take six weeks. If you give them 2, it will take less than 6 weeks.",2024,agileScam
CalgaryAnswers,78,"Not surprised by all the people hating on agile because it’s been sabotaged by corporate project managers. We don’t have project managers, and projects are evaluated by deadlines, not story points.

We do use story points though and it’s a pretty good measurement for velocity, which is what it’s supposed to be used for.

All these complaints aren’t about agile, because you’re all not really doing agile",2024,agileScam
Odd-Confection-6603,35,"Yup, just because their team does it wrong doesn't mean the process is wrong. Plenty of people fucked up water too. Shit, waterfall has been around since 1970 and people still fuck it up. 

Fun fact about waterfall, in the original paper published with the waterfall process in 1970, the author describes waterfall in the first two pages, and then the is the waterfall diagram that we've all seen. The author then says, in the very next sentence after the diagram: ""I believe in this concept, but the implementation described above is risky and invites failure"". He then went on to describe iterative development cycles, much like agile. He knew 50+ years ago that waterfall sucks, but everyone saw his pretty picture of the waterfall and stopped reading.",2024,agileScam
Flagon_dragon,2,"Yeah, Winston Royce explained all the problems with waterfall and talked further about involving the customer, unit testing and so on.


Barry Boehm had the same problem with his Spiral model as people saw the first diagram, forgot to read anything else, and implemented fixed-length mini-waterfall.


Scrum is another one. The Scrum Guide doesn't mention anything about estimation, planning poker, burndown charts, story points. But everyone seems to think those are the important bits. And Scrum was developed before the Agile Manifesto originally.",2024,agileScam
CalgaryAnswers,1,"Agile works really well for me because usually I’m fast enough that I’m pushing the edge of what can be produced by the BA’s, but people don’t seem to understand that other delivery methodologies exist besides waterfall and agile.

I have no idea why anybody likes waterfall though. I feel like nobody who says they love waterfall has ever actually done waterfall. Requirements are out of date by the time they’re done and it leads to lots of weird negotiations from business users who won’t sign off things because they might come up with new requirements later.",2024,agileScam
rathlord,1,"Depends on your industry probably. 

If you’re working gov contracts your requirements were probably set in stone 30 years ago by someone who’s dead and there’s no one left who knows anything about the project, so you just finish it and collect a paycheck. 

(Just kidding, gov is actually a nightmare but the point remains that it’s really dependent on industry.)",2024,agileScam
CalgaryAnswers,1,I’ve worked in public sector for a couple of different ministries before and we had special rules and processes for agile projects.,2024,agileScam
TheGreatNizzo42,15,"Isn't that the truth?  When Agile works, it really works.  Unfortunately most companies (like mine) 'customize' AGILE to their liking (because we know better right?) and totally destroy it.

Honestly, both AGILE and Waterfall have their merits and downfalls.  The right answer is somewhere in the middle...",2024,agileScam
jackstraw97,15,"What’s the point of measuring velocity, though. 

The measurement should be software that works well. 

Velocity is a measurement for the sake of a measurement. There is no value in measuring velocity.",2024,agileScam
good--afternoon,13,"The point is that if you can come up with an average velocity for your team, you can use it to take an educated guess at how long a project might take by pointing all of the tasks in the project and seeing how long your velocity says that will take. However I have never seen a product manager or team lead organized enough or have enough time/energy to actually follow through on this process to see if it works. I doubt it does. But that’s the point as far as I know. In my experience it’s mostly a waste of time.",2024,agileScam
RelativeAd5406,4,The problem is when the time estimate becomes a deadline. Working overtime to meet continuous deadlines just burns you out and reduces productivity in the long run,2024,agileScam
CalgaryAnswers,2,Measuring a story in agile doesn’t roll up to a bigger project. We don’t estimate how long the project will take based on how many story points there are. You can’t do this because early in the project the teams velocity is not known.,2024,agileScam
UrineArtist,1,"Spot on, if it takes me 3 months to fail to deliver one project then it doesn't necessarily mean I can fail to deliver two projects in 6 months.",2024,agileScam
Justified_Ancient_Mu,1,"This is the management problem. Velocity should just go down in this case. Work your normal time and the scrum master adjusts the mean expected velocity. It's a measure, not a goal.",2024,agileScam
Deleted Account,2,"This exactly, our scrum master used it as a measure to say this is the absolute minimum time it will take for the project to be done to the higher ups.

That and making sure the team didn't take any more points in a sprint than our average until all is done.

Then any extra could be pulled in but not committed to finish until the next sprint planning when those points are already spoken for.",2024,agileScam
its_theDoctor,6,"Velocity has a pretty great value.

Unfortunate truth: if you can't predict when stuff will get done, management will tell you when it has to be done.

If you don't want deadlines, you have to get good at predicting.  That's how it works.  Measuring velocity is supposed to be your way of giving predictability to the business so they leave you alone to get your work done.",2024,agileScam
CalgaryAnswers,-9,"If you’re pointing correctly velocity goes up. Points should be a measure of complexity. As core modules are built up your better able to deliver more features in shorter periods of time. As velocity goes up the measure of what the team can take on is increased, and so more work is assigned.

It doesn’t matter for lifecycle projects, stuff that’s small like bug fixes etc.

It really matters on greenfield, which is basically all I do.",2024,agileScam
jackstraw97,11,"That still doesn’t answer the question about what the actual point of measuring velocity is. 

“Hey look we delivered more arbitrary numbers this sprint than last one!”

And it just devolves from there once management gets their hands on it…

The measure should be: does the application do what it needs to do? Are new features being added based on their priority?

I don’t see how velocity is useful in tracking what *actually* matters.",2024,agileScam
CalgaryAnswers,-7,"I told you in my post what the value is.

Team can complete more work, so more work is planned during sprint planning. Not sure you understand agile like you think you do.

The numbers are only arbitrary if your team is inexperienced and doesn’t know how to point a story based on complexity. 

For example I delivered a 5 point story in 4 hours including the front end and the back end work. Full featured piece to display to the users their remaining time off allotments from the company’s SAP system. Earlier in the project that would have taken me about 8 hours. Now we have proper routing on the front end, dialogs are setup as standard, state management is all done and defined, controllers have all base functions added, repository pattern is implemented so I can hook up to mongo and have all functionality for a collection in minutes. I have all the models done for tables in the app, so velocity goes up.

If the team is inexperienced they probably shouldn’t use agile. It demands a mature team that knows how to use it correctly and is also willing to standup to management if it’s used as a tool for moving deadlines back.

Points also keep stories to a scale that deliverable in a short period of time while delivering business value.",2024,agileScam
FoldSad2272,3,"""Team can complete more work""

""The numbers are only arbitrary if your team is inexperienced""

""If the team is inexperienced they probably shouldn’t use agile. It demands a mature team that knows how to use it correctly""

Lots of 'experience' there... Let's hope nobody leaves the team.",2024,agileScam
Rafiq07,2,"Surely, if it would have been more complex to implement previously, it wouldn't have been a 5-point story. So you're not really completing more points in the same amount of time.

Also, why not just estimate it as 4 hours and 8 hours if that's what it's going to be ultimately reduced to?",2024,agileScam
its_theDoctor,1,"Velocity = distance / time.

Asking why not just estimate time is like asking why  not measure a car's speed in hours. ""this car can go places in 10 minutes!"". What places? How far? Time is meaningless without distance.

Also, time changes over time. The first time you ever coded an API it might have taken you an hour.  Now maybe it takes 5 minutes.  But the API is still an API, and if you have to build another one next week, you'll know how it compares because it's an API again.

On top of that, time gets distributed over multiple people, and isn't consistent. Today you have 2 people available, tomorrow it's 3.  Yesterday you had way too many meetings and got nothing coded.

That's the whole point of ""complexity."" It's not a magic number, it's a constant.  You tell me this API and that API are similar, that doesn't really change. But the team can decide if we can let our junior engineer do it slowly, or have our senior dev bang it out quick. The time changes, but the work didn't.

Velocity = distance / time.

One final note: this is why velocity is supposed to be observed, not enforced or regimented. You average out the amount of working features (complexity) a team can do over time (complexity / time = velocity) and it gives a pretty damn good indicator of how long a roadmap will take.",2024,agileScam
Rafiq07,2,"That's my point, though. You're talking about points but then keep relating back to units of time.

Points should be used for sizing and prioritisation only. They shouldn't be used to then estimate a length of time. Otherwise, you might as well just gauge the length of time. They shouldn't be used to gauge productivity either.

The whole point of agile is that the roadmap can change on a sprint by sprint basis. As you mentioned, the way you point a ""feature"" can change as you move through the lifecycle of a solution, so there's no way it could possibly give you a good indicator of how long a roadmap will take of future sprints.",2024,agileScam
its_theDoctor,1,"It's like you didn't even read my comment. I went over it in excruciating detail dude.

""You keep talking about points but then keep relating it back to time.""

Yeah, imagine relating some measure against time to make velocity... Almost like what the word literally means. 

Try one more time to follow the analogy. Velocity = complexity (points) over time, just like distance over time.

A mile is a mile, no matter who runs it. I'm in shit shape so it takes me probably 15 minutes. Maybe it takes you 10.  But the mile is still the mile.

In the next year, we need to get 520 miles away from where we are.  If we aren't usually able to run 10 miles per week, we're gonna need a faster team or to plan to run less miles.",2024,agileScam
CalgaryAnswers,2,"Thanks for following up. So many people in this thread have no idea what agile is.

Too many pigs ruining it everywhere.",2024,agileScam
Rafiq07,1,"That's funny because I was going to say the same thing. You're responding with a definition of velocity, when that's not what I'm questioning at all. I'm questioning the validity of using velocity for long term future planning.

I already said previously that you can not bank on what you had story pointed previously that far in the future because of how it changes over time. I don't understand how this analogy refutes that.

Using velocity and story points to map out a long-term estimation will not only come out inaccurate, but you're also placing the wrong kind of pressure on the estimating developers.",2024,agileScam
CalgaryAnswers,1,"You don’t use velocity for long term future planning. We only assign points to stories we’ll do in the next sprint or that we think we might get to, and to figure out how much work we’ll need to pull into the sprint.

Sometimes an architect will roughly point out all the stories at the start of a 3 month project to give burn down, but burn down changes because burn downs allowed to go up when the scope changes (a fire is elastic, the size of the pile can and does)",2024,agileScam
its_theDoctor,1,"Story pointing isn't intended to change over time so I'm not sure what you're saying there.  An API is an API.  What changes is the speed I can complete it. So my velocity can naturally increase over time, but the story points should basically stay the same.  

That's not to say that people can't do a shitty job at estimating, but predictable delivery is basically required for a business to succeed so that's just gonna be something that needs to be practiced.

Also, this is additionally why you usually increase points by larger factors as the size increases. Precision is less critical the further we look out and the bigger the project. But something like Fibonacci works by letting us be more precise on the small broken down work coming up immediately next cycle while using a scale better suited to #of months away for larger stuff.

Using velocity and points won't inherently lead to inaccurate estimates unless you continue to fail to estimate well.  But I can 1000% promise you hours estimates are useless, because no one works a fixed set of hours in the week/day and your hours are not interchangeable with anyone else, so we have zero flexibility on what fits where since every estimate has to be individualized.

Whether or not estimating is something developers shouldn't have to do is a separate topic, and maybe an interesting one to debate. But points absolutely work, I've done it for almost a decade at this point, and it's not complicated when done properly.",2024,agileScam
Rafiq07,1,"Maybe my wording wasn't the best on that. I was trying to point to the fact that story points are not just based on complexity but also other factors like risk and uncertainty. This is why I was previously pointing back to your original example with the APIs. The first API pointed would have had a higher risk or uncertainty factor. However, when it came to the 10th API of similiar complexity, you'd have reduced the risk and uncertainty factor. So there'd be a difference to what you'd point it over time, which is why it makes future roadmapping inaccurate. 

Say, for example, you've templated the API at that point in time in the future, which would bring the story points down as it would be less complex with less risk/uncertainty. Or if you go the other way and say, for example, you've now been told we're not working with Rest APIs anymore, we need to reconfigure to work with SOAP. This would increase the complexity as well as risk and uncertainty of the same ""feature"" that you'd previously pointed and roadmapped to be smaller and easier to implement.

Factoring up the points, the further in the future you're attempting to go, is a way of mitigating this, but is it just applying numbers for the sake of applying numbers at this point. I feel like the development team is better off concentrating on their current sprint goals and helping to point/plan the following sprint; but never thinking more than 1-2 sprints ahead. Obv this would be dependent on how long your actual sprints are, but you can get the point I'm trying to make.

Surely, that's what Agile is about, not tying yourself down to numbers and expectations so far in the future. Adapting as you go between sprints against a constantly changing landscape.",2024,agileScam
its_theDoctor,1,"I'm closer to agreeing with you now that you've gone into more detail, but I'd still say that falls under complexity to me. You are right, it's more complex to write an API from scratch the first time than if next time we templatize part of it.

That's usually fairly predictable and measurable still though.  I've seen many situations say ""well we're planning to do 13 points of work on this 8 point story so we do it in a way that's repeatable later, and should be like 5 points each time moving forward."" And from there the PM was like, sweet, 5 more points now to save 3 long term and we're gonna do that a lot, so I love it.""

Also, yes, the dev team should be focused on mostly the next 1-2 sprints, not a super long term planning.  But, that's part of what also fits into the Fibonacci sequence.  The way it works most effectively is some backlog session, the PM says ""hey we're thinking about this big new feature next quarter,"" and the team can say like ""probably 34"" or ""hmm at least 55."" And they don't need to take a long time debating that, because those numbers are inherently less precise. But it still gives the PM a rough guideline of how it'll fit in so they can plan a longer term roadmap.

You need to spend longer figuring out the difference between a 3 and 5 point story next sprint because clarity could mean the difference between committing to the work or not.  

But that long term planning should start with more like a quick chat.  As it gets closer to coming up in actual upcoming sprints, the team will break pieces off that are easier to estimate accurately and there you go.",2024,agileScam
CalgaryAnswers,1,Because they’re not equal measurements of work. Story points aren’t an estimate of how long a story will take. It’s an estimate of how complex a feature is to develop.,2024,agileScam
Fofalus,4,">Not surprised by all the people hating on agile because it’s been sabotaged by corporate project managers.

Or agile being forced into jobs that don't support that. Let's ask infosec how agile works when new 0 days can come out at any second that demand immediate attention.",2024,agileScam
rathlord,1,“Cyber Spints” are a fantastic way to run a team ragged in my experience.,2024,agileScam
Deleted Account,6,"Eh, I've seen enough teams doing SCRUM to the letter and yet not delivering on anything because they focus more on protecting the sprint and statically pointing everything despite the fact that they should have built experience. 

I work in a team that has to be agile by definition, very few of our requirements cannot be met in a few weeks we just have a lot of them. However, many of these complaints still ring true which is why I don't do them. 

At the end of the day, a team can only be high performing if it has good quality staff who know their shit and are motivated to do it well. Those two factors will have an astronomically larger impact than following a stringent agile methodology. 

Ways of working is the real scam. If you have good staff they'll know what to do and do it, or they'll learn quickly.",2024,agileScam
CalgaryAnswers,1,"It’s not for every team and every project. It works best with mature leaders and teams who know what it’s good for and how to implement it correctly.

Agile even points this out.

Many projects can be done with just a kanban board.

It’s not a scam though, it’s only a scam when you get agile coaches in hocking their shit.",2024,agileScam
sirkubador,2,"This is a part of the problem. All those people for whom agile doesn't work are the problem. Not the system that is utterly impossible to get right and only then it works for some. I mean that's a cult, not a dev methodology.

People should focus on what works and not on how ""wrong"" they've implemented the mythical agile.",2024,agileScam
JaguarOrdinary1570,3,"I don't buy the ""you're not really doing agile"" garbage anymore. Like yeah, it works really well when done right! You're just not doing it right! Neither is anyone else! No evidence exists that it has ever been done right! But trust me, when it's done right it works!

Here, I've come up with a methodology even better than agile: just write perfect bug free code that solves the exact problem on the first try. It works great if you do it right. And better yet, this methodology can be implemented with approximately the same success rate as ""real"" agile!",2024,agileScam
Fluffy_Somewhere4305,2,">All these complaints aren’t about agile, because you’re all not really doing agile

this x1000

People say ""we are in all day meetings doing points"" isn't agile",2024,agileScam
Training-Bake-4004,1,"Yeah, agile in concept, and when well executed can be good. But sadly, in most orgs, especially in large non-tech ones, it quickly becomes hell.",2024,agileScam
Samuel_Go,1,I agree with everything except the purpose of story points. Measuring velocity is a benefit but ultimately in my opinion the reason for it existing is to help get an understanding of what the work is. Differences in points or differences in reasons for points shines a light on a lack of shared understanding or any assumptions.,2024,agileScam
GordoMondiola,9,"My SM last sprint: ""don't take it personal, but task effort should not be bigger than 8hr"". Yet the rest of the team has 10hr, 12hr, 16hr and even 20hr tasks. Quite difficult not taking it personal if you don't make the rest correct the same.",2024,agileScam
its_theDoctor,3,"Sounds like your SM has no idea what scrum is.  Blame him, not scrum.",2024,agileScam
GordoMondiola,2,"Yes, I totally blame SMs. I've had really good SMs and can confirm there is nothing wrong with Scrum, just terrible SMs",2024,agileScam
Deleted Account,1,Sounds like your SM just thinks you're more capable?,2024,agileScam
Deleted Account,18,"If the team is letting requirements change every two weeks then something is wrong with the org. If you are allowing the business to have scope creep then someone has to push back. I say this as someone who has worked in agile (LeSS) and waterfall. Devs just want to pull in the work that is ready and code. You need some systems analysts on your team that can take QA, UAT, refinement, scrum master and other admin type stuff off the devs. You do that then agile works a lot better. That’s what we did. Company also got rid off almost all the PM’s, middle management which let the teams have some more say in things. I’ve also been on the side where the meme hits %100 and it sucks. Luckily I landed in a place where all of the PO’s, directors and VP where all engineers at one point.",2024,agileScam
Odd-Confection-6603,10,"That was my thought. People confuse ""adapt to change"" with let the customer add whatever scope creep they want. No agilist would say that you just constantly change the same requirements over and over again lol",2024,agileScam
Rishabh_0507,7,"Hey cmon now, my project management teacher has been hailing agile as second coming of jesus for weeks now",2024,agileScam
jonhinkerton,8,I get so pissed off at points used as a measure of complexity AND a measure of time in the same breath. Pick one.,2024,agileScam
its_theDoctor,0,"Points are not a measurement of time, you've had it explained incorrectly by some idiot.

Points are work. Time is just time. Velocity = work that can be done over time. It's actually incredibly simple but has somehow been made nonsensical by a bunch of dumb businesspeople.",2024,agileScam
evilspyboy,26,"I loathe the estimating by points method. I'll accept hours but only because that actually can be used to highlight items that are too big and signal a problem with the requirement, approach or preconditions. The version where there is an upper limit is dumb and hides problems.

People who learnt agile in a 2 day course without even an exam to be ""certified"" are the root cause of so very much..",2024,agileScam
SlutPuppyNumber9,4,"The reason that we use points instead of hours is that the estimates are meant to gauge complexity and not time.

This is not supposed to be a metric for management to determine deadlines. This is a metric for the team to measure it's own progress and success.",2024,agileScam
Hefty_Narwhal_6445,35,"Unironically true. Maybe Agile was a good idea at some point, but today it’s just a “let’s change everything instead of plan ahead” tool that people who cannot truly comprehend big projects use.",2024,agileScam
stupidshot4,10,"I feel like there are parts of agile that are great. To me, The sprints allow me to break out big projects into the smaller tasks that are necessary in a particular order and to allow for some requirements to change as I go. The backlog grooming and requirements gathering is seemingly nice when done correctly because then any time I get a new story/task it’s been vetted and has the proper requirements. 


These things could be done by not using agile. I just find it easier to explain it to less technical management this way. “I’ve got these 4 smaller tasks to complete Over the next 3 sprints to complete big project. This is what I am committed to. If new priorities come in, these get moved back and so does delivery. Are you on the same page? If I finish tasks early, I will pull these tickets from the backlog as a stretch goal.”  Empowers me to essentially have a say in things.",2024,agileScam
EudenDeew,1,"The sprints thing is SCRUM a “better agile” sold to managers. 

Here’s the actual agile: https://agilemanifesto.org

Now point me where it says make tickets, estimate points, track graphs, etc.",2024,agileScam
Deleted Account,6,"All of this is true but the alternative is EVEN WORSE.

If you don't have feeble attempts at sizing things and more feeble attempts at planning then you quickly devolve into a FIFO system where the highest executive or loudest voice pushes their item up (and all the others down) until your group is spinning its wheels with constant reprioritization AND there is no limit to the amount of work that will be asked of the team.  This is not to say agile removes reprioritization, but I did find it did reduce it via ""we'll out this in sprint XYZ in the future"" and the rarely used ""you'll need to talk to executive XYZ and have them agree to depriotize their item so yours can be addressed"".

By sizing items you can sort of/poorly figure out how much you should take on and then set the limitation of the quantity of work to that level.  If people need something else done, that's an inject which pushes something else out so (theoretically) you should always have roughly the same quantity of work in a given time period.  Injects should also be somewhat rare/difficult to get approved.

Does this work in an ideal manner?  hell no

Are there better ways of doing it? Yep! AI is coming now so congrats! All your jobs are going to be replaced by it.

IBM is cutting 7800 jobs over the next 5 years.  Better pick up a new skillset.

[https://www.cnn.com/2024/01/31/business/ibm-tells-managers-to-come-to-the-office-or-leave-their-jobs/index.html](https://www.cnn.com/2024/01/31/business/ibm-tells-managers-to-come-to-the-office-or-leave-their-jobs/index.html)",2024,agileScam
Oblachko_O,2,"Well, in this article case managers are really out of touch. Glad I am not in America, but the ultimatum ""move closer or be fired"" is nonsense. Why would I, as a potential work candidate, even want to work in IBM if they can implement any bullshit policy? I can understand the fresh blood of recently graduated students, but those are reducing due to the aging situation, so sooner or later nobody will want to work in some conditions. They are really shooting themselves in the leg with this.",2024,agileScam
Deleted Account,1,"The title and main discussion in the article is not what I'm focusing on.  Look at the offhand side note the CEO made about large numbers of employees being replaced by AI.  Just search the article for ""7800"".  It's one sentence in there that stuck out to me when I read it.",2024,agileScam
Oblachko_O,2,"That I saw as well. It is kinda side effect of my point. AI doesn't need to work remotely, don't need to transport, eat or be a human. Perfect worker. But unfortunately for those CEOs, due to AI being not human, productivity is minimal. So they will lose workers AND pretty much will lose free student labor in close times.

Hopefully we will see a shift in the economy due to that and in a better way.",2024,agileScam
Deleted Account,1,"AI/Machine learning will really reduce the need for especially white collar workers.

Many years ago, people had to program in assembly.  It was slow and required a lot of highly skilled workers.  Fast forward a bit and we have Java or C.  Now one programmer can do the same work as 20 assembly language programmers reducing the overall need for programmers.

Now, with AI, a person can literally just type a prompt in plain language of what they need and AI will spit out Java/C code.  All you need a coder to check the output.  One ""AI prompter"" is now doing the work of 20 ""Java/C programmers"".

This can be applied to many other areas of the economy as well.",2024,agileScam
Oblachko_O,1,"I would partially disagree. Yeah, you can generate code for AI, but you still need an AI prompter, which can generate correct requests and you still need developers, who will fix the code and implement it correctly. And still you need guys (probably developers again or some developer prompter), who actually will make proper subtasks. You can't give AI something like ""build a bicycle"", even if AI knows what a bicycle is. 

A lot of code generators existed a long time ago, but they didn't substitute developers. Same with frameworks, libraries, CMS for web development and etc. They get rid of the lowest level due to giving more automation of process and autonomy in implementation of things. AI will be similar. Of course, unless we build AI like in those futuristic sci-fi books and movies. But my guess is that it is too far from robots, which could do all of the basic tasks on a regular basis. I may be wrong though.",2024,agileScam
Deleted Account,1,"Everything you are saying are things that will reduce the need for workers.  Besides, it's not just me saying it.  It's the CEO of IBM.  Pretty sure he is more correct than either of us.",2024,agileScam
FXLRDude,59,It is a delusional scam brought to you by people who needed extra income. Agile has no real world applications.,2024,agileScam
Paragonswift,-1,Agile != scrum.,2024,agileScam
--azuki--,14,I only see facts,2024,agileScam
jxr4,5,They haven't played us for absolute fools. They played management for fools because they are fools,2024,agileScam
Moist_Ad2066,4,"- Requrements change constantly, because most POs can't commit and not in control - Sign of a bad PO or Unrealistic stakeholder
- Estimates are there not for speed but predictability and load v capacity monitoring
- Process statement is true, we agree on that one
- Poker is there so estimation is outlandish, as so we avoid assigning stories to peeps that aren't comfortable
- Tshirt sizing, we agree, but it keeps stakeholders at bay
- Story points represent complexity and time - a precision hipshot of how long should a story take to reach DoD - Lead and cycle times help determine the commitment of work or the quality of requirements
- Burndown is just a vessel for discussion, when did we add more stories, when did story points increase and why - mandatory to communicate upstream to stakeholders, especially if something unforeseen occurs
- Grooming is required only if POs and Developers don't tie down requirements well ør accurately enough, especially if PoCs and Spikes result in situations that significantly impact requirements",2024,agileScam
BOT_Frasier,5,"Scrum masters are bringing negative value, It's been years and I still can't figure out what they are helping with",2024,agileScam
abermea,18,The problem with scrum is that enginieers just want to get shit done but suits want nice graphs and cuantitative metrics so in order to get managers to somewhat play along you have to burocratize everything and defeat the entire purpose of agile.,2024,agileScam
Deleted Account,6,[deleted],2024,agileScam
its_theDoctor,0,"Agile is a bandaid for bad communication? One of the literal principles of agile is communication.

Just because you've had shitty bureaucrats making shitty process up does not mean that is agile.",2024,agileScam
Deleted Account,0,[deleted],2024,agileScam
its_theDoctor,0,"> Individuals and interactions over processes and tools

This is one of like a dozen actual lines from the agile manifesto. It's barely a page long, so you should consider checking it out.  Agile is literally not about forced cadences of anything.",2024,agileScam
savagetwinky,1,"I’ve taken formal agile training, there are processes and roles for regular meetings and discussions even if they aren’t necessary based on what people are working.",2024,agileScam
its_theDoctor,0,"Just because you've taken some training someone called agile training doesn't mean that's what agile is. There isn't even one ""agile"" process so idk how you think there's some fixed set of roles and processes. Maybe you should read the actual agile manifesto? It only takes about 5 minutes https://agilemanifesto.org/",2024,agileScam
savagetwinky,1,Are you suggesting there aren’t prescriptive parts of agile because of a marketing manifesto?,2024,agileScam
its_theDoctor,0,"This wasn't a marketing manifesto, this was the original agile guide. Like, the literal origin of agile. Stuff like scrum, kanban, etc all followed after. I'm not sure what else to tell you.",2024,agileScam
savagetwinky,1,"Aren’t all manifestos on some level a marketed presentation? What’s the point of even having a manifesto if it doesn't lead to reasoned policies and prescriptions where you get a lot of similar variants. Like your arguing semantics to disassociate the many interpretations agile leads to from agile itself. No, they are intertwined.

Without the logical positioning the manifesto is just abstract gibberish.",2024,agileScam
its_theDoctor,1,"It's not abstract gibberish, it's a set of principles to adhere to.  Have you never tried living/working off a set of principles and adapting to situations based on those principles without trying to make a concrete system that specifically outlines every behavior?

Like, genuinely curious beyond just agile if you don't really get how you can operate off principles rather than a process.",2024,agileScam
savagetwinky,1,"Which *leads to implementation.*

You can use the an abstract concept and pretend its distinct and all the agile processes that come from it are just not real agile processes lol.  These sets of principles create processes. How else do you plan on utilizing it otherwise lol.

The manifesto demands more collaboration and iteration with customers scaling projects. Because those are the principles it basically states. How do you get engineers to focus on specific principles? Oh you create processes that facilitate those principles, because not everyone shares those principles or has good judgement when/where they are applicable.

If you can't create actionable processes from principles (see the judicial system for a clear example of principles being encoded in processes)... than its abstract gibberish like Marxism and gender theory.",2024,agileScam
fseed,15,"I'm a full stack dev. If someone needs a points system to measure your productivity, they have no idea what they're doing.

My productivity is measured by whether or not I am meeting the deadlines we all agreed to, based on that specific projects requirements.",2024,agileScam
Deleted Account,2,"The worst frustration I have is sharing responsibilities with a full scrum team who routinely put scrum ahead of requirements. They are happy to delay a tiny change into production by *months* if it means they'd have to ever so slightly break scrum principles, even if they aren't doing anything productive in the meantime.",2024,agileScam
blazarious,1,"The point system is not about measuring productivity, it’s about being able to plan properly and spot potential issues early. Agile works if done right.",2024,agileScam
milanium25,4,"8sp meme, gj, we really appreciate your efforts. Pizza this Friday.",2024,agileScam
C-SWhiskey,4,"My company adopted ""Modified Agile for Hardware Development"" some time ago. I guess the modification is that requirements change every 2 days instead of 2 weeks?

Oh and you have to be very agile while navigating supplier lead times. Maybe it's 4 weeks, maybe it's 15. But we'll plan the sprints for 4. ... What do you mean your work isn't done? You were supposed to start working on the hardware 2 weeks ago!",2024,agileScam
the_old_age_truck,4,"In my 10+ years of product management experience, the only things anyone ever wants to know is how long a thing will take and how much it will cost. You can say “agile” until you are blue in the face but they just want to see a gantt chart",2024,agileScam
its_theDoctor,2,Businesses need to predict how and when they'll make money... What a wild concept.,2024,agileScam
Orwellian1,2,"The *actual fucking job* of upper management. Not the job of producers. Maybe they should take fewer 2hr business lunches with drinks and get a real understanding of what is going on.

Management should stop expecting some magical process will give them all the info they are supposed to work for. If their job can be replaced by a system, they better hope shareholders don't find out.",2024,agileScam
BoomstickGoesBang,2,"Truth. ""When do we get it?"" closely followed by ""How much is this gonna cost us?"". Rest of it is all noise. Whatever methodology you want, really doesn't matter.",2024,agileScam
soupkitchen89,1,"this post just shows me that a lot of the people responding don't understand business.

no, Agile isn't perfect. but these responses are very out of touch.

you can be great at your job, and want to pack yourself away and code until it's done, and pat yourself on the back for a job well executed. we all want to do that. but there are people out there with skill sets wildly different from yours who are going to conferences, meeting people and being extroverted and SELLING the ideas that write your paychecks. going out and doing things many of us would be mortified to do because they're good at it. And those people go out and get the money for the company based on what users say they need. those needs change based on opportunities that arise, or feedback from users, or whatever. the money that writes your checks won't keep coming unless you're building the right thing.

unfortunately it can't just be an engineer at their terminal working for 5 months until they're done. it has to be a dance, and as frustrating as it is, Agile gives us some choreography.",2024,agileScam
Voidrith,4,this but unironically,2024,agileScam
its_theDoctor,4,"Points represent complexity yet you keep measuring how many points fit in a week.

Miles represent distance yet you keep measuring how many miles this car drives in an hour!?

It's almost like velocity, just like in physics, is a compound measurement of distance over time...",2024,agileScam
JeffSergeant,4,"My favourite upper management quote was ""We're spending too much time on planning and testing,  can't we do 'Agile"" instead?""",2024,agileScam
newbstarr,1,I once heard something similar from an actuary put in charge of software tooling. It was not an accident I started moving on that week. Shit was hilarious to watch. Complete nepotism in u.s. finance with an equitypartner,2024,agileScam
Drakesyn,5,"Oh so even real programmers hate this shit? I'm the tech on a galf-dev, half hardware team, and I (and my teammates) have to track my shit in Kanban, *with* the Developers of our automation software. Despite every iota of my work being reactionary and unplanned, and it makes every sprint retro look like we're complete failures with mesas of points increases the whole sprint.

Management, every two weeks, is always so confused. For years.",2024,agileScam
Akerlof,2,"There are two solutions for this conundrum:

1.) Simply put any support tickets you receive during a sprint into the backlog. (Edit: After all, ""[No changes are made that would endanger the Sprint Goal](https://scrumguides.org/scrum-guide.html)"" is right there in the *official* Scrum Guide! Can't be adding work willy nilly outside of sprint planning, your scrum master should back you up on this one.) Then size them, have the product owner prioritize them, and assign them to techs in the next sprint planning meeting. If this doesn't work for some weird reason, maybe Scrum isn't the best way to organize this type of work?

2.) Your ticketing system *is a kanban board*, in the most Deming/Toyota sense: Work items come into the queue and are prioritized, individuals pull those items out of the queue based on the current combination of estimated time to resolve and priority and move them into the appropriate lane, and work them according to the appropriate process. Data on KPIs like throughput, time to resolution, and various types of errors are (fair enough, *presumably are*) automatically collected and made available to management. Therefore, you should just throw a placeholder item in the team queue for incidents worked at the start of the sprint, then update it so it reflects the incident work you've done over the duration of the sprint (i.e. ""Incidents worked, 30 ~~hours~~ points.) Then you can track any planned work separately the same way the devs do, like ""Explaining to infosec, again, why *this* version of Java is secure, we *do* have an appropriate exception for the variance, and would you *please* stop deleting it from our application's servers without notification. And, no, sending an email to another team's shared inbox 30 days before the automation runs (at 2:30pm on the last Friday of the month) without a change record does not count as notification."" (Repeats quarterly, 12 points.)

Once you've moved away from trying to fit the square peg of IT Support into the round hole of Agile Scrum, life will be much easier. Even better, it will give you more time for these ITIL trainings I was talking to your management about....",2024,agileScam
Drakesyn,1,"""No but you see it needs to get done right now"" -every manager my team has ever had. 

The serious response is, in short, we're using Agile because some suit thought it was a great idea, and that is the full amount of thought that went into it. I'm a grunt, I've voiced concerns, quoted the documentation of various use-cases, etc. Now I just fill the tickets and do it. 

I do deeply appreciate the advice, to be clear. Always cool when people genuinely try to help. But corporate gonna corporate.",2024,agileScam
MedonSirius,12,I hate SCUM. It's like Kindergarten where you have to report everyday that you pooped Yesterday and today you will play with Jaqueline with a K,2024,agileScam
IPromisedNoPosts,3,"Nice! ""I pooped yesterday, and will try to poop today. I'm not... blocked 😂""

Seriously, fuck Scrum.",2024,agileScam
cybermage,8,Scrum is antithetical to the Agile Manifesto,2024,agileScam
spamfridge,1,"Scrum isn’t antithetical to Agile; in fact, it’s a subset of Agile methodologies.

It was created to uphold the principles and values of the agile manifesto. 

The issue is that the “scrum” many developers have come to know is not the scrum that was intended. But saying scrum isn’t agile is similar to saying agile isn’t agile",2024,agileScam
guyblade,1,"To be fair, I'm pretty sure the Agile Manifesto is antithetical to concrete implementation. All evidence points that way, at least.",2024,agileScam
antony6274958443,7,God i hate agile,2024,agileScam
Deleted Account,7,This is supposed to be a meme format but in this case is 100% accurate,2024,agileScam
Parry_9000,7,"Industrial engineer here. I focused more on programming and data science/stats, but we all had to learn work organization and all that stuff.

I fucking hate this. All these new methods are just a different kind of whip to force people to work more and harder. Just do normal team based deliveries and let groups sort themselves out with the deadline.",2024,agileScam
Orwellian1,1,"Bureaucracy is a fundamental force of the universe. We know this because it arises in all aspects of society. The moment producers worry more about adhering to a process than producing, you know you have acquired bureaucracy.

I think it is nature's way of slowing our progress.

I'm way outside all of this. My job has zero meetings and I spend less than 5 minutes a day adhering to our internal processes. When I hear all the corpo-speak in these discussions, it sounds exactly like going to the DMV and asking why it will take 30 days to get an appointment for a return visit to have the person I'm talking to spend the 5 mins doing what I need done. Process to support having a process.

When you talk to one of those people socially, just like here, they are all righteously indignant in defending why all the processes are so critical. The reasons break down to ""Otherwise one of us might occasionally exercise discretion incorrectly, causing someone to be annoyed and requiring 30mins extra work.""",2024,agileScam
lunchpadmcfat,7,lol that burn down chart looks exactly like everyone burn down chart I’ve ever had,2024,agileScam
squee_goblin_nabob,7,Just because you use JIRA doesn't mean you're agile. 😂 😂 😂,2024,agileScam
Deleted Account,3,"I would say it's because you're doing agile wrong, but I've never found a company dedicated enough to do it properly with a true scrum master rotation, so fuck it, burn it all down. ",2024,agileScam
Deleted Account,2,"I worked with a scrum master in the past who was without a doubt the most knowledgeable about SCRUM that I've ever seen. Knew it inside and out. Could talk about it all day. 

His team? The worst performing team I've ever worked with. And I'm a consultant who has worked with lots of different teams.",2024,agileScam
sammy-taylor,3,"So I know this meme format is usually joking, but this one feels painfully true.",2024,agileScam
stardewsweetheart,3,I am gonna print this out and send it to all the PMs I've known and loathed :),2024,agileScam
shineypichu,3,"Agile is not the core problem, cargo cult is.",2024,agileScam
guyblade,2,One software team does a good job on a major development. The lead writes a book/blog post/manifesto outlining why they think they did a good job. That technique gets a wacky name and becomes a new agile approach. People adopt the technique and realize that it doesn't work for them because their team isn't made up of the exact set of people working on the exact project as the original exemplar project. [Surprised Pikachu],2024,agileScam
teressapanic,3,We estimate each task in hours and it works. Tell me how bad I am.,2024,agileScam
newbstarr,1,"Same, I’ve heard of the other bullshit but never actually seen it outside a scrum training and that was newby trainer,  most trainers don’t even bother with that dumb shit",2024,agileScam
KalaiProvenheim,3,"Finally, an unironic use of the meme",2024,agileScam
chairfairy,3,"The one valuable thing I've seen come out of scrum was a brief shining moment - maybe the first 4 months that we started doing scrum - when management agreed to set priorities, and to do so in a way that properly acknowledges ""prioritizing these projects means de-prioritizing those projects.""

For a hot minute management took their responsibility seriously, to choose what we do *and don't* focus on. Then a publicly traded company acquired us and said ""ok so we need constant status reports on all of your projects and also all of them are top priority.""",2024,agileScam
Deleted Account,3,I have been suffering through Scrum for 15 years now. It is not humor to me -- it is only pain.,2024,agileScam
IanDresarie,3,"Hey, how did you get those three screenshots from our Jira?",2024,agileScam
thatdevilyouknow,3,"Agile is just entirely not ethical. Devs are not human suggestion boxes and customers are not just issues and stories. Name one positive metric from agile that isn’t determined by something being broken. Improvement and efficiency are nowhere even close to being tracked. If you make something 500x faster good for you- you just fixed an artificial bug you just created to even get recognition for it in the first place. This doesn’t even fit into the normal framework of agile. Burn down charts do exist though and what do those measure? They measure “work” they measure how much your back is against the wall. Tell me where you measure R&D, where you measure how innovative something is, and where on that chart do you promote the ideas that reduce workload because they are so good?",2024,agileScam
ForceGoat,3,"Waterfall is so much nicer to developers. I don't need to talk to anyone, just give me the document. Ideally, there's requirements and example test cases too. Dang, I miss waterfall.",2024,agileScam
stormbringerx82,3,Because everyone is doing Agile with a capital A (the product of “certified scrum masters” and management training companies) instead of understanding the principles that can help you be agile,2024,agileScam
Little-Kangaroo-9383,3,What’s worse than management peddling this shit is when other developers drink the Koolaid and actually care about the process. Legit had teammates who have cared more about the agile process than actually doing meaningful work.,2024,agileScam
tegli4,4,"Like many things, scrum is a tool and you have to use it properly. I, for example, can quiet quit in waterfal, scrum, kanban. That's the result of years of experience and countless companies i have worked for.

/s",2024,agileScam
dafazman,2,"Honestly, waterfall got a lot of actual work done and in the end you really didn't have issues because you did all your DD upfront",2024,agileScam
tegli4,2,I have worked with waterfall only once and it was quite good. But I think it worked well because the manager and the team lead knew what they were doing.,2024,agileScam
Paragonswift,2,Except you got a lot of work done on something that ended up being useless because the real world requirements changed even slightly. Waterfall only works if you are your own client and deliver directly to end users.,2024,agileScam
dafazman,1,"I guess you are right, I have no idea how they managed to build and ship any of the symantec products 20 yrs ago 🤷🏽‍♂️",2024,agileScam
Risc12,5,"https://youtu.be/Bez7wmAsxjE?si=iMyFE_cVVPGgVwNI

Also, Agile and SCRUM are not the same. Read the fucking Agile manifesto and tell me its wrong:
https://agilemanifesto.org/principles.html

Ofcourse your business is doing it wrong but that isn’t the fault of neither Agile or SCRUM.",2024,agileScam
its_theDoctor,3,Thank you. Tons of people mad at a word because some dumb business school grad pretended their bullshit was agile/scrum.,2024,agileScam
guyblade,0,"When people say things like this, it feels very ""no true Scotsman"" to me. There's a very ""the right 'Agile' is that one that works"" vibe.",2024,agileScam
Risc12,1,"I get what you’re saying, and that’s often the case with these arguments, but in this case it’s different. Why?

People are referring to Agile and SCRUM as if they’re the same. They’re saying that SCRUM sucks and therefore no one should work Agile. That is flawed. SCRUM came first and has a specific environment that it is suitable for.

Read the Agile manifesto, it doesn’t require a specific Agile flavor to work, it requires an organization that has trust in its employees. When that isn’t there you can do sprints all you want, but that doesn’t make you Agile. You need to do way more, otherwise you’re just a micromanaged team doing work with biweekly deadlines and that has nothing to do with Agile nor SCRUM.

(SCRUM also assumes that management trusts their employees, if not, guess what, you’re just a micromanaged team doing work with biweekly deadlines :))

The Agile principles can only work if the team is treated like adults that make their own decisions. Those adults also need to actually be in contact with the people using the software.

Building software is hard. Agile won’t make it easy. It just tries to prevent wasting time on building the wrong thing. That’s what makes it faster, not actually the cruft. When doing Agile you should have no bs meetings, its in the manifesto!",2024,agileScam
QuickQuirk,8,"Stop calling scrum 'agile'.

I've had a bee up my bonnet for years about this.

Agile is briliant, and every dev should read the Agile Manifesto. Then they'll be better equiped to recognised shit process masquerading as agile, like scrum and all the other Fake Mainstream Agile.",2024,agileScam
its_theDoctor,0,"Stop calling some random bullshit your managers sold you 'scrum.'

I've had a bee up my bonnet for years about this too.

Scrum can be really really great. I've been on more than a dozen teams at 4 different companies. About 10 claimed to do scrum. About 3 actually did it. Those 3 were in my top 5 favorite teams. The other favorites did something else entirely.  The 7 teams that claimed to do scrum were hit and miss. Some really sucked. But it wasn't scrum's fault just because the teams said they were doing scrum when they weren't.

Agreed completely on agile as a whole tho. It's pretty clear no one really even reads the agile manifesto anymore.",2024,agileScam
QuickQuirk,3,"Happy to be educated on better versions of scrum. I've only experienced horror situations, and have removed it entirely from any team I run.",2024,agileScam
creamyhorror,1,"> Agile is briliant, and every dev should read the Agile Manifesto. Then they'll be better equiped to recognised shit process masquerading as agile, like scrum

I thought so too. But the thing is, (the original) Scrum comes from the same writers of the Agile Manifesto as a process to implement Agile principles. It's weird.",2024,agileScam
QuickQuirk,1,really? That's something I wasn't aware of. I wonder if modern scrum is different from what they originally proposed.,2024,agileScam
spamfridge,2,"The most likely scenario is that the scrum you’re familiar with is a bastardization. This is not to say that all “modern scrum” is. 

Scrum as a philosophy is grounded in giving power to the engineering team, just as agile principles and values dictate.",2024,agileScam
QuickQuirk,1,">Scrum as a philosophy is grounded in giving power to the engineering team,

This is the exact opposite of what I've seen in practice, and is the reason that scrum has such a bad reputation.",2024,agileScam
creamyhorror,1,"I looked it up again. To clarify: 3 of the creators/early implementers of Scrum (which dates to the early '90s) participated in [the writing of the Agile Manifesto](https://en.wikipedia.org/wiki/Agile_software_development#The_Manifesto_for_Agile_Software_Development). There were a total of 17 collaborators in the writing of the Agile Manifesto.

So it's only a partial overlap. Those 3 Scrum pioneers published the core methodology used in Scrum or run orgs training others in the methodology, so it's still their (family of) system(s).

> In 2002, Schwaber with others founded the Scrum Alliance and set up the Certified Scrum accreditation series.[11] Schwaber left the Scrum Alliance in late 2009 and subsequently founded Scrum.org which oversees the parallel Professional Scrum accreditation series.[12] Since 2009, a public document called The Scrum Guide[13] has been published and updated by Schwaber and Sutherland. It has been revised 6 times, with the current version being November 2020.",2024,agileScam
QuickQuirk,1,"Ok, so *some* of the co-signers immediately decided to profit from the suddenly viral manifesto, and set up the accreditation series. I might be cynical here, but... :D",2024,agileScam
atatassault47,6,"Im not even *in* CS, and I knew ""Agile"" was BS because nobody could ever explain it. If you cant tell me what this is, what it does, what its goals are, and how it will achieve them in 20 seconds, you're BSing me.",2024,agileScam
DaikonOk1335,1,"well I cannot think about any topic in CS (since you talk about it) which can be explained in 20 seconds

means CS = bullshit",2024,agileScam
eepboop,1,"Agile is a set of 4 values and 12 principles.

That's it.  

If you're working in a way that fulfils that, congratulations. Agile.",2024,agileScam
Deleted Account,4,[deleted],2024,agileScam
FuckingTree,3,It starts that way but it got way way too real by the end,2024,agileScam
SuburbanGardenNerd,5,Waterfall FTW,2024,agileScam
IgnoringErrors,4,Wagile!,2024,agileScam
QCTeamkill,4,Waluigi!,2024,agileScam
breastcrud,0,🤢,2024,agileScam
Deleted Account,2,I thought these were supposed to be inaccurate,2024,agileScam
drunk_Developer1,4,"That’s the point, it’s an anti-meme",2024,agileScam
Deleted Account,1,Oh.,2024,agileScam
sirkubador,2,"Agile is a religion. Designed to gaslight unhappy developers into thinking the problem is they are doing it wrong. They are not doing the important bits and that it's all bits or nothing. (See how the preachers move the liability for a shitty framework to its believers?)

Not all project work can be split to ""let's paint this button red"", some work takes longer and yet estimation is clearer than some other work.

Saving comments for retrospective is stupid as communication should be flowing at all times. As well as most of the meetings that could be: look at the reports and call a meeting if you have questions.

Reporting results should be automatic. DevOps should produce protecting pipleines for all the proofs of done work. Not a process that makes devs into clicking monkeys...

But one last thing. Agile is not about productivity. It's about management seeing predictable data, however slow the development becomes (and it will).",2024,agileScam
Communism_of_Dave,2,"My team stopped doing agile before I joined, so it’s fun looking at tickets and they just say “Part of Sprint 87 (ends *2 years ago*)",2024,agileScam
Deleted Account,2,"""You're just doing agile wrong""

... is a phrase we say weekly but hear never.",2024,agileScam
icap4283,2,"I recently followed an intro course about SCRUM. Some of the key points we were taught:

* SCRUM focuses on value production
* SCRUM should not be used as a control/evaluation tool by upper management
* apply good sense and use the procedures/tools that make sense in your context. Strictly speaking it won't be SCRUM; if someone complains, point them to the Agile Manifesto",2024,agileScam
Alsciende,2,Honestly there are some good points in this meme.,2024,agileScam
AncientGeek00,2,"Holy crap.  Reading this immediately	reminded me of the old days when incompetent managers would measure developers on the number of lines of code they wrote per day.  It appears many organizations have built incredible amounts of overhead into the development process that is counterproductive .  You get what you measure.  Or even better…be careful what you measure, you just might get it.  All of this seems to be a diversion from actually understanding the business problem, systems design and what makes a good developer.",2024,agileScam
DonSiffo,2,"This is not about ""agile"": this is a criticism of the Scrum framework and some methods and tools. Agile means being adaptable or flexible, not less, not more. All the frameworks out there are just an idea of how they think this should be achieved. And I agree, some of them are horrible canned processes that avoid flexibility at all or even worse, create dysfunction. So please don't hate ""agile"" for something it doesn't mean. Hope everyone who is doing “agile” as intended agrees. 

I can recommend Allen Holub’s blog to learn more about it. Even a lot of the stuff mentioned here is not even part of the scrum framework.",2024,agileScam
-Monoxyd-,2,"The problem is not ""doing agile"", it's ""doing scrum""",2024,agileScam
DrinkRedbuII,2,"What we are having at work is Freestyle Progressive Waterfall. Timeline changes a lot, and requirements change as user wish without prior notice lol, all that while maintaining waterfall SDLC",2024,agileScam
mwax321,2,"Agile was never meant to make dev faster. It was meant to address the ever changing requirements of stakeholders, and show incremental progress towards achieving a goal when the goal post keeps moving. 

Those of you who have actually done a structured waterfall process would painfully know that any changes have to go through change requests. The whole project halts if they are approved and we start the whole process from the beginning. So in response to this, management will tell the stakeholders that they better be absolutely damn sure of the requirements. That means the planning and discovery phase takes a damn year to get out of. None of the devs are doing anything useful the whole time. 

In agile, it's a lot more forgiving.",2024,agileScam
Deleted Account,2,"As with most jokes, there’s truth hidden in the details.",2024,agileScam
aph1ka,2,“With our own twist … “ that’s usually called FRAgile ![gif](emote|free_emotes_pack|cry),2024,agileScam
Joggyogg,2,"I'm a designer, I don't know why I'm here.",2024,agileScam
Fadamaka,2,"My scrum master has it all figured it out. We have a flawless burndown chart. She just moves everything uncompleted from the current sprint to the next one before closing it.

![gif](giphy|d3mlE7uhX8KFgEmY)",2024,agileScam
CdubyaAbides,2,Rich Hickey said it best... Anyone that has worked on software knows it's more of a marathon than it is 100 yard dash but then we figured out how to get around that! We just fire the starting gun every 2 weeks and call it a sprint.,2024,agileScam
Geneziza,2,"This hits close to home. I may not be a dev, but I was pulling double shift as QA/CS. We had meetings where they were interested how much work I did as QA, where for the most things they haven't approved anything to be done, except only small tasks. Which in best case scenario could be tested in half a day including writing test cases. They weren't happy, that I am doing mostly CS work. So I was sacked from the project. There was another person taking over my CS duties. 3 months later they barely worked. Now managment increased the devs hours to handle my duties and actually manage to develop stuff. Who is testing? The PM off course, who does code review with the developer and he wrote apps in college.

The SCRUM master is still in the project, but since I am not, there is no real need do meetings. Because reasons.",2024,agileScam
Low_Explanation_9325,2,Wait until someone bolts safe framework on top and you will have no will to work anymore,2024,agileScam
devlifedotnet,2,"As someone who went from developer to manager, the biggest issue in my experience is senior leadership stating that they want to use agile, and then providing cold hard evidence that they have no idea what that means by asking for absolute certainty, with delivery scope, schedule, and cost all fixed. 

It is my most frustrating weekly conversation with my dev director (who incidentally hasn’t written code in 30 years)…. This year I’ve been asked to provide an estimate for completion with “minimised uncertainty”of a project that’s over 1 year behind the original “T-shirt size of 1 line requirements” based effort calculation that they turned into a schedule and budget. I’ve asked for the funding required to do it properly waterfall and got told “no”

They may as well have just said to me, “make sure the team overinflate their estimates so we can be certain we have an uncompetitive product to take to market“",2024,agileScam
Diligent_Stretch_945,2,"We don’t do estimations, never. Yet we get deadlines based on „marketing needs”",2024,agileScam
TwiceInEveryMoment,2,"My current """"""scrum"""""" team has a conversion table for story points to hours.",2024,agileScam
Boshea241,2,"I remember a University professor I had saying that if people actually read the agile manifesto, then they would realize  how terrible agile is.",2024,agileScam
CanvasFanatic,2,"This, but unironically",2024,agileScam
DeathSprockettDance,2,This spoke to my very soul…,2024,agileScam
VioletChili,2,"I hate the story points as a measure of productivity. Our team was constantly in the top 3 of performing teams, but upper management was dissatisfied with the number of points we were completing per sprint compared to other teams.

The solution was just to take our estimated story points and just double them.",2024,agileScam
Deleted Account,2,"I love great agile but i hate dark agile.

I've seen a toxic scrum master who trashed his whole team after minor process mistake. It is the most toxic team of the project.

I've an other scrum master who didn't protect his team from the stakeholders. It was disastrous.

I know a scrum who managed to put a security area between the team and the stakeholders. He works with inside his team. It is the best team of the project.",2024,agileScam
Deleted Account,2,Where’s the joke?,2024,agileScam
Deleted Account,2,"Problem isn't agile, it's business majors. They know they contribute nothing so have endless meetings to make themselves feel important. Always will with any process. ",2024,agileScam
Debbus72,2,"I'm now starting every meeting by counting how many developers vs non-developers are in it. Doesn't keep me busy for very long and it is depressing, but it still passes the time.",2024,agileScam
Deleted Account,2,"And that's what scrum as written is supposed to get rid of


Absolutely insane how MBAs managed to take something that is literally built on clearing out that stuff and misuse the term into complete oblivion.",2024,agileScam
SenatorCrabHat,2,"Agile is like Communism. So many claim to have done it ""correctly"" but they often are doing waterfall under the guise of Agile.",2024,agileScam
pablochocobarr1,2,"""YET YOU KEEP MEASURING HOW MANY POINTS FIT IN A WEEK"" wtf?! Does this really happen? And how does it work? Do people go like ""yeah we would do 9 points worth of tasks this week""?",2024,agileScam
Wooden-Goal-9073,3,"Yes, it happens. Where I work, the project managers (called *scrum masters*) keep record of points done by sprint, giving an average over time.

So next sprints planning we are trying to see how much points we can/should fit in a sprint based on cumulative average.

It really sucks but higher management is pushing all teams to be ""agile"" because it was cool in 2018.",2024,agileScam
Deleted Account,2,"This isn't a meme, that is literally how I felt",2024,agileScam
yamatos-sideboob,2,That's why my project uses waterfall model,2024,agileScam
Aerodynamic_Soda_Can,2,"""points aren't time"" gets me every time lmao.


""Bro, what's the X axis on that burn down chart you keep complaining about every day during standup? We're not stupid...""",2024,agileScam
UrineArtist,2,"Years ago I asked an Agile trainer in a meeting if there was any empirical evidence Agile improves quality and delivery and their response was ""what does empirical mean?""

  
Actual true story, not a joke.",2024,agileScam
Debbus72,2,"The Scrum-Master is telling management that we are doing great and our productivity is at a all-time-high! Also his bonus at the end of the year depends on it.

Personal note: I miss waterfall...",2024,agileScam
oldfrancis,2,Agile works fine if you manage it properly.,2024,agileScam
DroogleVonBuric,2,"Scrum belongs on the rugby field, not in software teams 

Points belong in sports, not in software teams

Elevation belongs on mountains, not in software teams

Words with more than one meaning belong in dictionaries, not real life 

😂😝😜",2024,agileScam
SnoopDoggyDoggsCat,2,Hard Agree. I miss having a plan…and actual business requirements instead of requirements of the hour.,2024,agileScam
ApartmentHoliday2343,2,"Agile has plenty of useful tools. But I've seen it time and time again abused, obsessed over, and ruin a project just as much I've seen it help a project. Use the tools the project needs to be successful. I've had people avoid doing something because an old employee went 10x over budget on a hardcore agile bender. If the tool fixes the issue, use the tool. If there is a different or better tool to solve the problem, use it. Don't waste time and money just for agile's sake.",2024,agileScam
Deleted Account,2,"Yup, seen many top devs get the boot for taking in much harder tasks but not doing enough points per sprint. The sad part is those devs actually had the most domain knowledge.",2024,agileScam
OxheadGreg123,2,"Easy solution, don't add anything to a sprint, just add it to a new sprint right after the current one is done, let those management people to fuck themselves",2024,agileScam
definitivlyNotACop,2,"Please don't blame your troubles on the framework when it's really poorly execution. In the case of Scrum, get your company educated and ask for a competent scrum master. Scrum is no secret. The Scrum guide is literally only a 13-page read, and if you want a 30 min listening experience.

If what happens at work deviates from the guide, than you are absolutely not fucking doing Scrum.

Each time I hear developers complain about Scrum, it is because it is not executed properly.

Get well trained Scrum Masters and Product Owners who know their shit.

Edit: Corrected 27 to 13 pages for the Scrum guide.",2024,agileScam
AccountNumeroThree,2,"5 points, but it’s going to take me 8 weeks to finish it because instead of incrementing with new stories you just keep adding requirements to this story so I can never actually finish despite me asking you not to do that over and over.",2024,agileScam
Nightblood83,2,"As a product manager during the big switchover from waterfall SDLC, Agile always seemed like it was making shit up to sound smart or fun. There is no reason that the Fibonacci sequence should dictate story points or that we should play poker. 

It is a pretty decent way to get smaller bodies of work done during active passes of design and release.

For anything new or large, waterfall is better.  It doesn't engage heavily technical teams until the business has approved a full project, and it lets everyone discuss what the goals are, how they'll be accomplished, and to get the overall scope basically ironed out. 

There's no solid way to really figure out what the fuck is happening in agile. It's a mess.",2024,agileScam
hambletor,2,"There is no agile, just waterfall with sprints",2024,agileScam
YogurtPanda74,2,I love how this immediately inspires war stories.,2024,agileScam
jgaa_from_north,2,"I once replied to a recruiter at Linkedin that ""Loves Agile/Scrum"" is a red flag.",2024,agileScam
Bartholomew-,2,It's better than a waterfall though...,2024,agileScam
kdvditters,2,When done right agile / scrum / Kanban is extremely beneficial. Problem is only 10% or less Scrum Masters and Product Owners actually know what they are doing.,2024,agileScam
its_theDoctor,3,Agreed wholeheartedly but 10% is honestly generous.,2024,agileScam
adm010,2,"Ive never had a good agile experience, or even a project it would have been appropriate for.  So many clients want agile as they think thats somehow faster or better and it really isnt.  Ive seen too kany entire big projects try to be agile including, we’ll do discovery agile, we’ll requirement capture in agile sprint. Just no, do all the programme setting up, requirements, designs in waterfall, and then maybe do actual dev in agile, but if you know what youre building, then why bother?  If a waterfall plan is properly done, most project can run just fine this way.  Im a PM, dont hate me :)",2024,agileScam
newbstarr,1,"Software as a service, where the product is constantly maintained and updated",2024,agileScam
x_is_for_box,1,"Feel bad for you guys man, Agile/Scrum works extremely well at my company. 

We deliver _predictably_ and that has huge business value, and has been fully recognized by stakeholders. The reliable teams who can deliver as expected (expectations set by the team) are rewarded.
Sometimes time is fixed (deadlines) and scope is cut. However, its also a true skill to be able to collaborate and figure out how we can meet requirements and solve user problems in a slightly different way that is lower effort. 

PMs, EMs, Engineers and Staff Engineers hold each other accountable, so the system cannot be gamed.
Story points are not a complete measure of productivity by any means but throughput does mean _something_.
 
Hope ya’ll can find a good org that makes you happy to be a SWE",2024,agileScam
its_theDoctor,4,"I think the secret sauce behind the meme is that tons of companies just suck. Take most of the angry devs and make their company do waterfall instead of agile and it would probably still be awful.

Scrum has been core to the very best and most fun teams I've ever been on. It's a system that works when actually done correctly.  It's also a really easy buzzword for shitheads to use to justify all kinds of bullshit.",2024,agileScam
x_is_for_box,1,Yeah you’re almost certainly right about that,2024,agileScam
Orwellian1,3,One could guess that your company would likely be successful regardless of what system you used.,2024,agileScam
x_is_for_box,1,"Ya maybe that’s true - it does boil down heavily to engineering/company culture. If i could pick one aspect that I think makes us successful it’s collaboration. That’s cliche maybe but it’s legit. I also mean collab between engineers, product, and design… not just amongst engineers.",2024,agileScam
Orwellian1,1,"I'd wager it is even more simple than that. 

There are two broad categories of career professionals. Time servers, and those who have a material amount of investment in what they are actually doing.

 A workforce of motivated and invested people has high productivity, generally easy to manage because individuals solve their own problems, and good retention. But it is volatile. Productivity relies heavily on ambitious and intelligent personalities. Any workplace drama, market changes, or restructuring can cause a cascade of people leaving or causing internal strife. Also, productivity tends to be spikey. Sometimes productivity is stupendous, other times it is mediocre. Most of the time it is impossible to know *why* one project goes so well and another is a struggle.

The one thing bureaucracy excels at is removing volatility. Tons of overbearing processes wipes out personality led hyper-productivity, but it usually guarantees very predictable mediocre productivity. Corporate America prioritizes consistent metrics and predictable performance far more than a higher net productivity that is more volatile. That attracts time servers and converts rockstars into time servers.",2024,agileScam
DoktorAlliteration,1,I can't even tell if this meme is sarcastic or not. A lot of the points are real in my team...,2024,agileScam
Deleted Account,1,"Well, sure. Lack of proper governance or at least some barebones work charter leads to shenanigans.",2024,agileScam
HappinessFactory,1,I thought this was a meme format tf,2024,agileScam
Eggs_and_Hashing,-1,"All scrums are a scam, but at least put an accurate description on agile",2024,agileScam
ozan123lel,0,Can someone explain all the important terms here to a fresh cs student? What should i know about the bad things of agile and whats better,2024,agileScam
Desert_Trader,0,"I'm kinda sick of this meme.

It's like that commercial that shows someone fucking up using scissors.

Ya, if you fucked up the implementation this bad then, ya, it isnt working for you.

That's your fault, not agiles.

Also if you identify with the 10 reasons to move from REST to Graph then you just have a shitty REST implementation.

It doesn't mean you NEED graph.",2024,agileScam
Huey3434,-2,What's described is not Agile though...,2024,agileScam
yeahmaddd,-1,"Agile frameworks are used by startups to get to an MVP as fast as possible. The MVP is then used to secured venture capital, then you hire enough resources to design and build it properly. The equivalent type of activity in a large enterprise used to happen in the “R&D department”. Agile works, but not in every scenario.",2024,agileScam
virgilreality,-1,"I'm sorry, but this is not anywhere near the fault of Agile...and the infographic borders on Fox News levels of misinformation.

Any process or methodology, when implemented by a clueless management structure without cultural support, is going to look like this.  *Anything* done half-assed is going to look like this.

The real problem is that you need to find a better company to work for, and there aren't many good ones out there.",2024,agileScam
IPromisedNoPosts,1,yOu'Re DoInG iT wRoNg,2024,agileScam
ollollies,-2,"I’m a scrum master and I approve this message. If this is what you’re experiencing when “doing agile”, please stop. ",2024,agileScam
its_theDoctor,0,"Yeah, as someone who has spent a lot of time refining scrum processes, this meme just makes me sad for how not scrum/agile it actually is.",2024,agileScam
NickolaosTheGreek,1,"As a note. Management consulting g is pushing Agile across multiple industries. Healthcare, finance and even mining. It is good to see this is a flawed strategy.",2024,agileScam
razzlesama,1,"I've been a project and product manager for 10+ years. As someone who was trained with traditional project management techniques first, i wholeheartedly agree. Agile is just some buzzwords made to please management.",2024,agileScam
masixx,1,"Tbh planning poker is not a mandatory part of agile.
It's not in the agile manifesto. It's an add-on used and abused following the crazy idea that any task - even fully unknown tasks - can be planned ahead by using arbitrary units of time and complexity. Of course it doesn't work and if the author of this ever believed that he's even a bigger fool than the guy who sold it to him.",2024,agileScam
Itchy_Day_9691,1,"Use your fingers, everyone at the same time. Wtf",2024,agileScam
CrispyCassowary,1,"God, I wish we didn't do agile. Or just do it correctly. The client started wanting stuff that you would only find in the willy Wonka factory",2024,agileScam
Deleted Account,1,I have always argued about points as difficulty for the exact reason quoted. If you say we can do ten points in two weeks then a point is a fucking day and you will never change my mind.,2024,agileScam
bdragon5,1,"SCRUM isn't agile. The agile manifesto is from the perspective of software engineers not from business people. SCRUM is something that helps business people not software engineers. That part alone makes it not agile.

http://agilemanifesto.org

Edit: Especially is SCRUM a tool/process and isn't as important as ""individuals and interactions"". So if the process hinders your developing experience it isn't good and would be removed because of the last principle",2024,agileScam
scataco,1,Now do XP!,2024,agileScam
austerul,1,It's funny......because it's true,2024,agileScam
Ronnyek42,1,"I've been in the business for 20+ years. I've experienced lots of wterfall and lots of agile/scrum. I can honestly say agile and scrum is way way more viable. Its not perfect, and like anythign else... you have to do what works, not worry heavily about some specific methodology.

I currently work in a company that is HEAVILY waterfall, where application of civil/mechancial engineering processes are followed to a t. Nothing gets done. Changes to requirements means going back to the drawing board.

Here is the reality, in software how a thing will be possible or will a thing be possilbe is a real question. Sometimes to answer that question you have to just try building it. Or you can plan it, and completely miss deadlines and end up going back to the drawing board. The number one given in software in my mind is that things can and will change... so rather than working with a super rigid plan, use a methodology that responds better to changes.

I'm not a fan of getting super strict and tryign to apply everything to scrum alliance plans etc. Doing that, is like trying to find places in your software to apply all the gang of four patterns you can, or concluding the only solution to a problem is a gang of four pattern.

These are just tools in the toolbox, not the code you live by.

Anyway, its easy to point out flaws with agile and scrum, but as a seasoned engineer... I can honestly say I've found agile methodologies to be a much better fit than something like waterfall.",2024,agileScam
Traditional_Ice_1205,1,![gif](giphy|RqvQ7W20H8Ovmk3kSJ|downsized),2024,agileScam
Emergency_3808,1,"Usually this kind of meme is a sarcastic joke. However, I feel this iteration is all too real and honest this time.",2024,agileScam
P3chv0gel,1,"Honestly, as someone who doesn't Understand Agile (because Sys Admin/Helpdesk for a company with 4 people in IT, where ""Oh yeah, got a task, do it, done, close ticket"" is the most efficient workflow), the bottom row of pictures really look like black magic signs to me",2024,agileScam
brucebay,1,Am I the only one who actually loves  daily short meetings as a team lead? I mean even the nuclear submarine captains do that to achieve  better results (e.g. Turn the Ship Around!),2024,agileScam
nekomata_58,1,kanban is superior imo.,2024,agileScam
trendmeister,1,Don’t go chasin waterfalls…,2024,agileScam
bless-you-mlud,1,"Agile isn't the scam. **Scrum** is the scam.

It chaps my hide that people go ""Scrum sucks. Scrum is Agile. Therefore Agile sucks."" That's not how that works.",2024,agileScam
ShadowReij,1,Ain't my fault management believes their own bs. So long as they keep the checks rolling.,2024,agileScam
hyperben,1,I've been working in software development for the last 5 years and have yet to understand how/why we use story points as a measure of velocity when we point based on complexity. I also don't get why story points falling in a fibonacci scale when the time taken for each additional point feels exponential.,2024,agileScam
titan_khalil,1,"""Scrum master"" 😅",2024,agileScam
-Shameem-,1,My life summarised by a burndown chart,2024,agileScam
flippakitten,1,Agile was retrofitted by product to hide their mistakes.,2024,agileScam
csandazoltan,1,"I would say proper planning is more important and if done right, the actual work goes so fast that mostly it is shorter than the planning.

and if you don't plan properly, you can multiply the work and even fall into a plan, work, plan, work, plan, start from the begining loop.

I really hate that and I demand a proper plan from clients before I type a single line of code. They must visualize what they want and ask me if possible.

True most clients don't know what they want and get ideas during the process, but that is what the next version is for...",2024,agileScam
phlebface,1,"My thoughts are that scrum/agile only exists to visualise to middle/upper management what time goes to. They don't really understand software and compare it to regular physical elements. They think that when a thing is done, then it's done. If it has bugs or does not fit into new requirements, then the team is incompetent. But from a management perspective how do you set a value to a software investment if you don't know the man hours that has gone/has to go into implementing it. How would you from a financial point of view value it? My point is that the dev team and the rest of the company does not really understand each other.",2024,agileScam
Lighthuro,1,In 2019 I was in a full scrum team. In 2024 this meme is newspeak for me.,2024,agileScam
Bastian00100,1,"Damn right 🤣

Where I work the specifications change once implemented, or even when rolling out, not before. 

I have fun time handling the GANTT..",2024,agileScam
Still_Explorer,1,"Now I understand why MANAGERS / INVESTORS / STAKEHOLDERS love agile.

And now I understand why underpaid and overworked developers are not impressed.",2024,agileScam
osogordo,1,I agree. How can we change the system?,2024,agileScam
thexbin,1,"I was at a company that ""agiled"" so hard that our productivity was 2.2 hours out of 8 per person. That is freaking ridiculous.",2024,agileScam
housebottle,1,">""Points represent complexity, not time""

>YET YOU KEEP MEASURING HOW MANY POINTS FIT IN A WEEK??

too true",2024,agileScam
VariousComment6946,1,"And we also need to hire some folks for management positions who'll be drafting up production processes and throwing wrenches in your work because you're not doing things the way they'd like, all because they're sticking their noses into development without any real experience or understanding of software or testing.",2024,agileScam
GregTheMad,1,"It's pruning. Only pedophiles groom. Does your manager groom? Yeah, i have bad news for you.",2024,agileScam
werewolf7160,1,"I had some experience with a good scrum master ( in a small company) , that was making an amazing job to put term in black and white for the boss.

""you want this ? team what complexity and time scale ? here are the result boss""

""with this demand in priority, this one will not be made in time""

etc

but I have a friend in support where their developer work with ""agile"", and each story make me laugh a good time.

a meeting a week that take half a day and no time planned for bug resolve. some bug were in prod for more than 3 month, but ""not prio"" for management. there was a big prio for end user",2024,agileScam
enilea,1,"The points thing really bothers me, ""ah we have to do about 30 points in a sprint"" but what if a 2 point task takes days because it's time consuming?",2024,agileScam
Deleted Account,1,The older I get the more things like this just become white noise to me. Why can’t I just see a problem in the code and fix it? I bet me doing that would add 1000x better experience than anything you shove down the agile pipeline and not to say new features aren’t great but 2 weeks to solve that? With absolutely 0 requirements.,2024,agileScam
TomRiha,1,This is what happens when agile evangelists obsess about the process and not delivering value to the customer.,2024,agileScam
N00tN00tMummyFlipper,1,"This has happened to me more than once. Engineer on three projects. Each projects has a daily standup. No real agile and run by old pms so stand up is sit down and can last an hour. You literally go from one meeting to another to explain why you haven't had time to complete the work.

I've also seen pms try and have a separate standup for each story.

Agile was meant to benefit engineers by cutting out all this nonsense. 

When did scrum master become a full time role?",2024,agileScam
Dusty_Coder,1,"Its all a scam. Agile and Scrum especially.

""Management systems"" in software is equivalent to ""betting systems"" in vegas.

What you want is management addressing whats before them, not following some dumb system.",2024,agileScam
its_theDoctor,1,It's weird how many companies completely fail to understand or execute any agile methodology and then bemoan the problems with agile in memes like this.,2024,agileScam
za72,1,Agile is just another word for middle unnecessary management complexity,2024,agileScam
Additional_Ad_8131,1," of the rant is the OP not understanding the meaning of words and complaining, that the words sound funny. 
Referee 14
The sad part is that there are actual legit criticisms out there against agile. OP also has one or two actual points in there. Like the first point kinda makes sense, also the complexity points and adding more process, but other word comparisons ruin the post.",2024,agileScam
EmergencyLaugh5063,1,"In an effort to achieve a perfect burndown I've had a manager tell me to not worry about 'WIMP' aka ""Why Isn't Mary Programming"" and it still remains one of the most braindead things I've heard.",2024,agileScam
CLOVIS-AI,1,"To be fair, most of the points brought up in this image are recognized as bad ideas by the creators of Agile. This is NOT what they had in mind when they wrote the manifesto.",2024,agileScam
RudyHuy,1,"This slightly unironically I guess?

I work for a small company that is still in the 80s with the process (as 2 of my ex-coworkers claim). I get a task/project to do. I discuss requirements with customers and my boss. After that, there is barely any supervision over me coding it (the boss just asks if I'm on track). When I get another person on the project we have to deal with communication and team organization ourselves. There's no code review,  code quality is shit - mainly because there's usually much less time to finish the project than it has been planned as other new projects get in the way. But that's okay, I like analyzing spaghetti. I get angry at disorganization a lot though.

But when I got a taste of scrum. Oh boy. One of the ex-coworkers was contracted to help with modifications to his former project. He tried to show us the agile way he learned at his new job. At the poker thing I just had to let my laughter out, I couldn't hold it anymore... Ducking nightmare of meetings, estimations and other shit. I know it's beneficial to the company. But it's counter-beneficial to my mental health. Completely not for me.",2024,agileScam
moonshineTheleocat,1,"I fuckin hate Agile and scrum.

Why do we have so many fuckin meetings about doing work, than time spent doing the fuckin work?!

Why am I getting screamed at about my points per sprint when these fuckin bugs are aging me like soggy bread in a swamp taking nearly an entire sprint to solve one",2024,agileScam
abc_744,1,Requirements are not changing each 2 weeks but new requirements come and need a proper prioritization so the team works on what is needed the most,2024,agileScam
Peacekeep3r,1,"scrum and flat hierarchies give a reason not to pay people better, because there are no real team leaders anymore. 

There are no more opportunities for advancement. After the teams comes the boss.",2024,agileScam
newbstarr,1,"I’ve never seen that, there is always the team lead",2024,agileScam
ShuffleStepTap,1,"Actually, this one I agree with.",2024,agileScam
Master-Ad3747,1,Better than waterfall,2024,agileScam
Ifnerite,1,Still better than waterfall.,2024,agileScam
UltimateInferno,1,I want to make an Extreme Development joke that doesn't sound like I'm simping for a development strategy so I'm just going to leave this comment here that shows off that I know what Extreme Development is.,2024,agileScam
jasl_,1,why is this humour?,2024,agileScam
cthart,1,I saw a great lightning talk given by Florian Haas on this called Fragile Development. The slides are here: https://xahteiwi.eu/pyconse2023/#/,2024,agileScam
Deleted Account,1,"I always read the posts here, but never comment. This one resonates with me.",2024,agileScam
newbstarr,1,"I’ve done scrum for decades and never used points, poker or whatever some of that other bullshit is. It’s just hr estimates and standing your ground. If you meet an inexperienced or incompetent person with some Loveridge go somewhere else, if you are an engineer you make the money and they are bullshit bureaucracy that mean nothing. Exit interview after having the next job to walk into just smile and advise incompetence as you smile at your faster than average pay rise for changing jobs.",2024,agileScam
toomsp,1,Agile is not the problem … Leadership is,2024,agileScam
aresthewolf,1,"Pro scrum mastery = ask Devs how long it'll likely take, add 30% fat, then blame every other department until your Devs are done taking how ever long they need",2024,agileScam
newbstarr,0,"30%, lol. Am peak world industry leader by a long way tech company. Am principal engineer in team, of considerable size. You have to tune it for all engineers sure but usually double but in some cases more. Estimate is in the best possible circumstances of all possible universes and they knew what they were estimating, not bespoke shit which is the norm really, with a wind at their back, caffeine injected directly into their arms and hyper unbroken focus. That same engineer will not have factored in building in tests, testing of any kind, smoke tests etc or refactoring the feature after the first go. This engineer will still be a senior producing production code,not a junior who pushed a pr once then started calling themselves a senior. It’s uncommon to get an engineer who can estimate then not feel pressure to produce in stupid short times and cutting corners to the point they probably don’t even know the reasonable way of doing the job, forget secondary considerations like work life balance.",2024,agileScam
aresthewolf,1,"So people just don't know their engineers capabilities or ask them for quotes broken out into design, build, test, etc based on detailed discovery? I may be a lazy piece of shit product owner but my guys go home on time and I've almost never had to add double the fat",2024,agileScam
newbstarr,1,Ahuh sure buddy,2024,agileScam
romulof,1,"Agile is dead, long live Extreme Go Horse:
https://medium.com/@dekaah/22-axioms-of-the-extreme-go-horse-methodology-xgh-9fa739ab55b4",2024,agileScam
Devatator_,1,"Is this a trend of using this meme minus something? Last one was the ""They played us for absolute fools"" and this one is the ""Statements dreamed by the utterly deranged""",2024,agileScam
gorambrowncoat,1,"I'm not against agile but I have said nr 6 SO many times at work and I wasn't even slightly joking.

Story points are extremely backwards.",2024,agileScam
mucahit17,1,Best post in this format xd,2024,agileScam
TumhareFufaJi,1,I agree. But do you have any better way to measure performance and productivity?,2024,agileScam
zvictord,1,"People are different.

For a while, among other duties, I was managing a 2-dev team in which the two devs couldn’t be more different than each other: 

* one was very “cut-the-bullshit please” and was happy to work on a kanban with card titles only, missing any detail in it. 5 minutes talk and the guy was good to go for the rest of the week.

* the other was specifications obsessed and it felt like he wouldn’t even change a single CSS line that didn’t have an extensive and well documented waterfall-style task defined. I felt I could never be a good enough of a manager for this guy.

Needless to say it was fucking hard to find the balance in this team, but we managed to be functional only because we were small enough to care about each other and try to accommodate each other’s needs.

I wonder how people expect it to work well when they are all just thrown out there and nobody seems to take into consideration their differences in personality and how they organize/structure their tasks.

The problem is not in the training or the methodology chosen. The problem lies in the fact that you will never just fit in in someone else’s ideal way of structuring tasks. 😥",2024,agileScam
nameofanotheruser,1,This crap exists solely to keep non technical personel in IT companies. Our company takes this nonsense step fruther with 'safe' framework. Not single developer cares or understand what is actual value of this crap.,2024,agileScam
T3chm4n1024,1,Well....if it helps our company is trying to do agile development on hardware... let's just say the engineers don't appreciate it. I understand why management wants to do it but I don't understand why they ignore what the people think about it who actually do the job. Maybe there could be a way for something similar (like what some groups are trying here) but it would be sooo much easier if they listened to us instead of trying to force trendy stuff on us (that actually gets worse results than if nothing changed).,2024,agileScam
caksters,1,"This post is talking not about agile but about Scrum.

Scrum and SAFe are one if the worst things that has happened to software engineering in recent times.

agile (notice the lowercase a) is actually great. agile is about frequently engaging with your customer to understand if you are on the right track. you agree to deliver something within short timeframe, you give it to customer to get feedback and then you adjust your next work according to feedback. agile has nothing to do with estimation, sprints, burndown, planning sessions. You can be agile without a planning board and just talking with your customer dorectly. The key is to produce working software, not obsess with process and extensive documentation, and iterate over time according to their feedback. Nothing more, nothing less. Management has weaponised and butchered this to make it as a micromanagement framework

It amazes me how BigScrum have butchered word “Agile” and everyone equates Scrum==Agile",2024,agileScam
keepthepace,1,"The only good thing about agile is the ""fail often, fail early"" strategy. When dealing with clients (sometimes internal clients) who actually do not know what they want, confronting them with the result of their demands is often faster than getting them agree on a reasonable spec.",2024,agileScam
Gaspote,1,Tbh the principles are probably good but the issue is that it supposed that everyone is good faith and willing to work.,2024,agileScam
Shiekra,1,"I've worked at small companies where all the devs know what each other is doing and communicate with each other as required, and it worked seamlessly. There is no need to estimate times, only decide order and get going.

I'm not sure at what point that breaks down, but I've never seen a system that captures that efficiency at scale.",2024,agileScam
Deleted Account,1,"God, I despise agile. Fuck them all to death.",2024,agileScam
LkS86_,1,I hate agile and the quality of almost all software has declined significantly since it became popular. It has turned software engineering from an art and a highly skilled profession into a cheap joke.,2024,agileScam
No-Winter927,1,"Waterfall, kanban, scrum… these are all just shit. People just need to get shit done and reduce process. Process costs efficiency, yes mistakes might be made but as long as the cost is less than the medicine l (process) it doesn’t matter.",2024,agileScam
CaveMacEoin,1,To be fair Scrum isn't actually agile development. It's more like a bunch of small waterfalls. It's the astroturfing of the software development world.,2024,agileScam
Cyber_Kai,1,"My org still does waterfall and takes years to get any project done (5-7). We are trying to move to be more agile (little a). 

My job is to design and build the enterprise architecture and write the strategy. 

What would be some good key points to include and things to alter stay away from to make sure this doesn’t happen to us?",2024,agileScam
DaredewilSK,1,So what do we do instead?,2024,agileScam
MrCane66,1,😂,2024,agileScam
x39-,1,"To note: Agile is just https://agilemanifesto.org/

But to also have it said: requirements do change and nobody will ever know what software is actually required to do, simply because we are humans.


So no, scrum and other bs is just that: bs

But agile itself isn't, and agile ain't scrum",2024,agileScam
HammerTh_1701,1,It took me way too long to realize that scrum is just a very fancy to-do list which may be subject to change depending on what actually got done.,2024,agileScam
Deleted Account,1,Scrum masters are useless,2024,agileScam
pakidara,1,"Management is usually dumb to what we do and what we do cannot be quickly and reliably measured. This bothers some folks in management so they create things like Agile, SCRUM, git, etc . . . to try to measure our output.",2024,agileScam
ToBe27,1,"It is so sad to see this new trend of ranting against agile methods.  
The sad part is that all of the examples given in these posts always clearly show that people simply dont do Scrum (or whatever process they coose) properly. If you break almost every agile principle, no wonder your project crashes.",2024,agileScam
Parkyguy,1,"Agile also doesn’t have any capacity to “revisit” done work that could be improved. 

I don’t know about the rest of you, but I’d review old code I did years ago occasionally and think: “wtf was I thinking? This is awful!”",2024,agileScam
Wyglif,1,That has nothing to do with agile. Make a tech debt story and pull it into a sprint.,2024,agileScam
Nyan-Catto,1,"They discourage underestimation, but when we show them our best estimates, they still want to make it lower.",2024,agileScam
adzo101,1,Reading this while sat in sprint planning 🙃,2024,agileScam
Scraaty84,1,For us Scrum prevented requirements and priorities changing every other day so we could finally focus on a task for more than a few days.,2024,agileScam
Mugiwara_Sora,1,By burn down do you mean smoke weed?,2024,agileScam
JimmyMcTrade,1,I need to go out and learn how Agile works so I can hate it better.,2024,agileScam
takilleitor,1,"Whenever I talk to a scrum/agility lead or agile coach it gives me  a similar vibe of talking to a Catholic priest, for advices of how to improve your marriage.",2024,agileScam
BlokyMose,1,"Points are meant to measure your capacity to work, not to compare productivity between teams.

If a 4-year-old has a capacity of reading 2 words per second, there's no reason to compare the child with an adult with a bigger capacity.

Estimating when the child will complete reading is one of the benefits of Agile, not forcing a child to be an adult.",2024,agileScam
Von__Mackensen,1,"Agile is amazing. Problem is, most people don't understand wtf agile is. 

Agile  coaches trying to make everyone follow scrum like a religion is the least agile thing ever.",2024,agileScam
theitgrunt,1,Agile was never meant to be a way to measure productivity.  Velocity was the worst thing ever for the bean counters,2024,agileScam
pedro_1616,1,"I posted this randomly in my team chat, and now there is a strong discussion between waterfall and agile in our project.

I just thought it was a funny meme",2024,agileScam
FFootyFFacts,1,"Agile is good when project managed properly & brutally (especially brutally)

Problem is it can be a paradise for meeting whores

Last project I did under Agile (On Time Under Budget) we had every man and his dog want to come to the story development, we had 16 people in there when I turned up, I kicked 11 of em out and the bleating was hilarious

My manager wanted me to ""apologise"" to these faint hearts and I flat out told her NO.

Agile is really just Dump Delegate Do, I dumped the flotsam meeting whores, delegated to correct key personnel and got it done

PS: I was programming business applications since 1978 (Ret.) and have seen EVERY methodology

I didn't mind Agile because I was prepared to be brutal, but have mostly preferred a model of 

Declared Business Rules (these are the hard truths especially in regulatory environments)

Frontend prototyping (User Interface is developed with (1/2) main users sitting with me)

I generally find Front Ends take very little time to develop and I don't like Frontends having anything other than format and validation type rules as this then makes them Agile (LOL)

Backend Modulation (All the input from the frontend goes through a rule based backed often broken down into modules for each Business Rule)

My Motto - Solutiones ad inconditus strategie  (Roughly Solutions To Unplanned Strategies)

My Title - Chief Mechanic",2024,agileScam
killbot5000,1,Plans are nothing. Planning is everything.,2024,agileScam
Ok_Appointment8580,1,😂😂😂😂😂,2024,agileScam
ThrowRA_23_for_love,1,Sure thing is somebody is making money of this crap,2024,agileScam
EMI_Black_Ace,1,"To be fair, what's being described is Scrum, a specific implementation of Agile (that I feel violates the Agile Manifesto).",2024,agileScam
Ange1ofD4rkness,1,"Hmmm, sounds like someone is a bad developer. Not sure what the points mean by the way",2024,agileScam
WorldlyDay7590,1,"You'd think that, and you'd be right, and then you start working for a company that's run like the East German DMV, and you'll wish for agile back.",2024,agileScam
shurynoken,1,"Requirements change because we understand the client's needs better 

The goal of Agile is not going faster, it's giving to the client what he doesn't know he needs, instead of giving him what he thinks he wants.

Scrum teams should be fully independent on process they wish to use to their team reality and needs.

It's not really poker, they're are no flushes.

Using points for measuring a team's perf is not an Agile thing, its a bad management thing.

I'm an ex scrum master, the problem with agile and scrum is everyone wants to do it, but no one really does and all for the wrong reasons. Being agile is a mindset, not a framework.

Now that I'm back as a programmer, I stay away from cies that implement strict scrum oragile, because they usually don't.

So the meme is not false, but its not an agile issue.",2024,agileScam
DibblerTB,1,"Agile/scrum/kanban/whatver are different dances. If you want to have a good time, you can bend any dance to fun. If you hate each other you can trip up everyone else, no matter the dance.

Of course there are different things that work for youe case and people, and a new dance can help kickstart things and all that. But it sure aint magic, and it cant fix a broken structure and broken trust.",2024,agileScam
Maleficent_Secret569,1,Two words: thank you.,2024,agileScam
RecoverEmbarrassed21,1,"Lmao the one that really gets me is ""points represent complexity"". Why?? If my plumber told me ""yeah your sink is pretty fucked, I'm estimating the fix is 5 story points (I only use Fibonacci numbers so that I don't have to be as precise 😏)"" I'd get a new plumber.",2024,agileScam
i8noodles,1,"still cant believe we have learnt nothing from history. the more we try to organise something, the more exceptions are created.",2024,agileScam
ArmadilloOk8275,1,Truer statements have never been made,2024,agileScam
Gillemonger,1,"Obviously, points should represent the estimated number of lines of code required. /s",2024,agileScam
Loud_Independent6702,1,Couldn’t agree more it’s a scam used to push teams harder without requirements and effective leadership with decision authority.  Essentially proceses were braking because incompetent leaders couldn’t make decisions or lacked the programmatic understanding of the project.  Agile is a scam and used by corporations to push products through dev and into production and then fix them after the fact without accountability.  It is a horrible waste of money and time.  It promotes elitism with arbitrary terminology sold to businesses that hire under qualified teams to run their projects.  Stop the scam stop agile.,2024,agileScam
KC918273645,1,"The core issue here is that Scrum is not actually agile at all. It's far from it and almost anything but.

Agile works really well. That's also the reason why Scrum doesn't work.",2024,agileScam
DualActiveBridgeLLC,1,"I'm a huge advocate of Scrum, but even I don't understand 'Points represent complexity, not time' concept.  Personally our points are effort + risk.  I guess that is sort of complexity, but there is definitely a time component.  Your sprint is timebound, your velocity is the typical points per sprint.  Points are a proxy of time, they just have risk built into them.",2024,agileScam
dance_rattle_shake,1,"Point 6 is absolutely true. Anyone who pretends complexity pointing is different from time pointing is delusional, bc it collapses back into time.

Managers always want to chase how much complexity fits into 2 weeks, so it's literally just time based pointing but pretending that it's not so that you can miss deadlines more often by blaming the complexity? It's just stupid brain games. Keep points time based with the understanding that the bigger the point value, the more built in time buffer there is.",2024,agileScam
El-Kabongg,1,"any competent project manager will know what the project involves in terms of disciplines and workload, be able to keep tabs on the various moving pieces, and know the order of task completion, who needs what from whom, and when to bring people together for a meeting and who should be at the meeting.

end of story.",2024,agileScam
ceoln,1,"This is tragedy, not humor. T\_T",2024,agileScam
Deleted Account,1,We just started doing agile at my job lmaooo,2024,agileScam
Deleted Account,1,[deleted],2024,agileScam
uniquelyavailable,1,management thinks they have a software engineering degree,2024,agileScam
TheGreatUdolf,2,"""yeah but we have all the performance numbers and we can freely command you do do anything we want and we don't care if you call it bullshit because we know it is good because it was our idea""",2024,agileScam
Deleted Account,1,My place is trying Agile and the most infuriating thing is trying to give estimates on issues nobody has said a word to you about.,2024,agileScam
burger-breath,1,Where's the joke??,2024,agileScam
Deleted Account,1,[deleted],2024,agileScam
akotlya1,1,"The principle might have been fine but management rarely wants to be held accountable by their subordinates. Agile was supposed to provide a mechanism for that but I have literally never seen it happen. Also, I have worked as a data scientist and had managers who tried to apply Agile to my work. Bruh, I have no idea how long it is going to take to figure out how to parameterize and model this abstract complex behavior.

As gooheart's principle states: When a measure becomes a target, it ceases to be a good measure.",2024,agileScam
nx0d_,1,"The first point is more significant and impactful for me, I was once and DevOps engineer, had to deal a lot with requirements change and context switch, I could handle very well for almost 4 years, but burnout said hi to me and fighting it made me retire from the position and the company.",2024,agileScam
leeeeny,1,Fuck story points not meaning how long it’ll take to finish a story,2024,agileScam
zoot_boy,1,"Ah yes, micromanaging as a development approach.  Run.  Run away as fast as you can.",2024,agileScam
Excellent_Chest_5896,1,"I mean. Agile is supposed to be self organizing teams based on real business requirements. 

This process was envisioned to support that. Just doing the process where teams are defined and static and don’t contain everyone needed to get something out end to end is not agile. It’s just waterfall with more steps. I don’t see a fault with the tool, only how it’s used.",2024,agileScam
Anthon95,1,I really wish I could share this in the Teams chat without getting in trouble,2024,agileScam
alekseyrozh,1,"With interactive tools planning tools like [iAmAgile.io](https://iamagile.io/) , it's not a burden. Just a good way to start convesations and get everyone to talk and contribute before jumping into blindly implementing features",2024,agileScam
inbeesee,1,Agile is meant to humanize and assist devs in organizing coding in a business environment; business and coding being two things impossible to fit together for multiple reasons. Management bastardizes it to try and make coding an assembly line of misery.,2024,agileScam
Asleep-Ad7673,1,"Allow me to correct pic from ""Stop doing Agaile"" to ""Stop doing SCRUM"", SCRUM a disfunctionnal framework that flies in the face of everything the Agile Manifesto stood for!",2024,agileScam
MainlyMyself,1,"This comes from the same mindset that just patches into legacy systems for decades after they've been outgrown by demand, rather than taking the time to move to something better, and then wonders why their shiny new UI has all the same problems.",2024,agileScam
DoingItForEli,1,"Being able to adjust the requirements as new shit comes to light is exactly why you use this model. If you know your requirements up front and they're solid without much need for change, use a typical waterfall approach. It's not rocket surgery.",2024,agileScam
Hasagine,1,estimation should take 3 months of effort. actually takes 3 years. pain,2024,agileScam
clauEB,1,"I find complexity useless, if you have to manually make small style changes in 300 HTML/CSS files and it's too complex to automate, the task may be easy as in very low point count but it would take several days to do it properly and have it tested. I like using time better than complexity.

Estimation has the same issues in a water fall and agile, if you've never done it it will be off no matter what. 

2 weeks cycles are useful for something that changes often and quickly, although the pipe is supposed to be full from way before. Infrastructure features won't change for years, no point on the 2 weeks cycles, maybe more check-ins to ensure the work is not getting derailed.",2024,agileScam
dashiellrfaireborne,1,Sounds like your complaint is with Scrum,2024,agileScam
saig22,1,"Simple solution, be agile in how you manage your projects, change and fine tune your processes over time to fit your team and project.",2024,agileScam
bagtf3,1,Got a good chuckle out of me,2024,agileScam
mr_goodbyes,1,"These posts are so infuriating. Like i bought a fishing rod, sit next to.my.lawn woth it for 3 days, and no fishes therefore his rod is shit. Agile works in a context it should. A CI environment, with prod releases every sprint, and competent people, not buzzwordchasers.",2024,agileScam
h2k2k2ksl,1,Let’s go into the studio,2024,agileScam
planktonfun,1,Popularity always wins over logic in a hive mind of fools,2024,agileScam
vmicsull,1,Haha love it,2024,agileScam
Deleted Account,1,"A business rep creates jira stories for me, and most of them are actually more like post-it notes for himself so he can remember to ping me in teams about what he needs done. Still he don't bother me about actually using Jira myself so I'm cool with it.
I'm sure he himself only uses it because someone further up in management got sold on the idea",2024,agileScam
GrizzledFart,1,"WTF are points? We do agile, but it is just to properly prioritize tickets and to make sure that someone always has work to do.",2024,agileScam
InstantCoder,1,"It’s not the methodology that makes it fail, but the people.",2024,agileScam
tidbitsofblah,1,This meme-format doesn't work when you believe it for real,2024,agileScam
Deleted Account,1,"For the love of God, architecture, design and waterfall.",2024,agileScam
Samuel_Go,1,Agile just means being responsive to change. Change happens regardless of what you want. If you're not responding to change and changing your plan then you're making something with no or significantly less value which is exactly why waterfall failed.,2024,agileScam
luke_sewolker,1,"Scrum is agile for people who really, really don't want to do agile. Stop using them as synonyms.",2024,agileScam
bm1000bmb,1,"I once took an Agile class.  The instructor said that you shouldn't plan more than two weeks' ahead. I had just given my manager a month's heads up I was going on vacation. I asked the instructor, doe's that mean we no longer use PERT/CPM? Someone sitting behind me started laughing.",2024,agileScam
PreparationPossible2,1,"To me agile is a way to micromanage developers. What are you planning on doing over the next two weeks, daily stand-ups to check in and a demo at the end to see how much didn't get done and why.",2024,agileScam
Blunderpunk_,1,"I hated agile. As someone who has ADHD, it felt like someone who didn't have ADHD trying to method act someone with ADHD with a shit understanding of it in the workplace.",2024,agileScam
inthemindofadogg,1,"From my experience, management know nothing about programming, yet feel they are qualified to decide how long it will take to program. Iris mind boggling",2024,agileScam
smilingkevin,1,"EVERY single time I've been on an Agile project it's started with a disclaimer of how ""technically it's not EXACTLY Agile, but...""

I swear, it's like communism -  maybe it would work but no one ever seems to actually implement it purely enough, so we may never know.",2024,agileScam
JulesVernerator,1,They played us like a damn FIDDLE!!,2024,agileScam
khalamar,1,"My boss, an AGILE ""specialist"", asked me how long it would take to implement some feature. I said ""I'm thinking 2 weeks"". He responded, ""That won't  work"" - which we all knew meant ""I've already talked to the customer and promised this for tomorrow morning"". So I said, ""Right, now I'm thinking 3 weeks"".

He was an dumb ass. I was a smart ass.

I eventually quit.",2024,agileScam
Deleted Account,1,"Always felt that if your Scrum Master is not always riding the edge of being fired, then the Agile Team is likely not doing Agile. The pressure from management in 99% of companies is ridiculous, focusing on time and micromanaging, not on deliverables.",2024,agileScam
huldagd,1,"So what works then? First I experienced waterfall, then agile and now there is nothing, nada. We just do things whichever way with a few agile terms thrown in here and there.",2024,agileScam
Straight-Grass-9218,1,If I might ask... Wth is up with the T-shirt labeling convention? I just thought my company was cheap and repurposing software when I first started.,2024,agileScam
pyius,1,"I feel like people threw out the original agile manifesto long ago.

* People over process
* Working software over crazy documentation
* Collaboration over contracts
* Adaption over strict plans

Etc.

People over process is the very first one. And yet process always seems to be king in scrum.",2024,agileScam
dry-considerations,1,You'd put too many Devs out of work.  Most of them are too young to have done Spiral or Waterfall.,2024,agileScam
Drwildy,1,"My first job in 2020 was using waterfall and it was amazing. We worked together super well, the work was always completed on time and plenty of time for testing. Our production bug ratio was extremely low. 

Then they switched and it felt so bad.",2024,agileScam
ObjectiveAide9552,1,"It’s not the process, it’s the person/manager/lead running the process wrongly or lazily that’s the problem",2024,agileScam
Bob_the_peasant,1,"Bad management that bastardize agile is not agile.   But it’s the norm, so 🤷‍♂️ 

I’ve seen a company get a real agile expert that wasn’t afraid of the C-suite, let alone the VPs and directors.  Total 180 after she called them out on all their bullshit and held them accountable to their roles",2024,agileScam
Deleted Account,1,Having any requirements at all is not how Agile works.,2024,agileScam
Leeman727,1,"Preach! Where I last worked, SM were seen as pseudo-fast-track-to-manager and had no oversight on the actual metrics they claimed were tracking... I usually ended up writing requirements/managing stories myself and sometimes the SM would actually show up to the daily Standup meeting. I have had good SM's though but it's far and few between.",2024,agileScam
Deleted Account,1,This is so on point,2024,agileScam
DeliciousWhales,1,"The thing I hate most about agile is the absurd terminology. Just say functional requirement or product feature. Because that’s what they actually are. They are not “stories”. That’s not what the word story means.

It’s as bad as other stupid corporate jargon like “take it offline” or “revert”. That’s not what those words mean either.",2024,agileScam
Bla61670,1,"TL;DR
Project managing takes into consideration more parts that are directly involved. From stakeholders to clients to devs to the end users, if people were simpler, then the complexity would be lower. Unfortunately (or fortunately 😉 ), people come with all shapes and colors, and with their own needs and likes.



Agile exists not to help developers, unfortunately. But to create a consistent model to follow for clients and/or users. The ever growing complexity is inherited by the client's requests and stakeholders' objectives as well as feedback from users.

Also, only fools will go for pure agile. A sane project manager is going to find a good middle ground between  agile and cascade.

Scrum is about time and resource management, which is very a very different problem.

As per ""it's all planning and no coding"" argument, it's wrong only because it doesn't take into consideration everything else aside pure functionality. That ""planning"" phase is the one to generate the big revenue.

People don't know what they want, but they know precisely what they like. So you sell what people like. But you need planning for that. Otherwise, it'll be a failure. Planning done right takes into account also the devs which are one the parts mentioned above.

Funny meme, though, hahah",2024,agileScam
bondolin251,1,This just as my entire group got done being trained,2024,agileScam
brockisawesome,1,"I've finally hit the point that i make my TL go to the scrums on my behalf while I do the all the actual work. so really i could care less what they do, leave me out of it",2024,agileScam
hanyacker,1,"I always despised the formal trappings of agile…the fake rah rah team spirit, the wasted time in stand-ups, the hatred of ‘silos’ so that no one gets to finish anything, and especially the sneering disdain for producing a detailed design for a complex implementation. That said, I do like a lot of the agile tools, especially the Atlassian code review tool, Crucible.",2024,agileScam
Botahamec,1,Agile is fine. Scrum is an atrocity.,2024,agileScam
perteau,1,"The best instruction I’ve ever received from my boss, changed forever how I see all these processes, doesn’t matter if Agile, Scrum, Frozen-Waterfall, etc.  

Privately, my boss said: 
“You can use whatever points-system you want: story-points, fairy-points, pixie-points, I don’t care: whatever works between you and your team.  As long as you report to me in hours or dollars, because that is how I must report to the executives of this company.“

Result: I started by using “story-points” estimates from devs, then tracked how long it actually took to deliver across the finish line.  Turns out that “story-points” are STRONGLY correlated to actual time.  

Next phase: devs just gave me their estimates in hours/days, then I tracked actuals.  Results: dev estimates multiplied by 3.0, on average.  

Best results: devs estimate is hours/days per activity, and DESIGN what makes sense to build on a weekly basis. 

Here’s what we discovered to be the MONEY SHOT:  offer THREE DIFFERENT EXECUTION OPTIONS (that my team deemed doable) to mgmt/PO, and let them pick ONE.  Worked awesome.  

Requirements change? 
No problemo: we re-do design+analysis, then present THREE OPTIONS again, let them choose.  BTW: one option is always “the previous plan we agreed to”, just in case they don’t like where the new (later) delivery-dates just landed.  

Secret sauce: express each of those “three options” in terms of: TIIME, COST, and RISK.  Apparently that is the info the mgmt/execs need to make their decisions. Give them that info, and you’ll have the shortest meetings ever, with them.",2024,agileScam
AdreKiseque,1,What is Agile,2024,agileScam
BrianKronberg,1,"Agile is for the owner of the development  company. It isn’t for anyone planning or writing code. It is definitely not for the customer as they get suckered into paying for an incomplete product.

The value is you can sell an unfinished product. That is it.",2024,agileScam
IcharrisTheAI,1,"So I used to be my teams scrum manager (before team got axed; absolutely unrelated to my scrum management skills I swear 😳) and I found it wasn’t bad. The trick was you need a super lazy scrum manager (me).

Haves:
- email you if you aren’t getting your JIRA tickets updated regularly (ideally quick comment on latest status of any in progress tickets at EOD).
- 15 minute standup where each engineer gets a minute to say what they are working on and if they need any help
- 15 minutes of opens if any. Usually used for any open pull requests that need some action taken.
- close out the sprint every two weeks and make new sprint.
- one per sprint 1 hour planning meeting which is actually mostly for interaction with other teams (communicate if we need help or if they need anything).

Does not have:
- no burn down, no retrospective, no story points.
- no basically anything else agile that I’m forgetting.

I feel this process I call “minimally agile” works really well. I never felt it was a nuisance both during my time as scrum manger and prior to it. Just provided a good venue for communication and a dedicated house keeper for the JIRA/sprints.

Any more than this would get hella annoying though… especially story points. I have always detested the idea of those…",2024,agileScam
Either-Acanthaceae15,1,"I joined DevOps because I like to make things easier and faster for devs but almost nothing I learned is applied or just sabotaged by management because no one considers quality as a real requirement. Hell yeah just resolve the ticket so that stats are better.
In real world DevOps means ""guy who builds software""",2024,agileScam
Popular-Lock4401,1,"In larger organizations, it all works like this my friends:  Upper echelon (CEO, CFO) push the Project Management Office to plan out the fiscal year based on high level profit/expense/stock price goals.  Then the Engineering team gets dragged through endless 'what ifs' and estimation circle jerks to help the flailing and fairly useless Product Team come up with their 'plans' for the year.   Some circular fire-squading erupts at the VP level over both a) the size of the estimates and b) the resource choke points. Then they (the C-levels, and their sycophant VPs) dump the whole mess onto various engineering queues and teams and adjourn to endless wank-fest meetings that NEVER result in actual lines of code being written.   

Then the 'agile development' begins ... with Product owners who don't write stories but rather, script nice looking powerpoints to share with various partners and execs ... leaving the engineering teams to write their own stories and deliver using 'Scrum' ... 

Sometime later, the C-level execs re-gather and talk about how to re-organize engineering to get more out of them.  LOL.  Yes, it is madness.",2024,agileScam
cryptoislife_k,1,"the great agile shaman delusion, god it is so fucking trash",2024,agileScam
Able_Wheel_1965,1,"I was recently on a project, where if the team could only perform 50 points of work per Sprint, then that is all that was given, even if there was a dev with no assigned work!   This was repeated many times, brought up by Stakeholders at the end of the sprint.",2024,agileScam
Deleted Account,1,w h a t,2024,agileScam
dailycnn,1,Did a Scrumaster develop this as backlog grooming?,2024,agileScam
JohnBooty,1091,"> Compared to a straw-man practice called “Waterfall”,

Uh.

That's no strawman. I've been in the industry for 20 years and that was the dominant paradigm *forever*, and many teams *still* work that way.

It never works. You are *nearly always* behind, because there is *nearly always* ""found work"" (unknowns, like bugs in other peoples' code you need to work around, etc) that disrupts the waterfall. And even when that doesn't happen, engineers are bad at estimating time, so you screw yourself that way.

When you finally complete the project, way over your time budget, it looks like you simply ""blew a deadline"" because there's no record of all that extra work you did.

So you're always ""late"" and you always feel like shit, and your team (and the software engineering profession in general) always looks bad.

The only way to ""win"" at waterfall is to basically take your best estimates and absolutely pad the living hell out of them. Add 50% or 100% or even 150% so you have time to deal with emergent work or simply fuck off. And even then you look like an asshole who estimated a seemingly ridiculous amount of time for a seemingly ridiculous task.

> Instead of working on actual, long-term projects that a person could get excited about, they’re relegated to working on atomized, feature-level “user stories” and often disallowed to work on improvements that can’t be related to short-term, immediate business needs (often delivered from on-high). This misguided but common variant of Agile eliminates the concept of ownership and treats programmers as interchangeable, commoditized components.

Only if you do it wrong.

And yes, it's often done wrong.

It doesn't have to be that way. The solution is blindingly obvious: let the engineers themselves be a part of the process to design the stories.

On *good* teams, that's what your sprint planning meeting is for: in conjunction with the team leader (scrum master) the team decides how to achieve their goals, breaks that work up into chunks  (a.k.a. ""stories"") and so forth. Those sprint planning sessions are very productive and valuable as the team can discuss implementation approaches, surface objections and concerns, etc. Story complexity is ranked based on a point system relative to stories that have been completed in the past, which (though it sounds silly) works way better than asking engineers to estimate time.

You are not supposed to do any work outside of a story. If new work emerges (""the CSS code the designers sent us is broken in IE, so we're going to have to redo a bunch of our front-end work"") that goes into a new story. Effectively, this gives you credit for the extra work you're doing... you feel good, and management feels good too because even if they don't appreciate the delays at least they can see exactly where the time (and their money) is going.

On *bad* teams, your manager does all of that stuff and spoon-feeds you tasks like momma bird spitting food into baby bird's mouth, and it's just as bad as the article describes.

",2018,Why “Agile” and especially Scrum are terrible
SlapNuts007,367,"This happens in ""agile"" environments, too, when management ignores the rules and just treats sprinting as ""fast waterfall"".",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,186,"> This happens in ""agile"" environments, too, when management ignores the rules and just treats sprinting as ""fast waterfall"".

That's a good name for it, ""fast waterfall.""

",2018,Why “Agile” and especially Scrum are terrible
salvadorwii,92,"Agile waterfall, also known as avalanche",2018,Why “Agile” and especially Scrum are terrible
comp-sci-fi,1,slurry,2018,Why “Agile” and especially Scrum are terrible
Gotebe,1,"Also: ""stampedo"".",2018,Why “Agile” and especially Scrum are terrible
dragonalighted,73,We've always called it 'Fragile',2018,Why “Agile” and especially Scrum are terrible
shibuyamizou,3,"Same here, but I phrase it as Fr[agile]. I should make stickers.",2018,Why “Agile” and especially Scrum are terrible
mikemol,98,"I've heard it called ""scrummerfall"".",2018,Why “Agile” and especially Scrum are terrible
RangerPretzel,5,"As well as ""Agilefall"". Although maybe we should start calling it ""AgileFAIL"".",2018,Why “Agile” and especially Scrum are terrible
TheGRS,1,I prefer Wagile,2018,Why “Agile” and especially Scrum are terrible
tso,1,Scrummfail?,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,30,[deleted],2018,Why “Agile” and especially Scrum are terrible
nerdyhandle,10,"We call it ""Agile with Discipline""


I fucking hate it. send help pls.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,19,[deleted],2018,Why “Agile” and especially Scrum are terrible
JeffMo,8,"> The suits with MBAs

We may need a new methodology specifically prohibiting this.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,17,[deleted],2018,Why “Agile” and especially Scrum are terrible
JeffMo,9,I meant where you go directly to prohibiting suits with MBAs from doing *anything*. But maybe I'm just whooshing on the joke.,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,16,[deleted],2018,Why “Agile” and especially Scrum are terrible
JeffMo,2,"Yeah, I agree with that. I worked for [fairly well-known language learning company] for a number of years. They implemented Agile/Scrum not too long after I started there; I guess I was about age 40.

They had Jeff Sutherland come in to give training, and there was all this talk about how adopting Scrum was going to cause reform and reorganization and all that, throughout the organization. We had a couple of days of training and discussion. I asked precisely one question during the whole thing, which was about how all that reform was going to happen, and whether that is dependent on buy-in from upper management. My hypothesis then, and now, over a decade later, is that without upper management standing behind it, it doesn't matter a bit what particular methodology you *claim* to be using.

And that goes in both directions. If your management ""believes"" the estimates and expertise coming out of technical developers and development management staff, then a lot of borderline, half-assed, or inane processes can appear to work. And if your management doesn't trust what the technical people are saying, the best process ever isn't going to cure that.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,[deleted],2018,Why “Agile” and especially Scrum are terrible
JeffMo,2,"Yeah, that sounds like a non-starter. I suppose it would still be possible to argue that ""in our division"" you aren't committed to delivering the product in time to be sold by ""another division.""

However, I can only guess that even bringing that up is unlikely to be received well. And that goes back to whether or not management is willing to actually be bound by anything (including being true to their words), or whether they just use methodologies, deadlines, and all the rest as clubs to beat people with.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,[deleted],2018,Why “Agile” and especially Scrum are terrible
JeffMo,2,"I think perhaps the difference in my experience is that I've occasionally worked with upper management folks who actually know how to build software. But yeah, an awful lot of them are idiot assholes.",2018,Why “Agile” and especially Scrum are terrible
Gotebe,2,"They will re-spawn with a different moniker.

It's a people problem.",2018,Why “Agile” and especially Scrum are terrible
master5o1,2,wagile.,2018,Why “Agile” and especially Scrum are terrible
ISvengali,1,"Nice.  I called it agile embedded waterfall, but I like all these.  ",2018,Why “Agile” and especially Scrum are terrible
NullAccountNameField,1,Fragile,2018,Why “Agile” and especially Scrum are terrible
Tyler_Zoro,1,"Failing in time-lapse!
",2018,Why “Agile” and especially Scrum are terrible
Seltsam,1,Don't forget Wagile.,2018,Why “Agile” and especially Scrum are terrible
AuraTummyache,37,Almost every “agile” team I’ve been on has devolved into “waterfall with a Kanban board and a day of meetings per week”.,2018,Why “Agile” and especially Scrum are terrible
enrosque,6,Yeah. The first sign that things are going to go poorly is when you learn management will attend your standup; it's just a daily status meeting. ,2018,Why “Agile” and especially Scrum are terrible
MB1211,1,That just shows how bad people are at describing what they want. It's not a problem with the process it's a problem with requirements gathering. Agile serves to reduce the risk of wasting too much effort of stuff we don't need. The better you get at clarifying requirements the more valuable you are,2018,Why “Agile” and especially Scrum are terrible
tso,1,"Humans will always be ""crap"" at describing what they want, unless they are talking to peers in the same field. This simply because we do not know the specialized language of the field we are describing our wants to.

whenever i hear Ford's comment about about faster horses quoted, what i hear is not a complaint about backwards people but a problem of expressing wants. People would, lacking a understanding of the specialized language of cars, use an analogy involving a carriage and a fast horse.

Similarly, the XKCD comic about the bug that makes the CPU overheat and holding the space bar to me is not about a stupid user. It is about a user that has found a solution to a problem that is no longer working. The proper response would be to not dismiss said user as stupid but to see that an alternative way to implement that solution would be via a timer on key held.

Similarly, when looking at an old system, don't just dismiss some part of it because it seems obsolete or weirdly done. Ask yourself what it may have been trying to solve back when implemented. When done, it may well reveal that said part still have a function to perform. All to often replacements gets developed without such questions asked, and then the developers have to scramble to reimplement what they thought were obsolete.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,Stop working for shitty companies lol,2018,Why “Agile” and especially Scrum are terrible
AuraTummyache,5,"It's not the companies I work for, it's the products we're building.

I do mostly contract work for other companies, and they don't want an MVP, they just want the whole app feature complete by a specified date.

Agile fits really well when you work for Uber or Facebook and the apps are a living breathing entity, but makes no sense when you have a clearly defined end goal.  It will always be waterfall with a Kanban board.

Most clients won't accept anything other than the finished product, so you just break the app down into sprint-long chunks and waterfall it like normal.  The only thing Agile does in these cases is waste 20% of your time on backlog grooming, planning, retrospectives, and drawn out parking lots.

Also, I firmly believe that anyone who volunteers to be called a ""Scrum Master"", is the kind of person who loves to hear themselves talk.  I've been on quite a few Agile teams, and the meetings are always excessively long.",2018,Why “Agile” and especially Scrum are terrible
tso,3,"Yeah. Unless you are going to do something \*aaS, agile seems like it will cause more problems than it solves.

Frankly we seem to be in another era of architecture astronauts, this time centered around ""cloud"".

Meaning that people are so focused on thinking and developing like Facebook or Google that they simply forget that most code is still deployed locally on individual computers.

And those computers, and their owners/users, do not take it well to having things change in a machinegun fashion under their proverbial feet.

Installed software have a whole different update cadence to ""webapps"", and most of its users like it that way.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,"I work exclusively contracts and research proposals/executions. Most of my work is algorithm research and development where software is a consequence, not the end product, of the project, and most of our work has 6 month-1 year timeline. I have served primarily as a software architect and developer, research scientist, and various types of analyst, and agile has served us well in all these respects. Before this, I was also a standard application developer, primarily concerning desktop software, and functioned as a software engineer. So I've been in the original and expanded agile applicable environments.

Agile is ideal for projects that have a clearly defined goal, because it allows you to show incremental progress to your customer and ensure that the clearly defined goal is still defined as it was when you started, and that you are adequately meeting that goal. When, inevitably, you misunderstood or implemented something in way they had not envisioned, the course correction is a matter of hours or days rather than weeks or months. 

You don't deliver MVPs, you interact with your customer for a brief meeting at the end of every sprint in a review and show them the new features and aspects of your project that have been added and how and why they facilitate their end goal. If you aren't building a product that can be sufficiently broken down into demonstrably complete components, then you have bad software architecture. It's your PMs responsibility to relay why and how agile is important to building the quality product your customer wants, and why their involvement is critical and desired to your and their success.

If your meetings are too long, your SM is also doing a poor job, and on a sufficiently sized team, the SM should change every sprint cycle to ensure people take turns regulating the team within the bounds of the process. The SM should speak *the least* their entire job is to keep the team relaying *only* the critical information in meetings so that work can resume.

Like most people that loathe agile, your environment is not executing it correctly, even to the core tenants of the manifesto, particularly customer collaboration over contract negotiation.
",2018,Why “Agile” and especially Scrum are terrible
AuraTummyache,4,"I'll agree that the concept of a weekly or biweekly demo is a net positive hands down.  You don't NEED Agile in order to have a demo though.

Also while Agile may facilitate change in a more friendly way, it also necessitates change more frequently.  The amount of times I've had to awkwardly break apart a feature just to fit it into a sprint or make it less than the arbitrarily maximum amount of ""points"" is ridiculous.  So I'm constantly having to do things the wrong way and then fix them when I have spare points later down the line.  This is not only a side-effect of Agile, it's the stated intention.  You are *required* to fulfill the sprint's goals as stated without thinking about how they affect future features.

Hell, Agile doesn't even corner the market on that, because if I'm just shipping continuous builds to the client, I can get feedback immediately instead of waiting for the demo at the end of the sprint.  Most clients seem really receptive to getting builds with new features right away.

The whole point of Agile, as sold by every zealot I've ever met, is that you end up with a shippable product at the end of every sprint and iterate continuously on that product.  When the client doesn't give a shit about anything before Sprint 40, then what is the point of Agile?

Long meetings are also just part of the package.  By every metric I can find, the amount of time it takes to plan a sprint is 2 hours for every 1 week.  So if you have a 2 week sprint you should waste half a work day in a single meeting.  If you count retrospectives, stand-ups that invariably drag on, demos, etc. then you're talking WEEKS spent in meetings over the course of a project.

Maybe your jam is different, but on my projects I have hard deadlines.  When someone just hands me designs and says ""make this in 3 months"", I might have a little bit of crunch time at the end to make some last minute changes.  With Agile, I basically spend the last 3 sprints sleepless because we've spent 20% of our time in fucking meetings and I have to refactor a bunch of hacky code we put in because ""it couldn't fit in one sprint"".",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,">Also while Agile may facilitate change in a more friendly way, it also necessitates change more frequently. 

This is patently untrue, and I think this further reinforces my point that you are experiencing bad ""corporate"" agile practices.

>The amount of times I've had to awkwardly break apart a feature just to fit it into a sprint or make it less than the arbitrarily maximum amount of ""points"" is ridiculous.

Your sprints are too short, your point system is bad, you aren't measuring your velocity correctly, or you have bad architecture. If you're having to break your product to meet agile then you're not doing agile at all.

>So I'm constantly having to do things the wrong way and then fix them when I have spare points later down the line. This is not only a side-effect of Agile, it's the stated intention. You are required to fulfill the sprint's goals as stated without thinking about how they affect future features.

This is the opposite of the stated intention. If you're not thinking about how your sprint plans or architecture are going to affect, adapt to, or evolve with new features (planned or unplanned) then you're not doing agile, you're, again, utilizing a terrible architecture, or you don't actually understand what you're building.

> When the client doesn't give a shit about anything before Sprint 40, then what is the point of Agile?

If you understand your product, you should be able to convey to your customer that they should give a shit before 40, and that it would help you build them a better quality product if they did.

>By every metric I can find, the amount of time it takes to plan a sprint is 2 hours for every 1 week.

On every team I've worked on, from 3-7 members, we have allocated 4-5 hours TOTAL for Planning, Review, and Retro. I work in DoD which is slowly adopting agile, so I'm familiar with the waterfall methodology and can tell you, for sure, these meetings are much more fruitful than the previous process. If you're stand up isn't 5-10 minutes, or your retro and planning are excessive, then your SM isn't doing their job. If your sprint review is longer than 30mins-hour depending on the amount that needs to be demod, then your PM isn't doing their job. The customer should know what to expect in this time and ready to see it in action.

>Maybe your jam is different, but on my projects I have hard deadlines.

Mine absolutely do, usually very short, and usually involve *me* or my team having to plan the design, deliverables, and everything else from the ground up. What we usually get is, ""We want this."" And have to pry the meaning of *this* from our customers so that we can formulate and deliver a technical solution.

>I might have a little bit of crunch time at the end to make some last minute changes. 

This shouldn't happen in agile or with good software design and implementation. Part of agile is setting and managing expectations of your customer so that they know when to provide feedback and how you're going to respond to it. You shouldn't ever have to make last minute changes, and if they demand them you charge them and adjust the timeline appropriately.

>I have to refactor a bunch of hacky code we put in because ""it couldn't fit in one sprint"".

I'm repeating myself at this point. If this is a situation you ended up in, then you have bad architecture or design practices. Never break your code to ""make it work"" that's the antithesis of agile principles. If you think there is improvement that could be made to your process, or you are not able to meet expectations at quality you are satisfied with, I'd be happy to consult under NDA. If you are satisfied, well good luck to you.",2018,Why “Agile” and especially Scrum are terrible
aNoob7000,0,"Lol..very true!

 Don't forget the dreaded burn down chart in Version1.",2018,Why “Agile” and especially Scrum are terrible
_blahblah_2342342,14,"I used to work at this company where they came up with their ""version"" of agile.  It consisted of writing all the requirements up front, then iterating through all the stories and releasing them at then end.  I looked at them and said, ""That's not really how it's supposed to be done.""  They argued that it's their version, and they do ""Agile"" this way.  They then got upset when I wouldn't sign the process document to lend it credence. ",2018,Why “Agile” and especially Scrum are terrible
GhostBond,37,"All of the ""waterfall"" complaints are my complaints about Agile as well. These are not solved by Agile they're just done on a faster cycle with agile.

",2018,Why “Agile” and especially Scrum are terrible
Tyler_Zoro,53,"But that's why agile works, it's not that it's a perfect paradigm, it's the fact that you get to react to change (hence the name). It's more flexible, but the methodology doesn't prevent bad managers from being bad. It just provides them the *opportunity* to be good by reacting to what comes up.
",2018,Why “Agile” and especially Scrum are terrible
BlueShellOP,30,"> but the methodology doesn't prevent bad managers from being bad.

I feel like a giant 10' sign with this needs to be placed over the front door of every fucking software company. Because holy shit is this always the problem.",2018,Why “Agile” and especially Scrum are terrible
pda_22,1,Maybe we can just get rid of all the managers and all the developers can sit in the corner and do whatever they want to do.  Then they develop pretty things that they can put on the shelf and admire and watch no one use.,2018,Why “Agile” and especially Scrum are terrible
GhostBond,4,"Agile inherently provides that lends itself to bad management - micromanaging, trying to wedge all tasks into strictly defined 8 hour chunks or 2 week chunks, etc.  

A bad manager could force their team to do this before, but they had to do extra effort to do it. In agile, it's the default, and you have to go to extra effort to avoid doing it.  


",2018,Why “Agile” and especially Scrum are terrible
WrenBoy,1,"There is no proof that it works better than other systems. At least I have searched and asked for proof and found nothing.

Every time it fails the Agile believers say its because you didnt use Agile correctly. There is nothing which can happen which will make them think the process is bad or even indifferent. For the record I believe it to be a fairly neutral process, no better or worse than whatever other project management style is being used.

I say this as a scrum master. I try and just be a good team lead, which is what my job really is but the pseudo scientific nature of the Agile methodology really grinds my gears.


",2018,Why “Agile” and especially Scrum are terrible
Tyler_Zoro,6,"> There is no proof that it works better than other systems.

My evidence is all anecdotal. From my (very long) experience, agile approaches tend to react to changing circumstances and new information better, and those circumstances ***always*** occur. So agile approaches have a decided advantage. That doesn't mean that waterfall approaches can't work and it doesn't mean that agile approaches can't fail; far from it!

But it does mean that there's a clear advantage.

> Every time it fails the Agile believers say its because you didnt use Agile correctly.

Which is clearly absurd. Agile practices can't defend you against bad leadership and a lack of vision. Nothing can.

> There is nothing which can happen which will make them think the process is bad or even indifferent.

But that doesn't mean that it's not a strategy with an advantage.
",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,9,"Because ""failure"" itself isn't even rigorously defined. 

I could deliver the best software on the planet, but if I deliver it even one minute late, pointy headed managers are going to call it a failure. 

There's a systemic failure to understand that *there's literally no real schedule, it's going to fucking ship when it ships, (no, it actually doesn't matter that you've committed externally a date, at all, even one little bit) the end*. No amount of Excel spreadsheets or project management or throwing teams at the problem or stand-ups or planning meetings is going to solve the fundamental issue: at heart, this is creative work that is **inherently unpredictable**. Full stop. 

I can **try** to estimate, but at best you'll get 80/20. At best.",2018,Why “Agile” and especially Scrum are terrible
Gotebe,4,"If you read and *understand* the Waterfall paper, you will see that it, too, addresses change, testing, customer involvement, what have you.

But shallow people only remembered the simplest figure from page 3 (of 10 or so, paper is not long).

Same with Agile. Simple people understood... well, nothing really. But the travesty is: the agile manifesto is the **opposite**, it is 5 lines, so they added... a load of crap, really.

But the common theme is: making software works in a certain manner regardless of the theory/hype one might read.",2018,Why “Agile” and especially Scrum are terrible
WrenBoy,3,"> My evidence is all anecdotal.

Can you see why that is not even a little bit convincing?

Agile is a religious belief. It doesnt work in the way people believe it does. If you are a good developer and if your organisation is managed by good managers then your project has a higher chance of success. That is essentially what all Agile defenses are actually saying.

> From my (very long) experience, agile approaches tend to react to changing circumstances and new information better

I have seen no proof that even this is true. The main defense I have been given is essentially the branding of the methodology.

In general people complain about Agility when they are forced to change current processes and use Agile. These are the worst conditions to use a pseudo scientific process like Agile. This is because changing your methodology will give your group a good chance to lose your institutional knowledge. Agile by itself doesnt help and now the group has lost knowlege so the transformation results in lower performance. 

Over time however people will stone soup any system to make it work and over time groups will gain institutional knowledge to keep it working. These are generally the circumstances where pseudo scientific processes like Agile tend to seem to work.",2018,Why “Agile” and especially Scrum are terrible
Tyler_Zoro,4,"> Can you see why that is not even a little bit convincing?

Entirely dismissing 25 years of experience is just as much of a mistake as accepting it as universally applicable.

> Agile is a religious belief.

This is a claim that can be leveled against anything that's both popular and which you wish to disparage. Appeals to such faulty logic should not be your first line of rhetorical defense.

> If you are a good developer and if your organisation is managed by good managers then your project has a higher chance of success

Of course.

> That is essentially what all Agile defenses are actually saying.

It's not what ***I said***, so why are you bringing it up?

> a pseudo scientific process like Agile

There's nothing scientific or pseudo-scientific about agile development. It's just an engineering methodology. Science is a different methodology for a very, very different circumstance.
",2018,Why “Agile” and especially Scrum are terrible
WrenBoy,3,"> This is a claim that can be leveled against anything that's both popular...

Its a claim that can be leveled at anything which is presented as fact but for which there exists no proof. Agile being effective and Jesus being the son of god are perfect examples.

> It's not what I said, so why are you bringing it up?

Every time Agile gives an undesirable outcome its believers say that its because it was incorrectly used. In response to this you said that Agile cant protect you from bad management.

Indeed it cannot. It cant protect you from bad management and it cant protect management from bad developers. It is an essentially neutral process of no particular value.

> Science is a different methodology for a very, very different circumstance.

I agree honestly. If you want to sell snake oil then steer clear of science.

Of course, if you want to actually determine the best way to measure something and study the effectiveness of a particular way of accomplishing something then science has a few things to say.

Its unsurprising that you dont see this.",2018,Why “Agile” and especially Scrum are terrible
Tyler_Zoro,2,"Replace ""Agile"" with ""Waterfall"" in your comment... why is it more or less true?
",2018,Why “Agile” and especially Scrum are terrible
WrenBoy,2,"Its not. Thats why I am not claiming that the waterfall model is better than any other.

Id be just as annoyed if there were Waterfall believers trying to persuade me of the superiority of that approach but handwaving away all requests for reasonable proof.

edit: as a reminder I opened with this:

> For the record I believe it [Agile] to be a fairly neutral process, no better or worse than whatever other project management style is being used.

I am even employed as a scrum master. I just dont make claims that its better than any other software development methodology because I have no convincing evidence that this is true.",2018,Why “Agile” and especially Scrum are terrible
Tyler_Zoro,2,"So, to recap: I've pointed out some advantages that I've seen agile development have during my own career over other models. You the responded with a bunch of generalizations about why agile developers try to sell people on it solving everything from gout to highway infrastructure. You're not specifically responding to the points made by the people I responded to about waterfall or to my points about the industry as I've seen it...

So what is your point?
",2018,Why “Agile” and especially Scrum are terrible
WrenBoy,3,"I did specifically respond to it. I opened by asking for proof for and you gave me what you described yourself as anecdote. I asked you if you could guess why I would find your anecdote unconvincing.

You didnt reply but in case it was unclear I would need you to give a measurable property you were hoping to optimize and data showing that your preferred method performed better in the conditions you are suggesting it be used in. Thats not easy to provide, and for software development it is famously difficult, but it would be convincing. 

One of the advantages you gave was that ""agile approaches tend to react to changing circumstances and new information better"". I specifically responded to that by saying that despite this being a commonly stated advantage that there is no proof that it is true. You ignored this point and seem to think that pointing out that there is no proof that your claims are true is the same as ignoring what you say.

There is no proof that your intuition on agility is correct. I also have many years experience and I dont share your intuition. So there we are. That is what happens when you set up an unfalsifiable claim and try to defend it.

Since you are a believer in a pseudo scientific system you will just find it hard to convince people who understand what evidence they should be asking for.

",2018,Why “Agile” and especially Scrum are terrible
manys,6,"development is a timeline with a bunch of tasks, and i don't think there's really a lot of ways to slice and dice that fundamental process.",2018,Why “Agile” and especially Scrum are terrible
Reashu,1,I work in a development organization of 100-200 people. We have teams where developers are just completely uninterested in anything that isn't straight up coding. It's a two-way street. ,2018,Why “Agile” and especially Scrum are terrible
Habadasher,1,Doing agile badly is not an argument against agile.,2018,Why “Agile” and especially Scrum are terrible
spockspeare,1,It happens wherever the people writing the requirements don't have a clue about the realities of implementation.,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,[deleted],2018,Why “Agile” and especially Scrum are terrible
SlapNuts007,1,"Yeah, I think the agency setting in particular is just not suited to Scrum because of how tightly coupled business/finance is to the development process. It's the same reason that working at an agency sucks.

EDIT: I do, however, think it's possible to have a successful process that starts with brief morning meetings and then leaves everyone alone to work, assuming you're allowing the team to estimate tasks, and planning around variable-length releases instead of arbitrary deadlines. Bonus points for free breakfast. Still waiting on someone to pull this off.",2018,Why “Agile” and especially Scrum are terrible
LuckyYouBruh,1,We call it iterative waterfall,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,-1,"That isn’t truly or fully Agile, then. The principles are laid out in the manifesto, and the Scrum Guide’s definitions and terminology are as technical as they are clear.",2018,Why “Agile” and especially Scrum are terrible
SlapNuts007,10,"That's the point. You can probably count places that ""truly or fully"" embrace Agile/Scrum on one hand, and saying ""it's not Scrum that's the problem, it's your implementation of it"" is handwaving away very real theory vs. reality conflicts.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,"I mean, I hate handwaving as much as the next engineer, but it's more than a *little* unfair to say ""scrum is bad because of this"" when the reality is ""scrum explicitly disallows this behavior in clear terms but people don't follow it and in fact would do it with or without scrum"".
",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,-2,"You really don’t have a full understanding of Agile principles and Scrum if you are framing this as a theory vs. reality conflict as if it’s a pragmatic vs. idealistic battle. Agile and Scrum are very pragmatic philosophies and frameworks based on real-world situations, derived from the experiences of multiple teams and companies, tested and improved for more than 20 years already, and across multiple types of products, not just software. You’d have to come up with a really good proof that what you, your team, and your company are going through is really special and historically unprecedented to justify that Agile and Scrum, in its entirety, do not apply to you.

The people who are against Agile, I’ve seen, are those who can’t even recite a single Agile principle and explain it in the same level of depth and understanding that a lawyer would a section of a constitution. They can’t even tell the difference between Agile and Scrum, or among the different Agile practices. Scrum, most especially, is very explicit about what it allows, what it doesn’t, and why. People actually have to get licensed to be a Scrum Master, FYI, and it’s not child’s play. If you think you can bastardize Scrum “theory” to your “reality” without having read the Scrum Guide, without getting licensed, without prior experience with the framework, and without prior experience actually building the product yourself, you must not know what you’re doing and you’re too arrogant to admit it.",2018,Why “Agile” and especially Scrum are terrible
SlapNuts007,2,"> That isn’t truly or fully Agile, then.

Putting your unnecessary dickishness aside, let's just go back to your original statement. No shit. That's the point I was making, and that's the ""reality"" faced by a lot of developers at companies with dysfunctional management.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,-3,"Dickishness? Stop taking everything personally dude. Not everybody puts that much effort in one-upping you. This is a civilized exchange of ideas as far as I’m concerned.

Also, you’re not the only one in the world who has experience dealing with and managing engineers. If others can make it work, you gotta come up with really good and specific reasons why you can’t. Critics of Agile and Scrum who can be taken seriously do. At least point a finger at a specific example from your experience (which you obviously are struggling to do, by the way), otherwise we have reason to believe that you’re all making this up in your head or you’re drowning in confusion.",2018,Why “Agile” and especially Scrum are terrible
SlapNuts007,2,"No, see, this is the dickisness I'm talking about. I'm not a manager who's a critic of Scrum––you're assuming that and being patronizing in your response. I'm an engineer who has only successfully used Scrum in an environment where there was a firm firewall between engineering and the management/business/finance side of things, and that's just not the reality in a lot of companies.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"Can you quote where I assumed that you’re a manager? Is managing colleagues who are engineers, too, exclusive to the role of a manager?

Also, by “critic of Scrum” (and Agile), I meant to refer to anyone who has something to say about it that is against it, which you are. I’m acknowledging your sentiment. I asked you to cite a concrete example or experience. A disinterested person won’t. I honestly don’t know how that is dickish.

Finally, where there is not a clear delineation of roles or understanding of Scrum, that is actually the first step to the adoption of Scrum and Agile principles. Serving the organization to help it understand Scrum is literally the role of a Scrum Master. Or, if the organization is simply decided on not using it, then don’t. No one’s forcing you. But, if you’re not practising Scrum, you can’t say that it doesn’t work. Scrum says nothing of the sort that it works in all cases—only that it does in many. Use something else if you must, whatever is the right tool for the job.",2018,Why “Agile” and especially Scrum are terrible
Gotebe,1,"Wow, that's some serious cool-aid drinking...


I take it you are less than 30 years old. Am I right?

The whole problem is that people relations dissolve agile or Scrum into a whole lot of nothing. That is happening all over the place.

Your Certified Scrum Master gets confronted with his clueless management and any perfect theory knowledge he might have falls flat on its face.

Been there, done that.


You lack experience.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,-1,"Yeah, sure, because age is a hard indicator of excellence, no? And because bad Scrum Masters exist, allowing man-children ageist employees to devolve clearly-defined roles and rules into a whole lot of nothing, it must be logical that Scrum and Agile are bad!

You learned nothing about management in all your years and you’re just farting out of your mouth. Sorry to be the one to break that to you. :(",2018,Why “Agile” and especially Scrum are terrible
Gotebe,2,"Age is important, yes.

Wow, I see I hit a nerve...

I also do not see you actually refuting my point, which tells me you're not interested in getting to the truth, but winning.

I give you a win, knock yourself out, I am out!",2018,Why “Agile” and especially Scrum are terrible
nomnommish,100,"> The only way to ""win"" at waterfall is to basically take your best estimates and absolutely pad the living hell out of them. Add 50% or 100% or even 150% so you have time to deal with emergent work or simply fuck off. And even then you look like an asshole who estimated a seemingly ridiculous amount of time for a seemingly ridiculous task.

My two humble cents. Firstly, your padding should be 3x (4x for a brand new team mostly comprising of junior folk).

Secondly, the problem is the way you phrase it. The moment we start calling it ""padding"", you've shot yourself in the foot. You're using the exact same word that indicates you're being lazy and then complaining when others don't ""understand"" why the padding was required.

Don't call it padding. Because it is not padding at all. It is all the unaccounted technical and automation and POC and research and library development and ""trial and error"" work you need to do.

So start calling it exactly that. Better still, put those things as sub-tasks and account for them. So when a customer or senior stakeholder complains about how ""they could code this in 2 days back in the day when they were developers"" and then asks you why you need 2 weeks instead of 2 days, you cannot answer them with ""padding"".

Instead lay down the 5 technical sub-tasks that need to be accomplished. Educate your stakeholders that developing commercial software requires this level of rigor. Walk them through the automation, the configuration management, the POCs, the unit test and integration coverage, the deployment and build stuff - all the stuff needed.

The truth is that as software developers, we just get lazy and sloppy when it comes to communicating and planning and detailing out all the work items that actually need to get done. Instead, our effort estimates just include the time taken to write the code to implement that feature or capability.",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,40,"> Instead lay down the 5 technical sub-tasks that need to be accomplished. Educate your stakeholders that developing commercial software requires this level of rigor. Walk them through the automation, the configuration management, the POCs, the unit test and integration coverage, the deployment and build stuff - all the stuff needed.

This is where Scrum excels. It formalizes this practice at the team level.

Now, you certainly don't *need* Scrum for that. Heck, you can do all of that in waterfall or any other framework if everybody's good enough and conscientious enough.

And it is certainly possible to do it badly in Scrum.

> you cannot answer them with ""padding""

Did you think I was advocating literally labeling big blocks of time as ""padding"" and then referring to it as such when management comes calling for an update?

""Johnson! What are you working on today?""

""Padding, sir!""

I promise I wasn't!",2018,Why “Agile” and especially Scrum are terrible
nomnommish,19,"laughed out loud at the johnson joke in the end.

No, I wasn't saying you specifically were doing that. Thing is, when we interact on a public forum, we are replying to the original poster but are also voicing our opinions and also aware of the fact that others would read the discussion thread too. 

I actually agree with everything you wrote. Was just adding on to it.

In threads like this, especially when people launch off about how agile or waterfall or devops is bad, most people end up talking about anecdotal examples where no on stayed true to the philosophy or culture that these practices expect you to have.

More than anything, the biggest problem almost always is change management. How do you get people to change their ways of thinking, their ways of interacting with others and getting results from others, of holding others accountable for delivery?",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,2,"hahahaha

> most people end up talking about anecdotal examples where no on stayed true to the philosophy or culture that these practices expect you to have.

Yeah, and then it poisons the well. People experience the worst possible version of something and decide that thing simply sucks.

Reminds me of my uncle.

In the late 90s, against all advice, he bought the cheapest and worst possible Packard Bell PC with AOL and shitloads of shovelware trial versions. Got himself the slowest, cheapest dial-up internet access he could get. And he spurned offers of help.

Based on this, arguably the worst personal computing experience one could possibly fashion for one's self, he decided that computers were pretty terrible and not for him. 

Hasn't really touched one since. =)

It's a shame, because it's hard to stay in touch with him. Also he's a baseball nut and if nothing else, the internet has oodles of baseball news and deep, deep statistics.

> How do you get people to change their ways of thinking, their ways of interacting with others and getting results from others, of holding others accountable for delivery?

Totally agree. I have been on *great* waterfall-ish teams that intuitively did essentially everything that Scrum advocates.

And I've been on utterly shit Scrum teams.

In software development, aside from technical chops, it comes down to having a strong team that communicates well internally and externally.


",2018,Why “Agile” and especially Scrum are terrible
MarsupialMole,4,"The biggest advantage of any management framework that I've observed in action is that at the point where it's implemented you get to havea bunch of positive conversations about grievances but also about culture. Things can go really well. But if you don't have the right people, it won't. Which is also an explicit principle of agile teams.",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,4,"I agree.

I would also argue that an engineer who bristles at that sort of collegial and collaborative interaction may not be a good fit for *any* team, Scrum or otherwise.

Even if they're turning out good work, I don't want people on my teams working in a vacuum if we're building systems. Systems need to be maintained over time and that takes communication and knowledge sharing.

Worst case scenario is you get one of those situations where you have a brilliant but antisocial coder and *he's the only one who knows how certain parts of the systems work* because he built a shitload of elaborate, dark-magicky, fragile shit nobody else understands.",2018,Why “Agile” and especially Scrum are terrible
ratbastid,1,"I think the point is that taking your best estimate (which is crap, because estimates always are) and multiplying it by something because you know it's crap is, *while at least better than believing it's possible to actually estimate the work*, still crap.

Whereas, a few sprints into a Scrum project, you'll have an empirical measure of that thing we're calling ""padding"", AND you'll know what it actually *is* you're doing with that time. Which will help you as you groom the next round of backlog items.",2018,Why “Agile” and especially Scrum are terrible
LordOfTexas,1,"I agree and disagree.    I definitely would not call it ""padding"" and leave it at that, but at the core, part of an estimate *is* padding.  It's time that you don't know, and can't know, whether you'll need or not.

The whole point of Scrum is that you cannot possibly anticipate every single task or need that your product will have - we work in sprints primarily to *learn* about what we need to do.   

No matter how well you communicate at the start of the project, no matter how well you document your *expected* technical subtasks/R&D/trial and error, for any product interesting enough to not buy off the shelf, the estimates will be hot garbage soon after they're written.

&#x200B;",2018,Why “Agile” and especially Scrum are terrible
nomnommish,0,"My point is simple. If you have a 1.7x or 2.3x or 3.0x formula of padding. Maybe a formula even borne out of all previous experiences.

You are still better off detailing out all those tasks as individual work items. Because first, transparency to stakeholders.

Second, it forces you to think of how the effort estimates can change on a subjective level based on business goals.

Software development has to become a trade or an engineering. Not a black art. Engineering is always built to certain business or design goals. Engineering is always pragmatic and never academic.",2018,Why “Agile” and especially Scrum are terrible
LordOfTexas,1,"Not saying software is a black art.  I agree with most of what you are saying, but how do I detail out a task as individual work items if I don't even know that a given task exists yet?

If we're talking detailing tasks/work items as we discover the need for them during the course of a project, sure.  But waterfall methodologies ask you to detail all of that up-front, which is not wise unless your customer values rigid inflexibility and an inability to respond to change.",2018,Why “Agile” and especially Scrum are terrible
nomnommish,1,"Because many many other megaprojects also work this way. Say you're building a $3Billion dam or a $500million factory. Or a $20million construction project. Every single fuckin one has a ton of uncertainty and randomness they have to deal with.

There seems to be this notion that only software development has this magical thing called ""technical tasks"". Which is obviously bollocks because every single craft has a heavy element of the ""craft side of things"".",2018,Why “Agile” and especially Scrum are terrible
LordOfTexas,1,"Those other industries pay a huge premium to suss out every last detail before they break ground.  Why? Not because it's the best way to do things, but BECAUSE THEY HAVE TO! Ever try to refactor a dam?  ",2018,Why “Agile” and especially Scrum are terrible
nomnommish,1,">Those other industries pay a huge premium to suss out every last detail before they break ground.  Why? Not because it's the best way to do things, but BECAUSE THEY HAVE TO! Ever try to refactor a dam?  

Thanks for actually pointing out the real disconnect between software engineering and other engineering trades.

But I will still call BS. You think a dam is expensive? Consider that many software routinely make millions if not billions of dollars a year.

Do you seriously think that it is any different?? Let us call a spade a spade. We just do not like to get down to that level of detail or get into the complexities and challenges that is part and parcel of software delivery.

And we stuck at keeping people aware of all the delays and challenges and issues. So, we cover our own ass by claiming the stakeholder ""just does not get it"". ",2018,Why “Agile” and especially Scrum are terrible
LordOfTexas,1,"I've been on waterfall projects where we break out our estimates into hyper-granular technical detail.  20 hours on this feature for happy path, 7.5 hours for unit testing, 7.5 for integration testing, etc, etc.  It helps a little but doesn't solve the core problem that you don't necessarily know what you're doing unit/integration testing or CI/CD setup FOR.  There's features and functionality you assuredly don't know you need at the start of a project.",2018,Why “Agile” and especially Scrum are terrible
nomnommish,2,"> I've been on waterfall projects where we break out our estimates into hyper-granular technical detail. 20 hours on this feature for happy path, 7.5 hours for unit testing, 7.5 for integration testing, etc, etc. It helps a little but doesn't solve the core problem that you don't necessarily know what you're doing unit/integration testing or CI/CD setup FOR. There's features and functionality you assuredly don't know you need at the start of a project.

Very very true. That to me is the biggest fundamental problem with waterfall. By doing Big Upfront Design, you're essentially saying that everything needs to be thought through to the last level of detail right in the beginning and that your architecture needs that much foresight and upfront correctness and robustness. Heck, even then, business goals and features often change quite significantly a few months down the road.

And to me, this is where Agile shines because it sets the right expectations with stakeholders. That they need to participate in the continuous evolution of the software they are funding. That they need to be true partners, not just pay lip service.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,">software developers, we just get lazy and sloppy when it comes to communicating and planning and detailing out all the work items that actually need to get done

Because all of that take a lot of *time*. Time that is better spent *writing* software, not *writing about* writing software.",2022,Why “Agile” and especially Scrum are terrible
nomnommish,1,">>software developers, we just get lazy and sloppy when it comes to communicating and planning and detailing out all the work items that actually need to get done
>
>Because all of that take a lot of *time*. Time that is better spent *writing* software, not *writing about* writing software.

Not really. I disagree. Most of the time is spent on thinking about code, not writing it. And thinking of the code you're going to write implies that you're thinking about the problem you're trying to solve, the different edge cases it might have, the unspoken requirements etc.

And the best way to think about stuff is to write it down in detail. I mean, we did that all through our academic lives.

So you're actually thinking of the business problem you're trying to solve for.

In fact I really resent this new fangled notion of the ""functional expert"" where an analyst defines requirements, throws it over the fence to a coder who codes blindly by reading the words that were written, throws it over the fence to a qa who blindly tests against the words that were written etc.

That's just... wrong.

For all the nonsense about ""agile"" that gets tossed about, the absolute most important thing about agile is for the tech team to be super close to the business team where they're literally pairing together to discuss and think through and solve problems.

Heck, half the time, you'll end up finding that the problem doesn't even need solving or any new coding and can be solved in other easier ways.",2022,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"That’s fair. Obviously we’re trying to solve problems and exploring the problem space, validating assumptions through tests and feedback loops, etc. it’s just feel like a lot of that time is devoted to unproductive ‘ceremonies,’ tools and processes. Not a problem with agile theory so much as implementation. Like, we don’t need to entering SWAGs through a tool that performs so badly it wastes time and brain power.",2022,Why “Agile” and especially Scrum are terrible
nomnommish,1,"That's precisely the problem. That you have these blooming idiots who are looking for their ""pound of flesh"" in terms of how many ""story points"" you shipped. Instead of actually focusing on epics and major features that need to get delivered and leaving the rest to the team.

So now you have this ridiculous game being played because you have a 3 story point task which should take you less than a day (or whatever) but you realize you've spent an entire day just thinking through the edge cases, reading the other documentation or doing research, talking to business people and even realizing that you can only get your answers the next day because the business expert is not available or is on PTO.

So you choose to just soldier on and finish the task so you can ""show your productivity"", never mind that you did the wrong thing for optics.",2022,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"The inmates are *still* [running the asylum](https://dl.acm.org/doi/10.5555/553473), nearly 25 years later.",2022,Why “Agile” and especially Scrum are terrible
Sylvan_Sam,54,"> When you finally complete the project, way over your time budget, it looks like you simply ""blew a deadline"" because there's no record of all that extra work you did.


Not to mention that this is the first time any of the stakeholders are getting to interact with the product, and they're all going to change their mind about how it should work as soon as they see it.

",2018,Why “Agile” and especially Scrum are terrible
res_ipsa_redditor,24,The idea that waterfall means you build a monolithic solution for two years and never show anything to stakeholders is absolutely a straw man. If that’s what you did then you worked for idiots and agile don’t fix stupid.,2018,Why “Agile” and especially Scrum are terrible
LordOfTexas,16,"I worked in waterfall for years, now I've worked in scrum for years.  Same company.  In waterfall we didn't show anything to end users other than mockups until about a month before release (and at that point we had been working for many months, usually.)  In Scrum we show something every two weeks. 

&#x200B;

It's not that IT management were idiots.  The ones insisting on waterfall were the people with the purse-strings who understand the business, but don't know a thing about software other than how to whine about it.  

&#x200B;

The ""leave our users alone and go build the thing we're paying you to"" mentality was ALL too real (and still is in pockets of my company.)  ",2018,Why “Agile” and especially Scrum are terrible
Tiver,2,"You'd still have teams that would work on something for 6 months, or even 3 months, without showing anything.  They'd come up with a grand design and then implement all of it.  It's vastly preferable to think of an overall design, then implement the smallest functional part of it.  demonstrate that, then slowly iterate adding more features.  Having an overall idea of the final picture at the start is great to avoid costly mistakes, but this way you are also able to adjust the design better as you go and get feedback.  Often finishing early because you realize the 10 other remaining features aren't really that important, only this 11th they hadn't mentioned is and you can adjust and add that.

Within my company some groups have used it to great success, but other groups definitely do a bastardized mix of waterfall and agile. They're still setting dates and features before anyone has been able to really figure out how to implement the feature, or is months out, and so then all development is driven to that date even if it's in sprints.  End results is frequently buggy features, or code that is harder and harder to manage.",2018,Why “Agile” and especially Scrum are terrible
hammonjj,4,"Agile, in this circumstance, does fix stupid though because, in the agile framework, product demos are required to accept a story. It’s literally built into the process. ",2018,Why “Agile” and especially Scrum are terrible
RiPont,63,"Agile also tends to fail horribly when the work itself is bullshit and everyone hates their jobs and their coworkers, hates management, and is only there because they need the job or they'll die without medical benefits / get deported instantly without the job / etc.

That's not really Agile's fault, of course.  Agile won't save you from yourself.  It's a fundamentally creative process around building software, not polishing pipes.  But when people use Agile for boring shit with unhappy employees, it tends to fail *very* spectacularly.  ",2018,Why “Agile” and especially Scrum are terrible
ulyssesphilemon,31,Any project management system would fail under those circumstances.,2018,Why “Agile” and especially Scrum are terrible
RiPont,4,"Absolutely.  The only system that kinda works in that situation is fascism.  It's miserable, and I wouldn't wish that on anybody, but it happens.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"agile originally eschewed project management. But I think good project management enables agile software development to work.  note comments indicating 'bad' managers cause most failures - but this suggests that the manager is doing the project management - instead of a real project management professional. When I was a developer I thought all SDLC management was mostly a waste of time, that good developers knew how to deliver on time and under budget - just let us code! It was only after the first controlled SDLC process and setup of supporting tools that I got religion - and realized how important the process and project management was to successfully completing medium and larger scale projects. Trying to 'distribute' all the classic PM tasks across an agile team means these tasks may or may not get done, or done well... thus increased risk and less chance to document/improve the system for next iteration.",2018,Why “Agile” and especially Scrum are terrible
Socrathustra,1,"I feel like the author of this article worked at a shitty company that happened to work in Scrum. Scrum has been a godsend for my company, and when we compare ourselves to non-Agile departments, we are leagues ahead, even when there are more ""senior"" engineers in those departments. It's crazy how slow they work and how bad their code is. Agile might not be perfect, but it's very, very good compared to older practices.

All of the pitfalls he discussed, I can name specific examples of things that we do to combat them or why they're not actually problems.

>These Agile systems, so often misapplied, demand that they provide humiliating visibility into their time and work, despite a lack of reciprocity

Nobody is looking at my code except when I submit it for review. If it's taking me longer, it's because the work is taking longer. If the work is taking MUCH longer than planned, then we know we have a problem, and we can work to address it right away, or we can tell the appropriate people that hey, there's something holding us up. Over time, trends accumulate, and we can work to address common obstacles. The transparency means that management/the scrum master/whoever takes it seriously, because it's not emerging out of the blue. It's a consistent pattern that everyone sees.

>Like a failed communist state that equalizes by spreading poverty

I would expect a long article like this to include such ignorance. It's pretty typical for STEM high performers to take the smartest-person-in-the-room approach to everything, aka Dunning-Kreuger for smart people. There are tons of failed Communist states, and there are good reasons why they failed, but this non-explanation typifies the kind of person who believes that by stating their opinion at length, they have provided all the evidence they need for someone to believe them.

So it is that I don't see a single citation throughout this entire article save for a reference to the Wikipedia page for Scientific Management. That may not have been ""scientific"", but neither is this article. It's a bunch of opinions stated without support other than ""I say so"" with some half-baked reasoning that resonates with a few people.

Assertions like ""a widely-implemented project management style for high-performing teams is actually garbage"" require evidence. Cite a study and be careful with how you interpret the statistics.

> Rather, I mean that its stock dropped by almost 90 percent in less than two years.

Citation needed but not provided. This is the exact kind of thing that makes this an unjustified rant. Who is to say that the company died because of Scrum? Companies die for all kinds of reasons... but we're supposed to trust the OP.",2018,Why “Agile” and especially Scrum are terrible
jrochkind,0,"Does it fail there, or is agile (really, to be fair, I think it's the ""scrum"" variants particularly, not agile as a whole) actually designed precisely for running sweatshops with interchangeable unmotivated programmers working on bullshit? ",2018,Why “Agile” and especially Scrum are terrible
RiPont,0,"Agile is not, but sweatshops love the idea of scrums every day, hold the developers accountable, failure to plan is the developer's fault, etc.  ""Dark Agile""

Scrums *without* developer freedom is a bad sign.",2018,Why “Agile” and especially Scrum are terrible
jrochkind,1,"I think some people think scrum is specifically _supposed_ to eliminate developer freedom. And make developers into interchangeable commodities. Just take the story off the board and complete it, any hands on the keyboard will do. 

I associate this particularly with ""scrum"" rather than ""agile"" generally, but I'm willing to believe there is such a thing as scrum that doesn't suck, somewhere. 

In the end, dysfunctional organizations with bad management will be dysfunctional organizations with bad management no matter what. 

But I don't think that means that approaches and methodologies don't matter. You've just got to have good managers and not completely toxic organizations, who _want_ to figure out how to be healthy environments producing quality products.  It's not simple or obvious even if you are well-intentioned. But if you are some combination of incompetent and not well-intentioned (or have leaders with goals entirely different than heathy environments and quality products)... you are doomed. 

It is ironic that the very first principle in the ""manifesto"" is ""Individuals and interactions over processes and tools.""  I associate ""scrum"" particularly with exactly the opposite. (Again, I'm willing to believe it doesn't _have_ to be that way in the right hands... but ""scrum"" sure seems to be process/tool-obsessed, it's not just me, right?)",2018,Why “Agile” and especially Scrum are terrible
s73v3r,81,Here's the problem with both approaches: Management. And that's the thing that neither approach actually  has a fix for. ,2018,Why “Agile” and especially Scrum are terrible
JohnBooty,52,"Yeah absolutely. At my last job we were a Scrum shop. There were:

1. Times when it really worked... when I worked for a good manager and *his* boss wasn't making everything hell.
2. Times when it really sucked... when I worked for a good manager and his boss made things hell.
3. Times when it really sucked... when I worked for a terrible manager.
",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,44,[deleted],2018,Why “Agile” and especially Scrum are terrible
yeah666,11,">Experienced professional: The team looks amazing! And the manager knows how to organize work! Where do I sign?

How do you recommend getting a good feel for this in interviews?  I usually ask if deadlines are often missed and how they handle those situations, but that doesn't tell the story of day-to-day organization.",2018,Why “Agile” and especially Scrum are terrible
tinglySensation,2,"I tend to feel them out and let them describe their process. Usually in an interview, they aren't 100% open on what's happening behind the scenes, sometimes they are. When they aren't 100% open, just look for the areas that don't make sense and ask questions. When they are being open, just look for the areas that don't make sense and ask questions. Namely, just ask questions.   


Also, if you think you are starting to see a pattern in what they are describing that points towards a red flag- also ask questions (not pointed). Don't drive towards telling them their company sucks, just learn as much as you can so you can make an informed decision.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,"I agree with the other response, when is time for you to ask questions don't go for those that you think will make you look good, ask process questions, things like how the on call duties work, what development methodology do they use, how are scrums or meetings like, pay attention to what is said and what is not said, and be aware of bullshit responses that don't clarify anything.

When is your time to ask questions is your opportunity to evaluate them, if the team is healthy and a good match for you, don't waste it!",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,2,"I am in love with this observation, and am going to share it!",2018,Why “Agile” and especially Scrum are terrible
mdatwood,11,Welcome to...life? This isn't unique to software. A bad manager or leader is going to be hell to work for. Period.,2018,Why “Agile” and especially Scrum are terrible
HolidayMoose,1,So what does your preferred alternative do to making it so a terrible manager doesn't making your work suck? ,2018,Why “Agile” and especially Scrum are terrible
JohnBooty,1,"What are you looking for here?

That's a very broad question, and hundreds of books have been written about it.

Even if I had the comprehensive answer (I sure don't) it's not like I could give it to you in less than a million pages!",2018,Why “Agile” and especially Scrum are terrible
HolidayMoose,2,"A name concrete enough to look it up and read about it.

A lot of these posts about agile being bad have comment sections that say there is something else that works better but don’t say what it is.",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,1,"Well, it's not a complete guide of ""how to be a good manager"" but this is the canonical (I believe) book about Scrum, which is a specific implementation of the vague mess known as ""agile.""

https://www.amazon.com/Scrum-Doing-Twice-Work-Half/dp/038534645X

It's pretty short, 256 pages. I think that after the first few chapters you'd have a pretty good sense of whether or not you think it's interesting or if you think it's bullshit.

If you want to know how to be a good manager, I'd suggest this book. It's not about management but it's pretty good primer on how to work with people.

https://www.amazon.com/How-Win-Friends-Influence-People/dp/0671027034

If I could pick *two* books for all my managers to read and really take to heart, it would be those two.",2018,Why “Agile” and especially Scrum are terrible
greentoiletpaper,4,"In scrum, it's the scrum masters job to deal with management. how is this handled in waterfall?",2018,Why “Agile” and especially Scrum are terrible
s73v3r,1,Except in many cases the scrum master ends up being management. ,2018,Why “Agile” and especially Scrum are terrible
rich97,1,I've got a fix. Fire management!,2018,Why “Agile” and especially Scrum are terrible
ratbastid,1,"I just started a new job, my first in 20 years that doesn't have a coding component. I'm a Technical Product Manager, and one of my main roles is as Product Owner on the team for this product I'm working on.

It's SO WEIRD to have these reflexes from my last job about looking busy and hiding personal stuff. My new boss doesn't care (or even notice) when I go to lunch and when I come back. And what gets produced here is orders of magnitude better--and MANY multiples more profitable--than at my last job where I had to account for every moment of my life.",2018,Why “Agile” and especially Scrum are terrible
cowinabadplace,0,No. The waterfall approach is likely to fail at the company's goals even with best intentions. ,2018,Why “Agile” and especially Scrum are terrible
softmed,21,">So you're always ""late"" and you always feel like shit, and your team (and the software engineering profession in general) always looks bad.  
>  
>The only way to ""win"" at waterfall is to basically take your best estimates and absolutely pad the living hell out of them. Add 50% or 100% or even 150% so you have time to deal with emergent work or simply fuck off. And even then you look like an asshole who estimated a seemingly ridiculous amount of time for a seemingly ridiculous task.

Maybe its just my industry, but I've never seen Agile solve this. Management still wants a total project budget, with a deadline date for certain features. Every place I've worked at that did Agile, would generate budgetary documentation anyway, say ""now we're using agile so this is just an estimate. We will keep you up to date as it changes"". Then when we blow that original 'estimated' date or budget for all of the common reasons you mentioned we still 'look bad' to management.  So we get the time wasting meetings of Scrum, with the shitty estimating of Waterfall, even though we're being 'iterative' and keeping top management updated on scope creep. .",2018,Why “Agile” and especially Scrum are terrible
lisnter,7,"&#x200B;

The goal of software engineering is to deliver (a) what the business wants (b) on time and (c) on budget.  In my experience, Agile gets you only (a).

It's not going to be on time because the business is able to change their mind and it takes time to implement the new direction(s).  It also won't be on budget - because the business changes their mind and it takes development time to implement those changes.

And to add another, the goal of software engineering is (d) deliver maintainable projects.  Agile doesn't give you that either due to continual changes allowed by (a); without additional time (b) and/or budget (c) there will not be time/money to make changes to properly account for changed functionality anyway.

This is better, somehow?

&#x200B;",2018,Why “Agile” and especially Scrum are terrible
mv-ck,7,"I think this is the classical project-oriented stance. Scrum (I can only talk about Scrum here, sorry) comes from a different angle. People noticed that nearly every SW development project failed in delivering all (a), (b), and (c). So, they started to think: Do we really need everything the business wants? What if we could try a couple of our features and see how they fare in the market? So, let’s see to it that we can ship our software at least every couple of weeks and get feedback from real users.

Then, we will try to estimate the expected value of all the features and start with the features delivering the most value. This way, when our budget or time runs out and we stop development, we at least have the most value we could have gotten with the time and money invested.

So, my take on this is: Scrum gets you (b) and (c), but not necessarily what the business wants. Instead, business gets the most value they could have got given time and money available.",2018,Why “Agile” and especially Scrum are terrible
LordOfTexas,2,"I think Scrum takes the stance that delivering (a) without (b) or (c) is more valuable than delivering (b) or (c) without (a).  After all, what is being on time and budget worth if you didn't deliver anything the business will get value from?

Re: the business changing scope, it's the responsibility of technical leadership to help the business understand the ramifications of the change, in terms of the resources it will take to accommodate that change.  

If your technical leadership is letting the business jerk your dev teams around every time they do a new line of coke, that's a failure of leadership, not Scrum.",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,5,"I can only speak for the Scrum flavor of ""agile.""

> We will keep you up to date as it changes"" and then when we blow that original 'estimated' date or budget for all of the common reasons you mentioned.

Well, this happens because the goals are unrealistic, the team didn't give its best effort, or outside factors (you had to spend 50% of your week doing work outside of the sprint, or something)

No methodology is going to fix that.

> Management still wants a total project budget, with a deadline date for certain features

This sounds like your problem. Scrum can't help you hit unrealistic, externally-imposed deadlines.

There's no solution for that.

It can help you explain things to management: ""We implemented Feature A in three sprints, Feature B in three sprints, and Feature C in three sprints. They were all roughly the same complexity. The team has determined Feature D will take five sprints, and here's why -- we've broken it down into stories -- and as you can see we've determined it's going to take about 66% more work. In addition, there are a lot of unknowns.""

Now at this point management *can* try to keep a straight face as they tell the team ""hey, fuck you, just crank out 66% more work in the same amount of time"" but even the most sociopathic manager is going to realize on some level that perhaps they're asking for something impossible or, at least, encouraging some very shoddy work. 

If they have any connection to reality, they will at that point try to adjust either the deadlines or scope of work. Or perhaps at least break the end goal down into smaller, incremental deliverables so they can at least get *some* of what they want rather quickly.

And a lot of times they won't, which sucks. Scrum helps IMHO, but ultimately it can't defeat that.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,6,"I've seen this happen. 

What is normally missing is that your front line managers are well aware that the deadline is a fucking pipe dream, because that's what the engineers are telling them. 

So they translate this to the mid level managers and directors, who then do the same translation work to the executives. 

Now, the executive is the one that normally actually has money riding on a timeline. I've seen bonus structures that lay a quarter million dollars on the on time delivery of software on an exec (notably, in the case that I'm aware of, the bonus was all or nothing. The software shipped on time or the exec got *nothing*.)

These guys are going to be supremely uninterested in the reasons why or wherefore the software isn't going to be on time, because not only are they the ones the customer will see and interact with, but they're also personally losing money if it's late even one day.",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,3,"Yeah, it's an eternal tale. If anything, Scrum gives you some slightly more empirical evidence for your team's capabilities to refute those insane demands (or at least make sure everybody knows they're insane) but obviously, yeah, ultimately... crazy management gonna be crazy.",2018,Why “Agile” and especially Scrum are terrible
FeepingCreature,3,"> (you had to spend 50% of your week doing work outside of the sprint, or something)

And this is why you document interruptions in your sprint retrospective.",2018,Why “Agile” and especially Scrum are terrible
immibis,1,That's why you give them 3x your original estimate. Because the other 2x is work you don't know about yet.,2018,Why “Agile” and especially Scrum are terrible
michaelochurch,44,"> That's no strawman. I've been in the industry for 20 years and that was the dominant paradigm forever, and many teams still work that way.

I'm sure there are badly-run teams that end up in the Waterfall pattern, but software wasn't supposed to be designed that way. The now-infamous waterfall flowchart was being presented as what not to do.

> The only way to ""win"" at waterfall is to basically take your best estimates and absolutely pad the living hell out of them. 

That's how people win at Agilepolitik, too. It's called ""managing expectations"" and though we probably both bristle at it, it's what people do if they want to stay in the good graces of thems above them.

> The solution is blindingly obvious: let the engineers themselves be a part of the process to design the stories.

That doesn't help because you're still forcing the engineers to justify insultingly low increments of their time to non-technical people. 

""Sprint"" pseudoscience can die in a taint fire. Sprint literally means unsustainable. 

> You are not supposed to do any work outside of a story.

So, in other words, being a professional software engineer is supposed to be like middle school, where you ask for a hall pass before using the bathroom. 

Do you think the business guys justify their own working time in terms of atomized ""user stories""? No, of course not. So why should the engineers?",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,30,"> and though we probably both bristle at it, it's what people do if they want to stay in the good graces of thems above them.

I mean sure, but that's 100% orthogonal to whether you're doing Scrum or any other methodology.

> That doesn't help because you're still forcing the engineers to justify insultingly low increments of their time to non-technical people. 

Well, that's nearly always a given, isn't it? In nearly all circumstances, somewhere up the chain there's going to be somebody non-technical.

Even if it's engineers *all the way up the chain* you still run into problems because an engineer in a management position can't necessarily understand the in-the-trenches sorts of problems you're solving on a minute to minute and day to day basis. 

While Scrum doesn't solve this problem for you, it certainly *eases* it to an extent because it makes it easier to demonstrate where your time is going and where your time went, assuming you're using something like Pivotal Tracker or some other solution that makes epics, sprints, and stories visible.

> So, in other words, being a professional software engineer is supposed to be like middle school, where you ask for a hall pass before using the bathroom. 

I think it's *completely* reasonable for my employer to want to know how I'm spending my time.

Not every hour, but certainly days and weeks.

I don't expect the right to spend a week rewriting our database code without discussing it with the team first. At the very least -- regardless of methodology -- this is something the team needs to discuss. What are the risks? What are side effects I haven't forseen? Has anybody tried this before, and encountered X Y or Z? Is anybody else working on it right now? Perhaps I have a solid idea of how this will affect *existing* code, but will this perhaps conflict with something somebody else is working on right now? etc. etc. etc.

At the end of the day, sure, you can *absolutely* screw this up with Scrum. My last employer did, badly... we had a crushing mountain of technical debt.",2018,Why “Agile” and especially Scrum are terrible
senatorpjt,4,"hunt offbeat hat boat secretive oil advise fine dull wipe

 *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,9,"I've done scrum for 4 years now almost. 

The day I worry about what my daily status report sounds like is the day I open LinkedIn and start looking for new opportunities. 

It doesn't need to sound good. It just needs to be accurate. If you lost all yesterday because Tom's code was bug ridden shit, you say that (maybe nicer if you actually like Tom). If you had meetings and appointments all day and only did a code review, you say that.  If you had a random bug that became fucking Cthulhu, you say that. If you saved the company 15% by switching to Geico, you say that.",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,3,"I personally really love BRIEF daily standups. Fifteen minutes a day just to check in and see if anybody has any issues, and briefly discuss who's going to grab the next task(s).

Key is keeping them short... then nobody dreads them.",2018,Why “Agile” and especially Scrum are terrible
senatorpjt,1,"jobless head hunt disagreeable abounding cats deliver unpack attempt capable

 *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,3,"You certainly don't have to wait!

Daily standup meetings simply encourage a little communication. They also *reduce* the ""drive-by shooting"" style of management, where your manager pops in at random intervals and you never, ever know when you'll get a delightful little surprise visit.

""Sarah, I'll be done with the reports task this morning hopefully this morning. You want me to take the other report next or the user auth story?""

""Actually, that's just like a report I worked on last week. I should be able to knock that one out pretty fast, and you're the user auth expert here, so maybe that one can be yours?""

""Sounds like a plan""

etc etc etc

Not rocket science and you sure don't need daily standups for that, but on the other hand you'll generally not have *all* team members present unless you make a conscious effort to do so.

",2018,Why “Agile” and especially Scrum are terrible
mdatwood,2,"> With daily standups I feel like I'm getting burned out by needing to have a compelling report every morning, and I avoid anything that won't sound good.

This has nothing to do with Agile/agile or scrum. It should be perfectly fine to say nothing was done yesterday and why. This builds team trust, and helps you and the team get out in front of problems.

I've seen many places where people have real problems getting the work done and are afraid to bring it up. Eventually it comes out, but is often too late to figure out some other solution.
",2018,Why “Agile” and especially Scrum are terrible
LordOfTexas,2,"If your stand-ups are being used as a status report meeting, your Scrum Master fucked up.  From Scrum.org:

"" As described in the [Scrum Guide](https://www.scrumguides.org/), the Daily Scrum is a 15-minute time-boxed event for the [Development Team](https://www.scrum.org/resources/what-is-a-scrum-development-team) to synchronize activities and create a plan for the next 24 hours. ""

It should be much more about today than about yesterday.",2018,Why “Agile” and especially Scrum are terrible
senatorpjt,1,"party wakeful offbeat compare hunt coherent wasteful aspiring office bike

 *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",2018,Why “Agile” and especially Scrum are terrible
LordOfTexas,1,"Yeah, when you have 8 developers working 8 things in parallel it's easy to see how it can turn into a status update.  My team is currently doing a lot of pair/mob programming so the need for standup-as-status-update is less important.",2018,Why “Agile” and especially Scrum are terrible
michaelochurch,-8,">I think it's completely reasonable for my employer to want to know how I'm spending my time.

> Not every hour, but certainly days and weeks.

Does he tell you how he spends his time?

My view on transparency is that it's only good when it's reciprocal. If managers and employees follow the same rules, then it's between them how much transparency to allow and how frequently to communicate status. But Agile is one-sided transparency: therefore, it further concentrates power in those who already have the political advantage. ",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,8,"I really don't know of any framework that's going to save you from opaque, dictatorial, or otherwise malicious or incompetent management, sorry. But I fail to see how Scrum (the flavor of ""agile"" I'm familiar with) makes it worse.

If it makes you feel better, I can personally confirm that yes... I was screwed by terrible and opaque management in a Scrum shop. However, we weren't always Scrum, and I suffered then too. 

Scrum is neither a contributor to nor an answer to that problem in my experience.
",2018,Why “Agile” and especially Scrum are terrible
RiPont,18,"> I'm sure there are badly-run teams that end up in the Waterfall pattern, but software wasn't supposed to be designed that way. The now-infamous waterfall flowchart was being presented as what not to do.

And yet, people still fall into it.  It's natural, when you have micromanaging management, or customers who have no technical knowledge who hire consultants and have been burned before by under-delivery.  They want to spec all requirements up front, in excruciating detail.

> So, in other words, being a professional software engineer is supposed to be like middle school, where you ask for a hall pass before using the bathroom.

No, sprints are short, so unless it's truly time sensitive, you'll get to it soon.  ""Stick to the sprint work"" is more about not going squirrel!!! at every passing thing that comes your way.  Focus.  This is not so much about saving the programmer from themselves as saving the programmer from being interrupted by a constant inflow of work from different partners that conflict with each other, or you end up with tasks that never get finished because they always get bumped in the middle.",2018,Why “Agile” and especially Scrum are terrible
michaelochurch,5,"> ""Stick to the sprint work"" is more about not going squirrel!!! at every passing thing that comes your way. Focus. This is not so much about saving the programmer from themselves as saving the programmer from being interrupted by a constant inflow of work from different partners that conflict with each other, or you end up with tasks that never get finished because they always get bumped in the middle.

I'm of mixed minds about this.

On one hand, the chaos of multiple stakeholders does give the individual engineer some cover if he wants to invest time in his own career development. You never want one person to have the complete picture of everything you do all day.

On the other hand, I do agree that said chaos can get in the way, and that processes that protect engineers from being tugged in myriad different directions could work for the good. 

One of my problems is that Agile has no role for truly senior engineers. After 10 years in this industry, you want to work on more than just sprint work; you want to work on genuine R&D efforts that can't be justified in terms of 2-week increments. Unfortunately, there's very little of that kind of work in the world (and that's not Agile's fault) thanks to end-stage capitalism.",2018,Why “Agile” and especially Scrum are terrible
RiPont,5,"> After 10 years in this industry, you want to work on more than just sprint work; you want to work on genuine R&D efforts that can't be justified in terms of 2-week increments.

???

Agile's not that rigid.  You can just *drop out of the sprint*, other than supporting other developers with questions.  Or you can put a max-hours work item as ""R&D project"".

Most processes are about doing work that can be defined, whether it's Agile, Waterfall, or any other process.  Open-ended R&D is difficult to fit into any process whatsoever.  You're basically limited to talking about the direction  you're focusing on in the next couple of weeks.

As for ""more than just sprint work"", I've never had a problem with that, personally.  If you have work that can't be completed in one sprint, you break it up into milestones that you think can be completed.",2018,Why “Agile” and especially Scrum are terrible
zck,5,"> Agile's not that rigid. You can just drop out of the sprint, other than supporting other developers with questions. Or you can put a max-hours work item as ""R&D project"".

I've never worked at a place that supported this. If you know of one, are they hiring?",2018,Why “Agile” and especially Scrum are terrible
Drunk_Not_Angry,6,"Fastly, Atlassian are two places that I have worked that do this and they are hiring and I enjoyed working there immensely. Google has been a Nightmare would not recommend.",2018,Why “Agile” and especially Scrum are terrible
do_pm_me_your_butt,1,"Thanks for your work on source tree.

#sike!",2018,Why “Agile” and especially Scrum are terrible
RiPont,1,"It's hard to get a job as pure R&D, no matter what the process.  That is credential-land, generally.",2018,Why “Agile” and especially Scrum are terrible
zck,2,"If it's so hard to get to a position where you can do that, then isn't Agile incredibly rigid for most people working with it?",2018,Why “Agile” and especially Scrum are terrible
RiPont,-1,"> isn't Agile incredibly rigid 

???

No, that's completely the opposite of agility.

If you are participating in an Agile team and want to spend time on R&D unrelated to the sprint, you just mark it as unavailable time the same as if you were on vacation during part of the sprint.",2018,Why “Agile” and especially Scrum are terrible
zck,3,"> If you are participating in an Agile team and want to spend time on R&D unrelated to the sprint, you just mark it as unavailable time the same as if you were on vacation during part of the sprint.

As I said, I've never worked at a place that lets people do this. If I read your response right, you said ""it's very hard to get to a position that lets you do this"". Did I misread?",2018,Why “Agile” and especially Scrum are terrible
RiPont,2,"Getting to do pure R&D at all is rare.  Agile has nothing to do with it.

Fundamental to Agile, however, is that the engineers organize themselves and their own process.  If Agile is feeling rigid, then it's not Agile.  But ""rigid Agile"" from managers who don't really get it is,  unfortunately, quite common.  This may sound like a ""No True Scottsman"", but it's not.  Agile is more than short sprints and standups.",2018,Why “Agile” and especially Scrum are terrible
zck,1,"I would think that if most people ""doing Agile"" are not doing Agile, then Agile needs to be marketed better. :-p",2018,Why “Agile” and especially Scrum are terrible
s73v3r,2,">Agile's not that rigid.  You can just drop out of the sprint, other than supporting other developers with questions.  Or you can put a max-hours work item as ""R&D project"".

At least not where I'm at, you can't. It doesn't matter what you're trying to do, it has to be a ticket, and it has to be in the 2 week sprint. No longer term items allowed. ",2018,Why “Agile” and especially Scrum are terrible
RiPont,1,"Well, that sucks.  It's fundamentally impossible for everything to be a useful ticket, and management shouldn't pretend otherwise.  Is ""get sick with the cold next friday"" a ticket?  Does management create a ticket for every meeting they assign you?

Any process treated as a religion will become toxic.",2018,Why “Agile” and especially Scrum are terrible
cowinabadplace,5,"Which part of the business? Sales, business development, upsells, legal, all deliver on a similar cycle. Many of those other teams have tighter metrics to deliver on. Some are fortunate that their feedback cycle is quick (legal for contracts). Some are unlucky in that their cycles are slow (b2b sales contracts). But they're tracked tighter than we are. ",2018,Why “Agile” and especially Scrum are terrible
michaelochurch,-2,"> But they're tracked tighter than we are.

Then they should unionize and get that fixed.",2018,Why “Agile” and especially Scrum are terrible
HolidayMoose,2,"> I'm sure there are badly-run teams that end up in the Waterfall pattern, but software wasn't supposed to be designed that way. The now-infamous waterfall flowchart was being presented as what not to do.

It's not just that people fall into the Waterfall pattern. It's what many teams/organizations explicitly try to do. My business was that way and is still working on getting over it.",2018,Why “Agile” and especially Scrum are terrible
cybernd,2,">  waterfall flowchart was being presented as what not to do.

And coined its term as an accident, because the only reason for its look was that otherwise there was not enough space on the page.",2018,Why “Agile” and especially Scrum are terrible
major_clanger,2,">Do you think the business guys justify their own working time in terms of atomized ""user stories""? No, of course not. So why should the engineers?

To be fair, I feel engineers have a lot more leeway. Analysts, data scientists, product people, higher ups tend to work more on hard time deadlines, often with no estimation. 

In my previous field, of scientific research, it was even more strict 'the experiment & paper need to be finished in 6 months, so we can present at conference X, and publish in journal Y, to help us get funding for project Z'",2018,Why “Agile” and especially Scrum are terrible
ratbastid,0,"> That's how people win at Agilepolitik, too. It's called ""managing expectations"" and though we probably both bristle at it, it's what people do if they want to stay in the good graces of thems above them.

That's not my experience.

What's missing from this whole discussion is the Scrum concept of *empiricism*. 

When you have a track record of a few sprints behind you, it gets easy to estimate.  Or, easier. You break work units down until you can T-shirt-size them, you know how many t-shirts of what sizes you usually get done in a given span of time, and the ranked priority of things to be done, and you literally just *count* to get how much time from now a thing can be expected to get done.

No padding necessary. You've got a baseline velocity. You literally just break out your fingers (and toes, if the backlog is that big), and *count*.

Yeah, things still blow up and mess up your best laid plans. But at least you're not standing at the top of the grand canyon trying to guess how many marbles can fit in it just because you insist on having the illusion of predictability.",2018,Why “Agile” and especially Scrum are terrible
atomicxblue,3,"I've never programmed in an Agile environment, but I'm not sure it would fit my style of working. The fast pace always seems like it would add bugs unnecessarily when my working style is to go slow and try to work out all the logic in my head before I write the first piece of code.

It just always struck me as programming best practices that were written by people who have never programmed before.",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,5,"Agile is an overly broad term, and frankly I don't know what people mean when they say ""agile.""

My experience is that ""agile"" means ""we literally don't have a methodology.""

Scrum is a little more specific so I'll talk about that.

> my working style is to go slow and try to work out all the logic in my head before I write the first piece of code.

Me too! 

> The fast pace always seems like it would add bugs unnecessarily

Scrum is 100% orthogonal to good (or bad) software development processes, including going slowly and putting a lot of work into the design before writing code.

Your goal for a story, or perhaps for even the entire sprint, or for multiple sprints, *could* be  simply to study the problem and produce a plan or a design. 

It doesn't *necessarily* push a team to spit out crap software at breakneck pace.

It's often (badly) used that way, but really doesn't have to be, and I would argue that Scrum's orthogonal to that sort of misguided approach. 

Essentially, all it does is force you to break up the work into manageable chunks at the team level and establishes a rhythm for the team by prescribing daily standups, gives a framework for tracking productivity, etc.

A lot of these things are things that great teams would do anyway. You certainly don't need Scrum to be good. However, considering how *bad* a lot of teams are at these basics (tracking who's working on what, regular communication, etc) I think it would help a lot of bad teams and would not impede good teams.


",2018,Why “Agile” and especially Scrum are terrible
atomicxblue,1,Thank you for your good response. You've given me some things to think about.,2018,Why “Agile” and especially Scrum are terrible
flash357,3,"> On good teams, that's what your sprint planning meeting is for: in conjunction with the team leader (scrum master) the team decides how to achieve their goals, breaks that work up into chunks (a.k.a. ""stories"") and so forth. Those sprint planning sessions are very productive and valuable as the team can discuss implementation approaches, surface objections and concerns, etc. Story complexity is ranked based on a point system relative to stories that have been completed in the past, which (though it sounds silly) works way better than asking engineers to estimate time.
> 
> You are not supposed to do any work outside of a story. If new work emerges (""the CSS code the designers sent us is broken in IE, so we're going to have to redo a bunch of our front-end work"") that goes into a new story. Effectively, this gives you credit for the extra work you're doing... you feel good, and management feels good too because even if they don't appreciate the delays at least they can see exactly where the time (and their money) is going

THIS is exactly how Agile / scrum is supposed to be implemented...

business grooming of requirement should happen, tech grooming of the same requirements should also happen- this is what allows all stakeholders to be on a single call talking through the requirements so that engineers know what the ask is, QA knows what theyre testing, the BA can bulletproof the stories as much as possible and then you can take all of the business asks into a sprint planning session and provide a counter proposal BACK to the business

clearly they wont be getting everything they ask for and prioritizing will need to occur...

thats why you hire a scrum master / BA that knows their shit... so that all of this is done and each individual sprint is productive AF

disclaimer: i am certified to teach scrum masters to do the dam thing

LOL",2018,Why “Agile” and especially Scrum are terrible
manys,3,"it's often ""done wrong"" because estimation is one of the hardest tasks in project management, and agile doesn't eliminate that.

I've never worked in an agile shop, but my sense is that the main benefit is that you can possibly decide to descope tasks earlier, but from 10,000ft it's really just a bunch of little waterfalls.",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,1,"> agile doesn't eliminate that.
> I've never worked in an agile shop

You're right, it doesn't eliminate it, but Scrum has a neat trick that makes it a little better.

The fact is that we're all pretty much shit at time estimation.

However, we're pretty good at comparing *one task to another* in terms of complexity.

So you don't assign *times* to tasks. You assign points: 1, 3, 5, 8, 13, etc. The points are an abstract measure and points are not comparable between teams.

Let's say we have a new task this week. How long will it take? Well, we're shit at estimating that. But it's about the same as an 8-point task that we did last week. So we'll call this new task an 8 pointer.

(There's also a rule of them that anything over *n* points should be broken up into smaller stories. I believe n==13 but don't quote me on that)

Over time, you get a feel for estimating how many points your team can tackle in a week. This point total should, hopefully, trend upwards over time as the team's expertise grows though of course week-to-week fluctuation is very expected.

In this way, you can actually get some decent time estimates as well.... ""The team decided this feature contains 72 points worth of stories, and historically we know that we can tackle around 50-100 points per week, so we'll be able to deliver this hopefully this week but probably more like the middle of next week.""

Now, it's still pretty imprecise. There are a number of obvious weaknesses here, such as when the team is asked to tackle tasks unlike those it has tackled before.

And that's okay! Because no methodology or magic trick can get around that, anyway. The idea with Scrum is that this uncertainty gets surfaced *early*, during sprint planning. Once the uncertainty is expressed then the team should generally create a smaller story to investigate the issue IMHO. 

It's still up to management to accept and understand this uncertainty... there's definitely no magic bullet for that.

You certainly don't need Scrum for any of this, of course, but I appreciate that Scrum considers these some pretty core principles.
",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,"Yeah except it always turns into a militant simulation of hell overburdened with unrealistic expectations and lack of funding. Stories are usually minimalistic and vague leading to a lot subject to interpretation, and let me tell you a tree is never a tree. I wanted an oak tree not this Palm tree! Refactor, still not the right tree. There has to be a middle ground between specificity, and speed.",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,1,"That's just shit management (though engineers are often a part of the problem) and there's no magic bullet for that.

The bottom line is that there's no substitute for breaking a task down into smaller, more specific pieces.

You can either do it ahead of time, or you can just do it on an ad-hoc basis after you've already sat down to code.

Scrum *encourages* you to break down and specify the work together as a team, before the work begins.

Key word there is ""encourages."" Obviously, it can't force the team to work that way. You can ""do Scrum"" and fill your sprints with a bunch of vague, poorly-defined tasks and it will fail just as hard as any other method.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"You're definitely right on with management, which seems to be a pervasive problem",2018,Why “Agile” and especially Scrum are terrible
comp-sci-fi,3,">> straw-man practice called “Waterfall”

They mean Royce's originating paper formulated it only to criticize it. ([commentary](https://pragtob.wordpress.com/2012/03/02/why-waterfall-was-a-big-misunderstanding-from-the-beginning-reading-the-original-paper/))

(I've read somewhere that he deliberated exaggerated it to make a better bad example - since no one was actually doing *pure* waterfall, they did things like prototype first - but couldn't find the interview just now).

",2018,Why “Agile” and especially Scrum are terrible
StabbyPants,3,"> That's no strawman. I've been in the industry for 20 years and that was the dominant paradigm forever, and many teams still work that way.

it is literally a strawman. it was named in order to advocate better software methods, and the strawman was taken seriously instead. sort of like how the Jungle was written to underscore abusive labor practices, but spurred batter meat safety regulation

>  You are nearly always behind, because there is nearly always ""found work""

so you use iterated WF, or spiral, which stops periodically and adds this in.

>  let the engineers themselves be a part of the process to design the stories.

current argument in my team is whether stories are driven by business or tech. i'm pushing for both to be included",2018,Why “Agile” and especially Scrum are terrible
Gotebe,3,"The biggest problem is: what the author of ""Waterfall"" said is nothing like what industry did (you included, and those who uovoted you). Same for Agile.",2018,Why “Agile” and especially Scrum are terrible
Ravek,2,"Isn’t he process you describe called backlog refinement, and sprint planning is when you pick what stories to put on the next sprint (ideally the top X story points if you’ve kept up your refinements)?",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,1,Yeah absolutely.,2018,Why “Agile” and especially Scrum are terrible
bduddy,2,"Inserting slack into an estimate to take into account a typical level of issues is not some bad practice, it's how actual project management works. No level of process can fix assumptions like that.",2018,Why “Agile” and especially Scrum are terrible
Arve,2,"> Add 50% or 100% or even 150% so you have time to deal with emergent work or simply fuck off. 

Multiply every estimate by either pi or e, depending on the team. ",2018,Why “Agile” and especially Scrum are terrible
Kichae,2,">On bad teams, your manager does all of that stuff and spoon-feeds you tasks like momma bird spitting food into baby bird's mouth, and it's just as bad as the article describes.

Data analyst, not a programmer, but I am constantly hamstrung by this. I call it the horizon problem: I'm given a horizon of a single task or report, and so produce code that generates what I was asked for. Then if the next task, or a task 2 or 3 tasks down could have been done simultaneously, I get frustrated and wonder why I couldn't just be filled in on the overall goals that management had for reporting. ",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,2,"YEAH. GOD. This is maddening.

It sucks on a practical level, and it's also just... deeply insulting. Great way to show your employees that you don't value their insights or feelings at all.

I don't care what methodology you use, you should give your employees a sense of the direction in which things are heading and give them some say in how to get there.",2018,Why “Agile” and especially Scrum are terrible
Kichae,1,"Oh yeah. It really suggests, if nothing else, that you don't trust your team to know how to do the job beyond the raw mechanics of ""do this thing I'm telling you to do"". It's deeply insulting, and, at least in my own case I'm completely convinced it's due to my own manager being simultaneously highly ambitious and deeply stupid. It's a way to exercise control and hide the fact that he has no actual plan. ",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,1,"I feel ya!

> I'm completely convinced it's due to my own manager being simultaneously highly ambitious and deeply stupid.

Another, frustrating thing I've been through:

Manager was a very smart guy, and is a better engineer than some members of the team in some areas, *but has no fucking clue about his own limitations.*

I mean, he was better/more experienced in some things. And much less competent than us in others, and even in the areas where he was *good* he wasn't *that much better.* 

And yet he liked to be an autocrat... ¯\\\_(ツ)_/¯

Yeah, he did Scrum badly.",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,2,"I should also note that this is pretty contrary to what Scrum preaches.

> According to Scrum’s founder, “the team is utterly self managing.” The development team is responsible for self organizing to complete work. A Scrum development team contains about seven fully dedicated members (officially 3-9) [...] Each sprint, the team is responsible for determining how it will accomplish the work to be completed. The team has autonomy and responsibility to meet the goals of the sprint.

http://scrummethodology.com

In Scrum management (well, stakeholders) should not be feeding the team disconnected *tasks* like momma bird spitting little chewed up worms into little baby bird's mouth. It should be feeding the team broader goals.",2018,Why “Agile” and especially Scrum are terrible
Kichae,2,"Ig they were good at following the philosophy or the methodology of the chosen work management system, maybe they wouldn't be shitty managers. Alas, shitty managers are usually shit at managing, regardless of how they're *supposed* to be doing it. ",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,1,"I agree. 

I do think, though, that a decent methodology can point a manager in the right direction at least. And a manager (even a crap one) who is at least making an honest effort to better themselves can learn from it.

Management is a skill, after all, and most are not born knowing how to do it.",2018,Why “Agile” and especially Scrum are terrible
Toppinss,2,"I'm a ""business support consultant"" and work as a go-between for the engineers and the business users... and this is how we do it. It's great. We plan out our requirements, I take the technical design back to the business users, tidy up the requirements, go back to the engineers, break everything into user stories based on how the work will be done, and off we go. Big or small, doesn't matter. No one's manager is involved outside of being in attendance and half-listening in case there are questions for them.",2018,Why “Agile” and especially Scrum are terrible
vagif,2,"Waterfall is so pervasive and unkillable that even today it lurks in many places under the names ...Agile and SDLC.
",2018,Why “Agile” and especially Scrum are terrible
ratbastid,2,"As a fellow 20-year veteran and Waterfall surviver, thank GOD for Scrum.

And I feel bad for this dude and what he's been subjected to, because it wasn't Scrum-as-designed. In Scrum, the dev team's agency is of top-order importance. They decide how much work goes into the sprint backlog, and the Product Owner's input is limited to prioritization. They commit to that, and then are left to their own professionalism and competence to get done what they said. And in the end, if they didn't, they're trusted to figure out why and self-correct.

BTW, /u/JohnBooty, what you describe seems to be missing the Product Owner, a key role in Scrum. Do you have to do your own backlog management?",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,2,"I’ve been using “management” as a synonym for Product Owner because I wanted to avoid Scrum’s jargon as much as possible for the benefit of those not already familiar with it. 

I’m not sure if it was a good idea or not, since my generic referral to it as “management” probably greatly undersells the importance of Product 
Owners being actively engaged in the sprints. 

> BTW, u/JohnBooty, what you describe seems to be missing the Product Owner, a key role in Scrum. Do you have to do your own backlog management?

I’m not currently working on any team but when I was at a Scrum shop that was something we did badly IMHO. 

We had these pseudo-absentee managers that were effectively Product Owners but often they were not the actual Product Owners and we were generally not given any access to the actual stakeholders. We did some things right but that part of it was convoluted and dumb. Never understood their reasoning on that one. 



",2018,Why “Agile” and especially Scrum are terrible
ratbastid,1,"Yeah, that's going to fall apart no matter what the development structure is.",2018,Why “Agile” and especially Scrum are terrible
s73v3r,1,"> In Scrum, the dev team's agency is of top-order importance.

That's only as true as the business allows it to be, though. ",2018,Why “Agile” and especially Scrum are terrible
ratbastid,1,"If the business doesn't allow it, it's not Scrum.",2018,Why “Agile” and especially Scrum are terrible
MotherOfTheShizznit,2,"> Only if you do it wrong.

Where do you work and are they hiring?",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,1,"I don’t work there any more, and they did things wrong about as often as they did them right. 

When they stuck to Scrum practices as outlined in the book things generally went well. Often they totally cocked things up though, for reasons they never explained.

Scrum is pretty low on ceremony, TBH. There’s really no reason for half-assing it because it’s pretty simple. If you’re “doing it right” it’s just FAST daily stand ups (like 15 min) and then perhaps 2-3 hours of sprint planning and backlog refinement per weekly/biweekly sprint, which isn’t even really Scrum-specific shit. It’s heavy on the work and light on actual work. ",2018,Why “Agile” and especially Scrum are terrible
bushwacker,2,"I worked at Computer Associates back in the eighties.  Estimation skills were very highly valued and I was the best.

200 people were gathered and I was to tell them how to estimate better in an hour.

I spoke for less than a minute.

Make an estimate.  Triple it, report the tripled amount. When you are done, wank away in testing until you have used 95% of the estimate.

At that point Infopoint ACH settlement was estimated to take 14 man months. I said I could do it myself in six weeks.  I did and then I was fired.",2018,Why “Agile” and especially Scrum are terrible
deeprugs,2,">  

So you mean to say no effective software was ever written 20 years? Yes, Waterfall is pretty old and Scrum is also getting old. It's never an easy transition from Waterfall->Scrum. 
But people have got into the habit of ""evolving Scrum"". Most of the process increments have not worked. We have SAFe Agile with a ""agile train"" but it essentially horrible shitty scrum. ",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,1,"Yes. That's exactly what I said.

No good software was ever written before Scrum was invented.

...

...

...are you serious? You think that's what I said?

I said elsewhere on this thread that while I think Scrum is an improvement on ""waterfall"" *in general*, it's not perfect and certainly does not guarantee success. I have been on really shitty Scrum teams. 

I also said waterfall can go really well in the right hands.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,"Waterfall isn’t even really a “practice”, it’s the normal order of operations. ",2018,Why “Agile” and especially Scrum are terrible
postblitz,2,Everything you write about waterfall is true in Agile. You base your Agile positivity on the best possible example but *gooooood* teams can also do waterfall well. Bad teams are bad.,2018,Why “Agile” and especially Scrum are terrible
JohnBooty,1,"I realize my comment is probably overly wordy, but jeez, did you read it?

In multiple places I pointed out how Agile/Scrum often goes wrong.

I also agree with you that waterfall can go really well. Best manager I ever had was from the days before all this agile stuff appeared.

I would wager, however, that Scrum *tends* to lead to better outcomes. Just because more solid practices are baked in. However, just to reiterate, it can also be done *really* poorly.
",2018,Why “Agile” and especially Scrum are terrible
jsprogrammer,1,what teams are doing it that way?,2018,Why “Agile” and especially Scrum are terrible
jatjqtjat,1,"If your waterfall estimates was bad, then ""padding"" and extra 50% make it good.

Waterfall works when you make good estimates and control scope.  Neither of which are easy.",2018,Why “Agile” and especially Scrum are terrible
swiftpants,1,Awesome comment. Can you suggest resource for a newcomer to learn to implement Agile the right way with his team?,2018,Why “Agile” and especially Scrum are terrible
JohnBooty,1,"This is the canonical book:

https://www.amazon.com/Scrum-Doing-Twice-Work-Half/dp/038534645X

It's pretty short, just a couple hundred pages if I remember correctly. I think reading it would be a solid prerequisite for the team.

There are a number of companies that offer training classes and videos, though I have not been through one myself so I don't have recommendations! 

(In our case, everybody on the team read the book, and management did the training)

At my old job we used Pivotal Tracker for task management. While it facilitates Scrum very nicely, it's certainly not Instant Scrum For Your Team In A Box(tm)! You'd want to have the team familiar with Scrum already.

Upper management is going to have to buy into the Scrum idea. This shouldn't be too hard, since it's got a lot of traction in the last decade or so and it's going to give them visibility and metrics which are things they probably crave.

Good luck!",2018,Why “Agile” and especially Scrum are terrible
swiftpants,1,"Thanks so much!!!
",2018,Why “Agile” and especially Scrum are terrible
saulmessedupman,1,"My sprints usually include a few user stories we break up into smaller tasks and we also include ""enablers"" which is more of a SAFe term for things that allow user stories to work. This article was probably written by someone who got qualified in agile but has never done it properly.",2018,Why “Agile” and especially Scrum are terrible
kanzenryu,1,The Department of Defence required waterfall from its suppliers for many projects.,2018,Why “Agile” and especially Scrum are terrible
drakelbob4,1,Dod is going agile now though. Everybody related is trying to switch now,2018,Why “Agile” and especially Scrum are terrible
ISpokeAsAChild,1,">It never works. You are nearly always behind, because there is nearly always ""found work"" (unknowns, like bugs in other peoples' code you need to work around, etc) that disrupts the waterfall. And even when that doesn't happen, engineers are bad at estimating time, so you screw yourself that way.  
>  
>The only way to ""win"" at waterfall is to basically take your best estimates and absolutely pad the living hell out of them. Add 50% or 100% or even 150% so you have time to deal with emergent work or simply fuck off. And even then you look like an asshole who estimated a seemingly ridiculous amount of time for a seemingly ridiculous task.

Tbh when I worked with a well designed waterfall the project manager would often tell everyone to pad their estimations. In a mature team you don't usually need to explain yourself about why you either blew the deadline or you padded the shit out of your task because you're encouraged to pad your estimation and plan ahead for issues, it's better to reassign a dev earlier than planned on another task rather than running against the clock because you tailored everything to perfection to reach the release deadline.",2018,Why “Agile” and especially Scrum are terrible
major_clanger,0,">Story complexity is ranked based on a point system relative to stories that have been completed in the past, which (though it sounds silly) works way better than asking engineers to estimate time.

In my experience, I have never seen story points work well as estimates of time.

The following play the dominant role:

- Developer experience, familiarity with context & service/component being changed plays a huge part. 
- Meetings & holiday (especially if it's dev most familiar with service/component being worked on in sprint)
- deployment/infrastructure delays

But you specifically are not supposed to account for this in scrum.

And then, if the task is to change behavior of a live legacy system, I.e. DB schema change, 90% of the time is figuring & finding out stuff like, 'ah, do change X, I also need to change Y, which can have knock on effects on Z'. You can't easily do this without getting stuck into the code, so impossible to plan for.

So sprints absolutely shouldn't be taken as commitments to finish X in two weeks, they should always be seen as a best effort, with inherent uncertainty.",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,2,"> I have never seen story points work well as estimates of time.

Yep, and that's explicitly by design.

Story points aren't meant to map directly onto time. You know *roughly* how many points your team can tackle per sprint, and that's really all it claims to help you estimate.

> Developer experience, familiarity with context & service/component being changed plays a huge part.

Absolutely. But again this is by design. An 8-point story is an 8-point story no matter who works on it. It might take *you* an hour. It might take *me* a week since I'm the new guy who just joined the team and I don't understand your crazy legacy codebase at all yet. 

That's okay. For one thing, this would clearly signal that I need to get up to speed - perhaps we should pair, etc? Or, at least, we should be seeing an improvement in my performance over time, and eventually I should hopefully be matching the weekly point totals of other team members.

So it's useless for predicting the time to completion for a single story.

However, over the course of a sprint (roughly 120 to 720 people-hours) it should sort of even itself out, and we can usually get a rough idea of what the team can do in a single sprint. 

> * Meetings & holiday (especially if it's dev most familiar with service/component being worked on in sprint)
> * deployment/infrastructure delays

This is baked into Scrum, isn't it? At least in Pivotal Tracker, there's a little drop down to denote your team's strength for the week. 

In other words, if your 5-person team is averaging 100 points per sprint, you're supposed to tell it you're only going to be at 58% strength this week because two of your team members are on vacation and one of the other devs took a personal day. Pivotal then adjusts the sprint goal downward accordingly. Whether that's part of Scrum proper or just a nicety of Pivotal, I don't recall.

> So sprints absolutely shouldn't be taken as commitments to finish X in two weeks, they should always be seen as a best effort, with inherent uncertainty.

Absolutely!",2018,Why “Agile” and especially Scrum are terrible
s73v3r,0,">In my experience, I have never seen story points work well as estimates of time.

That's because they're not. They're estimates of complexity and effort. ",2018,Why “Agile” and especially Scrum are terrible
major_clanger,1,But they're used to decide how much work the team should aim to complete in a fixed unit of time (i.e. a two week sprint).,2018,Why “Agile” and especially Scrum are terrible
kfh227,1,"Many teams do waterfall on paper.  In reality they are doing agile (before agile was a thing) and reporting things to management in a waterfall manner.

Thinking any process is strictly followed is bantha fodder.  Sprints are supposed to be a set of tasks for n weeks.  Who here never adds tasks during a sprint?  LOL

Oh, I work on nuclear submarines.  So don't think that I wasn't exactly doing vending machines.",2022,Why “Agile” and especially Scrum are terrible
johnnysaucepn,957,"The author seems obsessed with blame - that developers fear the sprint deadline because they believe it reflects badly on them, that velocity is a stick to beat the 'underperforming' or disadvantaged developers with.

&#x200B;

And I'm not saying that can't happen. But if that happens, it's a problem with the corporate culture, not with Agile. Whatever methodology you use, no team can just sit back and say, ""it's done when it's done"" and expect managers to twiddle their fingers until all the technical debt is where the devs want it to be. At some point, some numbers must be crunched, some estimates are going to be generated, to see if the project is on target or not, and the developers are liable to get harassed either way. At least Agile, and even Scrum, gives some context to the discussion - if it becomes a fight, then that's a different problem.

&#x200B;",2018,Why “Agile” and especially Scrum are terrible
thebritisharecome,486,"As a developer of many years I like the agile approach, sprints help provide structure and usually realistic micro deadlines to prevent the workload from getting overwhelming.

Stand ups are there not only to faciliate the process but also help communication amongst teams.

I also think the outdated concept that Developers are not good with clients is just as harmful as people who think all developers are smelly, autistic sociopaths who can't talk to women. 

If you're a developer and you're not good with clients,with few exceptions you can learn just like any other role (if your role needs that). To say it's ok to be socially inept ""because i'm a developer"" is a cop out and I'm fed up of being in an industry where bad behaviour is nurtured because they're too afraid to address bad actors. it's nonsense and perpetuates a harmful ecosystem.

",2018,Why “Agile” and especially Scrum are terrible
got_milk4,112,">To say it's ok to be socially inept ""because i'm a developer"" is a cop out and I'm fed up of being in an industry where bad behaviour is nurtured because they're too afraid to address bad actors.

Both sides of an argument here: dealing with a client is the role of a project or delivery manager. I've been brought in to *develop*, of course I'm going to push back if my role suddenly changes to being a client-facing one (exception of course if I were to know this coming into the position).",2018,Why “Agile” and especially Scrum are terrible
thebritisharecome,158,"Sure, but there's a difference between needing to speak to the client as part of your role and being capable of talking to the client. 

The article implies Developers are incapable of talking to a client because ""we are very literal people"". Some are, some aren't just like any other person in any other role.",2018,Why “Agile” and especially Scrum are terrible
LL-beansandrice,93,"> we are very literal people

Fucking hate these stereotypes. ""We"" aren't anything except people who are paid to develop software. ",2018,Why “Agile” and especially Scrum are terrible
thebritisharecome,21,"Exactly, it's an old derogatory stereotype to put down people in what was a new field because people were scared. Some people fit the stereotype but even back in the day there were plenty who didn't.",2018,Why “Agile” and especially Scrum are terrible
LL-beansandrice,21,"> Some people fit the stereotype but even back in the day there were plenty who didn't.

My parents were in CS in the 80s and both of them always say that it was much more diverse (gender-wise) and there weren't the stereotypes that there are currently. Obviously anecdotal but I think it counts for something. ",2018,Why “Agile” and especially Scrum are terrible
cheesehound,11,"Programming was considered a clerical job for women in the 1960s, and that only changed once managers realized what a difficult engineering problem it actually was. At that point the prevailing chauvinism led to them attempting to hire new, more  engineer-like programmers. They began to use the ""anti-social math nerds"" stereotype as actual *hiring criteria*, which eventually led to the situation we have today.

source: [Researcher reveals how “Computer Geeks” replaced “Computer Girls”](https://web.archive.org/web/20180401152644/http://gender.stanford.edu/news/2011/researcher-reveals-how-%E2%80%9Ccomputer-geeks%E2%80%9D-replaced-%E2%80%9Ccomputergirls%E2%80%9D)
",2018,Why “Agile” and especially Scrum are terrible
NorthernerWuwu,2,"Anecdotes will vary though of course. I was in CS in the late '80s and there were exactly zero women taking any of the core courses in my stream. Hell, the stereotypes we disparage were completely accepted in the '80s for that matter!",2018,Why “Agile” and especially Scrum are terrible
GhostBond,-2,"If I heard someone in school growing up saying people who like computers and games is a ""loser"", 90% of the time it was a said by a girl.  

I'd prefer to have a more mixed gender field but it's tiring to be on the end of ""computers are for losers"" from women, then get absurd claims of ""uh...see, you guys are keeping us out of this great field!"" later from those same women.  

I don't think this is actually about getting more women in the field either. A lot of wonen started going into cutting apart dead bodies when csi tv shows made it look glamorous. When the message being pushed about the field is ""it sucks to be in it for women!"" wimen are going to avoid it.",2018,Why “Agile” and especially Scrum are terrible
LL-beansandrice,-1,oh no,2018,Why “Agile” and especially Scrum are terrible
cursed_namrut,2,">Some are, some aren't just like any other person in any other role.

For a long time, you could get promoted to very senior roles within engineering, even if you had no social skills to speak of. I haven't been part of orgs where you could be an absolutely miserable person to work with and get elevated on skill alone - except in engineering.

I think that's going away, partly because having a PM play broken telephone doesn't work and everyone knows it. But when I was a PM, I got some serious pushback from engineers to the mere suggestion that they go talk to the enduser, even when that would have solved a lot of problems and moved the project forward.",2018,Why “Agile” and especially Scrum are terrible
ex_nihilo,3,"You have to get some background on the author. I'm on the spectrum myself, but Church has some serious mental health issues. Google him.",2018,Why “Agile” and especially Scrum are terrible
thebritisharecome,2,Never heard of him until now but [lmao](https://twitter.com/MichaelOChurch/status/1062025946595770368) he thinks because he's getting some traffic it's an indication his points are valid. Oh dear.,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,"In fairness, have you ever tried to talk to a client? Those guys are assholes.",2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,9,"You're either dealing with a client, or a client proxy (product manager). I don't think you can be a developer in a business environment and not expect to deal with that.",2018,Why “Agile” and especially Scrum are terrible
psychicsword,6,Maybe it is because I do development on inhouse systems rather than working on a product but to me I haven't been brought in to just develop. I have been brought in to develop working software that meets the business objectives by providing as much value as early as possible and mitigating future development risk. In a development environment where the software is being used by a 3rd party the business objectives may be internal and I may get those from a product or deliver manager but it is still my job as a senior developer to make sure that my code is always working towards them and not against them. The only way to do that is to talk to them and keep an ear to the ground. ,2018,Why “Agile” and especially Scrum are terrible
thebritisharecome,3,"Yup and in this case your own business are the ""client"" it's no different really except maybe you've got more initial trust from the client.",2018,Why “Agile” and especially Scrum are terrible
Euphoricus,2,I think there is point of differentiating between reasonable and unreasonable client. IMO it is management's job to bring in reasonable client and then have that reasonable client talk to developers.All the problems devs have with clients are often clients being unreasonable and childish.,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"How do you feel about Scrum then? I liked my experience with it because our PO did 95% of client comms and fed back the important points to us later. Plus he would actually ""manage expectations"" and push back on unreasonable demands, whereas honestly I think I myself would have been more likely to cave in to pressure if I'd done the talking directly",2018,Why “Agile” and especially Scrum are terrible
am0x,1,"While not necessarily dealing with clients, there is more to a role than just developing. To be a good worker in any field requires a certain degree of communication skills, which many developers lack. They also tend to be the ones that end up making the most mistakes as well simply because they don't communicate what they did and when they did it. ",2018,Why “Agile” and especially Scrum are terrible
Andodx,1,"If a project manager/product owner/scrum master can present you an expert on the client side that you need to solve a specific problem more quickly than you could on your own, you are in need of the adequate skills to not fuck up that contact, but to gift him/her with an outstandingly professional experience. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"That's just nitpicking about definitions. In some jobs a developer has to interact with clients. The biggest example is freelance developers, but even internal developers in smaller companies often have client facing responsibilities.",2018,Why “Agile” and especially Scrum are terrible
ex_nihilo,3,">If you're a developer and you're not good with clients,with few exceptions you can learn just like any other role (if your role needs that). To say it's ok to be socially inept ""because i'm a developer"" is a cop out and I'm fed up of being in an industry where bad behaviour is nurtured because they're too afraid to address bad actors. it's nonsense and perpetuates a harmful ecosystem.

Being good with customers is a skill you can sell too. Some people are better at it than others, but technical skills and people skills are not mutually exclusive. If you're really technically smart and also comfortable in social situations, you can make fucking BANK selling software or delivering services.",2018,Why “Agile” and especially Scrum are terrible
sigmacoder,2,"Seconded, I've spent most of my career in Agile, and I can just tell by working with people who've been around a while it's the best that management has ever been.  I really don't know what the author is comparing agile to, a 3 man boutique startup?  In the real world you have to justify your costs and implement features that increase or retain revenue.  The fact that (under real agile at least) your bosses trust you to identify and improve the product you are responsible for is light years ahead of the old ""we'll hire consultants to come in and tell you what to implement"" model.  
Sure you have to document and pitch your changes, but that's just called basic communication.",2018,Why “Agile” and especially Scrum are terrible
thatVisitingHasher,1,"I completely agree. When you are making a 6 figure salary, you don't get the option of not talking to people. I feel like the ""developers are not good at talking to people"" is there, so business people feel like they provide value.

&#x200B;

I'm at the point now where if you are a product owner, you should at least know the basics of coding. If you're a QA, or scrum master you should absolutely be coding in some degree. It's almost 2019. the concept that technical people can't communicate, and that we have non-technical roles on a scrum team is outdated.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"Agreed about the structure being helpful, but on the other hand, the same structure creates a disincentive to work on things that don't fit in the story, e.g. a component really should be refactored, but it's not a requirement, so people don't do it because they want to keep their numbers up. I realize that's probably more a byproduct of management / company culture than a fault of Agile per se, but on the other hand, I think these management fads tend to lend themselves to issues like this because of the sort of people who adopt them (i.e. enabling bad management by giving them a system to blame).",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"Yeah I really don't get the hate for stand-ups in particular. I *want* to update my team on my progress and hear the rest of the sprint situation. We don't operate as lone wolves who disappear for a month and come back with a finished product - we've actually had trouble with some devs attempting that, and getting off course without realising, because they never kept anyone in the loop

And for the record our 7-man team's standups were 3 minutes if everything was going well, and up to 10 minutes of *actually useful problem solving* when something was going wrong. I don't know how people manage these gruelling half hour standups that I hear about",2018,Why “Agile” and especially Scrum are terrible
Venne1139,1,"> Developers are not good with clients is just as harmful as people who think all developers are smelly, autistic sociopaths who can't talk to women

Right but I actually *am* an autistic (I got my job through a program for people with autism) sociopath who hasn't 'spoken to a woman' since probably July. Sometimes the stereotypes are true. It doesn't make us bad actors. 

We can do our jobs just fine as long as we're kept away from clients. 

>where bad behaviour is nurtured because they're too afraid to address bad actors. 

Wait I'm confused. Does being socially awkward automatically make you a 'bad actor'? 
",2018,Why “Agile” and especially Scrum are terrible
thebritisharecome,2,"Of course people like this exist but it's far from the norm it's made out to be.

And no, being an asshole and using the excuse ""I'm a developer"" makes someone a bad actor. Someone who actually struggles or has a mental disorder are not typically the bad guy in this instance",2018,Why “Agile” and especially Scrum are terrible
venuswasaflytrap,122,"Yeah, it's like an article being mad at having music in the office by arguing that 'My Boss locks me in a room and blares Panama by Van Halen on a loop - that's why allowing music in the office is bad'.

The problem is with your boss, not with music, or whatever tools, including aspects of agile or scrum, they use to abuse you with.",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,42,"> My Boss locks me in a room and blares Panama by Van Halen on a loop - that's why allowing music in the office is bad

Side note: if anybody's hiring for such a position, let me know so that I can get you my resume ASAP!",2018,Why “Agile” and especially Scrum are terrible
venuswasaflytrap,3,"https://www.youtube.com/watch?v=ZDkWRP67Es0

",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,I'm so happy that I'm not the only one,2018,Why “Agile” and especially Scrum are terrible
doublehyphen,1,Same here!,2018,Why “Agile” and especially Scrum are terrible
koalillo,1,"I worked in a records company where they had a feud among DJs, so they did not use headphones. Some of them would be on the phone all day selling a record (playing pieces of it). Some of them had to do cuts (and would repeat the same bit again and again). 

I don't recommend you that.  

On the other hand, now I laugh at people who can't concentrate in open-plan offices. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,>Reach down between my legs…easy the seat back…,2022,Why “Agile” and especially Scrum are terrible
JohnBooty,1,"This was a very confusing reply to see in my notifications, considering I'd totally forgotten the original post from *three years ago* lol",2022,Why “Agile” and especially Scrum are terrible
Deleted Account,1,Is it still on loop? 🤣,2022,Why “Agile” and especially Scrum are terrible
GhostBond,1,">  'My Boss locks me in a room and blares Panama by Van Halen on a loop - that's why allowing music in the office is bad'.  

In your analogy Agile says the proper process is for rhe boss to lock people in a room and blare music and this will be more productive.  

Agile claimed it would improve the situation, instead it made it worse, that is Agile's fault. ",2018,Why “Agile” and especially Scrum are terrible
hammonjj,1,"Extremely relevant: https://youtu.be/ZDkWRP67Es0

Sorry, I couldn’t help myself. ",2018,Why “Agile” and especially Scrum are terrible
immibis,1,And every boss s/he's previously worked for that has allowed music has done the exact same thing. And everyone on Reddit has had the same experience.,2018,Why “Agile” and especially Scrum are terrible
venuswasaflytrap,2,"I’ve had both. 

I’ve had agile used as a stick to get us to try to do things faster and be micromanaged more while accepting rapid changes.

I’ve also had it facilitate some of the best work I’ve ever done.

I’ve also had waterfall-style processes and kpis, and similar used as a stick. “You’ve had months to build this” - “you only told me about this major feature a week ago” - “it’s implied in the spec, where it says users should be happy”.

What I’ve never had is non-agile facilitate good work. 

If the developers themselves are managing their agile process, it’s incredibly useful. It’s not a deadline or weapon, it’s just a way to make stuff transparent to each other and the stakeholders. “ I’m working on this part, because it seems like the next most important piece”. And then you either get “yes great” or “oh no, we don’t even really need that”.

",2018,Why “Agile” and especially Scrum are terrible
indigomm,103,"I agree. The author certainly has problems with their management culture. No process will magically solve your technical debt, or even tell you when to tackle it. Designers will always push to get the design perfect - that's their job! And people (not just management) will always want estimates. How they use them and understand them - that's where you need to educate people.

Blaming a process like Scrum is a bit like blaming your version control system because it doesn't magically understand and merge everyone's changes together. ",2018,Why “Agile” and especially Scrum are terrible
RallyPointAlpha,14,"What you're missing is that it's not just HIS management and business culture.  Many other companies are just like this and forcing ""agile"" and ""scrum"" down everyone's throat.  It's just another stupid fucking fad spreading across corporations where execs feel like they are doing the next hip cool thing to look good and be competitive.  

&#x200B;

He wasn't saying agile and scrum were bad... he's saying it's being implemented very badly across the industry.  ",2018,Why “Agile” and especially Scrum are terrible
secretpandalord,9,"> He wasn't saying agile and scrum were bad...

The article is literally called ""Why “Agile” and especially Scrum are terrible"". If that's not exactly what he's saying, he's really bad at saying it.",2018,Why “Agile” and especially Scrum are terrible
orbjuice,39,"He’s right in the sense that it encourages top down cherry picking, however. The problem I’ve seen time and again with Agile shops is that it not only allows poor holistic systems design to creep in, the sprint model actively encourages it. It assumes that if a system is currently functioning in production that it must therefore be optimal, so any further software pushed by product owners can therefore be accreted on to it. The following snowball effect means you slowly build a system around a design flaw until you have mountains of accumulated technical debt; all because Agile as a whole operates on the micro level and assumes at the macro that everything is fine. 

One can argue that this is why you have Architects, but any poor design is still going to be firmly entrenched by the time an organization decides that they need them. No one wins with the micro-level-focused Agile approach, but I’ve seen businesses consistently complain that they “did the Agiles so why ain’t it good”. ",2018,Why “Agile” and especially Scrum are terrible
IRBMe,58,"I found a few of good ways in my team to handle technical debt.

1. If a task involves working on a class or module which is missing unit tests (and we have a lot of those in some of the legacy code-bases), then the estimate for the task usually includes the effort required to do some refactoring and at least start adding some unit tests.
2. If somebody finishes the tasks that they were assigned in the sprint, they're free to do what they want as long as it's in some way productive and somewhat relevant to their job, and one of the things that people often work on is refactoring code that has been bothering them for a while.
3. We have a technical debt multiplier that is visible to product management and roughly reflects our estimate of the current state of the system. All estimates for all tasks are multiplied by this value, so a perfect system with no technical debt would have a multiplier of 1.0. Ours is currently at 1.7. If product management demand that something be delivered sooner, we can show how that will affect the technical debt multiplier and it becomes painfully obvious to them that those kinds of decisions aren't free but actually have a real cost, which were previously hidden. It also means that the product manager is more likely to prioritize purely technical tasks that reduce the multiplier in order to reduce future estimates.",2018,Why “Agile” and especially Scrum are terrible
lordzsolt,28,"Oh, the technical debt multiplier sounds very interesting.",2018,Why “Agile” and especially Scrum are terrible
IRBMe,16,"It's something that has worked well for us. We figured that one of the key components of agile was transparency, so we tried to find a way to make the technical debt transparent to non-developers and came up with this. I've seen other similar ideas elsewhere, including representing time wasted due to technical debt vs productive work as a ratio or proportion e.g. 50% could mean half the time is wasted on technical debt. Whatever you end up using, if anything, you need to make sure product management understand it and buy into it.",2018,Why “Agile” and especially Scrum are terrible
sqrlmasta,13,I like the idea of a technical debt multiple. How do you go about calculating it? ,2018,Why “Agile” and especially Scrum are terrible
IRBMe,37,"It's difficult to quantify exactly, but we roughly keep track of how much time is wasted on stuff due to technical debt. For example:

1. If unit tests have to be added to a component before a bug can be fixed.
2. If a function has to be refactored before somebody modifies it.
3. If somebody wastes a disproportionate amount of time trying to understand a component or a function.
4. If we have to fix bugs that likely occur due to overly-complex or badly maintained code.
5. If we have to spend time tracking down subtle interactions between components.

Things like that. The multiplier is then 1 + (time wasted on technical debt / total time). For example, if you spend 8 days on something and feel that about 2 of those days were caused by technical debt, it would be 1 + 2/8 = 1.25. A future task that we think will take about 4 days would then be multiplied by 1.25 to give 5.

When management ask why estimates are so high, the technical debt multiplier is very convenient. It shifts any blame away from the developers (who many not even be the ones who implemented most of the code) and makes it easier to sell technical tasks that reduce technical debt and thus lower that multiplier.

It's also a great tool to make management appreciate the impact of certain decisions. ""*Sure we can do that 2 weeks faster, but doing so would probably increase our technical debt multiplier by 0.1 and make all future estimates 10% larger.*""

---

*Edit*: my formula was from memory and is probably not right. See [this comment below](https://www.reddit.com/r/programming/comments/9wcku8/why_agile_and_especially_scrum_are_terrible/e9lml7e/) for a more accurate calculation.",2018,Why “Agile” and especially Scrum are terrible
Ozzy-,18,This is pretty ingenious. You should write a Medium article on it so the project managers of the world can see this.,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,Not enough pictures. You need at least 20MB of jpgs before you can even consider writing a Medium article. ,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,[deleted],2018,Why “Agile” and especially Scrum are terrible
IRBMe,1,"You're right. I think I just got the formula wrong as I was trying to figure it out from memory. In practice, we don't really calculate it often. We went through an initial exercise for a couple of sprints where we tried to track technical debt related wasted time and set the initial value based on that, but after that you start to get a feeling for roughly how much time you're wasting as a team, and you get a feeling for whether that number is moving up or down.

Obviously you want it to be going down, but if the product owner or management are doing things like pushing tight deadlines, springing last minute requirements on you, asking you to do unplanned releases, or you're getting more bug reports and customer support requests than normal, then you just start increasing that value. At least with that value there, they can see some kind of quantitative affect that these things are having.",2018,Why “Agile” and especially Scrum are terrible
Blou_Aap,3,"We used Sonar with some detailed rule sets that also reflected a multiplier. And it worked on Androod, iOS and web projects. I worked at a bank before, it was quite a cool setup.",2018,Why “Agile” and especially Scrum are terrible
hippydipster,2,"The tech debt multiplier sounds like velocity.  How do you really know what the tech debt multiplier should be?  Is it just a gut feel from the developers?

Also, as far as refactoring goes, I usually discover refactoring opportunities while I'm doing a jira.  Should I avoid doing it because we didn't account for it up front?  Seems like a wasted opportunity to not do improvements that are staring me in the face right now.",2018,Why “Agile” and especially Scrum are terrible
IRBMe,1,"> The tech debt multiplier sounds like velocity.

Velocity will certainly take into account time spent due to things like technical debt, but it's rather opaque to management and not all teams use velocity. The idea of the multiplier is just to make it more transparent to the non-developers, and to give a tangible cost to things that will increase that debt. Other similar systems I've heard of are a traffic-light system (red, amber, green) or some other scale to communicate the state of the code-base and how it affects progress.

> How do you really know what the tech debt multiplier should be? Is it just a gut feel from the developers?

It's never going to be perfectly accurate, as there isn't exactly a clear distinction between time wasted due to technical-debt and time that's just necessary to spend, so there's a bit of a gut-feel to it, but you could spend a couple of sprints keeping track of how long you're spending on things like trying to understand overly-complex or poorly maintained code, fixing bugs, adding unit tests to old code, refactoring legacy code etc. Once you have that initial value measured, you get a feel for whether or not the code-base is generally moving in the right direction (reducing technical debt), staying still (technical debt remains the same), or moving in the wrong direction (more technical debt is being added), so can adjust the multiplier up or down, bearing in mind that it's more of a tool for communicating with management.

> Also, as far as refactoring goes, I usually discover refactoring opportunities while I'm doing a jira. Should I avoid doing it because we didn't account for it up front? 

I think that's a decision that depends on a lot of variables, and is ultimately up to the individual developer at the time. At one extreme, you could just do no refactoring ever unless there's a specific task for it; at the other extreme, you could spend so long refactoring code that you never actually get any of your tasks completed, and may end up actually introducing new bugs. Both of these are bad, and the ideal situation is likely somewhere in the middle. There will be times where refactoring a piece of code is going to be so much effort and risky enough that there should perhaps be a separate task to address it, and there are times when refactoring a bit of code makes sense to do as part of an existing task. The latter is most often the case, I've found, but there are times when I've introduced a task to specifically rewrite a particularly bad component, and something like a technical debt indicator/factor/multiplier/warning helps to sell that task to the product owner and to management.",2018,Why “Agile” and especially Scrum are terrible
hippydipster,1,"I have found that when facing a choice of A) just fit the new feature or fix in for now or B) refactor the code so that the new feature or fix is much easier that most of the time I opt for A) I end up regretting it.

I've also found that the only really reliable way to get good code and prevent endless regressions is fast-running unit tests.  Integration tests are no good for this usually.  Which is sad, because quite often, how to run fast unit tests is an unknown.

I'm going to think about this question of recording time spent doing these things that indicate tech debt.  I like the idea in theory, but in practice, being outside myself enough to know that I'm currently spending time on tech debt would be tough.",2018,Why “Agile” and especially Scrum are terrible
IRBMe,1,"> I've also found that the only really reliable way to get good code and prevent endless regressions is fast-running unit tests.

Absolutely. I'm working with a huge legacy C++ code-base at the moment that had absolutely no unit tests, and it's absolutely horrible. One of the things I've been pushing hard is adding unit tests, but it's difficult to bolt tests on to already existing code that wasn't designed with it in mind. The result is that the unit tests end up having to construct a large number of different dependencies, some of them quite large. But it's sure better than nothing!

> I like the idea in theory, but in practice, being outside myself enough to know that I'm currently spending time on tech debt would be tough.

If you find yourself swearing at the code a lot and saying ""*This shouldn't be so difficult! Why is it so difficult?*"", that's a good indication :)",2018,Why “Agile” and especially Scrum are terrible
mindless900,30,"> The problem I’ve seen time and again with Agile shops is that it not only allows poor holistic systems design to creep in, the sprint model actively encourages it. It assumes that if a system is currently functioning in production that it must therefore be optimal

This seems to be a problem with weak technical leaders not being able to prioritize tech debt over feature work. They either need to be empowered to say no to product or be better at selling the needs of the development team.",2018,Why “Agile” and especially Scrum are terrible
teddy_tesla,10,Yeah I'm about to go into a refactor sprint. And I don't really know how non agile ways of developing really solve tech debt,2018,Why “Agile” and especially Scrum are terrible
psychicsword,2,"My team had an entire firefighting year of sprints just before I joined it. They were having a lot of problems keeping their head above water and none of the monitoring was good enough to catch customer facing issues before they became one so they did 50/50 time splits between putting out fires, building early detection monitoring, and reducing tech debt. 

People really need to stop blaming a team process and methodology for bad tech and non-tech leadership. ",2018,Why “Agile” and especially Scrum are terrible
orbjuice,6,"Okay, except the methodology gives nontechnical people a false sense of security, which is what I was alluding to. Maybe it’s not the methodology’s fault per se, but the culture around it gives false confidence that you follow it and can just turn off critical thinking (yes, hyperbole but you get what I mean). ",2018,Why “Agile” and especially Scrum are terrible
secretpandalord,5,"People are going to find a false sense of security if that's what they're looking for. The methodology is not turning peoples' critical thinking off; they're doing it themselves. So ""don't use methodology X"" isn't nearly as useful a lesson as ""don't get complacent"".",2018,Why “Agile” and especially Scrum are terrible
orbjuice,1,“Guns don’t kill people; people kill people.”,2018,Why “Agile” and especially Scrum are terrible
GhostBond,6,"> People really need to stop blaming a team process and methodology for bad tech and non-tech leadership.  

The sales pitch for agile is that it will solve these problems.  

It's completely fair to blame a tool for not fixing the issues that were the whole reason for buying it.  

If the introduction of agile changed your job from being a bit boring, into being a living hell, you're going to be even more upset.",2018,Why “Agile” and especially Scrum are terrible
secretpandalord,2,"If you're buying your process from someone else, you're already fucking it up. If a company says it can solve your problems before they even know what your problems are, they are lying to you.",2018,Why “Agile” and especially Scrum are terrible
psychicsword,0,"Consulting companies may make the sales pitch that their methodology is the silver bullet to your team or department's challenges but if I made those types of claims about monitoring software you would laugh. Especially when the first bullet of the agile manifesto is literally ""*Individuals and Interactions* over processes and tools"". When your management is hearing the message that agile is a silver bullet and that is the first point then maybe you have some communication problems. 

Agile is a tool to enable open an honest communication and build trust over the long term by setting goals in the short term. It is about small incremental changes that will eventually build towards bigger ones. None of that works if you just make the initial change by claiming to have switched to agile. The introduction of agile is like the introduction of one-on-ones as a management technique. It won't solve anything if you still handle problems in the same way. 

Remember we are dealing with people, not machines. You can't plug in a bunch of variables in a process and expect results to churn through. It requires trust, communication, and understanding just to account for even part of the problems that can sink a team before it even begins.",2018,Why “Agile” and especially Scrum are terrible
do_pm_me_your_butt,0,Wait you can solve tech debt???,2018,Why “Agile” and especially Scrum are terrible
hmaddocks,1,">	be better at selling the needs of the development team.

This. I’ve seen countless examples of team leads not being able to articulate how important non feature work was and then blame management for “not getting it”. ",2018,Why “Agile” and especially Scrum are terrible
AbstractLogic,1,"Strong technical leaders are almost always the failure point. These leaders need to push for technical debt, package upgrade, prevent feature creep, get management to buy into what estimates mean, what points mean, getting the correct work to Seniors and Juniors and fighting for R&D.

I don't blame a CEO for needing time estimates or a PM for wanting ROI. I blame a tech lead for not being able to explain to the CEO that estimates are estimates and to the team that estimates are not due dates so don't crush yourself, and explaining to the PM that tech debt reduces time to production, product stability and security. 

Business people don't understand these things because WE the technical leaders of our groups, have failed to explain them. ",2018,Why “Agile” and especially Scrum are terrible
IRBMe,1,"> This seems to be a problem with weak technical leaders not being able to prioritize tech debt over feature work.

That's one of the struggles that I've faced several times before. It's difficult being in the position of leading a team who are working on a legacy code base that needs a huge amount of work to improve, but upper management and sales are pushing constantly for additional features or custom modifications so that they can get more sales. The main thing that I've found that helps is to try to take the pain that the development team feel and turn it from some opaque, hidden cost to something that is transparent and easily understood by non-developers.

Management like easy info-graphics, graphs and quantifiable numbers, so you take advantage of that. For example, a traffic-light system for technical debt, where red means the code-base needs a huge amount of work, amber means it needs some work, and green indicates that the code-base is in good shape. If they then understand that green means fewer bugs, shorter time estimates for future work, faster turn-around time for releases, more reliable software, faster ramp-up time for new team members, fewer required resources etc. then there's an incentive for them to push for a green code-base. And now you, as a technical leader, have ammo that allows you to push back on things.  

For example, if a sales team is pushing for some new feature to be delivered on a tight schedule, you can say ""*Sure, we can do that. But it's going to push the code-base from amber to red. Are you willing to accept responsibility for that?*"" And sometimes the answer is still yes, but sometimes they will go away and re-think it. Of course, the problem with that system is that if it's a legacy code-base that's already in red and red is the norm then it loses its power, so maybe something else would be better in that case, like a scale or something. I described how I've used a [multiplier](https://www.reddit.com/r/programming/comments/9wcku8/why_agile_and_especially_scrum_are_terrible/e9k08h7/) above, and found that to work well.",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,25,"I worked in a Scrum shop for ~3 years.

> The problem I’ve seen time and again with Agile shops is that it not only allows poor holistic systems design to creep in, 

This happened a lot with us, but...

> the sprint model actively encourages it.

I don't know about that!

What Scrum does is make things explicit. If you want to spend a sprint just optimizing/refining some existing code, you can do that, but there needs to be an explicit discussion about it first.

Good management understands that sometimes you need to do this. Bad management doesn't. I'm not sure that Scrum encourages it more than any other methodology. 
",2018,Why “Agile” and especially Scrum are terrible
indigomm,6,"In my experience, all companies think that their production system is perfect. Whether you do waterfall, RAD, DSDM, Scrum or another agile approach - the assumption is always that what is there is optimal. It's not a process thing, it's a lack of understanding and skills in managing software development projects.

It's needs us, as an industry, to explain that it isn't like that. We need to be open about technical debt, and help people understand why it is necessary to address it and what the implications of not doing so are.

",2018,Why “Agile” and especially Scrum are terrible
secretpandalord,1,"The biggest problem here is that managers, by and large, really don't like being told they're doing it wrong by people making less money than them. This is why consulting is such a big industry.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,">The following snowball effect means you slowly build a system around a design flaw until you have mountains of accumulated technical debt;

Tenant Nine, ""*Continuous attention to technical excellence and good design enhances agility*,"" seems to have been almost universally missed.",2022,Why “Agile” and especially Scrum are terrible
orbjuice,1,"I mean if we’re going down that rabbit hole, this:

Individuals and interactions over processes and tools
Working software over comprehensive documentation
Customer collaboration over contract negotiation
Responding to change over following a plan

Feels wildly divorced from what Agile has become. Agile as implemented today is completely about processes, tools, comprehensive documentation, contract negotiation, and following plans.",2022,Why “Agile” and especially Scrum are terrible
Deleted Account,2,👍,2022,Why “Agile” and especially Scrum are terrible
KFCConspiracy,2,"That sounds like an issue of the organization not having senior enough resources up front. The way that's managed in agile, which agile doesn't directly provide a response to, but how you should do it is organize your initial sprints around architecture (Drawing the diagrams, getting requirements right, getting things organized correctly and setting design patterns). You can fail to architect a project correctly in any methodology. 

Also, the team lead needs to be an advocate for the team, why is paying down technical debt something of business value? They need to explain that to management as agile prioritizes business value. Agile doesn't reward teams that do not advocate for the technology or don't have strong advocates, that's definitely true. But I don't think I've ever seen a project management methodology that does. ",2018,Why “Agile” and especially Scrum are terrible
dwidel,1,"Yeah, the only answer seems to be constant refactoring.  But that's not going to happen.  I can't tell QA they have to retest the whole product this sprint because I refactored everything so that the new screen I'm working on now works efficiently.",2018,Why “Agile” and especially Scrum are terrible
s73v3r,2,"Scrum doesn't cause the problem, but for a lot of these shitty management situations, I'd say it definitely exacerbates the problem. ",2018,Why “Agile” and especially Scrum are terrible
rpgFANATIC,19,"My favorite explanation of scrum was that it doesn't get rid of problems, it just illustrates them.

Which problems get dealt with and which are ignored is just a reflection on your company's culture",2018,Why “Agile” and especially Scrum are terrible
recycled_ideas,98,"The developer is an arrogant self entitled ass.

Scrum is undervaluing **his** seniority.

Scrum is treating **him** as equal to **lesser** developers.

Scrum is wasting **his** time.

Scrum is placing the opinion of the business over **his** expert opinion.

There's a bunch of these guys floating around. People who've misunderstood software craftsmanship and think it means forcing customers to pay for things they don't want and get mad when it doesn't happen. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,8,"Yeah every time I read one of these articles it seems at least one of the following is true (1) his company's management is fundamentally toxic regardless of process (2) he expects to be able to just be told ""make app"" and go away and do it entirely by himself with no oversight, no communication, nor even a completion forecast",2018,Why “Agile” and especially Scrum are terrible
recycled_ideas,3,"Agile can be really broken, but it's broken when the feedback is replaced by empty process, and companies like that are broken with every process.

One of the things that people don't understand and which, in fairness, uncle Bob doesn't explain very well is that craftsmanship is about doing the best **within constraints**.

People act like craftsmanship means making a hand crafted oak table that will last a hundred years or more, but sometimes it's about making a folding card table that retails for $20 and can't cost more than $5 to make. 

You make the best $5 card table you can, not a thousand dollar piece of oak perfection. ",2018,Why “Agile” and especially Scrum are terrible
Shaqs_Mom,7,">r/programming  
>  
>PostsFAQ

This is exactly how I felt about the article. When you are forced to work on the same tasks as lesser developers it means you are working as a team and it makes the team more productive. Also calling people lesser developers is dumb. Yea maybe for the first 1-2 years some of the terminology might not be there, but everyone is on a pretty level playing field after that.",2018,Why “Agile” and especially Scrum are terrible
888808888,8,"Say what? Did you just claim a 2 year junior dev is equal to a 20 year senior dev? If so, you're in for a rough ride. Experience is not something you pick up in 2 years.",2018,Why “Agile” and especially Scrum are terrible
lionhart280,2,"Im a junior dev (2 years formal) who recently got paired with a senior (20+) dev on a project.

He took it as an opportunity yo learm some new tricks from me, a dev versed in lots of new tech.

I took it as an opportunity to take in a lot if his wisdom and experience.

We wrote some great stuff together we ended up both proud of.

As soon as any developer refers to any other developer as 'lesser', tge chance of making something anyone can be proud if goes out the window.",2018,Why “Agile” and especially Scrum are terrible
888808888,6,"What in the world makes you think 20 year devs are not keeping up to date with new tech?

> a lot if his wisdom and experience

This is exactly what separates a 20 year dev from a 2 year dev. Simply knowing/using the latest javascript framework doesn't mean squat.

You also make some pretty large assumptions here, such as that new tech is worth knowing and using. A good software dev knows that the default is to avoid new tech as much as possible, until it has proven itself, and it becomes widely used and maintained etc. A 2 year dev hasn't had the experience of ripping out otherwise functional code because it depends on shit that is no longer supported upstream, or is buggy as hell or ... etc etc.",2018,Why “Agile” and especially Scrum are terrible
lionhart280,1,">Simply knowing/using the latest javascript framework doesn't mean squat.

You are implying thats what the knowledge was.

It wasn't.

>What in the world makes you think 20 year devs are not keeping up to date with new tech?

I didn't say *all* 20 year devs. Just this guy in particular was not specifically up to date with the projects specific tech it used.

The new technology was one I was well versed in and had used many times before, but he had never touched.

Thus my knowledge of the subject matter combined with his 20 years experience allowed us to write some great software.

>A good software dev knows that the default is to avoid new tech as much as possible

This is just common knowledge. However, when the client requires you to be using new technology, you have to make do, and we did. Well for that matter too.

I have no idea who has slighted you here, but you have managed to twist a story of teamwork between a junior and senior dev collaborating and succeeding into some kind of attack to be argued with.",2018,Why “Agile” and especially Scrum are terrible
888808888,2,"These are the 2 comments of yours I'm arguing against:

> He took it as an opportunity yo learm some new tricks from me, a dev versed in lots of new tech.

and

> As soon as any developer refers to any other developer as 'lesser', tge chance of making something anyone can be proud if goes out the window.



There are exceptions to every rule. The rule is: a 20 year dev is > than a 2 year dev. End of story. I'm sorry that you feel this is a slight towards you, but it is a rule, and it's a rule because that is the case the vast majority of the time.

A 20 year dev without experience in some new tech is still > than the 2 year dev who has used the tech. Nobody knows everything. In every project, *both* new and old devs are learning new things, new processes, new frameworks or tools, new ""problem domains"" (ie industry knowledge, nothing to do with computers and programming but the industry they are working in etc) they are *all* updating their skill set. The 20 year dev has the experience and knowledge of history, what works, what is good software design, what tools and frameworks to pick or investigate/test, what might look like a good idea is a actually a bad idea. You don't pick that up in 2 years.

You seem to have issue with the ""is greater than"" thing; that's your problem, but you are wrong. When you reach 20 years you will realize how naive you sounded at 2 years.",2018,Why “Agile” and especially Scrum are terrible
lionhart280,0,"I would never hire a dev on my team that referred to themself as 'greater' than any of my existing devs.

Its pompous, presumptions, narcissistic, and a bit offensive.

I would hope a dev of 20 years woukd have the wisdom to know how awful it soubds to refer to yourself as 'greater'.

More skilled? Sure. A strong asset to the team? Absolutely.

See 'greater' curs two ways. If you refer to yourself as greater, you aee calling everyone else on the team lesser.

And I have no intent if ever hiring a dev who demeans or insults their teammates.",2018,Why “Agile” and especially Scrum are terrible
888808888,5,"> I would never hire a dev on my team that referred to themself as 'greater' than any of my existing devs.

Well good news then; at 2 years, you're far from being put in that position.

Snarkiness aside, and being absolutely serious now; there is no shame in admitting a senior dev is a greater asset to the team then you are. It's a fact of life. You admit he is more skilled, that automatically means he is a greater asset. His accumulate skills, talent, knowledge, means he is worth more (paid more financially) as well. 

This is the problem with millenials (I'm assuming you are one based on being a 2 year junior dev); you grew up getting participation awards and where teachers want to treat everyone as equals etc. That's not real life. There is no shame in admitting someone is a greater asset, especially when the guy has 18 years more experience than you.

Deep down you know I'm right; you've admitted he is more skilled, and he is a strong asset; why is hard to admit he is ""the stronger asset"", and/or the ""more knowledgeable, experienced, and greater software dev""? 

> who demeans or insults their teammates

... and what about you thinking you're equivalent to a guy who has 18 years experience on you. That's not insulting to him at all, eh? ",2018,Why “Agile” and especially Scrum are terrible
lionhart280,1,"Theres an inherent connotation to the word 'greater' that just makes you come across as a dick. Thats all there us to it.

It indicates a lack of contextual awareness and social ineptitude the throws, for me, a red flag that makes me file the dev under ""might not play well with others,""

Its that simple. Id do the same thing if a dev applied to the job and, despite their credentials, spent 5 minutes of the interview shit talking their old team or old boss.

If you say offensive things, and cant grasp why people find it offensive, your odds of getting on my workforce go down.

For example, your going on about how all millenials are the same would be another red flag for me. Id write down the following note on my copy if your resume:

""Potentially prone to discrimination. Definitly prone to stereotyping.""

No good sentence has *ever* started with ""You know what the problem is with 《group of people》?""

Ever. If you feel thst sentence coming out of your mouth in the workplace, do yourself a favor to your job stability and keep it to yourself.

Except if 《group of people 》 is 'JavaScript Developers' thats fair game. They brought it on themselves.",2018,Why “Agile” and especially Scrum are terrible
888808888,1,"> Theres an inherent connotation to the word 'greater' that just makes you come across as a dick. Thats all there us to it.

That is your problem, not mine. You don't like the truth, I can't help that, and until you grow up and accept facts of real life, you're going to get hurt a lot. 

Like I said; ""you yourself will be a greater/better software developer at 20 years than you were at 2"". That's a general rule, and applies to the vast majority of devs and other professionals in all areas. 

You will accept that as true for yourself instantly, without feeling like ""a dick"", or offending yourself. You won't accept that fact when talking about you vs a second developer. That remains a problem with you; pride, arrogance, not willing to accept you can be inferior in skill/talent/experience; whatever it is, it's getting in the way of you accepting a simple fact. ",2018,Why “Agile” and especially Scrum are terrible
lionhart280,1,"I wouldn't have an issue with comparing to yourself, thats fine.

""I'm a greater dev than I was 20 years ago"" I'd consider harmless. Self comparisons are fair game.

""I'm a great dev"" is also fine. No problem there.

""I'm a greater dev than Steve"" Whoa! Why are you throwing Steve under the bus now? Kinda rude

""I was a greater programmer than my entire team, so I left the company"" Cool, unfortunately I won't be hiring you at mine since you sound like a dick.

See my point yet?",2018,Why “Agile” and especially Scrum are terrible
888808888,1,"I know what your point is, that was never the issue. The issue is that you don't like to hear someone is better at something than you are. 

> Cool, unfortunately I won't be hiring you at mine since you sound like a dick.

Like I said; you're not in a position to be hiring anyone so saying that just makes you look ridiculous. At 20+ years of experience, I however would not be hiring some young kid who thinks he is equivalent in skill to my senior dev on the team. You just don't know your place in the team, your limitations, and it will affect everything you do, including how tips and advice and code reviews are handled.

Speaking the truth doesn't make you dick. You're a millennial, you grew up thinking everyone is a special snow flake. Welcome to real life chum, at 20 years, Steve is the better/greater dev, and no matter how uncomfortable that might make you feel, it's the truth.

Offense can be given, but it is also something that is received; you don't have to be offended hearing a fact of life; that is a choice you make, or you get over it and accept facts of life.

Do you get offended when your teacher gives 95% to the class genius whereas you just get a 70? He's smarter than you, isn't he?

Suck it up princess.",2018,Why “Agile” and especially Scrum are terrible
lionhart280,1,"All if your points fall flat on your face when the offended person is in charge of signing your paycheque though, dont they.

Does, 'Suck it up, princess' still apply when your mortgage and ability to feed your kids still applies?

If your going to be a dick in the workplace, I'm not hiring you. Literal end of discussion. I don't care how much if a hot shot you think you are, how good you think you are, how much greater you think you are.

Theres no room for assholes on a team that intends to be productive.

So yeah, my point is very simple and all that matters.

We are talking about paycheques and hirability here.

Thats all I care about on the topic.

And my core point was that calling yourself 'greater' comes off as dickish and lowers your hirability. 

Period.",2018,Why “Agile” and especially Scrum are terrible
888808888,1,"That's cute; you think a 2 year dev is going to be signing the pay check of a 20 year dev? Because it's actually the other way around; the experienced guys are signing the paychecks of the junior devs, and they won't put up with your drama queen bullshit.

You're also equating facts with offensiveness. You're getting offended by a fact. It must really suck to be you, that's all I can say. 

Look at your paycheck; look at the paycheck of the 20 year dev. The numbers are greater of the senior dev. Are you offended? Suck it up. The numbers are greater because he is worth more to the company than you. His knowledge is greater. His experience is greater. His paycheck is greater. He is the greater asset. He is the better developer. 

Nobody gives a shit that you're offended. Nobody cares. Do your time, try hard, do a good job, and in another 18 years you will be a far greater dev as well.",2018,Why “Agile” and especially Scrum are terrible
lionhart280,1,"No. Im saying if Im signing paycheques and I have 20 year senior dev applying for a position and he comes across as a twat, his resume goes in the garbage bin.",2018,Why “Agile” and especially Scrum are terrible
888808888,1,That's your choice. Your criteria for determining who is a twat is what is so funny though. Like you get offended that he is a better dev than you. Grow up.,2018,Why “Agile” and especially Scrum are terrible
888808888,2,"As a follow up; maybe it's easier for you to accept if it's reworded slightly...

""You will be a far better software developer after 20 years of experience, than you were at 2 years"". You are > at 20 then 2. That's the same reason why a 20 year dev is > than you at 2 years.

It's not just a programming thing; it's a fact of life, and is the same in every area; teaching, civil engineering, infantry man vs 4 star general etc etc.",2018,Why “Agile” and especially Scrum are terrible
Shaqs_Mom,1,"I do agree with you that experience makes people much better developers I think that is obvious. What I am saying is that after about two years, both of you have a cs degree and practical experience. You can both make code work, and you can both make decently clean code. As long as you are not a total dunce you should both be to work together and work on the same codebase without too much difficulty. Can the 20 year dev doing things better, absolutely, but both are professional and the difference is really only with code readability and longevity.",2018,Why “Agile” and especially Scrum are terrible
888808888,2,"> You can both make code work, and you can both make decently clean code. As long as you are not a total dunce you should both be to work together and work on the same codebase without too much difficulty.

I didn't argue that. I said he will be the better dev. Everyone knows it. You think he gets paid more just for fun?

The difference is NOT just code readability and longevity. Sorry. You're talking from inexperience and you don't realize how stupid you sound. It's like a college kid saying that because he knows javascript and can write a for loop he is now just as good a dev as you are (at 2 years). 

I have a 4 year degree in computer science; I did the math courses, the AI courses, the software engineering courses; and I have over 20 years experience writing code. Guess what, the degree is a great starting point, especially compared to kids my age who just picked up a visual basic for dummies book or went to college to learn how to code in C. But it doesn't mean much after a few years. The 20+ years as a dev, all the knowledge and experience I've picked up, is far far greater worth than the degree is at this point.

You're incapable of conceding the point because you don't realize how much experience you're missing. You can't possibly know that till you've been there. A more humble person would look around the world and realize accept what goes on though in every area life; accounting, military, teaching; your training is a nice first step, but 20 years in the field is immeasurable. It's almost half the life of your career.

So your entire post is about how a 2 year dev and a 20 year dev can produce code. Agreed. I'm not arguing that. I'm saying, as a rule, the 20 year dev will be the far greater dev than you at 2 years, until you yourself gain that same experience. 

This is the issue that the OP finds offensive; whether he/you find it offensive or not is irrelevant. It's a FACT.",2018,Why “Agile” and especially Scrum are terrible
M3talstorm,2,"Sounds a bit of an anecdote (not to be rude), the original premise still stands.

The assumption is it is **competent** 20 years-of-experience dev.
",2018,Why “Agile” and especially Scrum are terrible
lionhart280,0,"The point I was highlighting was the word 'less'

20 years of experience doesn't make you a greater or superior dev, due to the type of work we do.

Being a good dev makes you a good dev. I've met guys with 3~5 years experience that could work circles around guys 30 years in.

I've also met junior devs who can't code their way out of a box and can't seem to use Google.

The 20 years of experience doesnt magically make a dev become good.

The reason devs with 20 years experience tend to be good devs is because you need to be good to keep jobs long enough to build 20 years experience.

Bad devs will have a hard time actually *truely* hitting 20 years experience, so to say.

But it happens still, but its a filter.

tl;dr:

20 years of work filters out a lot of the bad devs. 20 years experience doesn't magically make devs good. They were a good dev from day 1. They are now just a good dev with also 20 years of knowledge.",2018,Why “Agile” and especially Scrum are terrible
M3talstorm,2,"Yes, this is why I added, specifically in bold.

> The assumption is it is **competent** 20 years-of-experience dev.



To reinforce the opposite, a dev with 20 years of experience that isn't better (generally) then someone with 2 years experience is not **competent**.",2018,Why “Agile” and especially Scrum are terrible
El_Impresionante,7,"I hate Agile, but totally not for reasons in the article. The article is a mess. Having said that, your comment is a strawman.

What has customer satisfaction got to do with Agile and Scrum? There are other ways that projects can be managed. Customers existed before Agile. The writer also doesn't even hint at devaluing customer satisfaction for developer pride.",2018,Why “Agile” and especially Scrum are terrible
snazztasticmatt,20,"> What has customer satisfaction got to do with Agile and Scrum? There are other ways that projects can be managed. 

This guy's whole argument is that HE as the engineer knows what's best for the customer and that any involvement by the business is getting in the way of him building what he wants. 

The truth of the matter is that if you're getting payed by a business, your job is to drive revenue. That means business people will ask you to build them products. Sometimes engineers can double as business people, and that's fine. But everything this guy is saying is that business doesn't matter, he just wants free rein to build what he wants when he wants, no matter how long it takes. Businesses don't operate like that, anywhere, only hobbyists.",2018,Why “Agile” and especially Scrum are terrible
El_Impresionante,-1,"Strawman again. Try to be honest.

You are neither replying to me nor the author of the article.",2018,Why “Agile” and especially Scrum are terrible
snazztasticmatt,3,"Strawmanning what exactly? Literally this guy's main point is that he just wants to sit down and code with no restrictions and no expectations. Business wants a timeline? Fuck off, it'll be done when its done.  Business prioritizes features? Fuck off, he knows whats best for his company. Business wants to schedule a meeting? Fuck off, he doesn't need to talk to the stakeholders. Its the point of the entire article.

> What has customer satisfaction got to do with Agile and Scrum? 

Literally everything. Agile is structured to make sure every ticket is a deliverable (or close to deliverable) feature to help drive revenue. It breaks down business plans into manageable chunks so that a developer can both build it in a way that fits with the larger epic AND do it in a two week period.

> There are other ways that projects can be managed.

Yeah, name one good one

> Customers existed before Agile.

And they were constantly unhappy with overtime and overbudget projects because people like the SWE in the article refuse to give timelines 

> The writer also doesn't even hint at devaluing customer satisfaction for developer pride.

He does because he thinks his opinion matters more than what the business says is important to the company",2018,Why “Agile” and especially Scrum are terrible
recycled_ideas,8,"Because the article isn't about agile, it's about him and his ego.

Every single complaint boils down to its impact on him.

Agile, at its core is about rapid, continuous feedback. Stand ups showcase, retrospectives, paired programming, code reviews, CI, CD, CR even sprint planning.

Feedback, feedback, feedback.

Now obviously, your customer can fail to provide that feedback, in which case agile becomes sound and fury signifying nothing, but so does literally everything else.

Your customer can also give bad feedback, feedback which doesn't actually align with the needs of the business, but you've got a much better chance of the customer succeeding at this than any developer I've ever met.

But the thing is, none of this is what he's actually complaining about. He's complaining about having to listen to people he doesn't think he should have to listen too.

For fuck's sake, his first major complaint that's actually about agile is about business driven engineering. Who the fuck else should drive product engineering? ",2018,Why “Agile” and especially Scrum are terrible
Bullyoncube,1,"Business drive engineering?!  Sacrilege!  

I swear this guy works in our dev shop. ",2018,Why “Agile” and especially Scrum are terrible
recycled_ideas,2,"I have worked for the same organisation for a decade. I've spent a lot more effort than most developers at understanding the specific problem of my employer's domain.

I still have less domain knowledge than pretty much any coal face business user you could find.

So when they talk, I listen. I add my contributions, in terms of my expertise and things they might not have thought of, but I'm not a domain expert and I'm not going to pretend I am. ",2018,Why “Agile” and especially Scrum are terrible
Bullyoncube,2,I quote “My customer is not technically qualified to evaluate my work.”  I responded  “They are technically qualified to shitcan your work.”,2018,Why “Agile” and especially Scrum are terrible
recycled_ideas,3,"The customer isn't qualified to tell me which software architecture I should use, or which language or tooling I should implement in and with.

The customer is absolutely qualified to determine what I'm implementing and to place restraints which may impact what I choose though.",2018,Why “Agile” and especially Scrum are terrible
hippydipster,1,"Part of the point of the article though is that there's more to software development than constant feedback.  Feedback, feedback, feedback easily becomes react, react, react.  What becomes lacking is any proaction, and this is how balls of mud develop.  Without a plan, and via constant reaction to constant feedback.",2018,Why “Agile” and especially Scrum are terrible
recycled_ideas,0,"No, the point of the article is that the author doesn't want anyone's feedback because he believes he knows better.

Unless you're working on your own project, you work for someone else, and your job is to give them what they need, not what you want to build.

A ball of mud is still better than some gloriously beautiful piece of art that doesn't actually meet anyone's needs.

That's why there's constant feedback, because you haven't got a clue what your client actually needs and they don't have the language to tell you. And it's not just you, it's nearly all of us.

That's why there's feedback. ",2018,Why “Agile” and especially Scrum are terrible
hippydipster,2,You seem bitter and angry and it's preventing you from engaging in much discussion that could be of value.,2018,Why “Agile” and especially Scrum are terrible
recycled_ideas,2,"What discussion?

All I've gotten from you or the author is agile sucks. No alternatives that actually work, just the usual crap about how you can't do your job properly if you aren't given complete autonomy. 

The biggest problem with Scrum is that it can't fix broken companies. ",2018,Why “Agile” and especially Scrum are terrible
El_Impresionante,0,Exactly. He is constantly talking past the author and us.,2018,Why “Agile” and especially Scrum are terrible
hippydipster,2,And why do you hate agile?,2018,Why “Agile” and especially Scrum are terrible
practicing_dad_jokes,1,My soul can rest easy knowing someone's said this. Thank you.,2018,Why “Agile” and especially Scrum are terrible
s73v3r,9,">The author seems obsessed with blame

That's cause management generally is obsessed with blame. ",2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,1,Indeed. Which is why having tools to make better estimates is so useful... ,2018,Why “Agile” and especially Scrum are terrible
nlamby,41,"I learned several years ago to skip any article written by Michael O. Church. Seems like this is no exception, but don’t know since I didn’t read it. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,8,"He's really good at channeling the negative emotions that programmers feel a lot.

I think there is some value in what he writes, but I don't think he could ever work successfully in most modern software companies. He strikes me as the sort of person whose tolerance for imperfection is impractically low. This means he's great at finding all the flaws in various processes, but he also routinely overreacts to mostly everything.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,">He strikes me as the sort of person whose tolerance for imperfection is impractically low. This means he's great at finding all the flaws in various processes, but he also routinely overreacts to mostly everything.

Insightful",2022,Why “Agile” and especially Scrum are terrible
michaelochurch,-3,"Upvoted for insight. 

""Say my name.""

...

""You're goddamn right.""",2018,Why “Agile” and especially Scrum are terrible
entiat_blues,8,"you're [intentionally?] mistaking notoriety for popular support. walter white was the villain. he was hot-headed and short-sighted. he committed evil acts and allowed himself no remorse or introspection on what he had done. for all his talent and drive, his defining characteristic was vindictive, petty greed and it led to his downfall.",2018,Why “Agile” and especially Scrum are terrible
michaelochurch,-3,"> you're [intentionally?] mistaking notoriety for popular support. 

More accurately, I don't care anymore.

I don't expect you to know my story, or to care, but you have no idea what I've been through in the past 5 years. Being made fun of on the Internet is, honestly, more humorous at this point than anything else. Compared to death threats and career attacks, this stuff's pretty mild.",2018,Why “Agile” and especially Scrum are terrible
entiat_blues,6,"you: programmers are all literal-minded to a fault

also you on getting called out for comparing yourself to walter white:

>As it were, I don't cook methamphetamine. I'm writing a book; I don't have time to run a meth lab, and I certainly couldn't afford the startup costs. 

at this point wouldn't it just be more honest to say all your opinions on the industry are just barely veiled attempts at self-awareness?",2018,Why “Agile” and especially Scrum are terrible
michaelochurch,-2,"You got me. When I wrote that post, I did so ignorant of the nuance. I believed that you believed I really was running a meth lab. That's why I took great pains to correct you. ",2018,Why “Agile” and especially Scrum are terrible
OneWingedShark,2,"I, for one, think the insights in the article are spot-on: Agile is, in practice, utterly myopic and virtually incapable of real long-term planning. Agile is also a good way for management to completely ignore their subject-matter experts, forcing them into the role of 'grunt'... I saw that happen to my brother-in-law first-hand.",2018,Why “Agile” and especially Scrum are terrible
michaelochurch,2,"Right, and even if Agile itself isn't evil– the Agile Manifesto itself is fairly reasonable– we still have the general negative trend in management: tearing down specialists and experts (who make micromanagers feel insecure) and turning the job into code-by-numbers mediocrity. This career used to have a place for excellence; but we've been replaced by authority-compliant know-nothings... as our industry becomes increasingly blind to the political ramifications of our work. (Obviously, the rank-and-file programmers aren't fascist– they tend to lean left– but even they are being replaced by apathetic youngsters.)

I'm less inclined, 3 years later, to call Agile the root of the problem. It's a symptom. I'd write more on the topic– if I still cared about the tech industry. But honestly, I'm putting most of my energy into a steampunk fantasy novel that [1] has nothing to do with the tech industry. 

[1]: ""Nothing to do"" may be an exaggeration. The antagonist is an evil corporation– it's loosely based in an alternative timeline where the Pinkertons won and turned into Nazis. There's a lot of bathos in the Global Company scenes, largely because I want to portray corporate capitalism as it actually is– not some cosmic horror like Sauron or Cthulhu; but, rather, as a dangerous joke as liable to kill through incompetence as by intent. ",2018,Why “Agile” and especially Scrum are terrible
walterbanana,2,In which country do you work?,2018,Why “Agile” and especially Scrum are terrible
michaelochurch,1,U.S. Why?,2018,Why “Agile” and especially Scrum are terrible
walterbanana,2,"I feel like this is an important detail, but I don't think you mentioned it in your story.",2018,Why “Agile” and especially Scrum are terrible
OneWingedShark,1,"One thing I've noticed is that current corporate culture (here in the US, at least) tends to view training as only an expense. It's quite a shock coming from the Army culture where training is considered both matter-of-course and indispensable. -- It's made all the worse when you hear managers, CEOs, and other corporate leaders bemoaning the lack of employee loyalty: they completely and utterly fail to realize that loyalty is a two-way street and to demand it is the height of hubristic folly.

Also, if the company isn't going to be loyal enough to invest in their employees the training that they need [to advance, certainly; but sometimes even to do the job competently], how can the employer reasonably demand years and decades of that man's work? It's obvious, by the lack of loyalty in action, that the company doesn't respect the employee (a) as a man, (b) his position, (c) his work, or (d) his ability.",2018,Why “Agile” and especially Scrum are terrible
michaelochurch,6,"I blame MBAs and McKinsey (et al). They created the culture of executive job hopping, which led to companies being run by unscrupulous social climbers who see the company as nothing but a pool of money that one should grab as much of as one can. Since this is the attitude up top, every other worker has to contend with a company that runs in the new, sociopathic way. As a consequence, we have an omnilateral lack of trust.

These sorts of trust breakdowns usually aren't fixable. I don't think there's a solution other than to scrap corporate capitalism. The only thing that has worked in the past (1945) was: a worldwide culture of nationalism, leading to a massive war. That can't be replicated, and it shouldn't be; so we need a new economic system.",2018,Why “Agile” and especially Scrum are terrible
OneWingedShark,1,"I disagree -- the problems **aren't** economic in nature, so an economic fix simply won't work.

The problems are ***moral*** and, despite the negative connotations presented by modern media, ***spiritual***. There's a great quote from C.S. Lewis's [*Abolition of Man*](https://archive.org/stream/TheAbolitionOfMan_229/C.s.Lewis-TheAbolitionOfMan_djvu.txt) which sums things up:

>And all the time — such is the tragi-comedy of our situation — we continue to clamor for those very qualities we are rendering impossible. You can hardly open a periodical without coming across the statement that what our civilization needs is more ‘drive’, or dynamism, or self-sacrifice, or ‘creativity’. In a sort of ghastly simplicity we remove the organ and demand the function. We make men without chests and expect of them virtue and enterprise. We laugh at honor and are shocked to find traitors in our midst. We castrate and bid the geldings be fruitful.

&#x200B;",2018,Why “Agile” and especially Scrum are terrible
michaelochurch,1,"The problems are both economic and moral. (And, relatedly, cultural and social and political.)

The reason one tends to focus on politics and economics is that, while as individuals we can do very little in the grand scheme, politics and economics can be fixed. A government can imprison criminals; it can offer social services and a basic income. It can't change human nature, nor can it outlaw all forms of immorality.

Though human nature can't be fixed, it can be contained. I'd rather have people killing avatars in a virtual-reality game than actually killing other humans. I'd rather see scarcity restricted to game worlds than be a landmark feature of most peoples' lives. Would that bring us closer to God or the gods or Enlightenment? I don't intend to make that argument; I don't see how it could hurt. Poverty, misery, and violence serve no purpose and do a lot of harm, so if we can abolish or reduce them through political or economic means, we should. ",2018,Why “Agile” and especially Scrum are terrible
pobody,12,This is Michael O. Church. He's basically a professional troll.,2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,16,"While I'm in no position to vet the sources for accuracy, one of the first links I've found when googling his name makes him sound like the tech Trump: https://michaelochurchquotes.tumblr.com/",2018,Why “Agile” and especially Scrum are terrible
Blazemuffins,5,"""Womens’ only way of making history of themselves is to take those of us who would otherwise be successful–160+ IQ and good background–and fuck with our heads until we are nothing and can make no history because we are broken. That is the truth. That is all they are good for.""

Wooooow get fucked dude",2018,Why “Agile” and especially Scrum are terrible
ryeguy,0,"good lord, what degree of ego do you have to have to register a blog just to post your own quotes?",2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,2,"I don't think it's his, is it? I presumed someone else found him fascinating enough of a character to want to shame him publicly. ",2018,Why “Agile” and especially Scrum are terrible
ryeguy,0,"Ok, that makes much more sense. It's pretty obvious now that I actually read a couple.",2018,Why “Agile” and especially Scrum are terrible
scottyLogJobs,3," > that developers fear the sprint deadline because they believe it reflects badly on them, that velocity is a stick to beat the 'underperforming' or disadvantaged developers with.

... These are completely true though. Especially velocity.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,"Agreed. The author points out his own anxiety and neurosis, blames his tools. If he thinks open offices are oppressive he should try manual labor or working on an assembly line. Oh nos I need to look busy.

Pro tip: get up from your pod and go somewhere else. If your boss is micromanaging you then you need a new boss. The author is an eloquent writer but he’s pretty pampered and maybe needs a career change. 
 ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,The take-home point for me is toxic management kills it for engineering teams using Scrum.  ,2018,Why “Agile” and especially Scrum are terrible
SickZX6R,2,"You're right, but you can remove ""using Scrum"" and it's still true.",2018,Why “Agile” and especially Scrum are terrible
lovestheasianladies,1,"Every shitty dev that hates agile has never been in management.

The methodologies are never the problem. You can make good software with any methodology and good management. Shitty management will ruin anything. ",2018,Why “Agile” and especially Scrum are terrible
countblah2,1,"You know the author has a problem when he spends 99%...no wait, 100% of his time bashing every available PM approach out there (Waterfall?  Agile?  Scrum?) and offering zero solutions.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"> it's a problem with the corporate culture

This right here. 

You can use whatever goddamn methodology you like, but if the corporate culture is toxic, it's going to burn.

Likewise, if the coporate culture is excellent, you could probably do away with methodology entirely and experience more success than the toxic culture will ever get.",2018,Why “Agile” and especially Scrum are terrible
31415helpme92653,1,"Came to say the same. In my experience, agile success/failure is more about culture than anything else. ",2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,2,"There's a reason why the manifesto values individuals and interactions over tools and processes. It doesn't surprise me that this doesnt fit the author's temperament. 

And its not about groupthink, or unquestioningly following ceremony, either, for anyone thinking that! ",2018,Why “Agile” and especially Scrum are terrible
cojoco,-12,"> no team can just sit back and say, ""it's done when it's done""

Well it isn't until it is, is it?

Smart people are capable of moving a project to completion without idiotic people and processes breathing down their necks.

",2018,Why “Agile” and especially Scrum are terrible
splendidsplinter,42,"If your organization doesn't have an explicit, agreed upon definition of done between engineering, product, business and architecture, you shouldn't be making products.",2018,Why “Agile” and especially Scrum are terrible
Mithren,-14,Because all people work in an organisation with teams like that right?,2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,13,"No, not all people do. But if you don't, you will never get Agile to work for you and it's a mistake to think that it will do anything for you.

&#x200B;",2018,Why “Agile” and especially Scrum are terrible
Mithren,-9,If you don't have product and architecture teams then agile is useless? TIL,2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,11,"No, but presumably \*someone\* has responsibility for those things?

Even if engineers are making tiny command-line tools for other engineers, someone is asking how and why we're making them?",2018,Why “Agile” and especially Scrum are terrible
Mithren,1,"I just find the assertion of ""this is how things should be done or you don't deserve to do anything"" entertaining when it's asserting along the author's own biases. We don't have a product or architecture team, nor do we have a concept of 'done' because we continuously deliver to other internal users. Do we not deserve to be working either?",2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,3,"It's not about the job titles though, it's about the interests and responsibilities.

Sure, ad-hoc development can work, absolutely, but for anything above trivial, you need some form of agreement.

No matter what you're making, you're making it for *someone*, whether you're in direct contact with the customer, or if you have product managers acting as a proxy customer. That person cares about what you're delivering and when it will happen - like it or not, they have a definition of 'done'. Nobody can agree on whether you've completed the project without agreeing that definition and a way to measure when you've reached it.

If every bit of work has the same criteria (automated test coverage at 100%, release binaries handed over, design document published, whatever), then that's *great,* you don't have to think about it - but you still have to achieve it.

&#x200B;",2018,Why “Agile” and especially Scrum are terrible
cojoco,-36,"You're full of shit.
",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,26,[deleted],2018,Why “Agile” and especially Scrum are terrible
cojoco,-28,"There's generally a date at which a project is supposed to be finished.

With good developers, why is there any need to enforce process beyond knowing that?

I guess I work in R&D, and have worked in R&D for 30 years, and am faced with the prospect of having to use Jira, it does all seem pretty silly to me.

",2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,12,"Because you will \*undoubtedly\* encounter situations you didn't expect. Or the market will change. Or the project will get its budget slashed, or even increased. Or the business will be hit by a lawsuit that requires a change in priorities. Or the customers beta test and hate everything you've done.

Or literally \*anything\*.

&#x200B;",2018,Why “Agile” and especially Scrum are terrible
FaustTheBird,10,"Agile is pretty specifically and loudly anti-deadline. The way you address deadlines in Agile is you build the least necessary to satisfy the deadline need first. That way, you're ""done"" weeks or months before the deadline. That's the real meaning of Minimally Viable. Once you have that, you iterate until you're out of time, out of money, out of feedback, or have another priority.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,[deleted],2018,Why “Agile” and especially Scrum are terrible
FaustTheBird,3,"That's not accurate at all, but I've seen people manage that way. I often say there's a difference between Agile and fast. You can often tell the difference by looking at a 6-sprint roadmap. If each feature only shows up in one sprint, that's fast. If you iterate over the same feature in multiple sprints, then you might be Agile. Having only one sprint to finish a story makes it feel like you have deadlines every sprint. That's bad, and it's not Agile; it's bad management.

Every sprint is a planning boundary. The principle is that one ought to plan, but not plan so much as to introduce more risk than not planning. One ought to be able to plan something and then execute the plan. If one cannot execute what was planned, one ought to introspect and determine the factors contributing to the inability and get better. Once one can plan and execute consistently, one can plan bigger and more complex things.

Planning to do something is not a deadline. I'm not giving myself a deadline when I define a sprint. I am asking myself what I think is achievable within the sprint timebox and then planning how I will achieve it. Ideally, I'm underplanning so as to leave for the unknown unknowns that inevitably disrupt my work.

Deadlines in Agile are replaced with business milestones. Milestones are real dates when real events are happening. For example, Black Friday is when it is. Can't change it. That's not a deadline, that's a milestone. What does the business need by Black Friday? Let's define an MVP. Now, let's prioritize based on risk to the milestone. Now let's go plan. We'll pick a two-week cadence for our sprint planning. How much this team achieve in these two weeks? Good. Let's go do those things and take stock in 2 weeks. In the meantime, management will refine the feature list and get a better understanding of needs. How'd we do? Did we execute our plan? No? What needs to change? Let's agree on a change. Back to planning. What can we do in these two weeks given the lessons learned? Go.

6 sprints, 1 milestone. No deadlines.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,[deleted],2018,Why “Agile” and especially Scrum are terrible
FaustTheBird,1,That's how I run mine,2018,Why “Agile” and especially Scrum are terrible
Ozzy-,1,It's almost like finding the best process to suit your business needs and culture is a process itself. ,2018,Why “Agile” and especially Scrum are terrible
KFCConspiracy,5,"> With good developers, why is there any need to enforce process beyond knowing that?

Good software engineering, and engineering in general is about breaking problems down into smaller pieces. This discourages coupling and encourages teams to collaborate by setting up pieces of a project that a particular team member can work to deliver. That's a natural part of how you build software in a team. Even in waterfall we break things down into discrete features and tasks and there are milestones (Albeit longer term). It's just that the requirements analysis takes place up front. 

Just give some developers a deadline and a statement of work may work sometimes, but it really doesn't reflect how most people work. And it isn't, more importantly, very measurable. It's much easier to manage client expectations when you can look at individual tasks and figure out what your % completion is and whether a project is on schedule. 

> I guess I work in R&D, and have worked in R&D for 30 years, and am faced with the prospect of having to use Jira, it does all seem pretty silly to me.

JIRA and other issue trackers allows you to centralize documentation and lists of features as well as the status. It lets you communicate in a more natural and more organized way than email. Now it can also enforce workflows, but at its core JIRA is just about communicating transparently, nothing more nothing less. And making that communication reflect how you do your work. ",2018,Why “Agile” and especially Scrum are terrible
cojoco,1,"> Good software engineering, and engineering in general is about breaking problems down into smaller pieces. This discourages coupling and encourages teams to collaborate by setting up pieces of a project that a particular team member can work to deliver.

I fail to see why this has anything to do with Scrum or Jira.

",2018,Why “Agile” and especially Scrum are terrible
tsimionescu,18,"You can't plan an organization that way. ""hey Jim, I'd like you to participate in this other project, when do you think your current one will be done? Oh, no idea, it'll done when it's done - ask me again in 5 months"". Also, a project that's taking too long can change scope or add phasing or need more people etc - you have to have these discussions. ",2018,Why “Agile” and especially Scrum are terrible
FaustTheBird,5,"You can if you're not doing project work. Lots of ways to do that. As a single-product company, you have a cross-functional product team. You don't do projects, you do work in a continuous flow based on the needs the market. Why wait for someone to define, plan, greenlight, staff, and kickoff a project when whatever the project consists of is likely stuff you could start doing now so long as trusted effective people are reviewing an updating priorities on a weekly basis.

In a multi-product company, you can assign a team to each product line and follow the same process. This is often using the Scaled Agile FramEwork.

In a company with lots of products, you can break your products up into small portfolios and assign them to teams based on current needs, priorities, and costs and rearrange them every year based on changing demands and costs.

Project-based work is not the only way to work. And I find that Agile works far far better as an operational management paradigm than as a project management paradigm. You are building and operating a line of business by building and operating your Continuous Delivery system which comprises human and software processes, R&D, production, quality assurance, and customer satisfaction. It's partly why DevOps came about.

Projects are the problem in most cases. Life doesn't work in discrete chunks of time with hard deadlines and people having multiple bosses and split allocation of their time, especially when it's not possible to know all of the things that need to be done before approving the project. It turns out that some of life can work that way, often cookie cutter style activities that cannot be industrialized. Industrialization always makes a process operational, not project-based. Some cookie cutter things can't be industrialized yet, like construction. But just because some of life can work that way doesn't mean it all can. Try going to a factory line and trying to convince them to work on a project-by-project basis instead of having an operational flow to manage demand as it changes.

I'm not saying programming is factory work. I'm saying software development outside of consulting firms is usually continuous and not discrete and therefore not conducive to project management.",2018,Why “Agile” and especially Scrum are terrible
tsimionescu,1,"I completely agree with you, I was replying to the parent who (it seems to me) was essentially claiming that Agile/Waterfall/anything are irrelevant bureaucracy and that the base reality is just 'you'll have it when it's ready'. ",2018,Why “Agile” and especially Scrum are terrible
cojoco,-10,"Who are these people that ignore timescales and project plans?

Why are they still employed?
",2018,Why “Agile” and especially Scrum are terrible
tsimionescu,11,"And to make a project plan of some kind, you need to follow a methodology of some kind, more or less loosely. You could try to produce functional and design documents, you could try to produce user stories, you can estimate either in man-months or story points or whatever other way - but you will end up with SOME process, negotiated with other parts of the organization, that you will be expected to follow. ",2018,Why “Agile” and especially Scrum are terrible
cojoco,1,"I'm so glad I started programming long before a ""methodology"" was required before one could get to work.
",2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,3,"The whole reason we make software, and not develop everything in hardware, is that software can change. Should change. And we created processes that allow that change to be measured, controlled and predicted.",2018,Why “Agile” and especially Scrum are terrible
chrisza4,1,"Because some people, while do not firm on giving estimation and long plan, produce software faster with more quality. 

And at the end all we want is not a plan, but to have software fast enough to compete with market and good enough to stay strong in the market.

Someone can come up with an well laud-out plan like we will product feature X in the first month, feature Y in next month, and so on. I got a good plan and realistic timeline and a nice gantt chart.

Other guy may just said that “I don’t know how long would it takes to do feature X, maybe 3-5 days? I don’t know. I will let you know when I am done”. And at the end he takes 6 days for feature X. (Which is late than estimated time)

I would prefer the latter guy. He is simply faster.",2018,Why “Agile” and especially Scrum are terrible
cojoco,1,"
I guess if you're always coding the same thing you'd want to be able to reinvent the wheel ever faster.
",2018,Why “Agile” and especially Scrum are terrible
KFCConspiracy,1,It must be nice to work some place with no deadlines. But not really. ,2018,Why “Agile” and especially Scrum are terrible
cojoco,0,"It must be terrible to require external tools and processes to be able to work to deadlines.
",2018,Why “Agile” and especially Scrum are terrible
Mithren,-1,"Agreed 100%. Sure if you're in a massive company producing one thing to sell or something you need organisation but for smaller companies, or producing smaller things for internal use etc so much of this process stuff is so that managers can justify their end of year bonus. ",2018,Why “Agile” and especially Scrum are terrible
NatureBoyJ1,1,"Or justify their staff. (Some) managers like to have empires to rule over. They need to justify why they need to have all these people under them, and why they should be moved up the corporate ladder.",2018,Why “Agile” and especially Scrum are terrible
JouleaRobots,1,"So much this. If agile isn't working it's the cultures fault. I've worked in places using this methodology before and back then I would have agreed. But now I work at a place stacked with scientists and a growing data business with full support of agile top down. Our environment is rich with discussion and inclusion at all levels while still increasing velocity every sprint. 

That said, some people require a lot of silence and seperation in order to concentrate, but they've come around after experiencing the benefits of being able to walk over and chat with the CEO. 

If you go down to sales, you will also see developers playing pool, foosball or ping pong... Or PS4 but everything gets delivered and the morale improvement is worth a few games to refresh your brain.",2018,Why “Agile” and especially Scrum are terrible
FierceDeity_,-15,"I've actually tried to pitch this article to a few people and this is the precise argument I get from everyone who supports scrum. Our company doesn't whip people with it, bla. It can be done right... 

I'm not trying to argue, just an observation. I haven't actually every programmed under scrum to be honest. Been mostly a freelancer, sitting into a company working off issue lists or as a specialist in some certain technology",2018,Why “Agile” and especially Scrum are terrible
chrisrazor,1606,"> Open-plan offices are the most egregious example. They aren’t productive. It’s hard to concentrate in them. They’re anti-intellectual, insofar as people become afraid to be caught reading books (or just thinking) on the job. When you force people to play a side game of appearing productive, in addition to their job duties, they become less productive.

This is so, so true. And it doesn't even mention the sales guy working in the same office who breaks everyone's conversation every ten minutes for another sales call.",2018,Why “Agile” and especially Scrum are terrible
brtt3000,357,"Or having to disturb everyone if you need to do some problem solving with your direct colleagues or discuss some things. Sharing a open office with non-programmers is annoying as fuck. Like *ffs yes we talk about nerd stuff like api's and data types and databases, it is our job*.",2018,Why “Agile” and especially Scrum are terrible
FierceDeity_,111,"Is offices with max 10 people each still considered an open plan office? One gig I was working at had only one group of employees in each room. Like all the programmers that worked on the crm and selling instruments were in one room, another room housed ERP, then technical IT (basically the people who implement new hardware solutions in conjunction with software out in the factory buildings), and another had admins, and the last one was the service desk people.

Every desk was like 2.2 meters long, so sitting in the middle you would be pretty far apart from others... You could have another person sit at your desk with their laptop and do some code with you no problem.

I think it was still somewhat many, but I can't imagine what a huge office with people over people would be like. Sounds like true hell",2018,Why “Agile” and especially Scrum are terrible
beginner_,86,"10 is already quiet a lot but yeah not really open-plan. Open-plan looks like a factory. [This](https://static.independent.co.uk/s3fs-public/thumbnails/image/2015/12/01/19/facebook-office-wp.jpg?width=1368&height=912&fit=bounds&format=pjpg&auto=webp&quality=70) is probably the worst it can get. 0 Privacy, no dividers, you see and get distracted by every movement in your field of vision. Horrible. Literally an office factory.",2018,Why “Agile” and especially Scrum are terrible
TheChance,38,"""Hey newsrooms work pretty good let's write software as if this were the Daily Planet OLSEN WHERE IS MY COFFEE?!""",2018,Why “Agile” and especially Scrum are terrible
s73v3r,26,WHO HAS THE STORY TO BRING ME MORE PICTURES OF SPIDER-MAN!,2018,Why “Agile” and especially Scrum are terrible
psychicsword,20,"That is a pretty shitty open floor plan. I know a lot of them look like that but it is poorly designed. There is no sound mitigation, I don't see any real conference rooms and the building is a glorified warehouse where people have to step into everyone's personal space to get anywhere. 

An open office should look like team rooms and shared spaces flipped wall usages. You should need to zigzag around meeting rooms and conferences rooms to get to other parts of the floor. The only people whose space you should need to walk near to get to your seat are people on your own team and even then there should be room to move. ",2018,Why “Agile” and especially Scrum are terrible
beginner_,30,According to linked source that's facebooks main office at menlo park.,2018,Why “Agile” and especially Scrum are terrible
psychicsword,20,That doesn't mean that it isn't a poorly designed open floor plan. It just means that Facebook doesn't value privacy or a lack of distractions to actually build their space with open office in mind. Given how Facebook treats its customers' data privacy it doesn't surprise me to hear that they also poorly design their dev spaces in a way that reduces privacy far more than it needs to. ,2018,Why “Agile” and especially Scrum are terrible
beginner_,13,"> That doesn't mean that it isn't a poorly designed open floor plan.

Oh yeah. i don't disagree with you at all. I only wants to hint that nom you don't want to work there.
",2018,Why “Agile” and especially Scrum are terrible
pdpi,8,"As an ex-FB engineer: I only went to MPK20 (the pictured building) a few times for meetings when I went to the main office, but the impression I got from going there is that it's nowhere near as bad as that photo makes it look.

First off, even though it's a massive open space, there's a bazillion nooks and crannies you can take your laptop to if you specifically want some alone time. Second, you kind of have to _try_ to get an unimpeded line of sight to people not in your row — it's surprisingly private. Those whiteboards you can see on the photo are rather obstructive. Third, the geometry of the office makes it so that you end up in little pods with your direct team, and meeting rooms and partitions serve as effective sound barriers so it's not as loud as it would appear.

Also, one thing that photo doesn't show — Personally, I find the constant foot traffic of open spaces to be infuriating, and this layout is incredibly hostile to foot traffic _through_ the open space. Instead, getting from A to B is much easier if you take the walkways outside the open space.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,21,"
>there's a bazillion nooks and crannies you can take your laptop to if you specifically want some alone time.

I'd like be alone with my dual 24"" monitors, split keyboard, and generally ergonomic setup; not hunched over a crappy 17"" laptop screen in a cranny.",2018,Why “Agile” and especially Scrum are terrible
pdpi,3,"Sure — I described it as “nowhere near as bad”, not “it’s actually amazing”, hardly stellar praise. It’s a somewhat misleading picture that’s taken specifically as a way to highlight how big it is, and, having been there myself, and having taken those photos, I can tell you that it takes a bit of effort to get a photo that’s as wide open as this one.",2018,Why “Agile” and especially Scrum are terrible
Ryuujinx,2,">  It just means that Facebook doesn't value privacy

In other news, water is wet. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,"Another thing overlooked is space between employees. I've worked in an open plan office (of around 25 people) and found it alright, but then we had rather large desks with a fairly large gap between them. Close enough to lean other and say something to your neighbour, but far enough that you'd probably shuffle your chair over for a proper conversation, and you didn't feel like you had someone looking over your shoulder all day",2018,Why “Agile” and especially Scrum are terrible
beginner_,1,I agree. That makes a huge difference. Personal space.,2018,Why “Agile” and especially Scrum are terrible
spinwin,1,"You can see dividers, but they don't look particularly effective.",2018,Why “Agile” and especially Scrum are terrible
pinkycatcher,4,"They're not dividers, they're whiteboards, though some people are trying to use them as some sort of divider",2018,Why “Agile” and especially Scrum are terrible
spinwin,2,"Ohh yeah, I see that now.",2018,Why “Agile” and especially Scrum are terrible
russjr08,1,Jesus. That gives me severe anxiety just looking at that.,2018,Why “Agile” and especially Scrum are terrible
sciencewarrior,131,"No, team offices are fine. They give you a nice balance between collaboration and quiet time. Large open offices will sometimes sound like street markets, with people speaking louder and louder to be heard over the din. It's maddening.",2018,Why “Agile” and especially Scrum are terrible
psychicsword,2,"I do think team rooms are better but they also don't scale. We have some teams that are effectively 8 cross functional members, and some that are 3. Then occasionally when those groups of 3 get done with a project they get rolled up into the fold of a 8 person team and become an 11 person team temporarily. While most teams average around 6 over the course of a year team rooms dont scale or fluctuate with the needs of the team. 

A quiet open floor plan with plenty of dynamic wall layouts to buffer noise and conference rooms scattered randomly to prevent echos with engineered from the start sound mitigation built into the layout of the building can come really close to the distraction free nature of team rooms while also giving you everything else. ",2018,Why “Agile” and especially Scrum are terrible
hippydipster,1,My personal favorite has always been sharing an office with one other.  That may be a highly personal preference though.,2018,Why “Agile” and especially Scrum are terrible
sole-it,1,"in my first job, we have a team office of 4 staff + 2 interns. The office is quite spacey, around 30m^2 (or 322ft^2 in evil imperial system) and a 3-m hallway and a door at the end of the hallway. Don't really think you can get this kind of the configuration in bigger cities. 

It is really really good way to improve productivity. We can all talk to each other in case its necessary and other department can only bug us via email or phones which will first be handled by interns. Because of the layout and the space (and the nature of projects), there is no need to schedule a meeting room for 80% of inter-department meetings. and we have whiteboard (later replaced by glass for easy clean) in the office for this.",2018,Why “Agile” and especially Scrum are terrible
psychicsword,-2,">Or having to disturb everyone if you need to do some problem solving with your direct colleagues or discuss some things. Sharing a open office with non-programmers is annoying as fuck.

If they are all on the same team and the teams are focused then they will probably need to be involved in the discussion eventually. If this isn't the right time for that discussion grab your laptop and head into a conference room where there are whiteboards and larger screens so both of you can talk about the same thing.",2018,Why “Agile” and especially Scrum are terrible
AmalgamDragon,2,You've assumed two things that aren't guaranteed in open office spaces environments:  a) devs have laptops and b) devs can find an open conference room.,2018,Why “Agile” and especially Scrum are terrible
psychicsword,1,Both seem like pretty straightforward problems to solve. ,2018,Why “Agile” and especially Scrum are terrible
brtt3000,2,This is collaboration and people stuff with the person sitting next to you or on the opposite side of table. ,2018,Why “Agile” and especially Scrum are terrible
psychicsword,1,If you had a cubicles instead of open office layout or even a team room you would still be interrupting everyone else around you by having that conversation. A well designed open office floor plan would have team open office pods with very little direct sight with other teams beyond your own due to pod layout and converfance room placement.,2018,Why “Agile” and especially Scrum are terrible
somenoobgrammer,-87,this comment is cringy,2018,Why “Agile” and especially Scrum are terrible
pirate742,30,this comment is cringey,2018,Why “Agile” and especially Scrum are terrible
Ben_johnston,15,this whole account is ‘cringy’,2018,Why “Agile” and especially Scrum are terrible
logicchains,12,Bad bot.,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,Self referential comments ftl,2018,Why “Agile” and especially Scrum are terrible
jrhoffa,1,"Wow, a self-aware comment ",2018,Why “Agile” and especially Scrum are terrible
switch495,808,"Er... you're doing it wrong if your dev teams don't feel comfortable acting naturally...  also, wtf is sales doing in the same open space?

If I were to walk into my team right now, 2 of them would be watching rick and morty on a second screen,  1 of them would be reading some nonesense about redis and GCP, and the rest would be arguing with QA about what is or isn't a defect while I hold my breath hoping they don't realize the real problem is my shitty requirements.   If I'm lucky someone might actually be writing code at the moment....  That said, I've got new features to demo/sign off every week, and I can usually approve them. 

Agile is a culture and a process... and its bottom up, not top down.   The fact that some asshats sold the buzz word to corporate 5 years ago and have been pushing disfigured permutations of 'agile' has no bearing on the fact that a team that actually works agile is usually high performing. 

",2018,Why “Agile” and especially Scrum are terrible
b4ux1t3,458,"This just in: poor management and organization makes for poor working conditions and output.

I'm so sick of hearing ""this thing that is different from how *I* do it is bad and should die!""

There was an article a few months back about why working at night is better... And people on here ate it up. It was literally just a manifesto on why the writer doesn't work well with people, and people up voted the hell out of it. It's like they believe this auteur myth bullshit, and think they are the one thing holding up their company.

I'm not going to disparage anyone's skills here, but *come on*. Basically everyone on this sub is replaceable, albeit expensively so. But because we all seem to feel the need to think of ourselves as these super star programmers, inane, anti-cooperative posts like this get up voted, even though, when you really boil it down, it has *nothing to do with programming*.

Anyway, rant over. 

tl;dr: I totally agree with you, and used your post as a springboard to bitch about stuff. Sorry.

Edit: mobile mistakes",2018,Why “Agile” and especially Scrum are terrible
jrhoffa,60,I am imminently replaceable and I love it.  That means I get to take vacations.,2018,Why “Agile” and especially Scrum are terrible
b4ux1t3,33,"Right? It's the best.

I have the fortunate position of just having left a residency because the client finally hired someone who actually knew how to use the stack I was maintaining for them. I knew what it was like to be *technically* irreplaceable for a couple months.

Worst experience I've had at my current company. I literally almost took a job for less money just because of how little free time I got, *despite being an hourly contractor*. 

Time to spend my banked PTO and not work for most of the rest of the year. ",2018,Why “Agile” and especially Scrum are terrible
jrhoffa,6,"I was literally irreplaceable with my previous employer, and every day led me further into hell.  They were severely underpaying me, too.

Watching them shrivel up and shutter their business gave me too much glee.  I'm better off as a cog with other professionals that I can mentor or learn from.",2018,Why “Agile” and especially Scrum are terrible
tetroxid,9,"In communist Europe everyone takes paid vacation, usually 4-6 weeks, *by law*",2018,Why “Agile” and especially Scrum are terrible
thirdegree,2,"NL gives 20 days, by law. I get 30. It's fucking _nice_.

That said, if I was a bus factor of 1 I wouldn't feel comfortable taking those days, so I make sure to focus quite a bit on making sure things I write are a) durable and b) well-documented. I win, company wins, everyone wins!",2018,Why “Agile” and especially Scrum are terrible
tetroxid,1,"If it were*

Use was for something presumed true in the past, and were for a hypothetical",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,14,"Yup! If the culture isn't conducive to one or more departments success, it's going to need to be evaluated on the context of that company. There's no magic bullet to cut through cultural and systemic issues.

Not every developer is going to feel optimal in any given setup, but a developer can be optimal in the context by being flexible enough to work with others. Not *their* best, but best for the team.

If your company or team is suffering, there likely isn't a buzzword that'll fix it outright. It takes time and dedication. That's not to say each developer should stick it out either, sometimes you're just not a good fit for a culture, other times, it's true, that culture may just be toxic. Either way I don't think either will be fixed by Agile, Waterfall, Open-plan/Closed-space, etc.

Coding skills can be learnt, by anyone really, takes time to hone them, time to be effective, sure. But if you're going to be anti-social about your conduct, there are very few environments in which you can thrive, very few companies will benefit from raw coding skill alone. You become expensive, requiring others to manage you well. That's less being a superstar and more being a liability.

Soft skills are incredibly important! They'll help you understand specs, understand your value and where you can add it, they'll help you represent that value so your skills may be best utilised.",2018,Why “Agile” and especially Scrum are terrible
miekle,11,">Rogue Founder Commits Crypto-Treason — Embezzles Oyster Pearl

Soft skills are incredibly important because if people can't effectively work with you, or maybe just don't want to work with you, you can't get ahead.

Part of that is having actual \*skills\* like effective communication which is super important, but another substantial part is trivial and irrelevant; wearing ""proper"" fashion, being able to talk about televised sports or your golf clubs, smiling laughing and being pleasant, and so on.

Most coding skills you need to work in the field are easy to learn because we've commodified developers by pushing tools which take the difficulty out at the expense of software quality. Web dev isn't hard, but writing a well-performing browser and JS engine is. For anyone really pushing the state of the art, the breadth and depth of knowledge and amount of focused, abstract creative thinking needed is not practically attainable for someone just stumbling into it in their 30s.

I think software engineering is seriously held back by corporate/business culture because a lot of people that might otherwise have significant contributions in the hard areas of engineering software systems are not the type to be taken seriously in business; they aren't invested in the cultural norms part of ""soft skills"", don't play office politics well, etc.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,4,"> Part of that is having actual *skills* like effective communication which is super important, but another substantial part is trivial and irrelevant; 

I don't think they're irrelevant...

> wearing ""proper"" fashion, 

Relatively few places require business dress. If casual dress is important to you, that's something you should ask about at the interview.

> being able to talk about televised sports or your golf clubs, 

Broaden this a bit. You should be able to find non-work things to talk about with your co-workers. That's a basic social skill. It helps to build friendship (or ""work friendship"" if you prefer) bonds, which strengthens the team by removing barriers to honest work communication.

Maybe some people think they can come in, stay strictly business during standup, and otherwise put on their headphones and never talk to anyone. And maybe you can do that. But if you do, you're not building the necessary rapport with your team for everyone to be comfortable with honest communication. If my tech lead leaves some highly critical comments on my PR, I'm very comfortable with that because we have excellent rapport. If you leave some highly critical comments on my PR, I'm going to feel a bit more uncomfortable, maybe combative, or maybe the opposite - not inclined to defend my choices (even if I feel they're correct) to avoid confrontation because I don't trust you.

This is how human psychology works, it's not really optional.

> smiling laughing and being pleasant, and so on.

...also known as ""bare minimum social skills""...

If your behavior is antisocial, why in the world would I want to hire you? As you correctly pointed out, you're probably replaceable. ",2018,Why “Agile” and especially Scrum are terrible
miekle,0,"So which is more important, honest communication or smiling, laughing, being pleasant, i.e. bare minimum social skills?
On the clothing thing, do you think that the effect of what you wear to work stops at meeting official dress policy? (It does not.)

You missed my (maybe not clear enough) point that what some consider ""bare minimum social skills"" are just what is acceptable to an in-group and really have nothing to do with how honest, trustworthy, or competent you are.

The supposed necessity for building relationships and trust by discussing *non-work things* just emphasizes to me that when it comes to business matters, people are expected to be full of shit. So, then they've got to see the ""real you"" in a different context.

This is a matter of the CULTURE of work, which is all sorts of screwed up. Wearing fake optimism around and blowing smoke up asses is not pro-social behavior, it's cheating a shitty heuristic to the detriment of everyone, but it's behavior demanded by the dominant work culture.

The best part of this is that you assumed I'm antisocial or struggle with soft skills at work. I'm just being honest and critically minded, because I can be here, and it doesn't matter that you don't like it.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"> So which is more important, honest communication or smiling, laughing, being pleasant, i.e. bare minimum social skills?

Both are important. Social skills enable honest communication in real life teams. 

We can sit here and talk about how it ought not to matter - we're doing our professional work, we should always listen to everyone's professional opinions about everything, and we should make decisions strictly according to objective professional criteria.

There are zero teams that work like that, in any profession, anywhere in the world. It's a psychological truth that honesty requires rapport. This is why good managers encourage their team to form good personal relationships.

Sure, if you're *really* a rockstar ninja warrior, you can make a good living by jumping to another startup after you wear out your welcome at the one you're at. But that's only true for a very select few, the people who have sales skills without people skills. 

*Business is about relationships.* ",2018,Why “Agile” and especially Scrum are terrible
miekle,1,"Business is about relationships yes.
Relationships in business don't have to involve anything superficial outside of work to be effective.
It's a shortcoming of people and of the self-affirming culture they're a part of, when:

1) There are lots of arbitrary rules of engagement

2) They aren't able to work together on the basis of respect and proven competency alone. (I've been on at least one team that did this fine, but we must not exist in this world, I guess. It had nothing to do with anyone being a ""rockstar ninja warrior"")

You aren't seeing the line between ""psychological truth"" and culture.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,[deleted],2018,Why “Agile” and especially Scrum are terrible
ArkyBeagle,1,"I can ""yo, bro"" all day long but in the end, if it's not working, the code is bad and you should feel bad. 

I've dodged the bullet on hiring cycles more than once with dysfunctional teams. It's not so much ""toxic"" as it was ""inadequate"". 

You really should study the psychology of degenerate gamblers - it has more to do with bad team dynamics than anything else. 

All I can say is that unless the team feels a sense of urgency the firm won't survive. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,12,[deleted],2018,Why “Agile” and especially Scrum are terrible
b4ux1t3,55,"No, your management is responsible for jumping on buzzwords and not properly implementing them. It's possible (and normal) to be doing something well, and then to screw it up by trying something you don't understand.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,14,[deleted],2018,Why “Agile” and especially Scrum are terrible
Deleted Account,25,[deleted],2018,Why “Agile” and especially Scrum are terrible
Deleted Account,-2,[deleted],2018,Why “Agile” and especially Scrum are terrible
RMCPhoto,7,"When you say ""this is it's biggest downfall"" you mean, this is what your organization is currently struggling with.

If communication is an issue it should come up at your retrospective - then as a team you can decide how to improve your communication.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,[deleted],2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,So if it was better beforehand don t you go back towards it? What is you proposed solution?,2018,Why “Agile” and especially Scrum are terrible
StabbyPants,0,"> Use agile for the right stuff, at the right time. 

unless you define what those things are, you've said nothing

> I support using waterfall too

why? it's a literal strawman coined to advocate for better methods",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,13,"Our scrum coach said, ""Sure, you can do it in your own way, but then you are not doing scrum.""

Scrum is just one one many way  one can choose to structure their work, it has it's weaknesses but done correctly it's actually pretty good. It's goal is not to make you develop quicker really, as this article talks about,  but to make you develop more predictable.

&#x200B;",2018,Why “Agile” and especially Scrum are terrible
FerociousBiscuit,3,"Yeah. We have a mix of agile teams in my shop. The scrum teams are great for their predictability. It's very easy to determine when something will be worked on because they won't take on any new work during a sprint and they make it very clear how much work can be fit into each sprint.

  


Now we have a kanban team that moves much quicker than the scrum team and will take on new work whenever but it's harder to predict what will be done and when.

  


They both have their benefits. Kanban is fast but scrum is predictable.",2018,Why “Agile” and especially Scrum are terrible
bgog,4,">scrum coach

If anyone finds this to be their job title, they need to re-evaluate their life choices.",2018,Why “Agile” and especially Scrum are terrible
Raenryong,2,You can get paid a lot for peddling that snake oil though.,2018,Why “Agile” and especially Scrum are terrible
Lysis10,0,Scrum masters are like those people who aren't good enough to be programmers so they just want to bitch at them all day to fill out a spreadsheet to feel superior.,2018,Why “Agile” and especially Scrum are terrible
fuckin_ziggurats,1,"Scrum masters are very often senior programmers who are part of the development team, not people who wander around the office preaching Scrum..",2018,Why “Agile” and especially Scrum are terrible
Lysis10,0,You must work in a competent environment. That's not my experience.,2018,Why “Agile” and especially Scrum are terrible
RMCPhoto,4,"Agile at it's core is just a list of best practices taken from high performing teams in the industry.  You can do anything ""by the book"" and still do it poorly... No company or individual is guaranteed success.  If we were then the first ""how to become a millionaire"" book would have landed everyone who read it on yachts.  

The truth is that many projects and teams fail.  Agile does ask teams to challenge themselves and have open and honest conversations about how they can improve and what's going wrong.  Many people hate this... And for those people, an agile team is not the right environment.",2018,Why “Agile” and especially Scrum are terrible
Katholikos,2,"Sure, but isn't this post highly-updooted because the *standard* experience that we as devs see with Agile is nowhere near the correct implementation?

Like yeah, Agile is great in theory and when practiced appropriately, it's a strong method of development. But if 5% of implementations are correct enough to reap the benefits and most companies would never consider the correct implementation, is it worth defending how great it is?",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,[deleted],2018,Why “Agile” and especially Scrum are terrible
b4ux1t3,6,"I have seen a few instances where a developer or admin who left needed to be contacted.

Invariably it is because they did a shitty job and no one could make sense of their nonsense. I'll take being competent and replaceable over being incompetent any day. ",2018,Why “Agile” and especially Scrum are terrible
StabbyPants,2,i have as well. mostly it's because they didn't document their work as requested on multiple occasions,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,"Depends on who you're talking about. I've seen some people who aren't easily replaceable, but they're typically of the actual genius variety who are neck deep in whatever specialization is involved (it's not necessarily easy to find experts in optics who also have familiarity with the particular aspect of long haul fiber the project needs who also have a penchant for pulling stunning patents out of their asses) and to find someone with their skill and immediate knowledge would hurt a lot.",2018,Why “Agile” and especially Scrum are terrible
grimmlingur,1,"The whole rockstar/ninja/10x - programmer thing is such a harmful and persistent myth that it almost invariably makes me angry. It massively inflates the self-perceived importance of many people, causing them to either look down on their peers or burn themselves out trying to stay far enough ahead of the curve that they can still think of themselves in those terms. Others who don't have the requisite ego to think of themselves in those terms, but plenty of actually productive skills end up jaded, discouraged or even feeling like they weren't really cut out for all this.

Sure, I've met a few people that are insanely clever at making code, but this persistent myth that every company has to have a few people who are overperforming on all fronts is nakedly implausible and often harmful to positivity.

tl;dr: I did more or less the same thing you did, it feels nice to join your voice in with someone else about a subject that's annoying.",2018,Why “Agile” and especially Scrum are terrible
b4ux1t3,2,"You're right. It inflates the problem of impostor syndrome. It took me *years* to realize that I didn't have to be the next Woz in order to make a living.

People need to learn that ""good enough"" is good enough. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,-3,Top comment right here. Thank you ,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,0,[deleted],2018,Why “Agile” and especially Scrum are terrible
b4ux1t3,0,"Yeah, agreed. Not to mention they all too often smack of someone who has *heard* of these things and have never actually worked in them.

""I've been programming on my own for six months! Not only am I an expert programmer, but I'm an expert in how companies should work!""

Blegh. ",2018,Why “Agile” and especially Scrum are terrible
StabbyPants,0,"> I'm so sick of hearing ""this thing that is different from how I do it is bad and should die!""


you're in the thread bitching about open plan offices being bad for productivity. do you agree with that notion or not?",2018,Why “Agile” and especially Scrum are terrible
b4ux1t3,1,"I don't agree with it. Using blanket statements like ""this is always bad"" is *always* wrong. There is always a different use case, always a different way of doing things. No one method, office layout, or management style is the right fit for every situation. But it not matching up with a my situation *does not make it bad*, it makes it not right for my situation. ",2018,Why “Agile” and especially Scrum are terrible
StabbyPants,0,"this isn't a blanket statement, it's a directional statement. it's based on studies that show this effect. in no way does it represent itself as categorical",2018,Why “Agile” and especially Scrum are terrible
b4ux1t3,1,"""Open offices are bad.""

That is a blanket statement. It is implying that open offices are bad for *every situation*. That is simply untrue. ",2018,Why “Agile” and especially Scrum are terrible
StabbyPants,1,"it is not. it is reduced for the sake of brevity, but it is not intended as categorical. it's a callback to the paper recently published here about open offices reducing productivity, likely more than the cost savings",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,39,[deleted],2018,Why “Agile” and especially Scrum are terrible
brand_x,31,"Ours had a fucking gong. We did our best to isolate engineering, but there is only so much you can do. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,18,[deleted],2018,Why “Agile” and especially Scrum are terrible
dexx4d,10,Tie a 3d printed air raid siren to the CI system and announce successful builds.  Bonus if your team commits several times per day.,2018,Why “Agile” and especially Scrum are terrible
StabbyPants,1,my first thought. cheap and not obvious,2018,Why “Agile” and especially Scrum are terrible
bagtowneast,3,Literal trumpet that they would blast into the multi-story central space that all offices opened to. ,2018,Why “Agile” and especially Scrum are terrible
brand_x,4,I wonder if that profession just attracts attention selling narcissists...,2018,Why “Agile” and especially Scrum are terrible
NeverCast,1,"Our office is in a shared building. They have public open space with a kitchen etc, and also, A BLOODY GONG!",2019,Why “Agile” and especially Scrum are terrible
SemaphoreBingo,-1,"Worked at a place w/ a gong,  thought it was great as it meant we had just made a big sale to somebody who was going to give us money that would eventually make its way into my wallet.",2018,Why “Agile” and especially Scrum are terrible
brand_x,3,"Yeah, ours too, but that doesn't mean we needed our concentration broken every couple of hours. ",2018,Why “Agile” and especially Scrum are terrible
SemaphoreBingo,0,"Oh yeah that makes a difference, ours was an 'every couple weeks or so' thing. (our stuff started mid-five figures and went way up from there .... )",2018,Why “Agile” and especially Scrum are terrible
thephotoman,0,"I’m on an engineering team that rings a cowbell every time we hit a milestone. It’s great for team morale, actually. ",2018,Why “Agile” and especially Scrum are terrible
pilibitti,62,">2 of them would be watching rick and morty on a second screen

I see you guys are hiring only the top talent.",2018,Why “Agile” and especially Scrum are terrible
switch495,28,"The name of the team I was talking about is 'Team Schwifty' -- I can not begrudge them their name sake.  

Also, yes -- they're talented and I'm not a baby sitter.  We have goals and we achieve them... usually faster and less error prone than other teams that work with us.... and most importantly, when we get something wrong we fix it -- we don't spend 4 weeks complaining about how hard it is to change now or that the requirements had said x/y/z -- things change, and we're on it. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,-11,[deleted],2018,Why “Agile” and especially Scrum are terrible
futzbuckle,6,I like to have background noise on my second screen while I program and think. Could be music or videos.,2018,Why “Agile” and especially Scrum are terrible
switch495,4,"At the moment that is possibly the case -- I'm a bottleneck as PO/BA for 2 teams working in 4 domains.    Got 2 new BA's in the last  month though, once they have their feet under them the backlog should be good...  but that said, even when there is more than enough work -- the mood/atmosphere tends to be just as jovial. ",2018,Why “Agile” and especially Scrum are terrible
elmo61,14,I think it's common for Devs to have shows playing while workong,2018,Why “Agile” and especially Scrum are terrible
chrisrazor,7,I've seen this but I have no idea how people manage it.,2018,Why “Agile” and especially Scrum are terrible
MuckleEwe,1,I do that too. Good to know it's not just me. Dunno why it works but it does.,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,7,Not really. It sounds more like you're unfamiliar with how different people prefer to work differently.,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,0,[deleted],2018,Why “Agile” and especially Scrum are terrible
ehsanul,1,Ping pong actually makes a lot more sense to me than a tv show.,2018,Why “Agile” and especially Scrum are terrible
PanopticonMatt,83,"This x1000... The worst companies I’ve worked for were top-down, engineer-lead orgs, where the devs were brilliant AF, but had ZERO clue as to what our customers really wanted or needed? Because they were idiots? Nope - they were amazing coders and engineers. But they never got out and actually TALKED to end users. Hence they designed these months-long enhancement projects that never seemed to have an end, and that didn’t solve the right problems (or any, usually, beyond whatever made the engineers, loves easier or just they felt was cool to have on their CV). 

I’ve never worked as a consultant, but the ones I HAVE worked with tended to be weak-kneed generalists trying to justify themselves with the sort of appropriation suggested in the OP. That’s the contractor’s fault though, not the process’s.  ",2018,Why “Agile” and especially Scrum are terrible
joequin,32,">The worst companies I’ve worked for were top-down, engineer-lead orgs, where the devs were brilliant AF, but had ZERO clue as to what our customers really wanted or needed?

I'm confused by this. How was it top down and engineer lead?",2018,Why “Agile” and especially Scrum are terrible
pbtpu40,45,"They put engineers into management roles, specifically engineers who didn’t do software. Company I worked for was engineering all the way up. 

But they did zero research into what customers actually wanted or needed while doing a waterfall process. End result working with crappy direction.

Not to mention their obsession with keeping old products and tapping on new features. 

Me: Hey those parts are going end of life!  
Them: We’ll do a last time buy so we have stock. 
Me: but this is a new product and that processor will be 15 years old when this ships.  Why don’t we modernize the platform?
Them: that would be a massive cost sink porting all this since so much is written in assembly. 
Me: That’s because hardware undersized the system when you first built it and never fixed it. You’re building a new platform, why not fix it now?
Them: The customer isn’t paying us for that. 

I left a short while later. ",2018,Why “Agile” and especially Scrum are terrible
Goto80,4,"Sounds a lot like I am working for the same company now. Rebuilding the same old designs year after year, only modernizing when forced by suppliers, completely screwed up priorities driven by technology, not customer demands, and disappointed customers (those which are left). Engineers in management roles without any clue how to act in their roles (AKA as incompetence) are really annoying as fuck. I am in a sort of a lucky position where I can ignore most of the idiotic, unproductive stuff going on around me, but I'd rather have a healthy environment to work in.

>I left a short while later.

I'll give them another year before going the same route.",2018,Why “Agile” and especially Scrum are terrible
joequin,3,Ah ok. So they used waterfall and top down. It wasn't agile at all then. That makes sense.,2018,Why “Agile” and especially Scrum are terrible
PanopticonMatt,5,"Yeah sorry, that company was totally about the waterfall, and had execs that were raised up to management because of their engineering chops. 

Ironically, they hired me in to help bring a faster, more customer-focused process to bear, one with more rapid iterations (customers were actually complaining that we only released every 6 months or so, and usually included features they didn’t ask for while requested features were ignored). After a year of butting heads with them, and having every suggestion ignored out of hand that would have introduced some Agile methodologies, I was asked to move on. Frustrating... ",2018,Why “Agile” and especially Scrum are terrible
joequin,4,"That sounds awful. Agile can be bad too. And I think a lot of the criticism for agile comes from agile that was implemented in one of two bad ways

1. You're doing top down waterfall development, except now you also have hour+ long ""standup"" meetings every day.
2. You have chaos agile where requirements change every day and the development plan changes every day.

ideally, and I've seen agile work very well this way, you have a mix of top down and bottom up. management, marketing, and sales determine features with a lot of input from engineering if the features are targeting technical types, and some engineering input if they're targeting non technical consumers. You have bottom up for technical decisions, tech process, and managing tech debt. You focus on small development iterations. Requirements shouldn't change during these iterations, but they can change between iterations if there's a good reason. 

I've worked under that process at a few companies and it works really well. Engineers are happy because they are in charge of tech and can go heads-down for a development iteration. They can push back on requirements when tech debt needs to be managed. Business-level managers are happy because they can change requirements when they have to. It's a really good mix. ",2018,Why “Agile” and especially Scrum are terrible
PanopticonMatt,1,All this is very true... well said. ,2018,Why “Agile” and especially Scrum are terrible
AwfulAltIsAwful,1,"I feel like one of the most difficult hurdles I've struggled with over my career leading smaller teams is in the battle between how much value my experience and knowledge add to the design of my software versus how different my use cases of the software are from the typical non-power user. Knowing when to push an opinion and when to relent. When to trust end user input and when to go with my gut.

I've seen problems arise when developers lean too far in either direction. Rely on your own opinion too much and the software is an unusable mess for the end user. Too little and the software ends up completely missing the requirement mark. As with anything related to the field, there is a very fine line to walk and it takes experience to even see the line in the first place.",2018,Why “Agile” and especially Scrum are terrible
PanopticonMatt,1,"I’ve found the most successful process is to define problems needing solutions (features or enhancements) in as specific terms as possible, described *from the end-users’ perspective*, and then trust the engineers to find the best technical way to actually accomplish that goal. 

You have to be specific though - once I wrote a feature that basically said ‘the user needs a way to accomplish [thing] from the home page, and the engineers literally came up with a way to do so that took *9 separate clicks*to find and get to. Because so many customers were demanding the feature be easy to find and accomplish quickly, I needed to re-write the problem statement that they needed to do the thing in SINGLE CLICK. The engineers saw nothing wrong in 9 clicks - they knew the system so well that that wasn’t hard to follow, but actual end users had zero chance of finding it with that setup.  Lead to a big fight (which I lost) and the thing went in with 9 clicks. 

Customers revolted soon after and demanded a huge, expensive update to make it simpler like I said it should have been right from the start. Oi... ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,53,[removed],2018,Why “Agile” and especially Scrum are terrible
Jdonavan,18,"Not when done correctly.   Like others have pointed out there’s more than just going through the motions to be agile.  

I’ve worked at a couple places where the open plan led to better collaboration.  I’ve worked at many more where they thought it was the hip thing to do and made it a nightmare ",2018,Why “Agile” and especially Scrum are terrible
geerlingguy,26,"I might be missing something here, but is there some sort of correlation between open offices and Agile methodologies? I thought the former was just a severely annoying side effect of building designers realizing they could save a ton of money on walls and space design and pass it off as a cargo cult idea.",2018,Why “Agile” and especially Scrum are terrible
Jdonavan,12,"The first open plan offices I worked in were created specifically to facilitate collaboration for agile teams.  Like the client I'm currently working with.  There is ONE team in large room and the team members love the ability to communicate and collaborate.

Another client I worked with  knocked down all the walls on an entire floor and shoved a dozen teams into the same space.  It was a complete shit show.  

A lot of companies seem to think that adopting a handful of ceremonies and putting everyone in the same room makes them agile.  It's those shops that give open workspaces and agile itself a bad reputation.",2018,Why “Agile” and especially Scrum are terrible
geerlingguy,1,I've been fortunate enough to not have to work in these types of environments. Cargo cult agile sounds way worse than ITIL+Waterfall.,2018,Why “Agile” and especially Scrum are terrible
CrimsonOrb,1,"Open offices and Agile both seemed to gain widespread adoption at the same time in my view, so that's why there might seem to be a direct correlation. I agree that the open office is pretty much a cost-cutting measure with some side benefits for management, masked by buzzwords like modern, hip, collaborative, etc. 

And what you said about cargo cults could be applied to many organizations' adoption and implementation of Agile and lots of other things too. I've seen so many ""this is how (insert Big Tech company name) does it"" justifications over the years for everything from marketing approaches, design decisions, department structuring, workflow processes, company culture, and employee titles and roles.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,35,[deleted],2018,Why “Agile” and especially Scrum are terrible
dumbdingus,29,"2-3 days working from home would pretty much make any job decent... You literally don't have to deal with the open layout 50% of the time. 

I don't think it's a fair comparison to compare your situation with someone who has to sit in the open office plan 5 days a week.a",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,"Yeah, I love this part, because it just sounds like compensation for having to work in a counter-productive environment the other two days a week, i.e. ""open floor plans are great as long as you don't make people work in them!""",2018,Why “Agile” and especially Scrum are terrible
YearOfTheChipmunk,4,This is a fucking *ideal* setup. ,2018,Why “Agile” and especially Scrum are terrible
switch495,0,"Spot on... 
I have two off shore teams of 10 each.

1x PM
1x Tech Lead
4x Developers
2X QA/Autotesters
1X UI Dev
1X UX Designer

Each team sits in its own space within a greater 'open plan' floor.   

None of that office wide hot desking bullshit.. a team space belongs to the team... within that space the teams can decide where they want to sit or how/if they want to hot desk... a few weeks ago 1 team switched to pair programming because thats what they wanted... so the desks moved a bit and the workstations changed. The others are still developing individually and running code reviews. 

Everyone has a good set of headphones, most of them are sporting HyperX cloud 2's - not noise cancelling, but good noise insulation.

We've got horse-shoe type set up with a central table in the middle and peoples desks along the side. https://imgur.com/WLRYnwb  There's a central TV there as well for videocalls and demos/presentation streaming. This means that we can have team meetings, standups, retros, etc just by having everyone spin in their chair and face one another. 

As for WFH - the guys just need to perform... most work from the office 5 days a week -- but its totally flexible when they want to travel somewhere or don't feel like coming in. ",2018,Why “Agile” and especially Scrum are terrible
loup-vaillant,1,"> Not when done correctly.

I know of only one correct way of doing open plans: _walls_.
",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,32,[deleted],2018,Why “Agile” and especially Scrum are terrible
CrimsonOrb,13,"I remember one of the first post-college jobs I got in the early 2000s. I was a pretty low on the totem pole, but I had a massive desk, 6 foot high cubicle walls, a filing cabinet, my own phone, etc. There was a certain pride I had knowing that space was mine to do my work and set up the way I wanted to.

I really see no upside to open offices. It's harder to focus with all the conversations that carry from the other side of the room, nearby workers blasting music in their headphones and all the other crap that goes along with it. Even just seeing people walking to and fro in my field of vision can be immensely distracting sometimes.",2018,Why “Agile” and especially Scrum are terrible
wewbull,4,"Personally, cubes are the worst. It just feels like I'm a battery hen. ""Go into your box, and we'll come pick up the eggs later"".",2018,Why “Agile” and especially Scrum are terrible
TheCarnalStatist,2,Put me in the minority that hates the idea of a cubicle then. Open offices of leas than 10 people with a shared charter are ideal for me. Preferably one that avoids bright lights. I like the light background noise and full silence drives me absolutely batty,2018,Why “Agile” and especially Scrum are terrible
RMCPhoto,1,"What does an open floor plan have to do with agile?

That's a money saving technique.  Offices are expensive, cubes are still a bit expensive (and many sit unused), open floor plans are ""cheap"" and easy.",2018,Why “Agile” and especially Scrum are terrible
troglodyte,5,"I really can't speak to Agile, as I left development before any of my companies drank the Kool-Aid, but open offices are a different beast entirely, and discomfort being seen not working is only a fraction of the issues plaguing the open office concept right now.

The studies concerning open offices are numerous, damning, and nearly universal; meanwhile, the burden of proof that any change of this nature should require has been entirely unmet. If I suggested that working exclusively under a full moon resulted in better code, more sales, happier employees, and lower costs, you'd rightly point out that I needed to show my work. In open office spaces, not only have the proponents failed to demonstrate the purported value of the practice, numerous studies have shown various ways it does the exact opposite of the intended outcome-- and yet it's increasing in popularity.

It's troubling that so much of business is cargo cult science that is the result of emulating successful companies without bothering to understand *why* they're successful. It's the faulty logic driving the explosion of open offices, and that same logic drives the adoption of poorly-implemented Agile. Leaving aside the specifics of each, it's this cargo cult behavior that needs to be excised, moreso than any specific practice.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,[deleted],2018,Why “Agile” and especially Scrum are terrible
switch495,1,Have I failed to write up 90% of stories in a proper format with real AC's or cucumbers?  If so -- maybe?,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,4,"> Er... you're doing it wrong if your dev team

Oh, the classic ""you're doing agile wrong if...""",2018,Why “Agile” and especially Scrum are terrible
radaway,6,It's a classic case of no true scotsman.,2018,Why “Agile” and especially Scrum are terrible
s73v3r,1,"Not so much. If you're not doing things right, you can't expect the correct results. ",2018,Why “Agile” and especially Scrum are terrible
YearOfTheChipmunk,6,"Are you also one of those people that look at recipes online, change a bunch of shit, and then complain about it not coming out right?",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,-2,[deleted],2018,Why “Agile” and especially Scrum are terrible
zellyman,5,"> Open office is in the ""recipe"" of agile

Well at least now we know your opinion is uninformed instead of just speculating.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,0,"Tell me again, who advertises open-offices mostly?",2018,Why “Agile” and especially Scrum are terrible
zellyman,3,"Web agencies, software shops, engineering firms, architecture firms, lots of places.

&#x200B;

I get your angle here, but it's a massive pile of fallacy.   There's lots of shops with more traditional project management with open floor plans as well.  ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"They do it because it's cheaper and not because it ""accelerates teamwork"" and such bullshit.",2018,Why “Agile” and especially Scrum are terrible
zellyman,2,Not really my concern.  It has nothing to do with agile development is all.,2018,Why “Agile” and especially Scrum are terrible
chordnightwalker,2,Sounds like a terrible working environment ,2018,Why “Agile” and especially Scrum are terrible
switch495,-1,Absolutely terrible... we all go on vacation together because we hate it so much :),2018,Why “Agile” and especially Scrum are terrible
Cheeze_It,2,"> Er... you're doing it wrong if your dev teams don't feel comfortable acting naturally... also, wtf is sales doing in the same open space?

Because management is fucking moronic.",2018,Why “Agile” and especially Scrum are terrible
ZebracurtainZ,1,Thank you. My thoughts exactly. I'm treated like an adult at work. If someone walks past and sees me on Reddit they assume I'm taking a break between a couple tasks or killing 5 mins before a meeting. I had the concerns moving to an open office agile environment but it's been amazing for me. As a fairly junior developer it's made learning from my coworkers a breeze ,2018,Why “Agile” and especially Scrum are terrible
aedrin,1,The space I’m in is about 25 feet from sales and customer service.,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,Nailed it.,2018,Why “Agile” and especially Scrum are terrible
El_Impresionante,1,"> The fact that some asshats sold the buzz word to corporate 5 years ago and have been pushing disfigured permutations of 'agile' has no bearing on the fact that a team that actually works agile is usually high performing.

This is ignoring the elephant in the room that an overwhelming majority of companies use those disfigured permutations. 'Agile' is a buzzword. Period. Probably that is why we see so many articles like this.",2018,Why “Agile” and especially Scrum are terrible
baxter8279,1,"your shitty requirements comment got me lol, I've been there.  ¯\\\_(ツ)\_/¯ ",2018,Why “Agile” and especially Scrum are terrible
s73v3r,1,">Er... you're doing it wrong

No, we're not. We have absolutely no control over these kinds of things. It's entirely management. ",2018,Why “Agile” and especially Scrum are terrible
Lashay_Sombra,1,">The fact that some asshats sold the buzz word to corporate 5 years ago and have been pushing disfigured permutations of 'agile' has no bearing on the fact that a team that actually works agile is usually high performing. 

5 years? I wish!! try 10 plus years that crap has been  popular.

It was 9 years ago after working with two teams in a row (boosting my CV) who had drunk the cool aid that i put in a personal rule to never work on a contract where agile was even mentioned.  

People keep on telling me if done right it works (and i believe them, theory is sound..practice though...), but yet to see that in the real world

In real world Agile is for managers who dont know how to manage a dev tean, while making them seem they do (or at least look busy)",2018,Why “Agile” and especially Scrum are terrible
Great_Chairman_Mao,1,"Totally agree. Open office plan here, never have to pretend to work. I can watch Youtube all day as long as I get my work done. If your team/company is more worried about appearances than results, then you’re doing it wrong.

I actually love the open office plan. I like being able to stand up and ask my teammates questions. Or turn around and tell someone to check something out a meme on my screen. ",2018,Why “Agile” and especially Scrum are terrible
Taubin,1,"The place my wife works is open office like this. All of the teams are together, but smashed in with everyone else. The only exceptions are my wife's team (due to security reasons), and management. There have been numerous occasions she's had to yell at one of the teams because they were shooting nerf guns or yelling across the room at each other, distracting everyone else. Including her in her closed-door office. 

Productivity has suffered horribly because of it, but the company loves it because it ""allows everyone to connect more""",2018,Why “Agile” and especially Scrum are terrible
opinionated_indian,-2,I agree too. Our team discussed and implemented Agile literally 3 weeks ago and I'm already able to deliver more in a sprint than what I used to do working unstructured. ,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,-28,[deleted],2018,Why “Agile” and especially Scrum are terrible
YearOfTheChipmunk,19,"Acting naturally *as a dev team*.

Use your brain. Think about what someone is actually trying to say instead of looking for opportunities to be a contrarian.",2018,Why “Agile” and especially Scrum are terrible
nutrecht,19,"I'm confused. What do open-plan offices have to do with Agile? They're just a cost saving measure. 

To me it feels like this was added in just to get people to agree with the article, because who doesn't hate open-plan offices?",2018,Why “Agile” and especially Scrum are terrible
s73v3r,-3,"They're not directly related, but there is a high correlation between places that do ""Agile"" and places that have open office plans. ",2018,Why “Agile” and especially Scrum are terrible
Habadasher,6,"Yes, they both tend to be companies.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,89,"God almighty, people (sales/support/admin) loudly speaking on the phone. Impossible to think.

Edit: admin is having another loud, giggling fit because someone said something mildly sexual. ""Phenis""",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,72,"It is worse in countries where being ""social"" is seen as a must. Then it's the people all around you talking loudly and even blasting music through their computers' speakers to ""lighten up the office!""",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,71,My blood pressure spiked just reading this,2018,Why “Agile” and especially Scrum are terrible
orangesunshine,54,"Christ this is why I left SF.

I could walk into any bar in that city and walk out with 5 job offers, but christ I can't fucking stand their whole fucking absurdist deal.

>Let's all try and appear as ""friendly"" as possible but you know ultimately act like the shittiest people on the planet.

Worst thing about it is they don't even realize how unpleasant that makes things... or you know that you can see straight through their bullshit.

>I wasn't being shitty

""You lied and I caught you lying ... and still now you are lying.  Let's do this, you just stop lying ... and I'll not make you admit to this whole thing or ever bring it up.  Deal?""

>I didn't lie about anything.  <proceeds to repeat lie>

Yeah.  See ... that that is the very opposite of the truth.  Do you not see how that's a problem?


It's like they are so desperate not to ever upset or ruffle your feathers and *always* so desperate to come across as this sort of upbeat, happy, awesome guy ... that they can't bring themselves to tell you even the slightest sort of upsetting news.

Of course though the only reason I ever even get upset with these people is because they put me in a much worse situation by lying/etc... than I'd have been in had they just been honest from the start.


The ""upbeat"" .. friendly ""personality"" is fucking annoying as all hell .. but how they actually behave is what's truly disturbing.",2018,Why “Agile” and especially Scrum are terrible
RogueJello,24,"Also left SF/Bay Area, and very happy with it.

I honestly think a lot of the stupidity is based around short term games.  If you know that most of the people around you are going to be gone in 6 months, why bother to be genuinely nice, honest, or supportive?  Putting on a facade is more than enough, and it's less effort.",2018,Why “Agile” and especially Scrum are terrible
beginner_,24,"It's worth than that. 

Management: ""We need open-plan offices to increase communication""
Management: ""We need rules of conduct to it's quiet""

Classic 1984 double-speak. It's simply about saving money (space) and control.",2018,Why “Agile” and especially Scrum are terrible
ArkyBeagle,3,"It might be about control but it's not about saving money. I was senior-senior ( reported to the architect/CTO ) in a case where he got teh Edifice Complex and built a building. I was his Pancho Sanza on the planning for the interior - stick-built offices were half the cost of ( used, funky filthy ) cubes. ",2018,Why “Agile” and especially Scrum are terrible
butt_fun,1,"I just giggled audibly at phenis, maybe I'm part of the problem",2018,Why “Agile” and especially Scrum are terrible
eldigg,42,There is borderline labor unrest over the switch to a fully open office plan at the (extremely large and conservative) company I'm at. Multiple meetings with VPs and SVPs.  They're currently putting in walls that they took down two weeks ago.  It's been a fun ride.,2018,Why “Agile” and especially Scrum are terrible
arranblue,23,"I worked for a company that decided to move to open plan. The problem is that the floor we worked on was almost a whole city block. The noise and interruptions were intolerable.

Daily standups from another team would converge right behind my chair. I had to walk away during them.

A manager nearby would have numerous calls a day on speaker phone.

The list goes on....",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"Open offices suck, but you also just obviously worked with shitheads.

Having a phone call on speakerphone in an open office should be a literal crime, and it's pretty intuitive that you need some kind of meeting space.",2018,Why “Agile” and especially Scrum are terrible
bee-sting,28,"Our company has a similar sounding name to a much larger, more annoying and difficult-to-contact company. 

There's a guy in my open plan office that gets phone calls for this company and has to say 'Oh I'm terribly sorry, we're not related to <other company that sounds like us>', and then patiently dealing with an increasingly irate customer on the end of the line who refuses to believe we can't help them. 

Happens about every 30 mins and it's fucking awful. ",2018,Why “Agile” and especially Scrum are terrible
AusIV,14,"I used to work for a company that, among other things, managed the website for a European parliament. The office phone number was on the website for technical issues. Several times a day I'd hear the guy who sat by the phone say ""sorry, this number is only for technical issues relating to the website, if you have questions about X, you need to contact Y. No, I'm sorry, I can't transfer you."" ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,19,[deleted],2018,Why “Agile” and especially Scrum are terrible
jonjonbee,18,"Why doesn't he just, you know... put the phone down? It's the very definition of ""not my fucking problem"".",2018,Why “Agile” and especially Scrum are terrible
bee-sting,7,Pretty sure he's practising to take over from [The most patient man on television](https://www.youtube.com/watch?v=Ylbjzs5At8c),2018,Why “Agile” and especially Scrum are terrible
Taubin,2,">Send in special forces, similar to Rambo

Holy shit ",2018,Why “Agile” and especially Scrum are terrible
mootmath,1,His widened eyes lmao 😂😂😂,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,58,"But agile/scrum says nothing about having to have open plan. It only concern is having communication  within team as simple as possible. You can take your whole scrum team (max. 9 ppl, yes?) and put them in a room all by themselves.

Also, agile come from the car industry, not web.",2018,Why “Agile” and especially Scrum are terrible
IceSentry,49,The agile manifesto was written by a bunch of programmers. Lean is what came from the automobile industry and was an inspiration to agile,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,12,"yes, you're correct. ",2018,Why “Agile” and especially Scrum are terrible
MisterSquirrel,3,"And that manifesto lists ""people before processes"" as one of its fundamental precepts, which was the exact opposite of how scrum agile was implemented where I worked, when we were bought out by a huge multinational.

Also it was kind of a joke among the web devs to see how dismally bad the official agile manifesto website was. I mean abominally bad, it looked like a 90s geocities personal site last time I saw it a couple years ago, and was about as user friendly as a train wreck.",2018,Why “Agile” and especially Scrum are terrible
chrisrazor,13,Yeah I was only commenting on that part of the article. I don't understand why its author believes people get no job satisfaction working on user stories.,2018,Why “Agile” and especially Scrum are terrible
ex_nihilo,5,"The author of the article is rather infamous. And a shining example of how it’s nearly impossible to get fired from Google. Seriously, check him out. Google his name. But maybe grab some popcorn and strap in. ",2018,Why “Agile” and especially Scrum are terrible
switch495,9,"I think you're confusing Kanban and the car industry with scrum and the Agile.

You can be agile and work in both kanban and scrum...  scrum has its perks, kanban has its perks.  Lately I prefer kanban. 

As for open plan office -- you're right.. agile is about the team... but in practice there is usually an office building with whole floors dedicated to specific projects.. and each floor full of teams working in parallel on the same greater project... and so thats where cross team collaboration comes in with an open floor. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"Yes, true, I was mistaken. I like Kannan as well. Work good if team is very gelled and experienced. I find scrum better for 'new' 'teams as a way to drill in the self organising team thing and lean way of working.",2018,Why “Agile” and especially Scrum are terrible
johnnyslick,4,"Yeah, when I worked at Intel we had open plan seating but at the same time the lead dev was trying to implement Agile in the workplace (note: this was not the IT department, this was another department that had its own budget for IT).",2018,Why “Agile” and especially Scrum are terrible
ahandle,4,"Kanban may have come from Toyota, not Agile as a whole.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,26,"I've worked from home for 8 years now, usually split 75% from home/25% on-site.

The 25% on-site is the most unproductive time. There are some other value added to being on-site like meetings. But if I had to work in an office 100% of the time I'd never get anything done.

Hell I'd pull an all-nighter and get ""40 hours"" worth of work done over night because I had ZERO distractions. Sometimes the hours would just pass and I'd have a full task completed.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,16,[deleted],2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,"> that doesn't sound healthy.

Not everyone has the same thinking or work patterns that you do. What works for some people doesn't work for others. I have *always* been a night owl. People have been telling me I'd 'grow out of it' when I got older. Left unchecked my sleep schedule is 3-4AM to 10-11AM even at 36.

Additionally I have the ADD which means hyper focus. When I'm in the zone coding I don't notice the passage of time. So it's not like I 'work' through the night with regular breaks and such. I would have been in the group they sent out on persistence hunts back in the day.

The next day I'm also not tired until normal times and the next night sleep is extremely good and not restless at all.

Through college I think I averaged at least 2 all nighters a month. Not because I *had* to get stuff done or study but just because I was studying/working and didn't notice it became morning.

In reality there is no 'normal' for humans. Each of us ticks different and this has reliably worked for me for 18 years.",2018,Why “Agile” and especially Scrum are terrible
eSanity166,1,Depends on whether those hours are compensated ,2018,Why “Agile” and especially Scrum are terrible
loup-vaillant,1,Could be if they then rest the rest of the week.,2018,Why “Agile” and especially Scrum are terrible
Belgand,1,"Works great for me as well. I put in the effort when I feel up to it. Sometimes that means I look at the computer, don't feel up to working, and spend all day watching TV instead. Other days I work for a few hours, leave to go do something all evening, come home at midnight, and the thing I was vaguely thinking about all night has finally given me the idea I need to sit down and spend the next 12 hours working out the solution.

Focusing entirely on output, not when, where, how, or how long it takes someone to get those results is healthier. Working from home often helps that significantly. It especially reduces the problem of one person feeling bad because they take more time to do the same work or another getting more piled on if they finish theirs earlier. Making work task-oriented rather than time-oriented encourages efficiency.",2018,Why “Agile” and especially Scrum are terrible
ArkyBeagle,1,Firms deliberately decide to fail. You'd be a fool to argue with 'em. Get a framed picture of Shumpeter for your desk. ,2018,Why “Agile” and especially Scrum are terrible
Belgand,0,"It's also cheaper for a company. Most don't have nearly as much need for office space as they think. I worked with one person who, among other reasons, thought we needed an office to appear more professional to investors. I think that they would appreciate knowing that you're being sensible with your money. Especially given the price of Bay Area real estate. Meetings at coffee shops or co-working spaces are common enough for the industry and region.",2018,Why “Agile” and especially Scrum are terrible
beginner_,18,We will move to a new building soon and hence from single-office to open-plan. I'm terrified. My CV is already updated but it's basically impossible to find work-places with single-offices. Thing is i could earn 10-20% more but I stayed because of the single-office. If that is gone...,2018,Why “Agile” and especially Scrum are terrible
PreservedKillick,15,"My last job and the one before that both did this. Yay new offices! But we're going open office plan. And removing the 2 days remote per week. In that case the Director of software was 20-30 feet away. On the phone, loudly, 70% of the day. My manager was 3 desks away. Great guy but also always on the phone. So, so, so distracting. At the old office, we were in cubes. It was very quiet and I loved it. No programmer in history ever thought, gosh I'd really like more interruptions and distractions. There was never any communucation barrier. Have a question, go to a cube, slack, take a meeting. Anyway, after the move I quit. 

Next job was nicer, better pay and tech and engineers. Moved to super nice new offices. But my team was right next to sales. More all day phone chatter. And constant traffic and distractions. So then I quit that job. Stupid f*cks. All of this is just beyond obvious, yet it continues. My current job is mostly quiet in the office and remote 2 days a week. I get way more done. This isn't rocket science. Just ask any programmer anywhere. 

",2018,Why “Agile” and especially Scrum are terrible
number5,31,"I actually like open-plan offices, tell me about the productivity when you living in Enterprise Cubical farms.

And pretending to be always busy is a company culture thing, it will happen even if you working remotely (to like every messages on Slack from big boss, ask everyone to code review your PR, etc.)

That said,  I don't like to share open space with sales team either, or even worse, a ping-pong table!",2018,Why “Agile” and especially Scrum are terrible
ashishduhh1,2,"People complain about open plan and cubicle farms, they both have pros and cons.  It's just about building around the pros and minimizing the cons.",2018,Why “Agile” and especially Scrum are terrible
way2lazy2care,1,"Yea. I think people really want individual offices, but have no idea how much rent costs.",2018,Why “Agile” and especially Scrum are terrible
AmalgamDragon,2,"As a percentage of developers salaries the difference in cost is a couple percentage points, which can be easily recovered from the reduction in distractions.  This is a case of being penny wise and pound foolish.",2018,Why “Agile” and especially Scrum are terrible
accountforshit,29,"I don't agree. I generally prefer more open spaces, or even large offices with 5-10 people. But they have to be done right.

>They’re anti-intellectual, insofar as people become afraid to be caught reading books (or just thinking) on the job.

If there are negative consequences for such things, that's a different issue - having people who don't understand the process.

>When you force people to play a side game of appearing productive, in addition to their job duties, they become less productive.

Again, you can have open spaces without doing that. May not be possible when you have idiots in charge, but there are places that aren't like that.

>And it doesn't even mention the sales guy working in the same office who breaks everyone's conversation every ten minutes for another sales call.

That's another solvable problem - have a rule where all calls or longer discussion need to be done in a separate room/area (of course such a room needs to exist first).

The density of desks also matters a lot - it shouldn't be too high.

If your only experience is with a really shitty implementation of such offices, I can understand your distaste towards it. But this subreddit is a giant circlejerk when it comes to this topic, and I don't think the population here is a good representation of the industry.",2018,Why “Agile” and especially Scrum are terrible
beginner_,19,">  large offices with 5-10 people
 This isnt open-plan. [This](https://static.independent.co.uk/s3fs-public/thumbnails/image/2015/12/01/19/facebook-office-wp.jpg?w968h681) is open-plan.
",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,15,"That looks like a fun place to work!

*::thinks about it for ten seconds, kills self::*",2018,Why “Agile” and especially Scrum are terrible
accountforshit,6,"That looks pretty bad, it's way too big. What about something like this https://www.youtube.com/watch?v=KJ6X4sBkEXM#t=3m at 3:00, it's a video of the offices of the company that makes Euro Truck Simulator. Would you consider that open?

It looks far closer to the places I've experienced (although I worked in a bit bigger places as well) than the big clusterfuck in the picture you posted.

Here is another random picture I found via google images https://www.cisco.com/c/dam/en_us/about/ciscoitatwork/assets/images/Connected_Workplace_POC_big_1.gif and again, it looks far closer to what I picture in my head when talking about this.

I wonder if most people commenting and voting here would have problem with such workplaces as well.",2018,Why “Agile” and especially Scrum are terrible
vamediah,2,"I consider anything with more than 6-8 people open. With > 6 people it will start being noisy. What's the point to coming to office if you are *not* supposed to interact with people to ""be quiet"", you might as well just have homeoffice.

Second factor to consider is how much crammed the desks are. If you used up all space, then that's not great either. Especially if just moving along desks is difficult.

Don't get me started on the fucking stupid idea to remove walls and put glass instead of it, then also remove door. It does not not help against noise and it also doesn't help against being disrupted by someone constantly passing by.

This thing is cancer, 10+ years ago there weren't almost any offices like this in the city, now you can't find one that isn't crammed openspace without walls and doors. And I can see they build new shitty offices like this everywhere.

The reason for all this shit is exactly as described in the article: to not give anyone any privacy and make people appear working instead of working.",2018,Why “Agile” and especially Scrum are terrible
JohnBooty,5,"> all calls or longer discussion need to be done in a separate room/area

Theoretically, sure!

But then you need a lot of private spaces. Once you allocate all those private spaces you're eating up nearly as many sq. ft as a traditional office. 

Which is certainly possible! I worked in an office with sort of a 50/50 split between shared and private spaces, and it was great.

However... a lot of companies pick open-plan *to save on sq. ft.* Either because they're too cheap to get more space or because they simply can't afford it. Especially true in expensive cities like SF/NYC.

So doing open-plan offices right -- with enough private space for phone calls and discussions -- is often a fantasy.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,0,"Large office with 5-10 people is not an open plan office.
I'm currently in an office with 32 desks blocked into 4 groups of 8 with no dividers with the CEOs office overlooking them all.",2018,Why “Agile” and especially Scrum are terrible
IICVX,6,"Though the author's screed about open offices being about ""corporate image"" is completely incorrect.

Open offices are a big trend right now because they let you stuff significantly more people into the same area. They're even more dense than a cubicle setup. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,And easier to rent out. Any kind of business can work with some desks in a big rectangular room.,2018,Why “Agile” and especially Scrum are terrible
daredevil82,3,"this is where a white noise generator helps.  Normally I'm not a fan of open offices for the reasons you described up there, but my company is actually really lenient about that.  As long as you're getting your tickets done, they don't care (probably because a third or more of the 500 people are fully remote).

There are white noise generators all over the office, so you can easily have a video call with headphones and the desk next to you will barely hear anything.",2018,Why “Agile” and especially Scrum are terrible
zero_point_three,3,"Although it was a very small company with a few people, I've worked as a dev in an open space, right next to a full table of marketing women who would talk louder and louder every day. I'd politely ask them to keep it down and sound like the party pooper, but after an hour we'd be back to square one. I was already drowning in a ocean of tasks. My stress levels went off the charts. I only stayed 2 months. Fuck your stupid company which is gonna close in a year at best, fuck your useless daily meetings and fuck your shitty startup mentality (wages are low, but we have PASSION).",2018,Why “Agile” and especially Scrum are terrible
chrisrazor,1,Just play your music out loud.,2018,Why “Agile” and especially Scrum are terrible
yamichi,3,"My team got kicked off two Dev floors. I do incident Management so I'm on a lot of calls that require me to be... Assertive. So is my whole team. 

They hide us in an unpopulated corner now. Fuck open floor plans.",2018,Why “Agile” and especially Scrum are terrible
StabbyPants,2,"i wouldn't begrudge you, but yeah, you do belong away from devs",2018,Why “Agile” and especially Scrum are terrible
baxter8279,2,"I couldn't agree more.  A sort of relative example from my own experience is working in an open layout, I feel more pressure to appear busy than I do to actually do work, which sounds weird.  Occasionally I work from home, and I always feel like these are truly my most productive days.  I can focus and get things done.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,"One thing about open floor plans that I don't think gets mentioned enough is how demoralizing they are. So people talk about the distractions, and they are a problem in themselves, but knowing that something's inevitably going to break your flow makes it harder to get started in the first place. When I really need to get things done, I find myself having to take lunch at weird times or just plan on staying late so I can get some quiet. It certainly doesn't help when the scrum master actively encourages the use of office toys either.",2018,Why “Agile” and especially Scrum are terrible
grimmlingur,2,"While I largely agree with this, I've also worked in an open plan office that had a really great culture with this. There was an implicit assumption that you were using your time well. If someone walks past and you happen to be playing a video game or watching some video or other, that doesn't mean they are wasting time, they may be waiting on the results of a test or letting some thoughts settle. Hell they might just be taking a little break from work, which is generally considered healthy for productivity as long as they are kept within reason.

However, that sort of culture takes a lot of trust across more or less the whole of the company and it's pretty fair to say that not everyone can pull it off.",2018,Why “Agile” and especially Scrum are terrible
walterbanana,2,"I start working late and get off late, the last two hours in which I have the office to myself are sometimes the most productive ones. The issue is that they are at the end of the day, so if I have been very productive that day, I'm usually better off just going home early.",2018,Why “Agile” and especially Scrum are terrible
thebritisharecome,3,"I've never had an issue with open plan offices and even when i've worked in offices of 200+ people it's been pretty easy, usually sales staff have a separate office / meeting rooms for calls.

Also i sit here working away listening to music / watching videos most of the time. Doesn't matter where I work as long as I'm delivering, i'm responsive and I include myself in team conversations my bosses have always just let me get on with it",2018,Why “Agile” and especially Scrum are terrible
Forbizzle,4,"Most tech leads are results focused.  If you’re getting shit for slacking on the job it’s probably not because you’re reading, it’s because you don’t produce as much as your peers.  And the theory that your reading helps you doesn’t match the results.

If it “looks bad” to anybody it might be your team mates.  A manager may say something on their behalf if they’re concerned.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,"I like open space... I actually find it more productive and inclusive. You're involved in all the right conversations and you often get answers from people you weren't even asking. I think it encourages more collaboration and conversation. It's also more fun.

I don't think the 'force to be productive' part is a result of open space more to the culture of your work place. ",2018,Why “Agile” and especially Scrum are terrible
SmokinJoe,2,"I think that's more of an indictment on a shitty office where it doesn't matter _what_ the layout is, it's going to be a bad environment.

I've only worked in two offices that had open-office layouts and I loved it. People took breaks without fear. Communication took place naturally. Headphones implied ""do not disturb"".

I loved it.

I'm working in cubicle-land right now and I honestly hate the isolation despite having coworkers just a handful of feet away from me. I've become more disconnected from my team and I don't feel any more productive.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,[deleted],2018,Why “Agile” and especially Scrum are terrible
scottbob3,3,"Yea, I feel crazy going against the grain here. I've done most of the major office styles and I found an open floor plan to work the best for me. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"I’ve noticed sickness spreads through my team so fast with the open floor plan. Other than that I don’t really have any complaints. 

The whole “appearing productive” thing or being caught reading a book is a cultural problem in the company. My team and organization would have no issues with that as long as we weren’t falling behind on some of our projects. ",2018,Why “Agile” and especially Scrum are terrible
Jdonavan,1,"> They’re anti-intellectual, insofar as people become afraid to be caught reading books (or just thinking) on the job. 

You're describing a problem with the management of your company not the open floor plan.",2018,Why “Agile” and especially Scrum are terrible
nikeinikei,1,What about using headphones with noice cancelling?,2018,Why “Agile” and especially Scrum are terrible
chrisrazor,2,"That's what I do. Noise cancelling doesn't work too well against speech though, and I don't see why I should wear headphones all day just to be able to work.",2018,Why “Agile” and especially Scrum are terrible
EquinoxMist,1,"> Noise cancelling doesn't work too well against speech though

I think you need better noise cancelling headphones then.

I can hear speech, but it is very muffled and unless I concentrate I can't make out what they are saying.  It certainly doesn't distract me.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"I think this criticism depends on the workplace environment more than anything. We have short cubes, so segmented but open. Nobody cares what anyone's doing as long as work is getting done.

As far as noise, you just really need to learn to ignore the other people. We have cubes, so segmented but open. IT is loud, SQA is loud, Optics is loud. Everyone's loud. You learn to block out other people when having a conversation, and if you want to code in peace, noise cancelling headphones with whatever music floats your boat.

Company I work for is awesome though.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"It really depends on the person. Most people just opt to wearing noise cancelling headphones in my office. I personally don’t mind people talking but I know some of my team members get very distracted by it.

I’m biased because it doesn’t affect me as much but I do like having people around as I work - it feels like your more of a community. ",2018,Why “Agile” and especially Scrum are terrible
Gotebe,1,"Not everybodys concentration is broken by these calls. I don't know the numbers, but I never felt this.

Don't know if related, but I also sleep very soundly and fall asleep easily e.g. after being to the toilet in the middle if the night.",2018,Why “Agile” and especially Scrum are terrible
Socrathustra,1,"Headphones and [this video](https://www.youtube.com/watch?v=XSL1HbrE3DE) are the cure to open-office plans.

Curiously, the only thing I found myself agreeing with him on is this, a point which has nothing to do with Agile/Scrum.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"The open plan office I work in is so large that the developers only really hear other developers.

And the whole ""afraid to be caught"" thing is not true in every office.",2018,Why “Agile” and especially Scrum are terrible
schok51,1,"It seems I'm the only one that doesn't hate and has bad experience with open space?

If the noise bothers me I put headphones on and listen to music. I can more easily interact with colleagues. We're all working around the same desks anyway, so punctual interactions are easy, and no one ever complains about that. Only perhaps about my boss being silly and loud when he's happy or mad. That's mostly just fun, at least for me.",2018,Why “Agile” and especially Scrum are terrible
nirataro,343,"Just stick to this. You can figure out the rest.

* Individuals and interactions over processes and tools
* Working software over comprehensive documentation
* Customer collaboration over contract negotiation
* Responding to change over following a plan",2018,Why “Agile” and especially Scrum are terrible
muhwebscale,89,"Also:

> while there is value in the items on
the right, we value the items on the left more.",2018,Why “Agile” and especially Scrum are terrible
arry666,188,"Good start, now you should expand it to a series of blog posts, a book, and sell consulting services.",2018,Why “Agile” and especially Scrum are terrible
nirataro,21,"Lol. The bottom line is ""give time to your team to figure it out"". This applies to the domain, or to the tech or to the schedule.",2018,Why “Agile” and especially Scrum are terrible
calsosta,0,"I have never been on a team that worked where:

* People could not estimate their LOE
* People did not estimate their LOE",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,">""give time to your team to figure it out""

but *also* give us something every two weeks 🤔",2022,Why “Agile” and especially Scrum are terrible
HiddenKrypt,1,"And then title it ""The Agile Manifesto""? ",2018,Why “Agile” and especially Scrum are terrible
micka190,1,"I think ""The Clean Coder"" might be a good subtitle!",2018,Why “Agile” and especially Scrum are terrible
MrCalifornian,42,"I agree with everything other than the implication that extensive documentation is somehow at odds with working code. How long does it take to write a comment or API doc or high-level design justification vs writing the actual code? I would estimate about 1-5%, which is nothing compared to the time it takes to figure out how something works or why something was chosen later on.",2018,Why “Agile” and especially Scrum are terrible
seamustheseagull,42,"As someone who frequently operates on the periphery where your ""working software"" has to interact with other systems and people, unless your software is a completely closed box that runs completely autonomously with no configuration, then if it has no documentation (or bad documentation) you will very quickly become a librarian, constantly being interrupted by annoying questions. Or your software will be turned to shit by people hacking solutions to make it work in the real world. 

Your documentation doesn't have to be long and complicated. Dialogue boxes, tool tips and hints are also ""documentation"". Comments in XML and json files are documentation. In fact, people are more likely to use inline documentation than an actual document. But to say that well written software needs very little documentation is a common mistake.",2018,Why “Agile” and especially Scrum are terrible
sudosandwich3,17,"The problem isn't writing docs, it is maintaining docs.  You not only have to write the docs of what you have written this sprint but verify you do not need to update your docs up till that point.  You extrapolate that over a few years and you end up with a lot of docs and a lot of potential for outdated and misleading documentation.",2018,Why “Agile” and especially Scrum are terrible
BlueShellOP,7,Full-time technical writers are disgustingly undervalued.,2018,Why “Agile” and especially Scrum are terrible
doublehyphen,3,"Yeah, open source projects with good documentation spend a lot of time keeping it up to date.",2018,Why “Agile” and especially Scrum are terrible
jrochkind,3,"You can same the same thing about tests, right?

Sometimes things that take time are still important for value. ",2018,Why “Agile” and especially Scrum are terrible
sudosandwich3,0,"Actually you cannot and this why tests are more valuable.

Since tests are required to pass on compiled code so they cannot be outdated or misleading. There can be poor coverage, sure, but the same applies to documentation.  Tests can also be used as documentation to demonstrate how functionality is supposed to work.

I personally value tests much higher than good documentation.",2018,Why “Agile” and especially Scrum are terrible
jrochkind,2,"I meant specifically that tests also give you more to maintain. But they are still valuable. 

I understand what you mean that tests have an automated way to prove they are still applicable and haven't gotten out of date, to some extent. 

The dream of tests-as-docs or executable-docs is a thing; it's an enticing idea.  I haven't experienced it working out so well. I find the ""relish"" based docs for rspec to be very hard to figure out what I need from. And that's already trying to at least put some documentation layer on top of tests, to make executable docs, not _just_ giving people test source and calling it docs. I still think it has mixed success as docs. 

Even though docs take time to write and maintain, in that way like tests, and even though docs may be even harder to maintain than tests, I think you get what you ""pay"" for. In projects I work on, I advocate for not accepting code without docs (which can include inline comment docs, where appropriate), any more than we'd accept code without tests.  Both are necessary for usable maintainable code. We wouldn't accept ""but it takes a lot more time, including in ongoing maintenance"" as a reason not to write tests.  Docs can be even more expensive, and everything is a balance, you want to find ways to make doc maintenance more efficient (experiments in executable docs are worthwhile, even if I haven't seen them succeed to my satisfaction), but you still need docs. ",2018,Why “Agile” and especially Scrum are terrible
MrCalifornian,1,"That's a good point, maybe there should be a system for identifying what parts of the code are affected? Self-documenting code helps with this, but I don't like anything that currently exists for languages I've used.",2018,Why “Agile” and especially Scrum are terrible
bananabm,3,"Two me there are two points here:

* Code drives docs. Without working code, you won't have anything to write docs about.
* Ship fast and often. If your code doesn't fulfill requirements, it's better to find out before you do things like documenting it.",2018,Why “Agile” and especially Scrum are terrible
tevert,2,"He omitted a sentence or two. 

http://agilemanifesto.org/",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,"I disagree - documentation probably takes up 80% of the time spent working on a feature. 

Usually because when you have a strict documentation policy there’s a lot of time spent documenting approach, testing, + misc investigation.

It’s a waste of time - add the feature, write tests, use good practices for code readability, and refactor when your done to clean it up.

The agile manifesto realizes that documentation is a lot more overrated / overdone than it needs to be in organizations that follow a more waterfall approach. This is because requirements change and so documentation is hard to maintain and usually ends up outdated.",2018,Why “Agile” and especially Scrum are terrible
Euphoricus,2,"I think the missunderstanding here is that ""documentation"" in this sentence doesn't mean ""program documentation"" or ""user documentation"". It means any kind of document that is used to create the software. Things like requirements documents, specification documents, design documents, use case documents, hell, even JIRA issues are kind of documents. This sentence warns specifically about kinds of process, where 50% time and resources at the start of the project is used to create ""documentation"" of how the end product should look like, without even writing single line of production code.",2018,Why “Agile” and especially Scrum are terrible
Radmonger,1,">I would estimate about 1-5%,

5% of effort is not the 'extensive' documentation that agile warns against; try 85%, and comments certainly don't count.

&#x200B;

Relevant:

&#x200B;

[**https://xkcd.com/2071/**](https://xkcd.com/2071/)

&#x200B;

Just switch 'agile manifesto' for 'my friends'.

&#x200B;

&#x200B;",2018,Why “Agile” and especially Scrum are terrible
makotech222,10,Wow I've never seen the perfect distillation of the opposites of my boss,2018,Why “Agile” and especially Scrum are terrible
JerWah,15,"The only one I mildly disagree on is the documentation. I would much rather have good documentation of code that barely works then the inverse. I focus on good specs up front. If you get those nailed, the coding is easier and the documentation is basically done already. ",2018,Why “Agile” and especially Scrum are terrible
sudosandwich3,5,Usually if you have bad code you have misleading or incorrect documentation though. And things like edge cases aren't as easy to follow. I would rather have docless working code with unit tests.,2018,Why “Agile” and especially Scrum are terrible
phySi0,1,That's kinda cheating; I'd consider unit tests as a form of documentation.,2019,Why “Agile” and especially Scrum are terrible
johnnysaucepn,3,"Only part of it. Requirements tell you when you've done it right, but doesn't tell anyone how you did it.

The point is that your customer gets some value from working but undocumented software, but no value at all from well-documented but non-working software. And they get the most value from having both. ",2018,Why “Agile” and especially Scrum are terrible
Langebein,2,"This so much. 

Whatever formal ""Agile"" process you use, it wont start working until you've peeled away all the bits that doesn't work for your team. And taking stuff away from a process doesn't make it less agile if the above is preserved.


My experience:

An ""agile"" (the adjectuve) process indicates some kind of iterative process with a continuous feedback loop in your project. Nothing more or less. This is a good thing.

Agile (the noun with a capital 'A') quickly turns into a whole bunch of red tape, consulting, certifications and arguments over what makes something not ""Agile"". This is not a good thing.",2018,Why “Agile” and especially Scrum are terrible
bedrock_city,2,"I love all this. BUT it applies much better for well-scoped software with a single customer (or representative) - i.e. web consulting, or early stage startup with good PM team. Teams that don't follow these principles are just stupid.

However, once you're in the world of service-oriented architecture at a big company (think any of the major cloud players), this doesn't really work. A central team building a platform product may have dozens of internal and external customers with different and conflicting wants. Projects may get too big to manage without any kind of agreement on interfaces and dates. Without some reasonable process it's not agile, it's just stressful chaos. Agile principles are still valid - short iterations, extreme clarity around story scope, focusing on people. But it's really a different world.

I think M.O.C. would probably be happier in the former world, given a choice. But given his writing I think he wants more of a patronage model where someone pays a lot for engineers to do whatever they want on their own timeline. There may be some value for a small percentage of superstars working on sufficiently deep problems (or at Google in the early days when money didn't matter?) But for the most part that's mostly just a fantasy.",2018,Why “Agile” and especially Scrum are terrible
xebecv,5,"Individuals and interactions over processes and tools would work if you can afford pile up technical debt. It's when your project and product are synonyms, and as soon as your project is done, your product is done too.

I work for a company where products survive decades through multiple generations of developers. I'm a development lead of a product that was created when I was a schoolboy and didn't know what my career would be. Trust me, I would REALLY appreciate if the previous generations didn't skip as much on processes and tools. All changes should have a well documented reason (whether it's a feature request or a bug description), a solution description, a well documented code, a unit test set or at least descriptions of how it was tested, code reviews and QA test evidences. We have tools for all of those that IT works hard on maintaining and migrating for our records to never disappear. Yet I see lots of stuff that is done without any records.

I don't put all of my blame on engineers - we are always pushed hard to meet our deadlines, and sometimes stuff breaks way too close to production releases. Yet if everyone respected our tools and processes more, we would have been in a better position now.",2018,Why “Agile” and especially Scrum are terrible
KFCConspiracy,3,"> Individuals and interactions over processes and tools would work if you can afford pile up technical debt. 

I think you're confusing ""over"" with ""at the exclusion of""

> > That is, while there is value in the items on the right, we value the items on the left more.

Agile still calls for using good processes and tools, but considering when processes and tools come into conflict with individuals, the individual needs are more important. 

> Yet if everyone respected our tools and processes more, we would have been in a better position now.

I think the answer to that is to ask WHY don't people respect your tools and processes. If there's a good reason how can you improve them to meet the team's needs better. If there's not a good reason then you should whack those people in the head with a stick until they do. Figure out whether processes are adding overhead and whether that overhead is justified given the business value they produce. Seek consensus on that in your retrospective - Even if you're not using SCRUM, I'd recommend the team meet after every release and talk about what worked and didn't. ",2018,Why “Agile” and especially Scrum are terrible
morpheousmarty,2,"It sounds like you should bring that up in the retrospective meeting. You value individuals and interactions over process in agile but it doesn't mean you can't have all the process you need to follow best coding practices.

Ideally bring it up after a major failure with the process so it's easier to get buy in from all parties. If you can't get your teammates and customer to agree to spend the time, no process goals will solve it, but agile does have a clear path to at least try and get that buy in. ",2018,Why “Agile” and especially Scrum are terrible
BradCOnReddit,1,"I like the thought, but it really doesn't work out well for newcomers to agile. Having some sort of comprehensive structure to start with is a huge advantage. Just work that system (ANY system) for a few months. After that, don't feel like you have to rigidly stick to it and do what you gotta do to make it happen.
",2018,Why “Agile” and especially Scrum are terrible
tevert,1,We could start a religion with this,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,Exactly - the first point is probably the one most people get wrong. If the way your scrum team operates feels like a process - you’re not doing agile right. Agile is an idea - not a handbook. ,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"So this ""individuals over processes"" part. What does this logically lead to? For example if an individual wants to ignore our process of deployment to production do we let them? If so, what is the benefit? Years of experience have shown me direct deployment to production to be the worst possible thing to let teams do.",2018,Why “Agile” and especially Scrum are terrible
nirataro,1,Well no because that does not make sense. The Manifesto is about valuing the left side more than the right side. It does not say the right side is useless. ,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"I am asking what that logically leads to. Where do we stop with process? Maybe I'm lucky to have worked in no companies with too much process that I literally don't know what it looks like. Normally I'm the one pushing for more process like CI, code review, etc.",2018,Why “Agile” and especially Scrum are terrible
nirataro,1,"- Do your code review
- Setup your CI
- Write your documentation
- Etc

But make sure that your team is capable and competent first within the scope of the project. If they are not yet, work with them to bring their levels up.  That include training, etc.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,I wonder how many of the replies to this comment don't realize that this is just a copy and paste of the agile software development values.,2018,Why “Agile” and especially Scrum are terrible
nirataro,1,Lol to them the Agile Manifesto was written first by a redditor ,2018,Why “Agile” and especially Scrum are terrible
mariusg,1,"> Working software over comprehensive documentation

This might work on SAAS but i dare you to go with a complex project on premise and say to the customer : ""We don't really value documentation"".
",2018,Why “Agile” and especially Scrum are terrible
zippy72,-1,"Customer collaboration over contract negotiation... sounds nice in theory but I’ve never been on a project that’s not had its outcomes documented in a contract unless it’s an in house one.

Realistically no company would ever sign an open ended development contract - this would lay the company officers open to being sued.

To me the issue he should be concentrating on with agile (and isn’t) is it is more geared towards internal projects and provides fewer useful tools for client facing ones.",2018,Why “Agile” and especially Scrum are terrible
notnowben,112,Most companies aren’t engineer playgrounds...,2018,Why “Agile” and especially Scrum are terrible
imnotsoclever,81,Yeah I’m reading this article trying to figure out what a “business focused company” is...,2018,Why “Agile” and especially Scrum are terrible
notnowben,24,Kinda redundant no?,2018,Why “Agile” and especially Scrum are terrible
KFCConspiracy,5,When he said that I pictured [this guy](https://youtu.be/nYscs78R5Fs?t=17),2018,Why “Agile” and especially Scrum are terrible
Deleted Account,0,Compared to a software first company.,2018,Why “Agile” and especially Scrum are terrible
cursed_namrut,36,"I've been at a couple of 'engineer-driven firms.' In the good ones, once the company has a good momentum, veteran business-end people get hired to manage and strategize, and engineers follow priorities set by the business. They're not excluded from the process of setting them, the better managers have enough technical skills of their own, but running a business is a skill set in and of itself, totally separate from engineering skills.

In the shitty ones, the most veteran or most egotistical engineers do the work they find fun or exciting, everyone else gets waterfalled the shitty work, and overall the business grows and develops less well than it would have, as well as becoming a terrible place to work.

The author admits he has shitty social skills, and he basically is spending the article to denigrate and blame people who have them.",2018,Why “Agile” and especially Scrum are terrible
Racoonie,3,"> gets waterboarded the shitty work

ftfy
",2018,Why “Agile” and especially Scrum are terrible
BrundleflyUrinalCake,450,"Rambling, unfocused mess of an article. Author occasionally stumbles onto points like “business-driven Engineering is bad” and “autonomy before estimation”. However, he fails to account for how business leaders do actually need to know when a piece of software will be complete by. Agile is not perfect, and I would not want to prescribe any one tool across the board for any given profession. But, the author makes absolutely zero effort to recommend any process that he feels would work better. 

Edit: spelling",2018,Why “Agile” and especially Scrum are terrible
10xjerker,131,"> Rambling, unfocused mess of an article

lol of course, it's Michael O'Church.",2018,Why “Agile” and especially Scrum are terrible
KFCConspiracy,45,Why do people keep posting him? I honestly don't know what qualifications he has that makes his opinions of any interest other than they happen to agree with whatever ax the OP has to grind.,2018,Why “Agile” and especially Scrum are terrible
snazztasticmatt,46,Because our field is packed full of hobbyists who don't have a lot of practical understanding about how businesses operate and just want to code for fun all day,2018,Why “Agile” and especially Scrum are terrible
semioticmadness,19,"Seemed like “OMG I can’t believe companies would be desperate to maintain client relationships and possibly offload some of that complexity onto paid developers!”

Yeah dude, work is hard and sometimes unfair.",2018,Why “Agile” and especially Scrum are terrible
Slims,1,"Shoot, even for my hobby projects I make stories and point them and do 2 weeks sprints.

I have no soul left.",2018,Why “Agile” and especially Scrum are terrible
thirdegree,15,"Honestly I think his articles spawn some pretty good discussion. Usually based in the varying ways he's wrong, but still good discussion.

Roughly the same way I feel about The Clean Code, actually. ",2018,Why “Agile” and especially Scrum are terrible
10xjerker,3,"> I honestly don't know what qualifications he has

Rambling angrily using lots of words.",2018,Why “Agile” and especially Scrum are terrible
JonnyRocks,3,And why is this post so highly upvoted,2018,Why “Agile” and especially Scrum are terrible
Socrathustra,1,"Many programmers like aimless rants using lots of words. They confuse lots of words with evidence and argumentation, especially if the words are said in a compelling manner.",2018,Why “Agile” and especially Scrum are terrible
Casceus,1,Well you dont have to agree on all fronts. For myself this article made me really reflect and look at things from another side.,2018,Why “Agile” and especially Scrum are terrible
KFCConspiracy,2,"Personally I'm not an agile purist, so it's not that I'm disagreeing based on being on the other side. I don't personally work within a set published methodology, we work within a framework we built based in part around the manifesto and things we liked from various methodologies. 

So my problem isn't about purity, it's that I think the criticism isn't founded in reality in this case, the article is overly belligerent, and is not very factual - it's full of strawmen and misinterpretations of how modern software is built and agile itself. He clearly doesn't have all of the facts, nor really many of them. And it's also about his attitude, he refers to transparency as violent and humiliating, he makes inflammatory claims about terminal juniority, mindlessness of practitioners, etc. 

I've worked in places without enough transparency, what happens is people either fuck off and do nothing, or it frustrates management to no end because they can't figure out when this product that will pay the bills is getting launched. He doesn't propose a balance beyond ""Don't be transparent"". 

> Like a failed communist state that equalizes by spreading poverty, Scrum in its purest form puts all of engineering at the same low level: not a clearly spelled-out one, but clearly below all the business people who are given full authority to decide what gets worked on.

And this paragraph alone shows he doesn't understand how an agile team is organized. An agile team is about a team of peers. Business value isn't dictated by the product owner alone. Since he says he has 10 years of experience and complains about terminal juniority, it tells me he lacks the leadership and the cajones to step beyond the screen and advocate for technological business value. 

And on that theme... I also don't think he proposes an alternative, if you're going to make an inflammatory statement about a project management methodology you should make a constructive counter suggestion rather than simply finger pointing. 

> If your firm is destined to be business-driven, that’s fine. Don’t hire full-time engineers, though, if you want talent. 

Here's what I'm talking about when I say it has no basis in reality. Consultants are a business-driven business, Google is a business driven business, Microsoft is. Every business is! It's about making money! Why else do businesses do what they do? 

> Architecture and R&D and product development aren’t part of the programmer’s job, because those things don’t fit into atomized “user stories” or two-week sprints.

This paragraph demonstrates that he's clearly unfamiliar with things like SAFe. 


His blog is just full of stuff like this. Belligerent rants without new ideas to solve the problems he believes exist. He's all talk no action at best. 
",2018,Why “Agile” and especially Scrum are terrible
Casceus,2,"Yeah i can really share your opinion. Especially that he didnt provided any sort of alternative  shows he just complains but dont have a better solution for his 'problems'. He is that type of workers how constantly complains but never try to change things and mostly also dont leave the company. 

Nevertheless, this post made our team think about how we work and if we do things the right way. And i think thats very valuable.",2018,Why “Agile” and especially Scrum are terrible
gladfelter,2,"Michael o church appears to me to be an organism devised around two fundamental drives: to be noticed and to not be provably wrong. He has, perhaps without realizing it, therefore perfected provocative-sounding rants that aren't falsifiable and therefore aren't particularly useful. If you gave a really advanced ai the same two drives and feedback loops you'd get something pretty similar I'd warrant. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,just like Joel Spolsky's periodic reposts,2018,Why “Agile” and especially Scrum are terrible
TheNewOP,2,"Why's he hated again? I remember hearing that he ranted a ton on internal emailing lists at Google about stupid shit, I forget the rest.",2018,Why “Agile” and especially Scrum are terrible
Breaking-Away,2,"He writes a lot of shit like this. More importantly, he has nowhere near the qualifications to back up the enormous ego he presents in all his writing.",2018,Why “Agile” and especially Scrum are terrible
B-Con,36,This guy is infamous for his opinions and ramblings. Read more on his blog or Google him.,2018,Why “Agile” and especially Scrum are terrible
boldra,65,"""This drink is famously bad. Drink some more and see how bad it is""",2018,Why “Agile” and especially Scrum are terrible
FaustTheBird,13,"To be fair, the drink is bad all at once. Writing is bad over time. It's more like ""this album sucks. Listen to the whole thing and see how bad it is"" or ""let's watch The Room""",2018,Why “Agile” and especially Scrum are terrible
10xjerker,2,"wrong, The Room is awesome!",2018,Why “Agile” and especially Scrum are terrible
jambox888,4,https://tenor.com/view/star-trek-data-revolting-gif-6118927,2018,Why “Agile” and especially Scrum are terrible
FadingEcho,7,"Oh come on. I think his opinion is valid whether or not I agree with it (and in some cases, I do) but there's a lot of ways to fix things that are bad. ",2018,Why “Agile” and especially Scrum are terrible
KFCConspiracy,2,That sounds like Fernet Branca,2018,Why “Agile” and especially Scrum are terrible
fungussa,17,And the article is 3 years old.,2018,Why “Agile” and especially Scrum are terrible
michaelochurch,-3,"It only seems to have gotten worse, in my observation.

I agree that the Agile Manifesto was reasonable; but that's not where we are with this shit.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,44,"Because there is no better alternative. Waterfall sucks, agile sucks, business sucks. Tribalism is rampant withing corporate structures. You cannot even apply simple standards across corporate structures as someone will have to have it different and they will eventually get their way.",2018,Why “Agile” and especially Scrum are terrible
KFCConspiracy,17,"Agile sucks less if you take the retrospective seriously and you allow meaningful process evolution through retrospective. This is one area I think Agile consultants and gurus fail, the immutability of methodology is often the downfall. Adapt what works to your company culture and keep the manifesto in mind and you'll end up with something agile but different that works for you. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,You completely ignore the reality I present. Corporate tribalism and culture that have has allowed the implementation of non-standardized work is the main culprit ,2018,Why “Agile” and especially Scrum are terrible
KFCConspiracy,3,"I'm not ignoring your point. I disagree somewhat that Tribalism is the main problem. I think adaptability is more important than purity. 

I think there are two bad end members of agile. The cargo cult end member where agile purity is the only way and no feedback is good feedback and the waterfall with micromanagement end member. By valuing process over people agile can be self defeating if it does not integrate learnings from each sprint that may include workflow changes. But those changes need to be balanced with what actually makes the team more productive. 

From my own experience the way it works best is somewhere in the middle, different organizations have different compliance needs and different ways of communicating that should be incorporated into how teams do work. There are tons of variants of agile processes, like SAFe, Scrum of Scrums, Scrum itself, Extreme Programming... If those people can improve on an existing paradigm, who's to say a company can't internally improve. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"I have seen zero successful hybrid agile approaches. Zero. The only successful agile I have witnessed are where agile purity is maintained. Otherwise, theproject becomes waterfall without gates. Might as well do.hands off waterfall.",2018,Why “Agile” and especially Scrum are terrible
KFCConspiracy,1,"I want to elaborate a bit on what I mean by that. We've found that we run into certain problems that could be addressed by additional questions being asked up front, rather than the more traditional user story ""As a user I want to ___ because ___"". So we've applied additional structures when we write stories - Our stories end up being a bit longer than a typical story which means meetings where we groom them and plan end up taking about an extra hour every release. But that results in a huge time savings and less frustration. 

We also have a UX team, we've added processes to integrate them so we prototype, test, and iterate before anything ever reaches development. Based on our velocity we do sprints in 5 week intervals instead of 2 and we just align releases with sprints. Basically we write the stories the story becomes ready for UX, plan a UX sprint, they do their thing, we refine, then it becomes ready for development. After development and QA it becomes ready for compliance. Then release. 

It's still agile because it's iterative, it still integrates most of the rituals we know and love (Standups every day, a retrospective, planning meetings - we just don't call it planning poker because that just sounds stupid, etc.). But we added processes that reflect our reality and who we have here in part to manage change during sprints (We identified that letting perfection get in the way of progress was something that was preventing on time releases). ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,-1,"Stop with the sales pitch. I like agile methodology. However, it doesn't fix stupid business partners or broken business processes.",2018,Why “Agile” and especially Scrum are terrible
SkaveRat,94,"> agile sucks

as someone who worked in a company that lived as agile as you can get: that's not really true.

Every time I see someone mentioning ""we use agile and it sucks"" it's never the agile part that sucks.  
Agile in any flavor doesn't automaticly fix all your problems. it's a framework to build upon, and it needs to be used properly. Most importantly: it needs to be slowly introduced so company culture and the agile process itself can slowly mold themselfs into shape together. Just throwing ""we do agile now"" into a company that has done waterfall for 50 years will not work out.

Most of the time it results in waterfall-scrum. A waterfall model with ""agile"" slapped on its label.",2018,Why “Agile” and especially Scrum are terrible
got_milk4,28,">Most importantly: it needs to be slowly introduced so company culture and the agile process itself can slowly mold themselfs into shape together.

This is so, *so* key. My company brought in an ""agile coach"" who insisted in implementing agile/scrum by the book into all the teams and naturally it met a lot of resistance and many teams tossed it aside. He was eventually replaced with a couple of scrum masters who better understood that the process can mould to a team's needs and vice-versa and it's been universally better so far.",2018,Why “Agile” and especially Scrum are terrible
jboy55,24,"I disagree is some part. I was at a company, where we had a very Laissez-faire system, engineers just 'did' work. This worked very well, as the company grew from nothing, where little tools and little bits of automation made huge impacts. Theil's zero to one. 

&#x200B;

However,  the 'projects' which used to take a week or two started taking weeks and more than one engineer. Our customers started demanding at least one nine in uptime and our maintenance of all the previous projects started weighing down  the engineers. Then, catastrophe, a project that was 'supposed' to take a couple of weeks (because all projects took a couple of weeks), took multiple months, and when delivered, had tonnes of bugs, and brought down our system.

&#x200B;

 The problem, proposed by QA and seconded by a couple of directors (one from eBay), was to point to shifting requirements and poor code quality as it went to QA as the 'blame'. The solution was 'obvious', requirements would need to be locked down. A detailed spec would need to be required before engineering would start, 00s era eBay style. Engineering would sign off on the spec, and estimate its work. QA would do likewise and dates would be produced. A checklist would be created that engineering would need to sign off on before handing it to QA. QA would sign off on its test plan before handing to Ops. We would track any slippage on each front, and each group would be 'blameless' if the group 'to the right' failed. Your group's responsibility ended once you got the group to your right to sign off. This was the 'mythical' waterfall, born out of blamestorming ... which is where it always comes from. 

&#x200B;

It was at this presentation of 'the plan' that I spoke up. I managed a small group, we had a somewhat independent product we were managing. 'Can I try Scrum?', I asked. 

&#x200B;

To the point, (TLDR;), out of this system, I wanted a Scrum trainer, I wanted to do this 'by the book' because I felt I needed the weight of a 'consultant' to fully free ourselves from the blamestorm culture. ie. The QA manager tried to have QA start only once a story was Done, but the consultant said, ""No, QA is part of the process, part of the team', so the VP dotted lined the QA engineers under me. For our projects it was a huge success. We had the cards on a board, there was the air of excitement of trying something new. The engineers were able to work, create stories with the product managers, and were allowed to find things as they went. They didn't have the fear that when something popped up, they needed to create a Change doc and get me to hold a meeting with the VPs to allow our project an extra week, or to change the requirements doc. QA was creating test plans up front, and we started doing a 'paper' TDD approach. 

&#x200B;

Unfortunately, other teams saw my success, and my teams morale uptick. Their upper management saw that 'Scrum' could be good so they wanted it. Soon, not only were all the other eng teams were forced on it, even the account management team was put on Scrum. The other teams rebelled, ""This is being used to track us! I'm not playing along, all my stories will be undefined and take 2 weeks!"". The account management team was livid, ""I hear some of the Engs hate Scrum and I agree! How can I 'Point' how long a customer engagement will take, this is stupid!"". My team soldiered on, just working away.

&#x200B;",2018,Why “Agile” and especially Scrum are terrible
sanbikinoraion,5,Any software development methodology is better than no methodology at all.,2018,Why “Agile” and especially Scrum are terrible
s73v3r,2,"To be honest, it sounds like a large part of the problem is that the company wasn't hiring enough to spread out the work. ",2018,Why “Agile” and especially Scrum are terrible
MrBotnon,-1,lol,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,I have worked for 5 companies that have varying implementations of agile. The only one it worked at is the company that had only a dozen IT employees. ,2018,Why “Agile” and especially Scrum are terrible
ratbastid,1,"> Every time I see someone mentioning ""we use agile and it sucks"" it's never the agile part that sucks.

There it is. His own examples are mostly about how his management has sucked.",2018,Why “Agile” and especially Scrum are terrible
BrundleflyUrinalCake,23,"As an engineering leader if I took that perspective into a board room I would probably be fired. It very well may be the case that no one tool is right all the time, but that is no reason not to attempt to try and apply some sort of process to get clarity around estimation, performance, and direction.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,Nor am I taking such a stance in meetings with our customers VP boards. I am simply ranting anon about the reality of ops hell.,2018,Why “Agile” and especially Scrum are terrible
Dreadgoat,4,"The primary benefit of agile is that it makes problems obvious. The author of the article is inadvertently highlighting this in his attempt to demonize agile.  

All those problems don't just go away when you switch to a different management methodology, you're just blinding everyone a little bit and taking away some of their power so they can't fuck things up as quickly. If you're in an irredeemable environment, maybe that's the best you can do and agile isn't for you. But also maybe success isn't for you.  

I've had the dubious honor of working under many different methodologies, and I've seen them all succeed and fail in varying degrees. The difference between failure and success is determined by the quality of people working, the choice of methodology is practically irrelevent in terms of eventual success. Agile is only different in that it makes it clearer earlier on whether you're going to succeed or fail. This makes it feel bad when you suck at your job, because it is so obvious how much you suck. So you go back to waterfall or whatever, where you still suck and still fail, but it takes longer for it to become apparent so you feel like you've done ""better.""",2018,Why “Agile” and especially Scrum are terrible
hippydipster,1,"I think the biggest points to take away are the idea that agile/scrum/jira process really pushes us toward working on stories that A) can be estimated and B) can be atomized into small chunks.

Now, I know technically, there's no reason we can have Jira's with estimates of 2 or 3 weeks, but in practice, it's rarely allowed, particularly in bigger teams where there's always someone who says ""we should break that up"" and then there's a mumbled chorus of agreement.

At my current place, it's a very small shop, and I have had the leeway to work out issues that frankly take/took months (ie, operational transformations on structured documents, developing server-side testing of tons of stuff that goes on in the browser in javascript).  This was all difficult, required exploration, the freedom to completely scrap weeks of efforts, and rework/redesign at the moment inspiration hit me.  I  could never do that kind of work via an tightly controlled atomized jira/scrum schedule.  It's bad enough to go to scrum and say ""well I erased the last 2 weeks of work"", but to then also have to add ""I'm going to flounder around today until I maybe can understand what the hell I'm doing"" would be nightmarish on most teams.  They'd be dying to get more help in there, when what was really needed were quiet individual conversations when I was ready for them.",2018,Why “Agile” and especially Scrum are terrible
sanbikinoraion,2,">Waterfall sucks, agile sucks, business sucks.

But, objectively, waterfall sucks more than agile. Agile exists purely to mitigate all the problems with waterfall-style development. Find the bits you can do, figure out what the most important bits are, and do them. Show them to people who care. Repeat until you've got enough features and stability that you can launch. Beats any ""waterfall"" process ever.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,That's your opinion. I have seen a lot more successful waterfall projects han agile projects. The only times I have ever seen Agile deployed successfully was in small software shops.,2018,Why “Agile” and especially Scrum are terrible
sanbikinoraion,1,"Whereas I have never seen a ""waterfall"" style project work well at all. I'm in web, which means that there are always a lot of fast-changing requirements mixed in with bugs on systems in their maintenance phase.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,And have you worked for small companies? ,2018,Why “Agile” and especially Scrum are terrible
sanbikinoraion,1,"No, the last five years I've exclusively worked for organizations with 10,000+ employees, I think.",2018,Why “Agile” and especially Scrum are terrible
hippydipster,1,"I saw waterfall-ish stuff work at Xerox reasonably well.  The projects were huge, and you had underlying asynchronous systems running in C in the lower levels, and then Java/Javascript running on upper levels, and where the C code was sometimes decades old, and the Java was a new layer.  The waterfall aspect was the enourmous UX team working out detailed screen mocks with actual images we were to use (building our own widget library, so every aspect of a widget library was specified), detailed documentation that specified exactly what the C code would spit out for various sections of the databases below and we'd scrum on those parts of the system after these detailed docs were written.

We'd certainly go back and forth a bit with the UX team on various things, but the backbone of the waterfall was there, it was meticulous, it was immensely helpful and it was *fabulously expensive*, which I think is the real problem with most software and software shops: they want good software without paying through the nose for it, but I don't think it's really possible.  What we end up with is kind of shitty software that mostly gets the job done for a fraction of that cost that a company like Xerox is willing to pay.  And a lot of dissatisfaction and unhappiness all around as a result, but dissipated such that everyone continues to go along.",2018,Why “Agile” and especially Scrum are terrible
walterbanana,2,"Come on man, not everything suck. Quality software is still being released, so it works for some people.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"Quality is a subjective word. I consider very few applications quality software. Sure they all compile and work as intended a majority of the time, else they don't find adoption in a wide market. However, much of the spaghetti that has been cobbled together over the last 40 years in corporate America is by no means quality. ",2018,Why “Agile” and especially Scrum are terrible
hippydipster,1,"I don't think it's a stretch to say most truly high quality software either A) is developed with processes that cost a fortune or B) is developed without concern for release timing at all (ie open source).

Which is not to say all software that cost a fortune or all open source software is quality.  Most are not, but when quality software does happen, one of those two conditions is usually present.",2018,Why “Agile” and especially Scrum are terrible
chakan2,2,"> You cannot even apply simple standards across corporate structures

Good...If your shop is worth it's salt, you should embrace people using best of breed techniques and tools instead of crushing them with meaningless paperwork. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"You obviously have never done ops for a major.company in the US. Standards are not about.meaningless paperwork. Im not even talking about paperwork. Im talking about stardards. Naming conventions for functions, applications, input and output files, standards for code.promotion, standards for business signoff, standard test suites, standards for testing edge cases in the business model.",2018,Why “Agile” and especially Scrum are terrible
chakan2,2,"Yes... I've done ops for a fortune 50 actually... And yes, standards were meaningless paper work. It's great for the scrubs who should have been fired a long time ago, but if you let the high performing teams come up with their own conventions in ways that work for them, you'll see a huge uptick in delivery.

So yea, it's pretty much meaningless paperwork. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"Yeah, and how.many high performing teams are there at any given company? How many teams Does it take to bring down a production system? You cannot allow one team to do as they please and impose standards arbitrarily .....",2018,Why “Agile” and especially Scrum are terrible
chakan2,0,"If they weren't bound by dumbass policies and standards, most teams would become high performing. To back that statement, we dropped most of our policies and standards and rewrote them to be very open ended and agile to appease legal...basically, don't do dumb shit, and viola, the whole department (roughly 2000 devs) became more productive. It was roughly 200 mil in dev savings. 

A high performing team protects the system from inside actors as well as external. Pretending a piece of paper is going to save you from a terrible developer is a myth perpetrated by middle management to save meaningless jobs.  ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"You got it. You rewrote your standards ........ itvs not the wild wild west. You literally wrote better ones, and since they are simple they are easier to enforce. Congratulations, you work for what amounts to.a minority company now.",2018,Why “Agile” and especially Scrum are terrible
chakan2,0,"Whatever helps you sleep at night. For example, we went from a 10 page manual on how to use CVS to ""You shall use code versioning."" Have you ever heard of a remotely professional team that doesn't use a code repo of some sort? Hell, even a standard file system with versions in the names satisfied that. I wouldn't recommend it, but I've seen outside cases where it makes sense. 

I stand by the statement...standards are a myth to make highly paid useless roles seem important. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,I get it you are butt hurt that I.make more money than you. ,2018,Why “Agile” and especially Scrum are terrible
chakan2,0,I really doubt that. ,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,130k,2018,Why “Agile” and especially Scrum are terrible
chakan2,0,"Yea, didn't think so. Good luck keeping development down. I'd brush up on your coding skills just in case though. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,You are a lying cuck. ,2018,Why “Agile” and especially Scrum are terrible
chakan2,1,"Are you really that insecure about writing meaningless paperwork all day? You know they have wonderful skill development programs out there. 

And no, I'm not lying, between bonuses and stock options, depending on the market prices, I'm easily going to clear 175k this year, and likely approach 200k. 

And I sleep well and night know I have skills that are still in demand. ",2018,Why “Agile” and especially Scrum are terrible
beginner_,15,"> he fails to account for how business leaders do actually need to know when a piece of software will be complete by.

They don't know. That is the main problem with agile/scrum. You get n amounts of sprints and whatever is delivered has to be used but it will with 100% certainty not be complete and when it is complete is up to budget and it's entirely possible it's more or less unusable till that next budget comes around.

Agile only works really if you are doing trivial CRUD apps. What is needed for anything more complex is a mix of methods some waterfall and some agile. You first need to think and understand the problem and come up with an architecture before you start. The core of the system (""engine"", API, whatever). Once you start building around that you won't change it anymore.",2018,Why “Agile” and especially Scrum are terrible
MoTTs_,11,"> it's entirely possible it's more or less unusable till that next budget comes around.

The biggest problem with agile/scrum is that most people don't really understand agile/scrum. If your product is unusable at any stage, then you don't really understand agile/scrum.

[Not like this, like this!](https://cdn-images-1.medium.com/max/1600/1*tcNs35GceDxSGxAaFh-lSA.jpeg)

Your product should be usable and releasable right from the very beginning, even if all you have is a skateboard and your goal is a car.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,[deleted],2018,Why “Agile” and especially Scrum are terrible
MoTTs_,6,"I'm not sure what you mean by bigger remodels, but the house analogy is spot on. It may seem like an inefficient way to build a house, but there are reasons why that kind of approach works well.

1. Sometimes the customer doesn't realize what they want until they can see and touch the real thing. Imagine you build a fully completed house, and only then does the customer realize, ""Oh, I wish this side faced the sun,"" or, ""Oh, I didn't realize the kitchen would feel this small."" When it comes to software, customers change their mind All. The. Time. It can be hard to realize what we want when only talking about it in the abstract. We need to give them something usable early and frequently so they can change their mind earlier rather than later.

2. Schedules slip. Shocker, I know. :-P Just because The Plan says you'll have a house or a car by date X doesn't mean it'll actually happen. In fact, odds are it won't. But if you make sure you have a usable product at every stage of development, then you at least have something _potentially_ releasable and genuinely useful to users on date X, even if it's only a prefab or only bicycle.",2018,Why “Agile” and especially Scrum are terrible
lovestheasianladies,1,"Are you an engineer because that's the worst fucking analogy ever in.

You'd have to refractor the entire architecture with your scenario. And also it wouldn't meet the business goals considering it's a DIFFERENT PRODUCT at every stage.

Yes you should have something functional. No, it shouldn't be an actual product until you've done enough research and architecture tasks first. ",2018,Why “Agile” and especially Scrum are terrible
beginner_,-1,"> Your product should be usable and releasable right from the very beginning, even if all you have is a skateboard and your goal is a car.

Now tell me if I order a car so I can drive to vacation 500 miles away with whole family, to commute to work for 30 min over a hill each day, to transport groceries,....How is a skateboard in anyway useful for this? It might work as a skateboard but it's entirely unusable for what i actually want to do. Your analogy actually confirmed my point not yours.

To go on with it. So you have the skateboard. Now time and budget is short. You need to compromise. you decide to keep the skateboard wheels and axles but build a car on top of that. Then later on you also need put on the luggage rack (which was known from the start) and then the skateboard wheels simply can't take it anymore and collapse under the whole patchworks weight. 

Instead of having a functioning skateboard it would be much better to spent the time building a car chassis that can actually function as a car chassis. so yeah your analogy is spot on for agile.",2018,Why “Agile” and especially Scrum are terrible
MoTTs_,7,"> Now tell me if I order a car so I can drive to vacation 500 miles away with whole family, to commute to work for 30 min over a hill each day, to transport groceries,....How is a skateboard in anyway useful for this?

To be clear, the skateboard isn't meant to be the finished product. The finished product might be projected to take a year, and the skateboard is what you get after the first two weeks. The skateboard may not take you on that 500 mile vacation, but it will get you to the 7/11 down the street. The bicycle could get you to work. And the motorcycle can get you to that vacation sans-kids. At every stage, you have something useful, and it gets incrementally more useful, which is way better than having nothing at all while you wait the two years instead of the projected one year it actually took to build your car, since software projects, agile or not, frequently go over time and over budget.

> So you have the skateboard. Now time and budget is short. You need to compromise. you decide to keep the skateboard wheels and axles but build a car on top of that.

That's a bad decision. Don't do that. No development process in the world can stop you from making bad decisions. If time and budget is short, then...

1. The customer shouldn't be surprised. With every iteration, you should provide them with updated projections. Maybe by the third iteration, you realize you're not getting through the tasks as fast as you thought you would. The customer should be aware of that early on and not on the week before the projected completion date.

2. The non-agile alternative is often a half-finished, non-functional car. That kind of situation happens all the time in software. Given a choice between a working motorcycle and a non-working car, customers are generally happier with a motorcycle.",2018,Why “Agile” and especially Scrum are terrible
Huggernaut,6,"Not to mention that for an industry that complains so much about customers changing their minds, it sure is optimistic to believe that the car designed up front is actually what they need. 

Additionally, even if it was what they needed in the beginning, maybe their circumstances change and they no longer need the ability to transport anything other than themselves and a motorcycle is more than adequate.",2018,Why “Agile” and especially Scrum are terrible
lovestheasianladies,1,"""don't do that""

Obviously you aren't a developer.

I'll just let management and the client know that someone on reddit just said I can expand the budget and push out the deadline because he works in a magical reality.

And again, you example is fucking stupid. You cannot get to a car from a bike if YOU DID NOT PLAN TO MAKE A CAR and you're wasting money and time making a bike when you never needed one to begin with. 

That's not how any sort of engineering works, even software. ",2018,Why “Agile” and especially Scrum are terrible
Racoonie,3,">  You get n amounts of sprints and whatever is delivered has to be used but it will with 100% certainty not be complete and when it is complete is up to budget and it's entirely possible it's more or less unusable till that next budget comes around.

That is not Agile, at all.",2018,Why “Agile” and especially Scrum are terrible
lovestheasianladies,3,You can still do all of that with agile. You seem to not understand the methodology to begin with. ,2018,Why “Agile” and especially Scrum are terrible
beginner_,1,It's not a matter if you can but if it is actually done. I mean you could also make the project lean and save a lot of money by ditching all the useless persons.,2018,Why “Agile” and especially Scrum are terrible
morpheousmarty,3,"And yet it is one of the best criticism of Agile I have seen. Most of the time agile hit pieces boil down to ""my company has a rigid, non functional notion of agile"" but this article actually points out some of the weak points and pitfalls. Still a bit overblown in most places, I think agile is a good system, but it has problems, it's good to see them tackled rather than danced around. ",2018,Why “Agile” and especially Scrum are terrible
supercargo,4,"Right, there seems to always be lots of complaints about how engineering management is done poorly, but I rarely if ever find articles about how it could be done well.",2018,Why “Agile” and especially Scrum are terrible
BorgDrone,1,Maybe the first thing to do is figure out if it can be managed at all. ,2018,Why “Agile” and especially Scrum are terrible
IRBMe,1,"In addition to that, one of the important aspects of agile is that the process itself should be refined and improved. In scrum, for example, a sprint retrospective is used to reflect on what went badly and what worked during the sprint to see if any improvements could be made to the process. If you find that something in your process isn't working, you can adapt it! As an example, we used to do sprint planning on a day on which some people in the team also had other meetings, so in one of our sprint retrospective when this was highlighted we moved the planning day to one that was otherwise quiet for everybody.",2018,Why “Agile” and especially Scrum are terrible
am0x,1,Yea it just sounds like a typical developer that just assumes whatever they are working on  is the most important thing in the company. ,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,Somehow they managed to get both waterfall and agile methods wrong IMO.,2018,Why “Agile” and especially Scrum are terrible
BorgDrone,-1,">	However, he fails to account for how business leaders do actually need to know when a piece of software will be complete by.

That’s their problem, not the engineers. Software is done when it’s done, you can’t accurately estimate it (unless all you do is build trivial CRUD apps) so why even try ? It’s just management trying to drop their problem on the engineers plate. Ignoring reality is no way to run a business. ",2018,Why “Agile” and especially Scrum are terrible
KFCConspiracy,3,"> Software is done when it’s done, you can’t accurately estimate it (unless all you do is build trivial CRUD apps) so why even try?

Let's say you work for a startup, and that startup is funded by an angel investor and the CEO is trying to get funding for a B round. You guys are building some new hip product. The CEO needs to go to VCs and pitch this product, but they're going to ask ""How long do you think it will be until you turn a profit, are revenue neutral, and have a minimum viable product?"" Is the CEO going to scratch his ass and say ""Gee I dunno, software can't be estimated, so why even try?"" No. That's ignoring financial reality. Unless you have an idea of when you can deliver a given feature that will make X$ you have no way to project how many employees you can hire at what pay, you have no way to attract investors, and you have no way to forecast business performance. That's silly. 

Engineers are a part of the business and must deliver business value. They must cooperate with the business's needs. If that means giving an inexact estimate that's fine, just say that. And how do we make those estimates more exact? We break a large project down into many smaller projects with less variance... 
",2018,Why “Agile” and especially Scrum are terrible
BorgDrone,-2,">	Engineers are a part of the business and must deliver business value. They must cooperate with the business’s needs

 No amount of ‘business needs’ changes reality. 

>	If that means giving an inexact estimate that’s fine, just say that. 

So ‘anything between a month and never’. ",2018,Why “Agile” and especially Scrum are terrible
KFCConspiracy,3,If you really can't do any better then that how are you even in this industry? ,2018,Why “Agile” and especially Scrum are terrible
BorgDrone,-2,So what would you answer if you don’t even know if it can be done ?,2018,Why “Agile” and especially Scrum are terrible
s73v3r,3,I don't buy that. It is extremely rare to not even know if something can be done. ,2018,Why “Agile” and especially Scrum are terrible
BorgDrone,0,"Well, I work mainly in R&D like positions so that’s very common for me. Like I said, if you work on boring CRUD stuff it may be possible, but I don’t pick those kinds of jobs because they are boring af. ",2018,Why “Agile” and especially Scrum are terrible
KFCConspiracy,1,"""I will need to do some research. I will get back to you by ___ with further information on options and feasibility."" ",2018,Why “Agile” and especially Scrum are terrible
BorgDrone,1,"Except figuring out feasibility means doing about 80% of the work. I’m about to start on a project that involves real time image processing on a mobile phone, and while I have a crude idea of what the processing pipeline is going to look like, I won’t know if it works for my purposes until build it and can try how it performs under different light conditions, if the phone can even handle it (there is no point if I can’t get it to at least 10fps),etc. That means building a first version, seeing if everything works as expected as far as the output is concerned, then trying to optimize everything to perform. I will probably end up replacing some steps in the pipeline because they don’t perform well enough on a mobile GPU, etc.

I can’t tell you much until I actually have it running at a decent frame rate, at which point there is little more to do than a bit of code cleanup and writing proper documentation. ",2018,Why “Agile” and especially Scrum are terrible
OctagonClock,90,"> Does anyone else think Michael O. Church is a hero? 

- Michael O. Church, 2016",2018,Why “Agile” and especially Scrum are terrible
michaelochurch,-7,"That was some dumbass Quora question. I don't know if you follow Quora, but there are a lot of dumb people on it.",2018,Why “Agile” and especially Scrum are terrible
SemaphoreBingo,6,What about the people working there : http://sasamat.xen.prgmr.com/michaelochurch/wp/2015/09/07/to-my-supporters-at-quora/,2018,Why “Agile” and especially Scrum are terrible
michaelochurch,0,"It's hard to say. Even though he wasn't technically in charge, Marc Bodnick called the important shots for a long time and he did an incredible amount of damage to that place.",2018,Why “Agile” and especially Scrum are terrible
Poropopper,159,"This article is just an egotistic, idealistic and bitter rant. ",2018,Why “Agile” and especially Scrum are terrible
ElaborateChemical,19,It's almost as if it was intentionally made to be provocative and controversial so they get more clicks; oh wait.,2018,Why “Agile” and especially Scrum are terrible
michaelochurch,-7,"> It's almost as if it was intentionally made to be provocative and controversial so they get more clicks; oh wait.

Not really. I don't make any money off the blog and it's not a high-ranking concern at this point in my life. This is about blood. Software used to be a legitimate career; the advent of ""sprint"" nonsense and the flood of unskilled, low-status Jira jockeys destroyed it. I'm pissed off and I have every right to be, because millions of people are getting fucked over.",2018,Why “Agile” and especially Scrum are terrible
HiddenKrypt,7,"Pretty sure those problems aren't the fault of one work plan paradigm. Maybe you should look into this whole ""capitalism"" business, it seems to be the real root of your issues. ",2018,Why “Agile” and especially Scrum are terrible
michaelochurch,-2,"As I get older, I'm more convinced that my earlier belief that capitalism can be saved from itself was built on false assumptions.",2018,Why “Agile” and especially Scrum are terrible
flash357,16,"Agree... it's as if this guy has never worked with a BA out in front of his development team...

Devs and business partners should not directly converse for almost every single reason he listed out as why it's so difficult for dev's to work with ""non-technical"" people

Hey... that's why u hire a BA... they're there to do that talking then to translate that into, u know, specs and stuff",2018,Why “Agile” and especially Scrum are terrible
rebel_cdn,5,So you're saying companies need someone who [talks to the god damn customers](https://www.youtube.com/watch?v=Mi25sLQ_t-k) so the engineers don't have to?,2018,Why “Agile” and especially Scrum are terrible
flash357,1,"BUAHAHAHAHAHA

""so what would you say it is that you do here?""

i seriously joke about this guy being me at work...

""DONT YOU UNDERSTAND?!!... I'M THE PEOPLE PERSON!""

i fuckin love it!!

good stuff here",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,Everyone who upvoted it should feel bad about themselves.,2018,Why “Agile” and especially Scrum are terrible
Poropopper,1,Especially since they likely didn't read it.,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,12,What do you get when you cross Waterfall with Agile? ... A death march every iteration,2018,Why “Agile” and especially Scrum are terrible
badgerninjacow,3,You get Fragile ,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,https://www.youtube.com/watch?v=NwDJsQEQRKY,2018,Why “Agile” and especially Scrum are terrible
noratat,1,"""Scrumderfall""

A friend of mine once had an internship where that term was used unironically by managers. Needless to say she didn't bother applying there later.",2018,Why “Agile” and especially Scrum are terrible
thegreatgazoo,12,"The last place I worked at had a functional Agile before it was really defined, and dysfunctional agile where it sank the product and damn near the company.

From my observation, generally the looser the rules and more it is seen as a guide vs a dogma the better it works.  

Daily standups are dumb, especially if they last more than 10 minutes.  Generally people are working on the same as yesterday, and if you monitor chat you pretty much know what people are working on.",2018,Why “Agile” and especially Scrum are terrible
tepec,1,"Daily standups (scrums) should never last more than 10 minutes and can last like 10 seconds, it's in the very definition of it. The fact that in some companies it tends to last more is a good indicator that Scrum is often poorly implemented IMHO, and that, in the end, it tends to be a management issue.

(Source: am a manager)",2018,Why “Agile” and especially Scrum are terrible
thegreatgazoo,8,"Why even have a 10 second meeting?  You just disentangled everyone's thought processes for nothing, and probably wiped out a good 30 minutes or so of productivity.  For instance, nobody is going to start working on something 15 minutes prior to a meeting. 

 ",2018,Why “Agile” and especially Scrum are terrible
tepec,1,"That's why it should require that:

* The team should agree on common daily schedules and do this right before anything else (again, in the definition of it), 

* This is definitely not a ""formal"" meeting, henceforth should not require efforts or concessions.


If those points cannot be guaranteed, then I'm definitely fine with saying that there's no point doing these scrums.


[Edit] to answer your question, knowing that every day you can ask at that moment for things to your colleagues without bothering them has proven to be quite efficient in terms of team cohesion, notably for shy newcomers, in my experience.",2018,Why “Agile” and especially Scrum are terrible
gom99,1,"> Why even have a 10 second meeting?

It's good for the team to meet often, even just to say hello for the day.  If the opposite is meeting infrequently, the team dynamic suffers and people may not feel comfortable approaching the group or raising questions to one another.

Daily standups are a good way of keeping lines of communications open, basically built in team building.",2018,Why “Agile” and especially Scrum are terrible
RallyPointAlpha,11,"Going through this shit now... like 1% of the company ACTUALLY does 'agile'.  The rest are told to do it even though it makes zero fucking sense for them.  They bumble through the motions of 'agile' because they were told to.  

&#x200B;

Now they've gone through multiple buildings, spent a STUPID amount of money, gutted them, made them all this open floor 'agile' shit storms, and made EVERYONE use them.  Yep; managers, engineers, architects, support, and devs all in a huge fucking room... no cubes, no dividers, no offices, no privacy, no assigned spaces.  Oh and nobody can work from home anymore... because 'agile'... and 'collaboration' ... and 'we spent a fucking ton of money on this shit, get in here and use it!'...

They WILL loose a bunch of talent over this.  I haven't heard a SINGLE person say this was a good idea.  Not even the dev teams actually using the agile methods thought this was going to help.  People who have talent and can go somewhere else are already looking...",2018,Why “Agile” and especially Scrum are terrible
RallyPointAlpha,3,"What's kind of ironic is that a lot of people were complaining about the old crappy buildings with stained carpet, smelled musty, run down facilities, 20+ year old cube walls with coffee stains and shit on them.  People wanted the facilities to be updated but after we saw what they did to remodel... everyone would have preferred the rundown facilities over this.  ",2018,Why “Agile” and especially Scrum are terrible
thelochok,24,"FWIW - this article made me really struggle when my team started Scrum. I haven't joined the church, but I had a good team, a good scrummaster and a good manager - and I've eventually found it's really worked for me and my team. Heck - I've become the scrummaster of my team now, because I find I can help get things finished.

For us - the big lessons that came from it are breaking tasks into parts that can actually be finished, taking ownership of testing and review, and being willing to adapt where the system hasn't worked for us. There was real growing pain, and I was miserable. But, over time, we're getting way more done in the same amount of hours.

The team being listened to with estimates is huge though. I couldn't do it without the (actual) support of our management to their management.

I'm not discounting Church's experience (or the many other people who have had bad experiences of it). But - at least be willing to try it, and see if you can make it work. This article particularly messed my head up something bad when we moved across to it.",2018,Why “Agile” and especially Scrum are terrible
grimmlingur,2,"Like almost any ideology, it breaks when applied without understanding the reasons for it and when to break from it. As someone else stated, the core ideals behind the agile approach are all good, but some of the classical implementations of them need to be evaluated on a case-by-case basis, and more importantly on a team-by-team basis as well.",2018,Why “Agile” and especially Scrum are terrible
hippydipster,1,"> the big lessons that came from it are breaking tasks into parts that can actually be finished

How do you work on things that can't be finished?  Or that you don't know whether it can be finished?",2018,Why “Agile” and especially Scrum are terrible
ischickenafruit,10,">  but when engineers run engineering and set priorities, everyone wins: engineers are happier with the work they’re assigned (or, better yet, self-assigning) and the business is getting a much higher quality of engineering.

Spoken like a naive career engineer with no appreciation for business. Everyone does not win. Only the engineers. The problem with engineers setting the priorities is that engineers seldom build what customers want (and are willing to pay for). You can have happiest engineers building the highest quality products, but all of that is meaningless if there's no business to pay for it. ",2018,Why “Agile” and especially Scrum are terrible
Lysis10,11,scrum masters are the most useless people on the planet,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,Bold - I'm (pleasantly) surprised you weren't downvoted to oblivion.,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"the new ""project manager""",2022,Why “Agile” and especially Scrum are terrible
ZebulonPi,177,"Meh. In my experience, if you’re failing at Agile, you’re not really doing Agile. Agile is pretty simple: we take requirements, we make them happen, we show them to the business, we take their feedback, and our own, and try to do better the next Sprint. It’s a framework, not a magic spell that you chant and good software magically appears. If your PO sucks at knowing what they want, or your Dev team sucks at writing software, or incorporating feedback, that’s not Agile’s fault, AND those scenarios would suck MORE in waterfall because you wouldn’t know how much you sucked until you didn’t have any time to fix anything.

",2018,Why “Agile” and especially Scrum are terrible
murderection,60,No true agile,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,23,[deleted],2018,Why “Agile” and especially Scrum are terrible
hippydipster,2,"After 20 years of this no true scotsman back and forth over a variety of software processes, it gives me strong reason to believe that the problem with all of them is that they don't actually help us deal with the true problems that plague software development.  

I think agile mostly is a bunch of processes to deal with the problems that outside forces create in addition to the problems of software development.  Deal with managers and setting their expectations.  Deal with customers and setting their expectations.  When these outside players come and make demands on the software team, agile gives them various buckets to place those demands in and the outside player sees that that's how it works (lol, in theory) and that they should expect the software will have bugs and that important bugs get worked on before less important bugs, etc.

But the problems of the software itself?  Writing code that's less buggy, writing code that doesn't get worse and worse over time, avoiding technical debt, being able to bring new developers in and up to speed, being productive, these issues are not dealt with by agile.  TDD is an attempt to deal with some of those, as was extreme programming before it, but those are not really part of agile.",2018,Why “Agile” and especially Scrum are terrible
morpheousmarty,3,"The question isn't if it is seemingly never implemented correctly, but how often it is implemented correctly compared to other methods. It does not seem like any methodology works very well, but if we review how they went maybe we can gain some insight. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,[deleted],2018,Why “Agile” and especially Scrum are terrible
GhostBond,4,"My experience is that after the initial period of frenzied excitement management has largrly dropped it in one of two ways:  
- They just stopped doing it  
- They went back to how they did things before while continuining to repeat agile buzzwords  

",2018,Why “Agile” and especially Scrum are terrible
hippydipster,1,"> Managers seem to love it

And that's it's true purpose.",2018,Why “Agile” and especially Scrum are terrible
HowIsntBabbyFormed,1,"I wrote another response about this, but basically, I've been somewhere where agile was implemented well, and it really worked. It is hard to keep it up, especially at the beginning. But just because something is hard doesn't mean it's not worth doing.",2018,Why “Agile” and especially Scrum are terrible
FuzzyYellowBallz,47,"> It’s a framework, not a magic spell that you chant and good software magically appears.  

This is it. I've worked on teams that did agile well, and teams that did it poorly. No surprise: the teams that did it poorly had less talented/less motivated devs on them.",2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,8,Motivation is a good point. It doesn't matter how good the devs are technically if they're not interested in automating tests or refining backlogs or providing estimates.,2018,Why “Agile” and especially Scrum are terrible
frazieje,3,"It's no coincidence that the original guys who wrote the agile manifesto were also some of the more talented folks in the field. 

If those same guys had come up with and pushed a different strategy, would it have taken off? I'm betting yes. Many different systems can work well when you throw the best and brightest at them.",2018,Why “Agile” and especially Scrum are terrible
Omnicrola,28,"Agreed. Reading through the article I see all the telltale signs that the author worked (or works) in a company with serious trust issues. 

An open office environment that feels oppressive because you now have to pretend that you're busy because everyone can see you is not the fault of the physical environment, it's the fault of the culture of everyone in it. 

If the agile processes feel useless and oppressive, then change them. If they can't be changed, then the company is not actually doing Agile, they're practicing Cargo Cult Agile.",2018,Why “Agile” and especially Scrum are terrible
RallyPointAlpha,13,"THAT'S THE POINT!  It's being forced onto people and it can't be changed... everyone at my company knows we're not doing 'real agile'... but what in the fuck are we going to do about it?  All the execs, directors and managers are on board, changing everything, remodeling buildings around 'agile' and telling us ""do it like this!""  Meanwhile the actual teams doing the work are bitching about it... well they are just considered a bunch of complainers who aren't on board with the new 'company culture'.  So people leave (usually good talent) and the rest of us just bitch about it but carry on.  

&#x200B;

&#x200B;",2018,Why “Agile” and especially Scrum are terrible
Omnicrola,1,"Indeed. Real Change ^tm comes when everyone agrees on the same goals, and **then** works out how each person/group/team is going to help get there.  When The Execs ^tm decide both the goals and the implementation, you get a bunch of resentful people who might as well be automatons because they're just being told what to do. If you want automatons that's fine, there's a whole industry that'll happily sell you robots. If you want to actually engage people and have them bring their myriad viewpoints and experiences to your Great Business Endeavor ^tm you have to show them, from the ground up, that you trust them to contribute.",2018,Why “Agile” and especially Scrum are terrible
ex_nihilo,1,">Reading through the article I see all the telltale signs that the author worked (or works) in a company with serious trust issues.

That company would be Google. So many people don't know who this guy is. Google him.",2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,19,"I generally hate the 'if the tool doesn't work for you, then it's your fault for for not understanding it' argument (see every discussion about git), but it's true that a \*lot\* of things have to be in place for it to work - it's not always easy to get across to people the on-the-ground benefits, or to have the perspective to see when things aren't going in the right direction. Training will only do so much, you do need experienced people to direct the shift in culture.

&#x200B;

Waterfall is intuitive in a way that agility isn't.",2018,Why “Agile” and especially Scrum are terrible
BrianWonderful,17,"Thinking that Agile is a tool (or process) is part of the problem. Agile is a mindset and set of philosophies that actually encourages changing tools or processes when they can be improved. This isn't ""you don't understand the tool"", it's ""you don't have the right mindset"".",2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,4,"You're right enough - I was using 'tool' in a very general sense, which wasn't the wisest choice, especially when I then go one to mention an *actual* software tool.",2018,Why “Agile” and especially Scrum are terrible
Visinvictus,2,"This is a great way to describe how Agile is used improperly.  Someone in charge sees a particular Agile implementation, either through marketing or in use at another company, and they like what they see.  They then implement this particular process, which may or may not be good for their company and their employees, and force them to follow that process explicitly in a non Agile way that leaves no room for the people actually using the process to iterate on that process and improve it for their particular needs.

Most executives don't like the Agile mindset, because it takes agency away from them to affect the way that the company operates at lower levels.  That is why we see Agile implemented as a tool or process instead of a mindset.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,[deleted],2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,3,"No, exactly. And the fact that agility isn't intuitive doesn't make it any less invaluable, it just makes it harder to get agreement.",2018,Why “Agile” and especially Scrum are terrible
gamas,2,"> we take requirements

The fun part is when you work in a company in which the business team in charge of coming up with the requirements take the ""agile"" approach to coming up with requirements (read: just making everything up as they are going along). My boss knows the system doesn't work and is like ""this is why I am not a fan of full agile, what we should be doing is waterfall up to the design phase, and then agile the implementation"" and I'm like ""that's called doing agile properly"".",2018,Why “Agile” and especially Scrum are terrible
exile57,2,"That's a bit of a ''No True Scotman'' fallacy.""If you're failing at Agile, you're not doing Agile'', like somehow Agile can never fail. Any process can fail. In any process, when the process takes priority over the product, you end up with problems. This is independent of which process you pick. Agile and Scrum are just the latest ways in which you can screw up working in a team. 
The also come with a cottage industry of tools to metricize engineering which is where much of the author's frustration comes from I feel. Many corporate implementations of the process focus on the metrics and refuse to alter the process to match the needs of the team because ""Agile works, you're doing it wrong."" which brings us back to your original statement.",2018,Why “Agile” and especially Scrum are terrible
ZebulonPi,4,"The “focus on the metrics” part is NOT agile. The DEV TEAM should focus on the metrics, in so much as it allows them feedback, but other than that, the “corporate implementation” part shows a fundamental lack of understanding and trust in the development process overall. Agile empowers development, plain and simple. If it doesn’t, yes, you’re doing it wrong. If you have a hammer and you hit yourself in the head with it instead of driving nails, you are indeed using the tool in an incorrect way.",2018,Why “Agile” and especially Scrum are terrible
s73v3r,2,"At the same time, ignoring that people are doing it wrong is amount to asking Babbage, ""If I put the wrong figures in, will I still get the correct answer?""",2018,Why “Agile” and especially Scrum are terrible
JonnyRocks,1,"There's anither thing. If you fail in general then agile will highlight. Any time i was at a company and we started agile, the first project is always a mess because things were failing before hand, people just hid. And its not just developers. It makrs everyone accountable. ",2018,Why “Agile” and especially Scrum are terrible
kurnikas,37,"The thing I find interesting in the blog is that it treats agile as and end in itself, rather than as a tool to help you. I often see the cycle in tech of:

- ""hey this isn't working try this"" 
- ""hey that worked for you, can you define it better/hey this worked for us lets share it""
- ""We applied this brainlessly to the letter why isn't it working"" 
- ""This isn't working let's try something else""

I think a lot of the agile broad ideas are good, (fast feedback, quick iteration, make choices that give you options) but at the end of the day, if you have a management that sees value in the surveillance state feel, you don't have a failure of Agile you have toxic management. Following rules mindlessly rarely leads to good results.

WRT to the short term business value vs long term business value thing, I can see how agile thinking would lead there if you see it as a means unto itself. You still need long term strategy with Agile, Agile is just a heuristic for trying to safely step in that direction.

Ps. open offices suck",2018,Why “Agile” and especially Scrum are terrible
MrCalifornian,3,"Commented this separately above, but while I agree that these aren't intrinsically failings of agile but rather of management/culture, I think agile tends to exacerbate those negative tendencies. Having cultish rules gives those in more managerial roles less motivation to take ownership over cultural and managerial decisions. I think everyone would be better-served if people took it as a basis for developing best-practices instead of a prescription.",2018,Why “Agile” and especially Scrum are terrible
kurnikas,3,"Yeah that's a fair point, there is also a grim irony in the way agile came into the industry and a lot of consultants/managers were like ""right, how can we be agile in the most regimented and unthinking way"". I think in the end if you have good management who treat workers well + know when to trust in their expertise (and when to call bullshit) you get good results. Real world problems are hard and varied you can't just follow a single regimented recipe for everything",2018,Why “Agile” and especially Scrum are terrible
BizWax,1,"I think you're not arguing about the same thing. The author is talking about agile in practice, while you're talking about agile in theory.

Think of it like classes and objects. The author of this piece is arguing that most Agile-type objects are bad objects. You're arguing that actually Agile is a pretty neat class with some nice features. 

Both of these can be true. ",2018,Why “Agile” and especially Scrum are terrible
kurnikas,1,"I agree with you in the most part. The reason I posted this comment in response was this article very much pushed a ""there are some bad implementations so lets burn the whole concept down"" viewpoint, which I thought was short sighted and missed some of the point",2018,Why “Agile” and especially Scrum are terrible
BizWax,3,"Well, he is also pointing out some general flaws in the ""agile"" approach that make it vulnerable to such poor implementations. So, I get why it might seem like he wants to 'burn the whole concept down', but he actually acknowledges situations where agile is definitely superior to more rigid approaches to development, like here: 

>Something like Scrum has its place: a very limited, temporary one. The dishonest salesmanship is in the indication that it works everywhere, and as a permanent arrangement.

and here:

>Scrum, in this way, acknowledges the idea that emergency powers must sometimes be given to “take-charge” leaders who’ll do whatever they consider necessary to get a job done, leaving debate to happen later. That’s fine. It’s how things should be, sometimes.

I'm not asking you to agree with the post. I've been out of the industry for too long, so I really wouldn't know. I just think you (and others in this thread too, sorry if it feels like I'm singling you out) are not arguing a fair representation of the article's content. If you still disagree, that's fine. If you disagree with me, that's fine too. I just want to make sure people understand each other.",2018,Why “Agile” and especially Scrum are terrible
kurnikas,1,"No, that's reasonable, I guess I have a bit of a knee jerk to so many ""everything is aweful, I'm going to complain about everything and not offer solutions and not try to learn"" about agile (and many other things). I still have some fundamental misgivings about his premises (that agile is always business driven engineering or that business driven engineering is always a bad thing) And I even agree with the first sentence of his conclusion I just think he focuses too much ""big corporate"" agile (that do waterfall with nosier bosses) and doesn't give credit where credit is due.",2018,Why “Agile” and especially Scrum are terrible
morpheousmarty,1,"Toxic micromanagement is always a problem, but one of main tenants in agile is letting the devs handle development. ",2018,Why “Agile” and especially Scrum are terrible
amildcaseofboredom,100,"Author seems to have an issue with scrum because he loses the seniority he feels entitled to and feels that he is so good he should pick and choose what he works on. Basically can't work in a team.. 

I am not a big fan of scrum because there are too many meetings that don't really add value. I prefer kanban with adhoc huddles.",2018,Why “Agile” and especially Scrum are terrible
matchu,43,"Yeah, holy crap, this paragraph 😳

> […] I probably wouldn’t take a job below the Principal/Director-equivalent […] If you look at Scrum, it’s designed to disentitle the senior, most capable engineers who have to adhere to processes (work only on backlog items, spend 5-10 hours per week in status meetings) designed for people who just started writing code last month.

Yes, Agile is about getting you to participate on a _team_, with _other people_ with _different experiences_. If that sounds like disentitlement, then you're not ready for a Director role 🙄",2018,Why “Agile” and especially Scrum are terrible
semioticmadness,7,"Yeah, at my company that’s slowly been implementing agile-style processes for about 5 years now, it tends to make managers and higher-ranked technicians _serve_ the kiddos in the crappier roles that take the brunt of the stress.  I feel like it’s a nice balance between respecting me for my seniority (by asking for help) and expecting me to provide my experience to the benefit of as many people as possible.

It sounds like this guy works in shops where that trade feels toxic, either a lack of respect or a lack of reciprocity.",2018,Why “Agile” and especially Scrum are terrible
yodagnic,0,100% kanban is miles ahead. As long as you apply it with some common sense it saves so much pain from scrum and waterfall. ,2018,Why “Agile” and especially Scrum are terrible
MrCalifornian,8,"There are some problems with this blog post, but one thing that rang true to me from my small sample (a handful of tiny startups that used ""agile"" from the outset) was the fact that agile often leads to shorter-term thinking. Yes, this is a problem with management, and if managers are good at their jobs they won't shoot their team in the foot by encouraging things that have horrible tradeoffs in the medium to long term, but I assert that agile/scrum exacerbate that tendency.

I'm also of the opinion that surveillance-state-style management is encouraged by agile. Commenters here are correct in saying that this is a flaw in company culture, but again, agile not only doesn't help course correct, it gives people false confidence that they are finding problem employees, when there are a nonzero number of false positives (something I've seen signal this is when developers describe having done quite a bit of work that's not in tickets; usually this is due to high justification friction in working on tasks which are useful, but only in the >=month timescale).

Finally, agile, especially scrum, encourages the draining of creativity from developers. When you have a ""scrum master"" as a title, dictatorial tendencies follow more easily.

All that being said, the general concept of communication happening at a pre-determined frequency is very useful. I think it's beneficial to frame it as such, but it definitely gets new hires, especially shyer ones, comfortable with everything more quickly, and removes the friction caused by the uncertainty in co-workers' availability.

I generally am in favor of using ""agile"" for the idea of the level of granularity that's useful for tasks, and the minimum communication frequency about the accomplishment of those tasks. I think it's also important to de-cultify these concepts, and not let the vocabulary become the focus or a managerial cop-out (e.g. ""sorry, that task isn't framed as a user story, even though it's three levels removed from the user and 'only' beneficial to internal productivity"", or ""agile says we don't need concrete time estimates, only story points, so we won't even give a ballpark""). I also think the concept of story points are a useless indirection from time estimates: review your time estimates regularly and get better, don't use some pseudo-scientific Fibonacci sequence for the sake of feeling like you're part of a club and therefore doing things the right way.",2018,Why “Agile” and especially Scrum are terrible
sami-petteri,12,"The writer says its not about job culture and writes only about job culture and blame. And most of the things in the article are not about based on anything but opionions and guesses.

For me being agile is about feedback loops: Faster you validate something, less risky it is and more likely the end result is what is actually needed.

Office spaces also have nothing to do with being or not being agile but in my opionion teams should have open space. When working with people with same goal, it should be as easy as possible to ask for a second opinion instead of doing a week worth of things only to find out something was misunderstood and whole work is for nothing. Its the same feedback loop. Sometimes its irritating that people keep asking senior staff for opionions all the time, but its better than doing wrong things and having to manage that result.

Validate what you are doing as quickly as possible, big or small.
",2018,Why “Agile” and especially Scrum are terrible
KillianDrake,0,"Do fast feedback loops even work? Sure you get client to agree on this and that and then at the very end of the project, all the bigwigs from the client get involved and change everything at the very end anyway. And since there is usually a contract involved (usually with a client-favorable exit loophole that would crush your company) then that means all that fast feedback was worthless because the REAL decision makers are NEVER involved during the process.",2018,Why “Agile” and especially Scrum are terrible
grimmlingur,2,"That's not an actual feedback loop. If you aren't getting your feedback from principal stakeholders, then you aren't getting any actual feedback, just advice based on the best guesses of someone vaguely related to the project. The point is to have frequent contact with principal stakeholders, that means that if those ""bigwigs"" aren't involved during the whole process, you're just pretending to do fast feedback loops and wasting everyone's time.

As with all ideologies, understanding the reasoning behind it is as important as understanding what it actually is. Fast feedback loops are useful because it means that everyone that makes decisions about the project is on the same page, if people who make major decisions about the life of the project refuse to take part in that process, the process no longer provides significant value and should be largely ignored.

Doing frequent reexamination of your own work is generally useful as a whole, so some sort of internal feedback (just within a team for example) loop is something I've found to be generally useful. But the point of a fast feedback loop with a client is lost if those providing the feedback are not authorized to make the relevant decisions on the project.",2018,Why “Agile” and especially Scrum are terrible
sami-petteri,1,"That really has nothing to do with fast or slow validation, or agile or anything but bad management and bad relationship from the customer side. Nothing will help that case except early validation of customer relationship and fast nope",2018,Why “Agile” and especially Scrum are terrible
0987654231,1,"> Do fast feedback loops even work

Yes, they work great. It's 100x better to be in direct contact with the product owner.",2018,Why “Agile” and especially Scrum are terrible
KillianDrake,7,"The main problem is that agile is fundamentally diametrically opposed to contract-based development. When your business makes hardline promises to customers about delivery dates and feature sets, then you might as well throw agile out the window. 

It then becomes a death march where anyone not making decisions related to finishing a feature fast or rejecting any and all client requests as being ""non-contractual"" is seen as an enemy of the state. So the client and product owner stop showing up to product meetings, because why bother - ""it's in the contract what we're gonna get""..",2018,Why “Agile” and especially Scrum are terrible
dacracot,8,"> Like a failed communist state that equalizes by spreading poverty, Scrum in its purest form puts all of engineering at the same low level: not a clearly spelled-out one, but clearly below all the business people who are given full authority to decide what gets worked on.

OMG, Yes!",2018,Why “Agile” and especially Scrum are terrible
RedPandaDan,18,"""Did you project succeed? Then you used Agile! No, you definitely did!""

""Did your project fail? You didn't use Agile correctly. No, you definitely didn't!""",2018,Why “Agile” and especially Scrum are terrible
_bigorangehead_,19,"This thread is pure Agile bingo.

 - If it's failing you're doing it wrong. Check
 - Waterfall projects are always years late and build something no-one wants. Check
 - It is somehow impossible for Waterfall developers to think about improving processes and implement change. This is only possible via the Agile retro ceremony. Check
 - Waterfall cannot identify the most important value to deliver first, but Agile can. Check
- Waterfall cannot get fast enough feedback loops. Check

I've worked as a developer for 21 years and I've seen far more damage and failure done to software and businesses with Agile than Waterfall. It is perfectly possible to do all these things in a Waterfall environment. Nothing about Waterfall precludes any of this. But the standard anti-Waterfall tropes just get wheeled out time and time again. So much so that the sheer repetition makes developers believe it must be true.

Agile is cargo-cultism run rampant. Build the control tower and the planes will come. Write user stories in some stupid three sentence long patois and the good software will come.

Writing software using the Agile process is like that exercise where the teacher gets the English class to write a story, each student writing a paragraph then folding the paper over so that the next student cannot see what went before. You end up with a story, each student knew the overall theme but the result is utter garbage.

And the way Agile has facilitated the descent of documentation to the status of second class citizen is probably its single worst contribution to this industry. You will never ever be able to maintain a complex software system by having developers and support staff sit and read the codebase to find out how it works.",2018,Why “Agile” and especially Scrum are terrible
senatorpjt,11,"boat stocking disarm puzzled ask office hard-to-find piquant materialistic command

 *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",2018,Why “Agile” and especially Scrum are terrible
cheeseworker,4,"Change Requests during a protracted planning period.

Enough said.",2018,Why “Agile” and especially Scrum are terrible
keelanstuart,8,All of it was spot on. I've shared widely now.,2018,Why “Agile” and especially Scrum are terrible
sehrgut,7,All religions can turn into cults. Agile/Scrum has proven especially susceptible to this.,2018,Why “Agile” and especially Scrum are terrible
RecordHigh,10,"I've been a programmer for almost 30 years. The least satisfying and least productive projects I worked on were the ones where we implemented a named software development methodology, and Agile was without a doubt the worst.

The best working environments for me have always been the ones where we have a team of 5 or 6 people dividing and conquering the work with a one-off plan to get things done. In those cases, you still need the basics (coding standards, version control, issue tracking, requirements documents, mockups, system design documents, testing, etc.), but you don't need an obnoxious ~~management regime~~ development methodology that pigeonholes and dehumanizes people and inevitably wastes their time serving the methodology instead of serving the end goal.

I know this is contrary to what a lot of people preach here, but it's been my fairly consistent experience over a long period of time.",2018,Why “Agile” and especially Scrum are terrible
Racoonie,2,"> you don't need an obnoxious management regime that pigeonholes and dehumanizes people and inevitably wastes their time serving the methodology instead of serving the end goal.

No idea what this has to do with Agile as such. A company like this can implement whatever method and it will suck.",2018,Why “Agile” and especially Scrum are terrible
RecordHigh,3,"By management regime, I meant agile. You can take the same company with the same people in management, and do one project with an agile approach and one with a more tailored, ad hoc approach and the developers on the agile project will be less satisfied and less productive. I've seen it at several different companies and on dozens of software development projects.",2018,Why “Agile” and especially Scrum are terrible
youwillnevercatme,5,"How is Agile supposed to work when you have a fixed budged, scope and timeline?",2018,Why “Agile” and especially Scrum are terrible
fuckin_ziggurats,1,"You don't sell a product at a fixed budget, scope and timeline if you can't make that promise.. Also, I don't know many large software projects that didn't exceed the budget.",2018,Why “Agile” and especially Scrum are terrible
youwillnevercatme,2,"Unfortunately my company does. We sell huge projects (\~1 year) on a fixed scope (high level to make matters worse), budget and timeline.

But I do understand the side of the customer, they need budget approval from the business and they need to know exactly what they are getting beforehand.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,16,[removed],2018,Why “Agile” and especially Scrum are terrible
rubbermilitia,3,"Yeah as a reply to this, and /u/scottyLogJobs, there is no such thing as 'true agile'. It is a paradigm, which has become an umbrella term for a lot of different frameworks, but it is not a framework in itself.",2018,Why “Agile” and especially Scrum are terrible
kingjoedirt,1,">  there were no sprints

I have always thought it would work better without them. Keep the backlog maintained and let me just pop stuff off the top as I get done with the last story.",2018,Why “Agile” and especially Scrum are terrible
cheeseworker,1,No sprints = kanban ,2018,Why “Agile” and especially Scrum are terrible
PenalAnticipation,0,"sort memory grab growth different worry quiet fall saw thought

 *This post was mass deleted and anonymized with [Redact](https://redact.dev)*",2018,Why “Agile” and especially Scrum are terrible
scottyLogJobs,1,"I've never worked in an Agile environment that doesn't have Sprints or open office at its core, and most of those wouldn't claim to be practicing Scrum. TBH I don't even know what Agile would look like without those things.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,4,[removed],2018,Why “Agile” and especially Scrum are terrible
grimmlingur,3,"That's what managers should be doing, making sure you are able to do your job, not making sure that you are constantly doing your job. If people get their work done, you know they are doing their job. If people are falling behind, you can start looking at why, either you will find a problem that was slowing them down, which affords you the chance to help solve the problem and enable them to do their job, or there is no problem in which case you can start to examine the productivity of the employee.

I get that sometimes people manage to bluff themselves into a position they can't handle (or simply get promoted outside their field of expertise) so a company needs to keep watch on whether or not employees are doing their work well, but that can all come organically from just enabling them to do their job.",2018,Why “Agile” and especially Scrum are terrible
key_value_map,12,"I've worked in Agile environment in few companies and am familiar with other implementations. In 99% of cases Agile is 2-3 weeks long waterfall with no documentation, proper project planning, testing. Quality sucks, devs and QAs are stressed, managers are happy with cost savings and ready to jump the ship with fake project success on their resume. Scrum masters are delusional project managers who are happy about being called with trendy 'scrum master' titles while they don't have any real say. Everything is driven by fixed deadline and instead of descoping tasks they descope critical parts of SDLC. ",2018,Why “Agile” and especially Scrum are terrible
flash357,-2,"I'm sorry if that has been ur experience but if it has been then the companies that you've worked with have been implementing it incorrectly

Agile doesnt mean no documentation, process or anything else... on the contrary... u need all of that in order to be successful",2018,Why “Agile” and especially Scrum are terrible
key_value_map,6,"I never said Agile is bad, just shared my observation how it is implemented in large companies. Probably it is not possible to implement it properly in large corporations. In places where it is easier to but extra memory or monitor cable out of your pocket than to get it through internal process. I've been in stand up meetings with 25+ people, I tell stories for hours how bad Agile implementations are in large companies. Instead of helping people being more productive and motivate them, they just come with new processes.

In my side projects I follow Agile.",2018,Why “Agile” and especially Scrum are terrible
flash357,0,"A team should never be comprised of more than 7-9 ppl for agile to be effective tho

If ur on stand ups with 25+ ppl then that is noooo bueno!

LOL",2018,Why “Agile” and especially Scrum are terrible
Hyronious,2,"Interestingly my current department does stand ups together for a couple of reasons, including that a third of the department is in a different country. That means 20-25 people most days, and while we hit a few stumbling blocks as the team grew, we now manage to get a lot of information spread around in 20 minutes, and usually end up spinning off a couple of smaller catch ups to discuss things in more detail with 2 or 3 people. It works well for us as a way to open up cross-location communication. Teams are 3-7 people within the department.

As a genral rule though, you're dead on.",2018,Why “Agile” and especially Scrum are terrible
lordzsolt,36,"> Under Agile, technical debt piles up and is not addressed because the business people calling the shots will not see a problem until it’s far too late or, at least, too expensive to fix it. 

While I don't agree with all the points, this line very much sums up my problem with Agile.",2018,Why “Agile” and especially Scrum are terrible
tank_the_frank,53,"This sums up poor product management, and something that would happen regardless of methodology.",2018,Why “Agile” and especially Scrum are terrible
lordzsolt,10,True. I guess that's true for all my problems with Agile. Inability of managing technical debt and having no clear roadmap are both product management issues and not methodology.,2018,Why “Agile” and especially Scrum are terrible
spoonraker,4,"Exactly. Agile reduces complexity of process, but it doesn't do anything to reduce the complexity of the solution to the business problem. That's not a failing of Agile though, that's by design. Agile isn't a software architecture methodology and it's not a design pattern. If you're not staying on top of solution complexity and you're letting technical debt spiral out of control, you've got bigger problems than Agile. It's very much possible to avoid and/or address technical debt within an Agile process. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,5,[deleted],2018,Why “Agile” and especially Scrum are terrible
spoonraker,2,"""Sprint"" has a specific meaning within Scrum, and it has nothing to do with explicitly minimizing design work, architecture work, or anything that might alleviate technical debt.

People who haven't taken the time to understand the methodology they're claiming to use are responsible for that.

Agile, at its core, is just a collection of somewhat abstract principles. That's it. 

Scrum is a concrete methodology that aims to satisfy those principles with a one-size-fits-all approach to project management that still leaves room for interpretation within those confines to accomplish your goals.

This is why people get in trouble. They don't understand what Agile is. It's simply false to say that Agile aims to tackle solution complexity. It doesn't. It wasn't designed for that. Software teams are responsible for taming their own solution complexity, with or without Agile. Agile is unrelated to solution complexity.

I get it. If you have only a vague understanding of Agile that you got second-hand from somebody else's interpretation of Agile, it's easy for Agile to become bastardized to the point where it's almost adding technical debt by design. But is that the fault of Agile? No.

The real problem is simply that technical debt is an easy lever for short-term-minded business people to pull in an effort to make it look like progress is being made faster and faster when it's really building towards an inevitable grind to screeching halt. The other problem is that in many cases business people don't even realize that they're doing this. And further compounding things is the fact that many times even the developers don't realize that they're accumulating technical debt. 

Simply put, taming solution complexity isn't sexy, even among many software developers. Almost nobody takes it seriously, and if nobody does, the end result is that inevitably you get crippled by technical debt.

There are many different issues that exacerbate this problem, such as the fact that if you do have somebody advocating for tackling solution complexity, that person might not be empowered to make the case concretely because they don't have access to the data that business executives have, like increasing engineering payroll over time as compared to cumulative system functionality.

Anyway, now I'm rambling. The tl;dr is this: Agile isn't the cause of solution complexity. This problem pre-dates Agile, it continues to exist despite Agile, and if Agile ever gets replaced by some new process it'll probably continue to exist there too. Nothing about Agile aims to reduce solution complexity. Nothing about Waterfall aimed to do so either. Software architecture and system design is simply not an area of software development that most companies take seriously. That's the real problem.",2018,Why “Agile” and especially Scrum are terrible
nkdeck07,2,Yep. I'm interviewing for product management positions right now and a big question I keep asking is what percentage of time they devote to technical debt,2018,Why “Agile” and especially Scrum are terrible
IRBMe,6,"I found a few of good ways in my team to handle technical debt.

1. If a task involves working on a class or module which is missing unit tests (and we have a lot of those in some of the legacy code-bases), then the estimate for the task usually includes the effort required to do some refactoring and at least start adding some unit tests.
2. If somebody finishes the tasks that they were assigned in the sprint, they're free to do what they want as long as it's in some way productive and somewhat relevant to their job, and one of the things that people often work on is refactoring code that has been bothering them for a while.
3. We have a technical debt multiplier that is visible to product management and roughly reflects our estimate of the current state of the system. All estimates for all tasks are multiplied by this value, so a perfect system with no technical debt would have a multiplier of 1.0. Ours is currently at 1.7. If product management demand that something be delivered sooner, we can show how that will affect the technical debt multiplier and it becomes painfully obvious to them that those kinds of decisions aren't free but actually have a real cost, which were previously hidden. It also means that the product manager is more likely to prioritize purely technical tasks that reduce the multiplier in order to reduce future estimates.",2018,Why “Agile” and especially Scrum are terrible
optimal_substructure,1,"I like 2 and 3 a lot. I felt like a lot of the new features didn't seem to have a real cost to the product team because we couldn't encompass some of the technical issues with the debt. 

Some way of writing backlog items that manage the pure technical debt that reduce the multiplier might be more readily accepted",2018,Why “Agile” and especially Scrum are terrible
KFCConspiracy,3,This can happen in any methodology. The problem is poor management and/or the team lead not being a strong enough advocate. Management's not going to understand technical debt unless someone stands up and explains that in terms of business value. ,2018,Why “Agile” and especially Scrum are terrible
lordzsolt,1,"Sadly you're quite right. I generally hate pointing fingers, but I really feel like someone (or everyone) up the Team Lead -> PO -> Manager -> Marketing chain sucks massively at managing expectations. Everyone just seems to go along with whatever the person above him says and never challenge anything.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,Technical debt can be absorbed by velocity.,2018,Why “Agile” and especially Scrum are terrible
lordzsolt,6,"Hah. Joke's on you.

The previous project I worked on, the velocity wasn't established after 6 months.
The current project I'm on, there's no notion of velocity. Half the stories don't even have story points assigned. Stories are changed mid-sprint.
",2018,Why “Agile” and especially Scrum are terrible
got_milk4,5,"Which doesn't work when you have management who believes your velocity is too high as it is, and you're already not paying down any technical debt.",2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,3,"Poor velocity and not fixing technical debt go hand-in-hand.

&#x200B;",2018,Why “Agile” and especially Scrum are terrible
IRBMe,2,"> Which doesn't work when you have management who believes your velocity is too high as it is, and you're already not paying down any technical debt.

Many people don't quite seem to understand that velocity is something that you measure, not something that is dictated to the team. If management think that the value that was measured is itself the problem then they don't really understand what velocity is and that's when, unfortunately, you need to start trying to educate them.

Once management understand that a high velocity is actually just a reflection of one or more real underlying problems and they're prepared to try to address those problem, that's a good point to have a conversation about why the velocity is so high and what can be done to improve things, which is where you start talking about technical debt.",2018,Why “Agile” and especially Scrum are terrible
KFCConspiracy,1,"I think a better approach is to create stories that address it and explaining the business value. Absorbing it in velocity just makes the team's velocity look lower than it is... It's masking what the team is doing. Refactor widget classes to reduce coupling on fidget classes can be a story. It's something someone worked on. When you've dealt with most of your technical debt then the team can suddenly do more story points? I don't think that's accurate. 

I would say that technical debt increases the amount of story points required to achieve a goal, rather than decreasing velocity. Story points should reflect effort and be a proxy for time spent. ",2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,3,"The business people don't call the shots. They collaboratively define the work, the priorities, and the measure of success.",2018,Why “Agile” and especially Scrum are terrible
lordzsolt,10,"> The business people don't call the shots. They collaboratively define the work, the priorities, and the measure of success.

I'll add this to the list of fairy tales I am going to tell my children :)",2018,Why “Agile” and especially Scrum are terrible
nutrecht,1,"It's nonsense though. I've worked in good and bad organisations. Whether technical debt piles up has nothing to do with whether they 'do Agile' or not; it only depends on how much management trusts their engineers.

If anything; good companies that properly implement agile know to trust their experts. ",2018,Why “Agile” and especially Scrum are terrible
cheeseworker,1,Under the scrum nexus framework reducing / having no technical debt is a key objective. ,2018,Why “Agile” and especially Scrum are terrible
zjm555,13,"Here's how to sum up the whole ""agile is good / agile is bad"" debate:

Agile is a great methodology for software development, and a bad methodology for corporate management.",2018,Why “Agile” and especially Scrum are terrible
Yioda,1,"Agree totally. I see the agile concepts as a great way to develop software, if you understand correctly what they mean, of course. And this is no surprise. Lots of pro teams work that way, many without even explicitely talking about 'agile', and have done for a long time. Now. A lot of the time this gets extended to business and management practices and it becames useless dogmatism and snake oil. More importantly, the agile \*development\* part gets diluded an forgotten in exchange of 'masters', 'stories', 'standups' and more moronic and inmaterial terms.

&#x200B;

(Clarification: I'm ok with some meetings, some work division etc, the problem is using fancy names that give a sense of something that is really not happening or working)",2018,Why “Agile” and especially Scrum are terrible
funbrigade,46,"I'm kinda surprised by the downvotes. Even though I don't agree with the conclusion (that we should kill agile and drag it through the street), there are some really salient points in there (especially around questioning the dogma)

...that being said, it definitely ends up rambling for a bit.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,75,"> I'm kinda surprised by the downvotes.

Probably because of repetition. This is almost a weekly thing. I think the last one I saw was just one or two days ago. The topic is not *that* interesting that the 210th blog post is able to say anything new.

Oh and then there's the title.",2018,Why “Agile” and especially Scrum are terrible
iScrE4m,14,The blogpost is over 3 years old too.,2018,Why “Agile” and especially Scrum are terrible
GhostBond,1,"The pro-agile talking points are the same to though.  

Agile will solve your problems.  
It's not Agile's fault it didn't solve your problems, you didn't do it right.  
How specifically did you do it? There's no specific way it's just a set of abstract principles.  

It should be titled ""how to sell empty buzzwords as something real"".",2018,Why “Agile” and especially Scrum are terrible
iScrE4m,1,"From my experience it works. I can't image not having retrospectives, planning individual development tasks months ahead. I worked at project where it didn't work and it was awful, because we weren't cleared off the stress, as things weren't working out, we felt it every sprint. At the same company at different project it's just great though and I don't want to live wihout it. Iterations, fast feedback, space to talk stuff out. That's good.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,31,[deleted],2018,Why “Agile” and especially Scrum are terrible
funbrigade,21,"I agree in principle, but what if the pain point is the process itself? I can't tell you how much time I've wasted in circlejerk scrum ceremonies for our last client and what the author said about agile negatively restricting engineering functions **seriously** resonated with me.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,24,[deleted],2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,8,Or reduce their duration and improve their focus.,2018,Why “Agile” and especially Scrum are terrible
tborwi,6,I get stand-ups when the team is working on overlapping functionality. That make sense. What really bothers me is when it becomes a reiteration of daily logged work in Jira for managements benefit or just a justification of the previous day's time.,2018,Why “Agile” and especially Scrum are terrible
nutrecht,3,"If there's any managers in the stand-up it's a sure sign you have a management problem. Actually 9 times out of 10, problems with 'agile' are not really problems with agile, but problems with management. If anything an agile implementation means management has to change the most. Heck; lower level managers can become completely redundant.

That's also the nasty part; a manager that hires an agile coach is probably not going to let that same manager tell him he should get another job. Agile only works if it's implemented top down.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,[deleted],2018,Why “Agile” and especially Scrum are terrible
s73v3r,2,">IMO, the standup should be a team confessional.

That sounds even shittier than it already is. ",2018,Why “Agile” and especially Scrum are terrible
RikuKat,1,"That happens when you have unengaged engineers or your Scrum Master doesn't really know what's going on. 

I'm a TPM with an engineering background, daily stand-ups are my opportunity to keep a pulse on the team's progress while identifying overlapping work. This overlapping work includes unrelated features, too! There have been many times I've identified work we were doing that had a somewhat similar solution to another feature that was worked on previously, even sometimes from a previous project. ",2018,Why “Agile” and especially Scrum are terrible
tborwi,3,Don't you get that from Jira work logs though? Even Sprint planning should identify overlapping work. There's too much redundancy.,2018,Why “Agile” and especially Scrum are terrible
RikuKat,4,"No, while I'm currently subscribed to literally every ticket change/comment/etc in JIRA, it's not as easy to identify the approaches being taken there without a ton of overhead. In a quick morning it's much easier for me to say ""Hey, Bui, isn't that LoD system Tom is working on similar to the one we implemented on the previous project? Can we reuse that work?"" 

Also, I love my engineers, but there is a huge range of what they write and track in JIRA, so stand-ups are a nice sanity check for me. ",2018,Why “Agile” and especially Scrum are terrible
tborwi,4,"So that pretty much goes back to my original point that the scrum is for ""management benefit"" :)",2018,Why “Agile” and especially Scrum are terrible
RikuKat,3,"...no?

Saving engineers work is not a strictly management benefit.

Engineers quickly discussing their planned approaches and other engineers chiming in about how something may not work and suggesting alternatives is not a strictly management benefit. 

Engineers understanding what each other are working on to prevent the stepping on toes and adjustment of related systems is not a strictly management benefit.

You can't bullshit that an engineer knows their exact planned approach two weeks out. Not all of this comes up in sprint planning, especially day by day conflicts. 

",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,[deleted],2018,Why “Agile” and especially Scrum are terrible
RikuKat,2,"Maybe it's because I work in games, but people actually enjoy working on new interesting features insteading of rebuilding yet another localization system. 

I'm leaving this company for other reasons, but have had pretty much every member of the engineering team come to me personally to thank me for my work, say how much they've appreciated me, and how much they'll miss me when I'm gone. 

You can try to pick apart my words, but I make my team happy and keep my projects in scope and on time, so that's all that matters to me. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,[deleted],2018,Why “Agile” and especially Scrum are terrible
RikuKat,0,It's saved in reduced overhead and less information slipping through the cracks. 15min a day saves hours of wasted communication and conflicting work. ,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,[deleted],2018,Why “Agile” and especially Scrum are terrible
RikuKat,0,"[https://en.wikipedia.org/wiki/Redundancy\_(engineering)](https://en.wikipedia.org/wiki/Redundancy_(engineering))  


Depends on the risk versus the cost, right? I think 15min a day when most people aren't really productive yet is a cost far lower than the issues it prevents slipping through the cracks. ",2018,Why “Agile” and especially Scrum are terrible
s73v3r,2,">daily stand-ups are my opportunity to keep a pulse on the team's progress while identifying overlapping work 

That's what Jira is for. ",2018,Why “Agile” and especially Scrum are terrible
RikuKat,2,"Because all engineers properly move tickets to ""In Progress"", comment their approaches, and look at other active tickets on the board?

Riiiigggggghhhhttttt...",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,[deleted],2018,Why “Agile” and especially Scrum are terrible
RikuKat,3,"Seriously? I generally don't throw the baby out with the bathwater. 

Even if not used fully, JIRA is still a very powerful and useful tool. Just being able to tag a commit with a ticket number alone is extremely beneficial for CRs and QA. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,[deleted],2018,Why “Agile” and especially Scrum are terrible
RikuKat,1,"Stand-ups allow everyone to see if there will be conflicts that day (e.g. someone working on the same scene in Unity that must be touched by multiple people in the sprint) without the overhead of pestering each other. It allows for some in the moment suggestions as well, which are often very valuable between engineers. 

Everything gets sorted at the start of the day so you don't have engineers interrupting each other or waiting on responses from each other. 

As we use Git, not a locking source control, and work with binary assets like scene files, merge conflicts are very real and can result in lost work. 

Maybe if a team perfectly used JIRA, everything would be fine without stand-ups, but people aren't perfect and I'd rather have a 15min check to catch stuff than have failures and unnecessary work. ",2018,Why “Agile” and especially Scrum are terrible
bananabm,1,"the only thing we do regularly in my team is standups. Sprint planning and Backlog grooming happens organically, ad-hoc, with a couple of random people. Estimates don't happen. Our retros are ad-hoc, and themed. Eg we might have a deployment pipeline retro, or a user research retro. No-one's proposed a process retro yet because it turns out everyone's super happy with how our team is working.",2018,Why “Agile” and especially Scrum are terrible
fforw,15,"> measure its effect on performance

How do you ""measure"" that? By assigning points and hoping you'll get better at it over time?",2018,Why “Agile” and especially Scrum are terrible
errorkode,17,"However the fuck you want actually. It might be related to the number of bug reports, test coverage or a satisfaction metric by stakeholders. Velocity is just one of many possible metrics. If you feel the most important metric in your team is the amount of coffee drunk in any given week, use that.

The important thing is that you decide what you want to optimize for and actually measure against that. Otherwise you might as well be reading team leaves.",2018,Why “Agile” and especially Scrum are terrible
fforw,10,"Or I can just accept that none of the projects we do is really comparable and stop the misguided attempt to squeeze everything into numbers. The pain points are usually really obvious to the team without any measuring, you usually get a bit better at project management and estimation over time.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,4,[deleted],2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,[deleted],2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,[deleted],2018,Why “Agile” and especially Scrum are terrible
fforw,1,"> But not to the management, and like it or not you are hired to deliver a product.

Nope, we're doing services and consulting for our clients. ",2018,Why “Agile” and especially Scrum are terrible
errorkode,3,"Or you feel you do. I agree that not everything can always be put into numbers, but just ""feeling it"" is just as error prone. A common fallacy for example is that people who are multitasking feel like they're more productive while actually getting less done that people who focus in single tasks.

Just because you feel more productive doesn't mean you are. Or just because it feels like you help your clients, doesn't mean they feel the same way.

Things like story points, test coverage or bugcounts are obviously not perfect metrics for the performance of a development team, but it's better than just throwing your hands up and do whatever ""feels"" right.",2018,Why “Agile” and especially Scrum are terrible
fforw,0,"We totally have a metric. Money the client will pay and hours sunk into the thing. 

> Or just because it feels like you help your clients, doesn't mean they feel the same way.

Of course they do. That's like the main priority of consulting business. To give the client the warm fuzzy feeling of being taken care of, not looking too closely to the bills attached to that.

The client will let you know how they feel about the services you deliver. We have yet to be sued for it but we took over some projects of companies that did get sued.

> story points

Story points are good if you have an on-going volume based relationship with a client. The classic bang-for-the-buck. Does only apply to a very low number of contracts in reality for us.

> test coverage

can be just wrong incentives. Testing trivial shit to drive those numbers up, increasing code-weight without any actual benefit. Good tests are hard, you cannot squeeze them into numbers.

>  but it's better than just throwing your hands up and do whatever ""feels"" right.

This is a software consultancy business, not a hippie commune. ",2018,Why “Agile” and especially Scrum are terrible
errorkode,5,"1) Not everybody works in a consultancy.

2) Story points are not meant to be billable. Actually kinda defeats their purpose. They're meant to be used in ongoing projects to estimate delivery of packages of stories. They're quite vague by design.

3) Seems to me you have a pretty good idea what your primary metric is and how to measure it.",2018,Why “Agile” and especially Scrum are terrible
fforw,2,">  Story points are not meant to be billable.

I didn't say they were. They're a useful tool for situations where the client pays a fixed amount of ""service time"" per contract period.

Our usual method is that the client wants a software, agrees to pay X thousands EUR for the software and we deliver the software. Story points are not very useful in that case.",2018,Why “Agile” and especially Scrum are terrible
Carighan,1,"More importantly they're often quite binary. It's not something I can put into numbers other than 0 or 1. Or sometimes ⊤ or ⊥, granted.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"Without numbers, you cannot really measure.

I work for a company that sells R&D as a service.  Which means we help bring new products to market.  We are often their rented engineering team for the purposes of getting one or more product done.

The first questions a client will have after they explain their goals are ""how much?"" and ""how long?"".  If you can't credibly answer these you're not likely to get the job.  If you don't hit reasonably closely, you're not likely to get the next job.

If it is really something completely new, we pitch them a research project with scope and then we have to run a very agilesque cycle of weekly budget burn reports and progress made.  They want a tight feedback loop to keep from wasting dollars on dead ends and may turn the project on a dime to try a new approach.

So I do a lot of measuring and accounting in addition to software development.  About 25% of my time these days communicating/collaborating with the client.  That's the professional life.

The whole story thing is just a tool to tease out the actual requirements because often the client cannot articulate accurately what he actually wants.",2018,Why “Agile” and especially Scrum are terrible
s73v3r,1,"I'm gonna disagree there; so many of the problems around Agile are because teams are not allowed to be honest in retro, and are not empowered by the business to change what needs to be changed. Unfortunately, a lot of the Agile/Scrum dogma is, ""Do it by the book"". ",2018,Why “Agile” and especially Scrum are terrible
loup-vaillant,12,"> Even though I don't agree with the conclusion (that we should kill agile and drag it through the street)

I've read a slightly different conclusion: that agile processes real use are emergencies. So don't kill agile. Lock it up in the dungeon, and bring it out when the dragons are coming.
",2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,2,"No, if you don't do it continuously, it won't be able to tell you anything about the effects the dragons have on your work.

Agile's real benefits come when you're working continuously, smoothly and predictably. The information generated will allow the process to continue being smooth, with as few surprises as possible.",2018,Why “Agile” and especially Scrum are terrible
loup-vaillant,3,"I happen to agree with the conclusion I just described: Agile™ should be confined to emergency situations only.

I'm currently working at a company full of good people with good intentions. As was the one before it. The two ostensibly used Scrum, though they do it differently. In both companies, Scrum sucked. I found there much of what I read in this post, most notably the overly rigid adherence to ""stories"" leading to not addressing technical debt.

> Agile's real benefits come when you're working continuously, smoothly and predictably.

I'm not employable that way.

I do *not* work continuously, smoothly, and predictably. I have periods where I stall, and slog through the day not really knowing how I am going to take the next step. And I have bursts of productivity where I can make significant achievements in relatively little time. The more I can direct my own work, the more bursts I get. Give me full autonomy, and I can maintain that state almost continuously.

When something does not interest me however, my productivity *plummets*. I will slog through if I see the need, but if I don't, my motivation goes through the floor, and will hardly get anything done.

I'm not a Maverick. I can and have worked in teams productively, my code is high quality (simple, few bugs), and I'm not too slow. Just, if you want the output you deserve, you need to give me the autonomy _I_ deserve.
",2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,1,">I do not work continuously, smoothly, and predictably. I have periods where I stall, and slog through the day not really knowing how I am going to take the next step. And I have bursts of productivity where I can make significant achievements in relatively little time. The more I can direct my own work, the more bursts I get. Give me full autonomy, and I can maintain that state almost continuously.

I hate to be the one to say this, but I think most of the people on this thread would relate to that - myself included.

Individuals stop and start. Individual tasks get blocked. That's exactly why you need techniques to recognise those blockages and help smooth them out. Agile does that. Nobody ever gets blocked for no reason at all.",2018,Why “Agile” and especially Scrum are terrible
loup-vaillant,2,"> That's exactly why you need techniques to recognise those blockages and help smooth them out.

Yes we do.

> Agile does that.

Not in my experience. Most of the time, Scrum itself was my impediment. Maybe we didn't do it right. But as data points accumulate I'm suspecting the only way to do it right is to do it _less_.

My current team used to do daily meetings. We noticed they were useless, so we're now down to weekly meetings. Much better. And screw stories. We have work to do, we just do it. If we have blockers, we just seek help. If we're falling behind schedule, our manager comes in and asks what's up. We basically removed Scrum, and we're better for it.
",2018,Why “Agile” and especially Scrum are terrible
Tetereteeee,2,...and then somebody will shout ‘we’re not doing scrum the right way!’.,2018,Why “Agile” and especially Scrum are terrible
GhostBond,2,"> I'm kinda surprised by the downvotes.  

My personal theory is that agile consulting companies monitor online forums for anything antiagile. Every time this topic comes up commenters show up with same same empty feel-good sales pitches.  

I've never met a daily-dev person who likes agile. Many hate it. Some don't care. They gamed, the old system, they games the new system.  

The only people I've met in real life who like agile are prople who aren't working as a dev in it. Managers, recruiters, some devs who in the worlds most amazing coincidence used agile to get out of day-to-day dev (moved into an architect position, moved into management).

",2018,Why “Agile” and especially Scrum are terrible
DJDavio,1,"Most of the time the problems aren't with agile, which is just an abstract concept, but with rigorous scrum implementations of it. Also, problems are often not with the project processes, but with people abusing or misusing them. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,You are seriously surprised? This article is garbage. The same BS can be said about any cube farm running waterfall.,2018,Why “Agile” and especially Scrum are terrible
Nulagrithom,1,"To be honest, I just skimmed it and downvoted because it seems to have the same problem every other ""Agile Sucks"" article has:

It doesn't give me any fucking alternative.

It's easy to rail against development methodologies, or anything really, when you don't provide an alternative. Pointing out why things suck isn't hard. Building something new is difficult.

And before someone says ""just do what you did before Agile!"" fuck you. That was chaos and I hated it. We didn't get a damn thing done.

It's certainly not perfect, but if you've got a well-defined method with the requisite books and information and shit that I can recommend to folks so it's easy to buy in to and understand, well... I'm all ears.",2018,Why “Agile” and especially Scrum are terrible
tank_the_frank,28,"Reading through this post, this individual hasn't worked in an agile environment, and has had people misusing the term in an effort to look trendy. Nearly all of the examples given point at poor management, not a problem with the concepts presented in Agile.

Here's some thoughts:

> Corporate Agile, removed from the consulting environment, goes further and assumes that the engineers aren’t smart enough to figure out what their internal “customers” want.

You should be working with Product and stakeholders to solve the problem, not blindly doing what people want. At no point does agile say ""engineers aren’t smart enough"", and it says the opposite of ""don't talk to stakeholders"".

> ... work gets atomized into “user stories” and “iterations” that often strip a sense of accomplishment from the work, as well as any hope of setting a long-term vision for where things are going.

Creating a sense of accomplishment is literally what a sprint is supposed to do - clear, achievable increments that work towards a greater goal. Teams should be setting these increments themselves, and working with Product to do so. Knowing the goal is a critical part of being able to groom effectively, and if you aren't being shown it, and aren't empowered to help guide the solution there, management practices are the ones at fault, not ""agile"".

> Open-plan offices are the most egregious example. ... They’re anti-intellectual, insofar as people become afraid to be caught reading books (or just thinking) on the job.

You work somewhere bad. I'm not defending open-plan offices, and much prefer private spaces, but this is crap culture, and has nothing to do with not having walls around you. You want them so you can hide, implying there's still a reason to do it; the walls just make it harder to get caught.

> It’s well known that creative people lose their creativity if asked to explain themselves while they are working.

I'm not disputing this point, but the article could do with a citation to expand on it.

> These Agile systems, so often misapplied, demand that they provide humiliating visibility into their time and work, despite a lack of reciprocity.

Again, poor culture. If you can't see the greater goal and only see from the start of one story to its end, this isn't agile's fault, this is management deliberately avoiding telling you things. They'd be doing the same thing under any other structure.

> Scrum is the worst, with its silliness around two-week “iterations”. It induces needless anxiety about microfluctuations in one’s own productivity. There’s absolutely no evidence that any of this snake oil actually makes things get done quicker or better in the long run. It just makes people nervous.

Scrum iterations aren't designed for faster production, it's faster *delivery*. Iterate rapidly, get feedback quicker, figure out if you're going wrong faster by getting direct feedback from the people using it. Velocity is a tool within this to keep things predictable so you can do longer term forecasts. It's not a measure of productivity, and if it's being used like that, again, this is poor management.

> work only on backlog items, spend 5-10 hours per week in status meetings

15 minute stand-up, 30 minute sprint review, 60 minute retro, plus 2 (?) hours of grooming. That's 6 hours, of which 3 could be seen as a status update. I don't like that phrase though, and it's not what these ceremonies should be seen as - the sprint review, maybe, but stand-ups are coordination meetings, and the description as a status update sounds like it's being used to blame people as opposed to figuring out how you're going to get stuff done today.

...

I got bored at this point, but it goes on. The article is based off of misconceptions and toxic management, and isn't about agile. One of the fundamental principles is to learn and iterate, and I don't see any mention of that. For someone who says that they've got 10 years experience with this, I feel really sorry for them, in part because they've had to deal with this, and in part because during the time where they were a manager they weren't able to fix these obvious problems.",2018,Why “Agile” and especially Scrum are terrible
dottybotty,1,This should be the top comment.,2018,Why “Agile” and especially Scrum are terrible
michaelochurch,26,"This may get buried, which is fine, but I'm the author of the blog post linked here.

A few people commented that I failed to propose an alternative. In that essay, I might not have. However, at the time, I was pretty active in blogging and wrote essays on [open allocation](http://sasamat.xen.prgmr.com/michaelochurch/wp/2012/09/03/tech-companies-open-allocation-is-your-only-real-option/). So, I did discuss superior alternatives that actually work. 

Most of my blog posts were deleted in 2016 in a stupid accident– not getting into that story here– so the context may have faded a bit.

I don't really write, these days, about open allocation or programming languages, if only because I've given up on technology as a community. I don't see hope for it. I used to think that if we used better programming languages or management techniques, we'd fix most of our problems. Not true. We've been conquered by the VC bastards and pedigreed sociopath founders. It's over. The only decent way to make money in tech is to travel back in time to the 1990s, but if you have a time machine, there are plenty of even easier ways to make money....

Besides that, there are bigger political issues facing the country now. It was one thing to argue in 2013 about open allocation and organizational dynamics. In 2018, though, with the existential threats we face in technological unemployment, climate change, and old-style literal fascism, I'm just as not as interested in my old topics... which programming language or project management approach is better... as I used to be. The old tech-specific concerns feel a bit petty in comparison to the major problems we now face. ",2018,Why “Agile” and especially Scrum are terrible
unknownmat,2,"This forum is a few days old now, but I just noticed your username wanted to take the opportunity to respond to the article's original author.

I read the article some time before it got deleted and refer back to it often (for a while I was using the Wayback Machine). I really enjoy your writing and can't honestly understand all the negative feedback in this forum. I'm really sorry to see that.

It seems obvious to me that agile is appropriate for some projects and not for others. I'm baffled by how resistant the comments in this forum are to this idea. I also note that every single comment complaining about some aspect of agile inevitably has at least one response of, ""Well, that's not agile!"" In other words, agile works. If agile is not working for you then you're doing it wrong.

> Besides that, there are bigger political issues facing the country now. It was one thing to argue in 2013 about open allocation and organizational dynamics. In 2018, though, with the existential threats we face in technological unemployment, climate change, and old-style literal fascism, I'm just as not as interested in my old topics... which programming language or project management approach is better... as I used to be. The old tech-specific concerns feel a bit petty in comparison to the major problems we now face.

Well said, I feel this way as well. It's hard to care about IoT when Liberalism itself is on the ropes. Curiously, are you doing anything about it?",2018,Why “Agile” and especially Scrum are terrible
michaelochurch,1,"> Well said, I feel this way as well. It's hard to care about IoT when Liberalism itself is on the ropes. Curiously, are you doing anything about it?

That's a great question, and the answer's... complicated.

I can't ""not be political"" because my name is all over the place and the cat's out of the bag. I'm putting most of my energy into my novel, though. After some harrowing experiences in 2015–16, I have to be more selective about how I spend my time. I'd rather have one big, possibly important, contribution than keep throwing darts, as I could in the relative peace time of 2010–14.

I got a death threat earlier this month. It wasn't a credible one. These don't affect me the way they used to. Still, the bad guys are very much out there. And the Time of Trump encourages not only the fringe, but also the corporates who are more confident about treating workers like shit these days. ",2018,Why “Agile” and especially Scrum are terrible
unknownmat,1,"> I'm putting most of my energy into my novel, though.

Good for you. Good luck with that.

I was mostly asking for selfish reasons. I had wondered whether your change in interest hinted at a change in career. Mainly, I was wondering if you'd found a way for a burnt-out technologist with an urgent need to keep paying the mortgage to somehow do something worthwhile politically.

> I got a death threat earlier this month. It wasn't a credible one. These don't affect me the way they used to.

That's crazy. I've only known you as a tech blogger - primarily by reading your thoughts on Agile and VC culture. I can't imagine anyone would send death threats to a tech blogger. But perhaps your publicly expressed politics are much broader than I realize.",2018,Why “Agile” and especially Scrum are terrible
michaelochurch,1,"> That's crazy. I've only known you as a tech blogger - primarily by reading your thoughts on Agile and VC culture. I can't imagine anyone would send death threats to a tech blogger.

You'd think that, right? So would I. 

That being said, the tech barons will go quite far to protect what they have. It isn't illegal, in their world, unless they get caught. It's not that rare, for example, that they'll hire bums to mess up a rival's events. The homeless are just 1/1 counters to them and San Francisco is a bottomless bucket.",2018,Why “Agile” and especially Scrum are terrible
bee-sting,7,"This article is kind of difficult to read, it jumps around a lot and makes a lot of assumptions. 

It's also from 2016",2018,Why “Agile” and especially Scrum are terrible
XelNika,9,"[This embedded Medium article in the comments](https://i.imgur.com/H7eu5u0.png) loads a 3.3 MB, 22 megapixel image as its background. WTF were they thinking?",2018,Why “Agile” and especially Scrum are terrible
PM_ME_OS_DESIGN,13,"> WTF were they thinking?


""I am a designer, what is bandwidth""

This is what mipmapping was made for.",2018,Why “Agile” and especially Scrum are terrible
michaelochurch,1,"I plan on moving away from Wordpress, for a number of reasons. (I also don't like that they now run ads in my blog. It pisses me off.) But it hasn't been a high priority and, to be honest, I'm not really that interested in tech blogging; that phase of my life is pretty much over.",2018,Why “Agile” and especially Scrum are terrible
XelNika,2,"It wasn't a criticism of your site at all, it's probably an issue with how either WordPress or Medium handles embedded content. I assume you're just using a template made by someone else.",2018,Why “Agile” and especially Scrum are terrible
Philluminati,16,This article is random nonsense that I cannot simply finish. Too much it orients around technical debt being bad and how senior developers should be given whole systems to write in secret instead of single tickets to work on in an open environment where criticism is seen as unjust rather than necessary for improving code quality. It touches on too many subjects and seems to be around career progression which has nothing to do with Agile and the guys bad company. I couldn’t finish this.,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,"I just finished an Agile Project. There are some good things in it . My job was in a SAP implementation project. Business is also expected to provide inputs and be a part of the development. I do agree that constant status updates and 2 week sprints makes it difficult to focus on long term project plans. 

Also low hanging fruit is given preference over hard user stories.",2018,Why “Agile” and especially Scrum are terrible
bitwize,3,"The purpose of any software development methodology is not to help you do your job better. Doing your job better is _your_ responsibility. The methodology is there to allow management to:

* set goals for the team

* track progress toward those goals' completion

These objectives are _requirements_ for any software development methodology likely to be adopted by the corporate world. Programmers who object to Scrum often don't realize that there's a business that needs to know how long and how much money it's going to take to get from point A to point B, and to make resource allocation decisions accordingly. A well-designed Scrum implementation provides information on who's responsible for what, how much time it's estimated for them to take, and how much progress they've actually made, so that all they need to do in order to project a putative release date and allocate the budget is look at the dashboard.

Now shut up and get back to work. And don't forget to fill in estimates on your JIRA tickets and break them down into subtasks. There should be nothing in your backlog that takes longer than a day to complete -- two days is allowable in rare, extreme cases.",2018,Why “Agile” and especially Scrum are terrible
wouldy,3,"You make a critically false assumption: the result of a Sprint is low value or inferior. 

That's far from truth. A team of 5-7 people working towards clearly defined results without any distractions is an effective way to get work done. 

A Sprint forces you to get realistic about what's important. There are 100 things that need to get done. Which 5 can we do really well in the next Sprint that would move the project forward? 

Done well you get working software at the end of the Sprint that you can use to get valuable feedback from real users. ",2018,Why “Agile” and especially Scrum are terrible
cybernd,1,"> A Sprint forces you to get realistic about what's important.

Thats a flawed assumption.

The idea falls apart, when the project requires stuff to be done that does not partially² fit into a sprint. 

It's like in the real world: why are many cities failing to invest in infrastructure? Because they are only focusing on the current 4 year budget cycle. 

In case of scrum, it's worse. They are far shorter cycles and there are tons of stuff that needs to be done with a long term focus.

There is a reason, why tons of project are moving towards a point where complete rewrites are required. They all have the same issue: the slow, creeping accumulation of all sorts of ""problems"" was simply not visible (aka measurable) within a cycles timeframe.

---

² partially aka something with a defined end within the sprint (acceptance criteria).

I honestly believe that ""time boxing"" is also not a reasonable solution. 

""I get told to 'timebox' things. I've yet to figure out the difference between that and leaving it unfinished."" [source](https://old.reddit.com/r/sysadmin/comments/9u22vi/3_days_to_setup_srx300_cluster_why_is_it/e91m55g/)",2018,Why “Agile” and especially Scrum are terrible
ntropia64,3,"I'm a scientific programmer (among the several hats I wear), and I lost count of times in which I argued with a colleague, another scientific programmer with more experience than me, about implementing Agile development in our laboratories.

I strongly believe that none of the conditions that make Agile the best practice are satisfied in our work, in which the specifics are very well-defined. Elaborating on that: I have a very clear idea of the specs my program need to fit, and I have a tiered list of features, from mandatory ones to ""it would be great to have, but maybe in version *n*+1”.

One of the reasons why I can back this statement up is because we're working rewriting from scratch our program so we have a metric ton of errors from which to learn upon, and the input/output requirements are extremely well-defined. We (me, mostly) spent the last 7 years keeping track of all the things the old program did wrong and the new things it should do.

Now, the colleague is more experienced than me, so he should be right about Agile being better, right?

On the contrary, I strongly believe that since we know *exactly* (+/- 3 features) what we want from the program, we should stick with the analysis done and build on the solid ground of our specs, which are extremely unlikely to chance.

I know this might be far from professional programming environments, but I think it counts as a case in which the conventional, old-school paradigm works just fine. On the other hand, I know my limits, so I'm totally open to change my mind about it.

I would be happy to hear arguments in either direction from people with more programming years under their belt.
",2018,Why “Agile” and especially Scrum are terrible
Racoonie,2,"Agile is not about being flexible what you build, but how you build it. You can absolutely start with a pretty detailed list of what you want, but you keep your options open to change the order in which to build them. Also you slice stuff into small, sensible chunks, work on them and assess if you succeeded regularly, instead of just working away and finding yourself in a mess half a year down the road. And maybe along the road you realize that things that were initially deemed necessary are obsolote while new things are suddenly important, and you will be able to react to these changes.",2018,Why “Agile” and especially Scrum are terrible
ntropia64,2,"I really love this response, that's the way Agile should be interpreted for me.
Keeping in mind the modularity of every main task is key for this project, so I'm isolating the code interface from the actual operations because I want to make sure we don't depend too much on some of the external libraries we are building upon, and I believe this is an interpretation (a bit stretched, I admit) of the Agile principles.
Thanks a bunch",2018,Why “Agile” and especially Scrum are terrible
Njall,3,"30 years ago I worked at a semiconductor manufacturer in a group with 6 to 10 programmers.  We were tasked with making the centralized computers and their programs work with and for the manufacturing line.  We were, I believe, wildly successful. Productivity went up, a lot; errors went down, a lot; and engineering was able to create tighter and tighter specification and schedules.

How did we do it?  We did, home grown, something much like Agile.  We talked with our customers, i.e. pretty much every one in manufacturing.  We actively listened to what they wanted.  We asked lots of questions.  We suggested changes as needed or deemed helpful.  We wrote project notes with narratives and specifications.  We did our best to figure out how much work was needed so we could provide a semblance of a schedule, which, as any programmer knows is an effort much like chasing a greased pig.  We continually provided customers with updates. We sought feedback as the resulting program(s) grew.  We never looked down upon the users of our products.  They were collaborators not annoying nuisances.   They weren't stupid.  They knew their jobs and we knew ours.  


While first and second level managers knew how we worked, they did not demand we conform to some sort of system.  Obviously they got involved when, as happens any time groups of humans come together, things went awry, schedule slipped, somebody thought they were God's gift to mankind, somebody's feelings got bruised.  Otherwise, they wisely let us do what we did because they were generally delighted with the results.    


This same sort of thing happened in a lot of companies.  Across industries we shared stories.  Joked about mishaps.  Crowed about successes.  Unfortunately some asshole decided this behavior deserved codification.  And Agile was born.  Management loved it because, from the outside, it seemed like heaven.  Here was a way to manage programmers, increase their productivity, decrease friction, increase consensus, decrease costs.  Win - win.  Right?

  

Wrong.  Sadly I have learned that people with MBAs, a.k.a. people destined to become mid-level corporate drones, all too often have little or no real experience working with real people in real situations.   And they made a valid, helpful, useful idea a living hell for those who have to try to actually get things to work.   

&#x200B;

Agile does not get things done.  People get things done.  If a person tells you something that contradicts Agile listen to them.  Especially listen to them if they are doing the best they can with limited resources.  Agile as an idea is great.  As a system, it is a source of group and corporate constipation.  It contains too much fiber and damned little nutrition.  If you are upset with someone who failed at some *Agile* function, you're expectations are the problem, not the failure or the person.",2018,Why “Agile” and especially Scrum are terrible
mc_hambone,3,"There are so many things wrong with this article.

> This means that the work gets atomized into “user stories” and “iterations” that often strip a sense of accomplishment from the work, as well as any hope of setting a long-term vision for where things are going.

No, the whole point of ""atomizing"" into smaller stories is the **exact opposite** of this. A story is supposed to be defined as a capability that provides value from the user perspective, and once done, should be able to be demonstrated as a working piece of functionality. Whereas in a ""Waterfall""-like system, one may have to wait until nearly the entire system is implemented before you can demonstrate this functionality, and therefore this ""sense of accomplishment"" would be put off possibly for months, whereas in the Scrum world this should be able to be completed within 2 weeks (or whatever the sprint length is). Working code after each Sprint is *required*, so that a) the team can show off their work more frequently to the customer, and b) the customer can be assured that the team is on the right track and can provide valuable feedback about the direction of the product so that the team doesn't waste time and effort doing something that eventually will disappoint the customer (and make the developers feel sad/out of the job). Also, in Scrum, there are ""Epics"" which actually do allow the team to make longer-range plans, and these should be conceived and managed by the team members themselves, so they actually do have the ability to help set a long-term vision.

> Scrum seems to be tailored toward the body shops, where client relationships are so mismanaged that the engineers have to be watched on a daily basis.

No, once again, the point of Scrum was to move away from this type of micromanagement (which was extremely prevalent in Waterfall - Gantt chart hell!), where tasks need to be defined well in advance and at a very granular level in order to achieve any kind of success. Scrum **explicitly specifies** that the developers themselves should be in charge of estimating, planning, and executing the development of a product, **not** managers, consultants, etc., and that there *should not* be emphasis on defining highly granular tasks that are monitored by managers. Expectations should be clearly laid out that management should not treat Scrum as a way to actively manage developer tasks - it is team-defined according to what the team members think they can do in a reasonable amount of time.

> Open-plan offices are the most egregious example. They aren’t productive. It’s hard to concentrate in them. They’re anti-intellectual, insofar as people become afraid to be caught reading books (or just thinking) on the job

This is completely unrelated to Agile/Scrum...

> Agile, as often implemented, increases the feedback frequency while giving engineers no real power. 

This, again, is the exact opposite of the definition of Agile/Scrum where the power is **explicitly defined** to be in the hands of the teams doing the actual work, not consultants or managers.

Just because it's ""often implemented"" badly doesn't mean the methodology itself is bad. If I define proven methods for the best way to build a bridge, and a construction company ignores all of them to build a bridge which fails, would you blame the methodology for the shoddy work or the company itself for ignoring the guidelines and recommendations? 

> Good engineers want to work in engineer-driven firms where they will be calling shots regarding what gets worked on, without having to justify themselves to “scrum masters” and “product owners” and layers of non-technical management.

Nothing in the definition of scrum master nor product owner include the team having to justify their work. The work is conceived, planned and executed by the team itself to provide functionality that the ""product owner"" (representing the actual customer) wants. A scrum master is explicitly defined as someone who doesn't ""call the shots"", but merely is there to help the team achieve the goal of developing the product for the customer/product owner. The product owner does get to define what they want, since that is what the team is getting paid for, but should not be specifying exactly how it gets accomplished. Done right, the engineers get to make *all* of the technical decisions, since that's what they get paid to do. Agile/Scrum in no way specifies that scrum masters, product owners, or anyone else besides the team should tell the team exactly how to accomplish the work (other than working around system/environmental constraints such as if they need to use a pre-existing corporate database for user data, etc.).

> Ultimately, Agile (as practiced) and Waterfall both are forms of business-driven engineering

""as practiced"" is the key phrase to understanding that this article **does not prove or even make a cohesive argument** that ""Agile/Scrum is terrible"" as a methodology. It only proves that **your** company (perhaps one of many) is not actually practicing Agile/Scrum properly, and it is not in the Agile spirit, and definitely not doing it correctly in terms of proper Scrum (where the power is to be shifted to the developers/engineers themselves, defining the work to be done - not system architects and managers).

",2018,Why “Agile” and especially Scrum are terrible
sexytime_dot_gif,3,https://robbomb.wordpress.com/2017/01/12/our-shitty-restaurant-my-experience-with-agile-bureaucracy-and-unnecessary-complication/,2018,Why “Agile” and especially Scrum are terrible
AnythingButSue,3,"How does this have so many upvotes? I'd really hate to work with the author, or at the company he's talking about. None of the issues he raised can be blamed on scrum or agile. This individual is very bitter, and not at all focused on the legitimate cause of his issues. ",2018,Why “Agile” and especially Scrum are terrible
AstroGirlBunny,3,"I've been professionally coding for years. I'm reading the comments and you guys are making me cringe. I do not stick to old ideas like others. I'm actually very flexible. But open offices have nothing to do with project methodology. And studies have already proven over and over again that open plans are bad for associates overall. Corporations do it for financial reasons or because they drank the old kool-aid. And there is not pure waterfall, agile, or scrum. There is no one absolute perfect way to do any of those methodologies. The real experts in those fields will tell you that themselves. It is even in their books! Ok. Getting off my podium. You all have fun and continue on a conversation that has digressed to absurdity.",2018,Why “Agile” and especially Scrum are terrible
mummeyJ,3,I do not have the words to adequately describe the dark abyss of nothingness our daily scrum meetings endlessly slodge about.  I realize this one sentence gripe helps no one but it has somehow helped me.,2018,Why “Agile” and especially Scrum are terrible
thephotoman,7,"There are a lot of lies about agile:

* SCRUM is agile. No, it isn’t. At best, it’s agile with training wheels. 
* You can hire consultancies to assist with an agile transformation. No, you can’t. Agile is a bottom-up style of management. Attempting to enforce it from the top cannot work and will result in something that isn’t agile. 
* The ceremonies are important. No, they aren’t, aside from the daily stand up. And that should be 15 minutes. If it goes longer, you’re doing it wrong or your team is too big. 
* SAFe is a thing. Agile invites risk. Something calling itself “SAFe” is almost certainly not agile. 
* There are agile processes. No, agile is about using the least process necessary for your team. 

Basically, no middle manager will ever be comfortable with agile. It cuts them out of the picture. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,"Regarding consultancy: do you know how many of the people that wrote the agile manifesto have companies you can hire to help you implement agile?  So, they're selling something they know can't be done?  But they're agile gurus!",2018,Why “Agile” and especially Scrum are terrible
quetool,5,"I personally think that ""Agile"" is Slavery 4.0",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,7,"Every time the topic comes up, all the agile defenders make the same claim: if you are failing at Agile, you are doing it wrong.

Every. Single. Time.

It's a running joke, really.
",2018,Why “Agile” and especially Scrum are terrible
fuckin_ziggurats,1,That's because devs like to shit on things and other devs like to upvote such articles in ignorant agreement. So nobody posts about the cases when Agile works great even though there are more such cases than not.,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,11,"It's almost 2019; I can't believe Agile and Scrum are still such a thing. Sure, some projects are perfectly suited for them and sometimes it can work. But as a software dev who recently went looking for another job and thus had various interviews, I'm surprised by the sheer amount of companies that explicitly emphasize Agile/Scrum and dogmatically use it for every single one of their projects, 'just because', acting like it's the greatest thing ever. I've actually left companies before because I got fed up with those mandatory daily standups, weekly sprints and outrageous amounts of project management that all kept me from doing what I like and what I'm good at: development.

Unfortunatly, nowadays it's everywhere. It's just a matter of finding a company that also sees working with Agile/Scrum as one of many means to manage a project, rather than a goal.",2018,Why “Agile” and especially Scrum are terrible
GhostBond,2,"> Unfortunatly, nowadays it's everywhere. It's just a matter of finding a company that also sees working with Agile/Scrum as one of many means to manage a project, rather than a goal.  

To be fair:  
- A lot of times hr and recruiters are just repeating whatever the last series of buzzwords. Day to day practices have changed but they aren't up to date.  
- I've seen a lot of people use agile buzzwords on top how they were running thungs before. It's hard to tell before you get there what they're actually doing.

",2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,6,"Agile is the best we have. Whatever coding you do, you're following \*someone's\* plan. For any project size above trivial, that project needs some form of agility, and I'm afraid you need to be a part of that.

&#x200B;",2018,Why “Agile” and especially Scrum are terrible
cybernd,1,"> It's almost 2019; I can't believe Agile and Scrum are still such a thing.

It's 2018 and i still can't belive that i regulary fail to convince a product owner, that the team should/will not commit to finish work at the end of the sprint.

Old school scrum tried to define it like ""the team commits, that it works on tasks within the sprint - but it will not garantee that it gets the sprint content finished"". Newer scrum changed the term to ""forecast"" for the very same reason. And yet i am still facing the issue, that business side people are convinced, that we are capable of giving sprint commitments.

It is the last thing that keeps us from moving towards a flow based kanban style. And i think there is a pretty dim chance to convince the po, that its not reasonable to demand this type of commitment.

I fully understand, why business wants this types of deadlines/promise. But on the other side i am not understanding it. Because whenever i want work to be done from a contractor, i will simply not attempt to force him to promise unrealistic deadlines. I am well aware that nothing good will come out of it.

Now that i think about it, i think i need to hang up the good old ""We ask for estimates, and treat them as deadlines"" meme. Because in the end, this is one of the flawed base assumption behind demanding hard sprint deadlines (aka commitment).

>  I got fed up with those mandatory daily standups

It is always only a workaround for bad team communication. It's the sole reason why nobody attempts to fix the visibility issue of their teams wip. Because they have this holy standup meeting, where everyone is micro-reporting without even realizing it.",2018,Why “Agile” and especially Scrum are terrible
Mr_Cochese,9,"Nearly gave up at the complete misunderstanding of what the Waterfall process is. Of course, what the article is describing as ""SCRUM""  is not really SCRUM but the pretend-Agile process followed at programmer battery farms, which is demonstrably evil.",2018,Why “Agile” and especially Scrum are terrible
m1rrari,3,"My perspective maybe skewed as I am new to my agile team (3 months) BUT we work on a two week cycle, using pair programming in an open space, and I have never felt pressure or nervous. We are a dev team inside an auto manufacturer. 

Our PM works hard to set new feature and functionality deadlines way out, so the only stories that ever have deadlines are the ones imposed onto us by other dev teams. The business and PM rail against them when they do that too us to frequently, which is nice. The teamspace feels safe, the business and dev team sit together giving us easy access to them and vice versa.. I’m still developing my teamspace listening skills so I still get distracted by what other teams are working on but my partner helps keep me on task. The weekly retro is attended by business and devs, so we get to know what’s going right and wrong in both camps with open and honest communication. I love pairing as much as I thought I would. Which is a lot. 

This is all anecdotal and my experience thus far, so take it in that context. My previous shop was a waterfall shop attempting to implement agile processes and tools. I like my new place MUCH better",2018,Why “Agile” and especially Scrum are terrible
quakank,2,"Yea the key is really how it's implemented and the people you work with and for - as it is in most places to be honest. For example, my last agile team was a shitshow that made me miserable and led to me seeking out professional help for mental health.

So, y'know... It varies wildly.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,5,[deleted],2018,Why “Agile” and especially Scrum are terrible
TheWhyOfFry,1,"Funnily enough, that’s exactly the problem he had at Google... ",2018,Why “Agile” and especially Scrum are terrible
michaelochurch,1,"Clever, but not remotely true. Also, while I recognize that some people believe an ellipsis can be used as a punctuation wild-card, I don't think you gain anything stylistically by using it over a full stop.",2018,Why “Agile” and especially Scrum are terrible
Hyronious,3,I don't know anything about you but when the majority of your response to a snarky comment about your ranting is a nit picking attack on punctuation of all things...you aren't coming across well.,2018,Why “Agile” and especially Scrum are terrible
michaelochurch,-2,Fighting shitposts with shitposts since 1996. ,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,[deleted],2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"Speaking of outrageous (I haven't read it yet, but...): https://michaelochurch.wordpress.com/2018/05/20/incel-the-strange-identity-that-became-a-weapon-against-feminism/",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,8,"TL;DR Under standard smile-up-shit-down management Scrum is hell. But I'm guessing that's got more to do with the shit than the Scrum.

This is describing Scrum/Agile under plain old yelling-at-things-makes-them-go-faster style management. I'm in that right now and holy fuck I hate it with every fibre of my being. It's just so friggin' prevalent! *sigh* I just can't seem to get away from shitty middle managers. Anyway.

The author says they have been working for 10 years IIRC so that's like 2-3 multi-year positions in their career max. It's just not enough data to be making these kind of statements.

If he'd said it was bad _often_ I could see that, but I hardly see how Agile would've made a difference cause I'm guessing shitty middle managers has always been an issue regardless of process.

I've seen it both ways. Under a certified Scrum master (I actually giggled when I found out and feel terrible because he was a great boss) Scrum was amazing and worked incredibly well. Also what helped is we had a PO who had like 15 yrs experience as a BA - not a fucking graphic designer that decided they liked the look of the letters U and X on their resume...",2018,Why “Agile” and especially Scrum are terrible
johnnysaucepn,4,"Yeah, the problems come when people think 'sprint' means 'fast' and 'agile' means 'change things at a moment's notice'.",2018,Why “Agile” and especially Scrum are terrible
wenttothestorefor,2,I don’t completely disagree with the author but all they do is point out flaws in these systems. No positives. No suggestions on how to improve. So what’s the point?,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,I recently made a satirical website to vent my frustrations about agile. https://pickingaprojectmanagementmethodology.com,2018,Why “Agile” and especially Scrum are terrible
SideByEach,2,"When Agile was first introduced at our company, more than eight years ago, I wasn't worried about development adopting the process. I was worried about management adopting the process. I was right, sadly. Everytime the going gets tough management tries to abandon the process in favor of good old waterfall. Instead of spending the time grooming and sizing stories the latest ""trend"" is t-shirt sizing stories. Attaching a certain amount of days of effort to those sizes. These stories are often raw, unprocessed stories that haven't been properly broken down.
Keep in mind my company is not a small start but instead has 80,000 employees including thousands and thousands of developers. Our corporate Agile leader likes to paint developers as greedy people stealing valuable time and resources from clients, to waste on things like unit tests, polishing and automation. Yeah...",2018,Why “Agile” and especially Scrum are terrible
Racoonie,1,Get a CTO with a spine.,2018,Why “Agile” and especially Scrum are terrible
SideByEach,3,who do you think hired the fascist-gile Scrum mentor?,2018,Why “Agile” and especially Scrum are terrible
Racoonie,1,Get away asap. (Sorry.),2018,Why “Agile” and especially Scrum are terrible
errrrgh,2,"This person doesn't understand waterfall or open-plan workspaces. Not that I'm advocating for either but at least make your strawmen and bad generalizations have some real truth to them.

The whole thing is a garbled mess.

",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,"I have to agree with the main thrust of this. Spent 7 months of last year working with a strictly agile company and hated it.  All of the creativity was gone and it was just used to hammer people.  If it were to take over completely I'll be gone from the industry.   I do feel it was more fun when I first got involved 30 years ago.

&#x200B;

I'm in an environment now which uses many of the tools of agile but applies common sense to them and still affords people the opportunity to work on more substantial pieces of work and own their projects.  It's much more enjoyable and productive.",2018,Why “Agile” and especially Scrum are terrible
TheGentlemanOtter,2,"I agree that Agile, as done in every company I’ve worked at (usually some bastardised version of SCRUM), is not great, but this article is about 55 paragraphs shitting on Agile and Waterfall, 1 paragraph mentioning a once-in-a-blue-moon scenario that Agile would be suited for and the last paragraph, titled “Looking Forward” giving no suitable replacement.

If you don’t want people to do Agile then offer an alternative.",2018,Why “Agile” and especially Scrum are terrible
TheGaussianMan,2,I work in manufacturing/r+d engineering. The new leader is trying to introduce scrum to meet a quick paced customer base. I think at its basic core it can work. It depends on the company culture. The company I work for is heavy engineering based and decisions are made as a team rather than by one specific person. I guess we'll see how it works though. ,2018,Why “Agile” and especially Scrum are terrible
JaiX1234,2,"In short, people are the problem and have always been. Sometimes you get a bunch of engineers who work well together and sometimes you don't.

I like agile/scrum but in my experience it never works the way it's intended to because you have to deal with human beings..Do I think it makes sense? sure, the same with waterfall.

But all of this brews the ideal of elitism. Of course we all want perfection and the job done right, right the first time... We want to be able to own our work and feel good about it. What people don't realize is we all aren't equal, yet expected to play together in the same playground. This means that engineers need to know how to work together, competently and professionally. This means mistakes.

People have strengths and weaknesses, agile preaches and encourages the usage of these strengths. If agile/scrum is failing it's a people problem not the process. Get the people on the same page (laughable) but people being on the same page doesn't mean they're on the same skills levels. The amount of work a (9) puts in should not be compared to what a (5) puts in.

The industry as a whole or even schooling can take the hit here. It gets what it breeds.",2018,Why “Agile” and especially Scrum are terrible
saulmessedupman,2,"> Scrum is sold as a process for “removing impediments”, which is a nice way of saying “spotting slackers”. 

Not at all what impediments are. It's more like ""hey, I can't work with this until I get a license for xyz"".",2018,Why “Agile” and especially Scrum are terrible
vrift,2,"The big problem is usually that those that order software usually have no clue what they want. They might know their basic processes, but usually lack the background knowledge to assess what's possible and what's not. On the other hand engineers often lack the knowledge associated to the ""field"" of the company who orders the software.

That makes specification documents usually pretty much useless, because there is always something left out. So you iterate over these documents again and again, unable to really start programming, because otherwise you might program code that is useless after the next revision.

Agile doesn't need any specification documents, except of course a hand full of diagrams, but let's be honest here there is no real convention and it's likely that the customer understand half of them best case. You basically only need user stories due to constant contacts with both the development team and customers you are able to work much more efficient than with any regular model.",2018,Why “Agile” and especially Scrum are terrible
iggy14750,2,"> This means that the work gets atomized into “user stories” and “iterations” that often strip a sense of accomplishment from the work, as well as any hope of setting a long-term vision for where things are going.

What? I would consider this an argument *for* agile. In a waterfall, you're very siloed into Design or Implementation or Testing without an understanding of how everything fits together. I think seeing the product working as it grows will give you a sense of where it's going.

Also, delivering a feature from spec to shipped in a few weeks actually sounds way more satisfying than waiting years for someone else to finally finish up.",2018,Why “Agile” and especially Scrum are terrible
MadRussian387,2,"The problems often lies with the corporate culture, not the agile framework.  ",2018,Why “Agile” and especially Scrum are terrible
mazzagazza,2,"He paints developers at restarts at the beginning with this “Programmers tend not to be great at managing clients. We’re very literal people. We like systems that have precisely defined behaviors. This makes working with non-technical people harder for us than it needs to be, because we tend to take every request literally rather than trying to figure out what they actually want. “. He lost me there. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,Steve Jobs on process vs content https://youtu.be/lx2K_k4mJSc,2018,Why “Agile” and especially Scrum are terrible
MogwaiK,2,"The real 'straw man' here is comparing 'SCRUM' or 'AGILE' to what sounds like a toxic work environment.  
  
You can apply AGILE principles in a broad range of ways from very lightweight to very stringent. As a PM on a development team that employs many AGILE concepts, I fuckin' love it. The devs do, too. 
",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,Agile isn’t perfect and neither is waterfall. Do what works best for your teams productivity - usually its some mixture of both. ,2018,Why “Agile” and especially Scrum are terrible
goomyman,2,"i stopped reading this halfway though.

Open office spaces,  Agile,  Scrum,  whatever you want to call it is just a move to the match the current and future growth of programming.

Programming for the most part has moved beyond programmers who shut themselves in offices and churn out code - a black box - work goes in - code comes out.

Modern programming is an extremely complex web of interlocking dependent micro-services and no one programmer is important - its the teams that are important,  its service oriented.   Its based on shared trust.   No one person or even one team understands how it all fits together.

Hence,  modern programming is about communication and programming work planning and space planning is based around communication.   Hence daily meetings ( increase communication ),  tighter deadlines - internal teams rely on you and days / hours are often blockers,  and of course the hated open office spaces ( I hate them too ) are designed around communication.  I understand the intent.  Its a team effort that drive features - hence team spaces.

Programming is a team effort and I have even seen this reflected in hiring where previous Rockstar programmers end up being less desirable if they cant communicate as a group.    Often they quit and find a job working from home consulting.

Everytime i hear these agile sucks,  scrum sucks,  open offices suck it seems to be a variation of the grass was greener 10 years ago.   Programming has moved on to a place where half if not more of your job is communication related - and it will only go further in this direction.

Programming changes ... always be learning,  always be open to change,  where 1 year in tech can feel like 10+ years in other industries when it comes to change.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"I can tell you that I wouldn't be nearly as efficient and productive if I had to go sit in an office.  I have yet to meet a developer who didn't feel the same way.  I've met plenty of managers who feel the opposite, though.",2018,Why “Agile” and especially Scrum are terrible
goomyman,0,"That’s a given though.   Productivity < communication. 

Depends on the size of the company and the scope of the projects. ",2018,Why “Agile” and especially Scrum are terrible
cavinkwon,2,"Become a ScrumMaster with 3 days of investment. You do not know architecture, design, or even programming, you can become a holy scrum master. There are three things to do. First, the Daily Scrum meeting. Second, it conveys the anxieties of people with problems to those who have a solution. Third, Spend half a day in meetings 3-4 times a day. 

In this way, the ScrumMaster brings the project to success. There is one such scrum master in a team of 8 people. Wow!",2018,Why “Agile” and especially Scrum are terrible
flash357,2,If u think that this is all a scrum master does then u have no idea what a scrum master is,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,So so soooo accurate. Agile in bursts seems ok but endless agile is maddening for building a decent product.,2018,Why “Agile” and especially Scrum are terrible
edtheshed,2,"""The worst thing about estimates is that they push a company in the direction of doing work that’s estimable.""

I assume he meant estimateable... which isn't a word... lol",2018,Why “Agile” and especially Scrum are terrible
crashorbit,2,http://lafable.com/,2018,Why “Agile” and especially Scrum are terrible
nanno3000,2,"I feel like the author did not understand many of the concepts he talks about. ""Waterfall is a work rolls downhill model""? Its a separation of tasks to have every expert deal with what he can do best. The tasks are not separated by hierarchy.  And neither are they separated in Agile development. In fact, a junior dev who has little experience could take up a small task beside his other tasks to learn and practice other fields of expertise without having to completely change his role (and still have the same workload).

Almost all issues stated in the article seem to stem from terrible work culture, where good concepts and ideas get butchered because they are used wrong or poorly. If you use a screwdriver to hammer nails, its gonna suck!  

Open-Plan Offices have specific use cases and in those they are highly effective. Aside from that, if you create a culture where people are forced to ""look productive"" just because people can see them, then is that an issue of the open plan office concept itself or are you just doing it half-assed?

All in all a very negative article, a classic rant. What do we learn from it though? What should i do instead? What can i do to improve this horrid situation the author shows?",2018,Why “Agile” and especially Scrum are terrible
dwidel,2,"My problem is we have Waterfall customers and everyone wants to do Agile.   Our customer wants 4 releases a year,  they want to know exactly what will be in the release,  they want the estimate up front.  Then we try to make it agile on our side.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,10,"Ahh this shit again.  


There is nothing wrong with Agile.  


SCRUM/Kanban are not Agile, they are management and workflow implementation guidelines. Being Agile, has nothing to do with what you are doing, its an ethos for how you approach work in a team, deal with failure, and iterate on your processes to maximize your productivity, if waterfall is how you work best, then do waterfall and have longer sprints.",2018,Why “Agile” and especially Scrum are terrible
bitwize,3,"Of course Scrum is Agile. The Agile Manifesto was put together by consultants representing several methodologies (including XP and Scrum) who found ut they they have something in common (that thing being that they're not waterfall) and decided to pool their efforts to create a ""movement"" so they could all individually benefit from being vanguards of the next wave in software engineering discipline.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"Great so if you read the manifesto you'll be familiar with the 4 core values of it, on of them being to favour people over processes. 

If your processes are difficult and not working, it's up to individual team members to raise their concerns to which the team can respond by addressing them, if you aren't doing this then but instead are just following some prepackaged scrum, kanban or xp rules that came with your jira software bundle, you are obviously going to have a terrible time which is what so much of the industry is doing.

Agile is inherently flexible and teams that don't understand this won't benefit from what Agile can offer.

It's literally a platform for teams to dictate how they work best together and find a process that allows them to respond to changing environments and requirements, as well as safe guard themselves from process overloading.",2018,Why “Agile” and especially Scrum are terrible
bitwize,3,"> 
> 
> If your processes are difficult and not working, it's up to individual team members to raise their concerns to which the team can respond by addressing them,

In practice this is a great way to get fired.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"Well despite your cynicism, not every company in the world has regressive attitudes, nor does it take away from the fact that Agile works when implemented properly.",2018,Why “Agile” and especially Scrum are terrible
bitwize,3,"> Agile works when implemented properly.

So, allegedly, does communism. Properly implemented Agile lives in the same fantasy realm as properly implemented communism and sufficiently smart compilers.

Hint: The places with sane development methodologies never talk about how Agile they are or even mention the word Agile -- because Agile is a buzzword coined by software consultancy heads in order to make their processes _seem_ sane. In practice, any time you hear ""we're Agile"", the place is a Scrum shop. And [as I mentioned upthread](https://www.reddit.com/r/programming/comments/9wcku8/why_agile_and_especially_scrum_are_terrible/e9k2jzw/?context=0), Scrum -- or any corporate software development methodology, really -- is designed to address business concerns, not developer concerns. The capabilities of tracking and metrics are _hard requirements_ for such a methodology; anything else can and will be compromised as the business requires. Complaints that the methodology does not address your needs do present a problem to the business -- but it's a problem that's easily solved with a pink slip.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"I've worked in several companies that were all agile, were fantastic environments to work in and the teams functioned incredibly well, of the top 5 none of them ran scrum, I'm not sure why you believe that agile and scrum can't be mutually exclusive, there are companies that run scrum that aren't agile.  


Everything is a term coined by the industry, there isn't some greater conspiracy out there to marginalise developers needs over corporate interest, you have a very jaded view of what development is like and should look to greener pastures if how you are being mistreated. I can't comment on your own journey, but there are enough people in this thread actively promoting agile and the fact it works that you should at least give pause or a second thought about what you are saying.  


The understanding that there is no perfect system because information changes and is imperfect is part of the journey to adopting agile, requirements, relationships, management and teams all change and accepting that you will never have a perfect system is part of the journey to building a better one. You start with what you think will work, carry on with your work and process, after a fixed amount of time you review that process, what worked what didn't? Iterate on what worked, drop where possible what didn't. Too many meetings? Have fewer more organised meetings, too many interruptions, the teams gets together to discuss how to mitigate and avoid them.  


Open communication is vital, if you aren't able to communicate your issues in your work environment then move or start doing so. Your company isn't agile and there are far more immediate concerns such as poor work life and mental health looming around the corner in such toxic environments.  


If you want to draw straw-men and chase logical fallacies between points to promote your ideas go ahead, I'm just trying to tell you that it works, I've seen it work and there are many people in this thread that agree with me, if that is not enough for you to at least consider the possibility that it's a foundation to building a working process then let's not waste anymore of each others time here.",2018,Why “Agile” and especially Scrum are terrible
bitwize,2,"> The understanding that there is no perfect system because information changes and is imperfect is part of the journey to adopting agile, requirements, relationships, management and teams all change and accepting that you will never have a perfect system is part of the journey to building a better one. You start with what you think will work, carry on with your work and process, after a fixed amount of time you review that process, what worked what didn't? Iterate on what worked, drop where possible what didn't. Too many meetings? Have fewer more organised meetings, too many interruptions, the teams gets together to discuss how to mitigate and avoid them.

I think we're in agreement on this bit. Any shop I worked at  that anywhere near approached sanity worked on these principles. But they almost never called themselves Agile, because while the proponents of Agile would *like* to associate themselves with this kind of approach, in practice they were hoping to make silk purses out of sow's ears by applying the right sort of process.

As for the four principles of the Agile Manifesto... I used to be the guy who cited those. These days I can't help but think of John Bonifield, the producer for CNN who said ""All those nice cutesy little ethics they talk about in journalism school... That's adorable. This is a business."" That's where I'm at with the Four Principles. That's adorable, but this is a business. People and interactions over processes and tools? Please. Shut the fuck up and log your hours in JIRA. The burndown chart needs to look good, not for your boss, but your boss's boss. The end of the FY is coming and those velocity numbers will be used to determine how much to budget and whether to hire (and possibly also whom to fire). Too many meetings? Oh, poor baby. There's only daily standup, and every sprint we have backlog grooming, planning, and retro meetings. It comes to 8-10 hours a week, that's perfectly reasonable. Every Agile consultant says so. Are you, Joe Developer, really questioning industry best practice, as adopted by Fortune 500 companies? And if so, are you willing to assume the risk to the business when the project goes tits up under your improved process? Tell you what, hold that thought. Let's take this offline and parking lot it for now, and I'll call a huddle for later in the week. We'll run the ""too many meetings"" idea up the flagpole and see who salutes then.

So now for me, Agile has lost all meaning. Because in my experience, the businesses that talk the talk have no intention of walking the walk. And when I'm on the job hunt and people ask ""what's your experience with Agule?"" they're really asking ""have you ever worked in a Scrum shop?"" What you describe as agile is likely going to be practiced in small shops with technically oriented leadership -- and is unlikely to be called ""agile"" at any rate.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,5,"I think this post is more about ""SCRUM BUT"" than Scrum. More importantly though- If one writes ""it is well known"" without any source to back the claim, I automatically assume they are writing out of their ass.",2018,Why “Agile” and especially Scrum are terrible
Dw0,6,"""Why knives and especially sharp ones are terrible"". 
When will we learn not to blame the tool but people using it?",2018,Why “Agile” and especially Scrum are terrible
jdauriemma,2,"People get stabbed by knives, checkmate",2018,Why “Agile” and especially Scrum are terrible
GhostBond,-1,"""Agile will solve all your problems""  
""Agile didn't solve our problems it made them worse""  
""I'm so upset you're blaming agile!""",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,4,"Agile and/or Scrum has become a cult in many organizations. Everyone is trying to be the most ""pure"" agile. Every programming group accused the others of doing it wrong.

Some things in Agile and Scrum make sense for some projects. Others don't. 

Daily meetings to discuss status and problems are generally good. Short sprints with limited release ready features - this is usually good.

Tracking progress between what's achieved and what's desired and on what schedule is useful if management can be made to adjust to reality.

The rest? Dubious. The de-emphasis of good documentation is actively destructive and just builds technical debt. Whenever I see what passes for comments and docs in Agile projects, all I see is a bunch of kids who don't feel like doing their homework.

Customer collaboration? It takes two to tango. Good luck with that. Contracts happen for a reason.

Individuals and interactions over processes and tools? Processes happened for a reason too. ""Individuals"" tend to act like prima donnas. When *everyone* has to follow a process, like writing complete step-by-step test cases, this nonsense is minimized.
",2018,Why “Agile” and especially Scrum are terrible
Racoonie,1,"> Customer collaboration? It takes two to tango. Good luck with that. Contracts happen for a reason.

Can you explain what you mean by that?",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,"I mean that when you have a ""customer,"" they may be more than one person or departments working in one company, who may, or may not be in agreement as to requirements, prices, deployment details, etc. A contract forces all the parties to agree on one defined set of features, a single delivery date and prices (minus penalties on either side) in the context of defined deployment dates and details.

Bottom line? That nice girl in sales that's pushing you for feature X may be a nobody who just wants something in there she promised a customer so she could get her bonus, *not* because any decision maker in the company needs it, wants it or is willing to pay for it.",2018,Why “Agile” and especially Scrum are terrible
Racoonie,2,"Where is the PO that pushes back on the stupid requests from other departments by showing them that it makes no sense from a financial point of view? Where is the UX designer that tells the sales girl that the idea she has is solutionizing and does not actually solve the problem the customer really has?

And if the girl in sales tied her bonus to something that is done in another team and out of her reach, her fault.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,"Sigh. Where indeed.

Bottom line. Don't assume your client knows anything, can organize anything or that humans don't cheat, scheme in their own self interest or lie. Companies vary a *lot* in terms of organization. The customer may not know *anything* about buying software. Their assumptions will be hilariously wrong. Maybe someone tells them. Maybe not.",2018,Why “Agile” and especially Scrum are terrible
HORTSTER,3,"It seems like the person who wrote that article would be better off in academia. 

I’m a business person and PO. Our goals are to grow and operate our business. Any software that is revenue generating HAS to be tied to business outcomes. The writer of that article makes a lot of false statements about Scrum and the non-engineers. We collaborate. We work on long term projects and short term items. Engineers always have input and can advocate for refactoring, foundational work or even research and exploration time. We don’t have an us and them mentality. We feel like a family.

The Dilbert-like tendency to mock non-engineers only serves to reinforce poor relationships. 

Also, news flash, everyone in the work place needs quiet, uninterrupted time to accomplish thoughtful and creative outputs. Not just engineers. Get off your high horse. ",2018,Why “Agile” and especially Scrum are terrible
bitwize,5,"> Also, news flash, everyone in the work place needs quiet, uninterrupted time to accomplish thoughtful and creative outputs. Not just engineers. Get off your high horse.

The difference is that managers actually *get* quiet uninterrupted time because even in open-plan sea-of-desks nightmare offices, managers often get offices of their own.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,3,Never bring forward a problem unless you have a solution.,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,4,"I think I’m done with this subreddit, I was really hoping to learn more but this is the most content-free sub I have ever seen.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,"Agreed about open offices. The rest is just hyperbole, exaggeration, and misrepresentation.",2018,Why “Agile” and especially Scrum are terrible
jdauriemma,2,"So many opinions, so little evidence to support them.",2018,Why “Agile” and especially Scrum are terrible
appropriateinside,2,"TLDR: Agile is horrible when you do it wrong

Imagine that.",2018,Why “Agile” and especially Scrum are terrible
axilmar,2,"I couldn't agree more. I was happier job wise in my previous job in which I wasn't paid but had freedom to create stuff than in my job that pays me regularly but has me in a straightjacket of sprints, scrums and kanbans.",2018,Why “Agile” and especially Scrum are terrible
Rearviewmirror,1,"This hasn’t been posted in over a week I think.  


",2018,Why “Agile” and especially Scrum are terrible
menge101,4,"Yay, another clueless article about how agile is bad.",2018,Why “Agile” and especially Scrum are terrible
farfignewton,3,... with no positive suggestions.,2018,Why “Agile” and especially Scrum are terrible
manticorebrewing,1,This thing needs a tl;dr.,2018,Why “Agile” and especially Scrum are terrible
Racoonie,2,Even that would be a waste of time.,2018,Why “Agile” and especially Scrum are terrible
bodhemon,1,"My company is just starting switching to a more strict SCRUM process and it is worrisome that some of the parts that are more responsive to feedback from the worker bees are being ignored by management. Like only figuring 6 hours capacity per day to account for realistic interruptions including meetings and etc. It's extremely frustrating because I only started here a couple of months ago, but they are in the middle of a huge reorganization and a bit of a power struggle between the new CEO and the CTO who built the business. I was one of the last hires through the CTO's network and since then the CEO has been hiring a ton of mid and upper management. And the old guard has been leaving in droves. I know this has meandered off topic, but I'm pretty bummed about it and one of the only reasons I am staying is that I get along really well with the lead dev that sits next to me (I am QA). Like, my first day we were both sort of like, ""Oh, it's my new best friend."" If it weren't for him I would already be applying even though I've only been there 4 months. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,[removed],2018,Why “Agile” and especially Scrum are terrible
bonappletee23,1,Scrum lords,2018,Why “Agile” and especially Scrum are terrible
vasquezlb,1,"While I agree with the premise, I've seen it fail so vastly differently that I can only come to one conclusion: any process can fail with the wrong people and succeed with the right ones.

An organization can just as easily use Agile/SCRUM to promote resistance to change over agility, engineering over project completion, outdated approaches over modern. User requests converted to meaningless backlog goals used then to restrict individual developers.

What I saw missing:
- A balanced assessment of risks/gains by an engaged manager with the authority to and using it to continuously (re)direct the project.
- A project team engaged in all aspects of the system, bringing together a systems diverse needs, rather than managers, users, developers, infrastructure, and security all working separately on their own Sprint and pointing the finger elsewhere for project overruns.

I love the agile principles, and scrum concepts as well, but the process can truly be a terrible experience. I say, get any and all processes out of the way. Use them as a way to remember what needs to get done, let others know what is planned, and coordinating. Process should not be a way to control those involved, because no process is good at decisions, only people are.

agile 101: people over process",2018,Why “Agile” and especially Scrum are terrible
backdoorsmasher,1,"There are some things of note to take away from this article, but there always has to be an eye on the commercials. Someone needs to get the devs to do the work that will earn the business money, If you leave the devs to themselves, they will usually do good work, but they still need someone to focus them on the money earners.

&#x200B;

Also, I've worked with a lot of developers in my career. Some I would be happy to leave to their own devices. Others I would not. So I think whatever your approach is, it would depend on how your current development team is, and what the culture of your business is. ",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,I'd like to direct you to [this](https://www.projectmanagement.com/articles/504123/The-Silent-Killer-in-Your-Agile-Implementation).,2018,Why “Agile” and especially Scrum are terrible
dombrogia,1,"I think one is the main points of agile is *ability* to move and pivot as needed efficiently. Being agile doesn’t mean working as fast as possible but rather in small increments. This works well with continuous integration processes. 

However, not every project, feature, ticket, etc. you work on is completable in a small increment and that is where “scrums” or “sprints” come in. They allow you to break down the project and forecast it in manageable phases rather than just whipping out the “this should take us about 6 weeks” estimations.

I agreed with a lot on this article and overall found it very insightful, but I think that was one of the concepts the article was missing.",2018,Why “Agile” and especially Scrum are terrible
Alavan,1,"The main issue I have with this article is that it uses Agile and Scrum like that's the only thing you can do to work on a project if you so desire to use it.  

In practice, Agile, Kanban, Scrum, Waterfall, etc are just tools in your development arsenal.  

For example, when you have a big production-level product (a CRM for example), you might want to add a new module to it.  This, let's say, requires a team of 4 and will take 6-8 months.  You aren't worrying about architecture or technical debt because they are already in place.  And the architecture/design of this project has already been handled, or will be handled by an architect/senior before the main work with the team of 4 will start.  

So you decide to use Scrum.  Your project manager (who hopefully has a technical background) along with the team of 4 estimate and organize user stories into iterations/sprints, and you go for it.  You overestimate by design, and everybody is happy and can do extra each iteration.  You have 1 senior programmer in the team of 4 to lead the planning meeting at the beginning of each iteration to estimate the stories.

Also, at the end of the article the author mentions that Engineer-lead teams are good.  That is true, which is why we use Agile-methodologies to manage our work.  From Design to Implementation to Architecture to QA and Production, you can use Agile to manage each piece that you are responsible for while partnering with other staff like QA or Account managers to minimize the amount of time you are sitting waiting on an email response or an action item.  Even with my own solo-development projects, I use a Kanban board to manage chunks of work so I don't forget something I need to set up in my code, and I could just as easily use Scrum myself as well.

In the end, the proper way to use Agile is to allow the developers to develop instead of having to use head-space to remember everything they need to do.  It is not inherently bad, even in today's practice.  Even if it can be (and often is) used poorly.",2018,Why “Agile” and especially Scrum are terrible
C_Arnoud,1,"the article starts well, even if I dont agree with all the points being made.  
but then it goes onto gender politics, shaming young developers...  
there's also this priceless snippet:
""all of the really good engineers hate it when they go to work on a Monday morning and don’t know what they’ll be working on that day.""  
yes, exactly all of them have the same opinion. you can't be good otherwise.
",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,I think this is more about how the culture and methodology are executed and managed. It won't be the same everywhere. ,2018,Why “Agile” and especially Scrum are terrible
Jimmy_Russula,1,Paging u/tomsegura ,2018,Why “Agile” and especially Scrum are terrible
dottybotty,1,The article is poorly written with little actual examples that illustrate how agile fails but just offers rant filled walls of texts that could be applied to any [insert development methodology here].   ,2018,Why “Agile” and especially Scrum are terrible
SuperMancho,1,"> here’s absolutely no evidence that any of this snake oil actually makes things get done quicker or better in the long run

Due to the well-known psychological ""anchoring effect"", there's evidence that it makes things done quicker in the long run. ""Better"" is too vague to mean anything here.",2018,Why “Agile” and especially Scrum are terrible
SemaphoreBingo,1,"Article is by the guy who got banned from Hacker News for this post:

""""""	
michaelochurch on Aug 6, 2015 | parent [flagged] [-] | on: Ask HN: Do you work in a company that will fire yo...

Sounds like Marissa Mayer took Google's stack-ranking machinery and replicated, awful detail by awful detail. What a queynte.
At Google, the bottom categories are rarely used and ""Meets Expectations"" is a huge window (3.0-3.4) from the 3rd to 65th percentile. Since you only get your bucket, your manager could be saying that he's giving you a perfectly respectable 3.4, while actually raping you in the ass with a 3.0.
Often, you have managers who give the 3.0 and 3.1 to keep reports immobile (they can't transfer) while conveying that they are getting average or average-plus scores. But whenever there's a witch-hunt-I-mean-dishonest-layoff-I-mean-""Low Performer Initiative"" those people given 3.0s get hit with PIPs, which is not what even their managers wanted.""""""",2018,Why “Agile” and especially Scrum are terrible
Th3Lon3lyM3lon,1,Part of a team that tries to use agile and scrum but no one really knows what it is and it is a huge mess. Any suggestions? xD,2018,Why “Agile” and especially Scrum are terrible
DCdylaan,1,lol please check out my acount,2018,Why “Agile” and especially Scrum are terrible
Someoneoldbutnew,1,"Yes, when tech is distinct from business, it's gonna suck. When business and tech work together, that's the win. That's also the role of ""Product"" which this guy trashes.",2018,Why “Agile” and especially Scrum are terrible
abraaocarmo,1,Methodologies are never meant to be implemented without any adaptation to the company reality.,2018,Why “Agile” and especially Scrum are terrible
O12345678,1,"I've been a developer for 13 years and worked/contracted on 20-30 projects. In my experience, the approach doesn't make as much of a difference as the level of organization by project management does. Having well defined, well policed, streamlined processes matters more. Practicing continuous software improvement and having good process tools that are properly configured are also important. The philosophy behind the processes isn't as important.",2018,Why “Agile” and especially Scrum are terrible
BrainJar,1,"The title should say, mismanaged processes, especially when the finger-pointing starts, are terrible.",2018,Why “Agile” and especially Scrum are terrible
bob4apples,1,"This is a shitty rant.  Apparently agile is responsible for literally everything wrong with the way that software engineering is managed.  There's even a whole screed in there lambasting open plan offices which are, in this author's mind, somehow caused by scrum.

He also rants about how scrum is used to pigeonhole people into roles.  Given that a fairly fundamental premise of scrum (and its biggest Achille's heel) is that everyone can do everything, that would be a pretty stupid reason to use scrum.

I could go on but I think one can safely say that the real value in this article lies in the solutions and alternatives it offers /s.",2018,Why “Agile” and especially Scrum are terrible
kanzenryu,1,Bias in terms of safe work that can be estimated is an excellent point.,2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"I've been both a programmer and graphic designer. I refuse to do any professional graphic design work now. This isn't a comment on any particular type of project management, but just reaffirming what everyone knows: the client is a schizophrenic asshole who doesn't know anything but thinks they do.",2018,Why “Agile” and especially Scrum are terrible
generalT,1,michael o church!  yes!,2018,Why “Agile” and especially Scrum are terrible
m_krm,1,"I don't think there is an easy awnser to Waterfall vs Agile. I've seen both work in differnt scenarios while both can suck when poorly managed.But two week sprints is absolute nonsense unless you have been working on the same product and technologies for a very long time. Or your doing really insignificant features.I do think this is more of a comfort for management to have a constant churn but it should be obvious in some circumstances this isn't appropriate.In saying that I'm open to the idea of sprint long spikes! 

However, I don't agree with the authors perspective on engineers been less creative when explaining themselfs, id really like to see a source for that.Explaining your self to others can let you view the problem from another angle.While at the sametime solidifies your understanding, and takes your knowledge from randomly generated twitches of muscle memory to a fully understood concept that's ready to be engineered. He should Google the Feynman technique.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,2,">However, I don't agree with the authors perspective on engineers been less creative when explaining themselfs

I do, at least some engineers.  Me, for instance.",2018,Why “Agile” and especially Scrum are terrible
m_krm,1,"That's interesting, is it because you can't articulate yourself or is it you don't fully understand the problem you are working on? And at what point do you find you are able to articulate it, like if you worked for 6 months on building a log in sequence for example and someone asked you where would be the best place for you to hash the password, I'd assume at that stage you would have a strong understanding of the area you are working on to be able to awnser the question? I hope this dosent come across like I'm criticising you, I'm not, I'm just interested in you personal perspective.",2018,Why “Agile” and especially Scrum are terrible
ciaran036,1,"so what's the solution then? The article is rife with criticisms, but doesn't offer any solutions. What way should we be managing software projects? How can projects be run that will satisfy clients, and still meet their budget requirements? ",2018,Why “Agile” and especially Scrum are terrible
LuckyDesperado7,1,It's like a California wildfire in here. :-) ,2018,Why “Agile” and especially Scrum are terrible
kindofajerk,1,"Macro assertions like this are always a great way for experienced folks to know ahead of the time the article will not be of value, just like when a headline deems all millennials are exactly the same person.  Anyone who has been in leadership positions of all age groups (and is halfway decent at it) already knows that's patently false.
Like this, neither waterfall nor agile is 'good' or 'bad' and both succeed/fail at the similar rates.

The process of development a company chooses needs to match the product and customer first and foremost, not what seems easiest for the developers and product managers.  Some markets/products dictate longer cycles with fewer bugs/disruptions while others demand rapid releases of MVP (or sometimes less).
What determines the success of either is the building and adherence to internal processes around prioritization (roadmap vs. bug fixes), quality of code, and completeness of vision.  Attributing wins and losses to a highly generalized development model is just stupid.  Organizations need to look inward to identify areas for improvement, not blame some proper noun.",2018,Why “Agile” and especially Scrum are terrible
spockspeare,1,"Agile works when you can deliver a super-basic product and then continuously improve it for download updates.

If your product can sell that way, like most phone apps can, then use Agile.

If not, then design your management process to fit your product's natural market ecosystem.",2018,Why “Agile” and especially Scrum are terrible
flash357,1,"""Minimum Viable Product"" that you evolve naturally as the needs of the business are identified and grown

This is spot the fuck on",2018,Why “Agile” and especially Scrum are terrible
AstroGirlBunny,1,"You guys realize a lot of this depends on several things? On which method works? And in the end, sometimes the clients refuse to change from one to the other. I have done both. And have done both in both the mainframe environment and GUI environment. It comes down to doing what management wants. Because if you don't place nice with others and learn the rules and play by them? No matter invaluable you think you are, in today's world they are changing to outsource your job. It doesn't matter whether the other person can do it as well as you. Money speaks louder these days and reason has gone out the window. 
Last: If done properly, both project methodologies actually work just fine. Even in a mainframe environment with COBOL code. Not joking. I've done it successfully with both waterfall and agile. Real agile.",2018,Why “Agile” and especially Scrum are terrible
HowIsntBabbyFormed,1,"Just putting my two cents out there: I worked at a company that did agile full throttle and it worked. It was also something that was implemented while I was there. I went through the transition, and I can tell you it was much better after than before.

There were other things that were not great about that company's management, but somehow we got them to do agile and it was great for the engineers.

We did the whole consulting thing, we paid for rally, we did planning poker, we did stand-ups, we did retro with sticky cards, etc. And it actually worked.

I've also been places where they've implemented agile poorly and it sucked.

It's like implementing unit/integration tests. If you do it half assed, it really sucks. But when you have a fully test-covered code base, it can make development much easier and more rewarding.",2018,Why “Agile” and especially Scrum are terrible
Gotebe,1,:-),2018,Why “Agile” and especially Scrum are terrible
lngnmn,1,"It is absolutely astonishing what amount of bullshit is produced around these ideas.

Waterfall is good when you are building a skyscraper because and only because it is way too costly or even impossible to change what is already done.

In other human endeavors, like painting, changes could be made much more easily however not as easy as in, say, fiction writing, since a painting has some real structure.

Programming is a form of writing. Only idiots (which are everywhere) are using construction best practices when the ones of writers are more appropriate and will do.

It is no surprise that PG, among other, who studied painting,  came up with his bottom-up process, popularized in the ""On Lisp"" book. Changes are ok. It is not construction or even painting.

Good static typing system (like that of ML-family of languages) will make refactoring even more easy and less painful. 

Why all this is so difficult for ""packers"" to grasp?",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,1,"> Agility is a good thing, no doubt, and the Agile Manifesto isn’t unreasonable. Compared to a straw-man practice called “Waterfall”, Agile is notably superior. Yet, so much of Agile as-practiced is deeply harmful, and I don’t really think that the Agile/Waterfall dichotomy is useful in the first place.

Pure conjecture. The dichtomy is useful because waterfall is _not_ a ""strawman"". In fact waterfall masquerading as agile is one of the biggest problems with agile.

> There’s a variety of Agile, called Scrum, that I’ve seen actually kill a company. By “kill”, I don’t mean “the culture wasn’t as good afterward”. Rather, I mean that its stock dropped by almost 90 percent in less than two years.

Funny, because an actually agile company wouldn't let scrum, a set of processes, stop it being agile enough to succeed.

>  We’re very literal people. 

In my experience people, programmers included, are not literal, read between the lines constantly, and don't use precise enough technical wording. The one special thing about most programmers though is that useless pedantry is common.

> We like systems that have precisely defined behaviors.

Most of the code I've seen contradicts this. People _want to believe_ they're like this, but they're not.

> This makes working with non-technical people harder for us than it needs to be, because we tend to take every request literally rather than trying to figure out what they actually want. 

A lot of ""we"" here. There are tens of thousands of successful freelance contractors who are fine dealing with clients.

I'm bored of the article already. It's a load of dumb stereotypes and false premises. ",2018,Why “Agile” and especially Scrum are terrible
we-all-haul,1,"Read the title, roll the eyes",2018,Why “Agile” and especially Scrum are terrible
base11ryan,1,"A lot of great points in here, but I’m not sure how many are caused by the theory of agile and just poor implementation. I am all about the dev empowerment though! ",2018,Why “Agile” and especially Scrum are terrible
utnapistim,1,"> Like a failed communist state that equalizes by spreading poverty, Scrum in its purest form puts all of engineering at the same low level: not a clearly spelled-out one, but clearly below all the business people who are given full authority to decide what gets worked on.

No, there is no ""clearly below all the business people who are given full authority to decide what gets worked on"".

In a functional agile team, as time goes on user stories tend to focus more on those that start with ""as a <user/client/stakes owner I want ...>"" rather than those that start with ""as a developer I want ..."".

If, as the project progresses, you keep getting more and more stories done that add business value, this is a good indication of project health (but focusing only on those, in order to claim you are productive ""because agile"", will doom your project and your team). There's plenty of things that do not add _business_ value but are invaluable to the development effort (time for research and prototyping, scripting common tasks, simplifying interaction where it is tedious, taking stock of the current situation before you start making changes and so on).

If as time goes on, you keep getting more and more stories that seek to address problems with the way of working (developers lacking relevant measurements, not being able to achieve goals, being constantly frustrated and so on) that is an indication that something is not working in the management of the team/tasks/project/whatever.

One of the indicators that the team is dysfunctional is that _the business people [...] are given full authority to decide what gets worked on_.
",2018,Why “Agile” and especially Scrum are terrible
Armandorev,1,The author seems to confuse what agile is with things like toxic environments. That can happen in agile or waterfall offices,2019,Why “Agile” and especially Scrum are terrible
notlupus,1,"So what’s the alternative? I don’t disagree with the points made, but we all know to be effective you can’t just bitch about something. You have to provide a solution. So, what is it?",2018,Why “Agile” and especially Scrum are terrible
stefantalpalaru,1,"> to be effective you can’t just bitch about something. You have to provide a solution.

On the contrary: we need to decouple problem spotting from solution proposal, because people who are good at both tasks are extremely rare.

Further more, this false dependency discourages the timely identification of problems because those who see them might not have good solutions to propose.",2018,Why “Agile” and especially Scrum are terrible
tablecontrol,1,"i wish i could get my senior leadership to understand that web development is different than backend ERP development.

They're trying to throw ""agile"" at everything and it just doesn't work for backend, enterprise level platform development.

Agile, for us, has become just another person tracking tickets.

",2018,Why “Agile” and especially Scrum are terrible
flash357,1,Then ur doing it wrong,2018,Why “Agile” and especially Scrum are terrible
tablecontrol,0,"lol, no. Agile just doesn't work with backend ERP development. 

We don't develop screens with spinning logos where user-interaction is adding items to a shopping cart - we develop applications that post, and error correct, thousands of sales orders / purchase orders  etc.. at a time.",2018,Why “Agile” and especially Scrum are terrible
flash357,1,"Ah... got it...

My bad good sir!",2018,Why “Agile” and especially Scrum are terrible
tablecontrol,2,sorry - didn't mean to come off like a jackass.,2018,Why “Agile” and especially Scrum are terrible
flash357,1,"hahaha- didnt take it that way man... not at all-

no need to apologize but i am genuinely interested in why you think agile wouldnt work in your environment...",2018,Why “Agile” and especially Scrum are terrible
flash357,1,"out of curiosity though, why couldnt you use agile in this environment?

ive used it in many applications over the course of my career and have been pretty successful at it...

just trying to figure out why you couldnt use agile with a backend app- i dont work with front ends / publicly facing apps exclusively and work at the enterprise level for one of the biggest (and most scandal plagued) banks in the world...",2018,Why “Agile” and especially Scrum are terrible
tablecontrol,2,"It's mainly that with an ERP platform, such as SAP, *everything* is interconnected with *everything else*. 

Code changes can, and do, unintentionally effect processes downstream. That's the double-edged sword of having an integrated environment.

So, code and process changes have to be really thought out well in advance to make sure stuff like that doesn't happen.

Also, in SAP, there's really no screen design. You don't need to go back and forth with a client to determine what fields to put where and what color-scheme to use. stuff like that.
",2018,Why “Agile” and especially Scrum are terrible
flash357,1,"yea... i know the struggle of downstream systems and the impacts to those... sounds like you would simply need a solid PMO though, that might help all of that

normally (in my personal experience, of course), having a solid team from top to bottom will help with this kind of stuff...

your BA has got to acknowledge impacts both up and downstream, communicate that to the PM team so that the other teams can be brought into the fold then it becomes a matter of calendar / development coordination

without a solid team from top to bottom and without all of those folks knowing their roles then, yes, that kinda stuff can get messy really quickly- i def agree with you

good stuff man... love this kind of convo- it helps me in my job

thank you for engaging",2018,Why “Agile” and especially Scrum are terrible
KFCConspiracy,1,Why not use something like SAFe? That's an agile process that's intended for enterprise projects. ,2018,Why “Agile” and especially Scrum are terrible
Racoonie,1,"And? That makes it impossible to track your progress, ship something in small increments and regulary analyse if you're still on track or things changed?",2018,Why “Agile” and especially Scrum are terrible
Racoonie,0,">  it just doesn't work for backend, enterprise level platform development

Tons of companies disagree with you.",2018,Why “Agile” and especially Scrum are terrible
tablecontrol,3,"Even with our most recent very large implementation project(2 yr/450million) - it was run as ""agile"", but other than naming it so, it really wasn't... the only similarities were daily scrums that tracked statuses.

You can't develop a interfaces between 2 companies in an iterative manner. The interface either works or it doesn't. You can't receive some invoice data and not the rest. You have to get ALL the invoice data in order to pay it. At least that's what your Vendors expect.

You can't develop a customer credit report in an iterative manner. You need to know whether those customers are a risk or not.

You can't develop a purchase order posting application that posts header data without line item data - you need ALL the purchase order data in order to know what the customer lifted at the rack.

> Tons of companies disagree with you.

including many leaders in my own company, and they're mostly wrong. 

With our leaders, all of their experience is with web/.Net development while i have a solid 20 years of backend SAP development and I know from (a lot) of experience that it simply does not work.

The latest is something we're trying it now with a Rail car movement workbench. We get updates that track our rail cars throughout the country. I've been working on the same requirement for 6 months when the first migration to production happened 5 months ago. 

Agile may be fine when you're talking about one of the company's **few** outward facing applications but not when we have hundreds internal applications/reports. For instance, we have 1 customer portal where customers can log in to view/download invoices and BOLs. However, we have nearly 1200 SAP applications/interfaces/reports.

I think that's the biggest disconnect for Agile believers. Most development teams aren't developing and supporting 1000+ programs. They are supporting a small handful of applications that morph and grow over time.

We can't waste time with iterative development that never ends.",2018,Why “Agile” and especially Scrum are terrible
Matosawitko,1,">Compared to a straw-man practice called “Waterfall”

Either the author has no significant industry experience, or he's never worked for a company established prior to 2000. (His later definition of what ""Waterfall"" actually means, to him, is similarly flawed.)",2018,Why “Agile” and especially Scrum are terrible
Br3ttl3y,1,"Author seems to be a ""software engineering director, rock star level developer"" that has been chastised too many times by clients, managers and peers for being too creative and not fast enough at development.

This level of wisdom usually comes with proposed solutions.",2018,Why “Agile” and especially Scrum are terrible
kfh227,1,"Here's the deal.

&#x200B;

I've been doing software for 20 years.  When I started it was waterfall.  Now it's agile/scrum.

&#x200B;

Here's the deal you young guys and gals.  These frameworks are needed.  Here's the difference.  When you are young and not experienced, you need a framework to get things done.  Otherwise it's chaos.

&#x200B;

So learn processes, many of them.  And focus on getting shit done as priority one and following some process as priority two. ",2018,Why “Agile” and especially Scrum are terrible
Breaking-Away,1,Can we please not post/upvote Michael O Churn Articles.,2018,Why “Agile” and especially Scrum are terrible
merkidemis,1,"While interesting, I always hate these kinds of articles: lots of pointing out what's wrong, but no proposals on what the replacement should be.",2018,Why “Agile” and especially Scrum are terrible
FadingEcho,-2,"> It induces needless anxiety about microfluctuations in one’s own productivity.

What a wonderful way of saying ""screwing around instead of working.""",2018,Why “Agile” and especially Scrum are terrible
shaggorama,0,"He makes some really good points, but my main issue with this article is that there's no discussion of what he thinks would be a more sustainable project management framework.",2018,Why “Agile” and especially Scrum are terrible
thephotoman,0,"Let's dissect this article.

> Compared to a straw-man practice called “Waterfall”,

Waterfall isn't strictly a straw-man.  It tends to call itself SDLC, and yes, it's a thing companies do.  It's a miserable experience to work with, but it does work.

> Yet, so much of Agile as-practiced is deeply harmful, and I don’t really think that the Agile/Waterfall dichotomy is useful in the first place.

Said someone who has never worked in an Agile or Waterfall shop.  I'm going to bet that bad management is the problem.  Let's wait and see who's right.

> There’s a variety of Agile, called Scrum, that I’ve seen actually kill a company. By “kill”, I don’t mean “the culture wasn’t as good afterward”. Rather, I mean that its stock dropped by almost 90 percent in less than two years.

Software development methodology is likely not the culprit for a stock price drop.  Seems a stretch.  In fact, I'm taking this as more evidence that the company's management was a bunch of idiots that thought they were smarter than they were.  Bad management complaint disguised as an agile complaint: 1.

> Agile grew up in web consulting

No, it didn't.  Agile came out of systems engineering, where a bunch of developers realized that self-organization worked better than imposed organization.  Go read the [Agile Manifesto](http://agilemanifesto.org/).  Nothing about this is something that would come out of the web world.  The web world really hasn't been mature enough to do half of the things you'd expect from SDLC.

> Programmers tend not to be great at managing clients. We’re very literal people. 

Personal failing disguised as a generalization.  Personal problems described as agile problems: 1.

> This makes working with non-technical people harder for us than it needs to be, because we tend to take every request literally rather than trying to figure out what they actually want. 

O rly?  Again, sounds like the author needs to take some time and work on his soft skills rather than a problem endemic to software engineering.  Personal problems described as agile problems: 2.

> Corporate Agile, removed from the consulting environment, goes further and assumes that the engineers aren’t smart enough to figure out what their internal “customers” want.

lolwut.  If you're actually doing anything that could reasonably call itself agile, you're routinely either at the desk of or on the phone with various end-user contacts.  Bad management complaint disguised as an agile complaint: 2.

> his means that the work gets atomized into “user stories” and “iterations” that often strip a sense of accomplishment from the work, as well as any hope of setting a long-term vision for where things are going.

WAT.  A user story should be a vertical, complete slice of work visible to the end user.  If you're not getting a sense of pride and accomplishment from that, go play some bullshit EA game with overpriced ""micro""transactions that run $70.

> In general, people tend to create two types of jobs, whether inside a company or as clients when off-loading work. At the high end, they hire for expertise that they don’t have. At the low end, they dump all the stuff they don’t want to do. It’s probably obvious that one class of consultant gets respect and the other doesn’t. Mismanaged consulting firms often end up becoming garbage disposals for the low end work. Scrum seems to be tailored toward the body shops, where client relationships are so mismanaged that the engineers have to be watched on a daily basis, because they’ve become a dumping ground for career-incoherent work that no one wants to do (and that probably isn’t very important, hence the low rate and respect).

""My management sucks.""  Bad management complaint disguised as an agile complaint: 3.

> Open-plan offices are the most egregious example. They aren’t productive. It’s hard to concentrate in them. They’re anti-intellectual, insofar as people become afraid to be caught reading books (or just thinking) on the job. 

Has nothing to do with agile.  In fact, has little to do with anything other than being able to hide while slacking off. Personal problems described as agile problems: 3.

> These Agile systems, so often misapplied, demand that they provide humiliating visibility into their time and work, despite a lack of reciprocity. Instead of working on actual, long-term projects that a person could get excited about, they’re relegated to working on atomized, feature-level “user stories” and often disallowed to work on improvements that can’t be related to short-term, immediate business needs (often delivered from on-high). This misguided but common variant of Agile eliminates the concept of ownership and treats programmers as interchangeable, commoditized components.

Those are a lot of words, but they say nothing new.  Additionally, they sound like this person just got fired for goofing off at work.

> Scrum is the worst, with its silliness around two-week “iterations”. It induces needless anxiety about microfluctuations in one’s own productivity.

If you're anxious about stand-up, maybe it's because *you didn't do anything yesterday, you aren't doing anything today, and there are no real reasons for either.*  Personal failing described as agile problem: 4.

> There’s absolutely no evidence that any of this snake oil actually makes things get done quicker or better in the long run

Agile is not about speed.  It's about responsiveness to change.  

> I have mixed opinions about job titles like “Senior” and “Principal” and the like. They matter, and I probably wouldn’t take a job below the Principal/Director-equivalent level, but I hate that they matter. If you look at Scrum, it’s designed to disentitle the senior, most capable engineers who have to adhere to processes (work only on backlog items, spend 5-10 hours per week in status meetings) designed for people who just started writing code last month.

Based on what I've read so far, I wouldn't hire you as an intern: you're lazy and entitled.  And if you're in 5-10 hours of *status* meetings per week, that's a management problem.

> Agile, as often implemented, increases the feedback frequency while giving engineers no real power. That’s a losing bargain, because it means that they’re more likely to be jerked around or punished when things take longer than they “seem” they should take. It creates a lot of anxiety and haste, but there’s little of what actually matters: building excellent products.

Sounds like a management problem, not an agile problem.  Bad management complaint disguised as agile complaint: 4.

> If your firm is destined to be business-driven, that’s fine. Don’t hire full-time engineers, though, if you want talent. You can get the best people as consultants (starting in the $200-per-hour range, and going up steeply from there) but not as full-timers, in an business-driven company. Good engineers want to work in engineer-driven firms where they will be calling shots regarding what gets worked on, without having to justify themselves to “scrum masters” and “product owners” and layers of non-technical management.

IT is the business.  If you farm it out to consultants, you don't control your business.

> The problem with Agile’s two-week iterations (or “sprints”) and user stories is that there is no exit strategy. There’s no “We won’t have to do this once we achieve [X]” clause. It’s designed to be there forever: the business-driven engineering and status meetings will never go away. Architecture and R&D and product development aren’t part of the programmer’s job, because those things don’t fit into atomized “user stories” or two-week sprints.

Call me when you find an in-service but finished software project.  Oh wait, THAT DOESN'T HAPPEN.  

> I once worked at a company where a product manager said that the difference between a senior engineer and a junior engineer was the ability to provide accurate estimates. Um, no. That’s insulting, actually. I hate estimates, because they generate politics and don’t actually make the work get done faster or better (in fact, it’s usually the opposite).

Personal failing described as Agile problem: 4

You know what?  I'm nearing the 10k character limit.  I'm convinced this person has no business near a text editor, and this is general job grousing.  He should delete this post and pray nobody ever sees it, because he's seriously limited his ability to work in the field.",2018,Why “Agile” and especially Scrum are terrible
Buck_McFuckson,3,"I actually agreed with the preface statement that Waterfall v Agile is a bad dichotomy. But that's about where I stopped agreeing with him.

Every time I argue with people about why I like Agile (Scrum specifically), I almost always find that someone hurt them in a job long ago and the problem wasn't necessarily Scrum itself but their company's implementation of it. Whether it's micromanagement, poor planning, bad work/worker ratio, etc., Scrum is still a very useful tool for us devs to stay productive and to maintain accountability with the team.

At the end of the day, just because it's not a methodology he particularly enjoys or finds productive does *not* mean that it's a bad one for everybody.",2018,Why “Agile” and especially Scrum are terrible
Racoonie,1,"That was a beautiful read, thank you.",2018,Why “Agile” and especially Scrum are terrible
ashishduhh1,0,"I agree with the article for the most part, I did find it funny that in one paragraph he said that racial minorities are sensitive to a surveillance state and in the next he said that Asians are basically white and immune to it.  Typical SJW.

But good points regardless.",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,-10,"Why the hell are you waffling on about open offices.... I stopped reading at that point and jumped to the conclusion.

In regards to that.. All I can say is we tried baseball and it didnt work.",2018,Why “Agile” and especially Scrum are terrible
0987654231,6,"How can you say anything? You stopped reading the article before it even went into the list of flaws.


",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,-2,"Apparently. He waffled, i read the conclusion. I was clear and concise, unlike the author who just randomly started talking shit.",2018,Why “Agile” and especially Scrum are terrible
0987654231,3,"You didn't read the article why are you commenting on its substance?

",2018,Why “Agile” and especially Scrum are terrible
AbstractLogic,0,"Wait until this guy tries SAFE (Scaled Agile Framework). He will shit the bed lol. 

SAFE = SUCKS.",2018,Why “Agile” and especially Scrum are terrible
chakan2,0,"There's some nuggets of wisdom in this article, but mostly it's flaimbait whining. 

>There’s absolutely no evidence that any of this snake oil actually makes things get done quicker or better in the long run.

Um...no...We've got 10 or 15 years of metrics that say that Agile/Scrum is much more productive than other methodologies (with the exception of XP, but I wouldn't recommend XP unless your entire shop is 5 rockstars in someone's garage). 


",2018,Why “Agile” and especially Scrum are terrible
Deleted Account,7,We do?  Can I see 'em?  ,2018,Why “Agile” and especially Scrum are terrible
wtfdaemon,-1,"Nice rant from an idiot who obviously works at a dysfunctional company, generalized out to address shit that most of who work at companies that do these things right never have to live with at all.  Maybe the Bay Area spoils me?",2018,Why “Agile” and especially Scrum are terrible
helikal,2,"The managers in companies whose business is not primarily software, do not understand Agile. They assume, it’s merely a quicker software development process and get disappointed, when they find out it‘s not quite that simple but rather requires ongoing involvement of various business functions and levels. Such a commitment is typically not made, and, therefore, Agile quickly degenerates into another Cargo Cult burdening developers. ",2018,Why “Agile” and especially Scrum are terrible
JustarianCeasar,0,"As someone who's self-studying programming as part of a long term career change post service, the management methods in the blog here seem... convoluted. Why have these become the norm for the programming industry? Maybe I've spent too much time with MDMP (military decision making process) and LSS (Lean six sigma) problem solving. I've always been in environments where once a course of action is decided that meets all the desired outcomes, you stick to it with deviations only if your stated goals require changes.

Why is it that a production flow **isn't** something like:

* Receive specs from customer
* Outline the plan to meet specifications with specific goals and timeline(s)
* Keep goal trajectory by regular updates of problems and solutions within production.
* Maintain consistent and timely updates with customer as goals and prototypes are met/created
* When issues crop up or changes need to be made, incorporate those into the goal set as additional requirements to be met.
* Deliver initial product to the customer for review
* Incorporate needed ""polish"" before final product delivery

Sorry if this is a ""everyone knows this"" question. I am ignorant on programming as an industry as opposed to a technical skill.
",2018,Why “Agile” and especially Scrum are terrible
oconnellc,0,Why did this person spend so much time writing about something they don't know anything about?,2018,Why “Agile” and especially Scrum are terrible
Casceus,0,"I definitly got many of his points. I think what programmers and 'managers' should start doing i reflecting if their way they use Agile/scrum i right. 

Also many things like pressure to get work done , a least for me, is a company / environmental problem. The only situations i felt pressure was when i had a deadline (not the sprint end).

I also think a managers job is to get the requirements from the business and then work out solutions together with the engineers. There is no way a manager can make User Stories.
Often the Business want a feature à la: I want a button here so the user can do x y. 
Then we replied: But we already have a similar function here, we could extend that. Etc.etc.etc.
I dont know how a company can work if the engineers cant discuss with business about a new feature. According to the author of this article, it simple cant.

",2018,Why “Agile” and especially Scrum are terrible
nanno3000,2,"Many things he states are not a problem of the theory itself, but rather bad workspace environments and most of all bad cultures . 

To the points you've written, i feel they don't stem from agile/scrum at all.

agile development is full of feedback cycles. if you have problems with any of the things you stated, you should be saying so to your manager/scrum master/ whatever. The whole point of being agile is being able to change the things that don't work and find the things that do. Its not a fixed process and needs to be adapted to the specific group thats using it.  

Agile is supposed to free the developers, not force them into a straight jacket. You (the dev) set your goals yourself, you measure yourself, how much you can (comfortably) accomplish in a single sprint, so you don't get overburdened.  

And the whole point of having user stories is that, instead of having someone with 0 UX experience tell you where to put your buttons and what color the background has to be, they tell you a story that incorporates all you, as the expert, need to know to build what the user expects. Of course its not easy to meet such an ""undefined"" expectation in the first try, which is why you only do small iterations that you can show to your ""customer"", where he can clarify his story before you've set it in stone.  

&#x200B;",2018,Why “Agile” and especially Scrum are terrible
Casceus,1,Thats exactly what i wanted to say :),2018,Why “Agile” and especially Scrum are terrible
coshikipix,0,">Ask anyone who was Jewish in Central Europe in the 1930s. Even for respectable people, a surveillance state is an anxiety state.   

Godwin point... congrats i won't read further",2018,Why “Agile” and especially Scrum are terrible
Historical_Fact,-3,The only point I agree on is that open offices are trash. Aside from that this guy is insane. He probably just had shit leadership one time. Agile/scrum is the *right* way to build software. ,2018,Why “Agile” and especially Scrum are terrible
GurenMarkV,-1,The new Spotify update that adds full screen gifs playing. I don't like it. They should be fixing the desktop program and the random bugs the mobile version have. Not adding new features to drain my battery.,2018,Why “Agile” and especially Scrum are terrible
stevers,-6,"From a WordPress.com Website.  It makes me laugh when people can't even pay a couple dollars a month for hosting and $12 a year for their own domain name because they really don't think their content is worth writing...

As a senior software engineer, and someone having been in many different processes, I can say from personal experience that the only reason agile doesn't work is because the people failed to actually do agile. Whether it was poor Sprint planning or poor grooming of stories... The only people in my experience that don't like a child are the ones that aren't actually doing work and don't want to be held accountable.  ",2018,Why “Agile” and especially Scrum are terrible
michaelochurch,2,"> From a WordPress.com Website. It makes me laugh when people can't even pay a couple dollars a month for hosting and $12 a year for their own domain name because they really don't think their content is worth writing...

I started blogging in 2004, back in the Blogger days. Moved to Wordpress in 2009, got enough of a following that there were switching costs. It's now in maintenance mode.

Are there better ways to run a blog? Sure, and WordPress now runs ads, which I hate. But it hasn't been that high of a priority for me.",2018,Why “Agile” and especially Scrum are terrible
Chimertech,443,"Take all of those bullet points and literally just turn them into questions for interviews.

* What kind of software development methodologies do you follow?
* How is work decided and planned?
* How do you figure out how much work a single dev can handle, and how do you figure out how much work a team can handle in a given period of time.

etc.

Interviewing is a 2 way street. I've worked at places that were ""agile"" only because they had standup and other ceremonies. I've interviewed places that decided to have standups every day and call themselves agile.

Agile is good when it's done well, and can result in some very high functioning teams.

Other times it's just a pain point. You have to dig through all the shitty companies to find the right ones. It isn't easy, and there's always a risk.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Aazadan,191,"> What kind of software development methodologies do you follow?

We put each developer in a (fuck) barrel, then ask them to be agile and navigate around blockers until they go over a waterfall.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,46,[deleted],2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Aazadan,65,Home?  Your home is in the barrel.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
PringlesDuckFace,34,"Wow, corporate housing!",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
improbablywronghere,21,We do this instead of 401k matching btw. Welcome aboard!,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Level8Zubat,17,> Welcome home!,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
redzilla500,7,Welcome home to ~~work~~ live with your _family_.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
joker1999,4,Barrel from home? Lucky bastards,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
whtbrd,27,"it worked out so well we moved our networking and infrastructure teams to this methodology. The agile coaches we hired to facilitate the cross-functional teams assure us that it's going splendidly. Oh, those cross-functional teams? we created them by splitting our employees between their core teams and their cross functional team. they now have twice the meetings and get twice the work done. 

We didn't have to hire anyone new except the agile coaches. We call the cross-functional team members ""developers"" instead of ""network engineer"" or ""sys admin"" and have them estimate their unplanned support work using fibonacci.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Aazadan,15,"We’re more efficient, we just have meeting software that barely works branded as agile.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
543254447,1,This is amazing,2022,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
farox,54,"Also, software is just hard. If you have the best methodology but the wrong people, or the right people but the wrong communication, or the right communication but.... It can turn to shit quickly.

It's gotten better in recent years. Mostly because people have expectations that are more in line with reality.

Having said that, the projects that worked the best, meaning on time and budget, were agile. The more to the book, the better.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
imnos,8,"> I've interviewed places that decided to have standups every day and call themselves agile.

I thought the daily standup *was* an agile thing?",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
redzilla500,11,I think OPs real issue is that his stand ups last 1hr+,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,8,"Yeah, that happens in big teams where everyone drones on about some technical thing or it turns into a discussion about how to solve something. I had one team lead who had no idea what a stand up was supposed to be, so I gave some suggestions (split it up, say what you accomplished/are working on/blockers, etc) and sent him a link to a good article. He didn't change a thing, so I just stopped going. When someone asked I just told them it's a giant waste of my time. Never got in trouble, didn't affect any performance evals, and the lead never brought it up with me.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Unsounded,5,Yeah Stand-up should be less than a minute per person except for like 1-2 people who are putting out fires/discussing breaking bugs.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,7,They are.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Existential_Owl,6,"Stand-ups aren't part of agile's core principles.  They're a ceremony that's been popularized by Scrum that's supposed to *encourage* agile's core principles.

When you're actually being agile, then stand-ups are a great feature. But when you aren't, then IMO they cause more harm than good.

Performing a stand-up won't magically make a team agile.  Despite what the ""Certified"" Scrum Masters will tell you.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
imnos,6,"I'm not a fan of them personally.  They just turn into a competition between people to get stuff done.  I worked in one place that had them at 10am and 2pm every day - I mean, how much can I realistically achieve in 3 hours with lunch in between?  It turns into a panic race to get something over the line so you have something to say at the next meeting.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Existential_Owl,5,"Jesus, two stand-ups per day?  Yeah, I probably wouldn't even bother showing up for the 2pm one.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Chimertech,3,"Right, this is what I meant. You can't just say ""Oh hey, this Agile thing sounds great. Let's have an hour meeting every morning where every person from our 10 minute team talks about what they did yesterday and what they plan to do today and call ourselves agile as well!""

Yes, Standup is a great ceremony to have for Agile, but having standups does not make you agile.

Also, I've seen so many standups that aren't done well. Look, I don't care about every detail of what you did yesterday. What were the key points. What are your blockers? Do you need help with anything that you're working on today?

But it always turns into a ""This is what I did yesterday"" as if you're offering the team some kind of proof that you actually did something the day before.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
highly_unlikely1,8,“Interviewing is a 2 way street.” I’ve been conducting phone screens and on-sight interviews lately and have been blown away by how few questions people ask me.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
sheepcat87,4,Because they likely just need the money to pay bills and will work at a less than perfect position readily to get it,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
romansocks,1,"Yeah, be vicious",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
dylan_kun,560,">When I bring up the Agile Manifesto people literally laugh at me

Seems like you're working with good people",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,163,"lol.

I know it might be too dry and ""by the book"" for some people but it's a good reminder of what the intent of this entire thing is supposed to be. For example, ""responding to changes over following a plan"" is literally impossible when I can look at a calendar and see hard dates as to when features are going out.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
farox,251,"Yeah, it doesn't work like that. It never has and it never will be. You can't plan features for a dev team months in advance. You can plan deadlines, or features, but rarely both.

It's in line with people thinking that 9 women can have a baby in a month.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
-vz8-,104,"> It's in line with people thinking that 9 women can have a baby in a month. 

This may explain my more epic cooking failures. 1 hour at 250F != 30 minutes at 500F.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Jake0024,52,Your problem is you're not using absolute temperatures. Convert those numbers to Kelvin if you want it to work.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
sirspidermonkey,11,"Directions unclear, needed a  instant pot roast and ended up with the heat death of the universe.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
rokislt10,3,"The heat death will actually be very cold, not very hot.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
sirspidermonkey,1,Right because I used the heat to cook meat.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
oil1lio,2,"So

1 hr at 250F = 394.261 K

and 

30 mins -> 789 K = 961F?",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Jake0024,1,That's the ticket.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Du_ds,1,"No it's relative to the temperature of the room. 

Assume it's 70F. 

250-70 = 180. 

180 * 2 = 360. 

360 +70 = 430. 

Thus cook at 430F for 30 mins!",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
nagai,1,and obviously make sure to crank the oven to 1000F at first to trick it into heating up faster before lowering it to the target 500F,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
IABN,19,"That can work, it just depends on what you’re cooking.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
-vz8-,50,"Well, when I tried 15 minutes at 1000F things really got interesting. Nevermind 1 minute at 15,000F, that was the worst soufflé ever.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
TecSentimentAnalysis,30,I cooked soufflé for 1.681 seconds under lightning once. My kids divorced me after that.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
P_a_r_z_i_v_a_l,5,"Nice, now let’s head to the retrospective and see what we can vote on to discuss about how that went.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
hsrob,7,I cooked 69 souffles in 420 minutes and my wife's boyfriend kicked me out of the house,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
coffeesippingbastard,1,fire. you are cooking fire.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
metaconcept,1,"I'm stealing your metaphor.

Although I might use browned onions. They take far longer than expected, you can't rush the process without wrecking everything, and regardless of what you do, someone's going to end up in tears.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,29,"> You can't plan features for a dev team months in advance. 

Yep, that's exactly what has happened in these past 2 companies. I can look right this moment and see when a feature is being rolled out to prod to customers on what date into 2020.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Loves_Poetry,22,"For certain customers this is simply required.  Agile also requires some degree of flexibility from the customer. If they can't have that, you're going to end up with poor agile practices. This doesn't just apply to single companies, it applies to entire industries. If you work in an industry where customers are inflexible (like government bodies or large manufacturers) then you're probably going to end up with poor agile practices at every company you work at",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
zoko_ui,7,On this case (a very unflexible customer) what do you suggest. My company used to do Waterfall but is moving to agile currently. But met with backlash from customer that demand fix date etc. what do you think a good method.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
jbristow,7,"Originally, the concept was that the work was going to take the time it was going to take, so the Agile signers intended that if you wanted functionality to be fixed, then time became variable. Likewise, if time becomes fixed, functionality becomes variable. 

Fixing both brings the third category into variability: quality. The original assumption was that you wouldn’t seriously consider making quality negotiable, so you should negotiate on the other two.

The takeover of agile by certs sold to PMOs with no software backgrounds and execs has gutted agile. It’s best to just abandon the term at this point and pretend you’re doing something else.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
taciturnCynic,13,"> It's in line with people thinking that 9 women can have a baby in a month.

Yeah that only works if you have time to set up pipelining",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
TotallyNotBorat,11,Thank you. I can probably count on one hand in my 10+ years of experience where I've worked on an effort start to finish with 0 requirement changes.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
farox,14,"That's the appeal of agile. It's not a silver bullet. But it works better, in my experience. The key is to get the stake holders on the bi weekly meetings, with the devs etc. Cuts out a lot of political bullshit.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
TotallyNotBorat,13,"Oh, absolutely. My biggest issue is that it can easily just become a micromanagement orgy.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
farox,7,"Not if you do it right. Or rather... if it's a micromanagement orgy in your company with agile, it would be the same with any other system.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
TotallyNotBorat,3,"I see what you’re saying, and I don’t have any issues with agile at all, I just have issues with how some of the scrum masters interpret it.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
farox,3,Oh yeah. I really don't like the cult around scrum master that swoop in and shuffle things around.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
GhostBond,0,"> Not if you do it right.  

The reason you hear this is because Agile is pretty terrible.  

There's series of excuses, deraillments, and attacks to try to defend agile - because they're needed because agile is so consistently terrible.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
farox,2,"Ok, whats better then?",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
RunnerMomLady,1,"THIS.  we had agile going and working nicely.  Then we got 4 (FOUR!) PM's added to our team who wanted to ""learn"" agile (we devs were already just doing it ourselves) and they brought in a consultant....FML",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
william_fontaine,10,"> You can plan deadlines, or features, but rarely both.

It can be done - if you make people work as much overtime as necessary.

This is why I've had to work 50-60 hour weeks since August.

Every company I've ever worked for sets hard deadlines on both deadlines and features, then says ""deal with it"" to the devs/testers.

I try to escape it, but it's inescapable.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
farox,4,"No, not even that. I was in a project where they had one PM per 2 developers. It was a constant ""can we see something?""... for 40 devs. We'd come in Monday morning and leave Tuesday night. Everyone was freelance, so that was a nice paycheck and all the devs knew, as much as they liked it to be different, that each 6 or so hours at night and after maybe equate to one hour of output on a normal day.

Exactly that attitude you're describing is why I went freelance 10 years ago and there isn't a single day where I regretted it. They hire you for some 6 months or so. If you don't like it, fuck it, get out. 

It sucks in the rare cases that you actually do like working with a certain company and/or team. But even then you could usually negotiate something.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
william_fontaine,1,"> Exactly that attitude you're describing is why I went freelance 10 years ago and there isn't a single day where I regretted it. They hire you for some 6 months or so. If you don't like it, fuck it, get out. 

That's awesome.  I'd love to do a 6-month contract, take a month or two off, then find another, if that sort of thing is possible.

Plus I assume working contract makes you exempt from many of the corporate meetings that FTEs have to suffer through.

I may give it a try if I get sick enough of my current job.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
farox,2,"Exactly that's how it works. On the other hand they can just drop you any time. However in the US that doesn't even make a difference, from what I understand.

But yes, not having to deal with office politics is a huge plus.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
farox,2,"To be fair I have 25 years under my belt. But I do get contract offer daily. Some of which are far away and things like that. On top of it you'd have to do a bit more bookkeeping. Nothing crazy, it's just something you factor into your hourly rate.

From my experience if you have 5 years in a certain field you're good to go. If you're specialized in a certain industry, even better. (Yes, he/she can program, but do they also understand how the pharma market works?)",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
william_fontaine,1,"Nice.  Ever get any full remote/mostly remote contracts, or do most places want you on-site?",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
farox,1,PM :),2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
sirspidermonkey,4,I worked at one place the the timeline was planned to the day 9 months out. The pm had a fit when I asked what happens if someone gets sick.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Conradfr,1,"> This is why I've had to work 50-60 hour weeks since August.

Good luck with the aftermath.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
GoblinsStoleMyHouse,18,">It's in line with people thinking that 9 women can have a baby in a month.

This is genius",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
OHotDawnThisIsMyJawn,23,"It's from the book ""The Mythical Man Month""

Old but very good reading about managing software development projects

https://en.wikipedia.org/wiki/Brooks%27s_law",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
TecSentimentAnalysis,5,You just need to save the kid to RAM,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
n00byd00sie,6,"My old boss used the 9 women having a baby in 1 month saying all the time, and would beat that metaphor to death. Damned if he wasn't right though, people really just do not understand that you can't just throw more bodies at problems.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
farox,2,Sounds like he wasn't half bad,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Freonr2,-1,"> You can't plan features for a dev team months in advance. You can plan deadlines, or features, but rarely both.

A truly good team can forecast by using their estimates and past velocity.  Good teams have a senior engineer that can work with the PO to break down epics into stories so the team can give reasonably accurate estimates, and help guide the team on architecture for a successful plan as part of that process.

he certainty factor goes down the longer you look in the future, but effective teams with decent product knowledge and experience should be able to create decent forecasts.  The rare good scrum master (or otherwise) will be able to provide both dates and certainty factors based on hard data (past velocity, team availability, etc).  I.e. you should be able to state with a stable team that you will get a major epic done, consisting of X stories and Y story points in Z months, with W% confidence.  This is all ideals, teams change and shuffle, but even some of that can be taken into account. 

Business/PO should understand changes after forecasts are produced are going to push back delivery, and you should have data ready to show them exactly how that works when the change is requested.  Good engineers and teams in general will stand their ground on this date pushing or feature dropping, again, backing it with data.  Those with the data should stand on it, hard, and ask the other party to produce data supporting their argument that the team will miraculously get more work done in the same amount of time. 

Business/PO also needs to have priority on features and stories so the team can show exactly what gets pushed off the end of the treadmill when something else is added.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
farox,3,"Yes, but a team that good gets by with trello as their sole project management tool.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
jldugger,0,"> You can't plan features for a dev team months in advance. You can plan deadlines, or features, but rarely both.

I'm pretty sure Apple does so on a regular basis. Probably all the big tech companies.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
farox,2,"Nah they also cook with water. Yes, they do know which big features are on the next iPhone. But all the little stuff around it... You just don't hear it as much as they don't announce everything. Plus buggy shit gets released all the time.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Owyn_Merrilin,27,"God do I love the startup life. The *least* true to the manifesto thing we do, ironically, is having standup meetings. Otherwise we just hash out what we need to do and do it, keeping the stakeholders up to date on our progress as needed, because we're competent adults and we don't have the kind of management overhead that makes software guys stop acting like software guys and start acting like paper pushers. It's also all internal apps for a company small enough that, even if literally everyone in the company had input in a given piece of software -- which they never do -- there would still be less stakeholders to go collecting potentially conflicting requirements from than there are in a lot of Enterprise products. 

I kind of feel like Agile was originally a description of this kind of wild west coding environment, that then got prescriptively applied to large companies where the bureaucracy was already so entrenched that ""agile"" just meant another set of rules.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
tendiesorrope,4,Start a large business and see if you can be truly agile and succeed... There's a reason it has to be hacked up into a hybrid. It's supposed to be team driven anyway,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,1,If you can change those dates then it's 100% possible.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,78,"> Agile Manifesto

Probably because every certified scrum master they've ever worked with that lived and breathed by that ~~book~~ poem just evolved the process into non stop meetings for devs and just wasted all their time.... 

Im not bitter or anything, no.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
TotallyNotBorat,20,"> Probably because every certified scrum master they've ever worked with that lived and breathed by that book just evolved the process into non stop meetings for devs and just wasted all their time.... 

Having flashbacks of seeing my Outlook calendar be nothing but WebEx links to meaningless status meetings and working 4-8 hours over just to break even on dev efforts.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,15,"But was your burn down chart looking good?!!!?! 

Fuck that red line.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
TotallyNotBorat,18,"*Slack notification*

HEY, SORRY TO BOTHER, I NOTICED YOUR PLANVIEW SUBMISSION DIDN'T QUITE ALIGN WITH WHAT WE DISCUSSED IN THIS MORNING'S MEETING. JUST WANTED TO MAKE SURE IT'S ACCURATE, OR IF WE NEED TO MAKE SOME ADJUSTMENTS.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,15,We should have another 27 minute stand up to discuss and talk about making adjustments!,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
TotallyNotBorat,9,And you bet your ass it's going to go 49 minutes over the scheduled time.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,11,Oh baby don't get me so excited.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
TotallyNotBorat,13,"""I know you guys are busy, but...""

Proceed with icebreaker and 36 minute team building exercise with coworkers I've known for at least two years each, and am on a first-name basis with.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,9,"Holy shit. The first time we were made to do one of those the scrum master made us get uncomfortably close to one another. 

It was this whole ""take a step towards the center of the circle if you XXXX"" type thing. 

Made us understand how much we hated retros from the first minute.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
TotallyNotBorat,1,"Dude, I had a scrum master that wanted me to contribute to our daily stand ups by teaching the team a new Bosnian phrase every day. (I was born in Bosnia, we came over to the states in the early 90s due to the war.) We also had a girl from India, and he wanted her to do the same thing with Tamil.

As you can probably imagine, people showed zero enthusiasm.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,1,"Wtf lol. 

Ours would spend 5 minutes each standup with a brain teaser and I'd just be like ""I could have used this time to go get my coffee...""",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
TotallyNotBorat,1,"Our PM is a big fan of brain teasers, too. She's at least likeable and respectful of our time, though.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Conradfr,1,"The amount of time we lost discussing how integrating the real world events in the sacred Scrum process ... agile has no meaning anymore.

Fuck Scrum.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,4,[deleted],2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
TotallyNotBorat,3,I just want to say that it's impressive you can remember your username.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
The_Hegemon,2,Who the hell ever logs out of reddit?,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Existential_Owl,1,"People with second accounts.

For reasons.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
comradewilson,1,This but expand it into a mini architecture meeting that also includes 5 minutes for people to repeat the same details and ask if someone else talked to so and so yet and blah blah blah,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
tahp_master,1,mine's orange,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,2,"Different, but not really, I like it.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
FormofAppearance,1,Mines blue,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
binaryv01d,3,[It's not a book](https://agilemanifesto.org/).,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,24,"Whatever the hell it is... 

Point is, every certified scrum master I've had to work with has created a work environment that is just straight up not efficient. 

In our case:

No one wants to sit in a conference room for 2 hours at the end of every sprint and have a retro and talk about feelings. 

No one wants to spend 6 hours every sprint planning when the product owner/manager should be handling Jira for the devs. 

No one wants to have entire team meetings to go over new features when it can be handled by the tech lead, a designer, and the product owner. 

Our company fired all the scrum masters 6 months ago because it wasn't working and they let the individual dev teams go back to what worked for them. 

For us its kanban with feature/release deadlines. For other teams they still do 2 week sprints and crank out work that way. 

Agile is not a one size fits all formula.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Riipa,9,"The problem is that agile (like many other things) is very appealing to the cargo cultists that love their rituals but do not understand their use. They celebrate the holy mass of Scrum/Kanban - but they seemingly do it in Latin without understanding what they do and say. 

Every agile trainer worth his money will tell you to get rid of every ritual that holds _your_ team back. Inspect and adapt + in cremental delivery are the cores of agile. Scrum, Kanban and every ritual within these methodologies are just tools that (as you said!) don't fit every team. 

Sprint retros shouldn't be about individual feelings, but about reviewing what went well and what went wrong and to adapt. In the smallest of my teams we have a 10 min retro within the hard 1h time cap for the sprint review. Not because this is ""the way""(tm), but because it works for this team.

6h sprint planning is objectively bad. Backlog grooming should be done by the PO before the planning.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,12,"> Sprint retros shouldn't be about individual feelings

And yet these retros would evolve into ""what do you FEEL went wrong this sprint"" and every single time it would be: 

1. too many meetings
2. TOO MANY MEETINGS
3. STOP INVITING THE DEV TEAM TO POINTLESS MEETINGS 
4. WHY IS STANDUP 27 MINUTES LONG
5. WE'RE LITERALLY IN A POINTLESS MEETING RIGHT NOW

>  Backlog grooming should be done by the PO before the planning.

Yeah, except in our case our scrum master required the dev team to sit in on grooming and then we had a separate planning meeting. It was batshit.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Riipa,4,"> what do you FEEL went wrong this sprint

This triggers me. Negative outlook combined with soft criteria.

For a ""normal"" type of sprint without any big wins or catastrophe I usually try to go for something along the lines: ""Did you come along any positives that you want to keep up, any negatives we can work on or do you have any suggestions what to try/start in the next sprint?"". Usually there are two or three points, we discuss for a couple of minutes and decide what to start/stop or what re-enforce (keep).

I really feel you for having to deal with such madness.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,3,"I've done agile where we had sprints, standups, retros, and the devs were shielded from all the planning processes and just left to work. It was great. 

And I've had experiences like what I described above. 

The bad outweighs the good at this point and if someone says they love agile I immediately question their sanity because more often than not it's done horribly imo.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
hsrob,2,"
>I've done agile where we had sprints, standups, retros, and the devs were shielded from all the planning processes and just left to work. It was great. 

Yes! My company and team has been getting much better about this, it's glorious to not have to plan nearly as much, I just get work and I do it, then do some more work. Feels good.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
PilsnerDk,1,"> Yeah, except in our case our scrum master required the dev team to sit in on grooming and then we had a separate planning meeting. It was batshit.

No, that was actually the correct way. The whole point of grooming is that the PO sits with the developers and discusses the upcoming feature requests/bugs/changes. You debate how stuff could be implemented, alternative solutions (simple or complex), where in the GUI it should be put, discuss conflicts it might cause, and developers might even say ""we already have that feature"" or ""how about this simpler solution instead"". Works very very well for my team.

Then at planning, which is a fairly short process, you chuck a bunch of already-groomed tasks/PBIs into the next sprint.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,1,"That is absolutely not the right way. Our PO should have groomed the back log himself and came to the team grooming simply to ask us to point the stories that have been prioritized. 

The enite dev team is not supposed to be involved in prioritizing/scheduling of workfeatures/bugs.

That's such a crazy waste of their time.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
binaryv01d,11,"The whole point of the agile manifesto is that it is not a fixed process. It is a very simple set of principles (outlined on that page). The whole essence of agile is that you should adjust your process to work for you - not be slave to a process imposed on you.

All of the Certified Agile™ crap has been invented around it by consultants looking to make money. Unfortunately this has made it very hard to separate 'agile' from 'Agile'.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,10,"> The whole point of the agile manifesto is that it is not a fixed process.

They all fooled me........",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,0,[deleted],2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
vassadar,1,Keep changing until it fit.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
binaryv01d,1,"Well, you're right that there is no concrete system that can possibly be said to fit the definition of agile, since the definition of agile essentially precludes that. However, unlike communism, agile-inspired companies have been pretty successful in the last couple of decades.

I find that most people who hate agile fall into one of two categories:

* They work at a company that has a terrible process and calls it 'agile'.
* They want to work in an environment where they are given exact specifications and can 'just code it'. They don't want to be exposed to the messy real world where people don't know what they want and requirements change.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Ray192,5,"> No one wants to sit in a conference room for 2 hours at the end of every sprint and have a retro and talk about feelings.

I'm pretty sure at least some of people who didn't like how the sprint went, would want to talk about it.

> No one wants to spend 6 hours every sprint planning when the product owner/manager should be handling Jira for the devs.

You'd rather have management task out stories instead of devs?

Management should help devs track progress as much as possible, but who is better than the devs in actually creating the tasks?

> No one wants to have entire team meetings to go over new features when it can be handled by the tech lead, a designer, and the product owner.

You don't think it's problematic that only those people get to go over new features and nobody else gets to have any input until presumably those people make some decisions?

I mean, nevermind the educational value of having the whole team understand all new feature requests (my development as a junior engineer would've been much slower if I had no insight into how features are introduced), surely some engineers would want to lend their expertise from the start even if they're not lead.

Do what works for you, but really, NO ONE wants to reflect back on what went? NO ONE wants to task out their own stories? NO ONE wants to go over new features except the tech lead?",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,-1,[deleted],2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Ray192,0,"> If devs should be involved then the meeting should be between the manager and the specific devs. 

Who determines ""should""? What about ""want""? 

Are people on your team just minions who want to do what they're told? Or do they have aspirations and goals beyond the tickets that they're immediately assigned?

And believe it or not, tech leads don't always perfectly know ahead of time who can contribute to a discussion and who can't. Shocking, I know. 

> Those long meetings where most people are idle for each item being discussed are profoundly inefficient.

I'm not talking about your assessment of efficiency, I'm asking if you really think that apparently NO ONE wants to be involved in thinking about new features. And a bunch of other things. 

It's obvious what you think. I'm seeing if you actually know what other people are thinking, or you're just projecting what your opinion is onto others.

> My current company does things quite well. I spend a shockingly large amount of time actually getting work done!

Do you consider helping other teammates grow their skills and careers ""work""?

Because I do, and I spend a shockingly large amount of time getting that work done. And it's worth it.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
comradewilson,1,">No one wants to have entire team meetings to go over new features when it can be handled by the tech lead, a designer, and the product owner.

Half of our team has spent the last month in ""architecture/planning"" meetings for a new feature that they keep rewriting and I swear the invite list grows every meeting

The only surprise is that the dev team hasn't begun to riot yet",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,20,[deleted],2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
dylan_kun,34,"Kind of serious, kind of joking.  To me it's an example of dogma thrown around by project managers.

There are some good ideas in there, for sure, but some act like these are laws of physics or something, when they're really just ideas/opinions,",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Farren246,17,"Counter-intuitively, doggedly sticking to the agile manifesto is, in itself, the least agile thing that one can do. They're rules to live by, but the most important of them is to simply do what works, not what you've committed to doing... even if ""what you've committed to doing"" is the agile manifesto.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
dylan_kun,5,So not just dogma but unfalsifiable dogma. :),2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Trasvi89,5,"Agile is a lot like a religion.

If agile isn't solving all your problems, you're not being agile enough.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Existential_Owl,2,"I'd rather doggedly stick to the agile manifesto than religiously execute every Scrum ceremony in the book without any sort of understanding of the *why* behind each of them.

But you'll never actually see teams do the former, it's always the latter.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Farren246,2,"It's much easier to schedule a meeting each week and stick to it than to actually adapt to changing needs, so it makes sense that most companies will religiously stick to the meetings. Laziness masked as best practice.

Scrum is the way it is in an effort to give people an easy to stick to plan that will help them to be agile, but if all you take away from Scrum meetings is ""good for me, I attended,"" then you're not being agile or even doing Scrum. Much like doggedly sticking to the agile manifesto without being agile.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
TheWetCouch,13,"If I understand correctly, he’s saying that the coworkers understand the manifesto, but they choose good working code over good practice, which Im pretty sure is a tenant of the manifesto itself. 

Might be something like “good code over good documentation” but Im not sure. You can google the manifesto its like 10 sentences long.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,4,"> he’s saying that the coworkers understand the manifesto, but they choose good working code over good practice, which Im pretty sure is a tenant of the manifesto itself. 

lol I think it's more that my coworkers understand that everything is a clusterfuck and any semblance of a defined process is laughable. 

I was told this week in fact by a senior dev, ""everything is chaos, there's nothing you can do"".",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
TheWetCouch,3,"Just about sums up proper Agile development lol. On the outside it seems fine, but on the inside its a mess.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
wayoverpaid,142,"Here's five questions I use to figure out if the agile process at a place is full of shit.

### How long are your standups?
Any place that says longer than 15 minutes and doesn't immediately follow up with their plan to get it lower is going to be a problem.


### How do you estimate story points?  
Places which rely on story points not being collaboratively decided should worry you.  Even more importantly, see if they try to map time to points.  Anywhere that thinks 1 day == 1 point or whatnot has missed the point, no pun intended.


### Do you measure velocity?  What are your goals to increase velocity?
If they don't measure velocity you should be *maybe* worried.  (I know great developers who think velocity is garbage and use alternate planning schemes, probe more.)  But if they measure velocity *and* they're looking at trying to get velocity up, that's when you should be really worried.  Agile velocity is a means for the engineering team to communicate expectations with management, not a way for management to whip the engineering team.  So this is a bit of a trick question since most people want to talk about how they're going to go faster, better, harder and this is a wrong answer.  The right answer focuses on increasing productivity, not points.


### Do you have retros?  What changes have come out of your retros?
This is one of the most important ones.  Does the team reflect on what works and doesn't?  If not, fuck that, get out.  And you want to know how if a retro ever caused a change.  If it didn't, either the team process is perfect (ha!) or they lack the ability to fix what is broken.

### If you have a shortfall, do you extend deadlines or cut scope?
Either answer is fine, but pay attention to places that insist they try to avoid doing both.  Remember, sooner or later you will get a task which is much harder than anyone thought.  If ""get it done on time anyway"" is their goto, you will have a bad time.  And even if you're that good that you can always do it, other developers will be writing shit code in those conditions that you have to support.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,20,"These are clear, concise, and simple questions to ask. Thank you!",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
wayoverpaid,18,"Happy to help.

I've been at those places where the mythical agile philosophy works, but it's kind of rare.  Usually people don't understand the point of agile, and if you don't understand the point, it's just adding process on top of doing what you were already doing.

Adding process while ignoring the people is basically the opposite of the Agile Manifesto, ironically enough.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
TotallyNotBorat,18,"> If you have a shortfall, do you extend deadlines or cut scope?

This is a wonderful question, but like you said, so many places are going to say they avoid both.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
wayoverpaid,8,That's fair.  Most places suck.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
captain_kenobi,7,"On the story points thing, I hate it when places decide that X points is the biggest a story can be and fit into a sprint.  It immediately throws the idea of weighing complexity out the window amd everything gets compared to ""can I get this done in 3 weeks?""  Pretty soon every task gets pointed based on how long someone thinks it's going to take.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
OnyxSpartanII,2,"The way we do it on my team is we estimate points based on a mix of complexity, effort, and time required. Some stories might be easy but time consuming because of reasons. Others might be complex but once you get the tricky bit solved, everything else falls into place.

If something is over what we consider to be a ""large"" story (using relative sizing here; think t-shirt sizes. Fibonacci numbers are just a convenient medium for XS, S, M, L, XL, etc), then we take that to be a flag that possibly the story isn't actually as well defined as we thought it was, or could be broken down further. Occasionally we'll have a story that really is just that complex, but not often.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
captain_kenobi,2,"I like that way of doing it.  My group refuses to accept the idea that points are supposed to be totally divorced from time.  If 13 is the biggest we're allowed to go in a sprint, then if someone thinks a story will take half a sprint then its automatically an 8.  A few days automatically makes something a 5, and so forth.  All we've really done is put in random numbers in place of a time estimate.  Except then we have to also put time estimates on the story.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
whateverisok,4,One hour stand-ups on a daily basis is insane! We average ~10-15 min at most for a team of 12 - some people speak a bit over the 15-30 seconds but a majority keep it under 30 seconds,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
wayoverpaid,7,"I usually see standup explosion as a result of people needing to validate what they're doing.  So rather than saying ""Still working on X, nothing blocking, still busy"" they go into the details of exactly what they did.

And if everyone else gives a 3 minute update to make it sound like they were busy, do you want to be the guy who talks for 2 minutes or 4?

You have to be clear that rambling in standup will not fly, or people *will* do it.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,2,"The team might also just be too big. 12 folks is a lot of people on a single team in a single standup. It pretty much forces updates to be trivial. It may or may not actually be possible, but I'd look at seeing if that 12 person team is actually two 6 people teams or three 4 people teams.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
jbristow,1,"IME the presence of validation seeking implies work that has been over siloed. The team isn’t communicating organically. This organic communication is usually killed by a team having too much work in progress. If the team is too big, then you are doubly or triply likely to have too much work in progress.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
wayoverpaid,1,"This is very common, yes.  I often see it happen when standups are used as way for engineers to validate their work to managers who have no contact with the team.

Standups are meant to be primarily team to team communication, and a safe place for engineers to say ""I am stuck.""  If I had my way the non-technical people signing the paychecks would be kept out of said standups and the focus would be primarily between teams working on the same stuff.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
superluminary,1,Good answer.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
yeamanz,1,"Damn. My last place _tried_ agile (and failed), and my current place does it well. These questions fit super well.

The last place tried 15min standups (always longer), estimating stories (strongly tied to actual time), and never took actions on retros. It appeared correct, but my new place does 15 min standups (usually less), story points are ""this is X hard"", and my manager and team actually do shit from the retrospective.

The story points are hard to explain, though. I do look at it ""time-based"", but it's relative to the person working on it (junior vs senior for example), the actual work required-time, and a guess. 1 story point is anywhere from 1 hour to like a day of _actual work_, not literally time. 3 is like...uhh maybe 2 days, maybe a week. But we all understand that and it still helps us at a high level.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,1,[deleted],2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
cougmerrik,2,"The reason points are not days is because you and I might have different levels of skill, so you might do 2x the work I do in some areas. It's okay for new people to take longer doing complex stories, and not everybody works at the same rate. The team as a whole has a velocity, and people work together on the backlog.

You can also use story points meaning complexity in a different way, which is that it can tell you which tasks are liable to be able to be broken up, but that may not always be three case.

As a scrum master, one thing I will say is I do look at long term trends in team velocity. If the team isn't motivated, ""real"" agile as a management process is easy to game as a developer. I need to know what may be causing changes to velocity over time because on a team where almost everybody is gaining proficiency and starting from 0 it *should* go up over time to a point, unless the team is changing how it is estimating.

But a 5 point story on day 1 should be a 5 point story on day 365.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
wayoverpaid,1,"So here's the problem I have with points = days.  It leads to viewing the velocity you *should* have.

Let's say that, for the most part, you always underestimate your tasks by a factor of two.  If you think something takes a half a day it takes all day, if you think something takes two days it takes four.

Well, if you have a two week sprint, and 1 point is one day, you should have 10 points (maybe 8 if you count for all the planning) per engineer per day.

In reality, you never have this much.  You have bugs, you have unexpected bullshit, etc.  So if engineers are getting whipped around for what they do, they start sandbagging.  And it becomes far too easy to assign points ahead of time to engineers, instead of viewing the entire team tackling the entire sprint.

It's ok to start with a point is a day when you're settling initial calibration, but the thing is that points should be unitless.  If the team velocity stabilizes such that they get 30 points a sprint done, they get 30 points a sprint done... you do not want to be sitting there going ""oh but they should be getting 50 points a sprint done!""

Mapping points to time also leads to the habit of giving bugs points, which you should not do.  Fixing bugs delivers no business value.  It's a drag on velocity that should be baked into the team's overall progress, not a source of credit.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
EnderMB,1,"On your Story Points point, this isn't a terrible way to start as long as you are tracking velocity AND are acting on it.

Rather than say ""one point is a day"", I used to equate one point to the smallest unit of actionable work I could think of (i.e. put some text on a page), and this point would count the time it took to go from start, to implementation, to test, to PR. Let's say (roughly) this took an hour.

We'd estimate based on some kind of points system, whether it was fibonnacci or shirt sizes, and track velocity while working. After three sprints, we'd adjust the value of a story point internally to match velocity, so we had a better idea of how much a point equates to in time. This made the managers happy, and most importantly meant that developers weren't tied explicitly to time.

It wasn't a perfect approach, but it did mean that the developers could estimate freely, and that the managers could make projections of how long a project would take, and what we'd need to iterate on.

It might not have been strictly scrum, and might have been more of an iterative process over an agile process, but it worked nicely.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
wayoverpaid,1,"This is exactly doing it right.  The point about velocity isn't that each point equals a certain amount of time, but that the *team* as a whole gets a certain amounts of point done per sprint.

You might think ""oh that's an all day task, 5 points"" and in reality it on average it takes two days because of other bullshit, but if the team velocity converges, managers can now start to make estimates about when work will be done.

The agile process is iterative.  Point 11 and 12 of the manifesto is basically that your team should self-organize and tune itself to something that works well.

Saying ""This is SCRUM and we shall do it exactly as the handbook says"" is not always a good idea.  SCRUM has some good practices, but you have to be aware of what's working and not working for your team.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Smokester121,1,I think another good edition is checking if they are grooming in a set cadence. Having Devs take time to see what's on the horizon is a good practice.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
snowe2010,1,We did all those things including fixing stuff mentioned in retro and it resulted in us completely getting rid of agile. I really think that agile just doesn't work.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
wayoverpaid,1,"What does your process look like now?

Do you still have retros?  I'd love to hear what a retro-focused team settled on.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
snowe2010,1,"Sorry for the delay. 

We're currently transitioning to [ShapeUp](https://basecamp.com/shapeup), a methodology by BaseCamp. It focuses on the fact that certain people shouldn't be dictating how stuff is done, because it takes longer, but that other people do need to decide on what direction the business is going. Another thing it focuses on is that 'sprints' are not a sustainable form of work. Nobody can work that way and deliver high quality software. 

Since we're in the transition stage we still have things like retros, standup, and show and tells. We've just started our first Cycle (essentially sprints, but longer and with a nice rest period, known as a cooldown, at the end) and we're actually starting with the cool down, which means that everyone in the company is currently working on things that they want to work on, but not really in a rush or even being told to do it. 

It's a bit hard to explain, so I'd recommend reading that book and seeing what you think. So far I really like the idea, even though as a company we are still in the transition phase and so the process isn't perfect. For example, people still don't know how to craft Pitches and as a result the cycle is going to be a bit more difficult than it should be, but our management understands that and so I think the methodology will work out in the long run. 

It's definitely helped with morale.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Johnny_WalkerBOT,1,"I was on a long-term project for years, and the PM failed every one of your questions the entire time.  At first we had two standups a day, and they would often go for a goddamned *hour*.  He equated 1 point to 1 hour.  No velocity was ever measured or even mentioned.  No retros.  We also had hard deadlines for every development task, quite literally ""get it done on time"".

It drove me absolutely batty and I complained about it constantly.  Over a few years, management put pressure on him to actually conform to an agile process, but he undermined it at every turn, promising deadlines to the client, ignoring points, velocity, everything.  Worst project ever.

We both still work for the same company, but I refuse to work with him on projects.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
torofukatasu,1,this is excellent.. sounds like you've worked in both kinds of places :),2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
tuxedo25,83,"To address a couple of your point specifically,

\- Hard dates are a reality of the world. There are a lot of moving pieces in a company and IT, marketing, and customer support can't be hostage to product saying ""it's done when it's done"".

\- Team autonomy is a good thing, so if another team wants to do Kanban, who cares? Why does it impact you?

I hate agile as much as anybody *can* hate an inanimate, emotionless process. The fact that there's an entire industry of agile consultants out there is prima facie evidence that it's a system that's too hard to do right. But it's the one we're stuck with. So be the change you want to see in this world. Hour long standups suck, so take charge and shave them down to 10 minutes. Volunteer to be the scrum master, go get scrum master training (tm) (c) (r) (patent pending) if that's what it takes to run the standup meeting. Sprint planning can often be shortened if the trinity (architect, dev lead/mgr, product manager) has a pre-planning meeting first. You don't need to commit every hour of every day in sprint planning, aim to commit to a baseline of work that meets the business needs. Unexpected stuff happens (firefighting, a sick day, the CEO is giving a demo, or some task is way easier or way harder than it looked) - the point of agile is to acknowledge that those things happen and to steer into them. Make sure you're giving yourself enough flexibility in the sprint to deal with uncertainty, otherwise you create an unsustainable, stressful situation that encourages people to pad estimates and misreport status.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
mtcoope,76,In my experience 95% of hard dates are made up hard dates that have no correlation with the amount of work or how much time the work will take.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,26,"My shop only does hard dates for legally required changes. We're also in a highly regulated industry which means that happens somewhat often. At the moment I think we have 5 tasks out with a hard date on them.

It is bliss.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
tendiesorrope,10,The hard dates are supposed to be estimated by leads and managers who understand the process. And the hard dates typically can change as long as you communicate why it needs to change in advance.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,11,[deleted],2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
tendiesorrope,4,"Show initiative, become the lead, handle the process, grow your own team.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
ryuzaki49,6,Yes but usually those hard dates are set up by people higher in the chain of command.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,14,">  Hard dates are a reality of the world. There are a lot of moving pieces in a company and IT, marketing, and customer support can't be hostage to product saying ""it's done when it's done"".

I think this is a more wiggle room than multiple hard dates on a calendar though. The entire idea of defining a velocity is to say what a team can deliver given their past history and thus develop a ""normal capacity"". If you can find that velocity (thus define a team's past performance) then you can realistically plan dates in some fashion. But in this case velocity is not defined and thus hard dates are antithesis of what agile is trying to accomplish.

> Team autonomy is a good thing, so if another team wants to do Kanban, who cares? Why does it impact you?

I'm assigned to multiple teams.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,12,[deleted],2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,7,"It's pretty common here. We have lots of people who work on separate feature teams and the managers just accept it as normal. For example we have a native iOS app and only 3 iOS devs for 5 teams.

I myself am on 3 teams on the org chart and they think it's completely normal.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
NotMyRealNameObv,19,"> I myself am on 3 teams on the org chart and they think it's completely normal.

lol

*cries as architect*",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,2,Teams belong to features? That's weird in itself.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,1,"Yeah, is that not normal? I honestly don't have much of a frame of reference lol.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
SeniorPeligro,4,"It's a matter of size I guess. I'm working in a large e-commerce company that has around 800 devs, and many teams here consist of frontend, backend and mobile devs together, focused on one feature.

The thing is, if you work in one team, there's no space for working in others.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,3,Maybe my org is flatter than most. We have 18 devs all in one team. When a request comes in there are people who are subject matter expert on each piece of the system but I could hop in and work on almost anything if need be.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,8,"That doesn't work when you get to 30-50+ engineers and multiple medium-term projects that demand some commitment to design, then you need specialist teams and another structure to keep them steered in the right direction.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
zelmak,2,sounds like you guys need an IOS team that works on all features together,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
ComebacKids,2,"What happens to the velocity stat when the team changes? At my company we recently lost *the guy* for one team. You know the one. Gets all his work done on time or ahead of schedule, somehow knows everyone else’s tasks better than they do. Wozniak bless him I hope he’s happy in his new job. 

But anyways- losing him is without a shadow of a doubt going to affect that teams velocity. That’s an extreme example though- it seems like every time any team loses someone, even an average developer, that will affect velocity. And we’re in an industry with fairly high turnover, so how does someone reliably track their team’s velocity? 

Genuinely asking because I have no idea.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,2,"Well the ""on paper"" standard is that it takes 3 to 6 sprints for velocity to stabilize. So being that my company does 2 week sprints that could mean if a person leaves or is introduced to a team it could take up to 3 months for velocity to stabilize again. But then if that person is brand new to the company there will be ramp up time so the first few sprints they are in won't count, so that would be more like 4 or more months for a new hire.

I have only worked with smaller teams but I wonder what would happen if you on a larger one that had a larger turnover. That would theoretically mean that velocity may never stabilize.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,1,"issue is most teams develop like apes in a cage, and management things if they just go 'agile' and measure points that will change things that make even waterfall unweildly and unpredictable",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Aazadan,3,"To make this a little more succinct.  Agile works best as a loose framework.  Most companies are going to have hard deadlines for product launches, that's just the nature of business, but in getting there you want a general workflow, not something where every task is broken down by the minute.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Esseratecades,1,"In my experience the vast majority of hard dates are decided without consulting those who actually have to deliver. Thus, they are promised with minimal(if any) knowledge about how long whatever's being promised actually takes.


I don't think Agile is hard to do right, I just think most people like to cut corners, and then blame the process when things don't turn out as expected. Literally every person I've spoken to who's had some gripe with Agile has either been working on a team where their managers/teammates were bad at some part of their job that they should be doing no matter what their methodology is, or they've been doing something un-Agile and calling it Agile.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
snowe2010,1,"We've begun to transition to ShapeUp due to the numerous issues we encountered with agile. And yeah we followed the ""change stuff using retro"" thing to a T, which is why we ended up switching to ShapeUp. Agile just doesn't work. Hopefully we'll do better with ShapeUp",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,26,"My current company also ebraces a hybrid of ""agile"" with some scrum and kanban features. I thought it wouldn't work out well but damn it is really good. I can't exactly tell why, so perhaps I can share a bit details with you.

I started off in a small team of around 6 people doing daily scrum and a weekly meeting. Things were quite efficient until we grew into over 15 people right now. Daily scrum feels so long and weekly meeting seems pointless with so many people there just doing their own thing.

Later, my company's CTO figured this is bad, and now we have changed - daily scrum is abandoned, and weekly meetings only involves the 2 leads in the team with other department. Every tasks are assigned via Jira / Trello with priority and deadlines given. We simply report to the lead once every week, and we do a weekly retrospective for about 1 hour within the smaller tech team (frontend / backend) to reflect on the bugs and errors occurred the past week.

The Agile part? Our product team will keep sending us emergency bug report / feedbacks from clients on slack that we need to work on immediately apart from what is already on Jira / Trello. But these are usually small fixes that can be done within 30 mins.

I feel so relaxed and the deadlines are met all the time. I get to focus on my work without thinking about all the meetings. The team leads manage the progress well and features are delivered constantly without problems. Everyone's happy. I don't know why but it does sound like fantasy in my current company. I just worked here for about half a year and totally loved it so far. Hope this shed some lights on the matter I guess? Maybe Agile is not all evil afterall - it really does depend on the higher management.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,4,"Similar story except our large team is broken down into pods and each pod has its own standup that lasts less than 15 minutes. We only have about 4 hours of meetings every 2 weeks, which isn't too bad. It's agile done right.

We do have deadlines for certain features but they are months apart and I never have more than one deadline to be concerned about at a time. Everything in between is completely agile.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
superluminary,1,"Clear expectations and clear features without flip flopping from one emergency to the next. That sounds like agile to me. 

Agile is not about the ceremonies, it’s about the steady, sustainable pace with no tech debt.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Conradfr,1,"In my previous team (I was the lead) we did something a bit like that.

Basically no stand up, a max one hour weekly meeting with the product owner to ""groom"" and see incoming tickets and discuss anything.

Adapt to fixes or unforeseen demands during the week.

Leads have a separate meeting to coordinates (teams organize as they want, Scrum, Kanban, whatever).

We were very productive. My team went up to 15 people and it became a bit difficult for me to balance reviewing PRs and managing people.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
ryuzaki49,-1,"> until we grew into over 15 people right now.

That's because the team is bigger than the recommended. 

An agile team is usually 3 to 9 people, including Scrum master and Product owner.

Anything more than that it's not an agile team, and you need to do either Scrum of Scrums or Nexus. 

I imagine no one in your company is Scrum certified, otherwise they would have pointed this out.

Edit: Before downvoting my comment, read the Scrum Guide. IT specifies the team size. So I'm not stating my opinion, I'm stating a fact.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
etiggy1,41,"IMHO work processes are complete bullshits, each and every one of them are merely wet-dreams of project managers who are desperate to appear to be in control. At the end, the only thing that's gonna matter is how competent the people who do the actual work. 15 years I have been working at various corporate offices at countless projects, 15 years and counting, i have yet to see one workflow the managers presented and jerked off to, that made any difference. The only thing that have ever made a project successful or doomed it to failure were the people actually working on it. It is all about the grunts, it is all about competence, willingness and their desire to accomplish something meaningful. The best thing managers can do is to anticipate roadblocks in advance and clear them out before they jeopardise the daily work of the people who actually do the freaking job. Most of the time the exact opposite what happens. You know when you end up with a good manager by the fact that you barely notice him or her, and miraculously, you have all the requirements to do your job waiting for you at your desk without ever having to ask for them.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,9,"What gets me about is agile is if you ask people 5 what it is and how to do it, you get 6 answers. Everything from ""it's not a process"" to ""it's a defined process"" and ""you don't need person X on staff"" to ""if you don't have person X you are doing it wrong"". 

I don't know what is wrong or right and honestly I'm ok with that. What I'm not ok with is that I have seen it fail spectacularly twice in two different companies, and it is indeed something that project managers use to be in control.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
yazalama,3,"My scrum master literally does nothing except call our names in standup and occasionally put us in contact with someone we need. It's not really his fault, it just seems there isn't much for him to do because my team works well together and knows how to split up work and get things done. Also, we have so many 1 hour long meetings that could be 15 mins, or replaced by an email, all because we're Agile.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
WukiLeaks,2,My scrum master and agile coaches tell me it’s the scrum master’s job to get the team to a point where they don’t need a scrum master and the scrum master can move to another team. Sounds like your scrum master needs to move on.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
__sad_but_rad__,4,well fucking said,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
LateralAction,3,Worth its weight in gold.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
baibubbles,18,"Process > lip service

Fuck talk",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,9,"Practices >> Process

Process is the death of collaboration and creativity, imo.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
KevinCarbonara,8,"This argument is purely semantical, which is the real death of collaboration and creativity",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
baibubbles,4,"Yeah I mean practice and process*, not like rule following",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
BlueAdmir,2,Working > Talking about working.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,70,[deleted],2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,-8,"So I'm assigned to multiple teams. How do I assign story points on one team and then another is Kanban, and how should I tell people when I can deliver work if there's no velocity?

Also we don't have anyone acting as a scrum master and without business analysts we have 0 idea as to what features are supposed to be prioritized for the customer. 

Did I mention that I do backlog grooming for my projects because no PM's are doing it nor are they prioritizing work?",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
fragmede,15,"In that case, it sounds like the vetting process for how *you* want your next job to be revolves around having a scrum master and having it not be you. (Which is fine, it's not my favorite kind of work either.) Possibly also a project manager that also isn't you.

Just talking to the company about their practices will get you closer to what you want. Who plays the role of the Scrum Master, does that person have other responsibilities, and who is responsible for talking to customers and prioritizing features.

There are companies places more rigor and less chaos that you seek, but it's not for everybody, nor is it everywhere.

As far as backlog grooming, if you want to find somewhere where this isn't your responsibility, just ask during your on-site who's responsibility it is, but personally it's like sharing the chores at home. I'm not super excited to take out the trash so I'm happy when it's not my turn, but I still do it when it's my turn, with only a little bit of whining.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
tendiesorrope,3,"Why can't you groom your own stories? Why don't you understand your customers needs? These are basic competencies all devs needs. A PM and PO helps take them over, but you don't NEED them if you have some other skills.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,2,"I can groom my own stories, it's not a problem. I'm grooming the backlog for *my entire project* that has 200+ tickets in the backlog. That's a problem. This week I closed out tickets that were filed in 2017.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
isakdev,7,That...doesnt look agile. Why are you making stories that far in advance? Are they not revised when picked up?,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
MinMorts,1,"sometimes you make tickets, they get pushed off the backlog (various reasons) for next wave, and then noone ever gets round to them, till someone says, whats this on the backlog? so 2 years later you end up having to do it",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
tendiesorrope,7,"Entire team needs to groom all stories or many devs fall behind quick, need handholding, and slow down the team.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
superluminary,0,Closing tickets from 2 years ago? That sounds more like a deliverability problem.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Freonr2,9,"Uncle Bob's latest book is very solid.  It really focuses on what is important from the core values an ideals into specific practice.  I highly recommend it. 

> ""Agile"" has been a complete failure if every company I've worked for.

Agile is the worst project management system for software engineering *except for everything else that has ever been tried.* 

SAFe is a slightly worse system tacked on top of scrum.  It's potentially workable. 

LESS is a way worse system tacked on top of scrum.  It's a disaster used by companies unwilling to truly ditch their PMP playbook. 

> We do ""Scrum"" with story points (yes we actually call it Scrum)

Scrum is a specific implementation of agile ideas.  I don't see this as a problem. Not sure what you're trying to say here.  Calling it ""scrum"" doesn't seem like an issue to me. 

> We don't measure velocity

This is not good.  Velocity is the key to forecasting delivery.  It is also a control that keeps you from having ""crunch time"" at the end of a ""project"" or large feature set. 

In a system like SAFe the last sprint in a ""PI"" can easily turn into crunch time every time when velocity is not properly used or handled. 

> There are no business analysts

I don't necessarily see a problem.  Typically the Product Owner is typically handling business analysis, and writing acceptance criteria to cover needed business functionality.  If the acceptance criteria are insufficient or change mid-sprint (or after starting a story in kanban) then there is an issue and its part of the engineer's responsibility to push back if changing criteria become a problem by telling the PO that they need to write a new story to handle the change after the current work is done.  This is a negotiation and not set in stone on exactly what a ""change"" constitutes from an engineering perspective, and better engineers and more experienced folks on the stack and business will see problems during planning/grooming to avoid having conflict later.  If the PO cannot do this on their own hiring BAs or technical analysts is not a bad idea.  I might suggest these resources exist outside the team if you get to that point, but this is highly dependent on the nature of the work so I hate to generalize too much.  I worry a bit about putting BA resources inside agile teams since it leans you towards waterfall or mini-waterfall vs TDD/XP practices. 

> There are no scrum masters

IMO, if anything is unnecessary about scrum or agile it is the presence of scrum masters.  I find too many are former, unreformed project managers that still want command and control over things.  I don't think the SM role is required, though can be helpful.  I've personally seen too many scrum masters come from PMP world and don't take to the removal of their former command and control very well, and tend to be bossy or over-prescriptive.

I'm not saying it is an absolute, but I've worked at companies with no SMs, shared SMs (2-3 teams per SM), and 1 per team.  1 per team is the worst, every time.  I believe it is rarely a full time job per team, and that may lead to the SM getting in the way trying to justify their FT position for that one team. 

> Some teams do Kanban for some reason?

Don't necessarily see an issue with this.   Each team may want to pick scrum or kanban based on the nature of their work.  Scrum and kanban are both very common implementations of agile principles.  Both can be good, and not every team has to pick the same method.  

> Daily standups that go an hour, sprint planning, and sprint review meetings

Sounds like standups are not being done properly.  I'm not sure what you mean about the later two items, but an hour planning every other weeks seems reasonable.  Sprint review (demo) of an hour sounds a bit long, but not a massive alarm bell without being present to see what is happening. 

You should speak up when your standups hit 15 minutes, or if people start long back and forth conversations--ask if you can dismiss yourself to get back to work, bring up in retro (if you have one) that standups are taking too long and negatively impacting work.  There may be other issues to be handled that are causing the standups to drag on, but without being there or hearing more its hard for me to specify. 

> When I bring up the Agile Manifesto people literally laugh at me

Hard to gauge how exactly your conversation is going here.  

> On top of all this shit are hard dates for when features will be released (!)

Good teams with measured and consistent velocity should be able to create forecasts for feature completion.  The team should agree to dates, and possibly even give data-driven confidence.  This is where a good scrum master will do their job (though I'm still skeptical this is a full time job per team).  The best agile teams can forecast a few months out with fairly high confidence.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
WukiLeaks,1,What book is this?,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Freonr2,1,Clean Agile,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
sethg,9,"The point of Agile methodologies is to make a software team capable of responding effectively to surprises like “a feature that we thought would take two weeks to implement is actually taking two months,” or “our rock-star developer quit without notice,” or “a very lucrative customer told us that the feature we had 90% implemented wasn’t really important any more but could we please implement this *other* feature which is *really really important*, like, it needs to be in a hotfix two weeks from now.”

So, the next time you interview, ask them how their management would respond to such surprises. Better yet—this is called “reality-based interviewing”—ask them describe what happened when a company *did* get such a surprise: how they responded to it, how their form of Agile helped or hindered their ability to respond, and how (if at all) they have adapted their way of doing things to be better-insulated against such surprises in the future.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
sonivek,7,"I’d seriously scrutinise a company’s process for adding work to the pipeline/backlog, and how it’s developed and eventually released; you’ll quickly see if a company is doing agile in name only, and also if you could see yourself working within their processes, or even just how chaotic their work process is",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,7,[deleted],2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,2,"Yeah, unfortunately neither of my last two companies had any sort of agile training. We just basically said ""ok we're agile now figure it out"". 

When my current company made the switch everything went down in flames and the president, all of upper management, and head of customer support put the entire dev team in 1 room and chewed us out for 3 hours. This caused a mass exodus of top level developers, at least 30% of the entire team left.

The CEO, realizing the mistake that was made eventually fired every single top level manager that was in the room that day, including the president. Startup life, it's always fun!",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Zenai,17,"Agile is a myth. Every iteration of the workflow requires a huge amount of ""do what works, dont do what doesnt work"" to the point where what is left is not agile at all. It is infuriating to me that people still have daily stand up meetings when they are a huge detriment to both productivity and developer autonomy. They also drive people to incorrectly wait to say or do something until the next stand up meeting. Its miserable.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,2,"Our stand ups are as follows:

“what did you do since the last stand up?""

""the thing I told you about yesterday""

""what are doing today?""

""the thing I told you about today""

Then we talk about blockers and if we're blocked by someone else they will have to estimate the work and put it into their next sprint, so you remain blocked until then.

""Responding quickly to change"" my ass.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,1,"Why is ""developer autonomy"" desirable?",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Zenai,1,"why would you not want a developer to be autonomous? that is the definition of a good developer is one that is independent and self sufficient, a great developer is independent self sufficient and then also brings the level of the team up by helping others on top of that.

you want engineers who don't require direct supervision and you want to be able to assign work to them and know it will not only be completed but that it will be completed with care and quality.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,0,"Because when most developers say this what they really mean is they want to go off on their own and write code of their own choosing. Commercial software development is a team sport. Lone wolves are rarely worth having around, contrary to what they like to tell each other on the Internets.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Zenai,1,"this could not be further from the truth in the startup world. i really stay away from ""enterprise"" software development as much as i can so i can't really speak to that. it seems to me that it would be valuable to have trustworthy and reliable engineers that do quality work consistently no matter where you are though.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,-2,Riiiight.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Zenai,1,"do you disagree? i'm totally open to changing my mind on this but i haven't seen any real argument against what i'm saying. just that you don't like ""lone wolves"" but that's not really what i was advocating for.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
tuxedo25,1,You made up an inaccurate description of autonomy and attacked it. Great strawman.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
michael_bolton_1,4,"imo ""agile"" is just splitting up your delivery cycle into [somewhat] manageable chunks, delivering something ""real"" - as in demonstrable and testable often and digging deeper into the requirements at every iteration and delivering against those in the next cycle (sprint or whatever you want to call it).

the methodology while not being ideally suited for every situation has affected how things are done pretty much across the board even if the org doesn't claim to be ""agile"". 

things like having tasks assigned to you before you even know what exactly needs to be done and agree that you can deliver by day X seem pretty unfathomable these days while this was the norm not tool long ago.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
HashFap,46,"Agile is more than anything a management innovation where they coerce you into agreeing to an unrealistic time frame for completing tasks under explicit and implicit pressure from the top. Once you agree to the time frame, you and only you are personally accountable for not delivering your stories in time. This way blame is always offset to developers form management who can just say ""you didn't work hard enough.""

So many of the practices in this industry are about creating the false perception of autonomy and ownership over one's work to paper over the relations of coercion and manipulation that exist between management and developers.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
enkidu_johnson,9,If I could cram that onto a tee shirt or a bumper sticker I sure would. Well said!,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Freonr2,7,"Velocity and forecasting are a big part of scrum. If you do it right it's great.

I do think many companies and project managers will hijack it.  In particular a big mistake is trying to use velocity (or velocity trends) as a measure of productivity.  If that happens then sandbagging and overestimating just happen, whether consciously or unconsciously, and then your forecasting suffers, losing the intended value/use and actual potential of it for good.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
wayoverpaid,2,"This.

Velocity is descriptive.  You use it to figure out how fast the team is going so that you can make clear estimates about when stuff will get done.  The fact that velocity tends to average out to a constant-ish value is nothing short of magical, and once it does, you should be very pleased you can now figure out you have 50 points of work and 30 points velocity and thus have a good idea what you *can* and *cannot* get done next sprint.

Managers seem to think velocity is like a sales goal.  Oh, we shipped 30 units of software?  Great, let's try to get to 35!  Come on team, by setting higher and higher expectations we can demonstrate growth and value.

No.  Doesn't work like that.  30 points of software is abstract for a reason -- it is how hard your team thinks a task is.  When teams get better, they tend to cram more software into less points and it balances.  There is no absolute value the way there is for sales.

And the outcome is exactly what you say.  Sandbagging, followed by a loss of ability to introspect.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
senatorpjt,6,"quarrelsome middle summer sable water price physical deranged angle gray

 *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
wayoverpaid,6,"Yikes.  The times I've used velocity it was always a team metric.  Individual velocity was never viewed as a thing since I didn't want to punish someone for spending all day on a bug worth zero points.

Velocity can stabilize for reasons besides sandbagging",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Freonr2,1,"Consistency is important.  It's very hard to run a business if you cannot forecast delivery.  Software is a means to an end, not the end in itself.  Engineers still serve the business. 

The point is everyone puts in an honest 40 hours without burning out and you figure out how much software/complexity units that averages out to.

> Now if I catch myself being excessively productive, I have to worry that I'm setting an expectation that I will consistently be that productive

If your personal productivity for an entire two weeks is so high or low that it throws the entire team's ability to produce a somewhat consistent velocity number out then I'd seek to figure out what is really causing these wild swings in productivity.  In a team of several people and over the course of two weeks, a few exceptional days shouldn't set yourself for failure in the future.  I'd talk about why you got more done in a week where productivity spiked in your retro.  Humans are not always going to be roboticly productive, but again the point is to spot the trend, not anchor to your highest point.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
senatorpjt,1,"lush squash unused lavish summer lunchroom violet wild jar test

 *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,1,"Man, I feel this. Early on in my career before agile even became a buzzword I adhered to the principle of giving a company a normal baseline of effort. I learned early on that firing on all cylinders from the day you walk in the door will lead to burn out. 

But now that everything is tracked that's even hard to pull off just as you subscribed.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
live2post,18,This is why class consciousness is important. If more people were truly cognizant of the relationship between employer and employee this would be less of a problem.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,0,How would this be less of a problem?,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
live2post,15,People would be less willing to put up with that kind of treatment. That's how unions get formed.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
HashFap,9,"Absolutely. Owners and investors with empty offices and laptops sitting on desks don't write code and produce value, we as developers do. It's about time we get a bigger piece of the pie of value we create, and more control over our work conditions. The only way to do that is understand our collective class interests and act on them.

They need us more than we need them.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Aaod,9,The industry shifting towards open offices despite this being awful for most coders is good proof of this.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
NotMyRealNameObv,3,"If you commit to hard delivery dates, you're doing agile wrong.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
wayoverpaid,12,"You can commit to a hard date if you are flexible on scope.  

You can commit to a hard scope if you are flexible on date.

If you commit to defined scope by a fixed date, shit might get fucky.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,4,[deleted],2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
wayoverpaid,3,I hope you get paid plenty because I could never hack that,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
captain_kenobi,1,Our only product is delivered to the customer on a fixed date with a fixed scope.  Things are very fucky.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
daedalus_structure,6,"If you ____, you're doing agile wrong. 

When ____ can be pretty much anything and pretty much everybody is ""doing agile wrong"", it's not the people that are the problem it's the process.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
PilsnerDk,1,I disagree - the agile part of it is how much you deliver on that hard delivery date. Let's say you agree to releasing in three months - every developer team can do *something* within three months.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
NotMyRealNameObv,1,"Yes, but then you haven't committed to what you are releasing.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
PilsnerDk,1,"Personally I've never been fan of terms such as ""committed"" or ""promise"" when it comes to software development. You never know...

Heck, in rare cases you have to ditch entire features if they turn out to take a lot longer than expected.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
NotMyRealNameObv,1,"Exactly. It's only an estimation, which needs to be updated continuously, until it us delivered and all boxes in your DoD has been checked.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
PilsnerDk,1,"But the problem is that I've never had a manager or worked for a company that accepts ""it's done when it's done"". They always want estimates in hours and a fixed, ultimate deadline to work towards.

Even though I'm a developer, I think it's fair to set deadlines. Otherwise developers would just slack and spend too much time on technicalities. That's just my theory.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
_145_,5,This is pretty cynical. Agile is about being flexible. Software development can pivot pretty quickly and so it makes sense to build thing in small chunks where you reevaluate between each one.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
HashFap,11,"In practice, that flex only seems to come from developers. 

Agile only makes sense to me in the context a team that collectively owns the code they're working on and democratically calls the shots about it. As soon as there's a hierarchy of management involved with their arbitrary deadlines and complete lack of real knowledge about the code, everything goes to shit.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
djnattyp,2,">As soon as there's a hierarchy of management involved with their arbitrary deadlines and complete lack of real knowledge about the <product>, everything goes to shit.

I feel like this is one of those things that should just be obviously true, yet seems to happen all the time....",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
_145_,2,"Software dev with bad people will always go to shit. Agile won't save you. But if you're trying to build a start-up by drafting requirements, getting bids, having some eng team you never talk to go disappear for a year and come back with your software, you're going to be mega-fucked. It's far better to go agile and realign all the interested parties on a weekly or biweekly basis. It's better to be flexible and build incrementally.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Gnoll94,1,The job of the PO is to shelter the dev team from upper management and shareholder deadline crunch and stress. A good PO will alleviate the stress of deadlines from the dev team atleast from the upper management level.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Max-_-Power,1,"This is not exactly wrong but you have picked out all the negative aspects and hold them against the concept. There is more to working agile than that and if a company is truly agile, all the negatives aspects you have mentioned are mitigated.

I have seen it work greatly. I also have seen companies fail at it. In the end it depends on the work environment. Are the employees *asked* to work agile because management has a deep understanding of the benefits or is it just a fad or trend for them to follow?",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Esseratecades,1,"That's not what Agile is about, it's just how a lot of places have chosen to pervert it. The idea of the sprint(what I'm assuming you mean by the ""unrealistic time frame"") at it's core serves as a check for whether or not assignments are too large, as well as providing an opportunity to create more in depth feedback on a team level. In a truly Agile environment, nobody just says ""This thing needs to be done by the end of the sprint."" because that'd be crazy. They instead look at what needs to be done, and how long it will take(see story points), and if it's too much then it shall be broken down into smaller and smaller tasks until these sub-tasks are at a level that one can realistically complete some of them before the sprint is over. If for whatever reason they cannot be broken down to that level of granularity, then you have proven that it will take longer than a sprint to complete them, and that should be understood by all relevant parties.

No matter what process you use, ""Do this in two weeks or else"" is shitty management.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
ashishvp,0,"That is most definitely not what Agile is about. Your company just isn’t doing it right. 

Agile is a fantastic tool and I’m amazed there’s so much cynicism towards it on this sub. But any tool can be used improperly. 

As a CSM, I can no longer even think of working in any other way. 

If your team is being forced into deadlines and time constraints, you’re not really doing Agile. You should ALWAYS have the freedom to carry over work into the next sprint if you have to.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
rudiXOR,11,"Scrum is often used as a framework to (micro)control developers. Often they try to make you a replaceable resource. Especially the agile manifesto works for a team of very smart SWEs (like the inventors of the manifesto) and particular for it-consulting and it-service companies, not necessarily for  product companies.

In my experience Scrum in product companies is often misused to increase the pressure onto the devs and to shield them from other interruption. Some companies adapt the process kind of well, some don't. I don't think it's a silver bullet, which should be implemented exactly as proposed. I think every process should be there to make working better, not as a huge overhead, that's why I prefer Kanban in small teams. I think the most planning poker is a waste of time and ""velocity"" is just an illusion and a self-fulfilling prophecy.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
squishles,1,"> for it-consulting and it-service companies

not always you'd be surprised what a contract can do to fuck that.

> and ""velocity"" is just an illusion and a self-fulfilling prophecy.

it's supposed to be an illusion by design. It's not a management cost/time estimation tool. It's why say a 3 point story doesn't have a hard definition. Every company inserts those definitions eg a 3 point you're expected to finish in 2 days, but that's not a stipulation of the process because your not supposed to do that. It's basically a team self reflection tool, it can be used to check if something significantly fucked is going on not much else.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
elus,6,"I don't bother asking them to name their methodology because most places won't even follow it.

Some questions I ask:

* What does your standard delivery workflow look like?
* How long does it take to release?
* How big are releases?
* Are unit tests automated?
* How does the business perform UAT?
* How is success on a delivery/project measured?
* How many hours a week do you typically work?
* How often do you have to do overtime?
* When can releases be scheduled? (Day vs night, weekday vs weekend, monthly, etc.)
* How is work prioritized?
* Who can override the priority list?
* Who performs deployments?
* How are deployments performed?
* What artifacts are required before a deployment is performed?
* What kind of documentation is available?
* Who writes the documentation?
* What kind of meetings are involved in a delivery cycle?
* How does the team handle bugs/rework?",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
thatVisitingHasher,5,What are looking for that you're not getting?,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,6,"A week that goes by where someone who has never written a line of code in their life isn't causing constant fires to put out due to poor planning, siloed communication, undefined processes, and unrealistic expectations who says this is all ok because ""we're an agile shop"".",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
thatVisitingHasher,6,"ahhhh. Good luck. Those things happen in places that aren't Agile shops. It's just not documented each week with stories and deliverables. People just talk about it around the coffee pot. I work for a fortune 500 company that calls itself a technology company. Not one VP has ever written a line of code. I use to think ""old developers"" just didn't have drive. Every year, I'm realizing they've watched the new lead come in with a bunch of new ideas, and 6 months later, everything project changes....3 years later, that lead is gone. A lot of really change, hasn't really happened. Rinse. Lather. Repeat.

My advice, most to a smaller company if want more say so into the business side of things. Larger companies tend to care about how you make people feel rather than can you deliver. Those people make people feel better because they never say no, and massage estimates.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Hobodaklown,5,"Glass Door. Read the reviews from Ops and Dev.

If you manage to talk to a technical manager during the interview process, have them walk you through a “day in the life”. Ask questions during the walk through about processes or how escalations are handled, how peer reviews are handled, and how releases are handled. Regarding releases, how many sprints, the length of the sprints, and who all helped create initial the product backlog.

Just recently I was looped into a different department’s project and during the onboarding they tried to owww and awe that they were doing agile. I asked some leading questions, realized their timelines were make believe—deliver a cutting edge online system that integrates with legacy code in a little over 3 months, sprints are 3 weeks long, and UAT and demos didn’t begin until about over halfway through the project. I told my manager they have no way of hitting these deadlines without loosing some serious sleep and its going to cause a lot of angst from stakeholders as their changes won’t be implemented. If an org is doing agile then everyone needs to be involved early to achieve good feedback loops.

Looking for signs of communication breakdowns, too little, or too much, will also help.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
ashishvp,4,"As a CSM, your company has a fundamental misunderstanding of how Agile works. 

Not every company is this way, and I make sure my team most definitely does not operate that way.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
bcbrown19,4,"I'm an infosec engineer and every company I've been with keep trying to shove agile down our throats. And it never works. 

Our cadence and what we do is VASTLY different than that of a developer. 

""So ... what's going on today?""

""Uh ... nothing. Nothing is broke and there's no patches to install. Sooooo ... """,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,4,"In my opinion your biggest / safest bet is for a company that doesn't impose Agile from the top down. If the team itself gets to evolve their process on their own, then its real Agile. So I would think asking questions like ""what are some examples of how your Agile process has changed over the last year?"" and ""Why did you make those changes?"" would be good. You will want the answer to ""why did you make those changes?"" to be some version of ""we were noticing X and we thought that by doing Y we would get Z reuslt"" as opposed to ""management asked us to change.""",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
karl-tanner,3,"Scrum masters aren't technical and have no business being in tech.  Most product/program managers don't know how to write requirements with the right amount of detail or are just too lazy. I end up having to do their job and my job. Honestly though, this problem would be easily resolved if developers had any balls. 9/10 don't.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
diablo1128,2,">  this problem would be easily resolved if developers had any balls. 9/10 don't

So much this.  I see so many SWEs just accept crap from management because they are not confident or just scared to lose their job.  The majority of the time they bend on quality to meet management's wants and create shit code.  

I tell these SWEs all the time to say no if management requests are unreasonable and explain why through objective evidence.  If you cannot provide objective evidence then maybe you don't understand the problem as much as you think you do.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,1,[deleted],2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
karl-tanner,2,"I hear you, my hair is gray too.  Corp culture makes the fear of retaliation strong enough that devs don't speak out when something is wrong.  It's not the dev's fault, it's the management's.  No non-technical person has any business running an engineering team.  ""At will employment"" is code for: your manager can fire you for any reason whatsoever.

The guy you are describing is a tech lead (what I do), not specifically a scrum master.  Any idiot can get scrum certified and get a 100k job these days running a scrum team.  And honestly, it's about delivering results, I get it.  Management loves it because from the outside it *looks* like they are setup for success.  Usually though, the parts that are visible to management (requirements definition and operational deployment) are often swept under the rug and most of those responsibilities get put on the dev team.  So you not only have to do the full time job of development you have to figure out what you're supposed to do as you go, and are responsible for stability and deployment too.  

Developers who are in this situation need to speak with one voice and make sure they are getting the right amount of detail in a ticket *before* the sprint starts.  And separate the testing and deployment of the item into separate work items, because they are indeed separate work items.  Otherwise, the dev team is forced to do things like figure out what to build, built it and figure out how to deploy it all as part of the sprint.  It's 3 different jobs really.  

Any veteran dev who's been burned by pure process knows you need someone with both the technical knowledge and the courage to (1) capture requirements accurately (2) know how to track progress while being mindful of team level productivity (3) push back on external forces in terms of resourcing, etc. including their own boss

I've been doing this for decades at some of the largest companies in the world and I see the same patterns over and over again.  The leaders aren't true leaders and the followers aren't willing to speak together with once voice to affect change.  Everyone is afraid of either appearing incompetent or fear retaliation from someone who has power over them.  And this is when people good people quit.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
PricklyPierre,3,"Agile is a failure almost everywhere and it's only successful on an individual team level where it isn't. No one gets it right on an organizational level unless they're very small. Agile doesn't scale very well. Even if you find a team that does agile the way you'd like to see it done, half of the team is going to be hating it.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
exotic_anakin,3,"When interviewing, I really like to have a casual chat with my potential bosses and teammates about what they \*think\* agile means and how they use it.

It's a bit tough if you've never seen it work well (which it often does not), and don't have a great basis of comparison, but I'd suggest maybe continuing to read up on the topic and further developing your own opinions of what you think makes sense.

I've been really enjoying Robert ""Uncle Bob"" Martin's newest book [""Clean Agile""](https://www.amazon.com/Clean-Agile-Basics-Robert-Martin/dp/0135781868). And recommend James Shore's book [The Art of Agile Development](https://www.amazon.com/Art-Agile-Development-Pragmatic-Software/dp/0596527675) which is perhaps more practical but more dense.

But my personal take on some of the individual points in your post:

> We do ""Scrum"" with story points (yes we actually call it Scrum)

I like story points :)

> We don't measure velocity

I think this is a big mistake. IMO, one of the core principals of Agile is gathering data and using it to make decisions. If you're already using story points and sprints, velocity would be pretty trivial to measure.

> There are no business analysts

Well I assume there are some stakeholders and businessy people? There should be an open dialog between the developers and these folks as requirements inevitably evolve and change and the project evolves. 

> There are no scrum masters

That just puts the burden of responsibility on the rest of you. It's not necessarily a bad thing.

> We have 5 different ""feature teams"" and each one does ""agile"" completely different

In my opinion, that in itself is not bad. Agile is about small teams doing small things well. To me, its a red flag when a lot process is enforced at a company-wide level. Teams should be able to exercise some degree of autonomy with respect to finding out how to get their work done. But they have the responsibility to provide frequent and accurate estimates and data on their progress up the chain.

> Some teams do Kanban for some reason?

If it makes sense to them and helps them be productive, than I think thats cool.

> Some teams document properly, others don't document a single thing

Unfortunately thats pretty common. Be part of the solution, not the problem, and try to be an advocate for good documentation, but don't expect to find an employer where this is how you think it should be.

> Daily standups that go an hour, sprint planning, and sprint review meetings

Long standups are a trap that's easy to fall into. Assuming you don't actually ""stand up"" for them? Maybe try suggesting that as a small change.

Planning & review meetings don't sound like a bad idea to me...

> With all the meetings and points and discussion it feels like every single thing I do is being tracked and I have no breathing room (other than just over estimating points on purpose)

Points on a story really don't have any base value except relative to other stories. So if you over-estimate one, it implies that you are under-estimating others. That is a little concerning. But then again, if you aren't measuring velocity etc... its sorta like *Who's Line is it Anyway*: ""everything's made up and the points don't matter""

> When I bring up the Agile Manifesto people literally laugh at me

If you're actively trying to figure out how to make the process, and not being a dick about it, and people aren't taking you seriously, it might be time to look for a new job. But also, you can't expect to make significant changes to this kind of culture overnight. If you're not ready to give up, maybe approach it from a more pragmatic place, and less philosophical. Suggest tiny experiments where you change something small about the process for a sprint or two. If people laugh at you for actively working to make your team more productive than wtf.

> On top of all this shit are hard dates for when features will be released (!)

Yes, hard delivery dates set by business are a common reality. But you have other things which necessarily must be flexible. Projects can be only 3 out of 4 of the following: cheap, fast, good, and done. If you can't budge on the timeline, it being cheap, fast or good, then it just won't get done. You won't hit the date. But you can decide to give up on some of those properties to get a project done within just about any timeline. Business folks might not like to hear it, but they should appreciate you telling them the reality. ""I can hit that deadline sure, but the codes going to be bad, and non-performant.""",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
rco8786,3,"Sounds like every company I’ve ever worked for in the last 12 years. Most of which you’ve heard of and have probably thought they had it figured out.

It’s all duct tape and bubble gum, even at the biggest most famous tech companies you can think of.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
BmoreDude92,3,"I still believe that Agile is just a way for managers to track dev work. And the only reason they want to is that they don't understand what we do and lots of us make more then them. 

&#x200B;

I also think that is was a way to create ""Tech jobs"" for non tech people. Now that we have agile we have scrum masters, paper planner of the points who all now work in tech. If we didn't have those there would be more people doing mindless corporate jobs.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
fried_green_baloney,3,Most common deviation - manager present at standup,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,2,What about when that manager is also acts as a project manager and is also the direct reporter for some of the developers....,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
ejmercado,5,"> There are no scrum masters  


This is a good indicator that the company might not know a lot about agile. A previous company I worked for had dedicated scrum masters that handled multiple teams each. Take note that this isn't just some higher up given the role ""scrum master"" because they're the highest in position, but literal people who have attended seminars and certifications.

My previous company rewarded our business analysts that took the effort to practice becoming a scrum master, so that helped. 

From what I remember most of the devs don't really take the scrum ceremonies as seriously as the scrum masters do, but the actual ceremonies when done correctly, helped with development, work environment, and the relationships between team members.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,1,"Thanks for the feedback.

It's weird that in this very thread there is conflicting opinions on the very nature of scrum. Some posts say scrum masters are completely unnecessary while others say they are an integral part of the process.

I don't know what the whole truth is but to me it shows that even in the industry opinions of what's right and wrong are all over the place.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
ejmercado,2,"It's possible people have different opinions. In my experience, the scrum masters took their jobs seriously and they did most things well, also because of the scrum masters the developers had more time to actually do their jobs while the scrum masters handled everything that didn't need technical knowledge (setting meetings, reserving rooms, facilitating communications between stockholders/project owners and the dev team). 

Another plus is the meetings always feel productive because a lot of it is planned and part of an SM's job is to make sure people invited to the meeting are actually needed.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
_your_face,1,"That’s because agile is an idea not a prescription and scrum is just some formalized crap someone made.

At the core of anything agile is recognizing what works and what doesn’t help and constantly trimming the fat.

So when you get “conflicting stories”, they are not. They are assessments for what worked for each team of company with the people they had. Depending on those things you find the best fit and variation.

There is NOOOOOO perfect prescribed one size fits all remedy. Looking for a one word answer is lazy and hoping to avoid doing the hard part of actually working a process.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
g1ldedsteel,4,"> With all the meetings and points and discussion it feels like every single thing I do is being tracked and I have no breathing room (other than just over estimating points on purpose)

If you have a lot of meetings and you are overestimating, you're doing it right.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
valkon_gr,2,Every place I interviewed all these years claimed to follow Agile and only one said that sometimes they don't.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
lenswipe,2,"Agile isn't ""a process"". The idea isn't that you start at ""A"", fill out the proper TPS reports and then get to ""B"" 6 weeks later having generated 40 tonnes of paper. If you want that, try PRINCE2 or something.

The whole point of agile is not getting wrapped up in processes and bullshit. You take the parts that work for you and ignore the parts that don't.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
RolandMT32,2,"I'm not sure I have much good advice for vetting companies on this, but I suppose you can ask them during the interview process what their development process is (if they use agile/scrum, waterfall, etc., and how it's going for them).

My team where I am now started doing (or trying) agile/scrum about 5-6 years ago, and overall I think it has its benefits, but we usually still don't estimate stories/tasks well.  We often get stories & tasks that run over into the next sprint.

Also, initially, it seemed like it was frowned upon to work on things other than what was scheduled for the sprint.  So for me it often feels like it's hard to go above & beyond with my work, since I feel like it has made me feel like I should only do what was defined in the stories for me and scheduled in the sprint.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
GoldenShackles,2,"In my limited experience with Agile, and more based on hearing stories from former coworkers, there is a cargo cult around it.

There are some positives that have arisen, but unless you're baking cookies and can tweak the ingredients every two weeks there's still a need for real planning and deadlines for any project I'd want to work on.

The best two things from agile on the teams I've worked on are:

1. Being more fluid with work items and bugs, adjusting as needed every couple weeks based on what's learned instead of letting things go dark
2. Retrospectives to analyze how things have gone over the past few weeks, without assigning blame

Back to your question, forget ""Agile"" as a thing and just focus on what you accomplished and how.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
reboog711,2,"Every agile implementation is different--for better or worse--and agile is only marginally better than previous software development processes in terms of successful projects.

So, my advice is to learn to deal with it.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Cody6781,2,"Agile has worked for the teams I’ve been on, but to be honest if you brought up the manifesto I would probably laugh too. The manifesto is an idealized version independent of the teams conditions, it’s a guideline and a starting point, not a rule book.     
It’s a good thing to reference when in doubt, but really the managers decision IS more important than the manifesto.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
BubbleTee,2,Sounds like you work for my last company. Standups daily lasting over an hour. Was a shitshow.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
PilsnerDk,2,"I'm on a team where it works very well. Maybe it's not agile by the book, but I don't care.

First, some bullet points I disagree with:

> story points 

Story points don't matter, just estimate by hours or working days

> We don't measure velocity

We don't either - just estimate by hours. I've never seen the point of story points and velocity

> Some teams document properly, others don't document a single thing

That has nothing to do with good or bad agile. I think you'd be surprised regarding documentation, and that is becuse a) writing documentation is boring b) documentation is borderline worthless in the long run

> On top of all this shit are hard dates for when features will be released (!)

You aren't going to avoid this. No managers, team leads or bosses are going to accept a dev team that just keeps grinding forever, refusing to estimate how much work is left or when it can be released. Fact of office life as a developer. In theory, every feature can be released at a fixed day, it's just a matter of how complex/advanced the implementation will be.

My team's scrum is really good.

We have two-week sprints with the following meetings:

* 5-10 minute daily standups (8 people). This is the least valuable part of the process, but our team lead and PO like hearing what we're working on, and they also give short status updates from their side of the table. I'd rather be without, but it's tolerable.
*  Two grooming meetings (60-90 minutes). The grooming meetings is where our PO presents new feature requests, and we debate the possible solutions, weigh simple/complex solutions, etc. It's very valuable. 
* One demo/retro (~60 mins). We demo tasks completed in the past sprint, those that are demo-able without a lot of hassle at least, and don't demo technical changes.
* One sprint planning meeting (60-90 mins). Here, we break PBIs (features) into tasks and estimate how long they'll take, then put an appropriate amount of work into the next sprint
* We don't assign tasks to developers up front, developers look at the sprint backlog and pick a task at a time.

I'd never go back to the chaos model where you just get assigned random tasks from random people in a big hodge-podge. It is absolutely essential that only one person (the PO) is in charge of controlling the assignment of tasks to the dev team.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
TigreDemon,2,"Agile is great, if done correctly.

Most companies only use PART of the agile manifesto to their liking, but the fact is, the manifesto for agile software is a bunch of ""rules"" to follow that work together. You can't take part of it only.

Also, Scrum is probably one of the worst thing that exists and is only there to do one thing : SELL

---

It's pretty easy to understand it once you write Scrum on Google, then see a bunch of : Books, ""Diplomas"", talks, conferences on it.

Isn't the first time we see this in IT, won't be the last.

There isn't a SINGLE method for all projects",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
bangsecks,2,"Agile means so many things now that it means nothing, and we're probably at a point where it needs to be abandoned.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,1,"Definitely agree that it means nothing at this point. Just in this thread you have countless contradictions of how it ""should be done"" and what the ""right way is"".",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
stupid_muppet,2,that's basically exactly how my company works too. we are specifically told to over estimate story points so that we have breathing room from product,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
snowe2010,2,"Doesn't really answer your question, but we're currently trying to switch the the ShapeUp method. The fact that the company was willing to look and see that a change needed to be made was more than I can say about most companies. 

We'll see how it works out.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
toTheNewLife,2,When the project goes to shit 3/4 way though it goes into waterfall recovery mode. Even though we still have to assign stories each sprint...,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,2,I know this exact scenario way too well.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Farren246,1,"Here you go:

[https://www.youtube.com/watch?v=H6GdK-dChtY&t=126s](https://www.youtube.com/watch?v=H6GdK-dChtY&t=126s)",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,1,Sounds like you work at rbc,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
EAS893,1,">There are no business analysts

As a business analyst, there's your first problem. :)",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
senatorpjt,1,"pathetic fuel school air paint distinct treatment mourn deer worry

 *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
uhhuhwhatever,1,I hate agile. Even the least crappy agile I’m in right now the stand ups run long most of the time.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,1,"The problem is you need people to stay on target, and managers to ensure people stay on target. All the issues you have are due to poor management.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
beezeee,1,"Maybe you'd have better success defining what you want instead of what you don't.

Tbh, I find it strange that you have 8 years experience and you're chasing an ideal of an ambiguous buzz word. You say you are 0 for 2 with agile, so 8 years in and it hasn't yielded a positive association, why are you even considering it as a relevant factor anymore?

My personal .02 is to focus on the engineering part of software engineering, and optimize for places where that's valued. It goes a lot farther than any of the rigorless fads that plague our industry at (apparently) every experience level.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,1,I have almost 15 years experience. But 8 years ago is when agile started to hit the mainstream with companies in my area. Prior to that I never had done it.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
PlayingTheWrongGame,1,"A lot of places claim to practice agile development. That’s usually a lie.

The best indicators I’ve found are these: 1) do they actually practice test-driven development, and 2) do they do paired programming. It’s easy to tell if they do paired programming if you’re doing an interview in-person, but it’s harder to determine if they’re actually doing TDD. So ask them about their testing, dig into the technical details a bit. If they’re genuine about doing TDD you’ll be able to spark up a real conversation about testing methodology. 

If both conditions are true, they’re probably more or less the real deal or at least making a genuine effort to do it. Especially the paired programming part. Organizations who aren’t genuine about it will *inevitably* view paired programming as “double the cost for the same work” and that institutional viewpoint means they haven’t really grasped the cultural basis for agile software development.

Yes, it does exist “in the wild”, it’s fairly rare to actually find, and it is a very fun work experience when you do find it being holistically practiced.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
darexinfinity,1,"Back when I was interviewing, Agile was just another keyword to throw around or accept to get bonus points during non-technical parts. Back then I was some desperate to find another job so I lied about preferring it but in reality I cringed every time I heard it.

I'm not sure if I've ever experienced true Agile, but honestly I don't understand why you would want a job that has it. Aside from Waterfall, I'd imagine anyone who told me they don't do Agile would have a better understanding of the methodology they're using or at least is open to experimenting what's right for their team. Agile imo is more akin to corporate jargon than anything else.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
MrEvilPHD,1,"\> We have 5 different ""feature teams"" and each one does ""agile"" completely different      
I mean, that's the be expected. Agile is about working in the way that makes you most efficient, happy, etc. You should be communicating and stealing ideas from each other",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,1,"This has been a nightmare for the company though. Team A has a different process than Team B so they are designing things differently and things are expected to work when they are merged (they don't). Team C develops endpoints that aren't documented because that their thing, and Team D depends on those undocumented endpoints. No one knows what Team E does.

There is no overarching meetings or communication between them all, they are supposed to ""do their own thing"". 

This is my workplace.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
MrEvilPHD,2,"That's an entirely unrelated failure though. Standards for the development lifecycle (ex. Nothing goes to prod without documentation). You need to have agreements and establish interfaces in these situations.   
   
That said it also sounds like you have a failure in grooming specifically. Your team's should be taking a vertical slice, rather than only building in one system and blocking 3 other teams if they're behind. Take a look at INVEST criteria and maybe even bring some printouts to your next grooming session.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
tsingy,1,I interviewed at a few companies recently. Some of them highlight that they follow strict agile and hire agile coaches or agile consultants to make sure everything right. Maybe that's what you can ask during interview.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Zedechariaz,1,"I talked to an agile coach the other day, it was very interesting. I learnt :

\- Not all companies CAN do agile

\- Not all companies REALLY want to do agile

\- Usually it's just a weird attempt to squeeze more productivity without trying to change any of the company's culture",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Python4fun,1,"I would ask about the agile rituals specifically that matter most to you.  I would pose explicit questions around your headaches like ""who runs your standups?"" so that you can be sure that you aren't hitting the same problems.

Oddly enough, the more often I read the Agile Manifesto and Agile Principles (from the website) the more I come to realize that many of the pains in my life are actually BECAUSE of attempting to be ""Agile""^TM",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Overpaiditconsultant,1,"As i do agile coachning professionally I thought to give my two cents to your points:


* We do ""Scrum"" with story points (yes we actually call it Scrum)
    - I don’t understand this statement?

* We don't measure velocity
    - there’s other ways to achieve continuous improvement, as you use story points a burn down chart based on story points/sprintlength would be simple enough. Compare the sprints against each other using the burndowns chart and reflect. “We have fewer story points but achieved less, how come?”
    - I’d argue that the best ceremony Scrum has to offer is the “sprint retro” - this is your teams room for improvement, so you even retro!?

* There are no business analysts
    - nothing to do with agile?

* There are no scrum masters
    - there’s no need really if the team is mature enough and self organizes, rotate it amount the team members who facilitates the ceremonies 

* We have 5 different ""feature teams"" and each one does ""agile"" completely different
    - this is completely normal, there are many ways to be agile even following scrum. different maturity levels of the teams is usually the reason to be more or less “scrummy”
    - some teams leave Scrum for other methodologies, see below :)

* Some teams do Kanban for some reason?
    - a mature and well knit team will some times feel a bit constraint by Scrum, it’s ceremonies become more burdensome and no longer feel helpful or needed. Kanban is more lean and sometimes seen as more agile in the sense that the mature team can customize it to their needs. This is completely normal and points to a healthy mature agile team, usually :)

* Some teams document properly, others don't document a single thing
     - “Working software over comprehensive documentation”? To each team their own... :)

* Daily standups that go an hour, sprint planning, and sprint review meetings
    - i dont think your doing a “standup” if it’s going for an hour, sounds like the team members feel the need to report /defend exactly what they are doing/working on? May I suggest a weekly spring sync meeting that can go for longer and keep the stand ups shorter? Sounds like paperagile?

* With all the meetings and points and discussion it feels like every single thing I do is being tracked and I have no breathing room (other than just over estimating points on purpose)
    - spring sync meeting? Also tracked by who? You didn’t have any CSMs... (project) managers? Let me come back to this in the summary of my post. Definitely paperagile.

* When I bring up the Agile Manifesto people literally laugh at me
    - let me come back to this in the summary of this post.

* On top of all this shit are hard dates for when features will be released (!)
    - right read my post summary.


Summary: I come around many companies that do “paper agile” or “scrum but”. In both cases this means that there’s no real culture behind going and being agile, “agile” has simply been shoved down by upper management down the lines and the managers on each level simply did the bare minimum - culture remains what it was before. Change of culture is key for going agile, inciting a culture change within the company is crucial if you want to go fully agile, it’s hard to do and takes a lot of time and hard work from the leadership - this is their job. Just announcing “we are going agile” is not enough and is why you end up with paperagile/scrumbut. Look for companies that are investing heavily into their companies culture making it breath agile.

* paperagile - bare minimum agile, fixed time/scope with some agile methodology slapped on
* scrum but - we do scrum but we don’t have/do x,y,z",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,1,"Both companies have been ""scrum but"" companies. That's a great description.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
Deleted Account,1,[removed],2024,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
AutoModerator,1,"Sorry, you do not meet the minimum sitewide comment karma requirement of **10** to post a comment. This is comment karma exclusively, not post or overall karma nor karma on this subreddit alone. Please try again after you have acquired more karma. Please look at the [rules page](https://old.reddit.com/r/cscareerquestions/w/posting_rules) for more information.

*I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/cscareerquestions) if you have any questions or concerns.*",2024,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
_your_face,1,"EDIT: this isn’t to say your company doesn’t suck, because it sounds like it does. It seems though what at the core of your issue isn’t the company, that being said...

Honestly? It sounds like you don’t like any process because there is accountability and people cracking whips. You seem to try to find outs and would rather point out “what about them?” Then think about how things can be improved. And really anything with the end result you’re hoping
for being (surprise surprise) you not having to do anything on someone else’s timeline or be accountable for it. Pulling out the manifesto isn’t an act of improvement, it’s a blatant attempt to say “we shouldn’t do anything because the manifesto said nothing!” People are laughing because of how transparent of a move that is.

Yes process can suck and yes it’s an internal battle to keep it light and out of the way.

But for you the things you point out and the way you state your arguments makes it really easy to sniff out that you’re someone who won’t like any sort of management or overseeer, which if you are at most functional companies you’re going to find.

So being honest, find a place that really doesn’t care about doing work combined with no process,  which there are actually tons.  Or Just go work for yourself. 

I know it sounds like I’m taking shit but I’m being serious and direct. Just sounds like you’d never like any sort of overseer, so why keep going places and just hating it?

The other maybe unrealistic thing to do since you can’t just snap your fingers and make it happen is spend a year or two doing management or being the guy responsible for hitting deadlines to see the reasons for things from the other side.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
BubbleTee,3,Yeah I'm not getting this vibe from OP. Some of his grievances are legitimate and I see nothing from OP about under-performance or complaining about hours.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,2,">Honestly? It sounds like you don’t like any process because there is accountability and people cracking whips.

Believe or not it's the opposite. I ask management for guidance, priorities, and to help remove blockers. Their response is to be completely hands off and ""let the feature teams handle it"". I'm actually clamoring for process and not complete chaos and undefined accountability.

I can't even get a PM to groom the backlog.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
DirdCS,1,Most of what you said is agile. Documentation falls into coding standards. Not sure what you're moaning about. My last and current jobs are similar but the current one just feels more enjoyable because of colleagues and office perks,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
JDiculous,1,I just refuse to work at companies that have daily standups (though async is tolerable). I'm not trying to interview for my job every morning trying to rationalize my existence to some PM.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
maximhar,0,"I'm the scrum master in my team and I think it works alright. 

- The daily usually concludes within 10 minutes or so with 7 team members. I'm lucky that the team is very self-aware and I rarely need to push someone to wrap up whatever they are saying. 

- Sprint planning is a necessary evil. We also use it as an opportunity to discuss issues with the PO as a team. We have alternating 2h and 1h meetings every Monday.

- We don't measure velocity per se, we split stories in tasks and assign hours. Each team member has 6 hours per day of capacity, and they are mostly free to estimate their tasks. We pull in stories from the backlog, split them into tasks if needed, and assign hours estimates until every developer's capacity is near-full.

- I meet with the PO every week to break down features and stories into stories and tasks, which makes planning much faster. Other team members can join us, but they don't have to. We try to minimize the time spent in meetings, as its often less productive than time spent coding.

- We do retros every 2 weeks. Thankfully the team is pretty active, although I feel the meeting is more often a ""get it of my chest"" exercise than a productive one with clear action points at the end.

- We've quite self-organized. There is no one on the team making code/architectural decisions single-handedly. Rather we try to reach a consensus. We have a team lead, who also manages a couple other teams, but his role is mostly administrative and logistical, he doesn't participate in any of the scrum rutials aside from the daily.

- We deliver every 4 months, and we don't have a missed deadline so far. Granted, sometimes we only ship an MVP instead of the bells-and-whistles feature the PO had in mind.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
CodeEast,1,"> We have a team lead, who also manages a couple other teams...

Do you mean 'manage' in the sense of acting as an interface between teams, to grease the wheels, reduce friction issues and provide a common point of contact for issues that span teams? Or is it more of an authority driven role?",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
maximhar,1,"It's more authority driven in the sense that they will represent your team when negotiating team budgets with the upper management. They will also track your performance if a problem is noticed.

They also serve as a contact between teams, though, usually when a cross-team issue  needs to be escalated.",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
CodeEast,1,Thanks for the extra info.,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
CAPS_4_FUN,-2,"> and in the past 8 years I have worked for 2 companies 

what?? how old are you?",2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
takoyaki_museum,1,35,2019,"""Agile"" has been a complete failure if every company I've worked for. How do I vet companies where it actually works?"
BonelessTrom,172,"I was told in uni that 70% of software projects fail, so the 65% sounds like an improvement.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Stoomba,53,"They are considered failure because they don't meet initial expectations, but those expectations are all estimates and we are notoriously god awful at estimating software projects.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
CaptainCuntKnuckles,8,Also failures can occur too due to missed requirements from the business that weren't communicated during product planning.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Kinglink,50,"MORE likely to fail.   not total failure. 

But also they define failure as ""over budget""...  I don't like over budget, but if every project that went over budget failed, I guess every video game ever made, every personal device, every laptop and everything people like is a complete failure. 

Granted the article says 265 percent MORE likely?  Which means this is just ripe bullshit you can smell it.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
NotSoButFarOtherwise,3,95% of my grocery shopping trips FAIL!,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Franco1875,518,">The study found that agile software projects are 268% more likely to go wrong than those employing other methods.

>65% of projects weren’t delivered within budget, the study noted, while quality standards were also found lacking.

Personally don't have any issues with agile. Generally found it to be quite efficient - providing you don't end up being overtly micromanaged - but some of these figures are quite jarring. 

268% higher failure rate is absolutely insane and suggests there's some underlying bullshit at play.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
MaleficentFig7578,422,Agile isn't even a method. It's a catch-all word for all methods where you don't plan everything upfront.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Dx2TT,196,"The problem I see is it incentivizes all kinds of horrible ass behaviors unless the participants are stellar. Rushing to close sprints can outweigh writing good software. Closing tickets poorly outweighs planning complex systems. Estimation requires endless meetings to discuss things that are over the head of 80% of participants.

Its like a coaching scheme in basketball that only excels when you have Michael Jordan.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
fordat1,43,"> The problem I see is it incentivizes all kinds of horrible ass behaviors unless the participants are stellar. 

I think people are completely glossing over this point and reinforcing how accurate it is when they say “well you/team are doing agile wrong”",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
s73v3r,15,"Honestly though, if you're doing it wrong, you're doing it wrong. But in my experience, a lot of that falls on management not letting the team be in charge.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
foodie_geek,3,Then what do you you think management is supposed to do? Let the people do their job without being distracted 🤷‍♂️,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
exjackly,6,"Good management sets achievable goals, identifies priorities, and provides resources to address these goals and priorities.

Then they mostly get out of the way and let the team do the work to meet those objectives while monitoring progress, setbacks and addressing resource issues as needed. 

Bad management continues beatings until morale improves. 

I'm pretty sure there's a continuum between the two.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Sage2050,10,"less-than-stellar team members are a much greater problem in a waterfall system, though. The collaborative portion of agile is supposed to address these issues and allow for reallocating resources on the fly when a shortcoming is identified. Micromanagement isn't supposed to be the solution.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
geodebug,95,"As someone else said, that's scrum, not agile.

**Agile**:  Agile software development is an iterative and incremental approach to software development. It emphasizes collaboration between the development team and the customer, flexibility, and adaptability in the face of changing requirements, and the delivery of working software in short iterations.

**Scrum**: A specific agile framework with defined roles, events, and artifacts.  

I think an environment that incentivizes ticking off boxes vs writing quality code is going to have problems no matter what methodology is employed.

Scrum isn't terrible, except that in large corporate environments most of the people involved, maybe especially the so-called scrum masters, don't really understand the point.

If your company measures developer performance by the number of stories they complete then your company is doing it wrong.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Recoil42,37,"Even Scrum doesn't prescribe *""endless meetings to discuss things that are over the head of 80% of participants""*. In fact, Scrum specifically and quite explicitly tells you not do that kind of thing if it's a kick in the balls, and offers you a number of other options and ideas you can try. It is an a-la-carte menu of pick-and-choose options, not a ten-course prix fixe meal.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
WriteCodeBroh,16,"I think one big problem with scrum is just that there is an expectation that everyone is plugged in. This generally works well in small companies with few teams and technical cofounders/managers, but I find that most mega corps have a complete lack of technical leadership which almost always leads to the 80% of time in meetings problem.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Recoil42,22,"I said this in another comment already, but it's important to understand Agile and Scrum do not purport to be magical salves for organizational deficiencies. They are software development tools and methodologies, not cures for cancer. 

Your complete lack of proficient technical leadership is not going to be solved by any software methodology on earth, just as global nuclear proliferation isn't going to be solved by world leaders adopting healthy diets. If you have no proficient technical leadership you're going to be fucking miserable no matter what you try to do. Godspeed.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
WriteCodeBroh,1,"Sure but empowering engineers and product also means removing management types from a lot of the planning that they might have been involved with previously. I guess my point is that we essentially took waterfall and shifted all of the planning right. Instead of involving managers and getting buy in and then doing the thing, we spend a lot of time catching them up now.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Recoil42,9,"Well, that's kind of the point. Having decision-making be so distant and far-removed from the making means the wrong things get made, and made at a delay from new decision-making. Solving that problem is good — developers should know when a requirement is changed ASAP rather than making a thing and then finding out weeks later that thing is no longer required, or that they've gone off on a tangent unaligned with organizational priorities.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
WriteCodeBroh,1,"I wish it worked like that in practice lol. We still end up doing a ton of throwaway work. Though I’ve worked in a scrum-esq framework my whole career so I can’t speak to how bad rework once was. I also have worked almost exclusively at Fortune 500s. 

I just wonder if the big megacorps are really seeing increases in efficiency or they pump scrum because it’s a fun buzzword despite what we do barely resembling scrum or the ideals of the Agile Manifesto. Inevitably it becomes “well scrum is flexible” until we are basically just using it as a micromanagement tool.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
fnord123,1,Do you talk to customers?,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
WriteCodeBroh,1,Sure. All my customers are internal.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
s73v3r,6,I really can't imagine any kind of methodology would fix what's really an organizational problem.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
WriteCodeBroh,1,"Oh I don’t expect to fix it, I just don’t think scrum is really adding anything/much to orgs like this. And orgs like this make up the majority of the American economy lol.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,1,[deleted],2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Recoil42,1,"Personally, my recommendation would be to bite the bullet and grab a copy of scrum co-creator [Jeff Sutherland's book](https://www.amazon.com/Scrum-Doing-Twice-Work-Half/dp/038534645X/), which goes through how and when things like sprints, artifacts, and backlogs all get used in detail, and offers examples of how they succeed and fail. Price of a couple coffees, but money well-spent. 

By like three or four chapters in you end up having a lot of ""ahh, okay, i get it now, i misunderstood before"" moments, and reddit threads like this one (unfortunately) start unravelling as being about people scapegoating a tool they don't understand.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
kinss,1,I've seen SCRUM work very well before. I've also championed implementing it in another business that was struggling defining goals let alone reaching them. They completely fucked it up and willfully misinterpreted every point I made. Company exploded.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
OnlyForF1,1,"I have seen Scrum work very well before and it was unsurprisingly the only time I’ve seen it with a genuinely engaged product owner (it was me).

But ultimately, I think it’s a fundamentally flawed agile framework. 

- Story point estimation isn’t worth the time it takes,
- sprints are overly rigid to the detriment of business value
  - it discourages team members from stopping work once they feel they have delivered meaningful business value, and placing remaining (more superfluous) work back into the backlog
  - it (by the book) bans bringing forward work not loaded in the Sprint even if there is a business need to do so
- there is too much emphasis on “commitment” from both individuals and the Scrum team,
-  velocity is too tempting to be used as a KPI, resulting in gamesmanship and its devolution to a useless metric,
- it encourages a release cadence revolving around the Sprint cycle, even though a more continuous delivery model (and feedback loop) has been shown to be far more effective
- it is too reliant on the product owner role, even though an effective product owner is possibly one of the rarest species in the tech world",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
KevinCarbonara,1,"The way I've seen Scrum handle this successfully in the past is to time box things, and you can do it on both ends. Planning meetings lasting 8 hours? Time box it to two. Anything unplanned doesn't make it to the sprint. If management is at fault, but are required to meet the new deadline, they will bend over backwards to make it happen. You can also start timeboxing development time to prevent management from scheduling meetings during your core work hours. The caveat here is both methods require management to be on board - often the very issue in the first place is that they're not. But at that point, it's not really scrum. It's just bad management, and it's likely to be equally bad anywhere.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
verrius,6,"I think another thing to point out about Scrum is that while it is a framework, its one that explicitly allows for adding or removing pieces of the framework while still being called Scrum. There's no real ""wrong"" way to do it.  Which allows for people who don't really want to do it, but still recognize that people will turn their nose up at waterfall, to call their process Scrum if they only take the window dressing.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Fearless_Imagination,24,"I see people *say* this about Scrum. Then I read the 2020 Scrum Guide and it says this:

>  
The Scrum framework, as outlined herein, is immutable. While implementing only parts of Scrum is possible, the result is not Scrum. Scrum exists only in its entirety and functions well as a container for other techniques, methodologies, and practices.

So while you can *add* things to Scrum, I don't know where this idea that you can remove things from Scrum and still call your process Scrum comes from.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Wires77,2,You've bought into some company that has twisted scrum to its own ends.  I've never heard of the 2020 scrum guide and was doing scrum for years before that,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Fearless_Imagination,15,"I'm literally just quoting the Scrum Guide. I just added the 2020 because it last was updated (to my knowledge) in 2020. 

You can read it yourself online: [https://scrumguides.org/scrum-guide.html](https://scrumguides.org/scrum-guide.html)

It's the version that [scrum.org](http://scrum.org) references on their site: [https://www.scrum.org/resources/scrum-guide](https://www.scrum.org/resources/scrum-guide)

I don't *think* there is a more official source of what makes Scrum out there but I'm happy to be corrected.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Alan_Shutko,5,"I hadn't seen this either, but yeah, it's right there. This immutable process even specifies daily scrum meetings that are 15 minutes long, sprints of 4 weeks or less, up to 8 hours of sprint planning a month, work items of 1 day. This is a very weird thing to read.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
QuickQuirk,4,"and with such religiious adherence to the One True Process, they've completely forgotten this line from the agile manifesto: ""Individuals and interactions over processes and tools""",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Wires77,1,"Wild, so this explains where all of the useless Scrum-certified Scrum masters come from...",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Butterflychunks,3,"> adaptability in the face of changing requirements

PM: Sounds like an invitation to keep changing requirements!",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
One_Curious_Cats,1,"Today's corporate Scrum is not the original Scrum. 

[https://www.youtube.com/watch?v=IyNPeTn8fpo](https://www.youtube.com/watch?v=IyNPeTn8fpo)",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
CreativeGPX,5,"None of those things really have to do with agile as a whole, just particular implementations of it. I think they are more symptomatic of non-agile management trying to adapt to survive in the context of agile methodology. It's not agile that's the challenge, but instead a system surrounding agile which aims to measure everything and make everything numerical.

In my previous job, we were essentially agile. The team met once or twice a week to discuss what we did, discuss customer communications and plan the next week's work. That's all. Nobody was counting tickets. Nobody was policing time estimates. Nobody cared (aside from if there was an actual issue) if you say ""yeah, I'm still working on X"" even though the week passed. It was simply a matter of trust, communication and an emphasis on focusing on the task in front of you.

The attempt to formalize all of that into a ticket system you are counted for, a need to precisely estimate task timelines, a pressure to fit things neatly into sprints, etc. is both unnecessary and often contradicts agile philosophy.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
manystripes,8,"> I think they are more symptomatic of non-agile management trying to adapt to survive in the context of agile methodology

Or even worse when the software team is supposed to be agile, but the business side of the business is very much not. It's very hard to follow an agile process when the sales group keeps bidding on fixed price, fixed deadline projects that don't give you enough flexibility in your deliverables to actually follow an agile process.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
elebrin,2,">Estimation requires endless meetings to discuss things that are over the head of 80% of participants.

Estimation and sizing are my personal bugbears. Like... we might as well size it as potato. It's a fucking guess. Nobody knows, and if someone says they do, they are full of shit. But we still sit in endless meetings trying to figure out how long stuff will take, instead of actually doing the thing that needs to get done.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Recoil42,4,">Estimation requires endless meetings to discuss things that are over the head of 80% of participants.

Boy, if there was ever a sign that your team, not agile, was the problem...",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Dx2TT,40,"Of course the team is the problem. Absolutely. But I live in the real world with real teams of average and below average developers because the good ones leave to make more money.

But, like in coaching or education, the purpose of a good system is to get the most out of its participants.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Recoil42,7,"In the real world, 'agile' has many ways of addressing exactly what you're talking about. It is a method of getting the most out of participants, even sub-par ones. There are people out there leveraging those benefits.

The [agile manifesto](https://agilemanifesto.org/) addresses even exactly what you're complaining about right now. The very first principle — the very first one!! — is *individuals and interactions over processes and tools*. That means you don't stick to the script — you adjust and adapt to the particular team, their histories, and their communal knowledge.

A very simple agile team might just be a kanban board and that's it. Or it might just be thirty minutes deciding on an MVP. Doesn't have to be much, and there is no one prescribed 'true' form of Agile. It's a framework for thinking about iteration and short-cycle feedback loops, that's all. You figure out the implementation yourself, and what applies to your particular situation. 

If your team is doing endless meetings to discuss things that are over the head of 80% of participants, and no one is getting value out of those meetings, then you are not working with agility. You should get rid of those meetings. The whole point of Agile is literally ""*if something isn't working, don't do it*"", not *""bang your head against a wall and keep doing what doesn't work""*.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Dx2TT,19,"Everything you say is factually correct. The issue is that, in the real world, the system only works when the participants are stellar. A team of excellent individuals will always succeed. But I don't think most of us are on those teams. Every team I have been on has had 1 or 2 solid go getters, 2 or 3 apathetic couldn't care less and 1 actively awful.

How can a group self-manage when only 2 of the 5 actually even care? The couldn't give a fucks will bang their head against the wall over and over... because they don't care. Punch a clock. Close some tickets. Try not to get fired.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
0Pat,15,"There is no methodology which will solve this issue. If it's corporation which won't fire bad apples because of blehblehbleh then so be it, leave them quickly while you can, and save also those two willing to work...",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
s73v3r,5,What methodology would work in that situation?,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Recoil42,4,">Every team I have been on has had 1 or 2 solid go getters, 2 or 3 apathetic couldn't care less and 1 actively awful. How can a group self-manage when only 2 of the 5 actually even care? The couldn't give a fucks will bang their head against the wall over and over... because they don't care. Punch a clock. Close some tickets. Try not to get fired.

So, once again: Agile isn't the problem. The problem is you have a shitty team.

Agile doesn't claim to be a method to fix shitty teams, that isn't what it is meant to be for. It isn't some kind of software-development panacea, or some kind of magical salve for all that ails you. It is a ideology for improving roadmaps and processes within teams looking and willing to improve.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Ok-Yogurt2360,2,"It kinda feels like you two are talking about the same thing from different perspectives. agile is often sold as a magical salve to fix software-development related problems. This is the reality a lot of people have to deal with. But it is not agile as defined in the manifesto.

In my opinion agile makes perfect sense but it is also quite useless a lot of the time. It is just the starting point to think about improving the whole process of making software.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Recoil42,2,">agile is often sold as a magical salve to fix software-development related problems

Agile, as a concept, isn't beholden to whatever snake-oil salesman promises it might get sold with by whomever decides to oversell it. If someone sells you on the idea that Agile literally cures cancer, that's on you for getting taken in by a con-man — not on Agile for not literally curing cancer. It isn't a magical salve to fix software-development related problems, and it certainly isn't a magical salve to fix *shitty teams* (which is a different thing entirely). Again, it is an ideology for improving roadmaps and processes within teams looking and willing to improve.

>In my opinion agile makes perfect sense but it is also quite useless a lot of the time. It is just the starting point to think about improving the whole process of making software.

A *""starting point to think about improving the whole process of making software""* is precisely what Agile is and all it purports to be.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
SteveMcGarrett5-0,1,I see you too spent time working in the real world.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
deong,1,"The problem is that no one does anything from the manifesto. ""People over process"" is not a thing any agile shop I've been in actually does. It's all process. All there is is process.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Recoil42,1,"[Toupee fallacy](https://rationalwiki.org/wiki/Toupee_fallacy), then.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
deong,2,"Maybe a fairer statement than ""no one does it"" is ""way too many companies don't do it"". Am I missing some really good toupees? Sure, I imagine I am. But there are a **lot** of really bad toupees out there, and at a certain point, I feel like you have to look around and go, ""I'm not sure toupees were a net improvement on our appearance as a species.""

To be clear, I like the vision laid out in the agile manifesto, and I agree with most of what you said about the way it ought to work. There shouldn't be One True Way of Agile. It *should* be just a way of organizing the way you think about organizing work. But it just isn't, or at least it very rarely is. What it really is -- it's SAfE. It's fist to fives. It's scrummasters and product owners and just ritual upon ritual upon ritual. Maybe not everywhere, but I'm confident that that's the large majority. It's just as strictly regimented as waterfall but without the benefit of anyone making you try to plan anything.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Recoil42,1,"So the problem is a lot of folks cheaping out on toupees, being uneducated on how to properly wear a toupee, and underpaying their toupee-makers. Clearly, the problem is not ""toupees are bad"".",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
deong,1,"I don't care whose fault it is. I just care that modern software organizations are invariably awful, and they all say they're ""agile"". If it makes you happier to blame them for being bad at it, go nuts. I'm sure you're right. Like I said, I *love* the original agile manifesto. But you being right doesn't make them not awful. Agile sucks because you are what you do, and everyone who does it sucks. 

Agile doesn't mean anything to do with the agile manifesto anymore. You lost. The world moved on without you, and it moved to a place where the safe assumption is that when someone says ""we're agile"", what they mean is they use Jira and make up points that no one gives a shit about.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Sidereel,21,The point of a system is what it does. It doesn’t matter what the supposed purpose of agile is if almost every implementation is run with this types of issues.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
CreativeGPX,6,"The distinction between ""this is hard to implement properly"" and ""once implemented properly, this does not work right"" is important because in the former case, if you are willing to do whatever it takes, it may be worth it, but in the latter case, it's simply not worth it.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
asphias,6,"The fundamental issue is control. If the software devs are in control almost any system works, although care should be given that mgmt and stakeholders are taken into account.

If management is in control (and doesn't trust the team's opinions or decisions) it'll be a shitshow.

Agile is just a way of giving developers agency. But if managers won't give that to them no system works. And this is how you get all the ''but that's not true agile'' complaints.  If you do the meetings but still don't trust your developers you missed the point of agile.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
balefrost,5,"The term ""agile"" has been co-opted and misused by enough people that it has lost all meaning. It's like how enough people used ""literally"" to mean ""non-literally"" that [the definition now includes that alternative meaning](https://www.merriam-webster.com/dictionary/literally).",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
montibbalt,3,"It makes sense, language is based on a shared understanding so the way people actually use and understand words in the real world IS the correct way to use them regardless of what the original definition in a book was. If someone says ""literally"" and everyone knows what they mean then they're not wrong. Same with agile, it's almost irrelevant what the original meaning was if that's not how people use it (or like how GIF is officially supposed to be pronounced like the the peanut butter but everyone says it wrong so now the wrong way is the right way)",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
balefrost,4,"Sure, but that leads to complications when two people having a conversation are using different meanings of the same word.

> ""I literally broke my brain.""

> ""Oh, lol. Yeah, this math course is pretty hard.""

> ""No, I was in an accident and have permanent brain damage.""

Or alternatively

> ""Agile sucks.""

> ""It works pretty well for us. What don't you like?""

> ""Endless meetings that don't serve any purpose.""

> ""Oh, why not stop doing those?""

> ""Agile mandates them.""

> ""But agile doesn't mandate anything and, in fact, encourages you to keep your process malleable.""

When people say ""you're doing agile wrong"", what they mean is ""the thing you are doing doesn't match the agile philosophy"". And similarly, when people refer to those examples to prove that ""agile is broken"", what they really mean is ""the thing that you're doing, which doesn't match the agile philosophy, is broken"".

If ""agile"" can mean anything and everything, then trying to criticize agile as if it's a monolithic thing is meaningless. Agile has become the scapegoat for bad practices in industry, despite those practices long predating the rise of agile development.

I think this is precisely why some of the early agile folks moved over to the ""[lean software development](https://en.wikipedia.org/wiki/Lean_software_development)"" camp. The term ""agile"" has become toxic.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
montibbalt,0,"> Sure, but that leads to complications when two people having a conversation are using different meanings of the same word.

Peronally I would put this on the same level of inconvenience as homonyms, which I don't think I've ever heard anyone talk about with the same intensity as agile no longer meaning what the manifesto says

> If ""agile"" can mean anything and everything, then trying to criticize agile as if it's a monolithic thing is meaningless. Agile has become the scapegoat for bad practices in industry, despite those practices long predating the rise of agile development.  

Agile is like communism in this way. People are certain that they hate it but it's never actually happened in real life",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
balefrost,1,"> Peronally I would put this on the same level of inconvenience as homonyms, which I don't think I've ever heard anyone talk about with the same intensity as agile no longer meaning what the manifesto says

Homonyms are easy to clear up as long as both people are aware of both words and their correct meaning. In this case, it's more a situation where two groups try to use the same label for two entirely different things. I guess it's like ""web 3.0"" and ""web3"". 

I don't know how many times I've heard people say ""This agile stuff is nonsense. What we really need to do is get rid of all these meetings, focus on what really matters to the customer, and actually ship something."" And I'm over here in the corner whispering ""if you only knew!!!""

> Agile is like communism in this way. People are certain that they hate it but it's never actually happened in real life

Perhaps it's like communism in that it has occurred and worked well, but only in small groups.

I actually think that, left to their own devices, most developers would behave not too far from what the agile manifest laid out.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Recoil42,-2,"""Almost every implementation"" isn't 'run' with this type of issue. I've been in plenty of agile projects with no issue like this whatsoever. If you're adding 2+2 and getting 5, maybe math isn't the problem — maybe you're doing bad math.

The relevant fallacy here is the [toupee fallacy](https://en.wiktionary.org/wiki/toupee_fallacy). It's a selection bias. Everyone who's doing agile well isn't complaining because... it's working well for them. You only notice the complaints because the only the people having issues are complaining.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Sage2050,3,"Those things aren't agile though, they're scrum which is a management framework within agile.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
functionform,1,It's a shitshow no doubt.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
QuickQuirk,1,"The word 'sprint' never even appeared in the original agile manifesto.

Agile is awesome. It's a small set of principles, and guidelines on how to think about building software.

There's a lot of very crap processes and methodologies that have been sold to people by consultants that pay bare lip service to the original intent of the Agile Manifesto.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
MaleficentFig7578,-6,Yes. Worse is better. The best software is the software that ships. That's the entire point of being agile.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Dx2TT,6,"No, the best software is software that makes money and has happy users. Shipping for the sake of shipping is beyond stupid.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
MaleficentFig7578,2,It can't do that if it doesn't ship.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
nvn911,2,Every maintenance engineers worst nightmare,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
MaleficentFig7578,-5,You only get to maintain the software that exists.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
nvn911,6,"You only get to maintain the software that provides customer value for it to be maintained.

Existence is only part of it.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
MaleficentFig7578,-3,Yes. So worse is better. Worse software that ships beats better software that doesn't. Linux vs GNU Hurd.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
nvn911,2,"That's such a terribly short term view about software development.

It may hit the market first, but it's sure as hell not going to keep customers happy if features fail to be delivered at a decent cadence because you spend 75% of the time trying to unpaint yourself from corners the terrible decisions at the beginning cost you.

An earlier comment hit the nail on the head, Agile is best run when you have a team of Michael Jordans on the squad. I'd like to think I'm a hot developer but bloody hell I'm no MJ.

I'm not advocating against agile, I'm advocating more thought upfront. And that shouldn't be contrarian.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
MaleficentFig7578,2,Are you happier with Linux or Hurd?,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
nvn911,-1,That's irrelevant.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
MaleficentFig7578,1,Are you?,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
nvn911,0,"Wow, so edgy.

lmao",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
josefx,1,"I spend a year of my life trying to fix software that could not possibly work. We planned to make up for the cost in volume, I would love to say I wasn't surprised that the customer killed any hope of that happening at the end of that year. It was a gigantic loss in every possible way.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Juvenall,19,"Every team, company, and client I've worked with has needed this reminder: ""Agile is a philosophy, not a methodology."" I have to shut down entire conversations because someone says, ""Agile means you have to do stand-ups/sprints/retros!""",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,1,"It's amazing how simple the philosophy is and at the same time how incredibly difficult it is for most people to grasp it. 

Some people can't operate with a philosophy because it requires them to reflect and discern.  They'd rather blindly operate on instructions, which is why they latch onto scrum so tightly. 

I've given up so many times trying to explain what it means to teams, that I just drop the label and advocate for the principles as they become necessary.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
mothzilla,11,"https://agilemanifesto.org/

^ that's all Agile is.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
BaseAppSecEmboldener,3,"Although it’s not wrong to say that agile is about not planning everything upfront, its emphasis is on incremental working products and iterative improvements over heavy documentation. Another misconception is documentation is not necessary/important in agile.

Regardless of the methodologies, failed projects have to do more with poor management and incompetent key stakeholders than anything else.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
KrazyKirby99999,3,"> Characterized by quickness, lightness, and ease of movement; nimble.

Fits",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,2,"You're right.

There's no planning upfront.

Early agile movement was to bring customers to their shops to talk with development team, then discuss what they want, development team will then translate those requirements to code and tests immediately.

Agile is basically a rebellion against those waterfall world with diagrams (UML). enterprisey software (like EJB back then) and heavy software requirements documents.

Weekly sprint was added later.

Invention of Ruby on Rails and the rise of Python catapulted Agile to mainstream popularity.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
BlindTreeFrog,1,"As I like to say, Agile is an umbrella term for a bunch of development techniques that companies selective choose to follow and then do incorrectly.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
joshc22,1,"This has 100% been my experience. ""Agile"" is what business weenies have no idea what they want and don't want to think about it or write it down. They think because we're using ""agile"", they can invent features and requirements at anytime that can be instantly implemented.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
MaleficentFig7578,1,"When you're not using agile, they still do this, but you ignore it and deliver useless software on the planned end date.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
VeryDefinedBehavior,1,"I'm honestly confused by whether Agile plans things up front or not simply because I don't know how you'd get a contract in the first place without your liasons negotiating what the project is and what it means to fail, and I never got to see that process. More, I think, the problem is that trying to be Agile^TM just means that engineers don't have to be part of the negotiation process, which makes it more likely to get a contract in the first place even if it's an absurd project. I've been on the receiving end of that several times, and it's why I don't like people making promises for me.

I'd like Agile more if it promoted a proper research and development phase where it's expected that rough draft prototypes will be discarded since their purpose is to teach you the pitfalls of unknown unknowns through experience.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
MaleficentFig7578,1,"It's a catch-all word for all methods where you don't plan EVERYTHING upfront.

Traditionally in business contracts, e.g. to building skyscrapers, you plan exactly what you want, and then 2 years later, you get exactly that. If you want a different skyscraper halfway through, good luck. It's not physically possible.

With agile buzzwords, you still have this contract but you have the physical possibility to change it later and you don't have to know the minor details at the start, like what shape the cubicles will be.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
VeryDefinedBehavior,1,How do the buzzwords work in contracts? How do lawyers think about technical things?,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
makoto123,1,"My pet peeve. When I hear another PO or lead whose only answer to questions or blockers that becomes apparent is ""That's why we're agile."" Motherfu****!!! ",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
MaleficentFig7578,1,wow 3 months ago. So much has happened in my life since then.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
SurgioClemente,81,"> suggests there's some underlying bullshit at play.

Probably because this thing was just an ad for some other methodology you are supposed to buy a book for but the journalist of this site didn't put much effort into vetting it

This was posted yesterday which has since been deleted (probably because it got called out):

https://www.reddit.com/r/programming/comments/1d7vegh/268_higher_failure_rates_for_agile_software/
which linked to 
https://www.engprax.com/post/268-higher-failure-rates-for-agile-software-projects-study-finds


Not that I'm going to champion or defend agile, but any ""study"" with amazing results posted side by side with an ad to buy the fix is definitely something I'm not going to believe",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
r_de_einheimischer,55,"Useful comment here. It’s an ad. Money quote:

> By contrast, projects adopting a new Impact Engineering approach detailed in a new book released today only failed 10% of the time.

Sure.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
AdvancedSandwiches,6,9 out of the 10 scripts the author wrote using it worked fine.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
mpyne,1,"Yep. When I saw the headline I was convinced that at *best* they compared one ""agile"" method to another ""agile"" method.

Very very few organizations actually use a completely non-agile, full-discipline waterfall method.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Schmittfried,4,Explains the general shittiness of the article and its claims. ,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
JarateKing,212,"> 268% higher failure rate is absolutely insane and suggests there's some underlying bullshit at play. 


I think the easy answer is the nature of the projects. The kinds of projects that consistently deliver within budget and on time tend to be the ones where there's few unknowns and a clear vision of the end-product. Agile's big point is to deal with unknowns and unclear visions, so I wouldn't be surprised if the discrepancy is due to agile taking on the projects that would go over budget in any methodology.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Skeik,68,"That would make sense but I don't believe corporations take the type of project into consideration when choosing to adopt Agile. In the corporate world (in my experience) agile is adopted by the entire corp, not on a project by project basis.

I'd love to see what the success rate is for existing teams that organically adopt agile practices, vs those that were pulled into it. I'd also like to see stats for software development companies vs those in other industries. It seems the % figure from the headline is from a self reported survey anyways so I guess we shouldn't take the stat at face value.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
quick20minadventure,53,"Most people ruin all methodology by passing urgent stuff in middle of process. 

And no one does task analysis to find out what kind of work structure is best. They just go for monkey see monkey do.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Bleyo,16,"We have a dev on rotation whose entire sprint is dealing with that kind of bullshit(plus any kind of long term documentation/architecture tasks).  They also manage deployments.  Most of the time, it's a chill sprint.  Sometimes it's a nightmare.  

We also implemented a formula when creating tasks that determines if it's actually ""urgent"".  If the score is under a certain number, it goes into the sprint backlog, even if the CEO created the ticket.  If it's over a certain score, it goes to the expediter dev to be worked on immediately.

Obviously, the entire company had to buy into it.  

We still get some upper management trying to game the scores to get their pet tickets finished first.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Akthrawn17,10,"And the name of the role which this rotating dev is filling?  That would be ""Scrum master"". This was the original task that a SCM had in a team.  To block interruptions and remove blockers.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Bleyo,14,"I've never had a scrum master that was actually a developer.  Our current ""scrum master"" just runs all the sprint related meetings and documentation for several teams at the company.  I call her ""scrum mommy"".",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
baal80,1,I would say that this is the reality for 99% of teams.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
puterTDI,9,"Our problem is the dev team has no say in this.  Priority is entirely determined by po and management and they have no metrics or criteria for it, it’s gut feel.  I’m a dev lead and have repeatedly talked with my manager, my director, and the pos about this and gotten no where.  Engineers have almost entirely given up on questioning priority.  Our focus has just become getting the engineering work we need to be prioritized so we can do it and that has taken a lot of effort",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,7,[deleted],2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
puterTDI,2,"Our management is chill but they're really really bad at recognizing the impact of their decisions.  It's also just completely ingrained into the culture that engineers don't have a say in this stuff so we never seem to manage to have a good conversation around it.

I like your formula, I just can't think of a good way to implement it because the core disconnect will be ""wait, but POs decide what the priority is"".",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
blind_disparity,2,"Isn't the correct solution here to just ignore prioritisation, nodding dog through planning and then just work on the stuff that actually needs doing under the label of their mis prioritised stuff? I mean the real work is bound to be a prerequisite for their ideas anyway..",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
puterTDI,1,"Only works if you're getting the inputs you need to do that work.

If they want you to work on something else you're not going to get the inputs for the stuff you're trying to work on and it starts to fall apart.

The correct solution, imo, is a cultural change to recognize engineers as core to the decision making process.  I get a TON of vocal support from management in that but actions speak louder than words.

I do think we've been making some slow progress on it but when something is so embedded in the core culture it's really really hard to change.  People aren't even aware of the biases they have and don't recognize how their every small action reinforces the behavior.  When you point it out to them they're like ""oh, ya, I see that"" but they don't get that that's just one of the many things they're doing to reinforce the culture.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
blind_disparity,1,"Oh yeh that's definitely the right solution, my suggestion was half a joke, and half a cry of despair of how to cope when they refuse to let engineers into the decision making.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
puterTDI,1,"ya, I can share some of my despair.

One of the major progress items i made was to actually include an engineer in release planning.  Yes, that's correct, they were doing release planning and not allowing a single engineer to be present for it.

How did I get this changed?  Well, I figured out that the following was happening:

* POs were not working on or writing specs for top priority items.  Had no idea what needed to be done for them.  They would then tell engineers that we were not to start work on the item because it wasn't ready.
* When Engineers were finally told we could work on the item, it was at the very last second with no time for actually doing the work because POs had realized the deadline had arrived.  There was little to no spec actually written and questions about what we were doing were either answered differently day to day, or with ""I don't know"".  My favorite example of this is a spec for a feature that took 2 years to work on...the spec consisted for 50 lines which were labels for buttons and text fields.  That's it.  The feature required extremely complex business logic which was in no way documented
* These features were then coming in WAY late.  I found out POs were going into the release planning meetings and just telling management that engineers were refusing to work on the items and that's why they were late.  They got away with this because not a single engineer was present.


I changed this by identifying high priority items on my own (which can be hard when you're given zero visibility into upcoming work, what it's about, or what the customer needs) and then taking that list of items to my manager the day before the release planning meeting and pointing out to him what was not being worked on and why.   That way when he went into the release planning meeting and heard a different story he didn't just buy it hook line and sinker.

 I dealt with the functional spec issue by asking him which specs he and the PO manager have looked at.  When they said none I opened the spec I mentioned above (which engineers had been repeatedly lambasted for for ""poor quality"") and asked him which requirements we failed to meet.  He was astounded that this massive feature had pretty much no spec.  I also documented myself asking the PO for that spec questions...specifically the same ones each day.  Every single day I got a different answer.

Result: Engineers included in release planning, and POs told that their specs would be reviewed by their manager who apparently had never actually opened and looked at one of their specs...which was the only output that team actually had.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
quick20minadventure,1,"That's called CEO management. You manage crazy CEOs like musk with distractions, so you can make actually good products. 

Tesla and spacex had to do it a lot.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
quick20minadventure,2,"Start ups will never work on a structure basis, the upper management will come and break things all the time. Company buying into a long term process is a rare thing.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
mightymk,1,Hey that seems interesting can you provide more details. Like what framework or parameters you used to come up with the score. I have been trying to figure something similar for our ecosystem,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,1,[deleted],2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
mightymk,1,"Thanks for listing out the parameters, helps me get a start.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
hubeh,14,"Every company sells themselves as ""agile"" these days. They don't really know what the word means but whatever it is, they are it.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
AmateurHero,8,">  In the corporate world (in my experience) agile is adopted by the entire corp, not on a project by project basis.

My experience is that the entire corp is agile until some c-level or VP gets a wild hair and wants something immediately. Then after we've packed our PI to the brim such that every point of velocity is accounted for, everyone has to dump everything to pull in a sprint long feature. It's never consistently my team, but at the two big companies I worked for (as well as peers who were at large employers), it happens to someone every quarter. 

My problem with agile is that people (both product/business and devs alike) use it as a shield to get things that they want instead of what's best for their team. Devs don't want to talk about a timeline for deliverables, because that's hard to estimate. It's easier to hand wave away effort as it doesn't represent a length of time. The business side wants points to represent time, because then they can weaponize estimates as a deadline. 

The shitty part is that it's always just one or two assholes doing it. Most everyone is getting along. The teams from top to bottom are making concessions and having good discussions making appropriate trade offs that work for everyone. It only takes one person with power to make artifacts unbearable, turn demos into a deliverable death march, or monopolize the teams time by locking devs into 10 hours of weekly meetings.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Skeik,3,"Yeah it always comes back to people. Managers and devs both game the system. And agile makes it easy cause some agile implementations give people #s to mess with & make metrics off of, like story points. 


Not much to add cause I pretty much agree with you in full. This stuff has happened all the time but it didn't feel so prevalent before we started doing SAFe.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
aint_exactly_plan_a,15,"Corporations are also laying off resources but demanding the same timeline... micromanaging Agile instead of trusting their people... 20 years ago ""Do more with less"" was my company's unofficial motto.  I can only imagine today where companies are trying to squeeze every stone to find more profit.
 
Agile's future was always in jeopardy because managers rarely ""get it"".  They want the efficiency and productivity boosts that are a byproduct of following the principles, but they don't want to follow the principles.  I was hopeful for a bit that management style would adjust to allow Agile to flourish but once again, corporate America ruined it.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
dontyougetsoupedyet,7,"People tend to read only half the sentences used when defining agile concepts. They want the ""enhanced agility,"" and have no mind for the ""continuous attention to technical excellence"" or ""good design.""",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
aint_exactly_plan_a,6,"Yeah... I give presentations to C-Suits about it.  They ignore the cone of probabilities and just hear ""last minute changes are ok""... they hear ""increased productivity"" and ignore self organizing teams, and trusting your employees... Then I start talking about ignoring short term financial goals to focus on long term company goals and they either write me off as crazy or are already discussing how to use it for increased productivity and have stopped listening to me.
 
When management is both causing the problems AND has the power to blame/fire others for those problems, things aren't going to get better.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Xyzzyzzyzzy,22,"> The study found that agile software projects are 268% more likely to go wrong

The study also found that 93.875% of science and tech journalists don't know what significant figures are.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Polantaris,7,"> 268% higher failure rate is absolutely insane and suggests there's some underlying bullshit at play.

In my experience, it's because projects are being run as waterfall but claimed as agile. My coworkers and I call this, ""Scrumfall.""

It's the idea of running development work as if you do sprints and in an agile way, with daily scrums, etc., but absolutely nothing comes of sprints with incomplete tasks (the can gets kicked down), and the release schedule was planned half a year or more in advance, before the project started, because the stakeholders on the project don't want a solution over time, they want a ""once and done"" release. There is no feedback on work done until the whole solution is completed, so the idea of working this way is irrelevant as none of the gains from the methodology are ever seen.

So we spend day after day, pretending like we're working agile, but we're not. However, we can use some fancy keywords to describe what we do (even if that's completely inaccurate) so it's okay!",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
android24601,7,"Something I do notice is many groups jump to agile, but fail to consider the importance of setting up the development pipeline and infrastructure to support it",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
eraserhd,22,"The article says “65% are more likely to fail “ and “268% more likely to go wrong.”. So I don’t even know what they are saying.  What does “go wrong” mean?

EDIT I mean to say, it doesn’t seem to be claiming 268% more likely to fail — which is still a relative percentage so doesn’t tell us the magnitude.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
AyrA_ch,5,"> The article says “65% are more likely to fail “ and “268% more likely to go wrong.”. So I don’t even know what they are saying. What does “go wrong” mean?

I assume ""fail"" means the project is never released, and  ""go wrong"" means it's going to completion but with major problems, some of which they mention (budget, product quality) as well as potentially other problems like feature creep.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
eraserhd,8,"https://www.engprax.com/post/268-higher-failure-rates-for-agile-software-projects-study-finds

This seems to be the source.  65% do not deliver “on time”.  268% more projects fail when they don’t meet the five principles of Impact Engineering, which are:

* Clear requirements before development starts
* Freedom to discuss and address problems
* Requirements accurate to real world problems
* Complete specifications before development starts
* No late requirement changes

Failure is not defined anywhere, perhaps unless you buy their book.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
zanotam,8,Lmao yes if you have near perfect information water fall basically then I *hope* you rarely fail or go over budget even!,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
mpyne,4,"Plus delivering ""on time"" means absolutely zero if the *what* you deliver is useless because you couldn't adapt to changing needs.

I'm in the Navy and we once delivered an IT HR portal.

It turned out the HR portal couldn't be used by Navy Sailors who were on Navy ships.  It only 'worked' ashore (and even then, only barely), due to the extreme resource and bandwidth requirements.

The Chief of Naval Personnel didn't find any of this out until it had already shipped, at which point he had to direct the team to stop everything they were doing to make a 'low-bandwidth' re-implementation of the whole thing.

But hey, they shipped the original 1.0 ""on schedule""!!!",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
singron,3,"This should be the top comment. The numbers in the article seem big, but the structure of this survey really makes them nearly meaningless.

If this was a medical study, it would be a hilarious failure of science. E.g. patients who had symptoms of a fatal disease and took medicine were more likely to die than patients who didn't have symptoms and didn't take medicine. Nobody would accept the conclusion that the medicine kills patients (based on this evidence) since the study wasn't formulated to answer that question.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
ilikecakeandpie,3,Peak Steinermath,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
klausness,6,"The problem is that in practice, “agile” is often just a façade for micromanagement.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
VeryDefinedBehavior,1,Yeah. I had to defend several times why I spent time building tools to help me understand my data rather than making commits on my tasks. If there were less constant oversight then a couple of days of R&D would fly under the radar. Panopticons are not pleasant.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
klausness,1,"The irony being that agile was supposed to be a way of empowering programmers and getting them out from under the thumbs of clueless managers.  I’m sure the agile fans will come along and tell me that this really happens when agile methodologies are properly implemented.  That may be true, but in that case, I’ve never seen agile properly implemented.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
VeryDefinedBehavior,1,It's the same problem with political systems. It doesn't matter how perfect a system might be if the judges are corrupt. Whoever is the ultimate authority for saying how the system works can pervert it any way he likes.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Smurph269,13,"Are the projects actually more likely to fail, or do you just find out that they've failed faster than with a waterfall or unmanaged project?  I'd rather have a project fail in 6 months than spin its wheels for two years looking like it's making progress.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Dreadgoat,9,"Yes, I see this as a feature, not a bug.  

What this really probably means is more projects are never reaching a point where so much cost is sunk into them that they need to be turned into a polished turd in hope of recapturing lost capital. Having the ability to quickly recognize bad ventures and abandon them at 10% is a superpower in business.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Smurph269,3,Yeah it's just that it puts the software teams in the precarious position of being the ones that have to tell leadership that their ideas were stupid and their projects have failed. Leadership will interpret this as the software team failing because there's no way leadership was wrong.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
ub3rh4x0rz,1,Internal methodology of a team has to be isolated from the heuristics used to judge the effectiveness of the team. The latter should be much more qualitative and big picture,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
FauxLearningMachine,1,"The problem there is that the software team is getting its ideas about product engineering from ""leadership"". Go to the customers directly to understand their needs.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Schmittfried,0,"That‘s completely besides the point. First, shitty companies produce shitty results and work environments, surprise. Second, what‘s the alternative? Doing waterfall, creating all the same problems with the only difference being problems are noticed later?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
FauxLearningMachine,1,This is the correct answer. Agile is designed to fail fast and often so we can pivot towards things that actually deliver customer value.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
gonzo5622,4,"Every time I’ve seen it implemented at a large company, it is implemented in the most inept ways. So I can see why they are giving agile shit, they implemented agile in name alone.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
mycall,9,"Agile still requires thinking.  That is hard for the inexperienced.  Thinking is cheaper than doing, do put hard research into your backlog and try to foresee the problems that will be faced during the sprints.  Homework is key to succeed.  Be prepared.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Sage2050,3,"It requires forced collaboration, which leads organically to thinking. A lot of devs would like to just lock themselves in a room until they finish their project.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Dry_Dot_7782,10,"I don't really know whats the better option than agile though? You can add a lot of steps and processes that might be needed but if we just play with the thought of having an goal, working in shorter sprints trying to achieve that goal and revise the plan/requirements every sprint until you get it right.

That is to me the easiest way to develop anything. We can't have year long waterfall processes, we can't have no plan at all.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,13,[deleted],2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
hippydipster,4,"What are the odds we could get a real agile subreddit where people like you, who actually know what they're talking about, did most of the posting and commenting?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
quick20minadventure,4,"Two downfall of agile. 

1) sprints not long enough to finish tasks
2) requirements changing before you finish last changes. 

And these two result in myopic goals and lack of clarity about big picture of the project to everyone. 

Also, shorter sprint cycles means there's too many changelogs and versioning of a product. Too many QA cycles in some cases. 

Ultimately, quality of agile depends on the product requirement being clear and structured for the long term.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
angryweasel1,7,"Agile says nothing about sprints. Sprints are a Scrum thing (which was around before the Agile Manifesto).

And the Scrum folks say that if your requirements change, you should scrap the sprint and start over - which isn't often done either.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
quick20minadventure,1,"I'll rephrase then, it's the downfall of agile +scrum. 

And frankly, all these methodologies mix up because you are never just following one thing. There's overlapping of models and sprints/scrums are usually followed for agile. 

I'd also add that if most people can't follow methodology properly, then the methodology is inherently hard to implement and it's a negative point of the methodology.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Additional-Bee1379,11,Shorter sprints does not mean shorter releases.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
quick20minadventure,1,"Yes, shorter releases cause more versioning and changelogs. Not shorter sprint cycles.

Shorter sprints don't mean shorter releases, but it ends up happening. The agile mentality also includes the product managers who want to keep tweaking and experimenting on products instead of holistically designing something.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
loup-vaillant,1,"True, but in practice many teams conflate the two.

Besides, whenever applicable, you probably want continuous delivery anyway. That is, automated enough stuff that releasing a new version is no more effort than pushing a button, then wait some time for the CI pipeline to either make a new release (and perhaps even deploy it), _or_ tell you to go back to the drawing board (failing test).

Anyway, I hate sprints: why the arbitrary deadline? I understand the need for periodic reviews, or the occasional demo, but I don't understand the logic behind trying to fit a set of tickets in a specific time slot. Just do them one by one, and regularly check your estimates.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
quick20minadventure,1,"I'll also reply that Agile is not limited to dev.

Agile is about doing small changes, releasing it to customers, listening to feedbacks and then adjusting for it.

It's more than 2 week sprints for developers. And if you are doing agile, you need shorter release cycles, so customer collaboration is possible.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
MaleficentFig7578,1,"> 1\) sprints not long enough to finish tasks

your tasks are too big

> 2\) requirements changing before you finish last changes. 

your tasks are too big",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
wetrorave,3,"I like the analogy, ""You can't cross a chasm in two small jumps"", however your response seems fair in my experience with typical CRUD web apps.

But I imagine that there are tasks in some domains where not only can you not make 9 babies in 1 month, sometimes you can't even construct all the baby parts first and assemble them at the end. Machine learning models come to mind, as does algorithm design and PoC's for complex-but-not-complicated systems with high internal consistency and coupling, such as simulations. The task lists for goals like these begin to look like a list of science experiments written only one or two stories ahead of the work.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
MaleficentFig7578,3,"Training a machine learning model is the rare exception.

Simulations only if you already know perfectly what you need to simulate, and in that case, the requirements don't change, and you should still be able to split it up.

You aren't supposed to assemble the baby in the end. That's waterfall.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Excellent-Cat7128,11,"I always hear this. And people ask what to do and the answer is to break them down so they fit in the two week window. The problem is that there is absolutely no technical motivation for this sizing of tasks. It's entirely to please the methodology. That is, it's contributing nothing to the quality of the product.

I do think it's good to break down tasks into reasonable chunks. But whether those chunks fit into a sprint window (especially when people have to spend time on multiple tasks) is, to me, an irrelevant question.

And if the reason is so that something can be delivered at the end of the sprint, I'd question whether delivering a half based chunk of a feature or change is actually better than delivering nothing at all.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
quick20minadventure,3,"Breaking down in chunks is useless from a product perspective as well.

If a product needs a complicated big feature, they can't be confusing dev/QA and others by grooming it 3/4 times. It'd be like playing Mr. miyagi in karate kid. Go do some useless-looking things and hope it all comes together after 3 sprints.

It'd the job of the tech lead or scrum master or dev himself to break down tasks for internal tracking in any sensible way. But, some changes are just longer. And it's not up to product requirement to break it down just so devs can track things.

And Agile is not limited to developers, Agile includes doing small changes and releasing it to customers, so they can collaborate and give feedback. Changing requirements with frequent feedback is an intended mechanism of agile, but it needs to be regulated/controlled. 2 Week sprint is supposed to help this feedback mechanism, not cut apart the feedback.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Excellent-Cat7128,0,"Yes, exactly. And you can definitely get customer feedback in many ways without being handcuffed to two week sprints. Examples:

- Build prototypes and show to clients early to get feedback or help them explore the space with you. These can be mocked up quickly and do not need to be well engineered.

- Show off partial progress with trusted clients. I've personally done this and it's been really helpful while not derailing the process. Be careful, of course.

- Do some actual requirements gathering up front. I know this is supposedly anathema, but most places are making CRUD SaaS type apps. There are few unsolved problems in this space. You aren't making the next Google or ChatGPT. You are making an app for businesses to track numbers. It's definitely something that can be figured out with some thinking and mock-ups. Clients can be trained to provide useful up front input. I've done it. It's possible.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
quick20minadventure,1,"Yeah, but that doesn't work when you're making an app or software with no direct customer.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Excellent-Cat7128,1,Then you have a lot more leeway because you have few initial stakeholders.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
quick20minadventure,1,"Yes, but feedback process requires QA, release, adoption and then analysis. 

You can't sit in front of someone and they'll tell you exact what they want. You can't present two UI option and get one selected, you'll have to build and release and wait for data to see which one is giving better funnel/result.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Excellent-Cat7128,1,"Does it? Can you not do prototypes and mockups? Is all feedback good feedback? Just because a customer says something doesn't mean it's a good idea.

I've seen what happens with a constant feedback process as demanded by scrum/agile. You get janky software full of tech debt ans incomplete features that still doesn't do what the customers want. At some point, you actually have to design and be willing to say no.

I also question the idea that most software needs huge amounts of feedback. Most software these days is apps, games, b2b or business internal CRUD. These are generally not areas where there actually are a lot of unknowns. The tech stacks are known. The business needs are known or knowable. The ways to solve them are often fairly well understood. With some upfront diligence, and tweaks along the way, you should be able to develop good software. You don't need pivoting and changing requirements for 1-2 years while under development. That's just pathetic engineering.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
quick20minadventure,1,"Core products are simple, it's usually UI/UX. 

And you're playing margins. 1% better traffic or click through rate. 

2% better conversion. 

You can't really predict what people will like in such things.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Excellent-Cat7128,1,"So instead of accepting that you may need to make some adjustments for certain things as required, you develop and entire methodology around not committing, planning or working on anything longer than 2 weeks? Seems kinda stupid to me.

Flexibility is fine. Agile as practiced isn't about flexibility. It's about not committing or planning.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
quick20minadventure,1,"There's some miscommunication. Just because i say there are downsides, doesn't mean we won't use it. We just have to manage the downside. Adapt agile to fit the dynamics we face.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
MaleficentFig7578,6,You said the requirements change before you finish the task. This has nothing to do with the methodology. This has to do with the task being so big that the requirements change before it is finished. No methodology will fix this except for one where you pretend that requirements don't change.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Excellent-Cat7128,2,"I didn't say that.

But to your point: if requirements are changing that frequently that having a task take long than a week or so is a risk, maybe the requirements are changing too much? Maybe the company doesn't know what it is doing and is just hoping engineering will fix it by always shifting what it is doing every time a manager or client has a whim. I just don't think you can develop good software if the requirements change that frequently. Imagine doing that with a car or a house. Yes, little things get tweaked along the way but long running tasks should be able to handle that. Or a cost gets paid but that's life.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
MaleficentFig7578,-1,"You know that projects such as Linux, and Git, and Internet Protocol, were developed this way, while the design-everything-perfectly approach created GNU Hurd?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Excellent-Cat7128,1,"By people who were very technically capable and, all least initially, not working in a team and not delivering to customers. And notably, Linux is still not developed using Agile. They are mindful of the size of changes ot whether to let a particular change set in a particular release?? but the time it takes to develop them and the scope can vary widely.

Iterative development is not the same thing as breaking down tasks in a sprint planning meeting so that everything fits in two week chunks.

EDIT: I'll add that prototyping and exploration follow a different pattern. They are themselves requirements gathering processes. Notably, you can't put a time box on them because there are too many unknowns. Early Linux and Git were exploratory. So of course they moved quickly and without initial deep requirements gathering.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
MaleficentFig7578,1,Agile doesn't mean sprints. Just because features aren't always developed in two weeks doesn't mean it isn't agile.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Excellent-Cat7128,-1,You responded to someone saying tasks can't always fit into two week windows by saying that they should be smaller. The only reason you knew they should be smaller is because they couldn't fit within a two week window. That's just bad logic and moreover contradictory to this response you just posted.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
myringotomy,0,"That doesn't answer his question.

I'll quote it here.

>I don't really know whats the better option than agile though?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
quick20minadventure,1,"Nothing. 

At least objectively speaking. Depending on team size, dynamics, product type, requirement change frequency; team needs to adjust the way they take requirements and the way they work on it. There's no magic answer that is better than everything in all case. 

Agile is usually the most undefined and flexible structure, so it's widespread. But, getting agile properly configured to the unique situation is a huge task by itself. Most companies mindlessly put 2 week sprints without processes and expect it to work.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
myringotomy,0,"I submit that it does work. In fact I submit that it's the only thing that could possibly work when you are in an uncertain market where you are trying to solve difficult real world problems in a changing competitive environment.

The problem here is that everybody on this subreddit seems to think it's possible for management to write a document so detailed and thorough that they can just hand it to the development team and go away for a few months after which the development team will deliver a perfectly functioning product with no flaws or bugs.

That's a pipe dream. You will always have changing requirements because nobody can be certain of anything in business.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
quick20minadventure,1,"ROFL. I wish it was possible to write that good of document. 

It's not just that requirements are changing, but because you can't think of all situations right away and sometimes technical challenges are unforeseen by the management. 

Agile works, but it needs understanding of dynamics to be efficient.

Agile is acceptance of the fact that requirements don't come like building plan in software.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
myringotomy,0,">It's not just that requirements are changing, but because you can't think of all situations right away and sometimes technical challenges are unforeseen by the management.

Yea it's called real life.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
ilikecakeandpie,3,"They're all symptoms of poor planning. Things are going to run long if it isn't planned well, whether from changes in requirements, scope creep, or improper estimation from devs

Agile isn't the problem, I'm sure the same problems exist in waterfall as well and not everything is suited to be in a kanban board",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
mpyne,1,"> Things are going to run long if it isn't planned well, whether from changes in requirements, scope creep, or improper estimation from devs

OK but none of these things are precisely and completely predictable ahead of time.  The best you can do is lock a requirement baseline and then just say that is what the customer will get whether they like it or not.

But, the customer gets a vote and they very well may not like what they get! The sooner the devs see how that vote resolves, the sooner they can deliver something the customer will actually use.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
ilikecakeandpie,1,"They're not completely predictable, but there are steps one can take to eliminate as many variables that are business requirements/customer based as possible like user interviews, good mockups/workflows and agreements from stakeholders based on those

Improper estimation from devs is hard because sometimes you really don't know how bad it's going to be until you get started. That's why spike tasks exist though and you have to give a reasonable amount of time to see what you'll need, as well as a little wiggle room for the [unknown unknowns](https://en.wikipedia.org/wiki/Donald_Rumsfeld#/media/File:Rumsfeld1.jpg)

As far as the customer goes, they'll generally get used to it unless you've put a dogshit feature out or terrible change, which then hopefully you've got a good rollback plan or someone in management that's willing to take the blow for the team until it gets fixed",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
mpyne,1,"> but there are steps one can take to eliminate as many variables

Sure, and none of those are contrary to agile methods.  Windows 95's initial design was heavily modified [based on user interviews and mockups](https://socket3.wordpress.com/2018/02/03/designing-windows-95s-user-interface/) before it went gold, but they couldn't have done that without having a working product to put in front of users and without a willingness to abandon the Big Spec in favor of the evolving prototype-as-spec.

Agile is meant for helping to manage uncertainty, but if you have achieved *certainty* on something then by all means, bake it into your plan.

> Improper estimation from devs is hard because sometimes you really don't know how bad it's going to be until you get started. That's why spike tasks exist though

Right, and a 'spike' is an agile concept, to help you better plan future work.

> As far as the customer goes, they'll generally get used to it 

Maybe *internal* customers will, but in an actual competitive market you can only be dogshit for so long before customers will switch.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
puterTDI,4,"Imo, a lot of people that I hear who hate agile cite things that they experienced that were specifically anti agile.  

The main issue with agile imo is the fact that management teams are often incapable of implementing it and instead only implement the parts they like while ignoring the parts that put checks on management and POs.  As a result you’re just cutting the structure, information, and controls that represents work for managers and POs, while expecting rapid change and high speed iteration.  Companies that do this are not using agile no matter what they claim.

This sort of study needs to rate the effectiveness or completeness of the agile implementation before including the examples in their success numbers",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Sage2050,7,"Ive been beating this drum for a while and people always come back with ""well if it's  implemented wrong so often maybe it's not a good methodology"", which I think is throwing the baby out with the bathwater",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
puterTDI,5,"I've heard the same and completely agree with you.

We've actually gotten a lot better in our implementation and the closer we get to actually following agile principles the better it works.

I've worked both in waterfall (for about 8 years) and in agile (for about another 8 years).  Some of that time included really poorly implemented agile and it was **still** better than waterfall.

I think a lot of the people who conclude this frankly haven't been working in the industry long enough to have actually worked under different methodologies.  I'd be curious to hear what they start saying after they have to work in a waterfall framework.

Edit to say: One big thing that agile brings that I like is that it's team responsibility and not individual.  Our team provides accurate estimates and a velocity to say when we can get stuff done. The key thing I've learned is to ignore the deadline.  We tell you what we can get done when, if you can't decide what you want, or you are unable to make sacrifices then your deadline doesn't matter to me.  We told you what we could do, you choose what you want in that time.  If you want more than we can do in that time, then change the time.  Because it's a group of people, no one person is to ""blame"", and the key is to just do your job to the best of your ability.  Conversely, with waterfall a single engineer would be assigned to a single feature.  That feature would be fucking enormous (6 months to a year).  You'd be given an inaccurate and incomplete spec that you'd then have to estimate to within the week.  You'd start coding and they'd change their ask 100 times beneath you, never really reflecting the impact in the spec...and if you weren't done when you said you would be a year ago you were held personally responsible for ""being late"".  It fucking sucked and I won't ever do it again.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Sworn,1,"grab badge thumb instinctive head observation chubby seed scary spoon

 *This post was mass deleted and anonymized with [Redact](https://redact.dev)*",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
puterTDI,2,"I know of no rule in waterfall that requirements can't change.  It's acknowledged that the cost of change is very high in waterfall.

The idea is that changes should be rare, but the reality is entirely different.  This is a big reason agile even became a thing.  Agile when it started was couched to us as basically recognizing a reality (requirements do change).",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
mpyne,1,"The requirements can change, but the point is that you have to throw out a ton of planning or even coding work *if* that happens.

The original Waterfall paper noted that an ideal flow would be only one-way, but that this is unrealistic.  They then proposed a flow that is likelier to be feasible in practice where one step can go something like 3 steps back if problems are encountered.

Even there, they *also* noted that you had to build the system twice: once to figure out what you *should* have built after getting the users to try it out, and then the second once you understand what the real requirements should have been.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
RoosterBrewster,5,"It's like companies trying to copy just-in-time manufacturing from Toyota, but don't let workers be empowered or develop a robust supply chain. ",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,4,[deleted],2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Schmittfried,2,I‘d argue we don’t have a good one yet. Most people can’t implement any methodology successfully period. Agile methods seem to be lesser evil. ,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Infamous_Ruin6848,1,"That's the magic point.

Provided you don't end up being overly micromanaged, which is what I've seen all over past 8 years of work. 

I failed to see a scrum master that actually helps in making the team to efficiently use scrum. Majority end up gold plating the work, scope creeping or however you wanna call it. And guess who takes the L? Yes, the product owner.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Sage2050,1,"People don't hate agile, they hate being micromanaged. If teams were left to their own devices (and forced to talk to each other) they'd operate in a way that resembles agile organically.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Mavrihk,1,"usual failure is business changing their minds which is why agile is used, unfortunately the failure may more likley be the business failure since they don't properly define what they want, and then when they see something under agile they make changes that were not in the original requirements that requires structural changes, forcing re-writes etc, an experienced developer knows how to plan to scale and write code that is easy to change, but passing development to offshore devs without clear leadership and daily guidance is where most of the failures will be.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
TheGRS,1,"I like agile processes when they work and everyone is bought in to pivoting and changing. I don’t know about all of you but I’m pretty bad at long term estimating, even on the long term vision often. I’d rather work on what we know upfront and make minimum efforts for things that we don’t know very well until the vision becomes clearer. That seems like most of the point of agile: stop wasting time planning out the stuff you don’t know well, you don’t want to spend an entire year of effort only to realize the customer doesn’t want the product.

When it doesn’t seem to work is when the powers that be don’t understand the point of pivoting or pushing minimal products or how unclear design can be at early stages. So they push traditional planning and estimation on top of agile processes. Now you’re doing both processes, constantly doing standups and retros and pointing without the ability to change direction or try new processes. And you’re marching through a year long roadmap, never on time. And I think a lot of comments on this subject I see reflect this reality where they see these pointless exercises because all it’s doing is sucking up their valuable time that should probably just be spent on either concentrated design time or the work itself.

Personally don’t think I’d be happy in traditional workflows, but I know I’ve also been miserable with faux-agile workflows where leaders set hard deadlines and are watching your points like hawks, and for no productivity gains! And they suck up valuable time with constant estimating exercises.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
irqlnotdispatchlevel,1,"

> 65% of projects weren’t delivered within budget, the study noted, while quality standards were also found lacking.

I don't like agile, but this doesn't mean much if we don't compare it with something. Maybe software in general is not delivered within budget.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
redballooon,1,"> 268% higher failure rate is absolutely insane and suggests there's some underlying bullshit at play.

In other words, projects that are so poorly conceived that they are likely to fail tend to get the word “agile” stuck to them.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,1,It will always come back to the horrible state of Management and the nepotism and favoritism that leads to it becoming useless.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
tiajuanat,1,">268% higher failure rate is absolutely insane and suggests there's some underlying bullshit at play.

There is absolutely a refusal to plan aspect in Agile. I mean that beyond Refinement. So many devs I know are like ""we'll fix it on the fly"" and then they paint themselves into a corner. There's no alternative to good design, and that takes expertise and time. I've been mocked for using formal methods by my CTO, but then come around, on time, under budget, with a maintainable system. 

There's also an avoidance of tooling (logging, diagnostics, etc) As tooling often doesn't bring value to the company. Teams will only add tooling after it's determined that it could've saved them X (usually hundreds) of hours in the last year.

The team that I've sat on for the last half decade is 2-6x faster than the other teams in my company by basically just implementing those two, *and then* following basic Agile practices.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
hyrumwhite,1,In a lot of companies ‘agile’ just means they do daily standup meetings. ,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
BornAgainBlue,1,I think people tend to forget what a shit show software development was before this method came along. It does need to be replaced but by something better not by falling back to old broken systems. ,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
shmorky,1,"It sometimes feels like I'm spending more time in meetings *about* the agile process, or how we're going to become more agile, or accelerate our agile workflow, than actually working in an agile project.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
PlayingTheWrongGame,1,"Of my team finds that a software project we were working on is an unnecessary waste of effort, and we stop development, is that a failure or a success?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
zerothehero0,1,Agile Consultants,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
TooMuchTaurine,1,"Would need to see definition of failure.. is that it simply didn't run on time? Agile is inherently more unpredictable, but likely the estimation is lower up front and has to move. But that doesn't mean it would have taken less absolute time than a waterfall project. I'm sure they didn't do a side by side study doing the same project twice with different methodologies to get that statistic.


Also are they measuring the value of the software delivered in solving the problem, or just that it was done on time. Delivering on time does not equal getting the outcome intended once it's in users hands.  Agile inheritantly is more closely aligned to getting a better outcome for users as it's willing to adjust to feedback and learn along the way.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
NotSoButFarOtherwise,1,"Engineering methodologies can't fix management or organizational problems. If your boss views his job as to screw over his team before they screw him over so he can get ahead, no methodology - other than firing his ass, which is unfortunately far too uncommon - is going to fix that.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
plantfumigator,1,It's pretty good if your company implements at most like 1/10th of Agile's ideas,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
CreativeGPX,0,"The phrasing suggests that it's the agile project's fault that it went ""over budget"", but it's equally possible that it's the management's fault that they ""underestimated cost"". I lean toward the latter since, if you were actually using agile, you would not be able to have an up front budget to compare everything to (which would require you to plan out the entire project first in order to know the amount of resources it would take). The more that they try to come up with a target budget for the whole project at the start (so they can say you are going over it), the more that they are straying from agile dev ideology and we can't really assess that as how actual agile performs.

Meanwhile, what does ""go wrong"" even mean? Does it mean ""fail"" like you said? Never see the light of day? Or does it mean diverge from the initially expected dev path into tasks/issues you didn't initially intend/expect? Because, again, going off script from the initial expectations is literally a feature of agile. And for the projects that do fail, why do they fail? If they just fail because the manager is uncomfortable with how much the team's work has diverged from initial expectations of what the work would be and canceled the project, again, this seems like a situation of waterfall management clashing with agile devs.

I definitely understand why agile isn't always practical. But I think we have to be more honest that a lot of companies can't really say they are using agile if it's not deeply integrated into all facets of their business, not just devs. Devs cannot be agile if they are operating under managers and budgets that are not oriented toward agile.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Venthe,170,"600 engineers. Not 600 companies, not 600 projects. 600 engineers.

I assume that they are agile, by the virtue of ""having daily""? Because ""within budget"", ""delivery on time"" smells like something decidedly NOT agile.

> And the success rates for transformation initiatives are low, with 96% of agile transformation projects failing.

No wonder. Companies claim to be agile, yet change nothing from existing processes aside from names. [We've tried baseball](https://ronjeffries.com/xprog/articles/jatbaseball/).

> ""**With 65% of projects adopting agile practices failing to be delivered on time**, it’s time to question agile’s cult following,"" said author Dr Junade Ali, a cyber security consultant.

Lol. Agile is not about ""delivering on time"" but delivering the right thing with minimal waste.

---

And the rest.. ""requirements before the project"", ""didn't require significant changes""... This survey was build to check how well agile works, but measures waterfall. ""Were you able to change the project direction? Stop the project altogether? Change the priority when the new requirements came to light?"" Those are _agile_-oriented questions, not this load of bollocks.

If you know the requirements before project, you don't need agile. But I've yet to work in a project that actually knew how the end result _really_ should look like.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
temculpaeu,38,"I like how a lot of people assume that they are agile just because they are using Scrum.

A process is not agile, a process cannot be agile, agile is a mindset not a process, if you follow Scrum by the book and dont make changes to your process/product/structure, then you are just using Scrum, not being agile.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,7,"I'm a lead on a project where sprints weren't the right process. Requirements were changing weekly and sometimes daily as client needs came up. Sprints would fall apart a few days in. So I set up kanban with weekly releases. 

My company, full of technical consultants, claimed the project was no longer following the agile philosophy. 

Forehead slap much.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
r_de_einheimischer,29,The author is selling a book on his own methodology and this research is done to support that his method is better than agile. You can criticise a lot about agile but this is bullshit and shouldn’t be upvoted. The research has no value in my opinion.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
liitle-mouse-lion,1,"It should be upvoted, to highlight comments like yours",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
jl2352,8,"The problem is most companies don’t know what *’delivering the right things with minimal waste’* really means. An executive has something they want built, they want teams to get on and build it, and to know when it’s done. That’s simple. They get that. So that’s what they want to do.

The other problem is that real transformation requires changes across the whole business. I was working at a company adopting agile, which in their case meant better written tickets and doing more ceremonies. That helped. However projects were still late, very fucking late, because the CTO flat banned allowing teams to contain both data scientists and engineers. You’d be literally left blocked for months.

My point is; one of the big issues with agile is one cog (in my case the CTO), can fuck up the whole transformation. By flat refusing to take part. Then everyone wonders why a half assed approach didn’t work.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
StickiStickman,23,"All of this sounds a lot like No True Scotsman.

""Could it be there's a problem with agile? No it must be that they're not *actually* doing Agile!""",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
erasmause,20,"Yes and no. A large part of the problem is that agile has broadly become a nothing word. People just throw it out there because it's what your *supposed* to be if you want to attract top talent, but few people actually stop to figure out what it means. A lot of people just think it means ""no design docs"", other people think it means ""dailies give tech leads the info they need to micromanage"". If you ask 50 engineers what agile is, you'll get 75 different answers.

Yes, this is a ""no true Scotsman"" discussion, but mostly because all the true Scotsmen died about three years after the agile manifesto was published.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
moratnz,6,"The difference is that a shitload of what people label 'agile' isn't remotely similar to agile processes as spelled out by the authors of the idea. 

If what were to take from the study is 'just calling your process 'agile' while not actually following agile methods is likely to make it worse rather than better', okay, fair call, but not a surprise. 

In the other hand, if it's criticising agile methodologies by looking at stuff labelled 'agile' but actually e.g, waterfall, that's not fair",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Schmittfried,4,"Sure, sounds like it, but it isn’t. ",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
zzz165,2,But we’re using Jira and story points and having daily standups (that have 20 people and last an hour). Of course we’re doing agile!,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,1,no. that would require just one take on agile. agile is a quality and a product. it’s closer to a strawman. the product people claim it’s the mindset and do nothing inline with it. talking the talk versus walking the walk. these people make me furious. ,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,54,[deleted],2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
cyber-punky,22,"Agreed, its funny how when things go wrong it is always the ""Devs"" who need to ""acknowledge(d) its failings"".",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deep90,2,"""Devs"" is 2nd place to ""AI"" for most bloated terminology in software.

  
Go to any gaming sub, and ""Devs"" is often used interchangeably with the actual company name.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,1,no. there are too many managers as is. ,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Asyncrosaurus,54,"Trash, inflammatory title, and content devoid of useful information. 


A survey is not a study, and the first flag is using both terms interchangeably. I'm assuming ""Agile"" in this context means scrum, since Agile is an extremely broad term and flexible methodology, whereas scrum is what everyone is actually told to follow. There's no actual details on any of the projects, scope, resources, the industry, the approaches or the long-term viability of the launched projects that ""succeded"" and failed. So totally worthless.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
SurgioClemente,19,"This was posted yesterday (since deleted) https://www.reddit.com/r/programming/comments/1d7vegh/268_higher_failure_rates_for_agile_software/ which linked to https://www.engprax.com/post/268-higher-failure-rates-for-agile-software-projects-study-finds

In addition to being devoid of useful information you can buy their book for doing it a better way with ""Impact Engineering""",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
shaidyn,8,I always trust someone who is selling me to the solution to what they tell me causes my problems.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
larikang,120,"> However, the survey found projects which had a specification or requirements documented before development started were 50% more likely to succeed than those which didn’t.

Where in the agile manifesto does it say that you aren’t allowed to write down requirements? It just says to value working software over documentation. It doesn’t say you can’t document.

> Projects which didn't require significant changes to requirements late into the development process were 7% more likely to succeed.

Oh nice. I’ll just specify upfront to everyone that the requirements aren’t allowed to change. That will make my project successful!

> Other practices were also said to increase success. Those where the software engineer reported feeling psychologically safe to discuss and address problems quickly when they emerged were 87% more likely to succeed compared to those which didn’t.

Definitely the most important part of agile is the part where it says to make everyone feel psychologically threatened. /s

> Similarly, projects where requirements were accurately based on a real-world problem were 54% more likely to succeed.

Again, what does this have to do with agile?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
freshhawk,77,"While it's really annoying, and really unfair to the authors of the agile manifesto, the term ""agile"" now means Scrum and it's cousins. That's what the article and research and most of the comments are talking about.

I used to be annoyed by this and point out that agile is great, the thing they are talking about goes against most of the manifesto and shouldn't be called agile anyway, although i agree that it is trash and not a good way to manage developers. I've given up, some authors of the manifesto still post about this stuff and they use the term ""agile"" to mean this stuff as well, so I've taken it as a lost cause.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
kakkapalleroinen,15,"I don't think the listed issues stem from Scrum either, though. On the contrary - despite its faults, Scrum is still an iterative process, and therefore I'd expect much less significant changes to requirements late into development compared to the all magnificent waterfall, for example.

I feel like people just blame whatever the most used management process might be for issues stemming from bad management, or the inherent difficulty of large scale software development. At the moment the scapegoat seems to be agile/Scrum. The study referred in the article would make an interesting read though.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
HopefulHabanero,4,"> I feel like people just blame whatever the most used management process might be for issues stemming from bad management


A development process could amplify the effects of bad management if it provides them more touchpoints to interfere. Which I argue Scrum absolutely does. It wasn't made _for_ micromanagers, but it does seem to be beloved by them.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Venthe,-2,"> Which I argue Scrum absolutely does. It wasn't made for micromanagers, but it does seem to be beloved by them.

Hard disagree. Micromanagers will take any process and mangle it beyond recognition. If Scrum is done RAW, micromanagement _cannot_ happen. But micromanagers will micromanage.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
freshhawk,1,"You can make a fair case about the listed issues, they can be from many things, and might still be there with a perfect system, but not that Scrum is any good. It isn't, it spawned from good ideas that don't work with a layer of middle management/non-technical oversight. That's untenable for many businesses. There are sensible reasons to try and be actually agile, and to hope that bolting on some more hierarchical, business school approved process onto it will work. We all tried a lot, it didn't work.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Gwaptiva,10,"Devil's advocate here: There's nothing inherently wrong with communism either, just that nobody has yet managed an implementation that doesn't end in tears.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Additional-Bee1379,9,There are plenty of companies that are working great with scrum. In fact most blogs hating on it seem to immediately start mentioning things that the scrum guide explicitly tells you not to do.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
temculpaeu,5,"Except, that there are successful implementations of agile, the main issue is cargo culting it, wanting to getting all the benefits from it without understanding why it works.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
LookIPickedAUsername,0,"Just because a team successfully implements agile doesn't necessarily mean that agile actually had anything to do with their success.

It could just be that effective teams are effective under almost any methodology, and ineffective teams suck regardless of methodology.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
temculpaeu,2,"agile is not a methodology, shoehorning a methodology in a team will certainly make them less effective, a methodology should be shaped based on the team needs and feedbacks",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
BobbyTables829,9,"If no one has/can implement it properly, is a policy still right?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Syntaire,1,"The issue is with the people, not the policy. Humans are flawed. They will introduce or emphasize flaws to any and all systems. It's not just communism, it's capitalism, socialism, whateverism. Along with any manifesto or policy like Agile, Scrum, LEAN, whatever.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
accedie,2,The situations are quite analogous because the first thing nearly every communist state has done is disenfranchise laborers after a revolution happens. Its nearly identical to management ignoring the self-management part of agile when implementing it and the results are not so dissimilar either.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
putin_my_ass,3,Lots of tears in any system we've tried.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Globbi,5,"I disagree. Incentives in communism are inherently wrong.

Same with scrum - incentive are bad. The incentives are to have long estimates and write shitty code that technically fulfills ticket requirements.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
NotUniqueOrSpecial,6,"> The incentives are to have long estimates and write shitty code that technically fulfills ticket requirements.

They absolutely aren't.

Those are symptoms of organizations that fail every one of [Lencioni's 5 Dysfunctions of a Team](https://www.executiveagenda.com/resources/blog/five-dysfunctions-team).

Any group with that mindset is doomed to fail, no matter the process.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
loup-vaillant,0,"> There's nothing inherently wrong with communism either, just that nobody has yet managed an implementation that doesn't end in tears.

Every time someone says that, there is a strong implication that the causes are internal.

And yet, what little I know of the history of Latin America, strongly suggest that sometimes, the main cause happens to be a hostile foreign power. Similarly, I recall anarchist communities forming in Spain at some point, that were crushed not from within, but by fascists coming at them guns blazing. I'm pretty sure we can find many similar examples.

Anyway, I'm not ruling out that one big reason communism never worked, is because capitalists never allowed it. (The other big reason being that [corruption is fundamentally unsolvable](https://www.youtube.com/watch?v=rStL7niR7gs).)",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Gwaptiva,2,"Many sympathies from my side for that perspective, but I fear, as in the case of Agile (and even Scrum), external factors are as valid for non-functioning as internal inconsistencies and/or human frailty.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Franco1875,3,Definitely a lost cause in many ways. Terminology has become to convoluted in recent years it's difficult to make heads or tails ffs,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
WaNaBeEntrepreneur,22,"I got your point but when my previous company switched to agile, the BAs and POs thought that agile meant that a) they don't need to scrutinize their requirements because agile allows them to change direction and b) they don't need to tell developers their vision/roadmap.

Their ""abuse"" of agile was a big headache to the developers who had to rework code that they had just written 1-2 sprints ago.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
CleverNameTheSecond,4,I think this is the key to this whole thing. Bad and incomplete requirements sink the skip before it even sets sail.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
s73v3r,1,"So that would be a fault of management, not of the process.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
LAUAR,8,"> 
> 
>  >  Projects which didn't require significant changes to requirements late into the development process were 7% more likely to succeed.
> 
> Oh nice. I’ll just specify upfront to everyone that the requirements aren’t allowed to change. That will make my project successful!

Just 7% sounds low.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
SittingWave,14,"It's people who milked the ""agile"" word that now have run out of places to suck money from, so they are changing the music with the hope to sell yet again a ""new and improved"" methodology.

They are shills trying to invent food out of nothing.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
SkedaddlingSkeletton,4,"They have not run out of places to suck money from. There's ""DevOPS"" and all their friends DEVSECQAOPS. Then there's data mesh to bastardize and make products of.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
GayMakeAndModel,1,Am I the only one that remembers when devops was called SCM?,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,5,"There is a reason why the ""agile"" a lot of non-tech companies switched to is called ""agilefall"". 

Because really, its a hybrid of agile and waterfall that combines the worst of both worlds. 


I remember one company I worked for at the time switched to agile and their entire thing was that we didn't need *formal* requirements to start working. Which flandarized into us not needing *any* requirements by the end of the first sprint. 

Your average non-tech company is using an agilefall methodology which doesn't have any formal or informal requirements, is directed completely top down, has dedicated teams of people in specific functions, etc. And you're in about 4 hours of meetings a day because every manager thinks their meeting is too important to cancel.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
moratnz,4,"Yeah this is my immediate response to the title; is the failure rate attached to 'things labelled as agile' or 'teams actually following an agile methodology'?

Because I've worked in a few places doing 'agile'. None of whom were actually doing agile. It tended to be 'we do t give you formal requirements, but we maintain top down control' 'agile' rather than 'we,ll empower the doers and get out of their way' actual agile. And yeah, I totally believe the former fails a lot.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
audentis,3,"> Oh nice. I’ll just specify upfront to everyone that the requirements aren’t allowed to change. That will make my project successful!

In Dutch we have a saying: ""Operation succeeded, patient died"". It's used when a technical success still leads to undesirable outcomes. If you define all requirements up front and freeze them you can probably deliver on them too, but end up with a product that actually no one is waiting for. That applies perfectly here :)",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Kinglink,2,"Thank you for ripping this study apart on the piece by piece basis.  

""I'm going to start a project with out specifications or requirements"".... Jesus   Agile values working software, but it also values KNOWING what your building and working towards it.  Not just fucking around for a few months until someone decides what to build.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Blando-Cartesian,2,"> Where in the agile manifesto does it say that you aren’t allowed to write down requirements?

It doesn’t say that, but does say: 

>Manifesto: “Working software over comprehensive documentation”

>Principles: “The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.”

People in general are driven to find any substitute for thinking. When you have a freaking manifesto, people will stick to stupid simple interpretations. Any manifesto about software projects should begin with directive to disregard anything that follows when it doesn’t apply to your context.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
chickenMcSlugdicks,1,"So the fun part of Agile is you can just say your agile and not be, or completely implement it wrong. Like your first quote there. Of course without a pi planning phase and even before that actually doing some design and requirements gathering and refinement is absolutely necessary to succeed. That's true in any methodology. Kinda think so many agile projects fail because they're called agile projects and they'd have failed if they were called Project Impregnable.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,0,"> Again, what does this have to do with agile?

Nothing, of course.  Because agile doesn't mean anything.

But as long as we're fighting buzzword quacks while conceding that agile might mean *something*, we will continue losing.

The agile maifesto was an expression of frustration at the status quo from a time and a place.  They wrote a polite distillation of issues as they saw them.  It's worth reflecting on from time to time, but pretending it's actionable advice some twenty-plus years on is a reading comprehension failure.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
lelanthran,-5,"> Where in the agile manifesto does it say that you aren’t allowed to write down requirements?

Well, where in the article are they discussing the agile manifesto? My reading is that they are examining  agile practices, not agile theory.

 So, sure, your rebuttals are on-point for agile theory, just not relevant to agile in practice.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,9,"Agile practice not following agile theory is literally not agile. Stop letting idiots co-opt good terminology and bastardising it for everyone.

If I decided to play a professional game of football/soccer with my hands, it's not football anymore, regardless of how many people I trick and mislead with my ""football-consultation-service"".",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Excellent-Cat7128,0,"They are attempting to follow agile. If so many shops end up failing to do this, then maybe agile is the problem.

Any good way of doing things should make the right way the relatively easy way, on some axis or another (perhaps by making the wrong way particularly and obviously painful -- e.g., you go to hell if you don't believe in our god). Agile seems to make the right way very hard and nebulous and the wrong ways fairly easy and not always immediately awful.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,9,"Management is the problem.

If agile says ""individuals and interactions over processes and tools"" and ""responding to change over following a plan"", and a manager then puts down a fixed process that people must follow even if it doesn't work for them, they haven't even attempted to do agile.

Trust me, it's easy to do agile right, provided your management allows for it.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Excellent-Cat7128,1,"Having been at places where management was fairly hands off and Agile (or at least Scrum) still produced middling results, I don't think it's enough anymore to blame management.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Excellent-Cat7128,0,"Management aside, the real problem is that Agile is either too vague to be meaningful, or too specific to be implemented by most places. And its proponents are always careful to jump between levels of specificity so that they can always say some place is doing it wrong.

You mention, for example, ""individuals and interactions over processes and tools"". That is extremely broad. And we know it doesn't preclude the use of tools or enshrining working methods into processes. So what does it actually say? Nothing, really. Or, at best, don't be too rigid. No shit, Sherlock.

In all the discussions here and on HN, in all of the articles and guides and manifestos, the only thing that really comes through is to have your team agree on what works for them and do that and don't let upper management mess it up. I don't disagree. Yet it's not much of a methodology, is it?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,2,"It's broad but it's fairly simple. The process is not god. If the process isn't working, change it.

It's more of a meta methodology than a methodology.

Agile failures fall into 2 categories that are really symptoms of the same thing.

1. They have ignored agile entirely, and they subscribe to a process that isn't working for them, but no one is willing or able to change it.

2. They want to be agile, but the team is either not knowledgeable, skilled, or mature enough to work out what does work for them.

If the people in #2 come to this realisation, no one's stopping them from doing the traditional waterfall development or other processes if they're aware of them, in fact, agile would suggest they do just that if it works for them.

Both of these are just 2 sides of the same coin - identify what's working for you, identify what doesn't work for you, experiment to tend towards something that works better for you.

Simple isn't it? Yet some teams (either through their own fault or fault of management) seem to be completely incapable of doing this, and worse, some have the gall to say they *are* agile(TM) and shun it because of their skill issue.

Being able to pick up alternative processes depends on the team actually spending time to either learn other processes or experiment with their own based on their unique requirements.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Excellent-Cat7128,1,"This is exactly what I mean. It's either too broad to be useful (basically boiling down to ""do what works for you"", as you say,, which is fine, but not really a methodology or even a metamethodology) or it makes more specific claims that don't actually work in many cases.

If so much of the world is failing to implement it and all problems can be explained away as bad management or bad implementation, then we have to ask is it really that good of an idea?

It's also not really empirically validated. It's hard to do that because we can't really measure software quality and we can sort of measure business success or developer happiness. But the manifesto is basically things some people noted that made sense to them at a point in time. It's not a well-constructed or validated model. It's just an opinion.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
s73v3r,1,"> If so many shops end up failing to do this, then maybe agile is the problem.

Or maybe it's that they just don't want to do what it takes. If bad management refuses to buy in to the process, how can the process be at fault?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Excellent-Cat7128,1,There are teams where it doesn't work even without management interference. I've seen those teams.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Additional-Bee1379,0,"And the they start screaming that communism also never worked or something, while you continue playing actual football.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
heterofobika,-3,Are you stupid or just pretending? The research is about how agile is actually applied. Not what the manifesto says. Does the manifesto even matter if people apply agile methods completely different?,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
dirkvonshizzle,9,"_“Other practices were also said to increase success. Those where the software engineer reported feeling psychologically safe to discuss and address problems quickly when they emerged were 87% more likely to succeed compared to those which didn’t.”_ Ffs, that is exactly what Agile development implies in the first place… The problem isn’t agile as an approach, it’s the fact that 1) the team and company don’t really embrace it and don’t allow for adapting quickly to new insights and 2) it won’t work if you don’t prepare the project effectively. Even waterfall would work fine if everything around it was done effectively. Attribution fallacies are destructive… the title is manipulative / click-bait.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Tackgnol,82,It's almost as if there is no 'silver bullet' to stop your shitty retarded management team from fucking up the project ;).,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Franco1875,25,"Been there, dealt with that. The amount of completely incompetent or chronically misinformed leadership figures that have scuppered perfectly achievable goals is beyond count at this point.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Tackgnol,19,"My favorite is always: 
- ""How is this supposed to work?""
- ""yeah, first Y then Z and lastly X""
- ""ok you sure?""
- ""yeah, how long will it take?""


Fast forward 1 month

""HI... how hard would it be for it to be X,Y,Z?""",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Franco1875,5,"“Let’s reel things back a bit and rework” 

Days flushed down the pan",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,3,"Fast forward another month. Why is it XYZ? I thought we agreed on YZX?

That happened to me last week. Client couldn't remember our conversations and refuses to work in our backlog where thankfully we had the traceability save our butts.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
protonfish,8,"Yeah, and also it seems like the man-month is a myth!",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Kinglink,6,"Wait, I grabbed nine women, and had a baby in a month?  You're saying that's not how it works? 

I mean one of these women were 8 months pregnant, but that doesn't matter, does it?  Results are what matters.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
moratnz,3,"IME the hugest challenge to agile in a corporate environment is that it requires management giving up the feeling of control, and trusting their people. And that's terrifying.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Yangoose,2,"Exactly.

The problem isn't Agile.  The problem is bad management.

The executives want metrics so they can show lots of power points to the other executives about how the KPI's go brrrrr.

The reality is that programming is complex and thoughtful work and can't be tracked the way you track the number of widgets that come off an assembly line.

Assigning arbitrary ill defined points to things then counting ""success"" as an increased number of those points being completed goes off the rails quickly unless you actually have engaged and involved leadership that keeps things on track.

The last place I worked was amazingly dysfunctional.  It took a team of 40 people almost two years to make a basic appointment booking web app, but it was sold as a huge success to the senior executives because just look at all these points we finished! ""Productivity"" as defined by meaningless points has almost doubled! 

The reality was that all the workers quickly realized that management was completely clueless and just gamed the system by creating an infinite number of tiny 5 minute jobs that all got assigned 3 points, so you could literally knock out your weekly assignment of 15 points in about 20 minutes. Our velocity kept increasing while the actual work being done kept declining.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Otterfan,1,"Ironically, this study is [an advert for a book selling such a silver bullet](https://www.engprax.com/post/268-higher-failure-rates-for-agile-software-projects-study-finds).",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Kinglink,1,"That's what I keep saying, ""Good teams succeed, bad teams fail.""

But you say it so much more direct, and identify the root cause.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Bunnymancer,7,Source: trust us.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
angryweasel1,4,"I feel like these articles and ""studies"" come out almost daily -. I'd guess that most or all of the teams interviewed are doing some form of bastardized agile. This one in particular is lacking a lot of details. 

Once again, I'm reminded of [We Tried Baseball](https://ronjeffries.com/xprog/articles/jatbaseball/)",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
lelanthran,30,"Agile (both as practiced and in theory) have an impedance mismatch with business.

I see Agile/agile the same way I see ORMs: Object-Based data (hierarchical) and Relational data (set-based) have an impedance mismatch, and an ORM is a way to fix all the trivial stuff in that mismatch.

Business has a way of doing things, that's worked and continues to work for business. S/ware development has a different way of doing things, that's worked and continues to work for s/ware development.

Agile is the duct tape that fixes only the most trivial of problems in that mismatch.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
AI_is_the_rake,2,I think you’re on to something. What’s the business way of doing things and what’s the software development way of doing things?,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
ankdain,12,"Business's way is man months and excel spreadsheets of planning.  Sell X for Y and make Z profit.  If you're Ikea you can just say ""I'm going to make 384784 book cases so I need 38784874 trees to be cut down"" and know that it'll work or at least be the right order of magnitude.  There will be logistics issues or whatever but generally once you do it a few times the range of issues gets pretty slim and you work out your contingency plans ahead of time and you're good.  For example Macdonalds doesn't run out of fries or burger patties very often - they know what they're doing and can rely on past trends to be very reliable predictors of the future.

Often that doesn't really work with software.  It's far more creative process, often with changing customer demands and a myriad of possible solutions each with competing trade offs.  It's also generally a 1 off thing, where you're building something bespoke.  While there are many websites out there, there is only 1 twitter etc.  As such it's must more of an ""art"" and past experience isn't often that great at predicting the future.  This leads to software dev being basically completely unable to predict 1 to 5 years into the future reliably, but that's exactly the time frame that businesses often want to predict.

So you end up with a business that wants to be able to plan up front.  And the Software dev side being an imprecise art that often cannot accurately be planned long term.

Hence the issues.  Agile at it's core is mostly about just making sure you're working on the right thing to deliver value, and that everyone (including the non-dev business side) knows the true state of the software.  It's about working together WITH business not being run by them or fighting with them.  But it only works if both sides understand the limitations of the other and try to work together in good faith.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Space-Dementia,4,"Yes, what a great comment, and exactly the conclusion I've come to after 20 years in the industry.

I am lucky to currently have the best working conditions, but it's taken me a long time to achieve. I work directly with the general manager on what the business plans/needs are - and I create options for them based on that. Then we work towards those goals.

The older I get, the more I detest any form of management getting in the way of that process.

I've spent a long time fostering a culture of trust, and openness with the business - I strongly believe that is all you need for success.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
lelanthran,14,"> I think you’re on to something. What’s the business way of doing things and what’s the software development way of doing things?

Business plans things upfront. The company's budget is done *upfront for a year!*, not ad-hoc for the next two weeks.

This means that staffing levels are planned upfront. It means that purchases are planned upfront[1]. It means that revenue targets are planned front, and product development is planned up front, and new market expansions are planned upfront, and leases are planned, and even signed, upfront, and partnerships are planned upfront. Ultimately, *commitment is supplied and procured upfront*.

Compare with software development: we're not quite sure what the customer needs, the customer may not be quite sure what they need, so we can't really give a narrow window for how long this will take.

The duct tape joining business with s/ware dev is *""We'll develop until you are happy or until your budget runs out, whichever comes first""*.

The next time you hire someone to work on your house or car or whatever, ask yourself if you are comfortable hiring someone who says that they won't give you an upfront quote, but will work until you run out of money or the job is finished.


[1] It's why it's easier to spend 4x on a cloud provider than moving things in house - capex can't be budged, opex is more fluid.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Eugr,3,"Well, whenever you take the plane to an aircraft mechanic, it’s pretty much the same. They can give you a ballpark estimate, but they will bill you on T&M basis. The only exception is some well-defined work such as oil change or base annual inspection. Although even with the inspection, if they find something broken, it will then incur extra charges that you never know upfront. 

Any serious work (engine, avionics, etc) has software development vibes to it - it never completes on time and on budget.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
s73v3r,1,"> The next time you hire someone to work on your house or car or whatever, ask yourself if you are comfortable hiring someone who says that they won't give you an upfront quote, but will work until you run out of money or the job is finished.

Wouldn't the other side of that being that you're unwilling to tell the contractor exactly what you need?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Odd_Ninja5801,11,"You mean planning before you start building results in fewer project failures? I'm shocked, I tell you, shocked.

Well, not that shocked.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
xMoody,1,You do this in agile though ,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
keizzer,3,"This happened in manufacturing as well.  The attempts to copy the Japanese methods didn't work back in the 80's.  Both lean and six sigma have basically been abandoned.  

'

Toyota and Motorola were and are both very successful companies.  The problem wasn't the methods, the problem was a failure in leadership to implement the necessary cultural changes needed for this type of structure.

'

I'm not a software dev, but I would imagine agile has similar problems.  Methods are fine, it's implementation and leadership that are lacking.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
technologistcreative,1,"Am a software dev, and studied manufacturing systems as a concentration in school. I agree. 

The places I’ve seen agile methodologies implemented used it as a mechanism of control (metrics like velocity aren’t a good fit for actual quantitative analysis) and an excuse for incompetent leadership to be able to change their minds every 5 minutes.

Leadership who miss the point of psychological safety fundamentally misunderstand that knowledge work cannot be effectively done under duress.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Leverkaas2516,5,"So what methodology is better than Agile? Back to Waterfall, is it? The article doesn't say.


If it's 65% more likely to fail, the obvious question is ""more likely than what?"" The answer is: the headline is wrong. The study cited in the article just says ""65% of projects weren’t delivered within budget"".


Then, the conclusion: ""what matters when it comes to delivering high-quality software on time and within budget is a robust requirements engineering process and having the psychological safety to discuss and solve problems when they emerge, whilst taking steps to prevent developer burnout."" Right. So Agile can work fine, if you know what you're trying to build and your team isn't micromanaged. Got it.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
hippydipster,4,"Obviously, the methodology that works better than agile is the Get It Right The First Time (GIRFT) methodology, where, rather than incrementally build and iteratively improve, we get it right the first time.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deaod,1,Get it RIght the First Time (GRIFT),2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
hippydipster,1,"Yeah, I wanted it to work out that way, but it gets a little artificial :-)",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
codec-abc,10,"Kinda obvious to me. In my experience Agile is often synonym with a client doing little to no effort describing what it want at start. Then he change its mind often on rather important topics. Sometimes even days just before the deadline. From a développement point it means you either end up with a overly abstract codebase to leave open doors everywhere to deal with clients's new ideas or you end up throwing piece of code that you have written few weeks/month ago. And since generally people don't like to redo things over and over you lose quality each time. Anyway it is good that requirements can move but the ""let's be agile"" and do 180 turn every week is a cursed mentality doomed to fail.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Recoil42,2,"Good luck telling a client to describe everything they want upfront, giving them no options to make changes, and no room to pivot when business needs change. Sure, you'll finish building whatever the hell you decided to build on day one and it'll be all neat and tidy for you and you got paid, but the client is now left with a totally useless piece of software not meeting their needs, so *what was the fucking point?*

Software engineering is hard, that's part of the deal. That's why it costs so much and requires talent. Adapting to change is part of the challenge, and agile is part of how we deal with that challenge. If you just want to stick with some kind of day-one vision, go take up, I dunno, marble sculpting or something.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
codec-abc,1,"There is a difference between knowing everything upfront and saying ""I want X, start building it"" without having think about what we want to build. This even more true economically for the client, because if you spend a bit of time at the beginning and this allow to converge a lot faster then you save development time and thus money.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
sime,1,"If the end goal is not clear, then in what sense can there be a ""deadline""?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
codec-abc,1,Because client has a limited budget and business constraints. Does it make sense to have these and a project scope not defined? No. Does it happen in practice? Very often.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
kubalaa,1,"If things don't get better when you redo them, then please find some other career which you'll find much more fulfilling.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
codec-abc,1,I don't mind redoing things over and over as long as it pays the bill. And honestly it will basically the same every where. Kinda difficult to say no to the client and expect him to know what it wants (and not generally in IT).,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
bascule,9,"Newsflash: authors of a book teaching an agile competitor method say agile is doomed to fail for some reason.

There are plenty of reasons to hate on agile but I'd take this one with a grain of salt.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
eraserhd,6,"Here’s a better article that reveals the study was done by people selling the “Impact Engineering” methodology.

https://www.engprax.com/post/268-higher-failure-rates-for-agile-software-projects-study-finds",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
eraserhd,4,"omfg, Impact Engineering principles require clear and complete requirements before the project starts.  It’s waterfall, guys!",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
hippydipster,10,">Research earlier this year showed that agile development was fading in popularity at large enterprises, and a key factor here was the significant toll this method inflicts upon developers, with many reporting burnout as a result of tight deadlines.

Agile led to tight deadlines?  God only knows what anyone out there is doing.  This was a survey.  Probably the questions were like ""Yo, you do agile?""  ""How late was the project?""",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Cahnis,3,"Idk sounds like a miopic take and there are innate sampling biases. I reckon a waterfall project nowadays has secure funding. Also most startups are probably agile as well,  startups arent known to be super resilient",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,3,">...with new research showing that projects adopting this method are far more likely to fail.

Projects *adopting* this method, or projects *claiming to be adopting this method but are obviously in no way actually adopting* it whatsoever?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Salamok,3,"Agile was great until the minimally talented management bureaucrats infested it.  Remember when the scrum master was supposed to be a role filled by a development peer and not a PM? Shit most of my ""agile"" meetings these days have the people who know the least talking 80% of the time.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
geodebug,3,"Hot takes after reading the article:

- The number of software projects that fail is a statistic that hasn't changed much over time. You can blame ""agile"" but it wasn't like we were hitting it out of the park consistantly back in the 90s.

> projects which had a specification or requirements documented before development started were 50% more likely to succeed than those which didn’t.

- Even with a well-defined spec, only 50% better.
- So don't use agile, a process for fuzzy requirements, when your project is small enough where you can use waterfall.

> Projects which didn't require significant changes to requirements late into the development process were 7% more likely to succeed

- Seems to indicate there is something else besides process that is screwing things up.

> ""Our research has shown that what matters when it comes to delivering high-quality software on time and within budget is a robust requirements engineering process and having the psychological safety to discuss and solve problems when they emerge, whilst taking steps to prevent developer burnout,"" Ali said.

My suspicion is that this has nothing to do with ""agile"" and more with ""corporate agile"" (aka some bastardized version of Scrum).

The entire point of agile is the engineering team getting consistant feedback from stakeholders and being able to speak up about issues as they arise.

Scrum isn't terrible on its own but was never meant to be a corporate framework for tracking developer productivity, which is mainly how big corps use it. 

The concept of a ""scrum master"" (never mind ""lead scrum master"" and ""lead scrum master managers"") is that the role was originally just a temporary hat worn by one of the engineers during the ceremonies.  It was never meant to be a full-time, six-figure job. 

My biggest problem with all the ""agile is evil"" articles, including this one, is that they never propose a different strategy or methodology.

If you have a project where you don't really understand the requirements and product doesn't yet really understand which features will be the most useful ahead of time, what other methodology than agile do you propose?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
jaeman,3,"Garbage article from a garbage site. I literally hate agile/scrum and the amount of time and energy that gets spent discussing it's merits and flaws. But this isn't even that, it's just a useless couple of paragraphs meant to invite a good old fashioned flame war for engagement clicks. And here I am falling for it too. Hey readers and commenters, be better than this. Don't fall for it. Ignore it and move on.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Kiernian,1,">Garbage article from a garbage site.

Okay, but in spite of the fact that:

>it's just a useless couple of paragraphs meant to invite a good old fashioned flame war

it *IS* at least saying something about the elephant in the room with regards to Agile Development -- That elephant being: ""by and large it makes things worse for everyone involved"".

I have not seen one single piece of software turn out ultimately for the better due to the adoption of agile methodologies. Without fail, every single one gets worse QA, more technical debt, worse documentation, more fragmentation, more directionally short-sighted in regards to the software's lifespan, and less long term stability.

The ostensible benefits (faster delivery?) do not outweigh the mass accrual of so many negatives.

Sure, we've entered an era where the userbase has by-and-large accepted that they're going to be the beta testers for everything that gets released, but what's next? ""We've decided to speed up the release cycle by cancelling all code review and just shotgun-committing everything until it auto-compiles into a build""?

After that it's just ""we've modified your VSCode with an addon that sends to jenkins when there's an onKeyDown event.""

It sounds ridiculous when you put it that way, but add in AI and someone with a corner office is going to need a change of shorts after that sales pitch.

When the answer to ""who does this benefit"" or ""what does this enable"" isn't ""the end user"" and ""greater product stability"", it's going to end badly in regards to those two categories.

That's why Agile fails, in my opinion, and everyone seems to be so busy putting the kool-aid powder up their noses they don't stop to think about any long term effects.

I'm actually shocked it's taken so long to get to an article that's THIS critical of Agile.

I get it, everyone wants faster bugfixes, but purposely allowing shit-tons of bugs by turning a blind eye to the possibility (or fact) of their existence just because you can fix them quickly later is INSANE.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
zial,3,This Reddit discussion is just like my team's retrospective where everyone argues what agile is.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Kinglink,3,"I'm going to repeat what I've said every time. 

Agile is a great methodology.... but so is Waterfall.  A good team will make Agile work, but make Waterfall work.  Good teams work, bad teams struggle no matter what methodology is used, and it's the bad teams that look for new methodologies.  Good teams, who are productive don't require change, but can handle it if necessary. 

>65% of projects more likely to fail   

Wait...

> 65% of projects weren’t delivered within budget  

Those are not the same thing.   ""Over budget"" isn't ""Failed"". 

> The study found that agile software projects are 268% more likely to go wrong than those employing other methods.

Wait ... 65 Percent MORE likely?  65 Percent over budget?  or 268 MORE likely?   This is playing fast and loose with these values (And there's more issues, I won't go into) 

> quality standards were also found lacking.

How?  Or I guess again I was on good teams.  We basically made sure anything we check in had unit tests in the checkin,  and test coverage as part of the plan.    Again ""Good teams do good work."" and all that, but I really struggle when I hear ""Agile sucks"" because.. no your team sucks. 

Agile doesn't ""fix"" your team, Agile changes how your team is managed and viewed. 

Agile is NOT a way to compare two different teams, especially two teams that assign different points to tasks. Agile is NOT a way to force your team to do more work, Agile is NOT a way for managers to get new control (you're not the scrum master, stop trying to be the scrum master).   Agile IS A way for a team to decide what's important and work towards a common goal and TO ASSIST EACH OTHER IN WORKING.  Agile doesn't work when you have siloed developers, but when you all want to swarm on a project to get it done, Agile will work there. 

Agile doesn't solve dependencies but it should identify them earlier. 

Basically ""Agile does what it should do.""  But people think agile is going to solve everything wrong with a team, and... nah dawg, nothing is going to solve your shitty management problem other than a pink slip for them, or a job hunt for you.

But to rely on an old Axiom... You're probably doing Agile wrong (Especially at first).. Managers tend to try to use Agile to manage, and don't realize that's going to fuck the whole system up.   

I could go into the exact pieces such as ""didn't have requirements""... Yeah, I wouldn't start a project with out specifications or requirements no matter what it is.   But I think the point is made.  ""Shitty process outside of Agile is shitty process""",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
IdealBlueMan,1,"Mostly agree. If you have a good team, the team will get the project done. A good lead will see everyone contributing to the best of their ability. A good manager will keep them insulated from politics and higher management.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
eraserhd,6,"I haven’t read the article yet (I will), but from these comments it sure looks like they are defining agile projects as ones with a fixed budget and no up front requirements?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
eraserhd,1,"Oh, the article is very disappointingly sparemse.

65% more of projects that adopt agile are “more likely” to fail, but also 65% more of agile projects are over budget.  Are these there same groups?  The first claim if read literally is just an unsupported vague prediction, so possibly it’s just a recharacterization of the second?

Presumably, that’s not 1% and 1.65% anyway, but more information is needed.

And no testing of correlation vs causation here.  The mortality rate of people wearing oxygen respirators is insane, I can’t believe anyone would use one.

(I’ve seen plenty of bad agile, don’t get me wrong.  But I also saw what came before agile, and if the death rate of bad agile projects isn’t 70% or more, bad agile is still better.)",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
confuseddork24,4,"I'm in an org that doesn't use agile. It's an awful experience, our manager just willy nilly decides what is priority on a given day and it can change constantly throughout the week. We technically have a ticket system but my manager rarely uses it and will ask for tasks (which are typically ad hoc, perceived problems that are out of our team's control) via teams chat. Going into a day I have no idea what I'm going to end up working on. There was a short period of time where my boss's boss pushed him to use a VERY basic version of agile. During that time it was infinitely better, but my boss hated ""how long these took"" and regressed back.

So my question is, if not agile then what's the better methods(s)?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Venthe,1,"Generally, you need to pick ""properties"" not names, like a flowchart.

[Is your project E-type system?](https://en.wikipedia.org/wiki/Lehman%27s_laws_of_software_evolution)

- No, go with a process that involves heavy preplanning - waterfall
- Yes, go with a process that allows for rapid iterations - agile

Is your team mature (timely & quality delivery, empowerment, responsibility?)

- No, go with long cycles
- Yes, go with short cycles

Can you plan your work?

- No, go with cycle-less processes like Kanban
- Yes, go with cycle-based processes like Scrum

When you dive deep, there really aren't that many dimensions on which methodologies differ. You can create your own way of work, or adopt something common - as long as you realize that:

1. If you don't know what the end result should look like, your ""big plans"" are nothing
2. No amount of methodologies will fix organization deficiencies

---

Agile is nothing special. When you put aside the recommendations for timeboxes (e.g. release every couple of months) and boil it down to ideology, you _must_ do agile to properly deliver E-type systems. E-type requires adjustments, adjustments require mature team & flexibility, maturity requires both technological excellence (early & often delivery, quality) and team hygiene (effective retros); where flexibility involves not being too hung up on a plan.

To put it in other words - ""mature teams"" recognizing the facts about how E-type systems are delivered, are/will be agile regardless of using manifesto or not.

Working in cycles will ultimately result in the derivative of scrum. Working without cycles will result in the derivative of Kanban.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
me_again,2,"Has anyone been able to track down the actual survey this article is based on? Did some googling around, but as far as I can tell it's not published as research in a journal, but in a book. 
The author also has a methodology ""Impact Engineering"" which he'd like you to adopt.

https://www.engprax.com/post/268-higher-failure-rates-for-agile-software-projects-study-finds",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
rpgFANATIC,2,"Was there a link to the survey?

It just seems like it came from a book (that wasn't linked) and there's no offer of the methodology or details, just links to more SEO spam",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
cadred48,2,"Agile, in it's purest form can be anything that gets software built. Technically, waterfall could be a flavor of agile if it's what works best for the project.

IMO, people get caught up in dogma of certain styles and forget or don't understand that agile means adapting to the needs of the project and nothing more. Companies want simple out of the box solutions, so SCRUM or KANBAN get kind of forced on (or by) teams, but that's not really agile in the truest sense.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Schmittfried,2,"Most of the comparisons/numbers mentioned in that article have nothing to do with agile methods at all.

E.g. feeling psychologically safe to discuss issues when they arise is completely orthogonal to the project management methodology and, if anything, encouraged by some agile practices (like regular retrospectives).

Nonsense clickbait claim.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
happyscrappy,2,"These repetitive pointless stories it little except churn for clicks now.

No project management method solves all problems. The real problems are the tasks of the project itself.

So no system deserves a ""cult"" following. Nor really should any be completely ignored.

Every project is different. Every team is different. Borrow a lot of ideas from everywhere and do what makes your project work well.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Shivaess,2,"Well since 75% of projects I’ve been on SAY they use agile while the program management and the customer do everything to sabotage it, I’m not exactly surprised. Agile is designed for teams to get better at estimating work relative to the team. And for teams to pull together to get things done in manageable and useful chunks.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Fearless_Imagination,2,">However, the survey found projects which had a specification or requirements documented before development started were 50% more likely to succeed than those which didn’t.

No shit.

>Projects which didn't require significant changes to requirements late into the development process were 7% more likely to succeed.

This makes me doubt the methodology used. Only 7%? It should be higher. 

>Similarly, projects where requirements were accurately based on a real-world problem were 54% more likely to succeed.

Your project is 54% more likely to succeed if you have good requirements? I find the fact that there are apparently  projects that succeed *at all* with requirements that are not ""accurately based on a real-world problem"" rather amazing. 

  
So, the best way to succeed in a software project is to gather all the requirements up front, make sure they're accurately based on the real-world problem you're trying to solve, and then never change those requirements? 

You know, I agree. Let's start working like that instead of this Agile nonsense with its constantly changing requirements. Only... what do we do then, when the business constantly shows up to tell us the requirements have, in fact, changed again?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
rafuzo2,2,"If you don't cargo cult the whole thing, it works fine. The focus is on just enough, maybe-slightly-less-than-you-need process to get shit done. When you have all the certified Agile™ people coming around and saying ""noooo you need scrum of scrums for your AppClip project!"" and completely ignoring delivery for the sake of serving the process - yeah, you get those kinds of stats.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
ChrisJD11,2,same problem with any process once managers start driving it based on dogma and kpis rather than teams developing processes to support development needs,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
st4rdr0id,2,"Faux agile snakeoil was promoted by tech corporations to get more work from the devs in less time at the cost of project quality and the mental health of the employees.

Interestingly Big Tech didn't drink its own coolaid, they used better custom software processes when building their products.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
midnitewarrior,2,"Agile is for *products*, not *projects*.

Projects have due dates and finite feature lists, things that are incompatible with Agile.

Products are fluid, not deadline driven, and have dynamic priorities that follow the ebb and flow of evolving business needs.

All of these people should not be using Agile for their projects, that is the source of their failure.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
rtds98,2,"Nobody implements agile. Sure, most call whatever it is they do ""agile"" since it sounds cool,
but nobody knows or gives a shit what agile is and how can it help the project.

Including the authors of this article and the research.
The sentence:

> ""With 65% of projects adopting agile practices failing to be delivered on time...

says it all.

I did agile for about 3 months back in 2006. Actual agile. That was cool and it was successfull and everyone was happy (the devs, PMs, client, etc.).

Never since.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,2,[deleted],2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
wildjokers,0,Your company is doing it wrong.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,1,[deleted],2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
wildjokers,0,Never experienced this.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,1,[deleted],2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
wildjokers,0,"> anecdotal bullshit 

Isn't your story also just anecdotal bullshit?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
UncleGrimm,2,"I don’t really have strong feelings about Agile, but I feel like this article is saying a whole bunch of nothing 

> “The study found that agile software projects are 268% more likely to go wrong than those employing other methods.”

Like, what does that even mean? How did they measure that? How did they control for confounding variables? Would people who get micro-managed Agile drilled into them be more likely to report that their “projects are Agile” than others?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
wildjokers,1,"> Like, what does that even mean? How did they measure that?

That is exactly what I was wondering as well when I read that.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
RequirementUnlucky59,2,"It’s not just agile that’s failing. It’s the management and executive levels completely ignoring the increased complexity of software ecosystems used across the industry. 

To make matters worse, everything is remote… teams, people, servers, systems. 

Cybersecurity rules and constraints completely destroyed the continuity of a typical daily routine. We have to jump through so many loops to get work done. None of these things were even a concern several years back. 

If you are working as a contractor, a new trend is developing: clients don’t even give you access to anything. They only run “working sessions “, we are expected to tell them every step “flawlessly “ as if real life is like that. 

With all the productivity increasing tools and methods, there is a plethora of constraints and restrictions imposed on engineers that eventually take away all of the gains and puts them in deficit. 

I have been providing professional services in a niche industry for several years now. It’s never been that bad. Ever! And clients many times find reasons to not pay in full for services rendered. We cannot have enough guardrails to protect ourselves. Because of all this crap surrounding the work we do, none of the projects are realistically completing in time and within budget. 

That’s why, it’s not agile that’s failing. Software engineering has become more demanding and sophisticated with every passing year, we just need to accept it and make estimates accordingly.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,3,"Agile and scrum zealots are a weird bunch. My whole career, I don't care what type of methodology I use, whatever makes most sense for a project. And I certainly change things around if necessary. I do not follow everything like a bible.

With Agile and Scrum evangelists, deviate a little, and to them it's the end of the world. 

Very similar to PMP certified individuals. There's another dangerous bunch. Deviate just a little bit from what their instructor taught them, and they lose it.


What I find similar in all of these is that all these evangelists, most of them do not have a development background. They've never actually developed a project from start to delivery. It's all by the book because it's all they know.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
myringotomy,2,"Oh look there is a dead horse. Let's beat it again this week because the every other week that we beat this dead horse for the last couple of years was not satisfying enough.

I mean beating this dead horse is much easier than coming up with something better.

But we totally not a cult. People in a cult agree with each other on everything.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
ClysmiC,1,The beatings (of the dead horse) will continue until project management practices improve.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Mavrihk,2,"Just remember Agile is not scrum. I have been doing agile for 40 years, it is an approach, and method of fast deployments using CI/CD and QA gates. Scrum I have yet to see, witness or be told about any successful projects if run rigidly, and that retrospective always seems to be a waste of time.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
SittingWave,3,This same content was spammed yesterday.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
ChrisRR,1,"Devs and engineers who use agile consistently report that they find it worthless, a waste of time and too micromanagey, so I can't figure out why people keep using it

I can only assume it's the training suppliers who keep pushing that it'll solve all of your management problems",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
knobbyknee,2,That is because they use Scrum or some other prescriptive method. Using your brains to implement the ideas in the agile manifesto actually works. However that requires thinking and actually being agile. This is strongly discouraged in the corporate world.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
tidbitsmisfit,1,don't get story points for the thinking,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
knobbyknee,1,Story points and browniepoints are interchangeable. Corporations run in brownie points.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
iseke,1,"Following the basic scrum rules doesn't mean you're doing scrum.
If you're still being micromanaged by management, you're not doing scrum.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Yay-Syu,-1,"Agile != Scrum

Scrum is an implementation of agile, and a bad one at that",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
UK-sHaDoW,1,Compared to what?,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
tazebot,1,"As a network engineer working at fortune 10 companies that 'went agile' it was at best mixed in terms of timely project progress.  What it measurably did was double time spent in meetings.  Moreover, most of the delays in project completion in network engineering were due to waiting for physical delivery of physical materials.  Agile doesn't seem to have any impact on that.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
uniquelyavailable,1,"we're ""agile"" because c-class doesn't want to understand software engineering, so to hell with the engineer and the software development lifecycle, we are going to come up with a system where the suits can get the programming done by making numerous small requests to the developers directly.

because our suits are so smart and paid so well that they don't need a computer science degree to understand the complexities and paradigms of software engineering!

wow! what an amazing idea what could go wrong",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
T1Pimp,1,"In my experience, if pushed top down it is nothing more than management saying to do the same things but faster and with less resources.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
stronghup,1,"I'm curious, if not ""agile"" then what?  What are the alternatives to ""Agile""?  If Agile fails so badly, and I don't doubt that it does, then it seems that projects who call themselves ""agile"" are more likely to fail than projects which do not. 

Solution: Don't call yourself agile, just get down to doing some real work. Cults are bad for progress. Standup meetings. Why not sing and  pray together?  

But you should not try to make believe you are succeeding just because  you make it seem like you know what you  are doing,  by calling it ""Agile"".  

It seems to me that people who don't know what they are doing are always trying to give the impression that they do know what they are doing ---  by calling it something, like ""agile"".

I never liked ""agile"" much because it is really a marketing term trying to sell your team to corporate customers who are often clueless about Software Development.   Of course ""agile"" must be better than non-agile. Who would want to hire non-agile people?

Basically 'agile"" means we don't stick to our plans, so there is no need to have plans, just two  week sprints. Basically wing it.  Value people (us the people) over processes!  They can't blame you then, you were just following a methodology.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
sime,1,"Wait a sec. Agile isn't designed to deliver a predefined set of requirements within a predefined budget. It never was. Agile is about incrementally building software, learning from it, and adjusting course along the way.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
pirbright,1,"An interesting article with questionable conclusions. I've worked on projects where all the requirements were defined upfront, but the rug was pulled from under us one-third of the way through. I've also worked in psychologically safe teams that were dysfunctional. The tools and techniques are important but it is the personnel of the team and management that matter above all.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
MaxwellzDaemon,1,"If the failure rate of large projects was 80% prior to Agile (which it may have been), 65% failure is a big win!",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
CitationNeededBadly,1,"The ""study"" in question was more or less an ad, done to promote the authors own alternative to Agile.  Note that nobody is bother to define which kind of agile was being measured.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
gelatineous,1,Agile does not mean anything. I say I do agile - after four weeks of detailed planning. It allows me to not know everything abd change opinion.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Pr0Meister,1,"Execs just need the agile manifesto nailed to the boardroom door, Protestant style, as a reminder.

Also, the dictionary definition of the word ""estimate"".",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
SendNull,1,"Study it, pick what you think works for your organization, drop the rest, collect metrics, assess it again in 6-12 months.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
wenhamton,1,"Agile (TM) is not the same as the principals of the agile manifesto. Agile (TM) is a marketing buzzword filled long con designed to sale seminars and books. Companies want to do it because they think they should, not because they understand it or that it adds any value. You know what builds software? Writing software. Not 3 amigos meetings and fucking planning poker.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
pudds,1,"I'm no agile apologist but I'm skeptical.

- small sample size
- study commussioned by a group hawking their own competing methodology 
- what's the definition of failure and success?  One of the agile mottos is to fail fast...is a fast fail a fail?  Is a waterfall project that goes late and over budget, but eventually delivers a success?

I also take exception with the idea that agile projects can't have good requirements.  You don't generally want to try and understand everything up front, but that doesn't mean you just start writing software without gather requirements first.

This headline is absolutely going to dominate the tech media for a few days or maybe weeks though, social media will love it.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
pyabo,1,"LOL.  Put butts in chairs.  Write code.  Have competent project management.  It's not rocket science, y'all.  The methodology you use to organize the project and assign tasks is almost meaningless.  If you are giving it meaning, you are wasting time.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
NaimKabir,1,The projects with requirements specified are necessarily sampling the space of projects where requirements *can* be specified up front. Projects that need iterative requirement refinement fall *outside* that space and will of course have a higher failure rate.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
LairdPopkin,1,"In my experience agile allows great developers to be incredibly productive, which is what it was designed for. Not all teams have the judgement and communication skills required to make agile work.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
talldean,1,"Most people who say ""Agile"" should have said ""We do Scrum.  Poorly."" instead.

Because Agile is like 12 lines, fully written out.  That's it.  

Continuous delivery, requirements can change, release more often than months, business and software people need to work together daily, build around motivated people (and support them!), have face-to-face chats, showing working things is the best way to show progress, death marches end in death, you should give a shit about design, simplicity is important, allow teams to self-organize a bit, and yeah, ask the team for feedback on how the team could work better.

I tend to think 11 and 12 are repeats, but that's me.  But those 12 are ""Agile"".  Everything else is some interpretation of that, often that went badly fucking wrong by trying to cargo cult Google at some point.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
anzu_embroidery,1,Can we restrict agile bad posts to one day a week or something? Feels like every day the top post is complaining about agile.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,1,this headline makes me want to start swinging. “agile” and Agile run by large consultant firms are incredibly different things. agile didn’t fail. greedy people did. as always,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
sinithparanga,1,"I don’t see this as a big news. 10y ago you could see how wrong managed agile projects just didn’t work. 

You need both, water and agile. SAP does it right in some places. 

The problem now is that you want to put everything in the agile way without thinking about it properly. Management says: Agile and they everyone runs like chickens.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
dark_descendant,1,The time was decades ago.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Andhrimnir,1,"Almost everywhere I've worked did ""Agile"". I've only been on one team that actually did it well, so hearing that most projects doing agile are likely to fail is hardly a surprise.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
phrasal_grenade,1,"Agile doctrine openly accepts changes in requirements. So, it should come as no surprise that trying to hit a moving target is going to create a more frequent perception of failure compared to a more traditional approach where requirements are more rigid.

I also expect there to be self-selection bias where less skilled managers and managers in trouble try to adopt Agile to ward off failure. The truth is, if you know what you're doing and have enough good workers, nearly any reasonable management method can work. If you don't know what you're doing, or are understaffed, even a very clever management system won't save your project.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
newspeakisungood,1,I would venture that being prescriptive about any software process isn’t likely to work well. Adapting to change is key.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,1,"I am a Certified Scrum Master, Certified Product Owner and Certified SAFe Product Owner Product Manager (POPM).

If you look at any of the Agile Scrum Team charts, the Business Development section is relegated to a small placeholder. No one from Business Development desires to participate in any of the Agile Ceremonies outside of Sprint Review, and then they **get pissed when they change the specs midway through a development cycle and you refuse to keep the same release date.** This is why ***the cost of programs and products go up***, because Agile all but mandates we assess the change, rate the effort and move the release date based on the Scrum Team velocity.

Agile has saved Software Engineers from being fucked over, they don't like it, so now there is a move to shit on it.

Nothing can save a project when you have stupid ass management decisions to account for.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
zam0th,1,"Moreover its rate of failure/success is *statistically* not different to that of any other operational methodology (Kanban, Waterfall, Lean, etc). Source: IIBA whitepaper.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
VisibleSmell3327,1,But I like shouting numbers out.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Esseratecades,1,"Firstly, most projects that get funded are bad ideas. They're going to fail no matter what. Agile processes just allow them to fail earlier(which is good), or salvage the good parts into a pivot. But because people have a hard time conceptualizing opportunity cost, this gets framed as a bad thing. 


Secondly, most ""Agile"" teams aren't really Agile. It's often waterfall management with Agile ceremonies, because management likes feedback and control but not responsibility. Want to know if you're Agile or just waterfall with Agile ceremonies? Here's a litmus test; how many deadlines do you have and how flexible are they? If you answer ""a lot of deadlines"" or ""not very flexible"" congrats, you're probably doing waterfall.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
marcodave,1,"What ""Agile"" (really Scrum) did well for the industry was to create a common vocabulary of terms to indicate the various formalities and stakeholders.

Everyone knows what a ""standup"" is, what a product owner is supposed to do, what a sprint retrospective is and what is expected from it.

HOW is being done and what is accomplished is another story, but at least when changing projects, companies and customers, across different business domains, in the last 9 years, the terms remained the same. 

So it has a reason to exist, even just to keep the vocabulary consistent",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
frud,1,"35% of the time, works every time.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
raynorelyp,1,"How do they even determine that when most Agile companies are just labeling waterfall as Agile?

Edit: I’ve been on a lot of projects and can tell you right away the ones that released iteratively to the customer from the beginning were way more likely to either succeed outright or fail quickly enough due to business level problems that they saved the company money they would have otherwise sunk for months.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Fugazi70,1,"Hate agile, I’ve never seen it implemented the way that the classes state it should be.

Waterfall we had plans blueprints and all agreed that’s the way it should be. Dev could build off that qa could write tests for that etc",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
fairenbalanced,1,"I'm surprised it took this long, I knew it was a cult back in 2005 when they came out with their ""commandments"" and had the concept of ""evangelists"" talking about building ""cathedrals"". We were part of the early agile adopting big teams back then and even had Martin Fowler visit us a couple of times. A lot of people made a ton of consulting money off of this religion. Having said that daily stand-ups did stick, as did storyboards and stories so not all bad.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
jdlyga,1,Agile is fine. It’s “by the book” SAFE and Scrum that are failing. They overload you with Jira complexities and processes that go against core principles of Agile. The whole point is to not be rigid with processes and just get things done.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Venthe,1,"Okay, so which ""by the book"" thing from scrum fails/overloads you? :)",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
jdlyga,1,"The ""process over people"" mentality that companies that use Jira tend to fall into, especially when it's very project manager driven. It requires the overhead of waterfall, but with the expectation that requirements can change at any time.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Venthe,1,"But neither Jira, nor ""process"" is in the Scrum. Of course your can call ""having a meetings"" or ""having a cycle"" a process, but that's a stretch - you'd have to call agile manifesto a process.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
jdlyga,1,"Totally agreed.  There's a lot of fake agile out there that claims to be agile, but ignores the principles of the manifesto.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Venthe,1,"Unfortunately, real change is hard. Changing an organisation for the better is more often than not impossible. I _hate_ seeing one company after the other implementing Scrum/Kanban/anything else in names only, because why bother....?",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
CurtainDog,1,"[https://en.wikipedia.org/wiki/Chrysler\_Comprehensive\_Compensation\_System?wprov=sfla1](https://en.wikipedia.org/wiki/Chrysler_Comprehensive_Compensation_System?wprov=sfla1) is pretty openly talked about, it's not like it's a secret or anything.

But the question posed in the article is plain bad science, you can't generalise from a self selected subset to a whole population - that's anti-vaxxer logic. The real question is: for the projects that agile methodologies are suited to would they have been better off using something else. And the only honest answer is 'it depends'",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Used-Assistance-9548,1,"There is no fucking way the company can understand the dev requirements in entirety before built, business reqs yes but the dev shit we gotta build it.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Serafim_annihilator,-3,"Agile is the same bullshit as communism, beautiful promise which surprisingly always implemented wrong.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
MaleficentFig7578,3,and capitalism,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
A_for_Anonymous,1,"I disagree; it's way easier to implement agile and succeed with it, crucially with higher developer+user (citizen) satisfaction and happiness, than any implementation of communism ever delivered (inb4 not true communism, not that one, not that other one either, not that one either, etc)",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Serafim_annihilator,1,"The fact that it's easier to implement, only proofs my point. In 99.9% of cases when people claim they using ""agile"" their doing opposite of it. At this stage this term only make more harm than good and it's better to bury it together with communism and move on. And next time we should come out with something that is not so easily turns into cargo cult which agile is.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Deleted Account,0,"> The study found that agile software projects are 268% more likely to go wrong than those employing other methods.
   
Other methods? OTHER METHODS? Clearly this study is BS. From what I can tell, EVERY DAMN PROJECT IN THE WORLD uses Agile now.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
druidjc,0,"I don't know. I've never seen ""Agile"" actually applied well. Seems most people take sprints and maybe one or two other things from Agile then call the whole process Agile because that's the fad these days.  I'm not saying Agile is fantastic, but I've never actually seen it used despite every project I've worked on for years referring to itself as Agile. I wonder how many of these ""Agile"" failures are just ad hoc development plans that assign tasks every 2 weeks and call themselves Agile.  Bad project management is bad no matter what label you put on it.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
trimorphic,0,Obligatory [Death of Agile](https://m.youtube.com/watch?v=vSnCeJEka_s) keynote presentation by Allen Holub from ten years ago.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Venthe,1,"Allen Holub speaks out of his ass, regularly confounding scrum, safe and agile consultancy.

It should be obligatory only in the sense that you should be obliged to see all the fallacies he's propagating",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
OnlyForF1,1,"I don’t think he ever confounds them, he just thinks they’re all bad",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
Venthe,1,"He does. The clearest example I've seen is with [""scrum is agile""](https://youtu.be/F42A3R28WMU) talk.

I'll just copy and paste my critique from the video: 

---

And this criticism fails in a lot of ways.

There are only two criticisms of the Scrum in the whole talk - is that Scrum defines a roles besides ""the team"" and that it has some meetings baked in.

The rest of the talk is the criticism of:

-    Jeff Sutherland. Yeah, why not. I don't particularly like this person either.
-    Scrum coaches. When we are talking about a field that vast, there are good apples and bad apples. Trying to generalize it in the way that he did is just nonsense, though the general sentiment is correct; as there are a lot of people who don't understand how scrum should work, and how agile should work.
-    SAFe. Self explanatory. SAFe is not scrum.

Let's start with a definition. Scrum does not claim that it ""is"" agile. Neither Scrum Guide from Ken Schwaber nor Scrum Primer from AgileAlliance claims so. Scrum, however, maps all of the principles of Agile within it's framework; as you will find ALL principles within the Scrum Guide.

Allen claims time after time that Scrum is a process - which is not. Scrum is a framework in which you can create your own process, your own way of work. What is worth mentioning; he has repeated several times that the Scrum without XP does not work 'because scrum was a wrapper for XP'. This is really ignoring the past two decades of proven teams working with Scrum - XP is not the only way of work, and scrum does not tell you how you should work.

Another issue altogether is this frankly stupid notion that Scrum disallows inspection and adaptation during the sprint. To quote: ""The adjustment must be made as soon as possible to minimize further deviation.""... And not ""at the end of the sprint"".

But the first moment that I've started to bang my head off the wall was his critique of the immutability of Scrum. He does not understand this sentence at all. No one is telling you (maybe aside from Sutherland, but to paraphrase - Scrum is not Sutherland, Sutherland is not Scrum) that Scrum is THE ONLY methodology. It's only telling you - follow it, you'll see results. You wish to make changes? Go ahead, but it's not Scrum. See the difference? There is no ""It's not Agile"". Only ""It's not scrum"". So when the authors tell you that ""if it not fits you, then change it""... It's not agile and bad? Come on...!

The idea of asking users for a feedback is a cute one; or rather his assumption that ""every company"" can do so, on a daily basis, several times a day. If you can, you are blessed. If not, Scrum offers a solution - schedule it at least once every sprint. It doesn't say ""You can't do it more often"". But who am I, just the person who actually read the scrum guide ¯\_(ツ)_/¯

Oh, and the releases as well! Scrum does not allow frequent releases... Again, a direct quote: ""Multiple Increments may be created within a Sprint. The sum of the Increments is presented at the Sprint Review thus supporting empiricism. However, an Increment may be delivered to stakeholders prior to the end of the Sprint. The Sprint Review should never be considered a gate to releasing value.""

What really made me chuckle though is his attempt at rebuttal of the ""real world"". Problem is, he is living in a bubble. Why am I claiming so? Because I've worked with organizations that had brilliant engineers, and organizations that had people that were not really interested besides 9-5. As an agile consultant, he is called in to the specific workplaces that have already noticed a problem, and are willing to change; and I am NOT talking about the management - but developers. His dismissal of this argument is really telling - ""Your experiences are worth less than mine, I know the real truth about how it works!"" Kinda preachy, you know?

As for the meetings and roles... This is coming from a general lack of understanding from his part. Throughout the whole talk he really, really shows his attitude towards the methodology, not trying to understand it. I'll center my answer on a self-managed teams. ""The teams decide what they should do next"". Should I understand, that they have business knowledge & expertise to perform a proper market research? Understand the consequences of their choice? Because frankly, out of hundreds if not thousands of developers I've met during my career, there was NOT A SINGLE ONE that was interested in that. If he was, he moved to being a PO for a very simple reason - it's a full time job. Same thing with the middle managers. He is trying to attack middle management by focusing on the bad - but the industry recognized the EM as the role of servant-leadership. A person who has both the expertise and the understanding that are on a different level of abstraction than developers.

That brings my argument full circle. Is Scrum a one-size-fits-all? Not really\*. But I always challenge any critic of Scrum to remove a part of it while keeping the idea intact. You can't remove PO. Not that this role cannot be substituted, but because programmers lack expertise. You can't remove SM, at least not from the framework itself. Teams that are capable of being agile don't need SM and that's perfectly fine. I've met one team that was mature enough. Aside from that, people don't know where to seek improvements, don't care, or have a severe lack of necessary skills. So maybe let's attack any particular meeting? Let's remove Retro... So how you ensure that ANY kind of retrospective is being held? Maybe planning? That surely goes well. Daily? Yeah, why bother talking o each other? ** This is the real world that Allen is so desperate to ignore.**

You can argue the time boxes, the frequency - but you cannot remove any part without creating many more problems in exchange.

\* A good example is maintenance - you can't plan for the unknown. Kanban and similar works best here.",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
ForeverHall0ween,0,The consultants made their bag a long time ago. Too bad! You'll never get that money back.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
IUpvoteGME,0,Anyone who wrote down step by step instructions for agile obviously has no idea what the word means.,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
f12345abcde,0,"> Those where the software engineer reported feeling psychologically safe to discuss and address problems quickly when they emerged were 87% more likely to succeed compared to those which didn’t.

What? So, how to we classify those projects as following agile “methods” if they do not even have some kind of *retrospective*? 

I call this article complete useless",2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
faster_puppy222,-1,I’ve been in software development since 91 and have been against the agile culture from day 1,2024,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
flibbidygibbit,1,[Agile Paradox ](https://youtu.be/Bez7wmAsxjE),2025,"‘It’s time to question agile’s cult following’: Doubts cast on method’s future, with 65% of projects more likely to fail"
0x0ddba11,128,I think we need to rebrand the agile idea with a name so incredibly offensive it can't be turned into a noun and sold to executives.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
piesou,40,Improving Shareholder Value by getting rid of the highest paid company members based on overhead.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
JonDowd762,35,"IIRC that was the logic behind naming of ""extreme programming"". The title doesn't sound unambiguously good and is in fact a bit concerning. The theory was people would adopt it because of the content, not the name.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
import-antigravity,5,Never heard of it. Any good?,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
centurijon,11,"It works well in the context that it’s designed for - you have a fully greenfield project or feature and want it to get done quickly. It doesn’t work quite as well for standard maintenance, converting legacy code, or making small updates.

We did this by having devs, qa, and product management “locked” in the same room together. You lay out super small milestones as a group and start working on them. If an issue comes up, the devs are right there to tackle it. If some feature doesn’t make sense then the product owner is right there to clarify or pivot.

Abandon whatever story/task system you use (temporarily) and start laying out what needs doing on a whiteboard and post-its.

You gain speed because the waste from communication cycles goes to practically zero. Everyone on the team is involved in the discussions and is aware when decisions are made or direction shifts.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
jl2352,3,"I did essentially this on a project to migrate a website. We had a hard deadline of 2 months (as the business would have to sign a one year renewal otherwise).

We had two to four standups a day. Sometimes five. High level worked out a week in advance of when we worked on it. Direct stuff worked as we went, regularly planning next work hours before implementing (for design, copy, and coding). I was writing the engineer, and would pivot several times a day in response to delays or blockers from the other team members.

We had it shipped early, with a better design, and better content. It was a great success. Honestly one of the best projects I ever worked on.

It also relied heavily on really good team dynamics. The marketing copywriter was in charge, who turned out to be an amazing PM.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
fallbyvirtue,3,"Working in a well oiled machine is one of the joys that I think everybody should be able to experience at least once in life, ideally always.

Failures are often sensational, but I think we would do to learn as much from success stories as well. I suspect though that it is a variation of Tolstoy's ""all happy teams are alike"".",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
gyroda,3,Having experienced that well oiled machine of a team in the past I yearn for it again.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
JonDowd762,2,"Never been part of a team that used it, but it seems a bit too dogmatic on the pair programming and TDD aspects to me.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
CommanderDatum,14,We had a firmware engineer refer to Scrum as SCRotUM in emails until the PM stopped saying it.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Glader,1,"I do that in conversations. Feels good, can recommend 👍",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
spareminuteforworms,1,"That guys got big scrotum, bless him.  Fuck scrum erm I mean scrotum.  I liked referrimg to the dickhead as our Scrumlord.  Useless sack of shit, similar to whatever the equivalent lean six sigma jackoff was called.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
RavynousHunter,9,"I'd suggest calling it ""Santorum,"" but that might be a bit *too* offensive...",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
0x0ddba11,8,"I was thinking something like the ""use your brain and adapt you stupid dumbshit goddamn motherfucker manifesto"" but that doesn't roll off the tongue",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Feroc,3,"I once worked with a consultant who told me a story about one of his jobs. Company needed help with their process and told him, that they don't want anything agile, because it didn't work in the past.

So he just never used the word agile but something like ""the way of baby steps"" when he described what they should do.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
strng_lurk,1,Call it GSD: Get Shit Done!,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,890,"I have zero doubt that 80% of agile projects fail.

Because I've worked at a lot of companies that from 2010-2020 wanted to ""go agile"" and ended up creating ""agile"" methodology that was really the worst parts of both agile and waterfall.

We kept all the meetings from waterfall, added scrums AND standups, then were told that we didn't need *any* requirements before we started coding and we didn't need to put any time to QA things because we're agile now.


It went about as well as you can imagine.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Edward_Morbius,651,"It doesn't matter at all.

I started in the early 90s and have worked in places that used everything ever invented, as well as ""nothing"" and can tell you 

* Most projects fail
* 90% of everything is crap
* It's actually impossible to manage software or people because both are an attempt to jam organic concepts into math-shaped holes.

Being retired is wonderful. Live below your means, save your money, GTFO ASAP and enjoy life. 

That's what life is for.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
BigHandLittleSlap,212,"> jam organic concepts into math-shaped holes

I'm stealing that quote.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
rbobby,61,"Meh. This is why you hire junior developers. Still flexible, and very eager to get into holes.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Worth-Television-872,21,"I assume that you are a manager.

You actually think that junior engineers are better at Agile because they are eager to do whatever dumb thing their manager wants them to do.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Calm-Zombie2678,34,I think they were making a dirty joke,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
rbobby,4,"Whoosh

Also the sound deadlines make.

Also... not a manager. Worse. Much much worse. An architect.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
BatPlack,1,"Tuning in to see if they respond

RemindMe! 4 days",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
rbobby,2,No need to wait: https://www.reddit.com/r/programming/comments/1e4lv46/agile_manifesto_coauthor_blasts_failure_rates/ldl8h4h/,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
RemindMeBot,0,"I will be messaging you in 4 days on [**2024-07-21 03:16:23 UTC**](http://www.wolframalpha.com/input/?i=2024-07-21%2003:16:23%20UTC%20To%20Local%20Time) to remind you of [**this link**](https://www.reddit.com/r/programming/comments/1e4lv46/agile_manifesto_coauthor_blasts_failure_rates/ldk0ug5/?context=3)

[**1 OTHERS CLICKED THIS LINK**](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Reminder&message=%5Bhttps%3A%2F%2Fwww.reddit.com%2Fr%2Fprogramming%2Fcomments%2F1e4lv46%2Fagile_manifesto_coauthor_blasts_failure_rates%2Fldk0ug5%2F%5D%0A%0ARemindMe%21%202024-07-21%2003%3A16%3A23%20UTC) to send a PM to also be reminded and to reduce spam.

^(Parent commenter can ) [^(delete this message to hide from others.)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Delete%20Comment&message=Delete%21%201e4lv46)

*****

|[^(Info)](https://www.reddit.com/r/RemindMeBot/comments/e1bko7/remindmebot_info_v21/)|[^(Custom)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=Reminder&message=%5BLink%20or%20message%20inside%20square%20brackets%5D%0A%0ARemindMe%21%20Time%20period%20here)|[^(Your Reminders)](https://www.reddit.com/message/compose/?to=RemindMeBot&subject=List%20Of%20Reminders&message=MyReminders%21)|[^(Feedback)](https://www.reddit.com/message/compose/?to=Watchful1&subject=RemindMeBot%20Feedback)|
|-|-|-|-|",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,30,[deleted],2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
skoink,18,"ironically, that's very close to the concept of lower-case 'a' agile. Scrum is a waterfall in agile's clothing.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
BenE,12,"I don't understand how scrum went in the opposite direction of every point in the agile manifesto and called itself agile. It's pure gaslighting.
I'm going to put the manifesto here for visibility. There are only four points and they look nothing like scrum:

- Individuals and interactions over processes and tools
- Working software over comprehensive documentation
- Customer collaboration over contract negotiation
- Responding to change over following a plan",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
bduddy,9,"The problem with the ""agile manifesto"" is that every point in it is so obviously correct that it actually says nothing whatsoever with any meaning.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
krista,7,"... and every experienced engineer can and has run into many situations that run counter to each of those.

yet it doesn't mean they are *wrong*... just situationally correct for forward movement more often than not.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
bduddy,2,"Right. I do think they're all generally correct, but I think just about everyone in tech has experienced the downsides over a lack of process, software documentation basically being dead, trying too hard to make customers happy, and people thinking that having a plan isn't necessary.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
JonKernPA,2,"u/bduddy Are you equating these downsides as being the suggested course of action from the Agile Manifesto?

* lack of process
* \[no\] software documentation
* trying \[not\] to make customers happy
* \[don't need\] a plan",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
JonKernPA,2,"u/bduddy  Can you point out one of the bits that has no meaning?  
  
Yes, it is ambiguous. ""This over that"" requires a judgement call which requires experience and at least observational skills applied over time.

If you can grok the manifesto you don't need it.

And if you don't understand it, well, good luck. You need to have a growth mindset to begin to wonder about it's intent and be curious about how to become better at making your users smile and having fun doing it.

If you want a cookie cutter process, knock yourself out. Great place to start. But not a good place to stay stuck.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
CmdrCollins,3,"Most people trying to implement <buzzword> really just want to be able to brag about using <buzzword> - sometimes that just involves taking whatever they're currently doing and writing <!!!BUZZWORD!!!> in big red letters all over it, while changing nothing else.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
keypusher,1,There are 12 points in the agile manifesto,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
JonKernPA,1,"Thank you, u/BenE",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
spareminuteforworms,1,"I've typically seen it implemented where you explicitly don't do any of the shit on the right which was not the point I guess.  Don't do any process, planning, negotiation because we are agile!

Uhh no jackass you need to do all that but don't let it get your project entirely stalled out by it.  The stuff on the right is the ball bearings the stuff on the left is the grease.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
dust4ngel,6,"wait, why would switching to more important work based on new information be antithetical to agility?",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,4,[deleted],2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
dust4ngel,10,"""sorry, we're too agile to shift to more important work"" is a pretty hilarious idea.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
LucasVanOstrea,16,"Sprints are there for a reason, you can't be constantly putting out the fire, it's mentally exhausting",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
onmach,3,"I don't mind putting out actual fires. If it is broken, just fix it.

But a lot of urgent work is a ticket from a big customer that wants a report, or a data adjustment or an extra column specific to them. In reality it is a request by one person at one company, and it sacrifices things all your customers need for what that one person wants, and the company perceives it as way more important than it is.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
BenE,0,"For some people, being forced to go down the wrong path for two weeks when a better path is discovered is worse mentally.
While you are building, is also the point you are often gathering the most context and are more likely to discover better paths. Before diving into code, specs are in vague natural language that often doesn't allow you to plan the details very well. One of the four tenets of agile is ""Responding to change over following a plan"". If you don't like that, just admit you don't like agile.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
JonKernPA,1,Indeed. It is antithetical to being adaptable to change and being agile.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,1,"If it happens rarely, then that's just something that happens.

But if it's happening all the time, then that indicates a much bigger problem with your prioritization. And most of the time, the ""We need it now!"" is either something that was known for a while and just ignored, or something that someone says they need now, but generally don't.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,74,[deleted],2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
asphias,79,"You can also go completely the other way. Stop focusing on the money. You'll be at work for a long time, better make sure it's actually enjoyable. Figure out what makes your job enjoyable, and steer your career towards making that happen.


Friendly colleagues with a similar mindset? Low work pressure? No 24/7 support? Product that actually makes the world better? working with science? Building robots? Work environment where you're actually appreciated? Low commute time? Less hours?


Decide what you want, and build your career not around money, but around actually enjoying your job.


I now work a 32 hour work week in IT at a governmental scientific institute, with smart, funny, and friendly colleagues, at cycling distance from home, creating things that actually impact society positively. I may not make as much money as most of you, but i actually positively enjoy going to work. 


(I should note that i live in western Europe, that might impact the attainability of some aspects)",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Bronkowitsch,7,"That's why i work in game development, even though i could probably earn twice as much at a comparable ""serious"" job.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
CreepingCoins,14,I thought game development was all about crunch and 100-hour weeks?,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Bronkowitsch,17,That depends highly on the studio. I work a cozy 40 hours a week.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
CreepingCoins,3,Awesome!,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
QuickQuirk,8,"Brilliant advice.

We get told to focus on the money too much.

I often tell people ""How much would you be willing to pay to not have to take the train each day"" (or similar from their work day).

It's surprising how much of their salary they'd be happy to give up when you phrase it in that way.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
rdditfilter,1,"Your comment at the end there hahaha I’m American, you almost gave me hope. 

I have heard that the US gov jobs are pretty cush, but I think a lot of them are subject to going without a paycheck every time the government decides to “shut down”",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
spacelama,1,I thought I was still in /r/AusFinance and was wondering what government worker was happy with their situation particularly since our only scientific agencies have been shitshows since the second last Tory-lite government shat all over management.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
MatthPMP,40,It's straight up impossible for most people anyway. If you're outside the bubble of inflated US salaries the math simply doesn't work out.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,18,"> inflated US salaries

I have to take issue with that. Given the amount of money these companies make off our work, I can't think of our salaries as inflated. If anything, we're underpaid. The only alternative would be management keeping even more of the money.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
MatthPMP,10,"What do you think the situation is like in western Europe ? There is no real prospect of career and salary advancement past a very low cap for people who stay in technical roles. The best students out of my country's top engineering programs are entering management before they turn 30 for a reason.

My mother is occupying one of the most senior management positions in EMEA at a well established Silicon Valley hardware company and makes a salary that's considered insane by European standards, yet would be average for a senior dev in the Bay Area.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,14,I'm all for the workers there making more money. But I don't see what your reply has to do with what I said. You having it worse off over there is no reason whatsoever that we shouldn't ask for better.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
OwnAssignment2850,5,"Now look at how those salaries compare when you add in the cost of living, healthcare, retirement, and you are not getting shot at school and see how they add up.  The ""freedom"" American's enjoy comes at great financial cost.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Geordi14er,1,"Ah yes, all us Americans are being shot at school all the time.  Amazing any of us survive.

Most of the country has pretty reasonable cost of living, only a few metro areas are out of control, but salaries in those areas are adjusted.  Most employers provide health insurance and 401k matching.  But keep spinning that narrative.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
AllThotsGo2Heaven2,3,you can buy a not-shitty flat in Berlin for under $400k and never have to worry about housing again. Renting is possible for under $800/mo with no roommates. What can you do in the Bay Area for $800? Wipe your ass after taking a shit maybe.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
EarlMarshal,4,"You know how long it takes to get to 400k with average german dev pay, German living costs and especially taxes?

We certainly have it better than a lot of other people in this country or another country, but buying a flat in a major country is still not easily achieved here.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
AllThotsGo2Heaven2,1,how long does it take? More or less time than for someone living in SF?,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
EarlMarshal,5,"Median salary is estimated to be around 62000 per year. That's 5200 per month or 3200 after taxes. A normal sized flat in a big city can easily cost 1k+ per month. Living costs vary, but a lot of people which use their money to actually live will probably spend 1k for that too. So you have 1,2k to put away at best. So that 14,4k per year.

Sure there are positions with much more money or people who live much more frugal, but on the other end are there more people who get less and put away much less while still working in IT.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
madness_of_the_order,6,Are those 400k flats and 800/mo rent in Berlin in room with us right now?,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Edward_Morbius,1,"I know this will go straight to down-vote hell, but there are a lot of very entitled people on reddit, who for some reason known only to God, believe they have a right to live a very nice life in a trendy neighborhood on a coast.

It's completely possible to live somewhere ""not on a coast"" and buy a 4 bedroom house for an affordable price. There won't be a Starbucks or a Whole Foods on every corner, but there won't be gang shootings either.

(just waiting for the ""that's impossible!!!"" replies.)",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
LordoftheSynth,2,"California's real estate prices are 100% due to policy choices (prop 13) and NIMBYs blocking building more housing, not some magical trendiness factor.

Enjoy your downvote.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
MaleficentFig7578,-5,Both salaries and prices and profits are inflated.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
thetdotbearr,7,"Me, in the Canadian housing market: 💀",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,3,[deleted],2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
MatthPMP,2,"I went to uni in the UK and am based in southern France, I am quite aware.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,1,"Love France, People were always nice and polite, always a pleasure to go there.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Edward_Morbius,1,"If you're talking about retirement, it really is possible you just need to work both the supply side and the demand side. This means making how much you can make, but also living in places that your income supports, while allowing you to invest enough to fund your retirement.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,2,"The thing is, the places with the big salaries often have the higher costs of living. It's pretty rare to have a place that has a huge salary but is cheap to live in.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Edward_Morbius,4,"That's the point, there are lower cost of living areas that pay less, but you need less.

They're often lower stress and many don't require cars.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,0,">They're often lower stress and many don't require cars.

Definitely not here in the states. If you don't want to require a car, you're living in a big city. And those have high costs of living.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,1,"Uk has a high cost of living coupled with low salaries, lots of stealth taxes going on here on money that has already been taxed. This has been going on decades.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
All_Up_Ons,0,That's not rare in the US at all. Pick pretty much any place besides SF and NYC and you're good relative to software salaries. Doubly true for anywhere not on a coast.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,0,"Not nearly as good. And they all still have pretty high costs of living. Not SF high, but still pretty high.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
OwnAssignment2850,-1,"Um, no.  US salaries are not inflated, it's just that a large population of the world is Backwardistan and completely willing to allow slave labor to exist within their boarders.  Capitalism has never functioned without slavery, companies have just found ways to outsource it and call it by more PC names.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
MatthPMP,6,"Imagine calling the situation of devs in western Europe making twice the median income in their countries ""slavery"". Yes, it's annoying to compare ourselves or hear US Big Tech devs talk in a way that's completely removed from material reality for 99% of the world, no it's not fucking *slavery*.

Terminally US-brained take.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Polokov,33,"Yeah, people that achieved that all have some kind of survivor bias and forget that they mostly got lucky, even if they worked hard for their chance. Chance is chance, luck does not happen to everyone.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
ericjmorey,1,"I did that when I started running 10K races. Same result. 

Pacing yourself gets you to your goals faster.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
OneForAllOfHumanity,12,"The base issue is that no matter how good the process is, it involves people and a product, either of which can be stupid beyond the ability for the process to compensate for.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
dust4ngel,4,"> it involves people and a product, either of which can be stupid

""individuals and interactions over processes and tools"" means, among other things, ""don't hire stupid people.""",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
OneForAllOfHumanity,8,"They're not hiring stupid people, they ARE stupid people.  It's often the top level that a) have a stupid product idea that would fail anyway, and b) implement ""agile"" in a non agile way...",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
chowderbags,8,"> an attempt to jam organic concepts into math-shaped holes.

Well there's the problem. Everyone knows organic concepts go into the square hole.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
JonKernPA,1,I thought most jams were organic and fairly amorphous,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
edgmnt_net,3,"Most projects are crap and fail, I agree. I feel like the value of Agile development is in discovering requirements and adapting to them. It is not going to make your business viable. If the customer keeps changing requirements, cannot commit and wants a fully-custom solution, the costs *will* inevitably be higher. Agile can only minimize those costs, but it cannot eliminate them. Can they actually afford what they're asking for?

And the whole market has been filled to the brim with such stuff. Especially, I'd say, driven by easy money and the advent or SaaS offerings which make it all too easy to pass a combination of random feature requests as a cohesive product. Managers think they have a product they can sell over and over, the customers think they have a tailored solution, the business ends up paying for all of it long term just to keep everyone on board. And now the pockets are drying up as expectations failed to be met.

No, you can't just use Agile as an excuse to avoid doing any research and expect to adapt to what the customer wants next week, unless you're doing small stuff like websites or consulting. And even then, clear requirements are worth a lot. Even then, someone has to design and build the basic tools you use and those need to work in a variety of use cases right off the shelf or close.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
JonKernPA,2,"Building a successful product requires more than just agile practices. But I submit an agile practice will help you figure out how crappy the product is faster and cheaper ;-)

Or, how to ""sneak up on the answer"" -- as I like to call it -- in a rapid and effective way.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
wildjokers,12,"> save your money, GTFO ASAP and enjoy life.

Amen.

I became a 401k millionaire this year. The 2nd million should come _much_ faster than the first million (all hail compounding interest). So I am getting there...",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,27,[deleted],2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
gefahr,16,Anyone working for a reputable tech company in the US has access to excellent health insurance.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,18,[deleted],2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
gefahr,-2,"By law, you can keep it for 18 months between jobs by continuing to pay your premiums.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Captain_Cowboy,13,"That's 102% of the premiums, which likely had been subsidized by the company before you lost your job. A good health plan will likely be $800-$1200/month, assuming it's just you, and has something like a $4,000 deductible before coinsurance kicks in and pays a percentage of the next $4,000 or so.

In other words, it's best to have an emergency fund.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
TriflingHusband,1,"Yes, this exactly.  For the tech company I work for they break out how much they pay for each benefit as part of your compensation package.  We get this updated yearly at the end of the calendar year. They offer full family health insurance on their own dime and they pay north of $30k per employee per year.  Yeah, I am not going anywhere for a while.  Forget paying that nonsense on my own.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
gefahr,-4,"Agree on everything. But for others reading: the deductible situation varies depending on the plan you chose. We're on an HMO, no deductible, just copays.

Some of my coworkers with less complex medical needs choose plans like that in exchange for cheaper premiums.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
fripletister,4,The point is that COBRA is prohibitively expensive for most people who suddenly find themselves without income.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,2,COBRA is crazy expensive.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,5,"Right, but that's not going to last in retirement.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
EmergencyLaugh5063,5,"Bold thing to say in a year with record layoffs in the tech industry.  This kind of mentality is why we cant fix healthcare in this country.  

I really like how you even had to quality it with 'reputable' since I guess the bar has moved from ""get a job to get good health insurance"" to ""get a REPUTABLE job to get good health insurance"".",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
disappointed-fish,3,"Ironically, if you work directly for the insurance companies as an employee, you get really mediocre options for insurance.


Yay America 🫡",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
renatoathaydes,1,"Oh no, someone took the bite! Please, please!! Do not start this idiotic discussion on a thread that should have nothing to do with that.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
xmBQWugdxjaA,-12,And good luck getting surgery with Europoor waiting times.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Membership-Exact,15,How sad that you have to wait in a queue when everyone has a right to surgery and not just those who can afford it,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
tes_kitty,7,"If it's an emergency, you will get the needed surgery right away.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,1,[deleted],2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,3,[deleted],2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
bigtdaddy,3,It's not like I get good service in the states. When was the last time someone had a drs appointment start on time?,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
oalbrecht,-1,How hard is it to start a small solo company in your country? That could be one way to raise the cap on your earnings. That’s what I’m doing.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
thetdotbearr,14,"[Yeah, just start a successful company. Easy lmao.](https://www.youtube.com/watch?v=ZXnifPfxK0Q)",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
renatoathaydes,3,"But he's right though.
Owning a company is extremely risky and 99% fail at it, but the remaining 1% are the ones making all the money (in Europe, because here you're topping at something like 100k USD as a salaried worker, seriously... if you want more than that, yeah your only option is ""start a successful business""). In the US, I've heard there's quite a few of you going well and beyond 200k USD, which sounds sweet but totally out of the question in Europe, and even that amount of money is not enough for most of us to consider moving (still, quite a few do, of course).",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
oalbrecht,1,The success rate is very much based on the type of company as well. A small bootstrapped B2B SaaS business has a much higher success rate than a B2C company trying to become the next Facebook.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
aint_exactly_plan_a,-9,lol... I thought that too... then Trump became president and my 401k hasn't moved in like 5 years.  It's starting to go back up now though.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
-birds,5,"You should check your portfolio allocations - Vanguard's [S&P](https://investor.vanguard.com/investment-products/mutual-funds/profile/vfiax#performance-fees) and [total market](https://investor.vanguard.com/investment-products/mutual-funds/profile/vtsax#overview) index funds have both basically doubled over that time frame. Not sure what your retirement horizon is like, but if you plan to work for 10+ more years, you should have a good portion of your portfolio in funds like these.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
wildjokers,11,"To be fair the market went down because of covid, didn't really matter which old white man was president, it would have went down no matter what. However, that was fine because if you were still contributing to your 401k (assuming you are in the US) then you bought a lot of shares at a pretty low price. Market is going up now so you are going to reap the benefit of that. 

It would have only been an issue if the covid-caused market downturn happened when you were hoping to retire.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
aint_exactly_plan_a,-4,I think that's part of it.  Trump's debt increase and tax breaks for the rich kept it down though.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Illustrious-Many-782,2,"You need to look at this graph.

https://fred.stlouisfed.org/series/FYFSD",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
wildjokers,0,"> Trump's debt increase

Again, to be fair, the debt increases every day regardless of who is president. The rate of the debt increase may change, but the debt amount continually increases: https://fiscaldata.treasury.gov/americas-finance-guide/national-deficit/",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,0,"That's not a to be fair; Republicans constantly whine about the debt, and then Trump adds more than has ever been added under any President.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
wildjokers,2,Economically there is barely any difference between Republicans and Democrats. Social issues are where the vast differences are.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,0,That's not even remotely true. The economy generally does much better under Democrats. More jobs are usually created under Democrats.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
wildjokers,2,"The economy has ups and downs naturally and the party in control when it goes up gets credit, and party in control when it goes down gets the blame. When in fact they don't have much control over it.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
thespiff,1,"Most people who are writing code are working for large organizations, making incremental changes to existing systems. These are not projects that fail. Maybe they stagnate or underperform. But they rarely totally fail. Not saying that’s a good thing, just disagreeing with your bullet point.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Edward_Morbius,1,"> making incremental changes to existing systems

Eventually these build up into a giant sticky ball of changes that no employees entirely understand, then someone comes up with the idea to ""replace it"" and the cycle starts over.

Another common occurrence is when Management realizes that they're paying $$$$ for some external vendor and decide to bring it in house without realizing what the true requirements are. 

Address verification and routing are both common.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
A_Light_Spark,1,Sturgeon's law strikes again,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
thened,1,Can I be your friend?,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
piesou,101,"Agile is not about not needing no planning, it's about developers self-organizing and iterating on the development process, aka cutting out management. If your developers can't do that, guess what, it's gonna fail.

If corpos just slap a new label on waterfall, then it's justified to complain about that.

The thing you are describing is waterfall with even more meetings and no planning. Blaming that on Scrum/Agile is unfair.

Scrum itself is just a lessons learned: 
* you should plan requirements and adjust if needed (planning)
* you should communicate about blockers to resolve them quickly (daily)
* you should have a working prototype (review)
* you should have some sort of psychotherapy and process to change things that make people miserable (retro)",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
SittingWave,41,"> cutting out management

that's where agile failed. management does not like to be cut out, because it makes them look irrelevant (because they **are** irrelevant) and they can't accept that.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
piesou,8,The usual solution to these problems is to just work at a company that cut them out already or never hired them in the first place. If you care that is.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
SittingWave,8,good luck finding one. They sneak in and encroach their position by hiring more of them.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
DevestatingAttack,2,"If someone has the ability to fire you, then they are management regardless of whatever their name is. If you ""get rid of management"" then people become unfireable, and if I'm unfireable you're gonna be pretty psyched when you see what I did instead of working on a user story

it's making an esp32 that takes commands from an LLM to make different fart noises based on what mood I'm in",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
qalmakka,48,"> Agile is not about not needing no planning, it's about developers self-organizing and iterating on the development process, aka cutting out management. If your developers can't do that, guess what, it's gonna fail.

The point is, that is not what the average management wants. The average management is utterly unaware of the complexity behind software development, so they just apply stuff they've read about on medium and hope for the best. They'll never accept to truly lose the ability to micromanage, because that usually ends up unveiling how unnecessary most layers of management are.

IMHO talking about Agile in the context of modern corporations is akin to talking about elections in the context of North Korea. Sure, both swear they're truly democratic and truly agile, but neither even remotely is and sure as hell both only truly care about anything but being able to say they do.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
mpyne,7,"> IMHO talking about Agile in the context of modern corporations is akin to talking about elections in the context of North Korea

The difference is that agile teams have actually managed to do what the agile practitioners claim it can do.  North Korea hasn't actually managed to have free elections.

It is absolutely fair to point out that many teams who (try) to adopt agile still end up struggling in a sandpit, but that doesn't invalidate the success of those teams that make agile methods work.

And I went lowercase 'a' on purpose because one of the biggest points of confusion is this idea that it's a specific method that you can foist upon teams to make teams successful with no other changes.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
FrankBattaglia,6,">It is absolutely fair to point out that many teams who (try) to adopt agile still end up struggling in a sandpit, but that doesn't invalidate the success of those teams that make agile methods work.

It very well might invalidate the hypothesis that agile was a significant factor in that success, though.  If 90% of waterfall projects fail, and 90% of agile projects fail, maybe we can just say 90% of projects fail and whether or not you use agile isn't likely to save you.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
mpyne,0,"When I looked into the research a few years back, waterfall projects failed at a materially higher rate, so there was definitely a difference.

And even now, when you get developers who say that they were on an ""Agile"" project and it failed but their next project ""didn't use Agile"" and it worked, and you ask them about their method, generally they give you an agile method instead of a waterfall one.  They couldn't be agile when they were being force-fed an Agile method by consultants, but went they were allowed to innovate their own method they ended up with a method that would comply with the Agile Manifesto.

There are few organizations left that actually try to deliver software using waterfall and stay tied to the lengthy timeframes such methods would require.

Still though, one big thing that made agile projects more successful than waterfall in the studies I had seen was that they were also usually smaller in scope, which shouldn't be any great surprise.  

There's an anti-pattern in large software projects where, once they get large enough, they start attracting software requirements from everywhere, further increasing the scope of effort, cost and schedule and increasing the risk of eventual failure.  But organizations feel compelled to do this because if they don't get their requirements into the Big Project's train, those requirements won't be implemented for years.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
my_beer,5,I make a lot of use of 'agile' (the toolkit of techniques you can pick and choose from to find what works for your team) vs 'Agile' (the frameworks you get certifications for).,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
ryuzaki49,17,In my experience the retro is the thing that makes me miserable. ,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
withad,26,"Retrospectives can be very useful, if the team actually has the power to change things. I've been on teams that were able to use them to try out new ideas and assess the results, steadily iterating on their own process. It's incredibly satisfying to see the gradual improvement and have that feeling of control.

But I've also been on teams where the same issues come up sprint after sprint and never get fixed and the team lead just assures everyone that he's passed their valuable feedback on to the leadership team and then he writes Mad/Sad/Glad on the whiteboard again and again and again until you just want to scream. 

It's not great.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
syklemil,13,"> But I've also been on teams where the same issues come up sprint after sprint and never get fixed and the team lead just assures everyone that he's passed their valuable feedback on to the leadership team and then he writes Mad/Sad/Glad on the whiteboard again and again and again until you just want to scream. 

Yeah, if the meetings are entirely theater, of course people are going to hate it no matter what kind of meeting it is.

Do you not make tickets for these kinds of thing, where the team lead also has to report on their progress to the team? The team lead's missed goals here really should be made explicit.

(We also do Start/Continue/Stop rather than Mad/Sad/Glad; the emotional variant comes off as kind of unprofessional to me.)",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
withad,8,"We made tickets and tried to track them but nothing ever really changed. I don't want to start ranting so I'll just say that the retros were one of _many_ reasons I no longer work at that particular company.

I also prefer Start/Stop/Continue as a default retro format. I've never liked Mad/Sad/Glad for both the implied emotional stakes you mentioned and the fact that it's basically just ""good"" and ""bad"" columns but ""bad"" is split in two for no reason.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
syklemil,2,"> I don't want to start ranting so I'll just say that the retros were one of many reasons I no longer work at that particular company.

Yeah, I don't blame ya. From just that one thing it sounds like the organization couldn't move properly / had poor management, and yet insisted on theater / wasting people's time. And if the latter was to cover up the former, it's just another sign of poor overall organizational health.

It seems to come up frequently enough in these sorts of threads: Managers who have what is basically a graeberian Bullshit Job, who need an income and likely want the prestige of being a ""boss"", but don't actually want to do managerial work. It's not easy to fix, especially not as a technical employee.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
koreth,1,"Sometimes it's not even in management's control.

The most annoying pointless retros of my career were at a fintech company where we worked on integrations with third-party payment systems. Probably 80% of the team's pain points and delayed tasks boiled down to, ""Payment company X is incompetent and/or unresponsive."" Retros usually devolved into a gripe session on that topic. Our company's management agreed with us but had no more ability to fix the problem than we did, given that it wasn't an option to just stop supporting a payment system our users needed and that we weren't a major enough customer of theirs to have any leverage over them.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
0x0ddba11,37,"In my experience the retro is the most important piece of the puzzle. It's where a shop can truly be agile and improve their process.

Of course, if management goes ""we heard you but we are not going to change anything"" the retro is completely pointless. But then you are not agile to begin with.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,21,"As a joke at one of the places I worked I changed the title of my ""Lessons Learned"" documents to ""Lessons Not Learned"" and waited to see how long it would be before anyone noticed.

When I left the company a couple of years later they hadn't yet. Which told me all I needed to know about how much they were paying attention.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
RonaldoNazario,5,It’s not completely worthless.  It’s sort of a fun cathartic bonding session for our team even when we acknowledge management isn’t going to likely do the right thing to feedback garnered from it.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
syklemil,10,"The retros I've been at have been fine, but they're definitely _work_, i.e. I don't think I'd go to one if somebody wasn't paying me to.

My impression from these threads is always more that a lot of people have issues with limiting the length & number of meetings; possibly professional cultures in some countries also are a bad match for some approaches, which rarely seems to be mentioned.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,3,"I think one of the easiest ways to demoralize a team is for retros to just devolve into a team venting/complaining session. If nothing is listened to, then why bother with the meeting?",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
drunkdoor,2,"If it has gotten to that point then you're either just starting retro with a competent manager, or they're entirely worthless",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Lceus,2,"Retro was extremely useful to our team, but perhaps it's because we actually act on some of the challenges brought up. Lately, though, our retro is a lot of ""we're not delivering as fast as we can"" from the CTO (who should probably not be in the retro at all, but hey, we're a startup/scaleup) which is basically useless.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
MoreRopePlease,1,"> we're not delivering as fast as we can

Turn that into a ""5 whys"" discussion. Ask the CTO for metrics that show you're capable of delivering more.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Lceus,1,"Trouble is, we recently introduced story point estimation and even though it's a very new thing in our organization, CTO and his peers are already latching onto very specific numbers like expecting X story points per developer per month, etc.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
piesou,2,So have you talked about changing what makes you miserable in the retrospective then and changed that meeting? You know you can skip it if no one has anything important to say.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
mpyne,7,"We actually used a retro once to point out that the retros were too frequent and dialed them back significantly.  In fact we ended up changing a lot of our Scrum out from under Scrum via changes we made through retros.

If the team is too scared to change the 'Agile Process' then it's probably a good indication the process isn't agile!",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Nimweegs,0,Scrum is defined by the events so if you change or don't do the events it's by definition not scrum. Which is fine. Do wonder if you dialed back just the retros? Cuz retro indicates the end of the sprint. Did you just go straight from review to planning?,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
mpyne,2,"Basically would do a retro every few sprints rather than every sprint (we already had sprints of only a week).

But yes, we'd typically go from review, especially on tasks we couldn't get finished on and then work the sprint plan for next week.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Nimweegs,4,"Weekly sprints is horrid, the minimum is 2 weeks and that sometimes feels a bit short already. My point for the retro would be the sprint is too short I can't get anything done haha",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
drunkdoor,2,"For one week sprint is a LOT of theater. 2 week sprints it's fine assuming you're adhering to it as close to the letter that makes sense. You need a good scrum master with the right qualities. For the anti meeting folks, sorry, that's not how the business world functions optimally",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
mpyne,1,"There's more backstory to why we thought 1 week was better than 2, but you're right... that's a good topic for the retro!",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Vwburg,23,"This agile without management may work if there are no customers involved, or perhaps if you’re large enough that your customers have no say in your product direction. But for any companies who need to make decisions based upon the demands of paying customers it’s not going to work. Customers need dates when they can expect deliveries of specific features so they can plan. You can’t just offer them whatever you felt like working on that month.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
aint_exactly_plan_a,16,"It's not that there's no management.  Agile requires a servant's heart from its managers.  The primary function of managers in Agile are to protect the principles, protect their team, and stay out of their way.  
 
Protecting the principles requires a lot of bitch work... keep the team productive and active by taking on phone calls and e-mails that they don't need to be a part of.  Protect the team by keeping others off their backs and to keep people from changing your team's priorities... and maintain a list of the next 5-10 priorities to work on (that you can modify as needed) so that when a team member finishes one thing, they have new work to start.
 
The job of a manager is to help the team be more consistent in whatever manner that is.  Most managers care about showing off, about proving to higher ups that they can lead, that they can get the most out of their team, that they can be a hardass when needed (because that's what companies look for when promotion time comes - they don't want someone who makes employees happy, they want someone who makes them happy).
 
The ironic thing is that if managers could just stay out of the way, their numbers would go up with Agile and they'd look even better.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
piesou,19,"We, as developers, sit together with the customer themselves to check what they need/want that month and give them a rough estimate of what we can deliver. Then we prioritize and plan it based on how we think the customer will get the best value. We give quick feedback to check if things align or can make quick adjustments if there are issues and changes. 

If that sounds like Waterfall to you, congratulations, you've done Agile all along without knowing it.

If your developers are unable to talk to people or can't self organize in a responsive fashion, then Agile assumes that the developers themselves will communicate that and change it to how it works best for them. If your employees can't clear that bar, maybe Agile is not for you or you need to hire better developers.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
aint_exactly_plan_a,11,"Yup... on the only team I've ever seen where Agile was implemented well, we did the same thing.  We talked to the client frequently about what their problem was and how they wanted it solved.  As we went through the project, I'd always have something for them to test so they could look at it without putting too much effort into it.  Once they greenlighted that, I'd finish it out and deliver it.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
TwentyCharactersShor,24,Your comment underlines the general lack of knowledge of what agile is and also that it isn't always the right choice!,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
pjc50,-9,"If it's only the right choice when you don't have customers, that's really limiting its usefulness!",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Vwburg,-9,I was replying to the post which claimed that agile was self organizing developers without any management.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
CMFETCU,18,"And if your values are aligned to autonomy and self-organization, there should be no need for management intervention on decision making of highly motivated teams of experts that have that autonomy of direction. Direct customer exposure is a core tenant of agility, shrinking feedback loops and cutting out anything between you and the user feedback you need.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Vwburg,6,"How many customers and unique projects do you need before this doesn’t scale and it becomes a full time job to manage customer relationships? I don’t mean sales, I mean technical architecture and pre-sales discussions. Aggregating demands from multiple customers into a roadmap, which can certainly inform the milestones for the development team. If people are trying to do this with agile there’s no surprise to see failures.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
piesou,0,"What you are describing I think is a sweatshop where sales people/customer support gets everything the customer wants crammed into the next release with the developers having no say in that. If that is not what you are experiencing, maybe your current process works really well and you should not change it.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Omikron,0,Why would you have a large list of unique projects??? Most companies are within an industry and focus on similar things.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
jeffwulf,3,This question is absolutely baffling to me.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Omikron,0,"Why? I work in health care and while we have a lot of projects, they're similar in many ways. We aren't writing a game one day and a inventory management system the next or anything.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
jeffwulf,0,I work on compliance software and I've worked on something like 6 or so very different products in the past 6 years.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
lelanthran,2,"> Direct customer exposure is a core tenant of agility,

This seems like an awfully naive take.

Who is the customer? The person writing the checks or the user using the software?

Because the person writing the checks is writing checks based on some deadline and couldn't really give a rats ass about how well the user uses the software as long as all the correct checkboxes are ticked off.

This person is too busy to be part of your daily 'look-busy' ceremonies. This is why they engage with someone a few levels up the management chain.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
piesou,2,"That person is usually an expert in that field who knows how their processes work and what kind of software they need to solve their actual issue (Product Owner).

That person is also the one that can justify based on the current estimates how much budget ""check-writer"" needs to provide in order for the product to succeed. 

That person also usually knows how people are using that piece of software. If they aren't, they can get one representative of that area into the review meetings to get quick feedback.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
djnattyp,0,"> Because the person writing the checks is writing checks based on some deadline and couldn't really give a rats ass about how well the user uses the software as long as all the correct checkboxes are ticked off.

AKA the reason for ""enshittification"" and why ""enterprise software"" always sucks.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
aint_exactly_plan_a,3,"I think he had issues with your customer comment, which was incorrect too... Agile says that the people closest to the work estimate how long it will take.  It also champions frequent contact with the client as you narrow down the scope and purpose of the project.  
 
When I worked custom projects for paying clients, devs handled all of the communication about the project while management handled stuff that we didn't need to be a part of.  It absolutely works very well.
 
When I had an initial meeting with the client, I figured out what their problem was and we talked about the best way to solve it.  If the solution was custom code, we talked about timelines, how long it should take me, and how those timelines will change if they alter the problem they're trying to solve or want to add more things in there.  
 
When a client trusts you, they don't have to bother you all the time about when you might be done.  If I said I'd have it done in 3 days, it was done in 3 days.  If I said 10 days, it was done in 10 days.  Allowing people to set their own timelines means we can build trust and increase our Agility.
 
Even customers who were irate and demanded stuff be done the next day would usually calm down when you start probing about why they needed it next day... what the consequences were if they didn't get it the next day... whether they were going to have someone available to test even if I got it done in their timeline.  Most of them are just so used to not getting what they needed from my previous company unless they yelled that they just started yelling at us all the time to get stuff done.
 
Yes, it's more training for devs and some devs didn't like it but I loved being able to figure out the problem and solve it on my timeline, and the client was usually very glad to have that problem off their plate.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
mpyne,2,"It isn't that there is no management, but that having management as a middleman in all information flow will prevent your software team from being successful.  That's the 'management' that good teams will deliberately cut out.

Oversight and all that is still important, the point is *how* management exercises that oversight is different for the sake of improving the product the team can deliver.

You wouldn't ask a Marine rifleman in actual combat to wait for orders from the General, or to make a report to the General and standby before they're told to return fire.  You'd expect the rifleman to be able to assess the battlespace, move and return fire, and even call in air support all without having to be directly managed by the commanding General.

In the context of software development, agile is about answering the question of who on the team needs to know X about the product to do their job, and how can we get the team that information as rapidly and accurately as possible.

Management doesn't *need* to know everything (there are things they need to know, of course!  But not *everything*).  There are things that the developers need to know that the managers don't, and good teams empower those devs to get that info from the right person (often on the customer's side!) without undue ceremony, interference, or delay.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
hippydipster,5,"Yet another strawman in the agile sub-reddit!

>You can’t just offer them whatever you felt like working on that month.

Thanks for burning it down for us.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Vwburg,1,"I don’t understand what you mean. If your customers are integrating your product into their product/system/etc. they can’t just take whatever features are working when you like. The larger system being built will have many dependancies which need to be addressed to bring the system up (crawling, walking, running). Your customer cannot wait for the last day and expect to integrate all the incoming components and hit the running stage on time.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Duckliffe,4,That's why input from stakeholders like the product manager & the support team should be taken into account when planning sprints,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Nimweegs,2,That's the product owners job,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Vwburg,1,I agree with you. But that does sound a lot like management to me. Perhaps you guys are confusing good management with micromanagement.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Echleon,7,Product direction from stakeholders != Management,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
IQueryVisiC,2,"2 customers 3 expectations about our next release. Customer knows when they want it, but not what. We work with big companies.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
lookmeat,2,"I mean if that's the case, then you can't call it ""waterfall"". That system was closer to what the agile manifesto spouted than what we generally call that, which is the management corrupted system. 

Sadly it comes to the idea that management needs to be more in control. All management systems tell you the same thing: it only works when you can trust your employee and let them do their job with minimal supervision. That's what you want to optimize: reduce supervision and sync time while still getting high quality. The thing is that managers have serious confidence/impostor-syndrome issues, but rather than go to therapy and deal it there, they simply deal with it by making everyone work around their issues, having meetings and what not. 

The fact is that agile, scrum, waterfall, etc. all fall for the same reason. They propose: you should cut anything that isn't strictly needed for the business, skip meetings, avoid excessive deliberations, set clear goals and let the employees decide and adapt without interference. But the manager reads this and thinks: but *I* need all those things, if I'm not actively interfering how could I do a good job (that's the impostor syndrome, failing to realize they are doing the job and thinking there must be something else, maybe more meetings) so instead we'll cut all the things *I* don't need, (things that don't require meetings with me) such as QA, requirement collection, design reviews, etc.

Agile, as a philosophy, does have gaps and issues. But it doesn't matter if we fix it. As long as managers think themselves ""the boss"" rather than ""the enabler"" and at the same time they don't feel confident in their ability, we'll keep having people corrupt it all into the same thing: about 3-4 meetings a week only for synchronizing and repeating known things (but giving the chance to the manager to bike shed a little bit) and with no real focus or way to know if you're going on the right path or not. And things will keep failing.

So I understand a bit what the article is about. People are blaming the system they misuse, when no system can undo bad management. But blaming that last problem makes it real hard to fix, easier to focus on another problem, then you just drop agile in lieu of more meetings!",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
aint_exactly_plan_a,2,"It's less about developers being able to do it and more about management being able to stay out of it.  They have to fuck with everything to prove they have value... That's why it will continue to fail.
 
Just like waterfall, management fucks up the process, whines about processes never working right, then tries the next new thing.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
dijalektikator,1,"> Agile is not about not needing no planning, it's about developers self-organizing and iterating on the development process, aka cutting out management.

If that's really the case then it's entirely pointless to talk about Agile at all considering this state of affairs cannot possibly exist in the vast majority of tech companies. You're never going to see a private company (or a government institution for that matter) actually give the devs that much power over their work.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,1,[deleted],2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
piesou,1,"Yes, that's a requirement and if the team self organizes, it should become immediately obvious who caries their weight and who doesn't.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
WillCode4Cats,0,"Agile is whatever your organization says it is. For some it's about not needing planning. For others, it's just waterfall with more steps.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
florinp,-3,"""Blaming that on Scrum/Agile is unfair""

It is not.  It replace medium term planning to short term.

Replace requirements with user stories

Consider everything generated by an user (user stories) ignoring non functional requirements or scenarios that don't involve an user at all.

Ignore the difference between business requirements and  software engineering requirements.

Consider that the development can be done in the order the business want.

Usually ignore architecture.

Consider al developers equals in experience and competence.

Consider all requirements easy to change.

Consider that before Agile was only Waterfall (it wasn't). Even Waterfall was not as the one described by Agile.

So is Agile the problem.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,2,"> It is not. It replace medium term planning to short term.

Agile doesn't do that. Management does that. There's nothing in the Agile Manifesto, for instance, that says you shouldn't plan your project out. It's just that you should be able to pivot when new information comes up. 

>Replace requirements with user stories

Those are requirements. They're more from the perspective of people who are actually going to use the software. 

>Consider everything generated by an user (user stories) ignoring non functional requirements or scenarios that don't involve an user at all.

Literally nothing says that. That's just shitty management. 

>Usually ignore architecture.

Again, literally nothing says that. Just shitty management. 

>So is Agile the problem.

Literally everything you've cited is the fault of shitty management.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
piesou,4,">  It is not. It replace medium term planning to short term. 

No one does that. There's a list of written down requirements that are selected based on priority when someone runs out of work. The order and how far you need to plan out is decided collectively by getting the business and developers together to talk it out.

>  Replace requirements with user stories 

Same thing

>  Consider everything generated by an user (user stories) ignoring non functional requirements or scenarios that don't involve an user at all. 

That's like saying going Agile makes you drop user authentication. It doesn't. In fact you evaluate and test everything continuously instead of only once at the very end. Reviews ensure that users are involved. Non functional requirements should be in the users stories and be testable.

>  Ignore the difference between business requirements and software engineering requirements. 

Agile makes sure that they align because devs run the process and talk to the business instead of some manager.

>  Consider that the development can be done in the order the business want. 

No, development is managed by getting the business and devs together to actually talk that out. You find the process that works best for both parties instead of letting some manager decide that.

>  Usually ignore architecture. 

Devs run the process. If devs ignore the architecture, it gets ignored.

>  Consider al developers equals in experience and competence. 

No, but usually you try to let everyone do everything to share knowledge. That comes at the cost of additional time for sure, but when your coworker quits, the business does not go under. Code reviews are in place for checking quality and should be done with experienced devs.

>  Consider all requirements easy to change. 

No, but instead of building something that does not work for 2 years, you get early feedback.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
florinp,-2,"""The order and how far you need to plan out is decided collectively by getting the business and developers together to talk it out.""

yeah. Adding more people to discussions make thing better /s

""Devs run the process. If devs ignore the architecture, it gets ignored.""

Competence is not democratic. Technical stuff don't work by voting. 

 ""Devs run the process. If devs ignore the architecture, it gets ignored.""

Yeah :years of experience can be explained in 2 days, no ?

Design and architecture is easy to explain /s 

""No, but instead of building something that does not work for 2 years, you get early feedback.""

What projects did you worked before agile that did that ? 

I've worked on many projects that has 3 months iteration. So 2 years is a myth. 

  
""Agile makes sure that they align because devs run the process and talk to the business instead of some manager.""

This is really only a bunch of words. and yea replace the manager with scrum master and project owner which now is worst : at least the previous managers (good or bad) has some experience in IT domain. Now we have peoples with making shoes prior experience (I'm exaggerating only a little bit : usually the are form economic business management schools).

I am sorry but you keep repeating things that agile people likes to repeat.

Can I assume that you don't have experience with work before agile ?

Not that before was good but now is worst.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
piesou,1,"> Adding more people to discussions make thing better /s 

I mean, like yeah, the people that know and need to know about the requirements should get together duh. You time box it, cut out the chatter, add a couple breaks to get shit done. You don't talk about your cat, you ask clarifying questions if needed.

There's no concept of voting, there's no democratic process. What you are thinking of is planning poker which is about figuring out if anyone knows more about the particular requirement. 

The team itself organizes itself how to handle decisions. They usually follow opinions of the most competent developers or organize in subteams.

Design and architecture is not easy to explain, so you talk about it rather than just letting Bob in his cubicle draw fancy squares that no one can implement in practice.

>  I've worked on many projects that has 3 months iteration. So 2 years is a myth. 

3 month long projects won't benefit from a Scrum process. Scrum cycles are usually 3-4 weeks long. There's not a lot that can go too wrong in that time frame. 

We've built various 1-3 year projects using Scrum and we needed to react to changing laws (GDPR), API changes of partners or just reduce the scope of tickets since the product owner didn't know that doing simple thing x would cause us to work on it for a month.

>  and yea replace the manager with scrum master and project owner which now is worst : at least the previous managers (good or bad) has some experience in IT domain. Now we have peoples with making shoes prior experience (I'm exaggerating only a little bit : usually the are form economic business management schools). 

The Scrum master itself is just in charge of keeping everyone happy and keep things moving along. They don't interfere, they don't manage and it's for sure not a 40h job so managers are out!",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
florinp,1,"""3 month long projects won't benefit from a Scrum process. Scrum cycles are usually 3-4 weeks long. There's not a lot that can go too wrong in that time frame.""

This was an example about processes before agile. As a reply to you 2 years cycle (that never happen before agile- maybe in some exceptional cases)

""The Scrum master itself is just in charge of keeping everyone happy and keep things moving along. They don't interfere, they don't manage and it's for sure not a 40h job so managers are out!""

Not my experience in 8 years of agile",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
lelanthran,-8,"> Agile is not about not needing no planning, it's about developers self-organizing and iterating on the development process, aka cutting out management. 

Good luck with that. Management exists for a reason. Deadlines exist for a reason. Clients exist for a reason. The only reason that the software is being developed is because someone, somewhere, has a deadline.

When buying something it's expected that the buyer is going to ask ""when can I expect delivery?""

Clients are not being unreasonable when they require a better answer than ""How long is a piece of string"" when they ask ""When can we expect this?""

>  If your developers can't do that, guess what, it's gonna fail

Well, yeah ... we've *seen* that happening, and we've also seen that big-A Agile doesn't fix it.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
notbatmanyet,7,"The problem with Waterfall first and foremost is that you build what the client wants, not what they need. Then you end up with an unhappy customer and possibly a contract dispute.

The whole purpose of Agile is that you check in with the client frequently and validate the work against their needs so you can pivot ASAP if its not the right thing.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
piesou,10,"Developers can talk to clients. Developers understand deadlines and can plan accordingly. The clients can ask developers when they can expect a delivery because the developers know best when a certain feature will be done. I don't see how this conflicts with Agile.

Why do you need a dedicated person in between? All that leads to usually is that important information gets lost in the process and them overpromising things to the client because they themselves do not need to take responsibility.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,1,"> Deadlines exist for a reason.

The majority of deadlines I've had were completely arbitrary. Whether I hit them or not made no difference, and many times when I did hit them, nobody was ready for what I had.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Omikron,22,Agile isn't the reason projects fail.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
T1Pimp,9,"Same! They just did waterfall but with less documentation and project management. ie NOT agile but management with no fucking clue what is involved going, ""great now go faster"". That's it. That's not agile.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
chrisza4,6,"Before Agile become a thing, the selling point was 80% of traditional project failed.

So while it is not getting better, it is also not getting worse.

Funny enough, as project failure rate rise we got a very good technical progress all these years.

I think the way we measure success have been erroneous.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,15,"As a senior dev it basically feels like an endless game of justifying what I am doing. Like yeah we can break down my task into stories and talk about them, add descriptions and point them, discuss who wants to pick up what, talk about priority. Or we can just leave me alone and I’ll do all the work like I was going to anyways, but without having to babysit everyone’s opinion along the way. Man the amount of times we have stood up a project and people just want to steamroll past everything, and I go against the teams wishes just to get the basics in place. My preferred work style is a small group of like 2-3 experienced devs that can keep up, and a medium to large goal, and we just go at it.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,6,"Part of the job of a senior dev is to turn the juniors under you into seniors. 

You are sacrificing some of your current productivity for the productivity for your current team and the future of the organization.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,10,"I don’t quite mean that. The problem is things are often very complex and hard to understand, which is fine if we take the time to spec out and plan properly. What happens in agile is the managers and team admins never have a clear picture of what the priority is, and neither do the juniors. So we can do and plan what I say, or we can bullshit around and drag our feet and babysit egos.

So what ends up happening is me, the senior dev, not being confused in what needs to happen. I fight and speak for what needs to be done. Often the wrong thing gets prioritized, or someone’s confusion completely derails all effort and leads to wasted/inefficient work.

So really it’s the manager and product owners leading the development agenda. We do our tickets and work. I fight for what needs to be fought for. Often I do things in the background against official wishes, of course always benefiting us in the long run. And that is my job as a senior dev. Why does business never listen to our understanding?!?

Answer: They think they know better and business people can guide the company to success. And while true, most businesses are being ran completely ignorant of what the company is trying to be. For example literally a tale as old at time, you will be working for a company that has a huge market share in a specific tech solution or service. You think business and admins are prioritizing tech and stability and innovation? Hahah fuck no, they are stringing along tech debt on a patched up back end. These fuckers thinking about how to satisfy regulations and sell bullshit to customers. No point in making any real tech if no one cares and the business survives and customers keep paying. 

So then as a senior dev your decision is to sit happy with your golden handcuffs and become super jaded, or you jump ship and try your own thing. Or you find a magic unicorn company that isn’t full of corporate shit. 

Anyways agile is a failure and just hype for business.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,1,"That's not a problem with agile, that's a problem with management.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,8,"True but this is exactly what agile at most corporations devolves into. It’s just a cog and machine framework for time estimation. Irregardless of how strong and sane management and experienced devs try to keep it.

True agile just means, me and my coding bros working hard as a team on some cool shit. They just try to emulate that garage startup feel.

In other words agile is fantastic and great, love it. But not the *agile* a company chooses to do.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Izacus,2,Good management doesn't drag scrum agile into their company. So having it is already sign of bad management.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
monkorn,2,"When we first started agile I had just done my annual look over my personal spending to see if I had gone over-board on anything. When they were going over agile it clicked, oh, this is just budgeting for time instead of money. A sprint is a paycheck. Story points is a price.

I quickly realized that the only people who needed this process were the same people who needed intense budget process where they could only spend a certain amount each week on any category.

As a person with developer income, I'm no where close to that for budget purposes, and so I don't need to record to an insane amount how much I spend. 

As a developer, I'm no where close to that for developing time purposes. Doesn't matter. Agile demands it.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,-2,"You're on a team. You're working with other people. Yes, that means you have to communicate with them.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,4,"The team is never the problem. The problem is business and management, which also leads to confusion for juniors and tension all around. Left alone with a good team we can make any magic work, good luck getting that liberty.

Good managers come and go and they are a godsend. They can only shield you for so long, until new things come or culture shifts…etc.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
agumonkey,5,"One point I keep seeing is that all these notions were thought by people along many years. They write about it and then it's read by young minds without battlefield understanding of ideas.

I've seen people doing agile and being less organized than a swarm of nervous chicken. They just don't have the maturity to understand work (repeating the same mistakes, spending hours on useless ideas, wasting time at every opportunity).. be it software or anything. But there's so much money.. they can keep doing their dance, meetups, milestones, and all the trendy stuff, nobody knows shit nobody can stop them.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Kinglink,4,"> I have zero doubt that 80% of agile projects fail.

I would be shocked it's that low.  90 percent of things suck.. and I don't think that counts the failures along the way.  

i will keep repeating this.   AGILE WONT FIX YOUR DISFUNCTIONAL TEAM OR MANAGEMENT!  

Good teams use Agile, good teams use waterfall, good teams triage bugs and deal with them.  The key is they're good teams. Agile is usually used to solve a problem which can't be solved with a methodology.  

(Also managers think Agile is a management tool so they should be in charge of it... no)",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
cc_apt107,5,"These are the most common issue I see with agile implementations. Agile / Scrum presupposes the existence of a groomed product backlog on sprint 1. Sure, not all of the items have to be fully solutioned and refinement will continue, but trying to proceed with none is not “Agile”, it’s a lack of planning and critical thinking. This is ignored so often it’s kind of comical.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
jl2352,2,"I worked at an ‘agile’ place with no team updates. I literally asked if we could give a project update every week or two (as it allows us to raise blockers). No. Absolutely not.

Some of the stuff out there boggles the mind.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
admalledd,2,"I have some manglement above me, and in our Sales/CS side, that they sold a feature *we don't have*, and that the client wants, and *we have nothing but the name of the feature* to go off of. ""So, we are to just magic this up? What are the requirements? We can't commit to delivery of a product feature in 40 days if we *don't know what it is*.""

""Agile"" again and again is just a tool, or maybe even a tool box of things, but it requires understanding and commitment from management. That last bit is the hardest, because for some reason most management are *incompetent* and success is in *spite* of them.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
PloofElune,2,Big part of agile is giving up control to the individual devs/teams. Lots of people in charge don't like that.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
kenfar,3,"First off, who says that 80% of agile projects fail?   The vendor selling waterfall methods that produced the survey?  The same survey that claimed that 65% fail to deliver on time, and that presumes projects should identify 100% of their requirements before they even start?  Which means before users even have a chance to work with the UI...

The notion that you can do a good job identifying requirements in advance has been debunked for decades:

   * User providing requirements often don't really understand what they'll want until they get the tool in their hands
   * There's no decent way to *test* requirements without building the system.  So, it's easy to get errors in your requirements - that will destroy your project if you just wait until the whole system is delivered.
   * Systems with requirements identified up front always have horrific adaptability - at best you can provide high-overhead ""change orders"", more commonly people just tell you to be quiet since it's too much work to change anything: the product was delivered, the date has passed, and there's no more money.
   
Meanwhile, every project I've worked on over the past twenty years has been an agile project - whether at a startup or larger company.  They haven't all been run perfectly, but every single one has been better than the waterfall shit-shows I used to routinely see. 

Bottomline: the headline, survey and vensor are shit.  Agile is fine.  It absolutely has challenges with esp with leadership not trusting their engineers.  But that's an issue with bad culture that nothing will fix - other than the gradual demise of those organizations.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
hayasecond,1,"> Because I’ve worked at a lot of companies that from 2010-2020 wanted to “go agile” and ended up creating “agile” methodology that was really the worst parts of both agile and waterfall.

Accurate",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
kntofdth,1,I see agile model as build and fix model,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
fire_in_the_theater,1,hierarchy is invariably bad at managing software projects,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
CodyEngel,1,You just need to go more agile though.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
BradCOnReddit,1,20% success rate seems high to me. In my experience nearly all projects that call themselves agile fail. The ones that actually DO agile are more like an 80% success rate.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
OculusScorpio,1,Agilefall: where micromanagement flourishes and good software dies.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
breadstan,1,Are you me?,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,1,"That’s not agile projects failing. It’s people failing at agile. That’s what the article about, people who aren’t being agile, pretending they’re agile, then blaming agile for their failures.

Agile works awesomely when you actually know how do to it. I’ve been a dev since 2017, I’ve only ever worked in agile, I’ve never had a project fail. Never. Not once. I’ve had to priorities change, had features be deprioritised, but there’s never, ever been a case where any project has “failed”. Absolute worst case, we’ve missed a deadline or had to remove some features, that’s all.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Significant-Hand6250,1,"Wow - didn’t know I was part of an elite 20%. Always been able to find the balance and turned around several agile-fall projects. Even agile infrastructure projects that were very little code. I don’t by into these stats. With the right governance and measures, its successful.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,1,"> I have zero doubt that 80% of agile projects fail.

90% of startups failed, maybe more, maybe less. Most of them used Agile.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,8,100% of startups that failed used keyboards.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,-4,"No, most startups failed because their products weren't market fit, or they ran out of money before even making a single dollar profit.

Keywords:

* MVP, Agile, scrum, growth-hacking, disruptive, and many other startups jargons bullshits I cannot remember.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
aint_exactly_plan_a,1,"Yeah, the Agile principles are solid... they don't need reimagined.  For something like that to work though, management teams have to change... we know that isn't happening so Agile will continue to fail.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
jonhanson,-1,"Every post on Agile invariably leads to comments on how people are doing Agile wrong, followed by comments on what Agile is or isn't. The fact that the Agile seems to have been dreamt up in the absence of any data or evidence, leads one to the impression that Agile is the software development equivalent of Religion. Some people will continue to believe in Agile, meanwhile other people will continue to endlessly debate whose version of Agile is the one true Agile.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
mpyne,6,"> The fact that the Agile seems to have been dreamt up in the absence of any data or evidence

It wasn't. In fact it was the other way around, a bunch of consultants who all had simpler methods they and their customers were successful with, who worked between them to figure out where were the common factors in where success was occurring so they could try to foster those deliberately, rather than by accident.

The result was the Agile Manifesto, which is not an agile method you can 'do' by itself at all.  For those you want to talk about things like Scrum, XP, and so on.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
MaxwellzDaemon,0,Any method that says you don't have to test what you did (no QA) is bound to fail.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
chowderbags,4,"I'd say QA has two very distinct branches, and both are necessary.

1) To the greatest practical extent, automated testing of known or foreseeable problems. If you broke the product, you should be able to figure that out before submitting the changelist.

2) Manual testing that focuses on trying out weird things, reproducing field reports, and just generally being an extra pair of eyes on the product other than the programmer who built the thing and might only think of how the product ""should"" be used. Sure, you can fuzz test some of this and a decent SWE will probably find a lot of potential issues when building, but pobody's nerfect.

Of course, most people don't like 1 because it doesn't feel like you're building an exciting new feature (even though it's the basic foundation that ensures your new features work and will keep working into the future, and not start silently failing from one of the changes in the last 2 months).

2 doesn't necessarily need a full time person per product or per team, but the right sort of person doing QA testing is essential for breaking things in new and interesting ways, and for documenting exactly what steps are necessary for causing the break (and generalizing it if possible).",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Kinglink,3,"Where does Agile say ""no QA"" because if that's the case most Agile is ""done wrong"" 

Agile says YOU should be doing the testing.  The idea is you should be doing the typical ""QA"" work internally.  Not outsourcing it to another team.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
MaxwellzDaemon,0,"So you should test your own stuff which by definition has the defects to which you are blind?

Handing something in without having had it validated by a third party - what could possibly go wrong?",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
redatheist,218,The word “agile” is the only word in the English language that inverts its meaning when you capitalise it.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
revrenlove,59,"The amount of times I've heard ""we're a strict agile shop"" is truly sounding.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
redatheist,19,Yeah exactly. They’re clearly a strict Agile shop.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
jasonjrr,5,😅 “strict” + “agile” that’s… that’s painful!,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
medforddad,5,"Being ""strictly Agile"" just means that they (claim to) adhere to the Agile framework strictly, which allows them to react to changing business needs in an agile way.

Like, I'd say a snake is more agile than some mold. It can react to its environment much more quickly. But its body is also much more structured. Being structured and -- in some places -- rigid and strict, isn't the same as not being agile.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
revrenlove,1,"I just find humor in the juxtaposition... In that ""rigid"" and ""agile"" are quite literally antonyms.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
morpheousmarty,16,"If you don't apply Agile agilely you didn't apply agile. Which is the problem I hear the most. If you're doing something which you know doesn't work, you're not doing agile. An agile team which changes their methodology all the way back to waterfall through retros is more agile than an agile team which does all the scrum ceremonies but doesn't change how they work to suit their needs.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
venuswasaflytrap,3,"Oversight, Overlook, Sanction...",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
kenfar,1,"or when managers say their team is doing ""the agile""",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
0x0ddba11,182,The agile idea failed because it directly goes against corporate nature. You are never going to turn an oil tanker into a jetski. Agile works in small teams and startups without decades of metastasizing corporate overhead.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
hijinked,90,I think agile also works best when the team is experienced.  It takes a good amount of foresight to iteratively add small changes that work toward the end goal in a way that won’t require a lot of refactoring as you go. I think teams that don’t have strong technical leads guiding their roadmap might not be a great fit for the agile process. ,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
jasonjrr,17,"I half agree. The team doesn’t need to be experienced, just open-minded and willing to try. But the leads definitely need to be strong. I’ve been the lead in this situation and our team did a really great job.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
AdSuspicious9654,2,"Being open-minded and growth-oriented -- aka willing to try and being curious -- indeed goes a long way to embracing the agile way of making one's meaning.

You also have to drop the ego and be overly humble. Too often people are certain of their ideas, be it for a feature, a UX, or an architecture. Instead, treat things more like a hypothesis and sneak up on the answer.

Being lazy is another strategy. Think of the least you can do and do even less, and then check with the customer. You can always add more. But you can never undo time wasted on unnecessary work. Not to mention cost of lost opportunity while you were overdoing something.

But apparently, the above approach is really hard for most people in our industry to grasp. Likely because of the predominance of the ""expert"" mindset which is a fairly narrowing one.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
tiajuanat,8,"I think it's natural to refactor as you go. The problem is that we're supposed to track refactor time, and ideally eliminate it, cuz it's not bringing business value.

That's why refactor time needs to be built into every product task. Why is everything taking so long? Oh that new feature requires all new scaffolding, and bringing the old system into the new scaffolding as well.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
liveoneggs,3,an experienced/good team self organizes regardless of the words used,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Venthe,1,"I'd argue in a different direction - you need experience mostly to have 'a spine', to challenge existing notions and not to cave in to (all) business demands.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
4THOT,-1,"The idea that a management system can only work with an experienced team should show you how ass backwards it is. 

An experienced team (as in actually experienced) has a good idea of the shape of problem spaces, some relative understanding of their own competence, and the strengths/weaknesses of their own team.

The idea that such a group should need agile, *AT ALL*, is absurd on its face.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
theavatare,23,"* small teams that have people with conversational skills and can do tradeoffs

I’ve been on the fix size of agile projects where 5 developers that were great in big companies just build a piece without ever talking to each other. Lets just say its not fun",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
temculpaeu,13,"I think it failed because of cargo cult, organizations/managers hears about agile success and want it, but doesnt want to understand why it would work, how to implement it and how to think about it, they just want the success part, so they hire someone that does all the work, and essentially violates all the 4 principles.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
gdvs,2,"Not necessarily.  The agile part is designing the process in such a way, it's capable of handling change.  And that's useful in any organisation. 


But I do agree that there's a lot of dogmatic implementations that assume any preparation, investigation or long term planning is bad.  That's obviously stupid.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
RiverRoll,2,"At my company when a task depends on other departments I'm asked to estimate how long the whole might take before we even talk with them, so somewhere between a day and a year. What's seemingly an hour of work may dilate into weeks, such is the corporate magic. ",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
moratnz,1,"Yep; the essence of agile is to hire smart, competent people, who know how to solve problems, put them in close touch with the people who have the problems, and then get the hell out of their way. 

This requires senior management to trust their coalface staff, and surrender control of what's going on. This is kind of a terrifying ask.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
medforddad,1,"Isn't ""Agile"" a response to the business constantly changing requirements without giving due consideration to what that would actually do development time?

I imagine it more like the business is either an oil tanker or jetski, and the development teams are being pulled along behind them. Small startups might be pivoting constantly, jerking around their dev teams. Agile is a way to tame the interaction between the business side and the development side so requirements are clearer for the dev team and the impacts of various business decisions get pushed back to the business team. If your company is an oil tanker with a clear and unchanging path, maybe Agile doesn't provide much benefit. In that situation, I don't think anyone would expect the dev team using Agile to turn the existing oil tanker company into a jetski company..",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,3,[deleted],2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
medforddad,2,"> Agile was a response for consultants working with their clients, the original signers were all consultants. It wasn't like Agile invented software development, plenty of profitable companies were created before Agile was ever a thing.

I don't think anything I wrote is in opposition to this.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,2,[deleted],2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
medforddad,1,"ah! ha ha, got it. Something about the opening paragraph made me think you were trying to school me on something I wasn't getting right about the situation.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
EaLordoftheDepths,0,Agree but that is what scaled agile is for.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
manystripes,3,"I think more specifically it's that the rest of the business doesn't adhere to agile principles. If the developers are agile but sales and management are still in the mindset of fixed scope, fixed timeline projects, the rigid top-down direction from above will always override the agile process that the development team is desperately trying to adhere to. For agile to work well it needs to be more than a development process, it needs to be a process the whole business is modeled around.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
notbatmanyet,81,"Management often thinks that Agile is about working more efficiently. It's not. It's actually the opposite, you sacrifice efficiency to ensure you are building the right thing.

If all you do is sprints and ceremonies, without frequently validating that you are delivering something that the end user actually needs, you are essentially just cargo culting it.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
jobe_br,11,"Yes and no. Executives jump to the last page of the book and read “avoiding projects that fail to deliver any value” - which plenty of software projects fail to do. In comparison, _anything_ that provides value is more efficient than something that provides none.

The problem is that they want to see the illusion of efficiency while Agile is performed, because that’s what all their Tayloristic management methods expect.

The real underlying problem is a misunderstanding of software development as being a primarily complex problem versus a complicated problem. You can’t deal in the complex domain with methods designed to work in complicated domains. Unfortunately, understanding *that* is anything but simple.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
chowderbags,8,"In some ways, you'd *expect* Agile to have more failed projects. It's just that the projects should fail faster and cheaper, while still in the prototyping/alpha phase.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Feroc,1,"> Management often thinks that Agile is about working more efficiently.

To be honest it's not just management. I met quite some developers who seem to think that it's more important to use their time efficiently instead of validating their own work. 

""If I build something releasable now, then I will have to make changes in the next sprint again."" or ""If we don't add [redundancy, caches, scalability, etc.] now, then we will have to invest more time if we implement it later.""",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Strenue,1,I hate calling them ceremonies - makes it sound religious,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
jobe_br,15,"In a lot of organizations, that’s exactly what it is. Performative, so ceremony is a good name for it.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Strenue,1,Sure. That’s not useful. For it to work we need to get away from Agile theatre…,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
4THOT,1,It's literally [cargo cult](https://en.wikipedia.org/wiki/Cargo_cult).,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Nimweegs,0,Validating what you're delivering is done during the review. If you're skipping scrum events you're not doing scrum. The framework is dead simple.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
notbatmanyet,1,Yet I would say validating against the end user is the most commonly skipped step.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
lood9phee2Ri,37,"To be fair of all the companies purporting to be doing ""Agile"" I've seen, 0% were reading the Agile Manifesto and 100% were the evil agiley-sounding-words-but-really-RUP ""SAFe"" bullshit.  The latter is basically a suit mimetic retaliation against agile.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
thomascgalvin,10,SAFE is Waterfall and the Rational Process in a trenchcoat.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
janyk,2,"The ""S"" stands for ""stacked on top of each other under a trench coat""",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
rashnull,13,Agile was meant to be a proposal for dev and product teams to work better together and be flexible to meet customer needs rather than rigid and fully planned.  As management in big tech I’ve first hand seen Agile implemented as a mini waterfall and a mechanism for holding people accountable for deadlines regardless of the unknowns and complexity involved in building things,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
dustingibson,43,"Agile as stated in the manifesto are all good things albeit very common sense. 

The bungled attempts to implement agile ideas with scrum using counter intuitive practices is what is wrong. Can you look at most scrum processes today and think ""yep this is definitely people over processes."" or ""we sure are adapting to change instead of following a plan.""",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Feroc,1,"Which processes in Scrum do you mean?

I think Scrum is great for more inexperienced teams, it gives them some guard rails where they can move freely in between. I'd say if you simply follow the Scrum guide, you will already cover a lot of the important bases.

The more mature a team is, the more they can (and probably should) adjust what they need. The most issues I see are from people found an issue while working with Scrum and don't recognize that Scrum is only uncovering the issue.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
DigThatData,6,"> ""Why are we back with these giant diagrams or giant processes? Well, because it gives comfort to those middle managers who really don't know what's going on as much as they might think they do.""

I think there's some truth to this, especially in the context of The Agile Industrial Complex, but I think he's also maybe missing the forest for the trees a bit here. Large scale efforts of various kinds clearly gravitate towards these kinds of procedural formalizations. Those middle managers are unfortunately a part of the system that engineers operate within, so our systems need mechanisms and heuristics that people in these roles can understand and use to guide their behavior and make principled decisions.

""Organizational Engineering"" is clearly a tremendously important unsolved problem, and Agile was a step towards solving it. The Agile Manifesto contains a lot of really powerful and useful insights, but operationally: mechanisms will always supercede on good intentions. If you set up a system around good intentions, over time people will add mechanisms to try to keep it ""on the rails"" as edge cases are encountered or participants in the project lose alignment. This is unavoidable. Rather than shaking our fists at it, we need to get better at guiding mechanism construction and upkeep.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
bwainfweeze,3,This is effectively the same thing that Feynman complained about in the Challenger disaster analysis. They love their diagrams because they save them from having to think.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Bananenkot,7,"I work in QA at a 3000 employes company. The introduction of Agile has been a complete shitshow. We can barely work anymore, because not only are there no binding requirements on the software, but noone even has a clue, who's actually in Charge of what. I notice strange bahaviour in a Program, I can't look up if it's intended, I talk to 5 people who tell me to talk to someone else to finally get someone who shrugs and says, it's fine like this. 

10/10 if you don't take your job serious, it's actually pretty funny. My close collegue, who really strives for a good product and his good work is completely losing his mind though. 

Just to be clear, I don't think this is Agiles fault. But 100yr old companies trying to change their structure is a complete shitshow, especially, when people don't really understand what their changing to and why.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
renatoathaydes,2,"That's sad because if things go downhill that's a century-old company gone down the toilet and thousands of people without a job just because they feel desperate to look modern.

Hope they get their shit together.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,15,[deleted],2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
bwainfweeze,7,"""Well -- well look. I already told you: I deal with the god damn customers so the engineers don't have to. I have people skills; I am good at dealing with people. Can't you understand that? What the hell is wrong with you people? """,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
satoshibitchcoin,1,good read. any books going in more detail?,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
matthra,9,"Wow he even used the line ""that's not agile"", like bro really? If I had a dollar for every time someone dropped that line to defend agile from its results I could retire. It's like the no true Scotsman is required knowledge to pass your scrum master cert.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
moratnz,3,"I think this is genuinely a tricky one; no true scotsman is absolutely a problem in something like this. But just as you can point to someone and say 'they were born in France, they grew up in France, they live in France; they're not a scotsman', if someone calls what they're doing 'Agile', but don't follow any of the principles of the Agile Manifesto, is it unreasonable to say 'that's not Agile'?

Because I've seen a lot more agile-in-name-only than stuff-following-the-manifesto in my corporate life.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
bwainfweeze,3,"They thought they had a way to outplay the Taylorists, to bring the craft back into the developers hands. Then Agile became Scrum and the Taylor-lovers won.

It's fair to say this is not what they wanted. So someone who signed the manifesto saying ""that's not agile"" might have something ineffable in mind that they never figured out how to idiot proof.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
cotyhamilton,1,"Both agile and devops conversations always devolve like this. I don’t understand like it’s just semantics or what, but how tf can we ever criticize the modern manifestation of the thing.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Feroc,1,"> It's like the no true Scotsman is required knowledge to pass your scrum master cert.

I mean the Scrum guide is a 13 pages long document that includes everything that is Scrum. Isn't it rather objective if something belongs to Scrum or doesn't belong to Scrum?",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
fordat1,1,Also the “unreasonable” bar they are complaining about agile is the exact same bar the initial pitch for agile claimed to solve. Seems reasonable to hold something to a bar that it set for itself when trying to displace other methods,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Nimweegs,-3,"I don't get it. Scrum is really simple, defined by timeboxed events (planning, daily scrum, review, retro) and a few roles (scrum Master, product owner, developers). If you don't do one or more of the events or roles then it's by definition not scrum.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
shift_devs,3,"Khm khm: The Agile Manifesto has stood the test of time, says its co-author Jon Kern

[https://shiftmag.dev/the-agile-manifesto-jon-kern-1810/](https://shiftmag.dev/the-agile-manifesto-jon-kern-1810/)  


#",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
zippy72,2,"Almost any author is going to say that about their own work, to be fair.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
SurgioClemente,3,"I'm surprised the co-author even bothered to reply.  That ""report"" was extremely light on facts and ended up just being a sales pitch for their own method.

When this report was originally released everyone called out the bullshit.

Not that I'm pro or anti agile, just calling a spade a spade",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
knobbyknee,5,"Managers want predictability and leverage to make developers work overtime when deadlines are not getting met. This is the goal of all successful ""agile"" methodologies. If they didn't promise this to the managers, they wouln't have been introduced anywhere. Scrum is the perfect example.

The Agile Manifesto on the other hand is not a methodology. It is a best practice document for developers to improve the quality of the software they produce and improve the way they are working in the furtherance of that goal. Indeed, it tries to remove the concept of deadlines from the development process. While fully doing so is a utopian dream, having slack in the development process is an important factor for improving quality.

If you use a prescriptive methodology, it will most likely fail. The times it doesn't is when the rules just happen to fit your team and your project. If on the other hand you use the manifesto to guide the evolution of your development practices within the team, agile is very likely to help you become better.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
alerighi,2,"The problem is that managers take what is planned for the sprint as a deadline. So far I've seen agile implemented this way... 

And I've seen companies that don't even know what the agile word means do truly agile, implementing features as required, without a ton of meetings and planning, and releasing into production as they are ready, even multiple times a day.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
bwainfweeze,1,"> And I've seen companies that don't even know what the agile word means do truly agile

It's often better when they let the cooks make the sausage and stop trying to make their own suggestions about the recipe.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
knobbyknee,1,"It is always the cooks that make the sausage, but if the Maitre'd forces them to serve it before it is done, the results suffer. In a restaurant the chefs have a bell, which they ring when the food is ready. The serving staff quicky finish what they are doing and serve the food immediately. All restaurants where you want to eat do this. It is never the manager that decides when the food is done.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
bwainfweeze,2,">  If they didn't promise this to the managers, they wouln't have been introduced anywhere. Scrum is the perfect example.

Agile got brought into places where management was already so off-balance that they were willing to bargain for anything that made the pain stop. Once it became institutionalized, and they figured out where to attach the thumb screws, we went more to what you're describing.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
myhf,1,🎖️,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
emcoffey3,5,"I think the language in the Agile Manifesto leaves a lot to be desired.  That aside, I think the intent was pretty straightforward - strengthen communication with stakeholders, deliver software more often, actually make users happy, etc.  From the places I've worked that claim to be ""agile"", it doesn't feel like those promises have really come to fruition.

In my experience, management seems to think that ""agile"" just means ""fast.""  If we do these things (usually Scrum), we'll get stuff faster.  Great!  So let's go fast - so fast we're writing code before we have finished requirements, let alone a coherent design.  So fast we're not paying attention to technical debt.  So fast we end up falling on our faces.  This isn't ""agile"", it's just ""lightspeed waterfall.""",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
bwainfweeze,1,"They brought together a bunch of people who were peddling their own flavor of lightweight processes, with their own terminology and ceremonies. The manifesto is what they could all agree to, so it's wiggly.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Plank_With_A_Nail_In,40,"If Agile is too difficult for regular people to implement successfully then its a shit idea its that simple. Add it to the pile of the other stupid ideas that assume humans aren't dumb as fuck, greedy and lazy.

""Its not real agile""....lol...""its not real communism""....it can never be real agile.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
morpheousmarty,9,"It can never be the ideal version of agile, but it you can reap most of the benefits without hitting 100% agile perfection. 

Many typical agile ceremonies specifically make it harder to be lazy and dumb. For example story pointing, if you do it right where everyone reveals at the same time, pits a person's urge not to have to explain themselves against learning the story well enough to point it well. 

Then in a retro you can handle any specific needs of your team to keep them sharp, focused and productive.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
larikang,38,"Failure of agile almost always has to do with management not being on board i.e. interfering too much with development.

No development methodology is going to help you in that situation, so it’s not really fair to blame agile in that case.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
temculpaeu,6,"Yes, and agile is not a brand new idea, its based on TPS (Toyota production system), which is the same idea, more bottom-up decision making, and still a lot of manufacture fails to implement it for the same reasons",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
jasonjrr,4,"I would expand on this to say all it takes is one important stakeholder to not do their part (not just management) for agile to fail. This could be anyone from engineering, product, design, whatever as long as they have significant influence.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
mfitzp,4,"> No development methodology is going to help you in that situation, so it’s not really fair to blame agile in that case.

But then is it right to praise Agile for the success in projects that *don’t* have interfering managers?

Perhaps everything is entirely dependent on management style & Agile doesn’t do anything.

Maybe “successfully implementing Agile” is a symptom not a cause.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,0,[deleted],2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
morpheousmarty,2,"I mean that's the main feature. It creates a system where decision-makers can change things as much as they want and the team can adjust, and the team has a solid way to digest the new requirements.

If you're changing things mid sprint a lot no amount of protection will help you, as you should have brought it up in a retro and if you can't solve it probably means it's outside agile's ability to resolve.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
fordat1,-1,But how is it unfair to hold it to that bar when that was part of what it claimed to solve to dislodge previous methods,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
larikang,3,The agile manifesto claims none of those things. It simply states what to value and what principles to follow.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
fordat1,0,It just happened to supplant other methods without claiming to fix any existing issues /s,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,-5,[deleted],2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,1,"What ""checks and balances"" are going to ever work against your boss?",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
notbatmanyet,18,"But there are organizations who have done Agile well, where it works great. So obviously it can be done.

If management doesn't want to work differently, then you won't work differently regardless of what label they use.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Plank_With_A_Nail_In,1,Which organizations and how do you actually know they have done it well?,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Venthe,4,"Agile is a set of principles that worked for experienced people to achieve certain properties. There is nothing magical about it, but failure to repeat the same ideas is not a failure of ideas themselves. They do work, regardless of what you think. They are hard to implement, true, but that has literally nothing on their validity.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
djnattyp,5,"""Agile means stuff I don't like""",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Aetheus,0,"Those same folks are all over this thread. *My* implementation of agile works just fine - it's an everybody-else problem! I think its time we own up to the fact that no methodology actually works 100% of the time, in 100% of teams. 

Pure agile is shit. Pure waterfall is shit. Whatever your team practices are (and however  pleased you personally are with them), they are likely causing someone pain. 

Do whatever it takes to get you to the finish line, with minimal war crimes.  And never assume that what worked for the last project/team will work exactly the same for this project/team.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
djnattyp,18,"WTF is this? The ""enlightened centrism"" of software development?",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Aetheus,-1,"Call it whatever you want. Developers often seem to think that they can tackle management like they tackle programming - like it's a path finding problem, and you can just slap \[insert-algorithm\] on it without modification and hey presto you're done.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
0x0ddba11,9,"> Do whatever it takes to get you to the finish line, with minimal war crimes.  And never assume that what worked for the last project/team will work exactly the same for this project/team.

I don't know, that sounds pretty agile to me.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Aetheus,1,"  ""Let's ditch all the Agile ceremonies and the concept of sprints, and replace it with a day-to-day war council for the next 3 months until we get this critical work out the door""    


""Excellent Agile principle, Bob"".


This just feels like the inverse of ""Everything I don't like is Agile"". ",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,3,"> Do whatever it takes to get you to the finish line, with minimal war crimes

That's pretty much agile in a nutshell.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
piesou,5,">  Do whatever it takes to get you to the finish line, with minimal war crimes.  And never assume that what worked for the last project/team will work exactly the same for this project/team. 

So basically you are advocating for Agile. Because that's it. Literally.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
moratnz,2,"> no methodology actually works 100% of the time, in 100% of teams. 

Fuck yes. 

I'm a big fan of Agile type 'trust the experts to know how to do the thing' work styles, but one of my biggest professional facepalms was watching people try to do a data centre deployment in an Agile manner.  Rapid iteration of design is great when the cost of throwing away a design is, say five staff hours. It's much less great when the cost is 'tear out all the cabling for these 40 racks and run it all again; that'll be ~$50k+ and two weeks calendar time'",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Plank_With_A_Nail_In,1,Pure waterfall works just fine its just slow...so slow that sometimes reality over takes it. But most of the time reality doesn't over take it.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Feroc,1,"As long as we are working with frameworks or methods that need many humans to somehow work together, we will see failure. I mean look at Scrum, the whole guide is 13 pages long, including cover and index. I don't see how it could get any easier.

It just needs one manager somewhere who changes something without understanding the reason behind it and you will have a failed process.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
piesou,2,"If Democracy is too difficult to implement successfully, maybe it's a shit idea. There are companies that use it successfully similarly to how there are countries that are democratic.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Plank_With_A_Nail_In,1,Democracy has been successfully implemented in most countries though. No one can ever list these companies that have introduced agile successfully and provide actual evidence backing up the claim.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
venuswasaflytrap,1,"Honestly it is really simple. The problem is that it's core concept is inherently fighting peoples desires.

It's kinda like saying ""Perpetual motion and free energy is impossible"" - which is a really simple idea, and easy to understand, but then some hopeful person, or a scammer, or a lunatic comes up with some design that superficially looks like it could move forever - and they rope in as many complicated concepts as possible - curved angles, liquids, magnets etc. and then claim it can work, and then when you say ""That won't work"", they insist that you go through all the mechanics of their incredibly complicated design and prove that it won't work. And then when you do, they just add an extra layer of complexity (now it has a gyroscope too!).

Similarly, ""Agile"" is just coming to terms with some truths ""We don't know exactly what we want"", ""What we want might change as we go or as time passes"", ""Therefore, we can't predict how long it will take to finish the whole thing"".

Once you truly internalise that, you realise, you're just making smaller, knowingly incorrect, or incomplete things in short iterations so that you can say ""Is that a little bit closer?"". If you make the iterations small enough they can be pretty predictable and estimate-able/tracklable. And if you come up with some rules across different teams you can coordinate with them in predictable ways. But you have to give up on the perpetual motion idea.

But the people who want perpetual motion and/or well-defined timelines and budget for a non-well defined goal will add all sorts of layers of complexity ""Okay we're doing agile, but what if we have a big waterfall structure around our sprints?"" or ""What if we just count iterations a and say how many will take to accomplish a goal"" or ""what if we track progess, and then use that to extrapolate how long it will take"" - or any number of twisted logic that lets them lie to themselves (or others) to promise that they can get what they want. That's where it gets complicated.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,1,"Or maybe management just doesn't buy in. I'm not gonna say a methodology is shit because shitty management can't do it. If that's your metric, than what methodology will survive management that doesn't buy in?",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Plank_With_A_Nail_In,0,"Management thinks IT is massively underperforming so is willing to try any nonsense to get them moving. IT isn't the only team that works on big projects and none of the others need stupid hand holding like agile to get their projects delivered.

The reality is that these systems exist because those teams have repeatedly failed.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
drmariopepper,15,"Don’t worry though, you can change anything about agile. Only the projects that succeeded were “truly agile”. Everyone else was doing it wrong",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
EliSka93,4,"I don't think that's entirely wrong either. If projects following the guidebook can succeed very well then there is something useful in there. However if most of the projects following the guidebook fail, the guidebook is clearly flawed.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
wobfan_,13,"It's about people who praise Scrum, in my case many consultants who always tell us to use Scrum and that everything else is shit, just frame it that way afterwards. Not even consciously. If your whole career is built on a bunch of overpriced Scrum and Agile certificates, it's not surprising at all to keep defending it by all means. ""If it didn't work out, they used it wrong!!""",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Feroc,1,"> It's about people who praise Scrum, in my case many consultants who always tell us to use Scrum and that everything else is shit, just frame it that way afterwards.

I mean the Scrum guide is a 13 pages long document that includes everything that is Scrum. Isn't it rather objective if something belongs to Scrum or doesn't belong to Scrum?",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,0,"You sound like the person who asked Charles Babbage, ""If you put the wrong figures into the Difference Engine, will you still get the right answer?""",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
drmariopepper,-1,I bet you’re really smart,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
s73v3r,1,"Absolutely. Glad you could see it my way.

For anyone scrolling by, they've edited their original response.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
drmariopepper,-2,🤣,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,13,"Of all those failed projects, I would like to see the % of them who used agile properly. 

Because what’s the point of saying that you use agile and then never fix your development processes? 

It takes a lot more work than just doing some daily meetings… 

This is just my personal opinion, for me agile is good, but we enforce it and iterate over it constantly to make sure it works well.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
pudds,10,"Another interesting data point to compare would be the overall failure rate regardless of methodology.

Making software is hard and many projects are doomed from day 1.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
moratnz,1,"100% agreed. I've been through a restructure that moved us from being an operations team following Prince2 project management to a devops team using agile methodology (at least as per the org / process chart in both cases). Nothing changed about our day to day practices (oh, except we now had more than one team meeting per week, and they were called standups).

It's amazing that simply stating that you're now 'doing Agile' makes no difference to performance.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
WillCode4Cats,2,"Yay! Time for one of my favorite links:

https://github.com/rayfrankenstein/AITOW/blob/master/README.md",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
troxy,2,"I recently did some off site specialty agile training with some people that are not in my organization, and it was quite interesting the stories they were telling about how their jobs are not agile and how so.

It left me with the feeling that my organization was doing quite well.  

I also brought feedback to my org that doing something like a survey ranking strong agree/agree/neutral/disagree/strong disagree going through the individual points of the agile manifesto would be quite telling.  Especially comparing my organization with the others at the training.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
lightninhopkins,2,"The number of people at my work who spend their whole day writing agile reports is ridiculous. What value are these people? I know it's to make erroneous reports for the C-Level, uselessness all the way down.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,2,Most mediocre companies think that agile == excuse to not do automated tests,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
MCShoveled,2,"Look. First I agree that 80% probably do fail. Absolutely 100% of these are caused by the management not being able to deal with agile. 

Being agile means that you have to be flexible. Flexible about what or when you ship product. The reason projects “fail” is that they are inflexible. After all, if their definition of success was flexible, how would or could they fail?",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
griffin1987,3,"IMHO it's not about agile, it's a people problem, and a skill problem. As long as there are incompetent managers that have no clue about development this won't ever change, no matter which system you adapt. Add to that developers with insufficient skill oftentimes that can't really work as a team, overpromising of deadlines, insufficient requirements, ... and all that other stuff, and you got your fail. Doesn't matter which methodology.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,9,"Imagine a programming methodology that needs a dedicated role to make sure it’s “done right”. And then that role just ends up becoming PM. Greeeeat methodology bro.

How about you plan to make something, you make it, deploy it. Wowwwww",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
rabid_briefcase,4,"> Imagine a programming methodology that needs a dedicated role to make sure it’s “done right”

That's not in the Agile Manifesto.

That's in a many systems of what is termed the ""Agile Industrial Complex"".  

And sticking with the Agile Manifesto's first principle, if having one person dedicated to the role works well for the group they should do it, if the process doesn't work well for the group they should do something else.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Deleted Account,1,"Honestly, the big thing modified waterfall has going for it over scrum is that it could be explained to the business and the business could understand it and the tradeoffs that went with it.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
venuswasaflytrap,4,"I don't understand why ""Agile"" get's blamed so much.

Projects with changing and unknown requirements are hard - full stop. And they're basically impossible to schedule or estimate. That's really all there is too it.

One solution is just make a rule up front that says ""We won't deal with changing or unknown requirements"" - which of course hypothetically can work, if you actually have a situation where you can actually gather well-defined and unchanging requirements. 

In practice, in my experience, most of the time, all you're doing is building something at best suboptimal, or at worst useless for the business in a way that covers your ass, because you can blame the business for not knowing exactly what they need.

""Agile"" is really just a word and broad set of strategies to accept the hard truth that often businesses don't know exactly what they need up front and that requirements might change. Obviously that hard truth has lots of knock on effects - namely that things can't be estimated in detail, and that it will be an ongoing process of development. 

Pretty much any ""agile framework"" has these concepts built in by design, and if you try to run a project on the premise that you can have your cake and eat it too then it's obviously not going to work. 

But that's not any particular agile frameworks fault - that's just the nature of a changing project.

i.e. If you took all the projects that have ever been done (agile or otherwise), and measured success by ""Does it help the business as much as promised"" - most projects are gonna be failures. Agile projects are just trying to handle this unfortunate truth.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Strenue,1,"Jon is right. And if he’s not, he’s on the right track.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
baordog,1,He should organize a SCRUM meeting to get to the bottom of this issue. Perhaps the problem lay in the ungroomed backlog of issues with Agile?,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Dreamtrain,1,"ahh yes, the joys of defining processes is watching people absolutely disregard what you outlined and get it wrong",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
robreddity,1,But you're supposed to fail fast.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
bwainfweeze,1,"""Winners never quit. Quitters never win. People who never win and never quit are stupid."" - Demotivational Posters, despair.com",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
stewartm0205,1,Agile can work for small quickly executed projects. I just can’t see it working for large complex projects. Waterfall would be better.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
bwainfweeze,1,They say all successful large projects started as successful small projects.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
stewartm0205,1,Not always. Some did but some evolve from mostly manual systems.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
subLimb,1,Unrelated...What kind of sunglasses are those?,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Colecoman1982,1,"But, you see, those failed Agile projects aren't TRUE ~~scottsmen~~ Agile... /s",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
Odd_Lettuce_7285,1,"Agile is a billion dollar cottage industry. What if historians in the future look back at this time and say decades of innovation and acceleration were lost because we all targeted the roundabout way of doing a project because we needed to hit a sprint commitment vs. doing the right things and then the project fails?

Really hope engineers and business leaders revolt against agile soon.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
bwainfweeze,1,There are a bunch of processes that most of us rarely got to do that have become either de rigeur or up for negotiation in the twenty years since Agile became a term people had heard. Maybe there's an argument to be made that these techniques would have become common anyway? But I don't see it.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
lucidbadger,1,IMHO agile fails because most teams are cargo-culting.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
canadian_Biscuit,1,"Agile isn’t the reason why so many projects fail. It’s just another methodology. Leadership, The company, and the market all have a larger impact on the success or failure of a project",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
tonefart,1,Fr-agile projects are what you get when suits abuse agile methodology to fit their interpretation of it.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
TechFiend72,0,"Agile is frequently used by developers to escape any accountability.

Some pieces like getting customer feedback frequently is good, but frankly we were doing that pre-Agile in the 90s. Some of the pieces of agile are simply practices that we used during the 90s.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
bwainfweeze,2,French toast is almost exactly the same ingredients as bread pudding. They're just put together a different way.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
TechFiend72,0,A lot of the complaints the Agile guys had were largely strawmen as a lot of orgs weren't doing what they were fighting against.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
bastardoperator,-2,"Fuck that, agile is absolute buffoonery. I'm never going to trust the people that unleashed what amounts to a sales pitch for executives...  
  
""What if I told you more meetings and post-it notes could increase the value of your stock 100x?""",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
nimbus57,4,What does what you said have to do with the agile manifesto or agile methodologies in general?,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
bastardoperator,-2,"agile has no methodologies, what are you talking about?",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
st4rdr0id,-7,"Finally.

But how many years did it take for critical voices to appear?",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
withad,17,"If you're talking about voices critical of the whole ""Agile industrial complex"" thing, that happened pretty quickly. Martin Fowler wrote [Agile Imposition](https://martinfowler.com/bliki/AgileImposition.html) in 2006, calling out people misusing the terminology and imposing it on unwilling teams just five years after the original manifesto was published.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
st4rdr0id,-10,"> in 2006

Exactly. It took many years. Scrum appeared in 1995. The Manifesto is from 2001.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
strangescript,-2,I love how a few grumpy old devs got together and bitched about how they were being treated at work and it somehow launched an industry standard that has never really worked well.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
paul_h,0,I'm reminded I must update social media photos of myself - https://cdn.sanity.io/images/w4zc2lav/production/cafdc94bae10c596429e2654a46028a0de349792-800x453.png?w=800&h=453&auto=format,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
morglod,0,"No way that agile is bad

Impossible!!!

Who may thought about it!",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
KrochetyKornatoski,-6,"AGILE is crap!!! ... mostly a disguised method to ensure developers aren't slacking off ... AGILE is crap!!! ... one real issue is most developers would rather implement a poorly tested PROJECT to meet the SPRINT deadline than to standup and say 'NOPE IT'S NOT FULLY TESTED SO I CANNOT DEPLOY TO PROD"" ...Agile is nothing more than warmed over waterfall ... too many STOOPID words and phrases and minutia and administrivia!!!!!!!!!!! (death by paper-cuts!!!!)",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
molecles,1,I think you’re confusing scrum and agile,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
bwainfweeze,1,"Also Sturgeon's Law.

90% of everything is crap, and trying to extrapolate from 'most' of the data is destined to disappoint. There's a reason books cherry-pick their examples. Here are the best examples that support my point, and the worst examples that demonstrate my warnings.",2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
ZukowskiHardware,-1,I’ve never liked agile.  Lean is the way to go.,2024,"Agile Manifesto co-author blasts failure rates report, talks up 'reimagining' project"
nutrecht,160,"The problem is mainly that a lot of company were kinda shitty and thought that implementing agile would make them move efficient. So they hired some consultant and basically smeared a bunch of agile terminology over existing processes, just making them even less efficient.

A LOT of companies work like that, and people working for these companies often don't have experience with agile done right. So they think it's agile that's the problem, while it's really the company. 

In an agile implementation that's done right, there's almost always a big reorg involved with a LOT of lower management getting fired. If a company doesn't go through this, it's almost guaranteed the transition will get stuck somewhere in between.",2021,Why does agile get so much hate?
Zzenux,31,I see! That makes sense. I just remember when I took a class about development methodologies we learned how agile was originally introduced as a way to give developers more freedom to do work without constant  planning and micromanaging so when I read the complaints people have about agile it felt entirely contradictory to the purpose of the methodology,2021,Why does agile get so much hate?
chaos_battery,23,Actually waterfall felt like it provided more freedom because everybody knew what we were going to be doing for the next 6 months or a year. Now it's daily spoon feeding of what I'm going to work on. But even that can be faked with tech jargon speak.,2021,Why does agile get so much hate?
widgetpants,7,"Fully agree that waterfall provides more freedom since the end goal is determined in advance, and that’s what everyone’s working towards. 

What we have found at our company is that the business side kept changing its mind about its priorities. The result was that, by the time waterfall was finished, we had developed something no one needed anymore. 

While agile can look like micro managing if done incorrectly, it has certainly helped us pivot to make sure we are always aligned with business priorities and requirements. 

In cases I’ve seen where agile is done incorrectly, it tends to look like trying to do ALL THE THINGS in less amount of time. :(",2021,Why does agile get so much hate?
chaos_battery,6,"Business people changing their minds is the problem. Despite what innovators may like to spout about business is rapidly changing all the time, it's still people at the end of the day and people are slower to change. How much business value are you really getting by adding tiny little incremental bolt-on pieces to your business process? I remember slack changing there UI slightly recently and people complained their design team must have nothing better to do but they still have to eat so we're going to change things up even though everything is working fine. It's just crazy to me that every other engineering discipline has a rigid process and standards around things but we don't. If a structural engineer is building a bridge we're not going to do agile and start iterating on the bridge and then have a retrospective when part of it falls off and learn how we could do better. The bridges built one time according to structural standards and then people use it. But with software, there is this hidden cost that it's so cheap to change even though you're hiring a army of expensive developers to continually add pieces, modify pieces, remove pieces. At the end of it all, is the business really being pushed forward? Is it really making a dent in the world? For the vast majority of us I would say the answer is no. We are stuck building middle tier line of business applications that have little value and often the direction will change when The product owner role changes hands which is further proof that it's not really adding value to the business if it just changes with someone else's perspective rather than moving towards a collective mission which should be the guiding principle beyond someone heating a seat and telling us what to build.",2021,Why does agile get so much hate?
TheBeardofGilgamesh,10,"At my company I joined a new team where I was the only developer and I just worked in a waterfall fashion. But after new team members joined the team, we switched to a more traditional agile approach and what used to take a week now takes a month with many devs. With agile every single little task is broken down into arbitrary tasks, so much time is wasted on pointless meetings and “process”, I end up losing any motivation to do work and now spend most of my time reading news. But with agile it’s ok to take a month to do what used to be something that could be done in a few days since the Scrum Master likes it that way!",2021,Why does agile get so much hate?
shagieIsMe,1,">  I was the only developer and I just worked in a waterfall fashion

You were a cowboy coder near a waterfall.

https://en.wikipedia.org/wiki/Cowboy_coding

Quite frankly, cowboy coding is one of the most developer efficient forms of coding methodologies... ***However*** it is also one of the most unpredictable and you have difficulty when you've got two cowboy coders on the same tasks in the same codebase.  

Agile (and business) often want predictable things.  They want to know when *this* feature will be available and how long (a day? a week? a month?) will it take to get features A, B and C?  When is the next release?

The disadvantage of cowboy coding is that there is little or no accountability of the developer to anyone.  The ""I'm stuck and I'm working on this... for a month"" rather than the ""this task is taking too long, what features do we have depending on it?"" along with the downstream repercussions.",2021,Why does agile get so much hate?
nutrecht,15,"That happens a lot. Any company that does not [adhere to the principles](https://agilemanifesto.org/principles.html) of agile is not agile. 

You should follow [Allen Holub](https://twitter.com/allenholub/) on Twitter, he loves to rant against non-agile 'Agile' companies. SAFe especially is horrible.",2021,Why does agile get so much hate?
Deleted Account,10,"SAFe is a trainwreck. 2-3 full day planning meetings to kick off every iteration, then another 2 half days of meetings at the end and beginning of every sprint. I mostly like my job despite low pay, but every time we have one of our big bullshit planning/retro meetings I consider leaving. Long meetings wear me out way more than coding or anything else does & I feel like 1 hour of meetings is as exhausting 2-3 of actual work. Those full day planning meetings derail my whole week because I just can't stomach doing anything else.

My workplace pays for SAFe certification and I laughed at my manager when he asked if I wanted to take the course and go for it on the company dime.",2021,Why does agile get so much hate?
DerArzt01,11,SAFe can go die in a fire. Yes let's be so agile that we plan out the next year and break it down into 10 sprints. Oh but you will get the last sprint for innovation they say...HA,2021,Why does agile get so much hate?
UnicornPrince4U,2,"Allen takes a no true Scotsman approach to every conversation though. He preaches empathy though he seems to be so overcome by a persistent rage that he isn't capable of it himself. If you disagree with him on the color of paperclips you personally prefer, then you're a command-and-control despot who doesn't see his co-workers as human beings, just resources.",2021,Why does agile get so much hate?
nutrecht,3,Allen basically paints an ideal picture and oversimplifies a lot in his tweets. I do disagree with a lot he says because he is very black snd white. That said; he’s right on a lot of the important stuff.,2021,Why does agile get so much hate?
UnicornPrince4U,1,"I too agree with a lot of what he says, but he goes after people over things in a way that makes me worry for him.",2021,Why does agile get so much hate?
UnicornPrince4U,1,"Exactly, now imagine what happens when the executives want that extra productivity so they pressure middle management to ""go Agile"" and the middle management is too insecure to actually give up control.",2021,Why does agile get so much hate?
Deleted Account,1,Something that’s also not often mentioned but agile can lead to some serious scope creep if not kept in check. My team has lost many hours refactoring because all of a sudden the business wants core functionality to behave differently that on the business side doesn’t seem like a big deal but means a lot of work on the code side. To be fair a lot of this is my teams fault for writing  shitty code but none the less is still a big hurdle.,2021,Why does agile get so much hate?
zninjamonkey,6,How does it look like when it is done right? To a software engineer ? Not the company.,2021,Why does agile get so much hate?
Deleted Account,11,"The biggest difference I noticed going from ""agile"" to agile is that day to day decisions are made by the people who have to do the work.  Product owners and management are heavily involved in those decisions in the sense that they create the stories and they provide feedback to the the dev team on how well the dev team's work is aligning with the goals set out by your company or division leaders, but the development team is the one that actually makes the decision of what to work on and how to do it.",2021,Why does agile get so much hate?
delphinius81,5,Stories need a definition of done / clear exit criteria though so that the dev team works on things in an acceptable manner. Otherwise user stories are just another term for undefined requirements.,2021,Why does agile get so much hate?
SomeGuyInSanJoseCa,18,"Non-agile is based on the principal of a defined set of features/enhancements.projects and work towards getting there at a deadline.  And if you can't complete it by the deadline, you either add more people, make them work harder (e.g. crunch time), or move the deadline.

Agile is basically the opposite, deadlines are set in advance, people are more or less working at an even pace, and you just ship what you have on deadline.  If something is not done, you don't work overtime, you don't delay the release, you just don't release that feature/bug fix at that time.",2021,Why does agile get so much hate?
ThickyJames,3,"This exists in a vanishingly small fraction of the world that isn't between the covers of *The Agile Manifesto*.

Both human nature and the logic of business militate against this being successfully and durably implemented. It's fighting the Utopian battle on the ground of engineering.",2021,Why does agile get so much hate?
TheBeardofGilgamesh,1,"Anything that has a “Manifesto” is just stupid and leads to bad decisions and failure. Whether it’s clean code, agile, TDD anything that presents itself in a domatic cult like fashion leads to people doing things that are stupid and wrong just because “that’s what the ideology commands”, it turns people’s brains off. 

Stupid things can be like, not leaving comments on something extremely specific and counter intuitive that could never be described in the naming of a method(clean code). Spending half the work week in meetings and writing tickets for each part of the work needed to be done based off of only guesses that are probably wrong wasting time that could be for actual development spent in meetings that do nothing but waste time and allow developers to make up excuses to waste time and lose any motivation (agile).

Listen you know who had manifestos? Mao, Stalin, and Timmothy Mcveigh that’s who!",2021,Why does agile get so much hate?
Nonethewiserer,3,But I thought Mao and Stalin were heroes.,2021,Why does agile get so much hate?
CarlGustav2,5,"Well, Mao's face is on every denomination of Chinese currency, so he must be hero!

/s",2021,Why does agile get so much hate?
Ryotian,7,"Good- Too me the sprints are short (2 weeks or maybe 3 weeks at the longest) so this way you can schedule your vacations reasonably. You have periodic groomings and retros. Can pivot to get new features added. There's slack left at end of sprint for random things

Bad Agile- there is no retro so bad feeling keep building up til you overflow. You cannot iterate on the product. Jira is not fully utilized so you end up waterfalling (perfect documentation upfront) and everything set in stone before the dev gets started. Cant pivot during the project. Cant take vacation due to constant fires. No time to do random cleanup as you keep adding on more tech debt

I try to smell out badly organized companies during interviews and have had to recently run away from one company cause they all seemed like firefighters. I enjoy some firefighting but too much and you're crunching and unable to schedule new exciting features. Sadly, I couldnt really figure this out til I was able to talk to the actual developers. Hard to get a good sense when talking to the recruiter (for me)",2021,Why does agile get so much hate?
midfield99,4,"I have some experience with SAFe, I'm not a fan. I'd say a red flag for me is when the team doesn't have control over their processes. The best case is when the team has the autonomy to change, add, or even stop doing agile events. I'm also not a huge fan of full-time scrum masters, especially if they are contractors.",2021,Why does agile get so much hate?
Ujili,5,"Sounds a lot like Common Core.

CC, at it's core (excuse the wording) is a great idea - a common set of educational goals and learning standards for all districts across the US that adapted it. It would've been especially helpful for students that move states during High School.

Instead, it was implemented in a way to intentionally fail, and one particular math lesson was (misrepresented and) held up as an example of why it won't work. Now most of America decries it, despite being highly beneficial to students, because of how it was implemented in a few places.",2021,Why does agile get so much hate?
Nonethewiserer,2,"
>In an agile implementation that's done right, there's almost always a big reorg involved with a LOT of lower management getting fired. If a company doesn't go through this, it's almost guaranteed the transition will get stuck somewhere in between.

What transition? You're saying firing people like this is part of agile? Interesting,  havent heard this before.",2021,Why does agile get so much hate?
nutrecht,1,"Any large shift in an org will often mean there is no room for people not supportive of this shift. Agile means there really isn’t room for ‘project managers’ for example. And making teams more self-managing means you need to get rid of a lot of lower management. 

If you keep them on, they will simply continue to ‘manage’. 

Keep in mind that roles disappearing doesn’t mean you always have to fire these people. Often these people can apply to roles in the new structure.",2021,Why does agile get so much hate?
fried_green_baloney,80,"If standup is ten minutes that is a good sign.

All too often they are hour long gab fests where you must justify why you're a day late on ticket 4371.

That's micromanagement instead.",2021,Why does agile get so much hate?
meme_botanist,63,Standup meeting aka each team member has to prove others that they worked yesterday. Silly.,2021,Why does agile get so much hate?
Deleted Account,24,[deleted],2021,Why does agile get so much hate?
Deleted Account,18,If that's happened to you I feel sorry for you. It shouldn't be like that and success is determined by a team effort not individual effort,2021,Why does agile get so much hate?
Deleted Account,12,[deleted],2021,Why does agile get so much hate?
Deleted Account,8,"You shouldn't have to feel like that, if you do you should speak to your manager to ensure you are all on the same page.",2021,Why does agile get so much hate?
Deleted Account,3,[deleted],2021,Why does agile get so much hate?
Deleted Account,4,"No worries, just so long as you know you should be able to feel comfortable in your job. I hope things start to improve for you",2021,Why does agile get so much hate?
fried_green_baloney,1,But it is 90% of the time.,2021,Why does agile get so much hate?
Deleted Account,2,"I mean the last 2 places I have worked at including my current one, there's none of that, we either fail or succeed together. It's not about who does the most tickets",2021,Why does agile get so much hate?
fangbuster22,10,"One thing I realized is that as much as I think my manager is a cool guy, the standup meetings without him were 50x more chill lol.",2021,Why does agile get so much hate?
Deleted Account,2,"Sometimes it can involve some worthy discussion or notes. Like why my work is blocked and can’t proceed. And then they gets taken care of immediately after the meeting sometime in the day. 

I always give short updates anyway. Some people talk too much.",2021,Why does agile get so much hate?
flamecrow,2,100%,2021,Why does agile get so much hate?
mgbello,16,"An hour standup!

I have a 6 person squad and have one foot out the door by minute 8.",2021,Why does agile get so much hate?
fried_green_baloney,16,"The standup tended to deteriorate into a design session and/or exchange of dominance gestures between the more self-important members of the team.

The design session was useful, just not for everyone present, and had no business being in the standup.",2021,Why does agile get so much hate?
mgbello,3,This is the plot of a horror movie?,2021,Why does agile get so much hate?
fried_green_baloney,3,"It often felt that way.

Only thing worse was the 90 minute ~~after~~ [EDIT: afternoon] rant by the boss.  At that job I was rescued when it was decided that my project wasn't really part of what was being discussed at the ""standup"".",2021,Why does agile get so much hate?
csasker,4,"I just leave after 15 mins unless something super rare and special, then people will adapt",2021,Why does agile get so much hate?
rkozik89,22,"Every implementation of agile I've ever seen ends up with engineers only being assigned tasks they can hammer out quickly, and anytime anything complex comes up it get shoved to the back of the pile. So if the organization does not support further education i.e. sending folks to conferences, paying for classes, tutorials, etc. your engineers tend to stagnate and unable to innovate.

I've worked on teams where the crew could hammer out iterative updates to the apps like nobody's business, but when it came time to split up the monolith and scale up they were like fish out of water. Because they were never given the time they didn't know anything about system resource consumption, how their language consumed resources, how to leverage async programming, implementing caching, etc. So as the framework aged and they were able to deliver on fewer and fewer features the product just kind of died on the vine and got replaced with a CMS. Which solves their lack of features problem, but not the issue of how to make it work at scale.

In short, if agile isn't paired with strong support for continued education it will lead your engineer department into brick walls and bad decisions. Cause going back to that CMS example, they don't know they have a data scalability problem, so they're likely to just shove everyone onto one instance until it starts to break. Whereas had they have known that they would've given each Diocese it's own an instance or two and then you wouldn't have to re-engineer anything, potentially.",2021,Why does agile get so much hate?
Deleted Account,2,[deleted],2021,Why does agile get so much hate?
BmoreDude92,5,Just experience. You really talk to seniors and learn how they make the decisions.,2021,Why does agile get so much hate?
JavaVsJavaScript,37,"""Agile"" is all over the place in terms of experience. My job is the 10 minutes of standup and then nothing else. I am happy with that. 

Agile starts to suck the more concepts like retrospectives and especially velocity are added. As soon as management starts tracking velocity, they basically have turned the company into a feature mill where you are pressured to constantly do more work.",2021,Why does agile get so much hate?
HarmonicDeviant,14,Totally agree with you on how often 'velocity' metrics get misused.... but what harm do you see coming out of team retrospectives? Regular self-inspection and adaptation is central to agile philosophy.,2021,Why does agile get so much hate?
JavaVsJavaScript,5,"> Regular self-inspection and adaptation

I like the concept, but I find that problems tend to just get identified with blame assigned, so there is no real adaptation part. I am sure other companies do it better than mine have, but too frequently they seem like the dev team is on trial by the managers during them.",2021,Why does agile get so much hate?
HarmonicDeviant,6,">the dev team is on trial by the managers during them.

...well there you go! No self-respecting scrum master would let managers anywhere near a **team** retrospective for exactly this reason.

I'd feel the same way if I was in your shoes. There are companies out there that do it better :-)",2021,Why does agile get so much hate?
imzacm123,4,"That would have been difficult in one of my previous jobs, the company (a huge, global one) decided it was a great idea (cost effective) to teach managers how to be scrum masters",2021,Why does agile get so much hate?
delphinius81,3,"Mgmt should not be a part of retrospectives. That's a meeting internal to the dev team. Mgmt gets invites to sprint demos, and that's it.",2021,Why does agile get so much hate?
Deleted Account,13,[deleted],2021,Why does agile get so much hate?
Deleted Account,5,Everything is a 13 or 21 point story then!,2021,Why does agile get so much hate?
Deleted Account,1,"Haha this happened at my last company. We started doing ""agile"" and the management was so happy that after we had some consultants speak with us for a couple days we'd have the ability to accurately estimate the size of any project before requirements gathering. Sure enough, our first few sprint estimates were off and the management began an investigation into why productivity was so low and how it could be remedied.  From that point on, every story was sized at at least 13 points.",2021,Why does agile get so much hate?
Deleted Account,1,[deleted],2021,Why does agile get so much hate?
Deleted Account,1,Lol that's when I'd stop doing good work and get just paid to update my resume and interview elsewhere,2021,Why does agile get so much hate?
Deleted Account,2,Ffs,2021,Why does agile get so much hate?
clownpirate,12,"agility is fine.

""A""gile with a capital-A is not agile and deserves all the hate. It is a middle-manager makework construct.",2021,Why does agile get so much hate?
gyroda,11,"There's a joke that Agile adherents will always say ""that's not real agile"" in response to any criticisms of agile.

There's a lot of cargo cult-ish following of procedures when it comes to people implementing agile. It's useful to separate out agile from scrum and other practices.

But in reality, it feels like most people's frustrations come from management or poor culture and I imagine these places would be a PITA to work in even if they didn't use agile. If your stand ups are taking up an hour every day and are painful to sit through, I imagine you'd have the same status check meetings or micromanagement even if you didn't call it a stand up.",2021,Why does agile get so much hate?
extrasponeshot,8,"Because it's a buzz word and it's generally not done correctly. When I first joined my company, they payed me to take an agile like course and get a certification. So I came in with the expectation that we would use it to the full extent. In reality, my company we only really practice Agile half correct. We selectively only use parts of it. There is no real consistent enforcement on roadmaps, planning, or retrospectives but we are expected to create user stories and meet sprint deadlines. 

After working here for about 2 years, Agile at my company just seems like an excuse to say ""we can pivot quickly cause we take things sprint by sprint. We have no real planning but still call ourselves agile cause we have user stories :)""",2021,Why does agile get so much hate?
shagieIsMe,21,"My highly opinionated take...

Agile was in part created by a bunch of contractors who figured out a process to be able to say ""yes, we'll do that"" to everything the business asks for and increase billable hours.

You want us to do X?  Ok, put it in the backlog.  What do you want us to work on next?

Since no project is ever 100% complete, this allowed for, well, basically unlimited billable hours (until budgets run out).

Its not a *bad* thing, just that doing agile allows for a fickle business to drain its budget faster than a ""we planned this all out, this is what we're delivering in 6 months"" (with the noted bit that rarely is everything delivered in six months and the resulting code is a mess).

Again, this isn't a bad thing.  For regular employees, it's a mixed bag.  Part of it is a ""yes, the project is never done"", but then it is never done anyways.  One advantage of this is that it gets the business on the hook for actually defining what they want (rather than the six months later you give them something and they say ""oh, no not like that..."").

The other part of agile getting so much flack is that while the agile manifesto ( https://agilemanifesto.org ) is great in ideals... its really short on implementation.  In many organizations, its a ""we do agile"" but when you find out what they've got its https://www.halfarsedagilemanifesto.org instead.

The other part with agile is that many developers use it as an excuse to not plan for the future.  It's done, move on to the next thing and forget about it.  Lots of ugly code that can't be fixed is left and the poor souls that have to clean up after the ""agile programmers"" start pulling it apart.  Sure, its ""tested""... but it isn't really.  Agile from the developer side is often used as an excuse to not clean up after yourself.  ""YAGNI LOL""

I personally like the software craftsmanship addendum to agile: https://manifesto.softwarecraftsmanship.org",2021,Why does agile get so much hate?
HarmonicDeviant,8,">Agile was in part created by a bunch of contractors who figured out a process to be able to say ""yes, we'll do that"" to everything the business asks for and increase billable hours.

This is a funny thought... but seriously, 'agile' wasn't driven by a collective of nefarious contractors scheming to milk their clients dry.

&#x200B;

>Since no project is ever 100% complete, this allowed for, well, basically unlimited billable hours (until budgets run out).

Eh, *products* have the potential for unlimited iterations. *Projects* can (and should) still exist in a healthy agile organization. Agile or not, projects are defined by scope, budget, and timeline. A key difference between traditional waterfall and healthy agile is in how projects are leveraged as a planning tool.

In waterfall organizations, projects have this nasty way of becoming the primary focus for success metrics. Any significant deviations from the ""planned"" project parameters of scope, budget, or timeline are generally seen as failure. They are avoided.

In healthy agile organizations, teams are aligned to the product vision and committed to maximizing *value* delivered. Success metrics are *outcomes* (e.g. improve CSAT by 15%) rather than *outputs* (e.g. deliver 17 story points). Projects still exist, but their parameters of scope, budget, and timeline are expected to change as more is learned and complexity is reduced.  


>The other part with agile is that many developers use it as an excuse to not plan for the future.

Your observation is correct... and this is a huge peeve of mine. This sentiment that ""agile is an excuse not to plan"". Done right, agile teams will do as much (if not *more*) planning than in traditional waterfall. The difference is in *when* that planning happens--and how much of that planning effort is ultimately wasted. Just-in-time (JIT) planning and carefully avoiding expensive commitments until the last responsible moment (LRM) mitigates waste in the form of transport (i.e. moving between phases; handoffs) and overprocessing (i.e. unnecessary meetings; work that doesn't add value).",2021,Why does agile get so much hate?
shagieIsMe,5,"Its not a nefarious ""milk them dry"" (though I'm sure there are such consultancies out there now).  Rather likely more of an exasperation with the business changing their minds during requirements gathering.

""Lets building them something that they want *now* and has value for them and then figure out what they want *next*.""

It was a refutation of Big Design Up Front ( https://wiki.c2.com/?BigDesignUpFront - which, incidentally was written by those early practitioners).

> In waterfall organizations, projects have this nasty way of becoming the primary focus for success metrics. Any significant deviations from the ""planned"" project parameters of scope, budget, or timeline are generally seen as failure. They are avoided.

Oh yea... ""deviation reports"" were a thing in one project I worked in.  That... wasn't fun.

> In healthy agile organizations, teams are aligned to the product vision and committed to maximizing value delivered. Success metrics are outcomes (e.g. improve CSAT by 15%) rather than outputs (e.g. deliver 17 story points). Projects still exist, but their parameters of scope, budget, and timeline are expected to change as more is learned and complexity is reduced.

This requires that the business have their measurements.  That is a hard thing.

I would be willing to contend that *all* the problems that people experience with agile are from people not being mature.  The business wants something, but they don't know what and they haven't measured what they think they want at all.  Developers bouncing from one task to the next without care for the code that has been written because they're chasing story points and velocity measurements.

I'd also be willing to contend that much of this is a *resistance* to maturing.  Its so easy to push the problems to some other group.

Agile Done Right is (IMHO) about an organization growing up to accept responsibility for what they produce.  This is both on developers (to produce good code in a timely manner) and also the business to take responsibility for what they want and help guide the developers.  There are *so many* cases where some part of the organization abdicates from their responsibility in the overall Agile process and it all goes to crap (while still proclaiming that they do Agile).",2021,Why does agile get so much hate?
HarmonicDeviant,3,">This requires that the business have their measurements.  That is a hard thing.

Or worse.... to wrap ourselves in the nice warm blanket that is the illusion of control, we latch onto useless vanity metrics that are easier to collect (like velocity points) instead of customer-focused/value-focused metrics that take a bit more effort.  


You've really hit the nail on the head here! The best culture I ever worked in, individuals and teams would practically trip over themselves trying to take the *blame* when something went wrong.

When there are problems in the culture, I'd say the driving force of this 'resistance to mature' is *fear*. Individuals are less inclined to take responsibility if they're afraid of losing their job, bonus, whatever. [Trust is at the very core.](https://youtu.be/GUNygKcTuoo)",2021,Why does agile get so much hate?
Deleted Account,8,"I was never a fan because I like to manage my own time instead of being micro-managed on a week-by-week basis. Daily standups are pointless, especially when the whole team is in a Slack channel chatting all day.

I understand there are some environments and projects where it's very successful, but I've never been a part of one. It always ends up adding a lot of burdens without improving anything about our process or the success of the project.",2021,Why does agile get so much hate?
MinuteOk47788,-1,I think Agile would work when you have mediocre workers who need to be micromanaged.,2021,Why does agile get so much hate?
lilfrenfren,1,I'm mediocre at best and I don't see how being micromanaged could improve my performance.,2021,Why does agile get so much hate?
TopOfTheMorning2Ya,1,Most of the people on my team are mediocre and it hasn’t helped. It only excessively pisses me off as the product expert and makes me not care as much. It effectively is slowly making me mediocre also.,2021,Why does agile get so much hate?
MinuteOk47788,1,By mediocre I mean slackers. Daily standup brings transparency to mediocre output. It becomes obvious after couple of sprints who is producing at what output.  So it becomes harder to avoid mediocre performance. I have seen former slackers on verge of tears on joining Agile.,2021,Why does agile get so much hate?
chaos_battery,3,Where this falls apart is when the slacker knows how to speak technical jargon and if you go into just a little bit of detail on each of your tasks it sounds like there's some meat to each of them and people start zoning out and thinking okay yeah yeah he's working on stuff great. That game can be doctored too just like everything else in life.,2021,Why does agile get so much hate?
MinuteOk47788,2,"Sure it could be for few more sprints and the newbies would be more accepting. However, the experienced devs would know the junior dev is talking shit even though he keeps his mouth shut. For example, why should a simple bug need 6
working days to fix.",2021,Why does agile get so much hate?
chaos_battery,2,Fair enough. Although another phenomenon in agile that's strange to me is we want to get everybody on the same page and have everybody be aware of what everyone else on the team is working on in more level of detail than I thought was necessary. It's great to have a high level overview of the direction different parts of the team are going down but I don't really care and I don't plan to waste my headspace trying to get into the weeds of every possible thing we're going to work on this sprint if I'm not going to be touching it.,2021,Why does agile get so much hate?
Deleted Account,1,You can make up whatever you want in a daily scrum,2021,Why does agile get so much hate?
Deleted Account,1,Hard disagree.,2021,Why does agile get so much hate?
gunpun33,5,The only way agile became the norm is because it allowed management to check what you have been doing every day and they love that. I have written some papers of agile and its been turned into something it wasnt supposed to be a LOT of places.,2021,Why does agile get so much hate?
ThickyJames,5,"**Agile, as it exists in the real world, is usually weaponized micromanagement.**

In the typical corporate agile or scrum implementation, this is complete with managers in standups, so an engineer is spending 15 minutes figuring out what to say to sound like he's done more work than the other guys in a standup that becomes a sitdown team meeting.

Combine this with retrospectives that turn into a conflation of CYA and finger-pointing. This isn't because of a toxic culture, it's because human beings aren't angels, and the retrospective is a ceremony that makes it easy for the worse angels of our nature to show themselves.

Combine this with user stories which are just poorly-defined requirements gathered and written without the skillset of a business analyst or a product owner who can double as one.

Combine this with scrum masters who are either incompetent, ineffective and overpaid drags on the organization in the mold of a team-shared admin assistant, or rehabbed project managers who aren't necessarily great project managers.

Combine this with a shitshow of coding practices, ignored architecture, requirements misses, and the fact that the completed agile product or feature takes more man-hours of work to pass user acceptance testing than the same effort engineered in spiral or traditional waterfall, and you have a lose-lose-lose-win situation, with employees, the company, and the customer losing and the micromanager winning. 

Don't even get me started on SAFe.

The only good parts of agile are kanban boards - wait, that's not agile - and Confluence.

Agile and scrum might be implemented in some environments in a way that boosts productivity without sapping morale and setting people one against the other, but I've not been in one of them.

In 2021, I finally achieved directorship, which includes a wide mandate for personnel in my org. I work in fintech. I did two things in my first week:

1. I made it possible for any senior engineer to get 15 minutes on my calendar within 10 business days, which turned out to be a mistake as I learned why upper-middle management have assistants to gatekeep.


2. I instituted complete anarchy by making scrum and its ceremonies optional for teams who want to try a different methodology. The process for a team to decide won't be laid out here, but within four weeks - take into account sheer organizational inertia and the devil you know -  almost *forty percent* of my teams had cast their vote to abandon at least the standup and sprint review. Almost *twenty-five percent* of my teams decided to abandon *all* scrum. Of the roughly fifteen percent difference, most kept sprint planning. Twelve weeks later, a supermajority of teams had abandoned at least two scrum ceremonies. 

Even in the chaos, productivity didn't drop a bit at its worst, and climbed by mid-single digits in most metrics within three months. This has led to some difficult decisions regarding the number of people in agile-specific roles, so it's not all roses.",2021,Why does agile get so much hate?
Lunabotics,2,"In my experience Agile can be a substitute for proper planning. 

To use a driving analogy sometimes you hit a red light, you have to wait a bit for things to happen. Agile more like red light, turn right just keep moving, even if sometimes it's not in the direction you intended to go.

That's obviously in a poorly managed business.

In a properly managed business Agile is wonderful and a great way to eat a whale to to speak. You part it out small pieces at a time and you never feel overwhelmed because you're only looking 2 weeks out - as a developer. As long as someone else is making sure you keep going in the right direction it lets you work and stay focused and feel accomplished without the mind numbing reality that you have 3 years of work directly assigned to you.

IMO anyway as someone who's been everything from CTO to low level support and full stack, etc.",2021,Why does agile get so much hate?
Gyuudon,2,"You're lucky that your standups take 10 minutes a day.

Mine usually take almost a hour, sometimes even more because my PM almost always turns it into a status meeting.",2021,Why does agile get so much hate?
MinuteOk47788,3,What can you accomplish in 1 day that needs 1 hour meeting. Effectively there are 5-6 hours in a work-day.,2021,Why does agile get so much hate?
Deleted Account,2,Agile is fine if done properly and managed by non-idiots.,2021,Why does agile get so much hate?
chocotaco1981,2,because it got/gets a lot of hype and was so badly implemented in practice in so many companies,2021,Why does agile get so much hate?
darexinfinity,2,"The best software methodology is the one that's custom fitted into your team/org/company. There are several factors that come into play when deciding this. Ignoring these factors and deciding on ""Agile"" is just begging for a bad time.",2021,Why does agile get so much hate?
Dml33,1,"The problem is most orgs are copycats.
Competitor A is doing it so we should do the same.",2021,Why does agile get so much hate?
darexinfinity,1,Pretty much :/,2021,Why does agile get so much hate?
voiderest,1,"Agile concepts are often used or misused without much thought. The whole company and client also needs to get on board and it might not scale well to larger teams.

Something a lot of people say is that agile is good when implemented right but then no one can do it right. So either agile has some issues or implementing it tends to have issues.

Also it's kind of a racket for consultants come in an teach everyone agile. Then there are issues with people outside of development or PMs not buying in and wanting to work like they always have so processes have trouble meshing.",2021,Why does agile get so much hate?
MinuteOk47788,1,Yes old school management embraces Agile as a framework but not as a principle.,2021,Why does agile get so much hate?
Deleted Account,1,I work for a company that actually does Agile. No hate. Done right it's great.,2021,Why does agile get so much hate?
nrd170,1,We have a guy teaching agile at our company and he has no clue what it actually is. He didn’t even know about story pointing and he’s freaking teaching it lol,2021,Why does agile get so much hate?
mgbello,1,"I hated agile because it was new to me.   A few years later,, Grateful my org/leadership does it decently well and very few people with any power are bad at it. 

I enjoy it because i find it puts a reasonable deadline to work that can feel like an endless week.",2021,Why does agile get so much hate?
Dml33,1,"It's poorly implemented in 95% of jobs and turns into a great time waster
 Meetings on top of meetings just to hold another meeting. That time could be used as development time",2021,Why does agile get so much hate?
chaos_battery,1,I got so jaded from all of the stupid process that I eventually just had to keep reminding myself I'm getting paid no matter how much this company wastes time and resources. Still doesn't make you feel great though.,2021,Why does agile get so much hate?
Deleted Account,1,I’ve had good experiences with Agile. Remember the people with bad experiences tend to be the loudest.,2021,Why does agile get so much hate?
mathmanmathman,1,"If there is a thing you have to take part in, a decently large portion of the population will start to hate it.

If that thing has a name, then people will learn to hate anything associated to that name whether or not it actually resembles the thing they originally hated.",2021,Why does agile get so much hate?
CrackedRose99,1,I can remember when the management brought in a consultant on agile and spend a week learning from him. After he was gone they had another week of meetings  in which they decided how it would be implemented. They finally called a division wide meeting and with smiles on their faces announced a whole slew of red tape they proclaimed would make us agile. It was like a cross between The Twilight Zone and Hee Haw.,2021,Why does agile get so much hate?
CallinCthulhu,1,"Because 95 times out of 100 it isn’t done right.

I.e my company stuck an agile sticker on waterfall and called it done. Everything is exactly the same as it was except now we break work into 2 week chunks and have daily status reports.

Thankfully the manager is hands off, so it’s not painful, we just carry on like we used to because there isn’t much we can do to transition to real agile when our entire release cycle and design process is so anti-agile.",2021,Why does agile get so much hate?
sabreR7,1,The problem is that for incompetent managers agile directly translates to micromanage.,2021,Why does agile get so much hate?
Shoreliner2014,1,It’s a necessary evil given speed is the new growth.,2021,Why does agile get so much hate?
chaos_battery,1,"Speed with no time to develop anything beyond what can fit inside of a ticket. That sure does wonders for innovation. Rather than treating development like a creative profession where you are likely to not see the same exact problem in the same implementation of code every time, that doesn't matter. Businesses want predictability. I was n't at an all-staff meeting once and they announced a new innovation team and they stood up at the podium and asked everyone to submit their ideas to this SharePoint website by a certain date because you know innovation has a due date. Then they would take the best ideas and go off and implement them. I'm thinking to myself let me get this straight - you want me to give you great ideas and then you're going to go off and implement them and take all of the credit? Right I'm sure everybody will get right on that. Not that I had anything amazing or worth a patent but I'm sure as hell not going to share it unless I get something extra for it.

I do commend these companies that can get away with just giving their employees a little clipart award printed out on a piece of paper rather than a big raise or a fat bonus for saving the company tens of thousands of dollars a year potentially with a solution.",2021,Why does agile get so much hate?
col-summers,1,"Agile (I thought) was supposed to be an interface that autonomous engineering teams present to their stakeholders in the spirit of transparency and cooperation. Instead, it's become a tool of control and avoiding responsibility.",2021,Why does agile get so much hate?
uski,1,"Problems start when Agile is being viewed as a religion and you cannot question it.

In one of the previous company I worked for, there were terrible management issues. I was a developper at the time. So the management hired that ""consultant"" and we simply HAD TO do whatever they said. The consultat was essentially a guru.

One day the consultant ""invited"" my team into a meeting and started telling us how we were going to work going forward. I asked why, why would it be better than the way we have been operating so far, and the only replies I got were :

* It is Agile, it can only be better
* If you question it, you are against change, and this is bad

Fast forward a few years later and the company is in even worse shape than what it was before.

&#x200B;

I like the Agile principles. I think it's common sense. But as many things common sense, you also have to have common sense applying them. If you start to treat it like a religious thing that cannot be questionned under any circumstance, things will go south very quickly

&#x200B;

ALSO, don't confuse Agile and Scrum. Agile is one thing, Scrum is another.

I do believe the Agile principles can be implemented very widely but this is less true for Scrum. There are domains where you simply cannot implement Scrum because you are bound to a waterfall process for regulatory or domain-related reasons (exemple: hardware engineering... you cannot release a new version of the hardware every 2 or 3 weeks, it is just impossible, physically and also legally)

Scrum is attractive because people hear ""we are going to get updates every 2/3 weeks, customers are going to be happy, team is going to be more efficient and will increase its velocity"".. what's not to love ? But as I said, these things must not be seen as a universal thing that always works. Never forget common sense.",2021,Why does agile get so much hate?
thrillux,1,"I've worked at a lot of places, and here's my takeaway:

* Technical debt is almost never put in the backlog to get cleaned up, so things get unnecessarily noodly and architectural refactoring that would save a lot of effort and significantly improve code quality never happens.  If technical debt does get put into the backlog it's hardly prioritized.  But it never gets there anyway because no one has time to write up task items for it.

* I often find myself at the end of a one way pipeline where bad decisions could be avoided if I were involved in the decision making process or design, but I get handed UX and such with occasional terrible choices, or where something could be done much better, but by the time it's a story in the next sprint its too much of a pain in the butt to push back and get em to rethink.  because it's a grooming session, not a design session",2021,Why does agile get so much hate?
thrillux,1,"ah and don't let me forget most of the time it robs you of any leeway to be creative and make the most impact, because you're now a like worker in the kitchen",2021,Why does agile get so much hate?
chaos_battery,1,"Exactly this. I feel like a factory worker on the line turning out the next widget. Each widget may look a little bit different unlike a factory, but it's just units of work followed by more units of work. I miss the days of our forefathers who I heard had granite floors and a special engineer key to the bathroom.",2021,Why does agile get so much hate?
dennis_watkins,1,"I agree, at my company it just feels like a good way to keep everyone on a similar page and make sure nobody is getting stuck. I've enjoyed using it so far.",2021,Why does agile get so much hate?
Dismal_Bumblebee_86,1,It's very difficult different sample you're transferring people but then you have people who are saved disabled special needs special requirements special needs and those needs on absolutely clear on both sides or other support isn't there.,2021,Why does agile get so much hate?
bluewater_1993,1,"From my experience, the hate is due to companies who either were not fully invested in Agile, or implemented it poorly. Everyone needs to be on board, know their role, and the culture needs to be one of cooperation/collaboration without fear of repercussions. This includes upper-management either learning and understanding the process, or taking a step back and trusting your employees to do the work that needs to be done. I’ve worked in several groups that worked in this manner, spanning across three companies, and every team had differences. Some were much better than others, however, all were ultimately successful. The most successful teams were the ones that had the attributes I listed above, along with full support from the management teams. It’s also critically important that the PO has some idea what they are doing, as I’ve been part of a team where this was not the case and it went (and is still going horribly off-track). This same PO would have failed no matter what methodology was used, so you can’t really blame it on Agile, it’s just an inept manager/PO.",2021,Why does agile get so much hate?
agile_pm,19,"People saying ""agile framework"" or ""agile methodology"" when they mean scrum.",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
PaperStreetSoapCEO,1,"Lol. I've been some sort of admin or network admin and I'm looking into certs in PM because I've been put on so many ""teams"" in so many industries.  This thread is like a whose on first bit. All these buzz words explaining the others tells me PM is basically a religion with varying levels of bs like any other.",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
gingerninja247,19,My biggest problem with agile is people just saying it in my company. It's the latest buzzword so they think we should just do a project the agile way instead of assessing if it's the best way we should be running the project. It's still perfectly valid to do a project the waterfall method if that fits the project rather than agile,2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
Poop_shute,15,"PM methodologies are moot when it comes to seeing the project to delivery. In my experience, you’re creating unnecessary obstacles by trying to be to finite with things that have no relevance to the project lifecycle. 

Your meetings and project planning should be objectively focused, concise, and structured where you can report on actions, inform stakeholders, and provide status updates.",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
lli2,13,I worked with an L6 Engineer who was confident that Agile meant no planning. Like that I shouldn't have to be able to state when things would be done for a customer. Oh my...,2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
Prestigious-Disk3158,4,Many folks in the tech world feel the same way and it goes unchecked and they wonder why tech lay offs are massive.,2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
WhiskyTequilaFinance,3,"And no accountability for meeting deadlines anyway.  ""Oops, we'll just do that next sprint...""",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
fpuni107,4,Yes  then you ask them to improve their say-do ratio and they cry that they are being micromanaged and say “people over process!!!” Like that’s means there should be no process whatsoever,2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
WhiskyTequilaFinance,2,"Then when the QA process works and carches something critical, they blame the PM because the story didn't specifically SAY: ""If an error is encountered during processing, it is expected that the data ingestion process will rollback to previous data rather than silently wipe the entire production database without notice or restore method."" 

After that one, I asked my boss if I needed to follow them to the potty and remind them to pull their pants down before they went poopies, too. She about spit her coffee on the screen.",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
ManagingPokemon,14,Refusing to let the team adapt to change because you have a fixed set of processes!,2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
pineapplepredator,11,"“The his project is too agile for documentation!” When asked for the basics. Meanwhile this boy had 20 different spreadsheet files for the “project status” that were all out of date and contradictory. he did a lot of explaining at me about how agile excused his making a mess out of a simple, but very expensive, project. Thankfully I was only there on a short term contract so I got to bite my tongue and laugh.",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
ManagingPokemon,1,"This is the opposite of making the work transparent and visible, something I believe belongs in a healthy lower case agile.",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
berrieh,9,People associate it with scope creep without putting the appropriate guardrails and systems in place (like they plan a waterfall deadline and linear plan) and call it “working agile” when they mean working with undermined requirements (no definition of done or clear scope) and being in a constant state of crunch. I hear lots of executives use it that way.,2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
Roosevelt42,2,"I'm on a project that's currently in month 8 of VE exercise #2 and new bulletin updates get posted every week... and somehow we're supposed  to be able to keep our subs working to meet the originally set project deadline. Oh, and contracts for key scopes of work are still pending but we're supposed to keep working *",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
Ok_Channel6139,9,"I feel like no one truly knows or understands what it is, and commonly it's being referred to in the literal sense and not as the delivery science/framework.",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
second-chance7657,9,Sloppy work.,2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
logicfix,14,"We don’t need requirements, we are agile! SMH.",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
Blahtherr3,7,"""Yes, we follow the agile methodology. We are so quick to respond immediately to any requests!""

Meanwhile, they never really followed any of the principles of agile and there were plenty of people that dragged their heels in changing anything.",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
nikokazini,13,"Where I work, execs use agile to mean “no clue, just keep going with no clear scope or plan until the money runs out”.",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
Maro1947,6,"""We understand, and do not ever mangle the English Language""

I'm not particularly against Agile, but I reserve the right to punch people who mangle English with Agile terminology",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
ZiKyooc,5,"I think it's best to talk about iterative project management vs predictive project management.

You can be agile in both to some degree. Yet most of the time people mention agile, it's about how the scope is set and the impact on planning and implementing.",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
iwbmattbyt,7,"At a previous employment, I enjoyed the understanding from many colleagues that agile project management meant flexible working. 

They just wouldn’t come in to the office, because they were working agile 🤐",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
DoctorQuincyME,10,"For us it's a word management means when something is going to be totally improvised. 
We'll be given a very broad problem statement and when we ask for clarity are told that ""we're working agile at the moment and not sure what the end product should look like"".",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
AvoidSpirit,10,Calling agile a framework probably.,2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
ThePowerOfShadows,9,“…tHe AgIlE fRaMeWoRk.”,2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
North-Revolution-169,8,"Ugh. Jesus dude sorry but I feel like your question just puts this in the wrong light.


Broadly speaking you have two kinds of problems / customers. Those with known and researched requirements and those that don't.


""I don't likey current house / car and I wish I had ABC thing with XYZ features"". Ok awesome order placed and with waterfall methods we can deliver.


And then you have ""I dont like current thing, I wish current thing was better"". Ok so you want cheese or pickles on your current thing? ""Hmm ya I dunno but it's taking really long to get my thing"" Bam agile project. Try this or this or this? Ohhh you like the last thing? Ok less rushed and more scalable version of rushed thing coming right up. Changed your mind? No problem because we always knew you didn't know what you needed and the first thing we did was just a fancier facade anyway. MVP facades all the way down until we have so much damn tech debt that we need a waterfall project.",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
RDOmega,4,"Oddly enough, your question could be a good candidate.",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
SVAuspicious,11,"Misunderstanding: the belief that software developers are somehow unique and special and best engineering practice doesn't apply. 

Misunderstanding: that Agile is anything other than a way for software developers to avoid accountability for cost, schedule, and performance. 

Misunderstanding: that planning one sprint at a time is good enough planning. 

I've seen Agile actually work exactly once. Software developers wouldn't like it. We got world-class SMEs dedicated to the success of the project and taught them to write code. We had a very small number of developers who mostly maintained libraries and maintained documentation for code reuse. Lots of professional collaboration with very few meetings. Professional competition meant the hardest bits got tackled first. These folks were truly full stack: requirements, specifications, architecture, design, development, testing, integration, documentation, training, roll-out, switchover. THAT is a stack.",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
Deleted Account,3,[deleted],2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
Pitiful-Reserve-8075,1,Indirect micromanaging. The root of all evil.,2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
ind3pend0nt,3,Equating time to point values or thinking high value throughput means large number of points completed in a sprint. Thinking kanban is the answer and items don’t have end dates.,2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
pmpdaddyio,2,"That Agile in any form is project management. It is not, was never intended to be, and all the methodologies associated with it are simply tasking methods, not PM.

Another major core misconception is that people use the term ""Hybrid"" assuming it is always Agile+Predictive. It is not. Hybrid is a combination of any methodologies, and by use of the term methodologies, you actually eliminate Agile, (as it is a framework). You can have Scrum+Predictive, of XP+Predictive, but Agile+anything, is not a thing.",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
Pitiful-Reserve-8075,4,"Seeing Agile frameworks as a tool for micromanagement is a serious misunderstanding of what Agile is all about. Agile methodologies, like Scrum, are meant to break down the rigid hierarchies and red tape that slow down innovation and responsiveness. They focus on collaboration, self-organization, and flexibility, empowering teams to take charge of their work and make smart decisions. When Agile gets twisted into a micromanagement tool, it completely misses the mark and can really kill creativity and morale. This usually happens when managers resist the cultural shift that Agile demands, holding onto old-school ideas of control and oversight. But that approach goes against everything Agile stands for, which is all about trust, transparency, and shared responsibility. To truly make the most of Agile, organizations need to let go of the urge to control every detail and instead create an environment where teams can innovate and adapt freely, leading to greater success and value.",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
czuczer,-7,You are the problem if you say that there is a project manager in the Agile framework.,2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
pmpdaddyio,1,"You are in fact 100% correct. Unfortunately, PMI has taken on a vocabulary stance that is inconstantly applied at the PMP certification and for the ACP. In the PMP, they will often use the term ***project manager*** when discussing things in the Agile framework, but in the ACP, the role equivalent is always a ***practitioner***, unless specifically identified as a role such as Scrum Master, Product Owner, etc.",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
czuczer,0,Thank you :) yet I still have 6 downvotes (not that I care),2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
pmpdaddyio,0,"People that use or rely on the reddit voting system need to not be in this role. It is a meaningless value, like Agile story points, or t-shirt sizes.",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
czuczer,1,Oh I know that's why I really don't care. But I'm a bit concerned that those people think that there is a PM in Agile :) and this makes me a bit sad,2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
pmpdaddyio,1,I’m not concerned at all. As a hiring manager with a staff of over 90 PMs this helps me weed out the weak candidates.,2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
czuczer,1,"Well true but on the other hand someone does hire these people somewhere and this leads to ""why do we even need a PM"" discussion :) which I am not ready yet for :)",2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
czuczer,0,I really want to hear from the ones down voting - why? And where does a Project Manager stand in an Agile framework?,2024,"As a Project Manager, what is the best example of people misunderstanding of what the Agile framework actually is! "
Deleted Account,98,[deleted],2021,No more Scrum for this developer
GroundbreakingAd9635,22,Oh god,2021,No more Scrum for this developer
Deleted Account,21,[deleted],2021,No more Scrum for this developer
husao,11,"Sometimes I have this morbid curiosity about how much people can twist their minds to come to a conclusion that has nothing to do with their argument.

In other words: I would be interested in that lecture.",2021,No more Scrum for this developer
instilledbee,5,"I was in a similar boat in one of my former companies. Feature estimation was always only between the lead dev and PO. Lead dev never bothered to involve us in estimating any features, even going so far as to butt in whenever any of the other devs were directly being asked during a meeting. Come end of sprint the PO was always on our case asking us ""[Lead dev] said X would only take Y days. What's taking so long?"" 

¯\\\_(ツ)_/¯",2021,No more Scrum for this developer
hopbyte,5,"Endodontist:  This root canal will take about 2 hours.

Patient:  Have it done in 20 minutes.",2021,No more Scrum for this developer
Smokester121,3,How about teams that force you to time track. You have to clear 8 hrs a day and it needs to be plugged into a ticket... Every month you'd be hounded about it and guess what by the last week Devs were dumping loads of hours into random ass tickets to get up to that. I swear one ticket I dropped like 40 hrs into for the week. It was a complete joke of a system.,2021,No more Scrum for this developer
PamBeesly00,1,This is my nightmare!,2021,No more Scrum for this developer
Deleted Account,87,[deleted],2021,No more Scrum for this developer
frugalonekenobi,39,"Frequently I've seen managers become chagrined at being off 100% on every sprint, and they start removing ceremonies until the SDLC settles into Kanban. It's bliss for a while, but always I see the manager axed for not cracking the whip. A new manager comes on and the cycle repeats.

&#x200B;

I've always been interested in a PhD. Can you tell me about yours? Comp Sci? Before or during industry?",2021,No more Scrum for this developer
blueboybob,26,My doctorate is in astrophysics. But I hated academia and it didn't pay. Got it before any job.,2021,No more Scrum for this developer
Deleted Account,3,"That type of environment - managers are pressured to squeeze every bit of build out of their teams every week - is the problem. Scrum is a tool that happens to lend itself to helicopter micromanagement, but it's the leadership, the company, that is demanding velocity at any cost.",2021,No more Scrum for this developer
Deleted Account,7,"It's like two seperate realities exist. I had a Scrum Team at a huge employer were we had one ""Scrum Evangelist"" and one ""Agile Coach"" on the team. When we consistently overestimated, both of them told us, verbatim, that we should keep planning XY points because ""Agile means sticking to a plan"".",2021,No more Scrum for this developer
Deleted Account,1,Lmao,2022,No more Scrum for this developer
Deleted Account,69,"Are there are any SWE positions that don't have daily stand ups? Genuinely curious, I haven't seen any",2021,No more Scrum for this developer
blablahblah,54,"I've been on multiple teams at multiple big tech companies that decided to reduce stand ups to every other day because we weren't getting much out of the daily meetings. If you have an urgent blocker, you can bring it up in the team chat. A couple of the teams even had designated no-meeting days so the devs could have at least one day a week of uninterrupted make time.",2021,No more Scrum for this developer
frugalonekenobi,16,I'd give every other day a try.,2021,No more Scrum for this developer
improbablywronghere,10,">	A couple of the teams even had designated no-meeting days so the devs could have at least one d

This is something I instituted on my team before Covid as a standing optional work from home day every Wednesday. We’d do our meetings and stuff at the beginning of the week to get work together than Wednesday was individual no distraction grind day then we’d come back together and plug it all in together after that. This has been incredibly well received by all of the engineers on the team and we all think it’s resulted in a huge productivity boost and just a better balance for the devs. Of course, everyone is remote right now, but we still have no meetings or anything on wednesdays.",2021,No more Scrum for this developer
TopOfTheMorning2Ya,2,"Last week was the first week of only Tuesday/Thursday stand ups for me!!! It was awesome. Since Thursday was the first day of our new sprint, we didn’t do it then either! The anxiousness of having to come up with a smart sounding status update was gone! It only took me complaining at like 10 retros in the last year to make it happen... but at least it finally did!! As someone who gets 0 value out of that meeting, I couldn’t be happier!",2021,No more Scrum for this developer
Deleted Account,47,[deleted],2021,No more Scrum for this developer
frugalonekenobi,25,"Async is one of the more tolerable ways (e.g., Slack). You're lucky if you don't have to do a status update. You can just say 'no issues, no blockers' with no detail on what you're doing? That's chill.",2021,No more Scrum for this developer
Deleted Account,20,[deleted],2021,No more Scrum for this developer
user77577,4,How long does your stand up last? If someone raises a topic would they get enough time to go through it or do you let the stand up go for as long as needed? Ours sometimes feels like a status update where we don't really have discussions so keen to hear how this works,2021,No more Scrum for this developer
DargeBaVarder,11,"< 15 minutes.

It goes one of a few ways:

 * Nobody volunteers any topics.  We join and ask if anybody wants to talk about anything.  Nobody says anything and we get 14 minutes back.

 * Nobody volunteers any topics.  We join and something comes up.  We quickly discuss it and figure out how to get past blockers.

 * Normal stand up with items

Each item is usually a 1-2 min discussion.  If it starts to drag past that we agree to get a few of the key people together for a break out session, or a few people agree to just hop on a call together and break past it.

We rarely break the 15 minute mark, and if we do we're usually talking break out meeting at that point.  It can be hard to ""cut people off"" but at this point our team is pretty used to it, so nobody takes offense.

I should note my company recently adopted a policy of less meetings... so in general we try to avoid long unnecessary meetings.  I know some other teams have long drawn out stand ups, and I've suggested people adopt similar policies to our teams.

As for the async part of standups.  Every day each dev will post in slack a general run down of what they're working on.  So:

> JIRA-123 | Some important thing
> 
>  * Yesterday: Worked with x to get past blocker discussed in stand up
> 
>  * Am planning on finishing work on this today
> 
> Other:
> 
>  * Working on a super cool course I found
> 
>  * Having a meeting with the sweet team we like to discuss some important stuff

People on the team thumbs up the status updates when read, and comment if necessary.

It works really well, IMO.",2021,No more Scrum for this developer
user77577,3,"Amazing reply thanks for taking the time to write it, the piece around having a policy on less meetings, what does that look like? We've tried that like No Meeting Mondays and Get Shit Done days but people tend to slide and book ""workshops"" instead of meetings or calling it war rooms etc, but they are still meetings at the end of the day, what does it look like for you?",2021,No more Scrum for this developer
DargeBaVarder,2,"Sure thing!

I work for a fairly large company (not FAANG big, but you've probably heard the name before). They recently decided that they wanted to institute ""No meeting afternoons"" which basically means no meetings after 1pm (Hello to any coworkers who recognize the company from this alone).  My team had a no meeting day before this, and since this we've adopted the policy.

Of course we still have pair programming or 1:1, but largely it's head down crank out code time.  To be honest... it's really wonderful.

I should also mention that my company is REALLY employee focused... like not just ""look how employee focused we are!"" PR bullshit.  It's one of the core values they go by.  When they say no meetings to benefit devs, they mean it, and the leaders do everything they can to adhere to it.",2021,No more Scrum for this developer
backtickbot,-1,"[Fixed formatting.](https://np.reddit.com/r/backtickbot/comments/lees6y/httpsnpredditcomrexperienceddevscommentsle909ino/)

Hello, DargeBaVarder: code blocks using triple backticks (\`\`\`) don't work on all versions of Reddit!

Some users see [this](https://stalas.alm.lt/backformat/gmc28pi.png) / [this](https://stalas.alm.lt/backformat/gmc28pi.html) instead.

To fix this, **indent every line with 4 spaces** instead.

[FAQ](https://www.reddit.com/r/backtickbot/wiki/index)

^(You can opt out by replying with backtickopt6 to this comment.)",2021,No more Scrum for this developer
frugalonekenobi,56,"I'm interviewing with all sorts of companies from a startup paying 171k to a non-vc-small-business paying 130k. Some green flags when reading job descriptions:

* none of the following words ""fast-paced"", ""hyper-growth"", ""high-performance"" team, energetic, young, entrepreneurial.
* you aren't referred to in the third-person. ""The software developer will do X"". ""The resource will do Y"".
* explicitly mentioning ""work-life balance"".
* paying for dependent benefit premiums. Cheap startups that do Scrum hire young talent and so they don't need to do this. If a team hires more experienced people, people who won't deal with as much BS, they'll be older and want their family covered .
* in a similar vein, older devs interviewing you
* mention of 'flex hours'.",2021,No more Scrum for this developer
JonDowd762,46,"> ""The resource will do Y""

I can't recall ever seeing this in a job description, but man I hate that word with a passion. Far too often I've listened to things like ""We're allocating more resources to project X"" ""I've got a spare QA resource, does your team need help?"" Dude, we're talk about people here, not a pile of 2x4s and some nails.",2021,No more Scrum for this developer
Solrax,15,"We are all just ""Human Resources"" to management.",2021,No more Scrum for this developer
PixelatorOfTime,12,“HR is there to help *you*...”,2021,No more Scrum for this developer
PhoneyHammer,3,The resource will put the lotion on its skin,2021,No more Scrum for this developer
ashton_dennis,2,The resource puts the lotion in the basket or else it gets the hose again.,2022,No more Scrum for this developer
turntablecheck12,2,It's really disgusting.,2021,No more Scrum for this developer
flavius29663,20,"Flex hours is green, but can be red too, when phrased like work hard and party harder or the like, that means: you can stay after hours as long as you can",2021,No more Scrum for this developer
dexx4d,8,"""Flex time means you can work 35 hours one week and 50 hours the next to make up for it.""

-- direct quote from my manager (yes, Im trying to leave)

Edit: Last week turned out to be 52 hours.  This week starts today (Sunday) and will likely be similar.  I'm paid for 40, per my contract, so it's either donate time or lose my job for underperforming.",2021,No more Scrum for this developer
halfercode,-1,"I'm not a fan of time-based presenteeism, but 42 hours a week doesn't sound terrible.",2021,No more Scrum for this developer
cpb,0,52,2021,No more Scrum for this developer
notsohipsterithink,1,"I would replace older with more experienced, but yeah. Tends to not work out well when lower level people interview higher level people.",2021,No more Scrum for this developer
chanx_gilbium,4,"I think he means actually older. Older devs are more likely to have formed a family with kids at home. Ofc, what you say is true about experience but I think that green flag and the point preceding it were his ways to look for indicators the company is an environment people with kids at home wouldnt mind working at.",2021,No more Scrum for this developer
Taikal,1,"What are ""dependent benefit premiums""? Do you mean bonuses, maybe?",2021,No more Scrum for this developer
ritchie70,5,Probably means “paying for family plan health insurance not just single employee.”,2021,No more Scrum for this developer
thepobv,1,"I know companies mentioning wlb that actually offer fantastic wlb,  it's exactly why they mention it. ¯\_(ツ)_/¯ 

I know what you're trying to get at though.",2021,No more Scrum for this developer
ColdPorridge,7,"Yes, we have no daily stand ups, only loose sprint planning meetings every two weeks. As a caveat I am a DS, now SWE, but my role is SWE and DE heavy in practice (I am basically a solo dev for several internal tool systems). 

Prior to this I was on a mixed DS/SWE team where we use to do daily standup, then weekly, then just axed it altogether because it’s easier to just provide updates over slack when someone asks.

Basically if you hate scrum/agile go hang out with some DS (yes you can still be a SWE in a DS team), they hate it enough that every team I’ve been on only loosely adheres to agile to track what’s in progress, most don’t even estimate points for tasks.",2021,No more Scrum for this developer
tuxedo25,9,Used to be on a team that just did MWF standup. That reduced the pain slightly.,2021,No more Scrum for this developer
imnos,6,"My current position has them every second day, and it's great.  Well - not great, but better than daily.

Every other job I've had has had them daily, with the exception of one absolute nuthouse which had standup every hour.",2021,No more Scrum for this developer
awsum84,4,Jeez... How do they expect people to be productive with hourly (scheduled!) interruptions?..,2021,No more Scrum for this developer
whatwhatwhichuser,3,"\> one absolute nuthouse which had standup every hour.

&#x200B;

that actually made me laugh",2021,No more Scrum for this developer
PopeMachineGodTitty,2,Probably not any more. My first several jobs out of college had no such thing. It was waterfall though so you had checkpoints where you reviewed status. Of course the huge problem there was you didn't catch things until the checkpoints a lot of the time.,2021,No more Scrum for this developer
g051051,2,"At my previous company, standups were absolutely mandatory.  The scrum master would bristle with outrage at the merest _suggestion_ that someone had something more important to do.  They very much had the opinion ""Ceremonies > Actual Work"".",2021,No more Scrum for this developer
sudosussudio,1,I am usually anti-standup but with the pandemic I think it can be more useful for connecting teams.,2021,No more Scrum for this developer
TheFallingStar,1,"Government here, we only have weekly stand up.",2021,No more Scrum for this developer
lattlay,1,"Much like the op after my crappy experiences with scrum I also vowed never to take a job that does scrum/daily stand ups ever again. Fortunately I was able to find one and I am much, much happier (and therefore more productive) because of it.",2021,No more Scrum for this developer
Mehdi2277,1,"I've worked at multiple companies now without daily standups. My last company main meetings were at a weekly cadence (1 on 1/project level/team level). My current company also has a weekly cadence for the main meetings for updating status. 

My first company was the only one with a daily standup. The standup was fine it was only 10ish minutes with 18ish people. Updates were intended to be fast and if questions appeared that was a sign for the relevant people to continue the discussion later and not slow down the meeting for everyone.",2021,No more Scrum for this developer
koreth,1,"Very small companies are less likely to have them, in my experience. At my current job the dev team is 3 people including the manager who also does technical work. He asked if we wanted daily standups, the other dev and I said it would be a waste of time because we both pipe up on Slack when we are blocked or when we have something new to announce, and that was that.",2021,No more Scrum for this developer
saposapot,1,"Previous company was still on full on waterfall and we had weekly status meetings. Of course people talked when needed everyday. 

This was developing fixed budget projects to clients so it made sense and works.",2021,No more Scrum for this developer
tedstery,1,"My company does one a week, but we do 6 week sprints as we were always chasing in two weeks",2021,No more Scrum for this developer
RangeDotCo,1,"Many teams have replaced their daily standups with async standups. The pandemic seems to have driven much of this change as it's harder to synchronize schedules when most people on the team are remote. 

Our team does async standups. Our product team tested having one synchronous standup during a recent cycle and many found the mix of async and sync standups to be  interesting (so a hybrid model may come up more often).",2021,No more Scrum for this developer
Solrax,55,"I respect that decision. Having been in the industry long before ""Scrum"" came along, and having had to use it for many years since, I'm convinced that it was devised largely as a response to the growing power and independence of Software Developers and it has taken over the industry.

To get it out of the way, though it claims to be Agile it is far from Agile. It is all about process and rules and rituals that must be followed for it to work. They usurped and monetized the name Agile to sound current, and then twisted it.  In one company I worked at someone was berated for sitting during a ""standup"" because they had a boot on for a broken foot and couldn't stand comfortably. Why? Because those were the rules.

It really empowers management, and micro-management. It let them get rid of policies they hated, like flex-time. My most recent job even claimed to have flex-time, except that well yeah, we have a standup first thing in the morning. But you can start anytime before that!

And as you say, it lets them keep much closer tabs on developers, while increasing the pressure in a more subtle way. Before Scrum I've worked many places that had periodic status emails (most often weekly, less often daily). But not daily meetings. The whole Sprint/Velocity thing lets them make teams feel like failures even if they are delivering excellent work. One product we shipped on time, with high quality, and it was very successful. Yet we technically failed \*every\* sprint due to not matching the expected velocity, and were shown charts and graphs every sprint review to prove it. What should have been an exciting product launch was cloaked in failure by the Scrum administrators.

It also lets them pretend that all developers are interchangeable. In fact it is an essential part of the practice, at least in all the training I've had to take. Work is to be balanced during the sprint by people who finish something quicker picking up extra tickets. There is no allowing for the fact that the person may have no knowledge or background in the work the ticket calls for. Sprint capacity is set to the number of developer points available, no matter the balance of individual experience, skills or knowledge. 

Also because estimation is often done in Sprint Planning (at least in my experience) and with Planning poker, people are making point estimates for tasks that may be in code they've never seen, or systems that haven't even been designed yet. Then they are held to those estimates and shown the disappointing burn-down charts when they don't hit them.

I deal with it by doing my work and basically ignoring the Scrum process. I take my tickets from the backlog, but don't particularly worry about hitting the estimate on the ticket. In fact an important project that turned into real money for the company happened because I decided to ignore my backlog for a few days and put together a prototype for something that people wanted but didn't think was possible (nothing genius here, I just knew how to put some different pieces together in a way that no one had thought of). That would never have gotten onto my backlog through Product/Sales and sprint planning. It only happened by ignoring all that.",2021,No more Scrum for this developer
sudosussudio,27,What's really interesting is Agile was invented by programmers for programmers. It was supposed to empower programmers. Business people hijacked it.,2021,No more Scrum for this developer
g051051,10,Agile was invented by consultants to sell consulting services.,2021,No more Scrum for this developer
TopOfTheMorning2Ya,3,I wonder who Scrum was created by... I’m guessing not programmers.,2021,No more Scrum for this developer
sudosussudio,6,I think it was a lot of the Agile guys who were programmers but I think it’s a similar story about it getting hijacked,2021,No more Scrum for this developer
TopOfTheMorning2Ya,6,"Yeah I’ve mostly ignore it too. Last several months I pushed for giant change of directions right after the quarterly plan was created by our PO. She wasn’t happy but I got my way. I really don’t care how much work gets rolled over each sprint as long as things are making progress. The timebox of 2 weeks is really dumb. Our back end tasks rarely fit well into 2 weeks. We also face difficult design choices and other teams impacting our stuff. On top of everything else going on, I just don’t have time to care about making their charts look nice.",2021,No more Scrum for this developer
g051051,3,"> Having been in the industry long before ""Scrum"" came along, and having had to use it for many years since, I'm convinced that it was devised largely as a response to the growing power and independence of Software Developers and it has taken over the industry.

Preach it, brother!  I've been telling people this for years.

> In one company I worked at someone was berated for sitting during a ""standup"" because they had a boot on for a broken foot and couldn't stand comfortably. Why? Because those were the rules.

The first time I saw a standup at my previous company: I was in a meeting that had just finished, and while some people left, others just stood up and stayed around the table, then started having their meeting.  No one seems to remember that a ""standup"" is meant to be a meeting that doesn't require a room, that you can huddle together anywhere for a few minutes to knock it out.  It doesn't literally mean that everyone has to ignore any available seating.

> What should have been an exciting product launch was cloaked in failure by the Scrum administrators.

We had ""scrum masters"" led by ""agile coaches"".  They completely paralyzed the dev staff with their process and blamed us.

> Planning poker

They introduced this at my last place...I thought they were joking.

> I deal with it by doing my work and basically ignoring the Scrum process.

Same...at least as best I could.  The process was very intrusive, with noisy scrum masters, meetings spread throughout every day, ""agile resets"", ""agile health checks"", etc.  It was a struggle to find 2 consecutive hours to actually work.",2021,No more Scrum for this developer
Deleted Account,1,">The process was very intrusive, with noisy scrum masters, meetings spread throughout every day, ""agile resets"", ""agile health checks"", etc. It was a struggle to find 2 consecutive hours to actually work.

How do these idiots think this shit helps with productivity?",2022,No more Scrum for this developer
turntablecheck12,3,"All of this!
I had a similar ""real money"" innovation once which I managed to prototype partly during work hours at a job that hadn't yet adopted Scrum. After that point, it simply wouldn't have been possible to spend any working time on it as it would never have been added to the backlog, and there's no slack time in a sprint.",2021,No more Scrum for this developer
new2bay,28,"I'm pretty sure if I filtered on those questions the same way you do, I'd never work in the Bay Area again.",2021,No more Scrum for this developer
frugalonekenobi,19,"That should tell ya somethin'. Stay there and make your $$$ while you can tolerate it, then retire or gtfo.",2021,No more Scrum for this developer
svhelloworld,113,"Along with being a software developer, I'm an avid woodworker. One day, I was cutting a piece of plywood and set up the cut all wrong. I'm half way through the cut and piece kicks back on me. The wood flies off the table, punches me in the gut, cut my hand and then shot across the shop. Hurt like a mofo.

The tablesaw was not the problem. It was a top of the line $5,000 SawStop saw and in great condition. The problem was the guy using the tool.

When I see people blame their shite work experiences on Agile or Scrum or this framework or that framework, it all sounds like people yelling at their table saw. Scrum is not the problem here. Agile is not the problem here. Corporate culture is the problem. Leadership is the problem. You think these same managers somehow wouldn't fuck up a Kanban team? C'mon.

I promise you, just because a company isn't doing Scrum doesn't mean they aren't jacked up. Kanban, SAFe, DAD, LESS, waterfall. The framework and methodology doesn't  matter. If the company culture sucks, then no framework will protect you.

Scrum is a red herring. Assess companies on their culture, on their leaders, on their values.",2021,No more Scrum for this developer
imnos,10,"> a Kanban team

How does a Kanban team operate compared to a scrum team?  All of my scrum jobs have used kanban boards but I didn't realise kanban went further than that.",2021,No more Scrum for this developer
Working_on_Writing,16,"Kanban is based off the Toyota Production System (TPS). Going full Kanban means no Sprints, just continuous ""flow"". Tickets are picked from the backlog into the board according to priority (although I think virtually everyone uses a 'hopper' of tickets rather than the full backlog). 

Obviously this means no 'sprint planning', just hopper refill meetings which can be paired down to more like a 'three amigos' meeting. No retrospectives either, but the idea in TPS is 'servant leadership': The manager is there as a troubleshooter, not a commander, so if something isn't working you escalate immediately to the manager who then works with you to resolve the issue and get the work flowing again.

There's a very short book called ""The Essential Kanban Condensed"" which covers pretty much everything.",2021,No more Scrum for this developer
JonDowd762,9,"That sounds pretty appealing. I may just be a boring person, but I really like the idea of a continuous flow and dropping all the sprint beginning/ sprint end processes. Just the same routine every day. Grab a ticket, develop, test, ship, grab another. 

I think retrospectives can be helpful to discuss how things are going with the whole team, but you should certainly be able to raise issues immediately and not have to wait for a meeting every few weeks.",2021,No more Scrum for this developer
Working_on_Writing,5,Kanban is pretty nice when you can use it - I've found the biggest issue with it is that it's harder to communicate what's going on to senior management who like release cycles with particular goals. I agree retrospectives are good and there's nothing stopping anyone adding regular retrospectives to a team working in Kanban.,2021,No more Scrum for this developer
Deleted Account,3,last place I worked did this and it was great.,2021,No more Scrum for this developer
g051051,7,"> The tablesaw was not the problem. It was a top of the line $5,000 SawStop saw and in great condition. The problem was the guy using the tool.

Agile is in no way comparable to a top of the line tool.",2021,No more Scrum for this developer
midfield99,6,"> Scrum is not the problem here. Agile is not the problem here. Corporate culture is the problem.

I disagree. Now Agile is big business, there is an entire consulting industry around it, and management often drive implementation. If some common problems often come up in implementation, then industry should take responsibility for fixing them, and not blame individuals.

You mentioned table saws. Table saws are dangerous, and a lot of accidents can be blamed on individuals. But SawStop did create a solution to prevent cutting yourself. SawStop is controversial, but I do think it's existence does make companies more responsible for employee accidents if they buy saws without safety features.",2021,No more Scrum for this developer
frugalonekenobi,30,"You're right, of couse. But when 90% of dysfunctional companies choose 'Scrum', it becomes a good way to weed out job postings.",2021,No more Scrum for this developer
Deleted Account,6,[deleted],2021,No more Scrum for this developer
nutrecht,13,"""All dysfunctional companies I worked for use scrum, so scrum is bad"" is as much as an argument as ""every animal I ever saw was a cat, so all animals are cats"".

It's so weird that so many people don't understand the concept of selection bias.",2021,No more Scrum for this developer
whatwhatwhichuser,1,"It's more like

""every animal I ever saw was a cat and they all bit me. so I avoid all animals and don't get bitten""",2021,No more Scrum for this developer
mniejiki,1,Unless 90% of companies (or managers) are dysfunctional in which case Scrum indicates nothing. I'd say outside of FAANG that number may not be far off.,2021,No more Scrum for this developer
trynafindaradio,2,"> Scrum is a red herring. Assess companies on their culture, on their leaders, on their values.

That's... a really great point. My team got a new manager in the last year and in 7 months we've gone through 3 (!) frameworks - where the process is he decides ""the team's not being productive enough. it must be the framework"" and then we switch. Everytime we transition we get more overhead because he doesn't cancel the old meetings. I wouldn't have minded any of them but ever time he makes a new change, we get further from whatever framework we're trying to copy.",2021,No more Scrum for this developer
no-more-throws,1,"this about it this way .. in a lot of places, current dev culture has become one where over-hyped un-empathetic gang of gorillas juiced up on quick-return seeking investors money, try to run a factory line with craftsmen who want to be artists .. given this, would you rather want to work in a gorilla shop as is, or in a gorilla shop where the the line-monitors are all equipped with whips to 'shape up' the team .. yeah certainly the its not the whips fault, but it does give a good indicator of how the workplace is going to be if the way they get things done is via a whip that consistently seems to inflict misery on the workers",2021,No more Scrum for this developer
Deleted Account,17,Just under-promise and over-deliver. Works everytime.,2021,No more Scrum for this developer
NoComposer8976,2,Not when you can’t point your stories at all,2021,No more Scrum for this developer
Deleted Account,17,"I've had very similar experiences. I've been part of many scrum teams and, for the most part, your two points have been the rule with the exception of maybe two teams over the years. I can completely understand why you'd want to avoid that type of environment in the future. During an interview you'll filter out employers that use scrum. On the flip side: what process of work would you seek?",2021,No more Scrum for this developer
frugalonekenobi,27,"`People and interactions over processes and tools`

I like it best when the company doesn't feel the need to name their process. That usually means it's lightweight and chill. I've heard this called 'no BS' or 'no bullshit' SDLC.

Of the named ones, I like Kaban.",2021,No more Scrum for this developer
Deleted Account,4,"This is the thing that brought me happiness. When I found a team that genuinely adopted to the mantra of ""we keep chaning our process until is serves our puprose"" instead of ""leat us adopt to the process until we nail it"", I found happiness in that regard.

If a potential employer would say something like ""we do textbook scrum"" I would not bother to decline nowadays.",2021,No more Scrum for this developer
the-computer-guy,2,"I can't understand how Scrum is supposed to be ""Agile"" when it directly contradicts that part of the manifesto.",2021,No more Scrum for this developer
HappyFlames,14,"I was at a small startup that didn't follow scrum or have daily updates when I first joined. Developers would pick up tickets and just work on them until they were done -- they also weren't broken down or pointed so a ticket could take 2 days, 2 weeks, or even 2 months. This went on for a while and everything was great until the team grew and they decided to start using scrum while also starting a new, big project. Estimates became hard deadlines and standups became a time to defend yourself against them. Looking back, it was truly insane to expect a team that rarely pointed or wrote accurate tickets to suddenly become experts at it.",2021,No more Scrum for this developer
TopOfTheMorning2Ya,5,I don’t think anyone is an expert at it. We eventually just start pointing things so high there is a 90%+ probability we get it done on time.,2021,No more Scrum for this developer
PopeMachineGodTitty,39,"Once upon a time, when barely anyone was doing scrum, I was in charge of a software development department at a small company and we did that shit by the book and it was fabulous. I left that job due to personal issues with our executive team and went to a larger company where I was going to help them institute scrum. I've never encountered so many bad excuses for why we couldn't do scrum as intended from people at all levels. Now everyone has their own idea of what scrum should be and it's lost all meaning. A company says they do scrum and that could mean one of a billion different things. Everyone thinks they personally know better and everyone is a process expert. The whole reason I did it by the book was that I'm a software engineer, not a process engineer and I figured other people understood this shit better than I did so I should listen to them. I wish more people in the industry had that mindset.",2021,No more Scrum for this developer
frugalonekenobi,32,"They don't want to do it right because they're not doing it in good faith. They have no interest in 'responding to change' or 'accurately forecasting'. They heard 'scrum/agile' === 'faster' and they need you to crack the whip.

You did it right because you were acting in good faith.",2021,No more Scrum for this developer
no-more-throws,10,"i dont know about that either man, everytime someone says 'when i was in charge, i did it this way and it was fabulous', what it usually means is 'it was fabulous for me'",2021,No more Scrum for this developer
PopeMachineGodTitty,5,"Nah. I was a developer too, not just managing, so I was in the thick of it with everybody else. I was never scrum master or project owner on projects where I was contributing so it affected me the same as those I was managing. We saw a lot of benefits as developers. I will say it was a move from classic waterfall to by the book scrum so yeah, no matter what we were going to be in a better position.

EDIT - But I definitely get where you're coming from and you're right. A lot of management does whatever is best for them. I've been an engineer all my career though and wouldn't even consider a management position that wasn't hands on, so my priority is always on helping engineers do better work with as little process overhead as possible. I understand we want to be heads down in the tech, not spending half our work time in meetings and fussing with ticketing systems and board management.",2021,No more Scrum for this developer
TopOfTheMorning2Ya,3,Need to get some of GodTitty’s employees in here.,2021,No more Scrum for this developer
Geronimoooooooooo,13,"My current job is using scrum, and the issues you mention are present, and I can agree that they are somewhat annoying. But I have not seen viable alternative so far in my experience. The jobs before that either went like ""we all have to work very hard for an undefined amount of time because of made up deadline"", or features not being specified enough and managers complaining that something is not done that was not specified. At least now I know what I have to do (it is written in the story) and while there is pressure of ""pulling your weight"" in the sprint it is nowhere near to what I experienced before.",2021,No more Scrum for this developer
frugalonekenobi,12,"I call those 'deadline-oriented'/'deadline-driven' companies, and they're also to be avoided. I use questions 1/2 as a filter, but once I'm in the phone screen I'll probe deeper into the WLB and deadline situation.

It's a challenge.",2021,No more Scrum for this developer
Deleted Account,11,"I've never had a problem with managers being in standups (I guess that depends on the manager). But first thing I always do when I join a SCRUM team is try to get them to jettison the points system. I've never seen it accurately measure velocity or provide any value at all. I think what's more valuable then asking if a team does SCRUM is ask them how much control developers have on the team's processes. I've been on some good teams that do ""SCRUM"", but if a part of the process isn't helping the devs have the power to kick it to the curb.",2021,No more Scrum for this developer
ivix,10,"For me I prefer a system of points which indicates risk. So 1 point is almost never going to be an issue, and 5 points means we are not sure how to do this.

Time isn't a part of it.",2021,No more Scrum for this developer
the-computer-guy,9,">Time isn't a part of it.

I've heard this too many times.

You measure the velocity by points per sprint, and what is a sprint based on? Time.

So points are based on time. Can't get around it.

Scrum just contradicts itself is so many ways.",2021,No more Scrum for this developer
ivix,4,"Fuck all that to be honest. It never really worked and I don't know why some people still cling to it.

'Measuring' velocity makes absolutely no sense. If I estimate all tasks as 5 points my 'velocity' increases, right?

Cargo cult nonsense.",2021,No more Scrum for this developer
the-computer-guy,3,"""BuT iF wE dOn'T mEaSuRe VeLoCiTy wE aRen'T dOiNg ScRuM""",2021,No more Scrum for this developer
MrRitmo,48,"The system is designed to extract the maximum effort from employees by putting them on the spot (guilt). You cannot have a slow or a somewhat unproductive day. I  remember someone describing those standups as ""daily re-interviewing"" for the job.

https://www.reddit.com/r/antiwork/comments/i6l4en/stanfups_are_a_usually_daily_meeting_in_agile/",2021,No more Scrum for this developer
frugalonekenobi,26,"Thank you. It's a daily interview for your own job. That's stressful. 

The guilt builds up and makes me anxious.

As a person who already struggles with stress and anxiety... lol",2021,No more Scrum for this developer
turntablecheck12,8,"That is a brilliant observation, and tracks with my own experience. That framing also illustrates why the industry is so bad at dealing with mental health problems or neuro-atypicality that manifests as low mood, blunted affect, or variations in productivity.",2021,No more Scrum for this developer
DjangoPony84,38,Cargo cult Agile/Scrum gives me a fucking headache. I'm absolutely done with it at this stage.,2021,No more Scrum for this developer
Morreed,15,"Did anyone find out what it is with managers taking Agile (btw the capital A is the trigger for me to start bashing my head against the first wall in my vicinity) as another fucking process to implement? Where did this idea come from? Individuals and interactions over processes and tools, right /s. My own personal little riot is telling managers that I give forecasts, not plans with deadlines, and let them deal with the rest - but I'm in (un)fortunate position where I have that leverage.",2021,No more Scrum for this developer
JonDowd762,11,"> Individuals and interactions over processes and tools

Reading the Agile Manifesto for the first time was a big shock. I'd been working for a while in an agile/scrum system and decided to learn a bit more about all these rigid workflows and processes we couldn't deviate from because we had to be agile.",2021,No more Scrum for this developer
12345Qwerty543,32,"Isn't this a clear case of scrum / agile failing? If you ever get to a point where a story is way under estimated, that's a sign the team didn't assess the problem correctly in the first place",2021,No more Scrum for this developer
SaltyBawlz,29,"Yeah, all of OP's gripes aren't really scrum problems; they're just results of either a really poor scrum process, or misinterpretation by OP of what scrum is supposed to be.",2021,No more Scrum for this developer
Deleted Account,49,[deleted],2021,No more Scrum for this developer
superluminary,2,"Yes, I feel like scrum is actually pretty easy to do right., and when it works, it’s amazing.",2021,No more Scrum for this developer
nutrecht,3,"It's nowhere near ""almost everybody"". It's just that if you work for a shitty company it's rather likely that the next one is going to be shitty again.

I've mostly worked for companies where it worked just fine. There's nothing wrong with Scrum. There's just a lot wrong with a lot of companies.",2021,No more Scrum for this developer
HettySwollocks,10,"Ah yes, scrum - the great treadmill of the developer world. Whilst the principles are sound (speaking as a CSM), the execution has been basterised to the point of no return.

""Standups"" are exactly as you said, it's a daily update to prove your value to the team. Christ we're in multi region so there can be up to three per day (I refuse to do the others and only stick to my  home region). The original purpose of the morning stand-up was to highlight any blockers you may have, or if you need assistance from another team member - in my extreme dev days it was also used to arrange who you'd be pairing with next.

Retrospectives are now polluted with senior management, you wouldn't dare speak your mind for fear of literally losing your job. It's now a box ticking exercise to show a retrospective was completed - it has zero value, the team are almost silent.

What really makes me laugh is we have a ratified 'Agile' process, there's literally entire documents on how to carry out Scrum/Agile - you couldn't make this shit up. The whole point of 'Agile' is your team are flexible and continually improving, experimenting with new ways of working to benefit both the team and the quality of output. 

Having worked in a true Agile team, ie one where the scrum master's only job was to facilitate but not get involved in the day to day minutia of a dev team. Corporate Agile is a country mile away from the founding principles - now it's just an excuse for laziness and chaos, no planning and piling on work, Corporate Kanban is even worse. 

My stress levels would be a lot lower if I could be left alone to work on X feature for two week intervals. It'd help my creativity massively as I wouldn't be concerned about what bullshit status update I have to give the next day.

./rant OP you've triggered me :)",2021,No more Scrum for this developer
Deleted Account,3,[deleted],2021,No more Scrum for this developer
HettySwollocks,5,"Yeah. I do miss true Scrum where it was just the team in the room and we'd basically pick a few discussion points that we wanted to improve. Those improvements could be basically anything, ""Let's drop X meeting"", ""We could do with rewriting that bit of code"", ""Lets buy a coffee machine (???)"".

In the last 3-4~ roles have defined and introduced so much bureaucracy it's actually made the situation worse than what they had before (usually waterfall style dev) - and the irony is totally lost on management. My favourite argument was discussing with manager about the iron triangle - ""OK we need X to be completed with Y"", right so you're going to give me some additional developers then? ""No"", drop features, ""No"".... Okay then, you know that's not going to happen then?

Uncle bob must be pulling his hair out, it's like the year 2000 all over again.",2021,No more Scrum for this developer
matthedev,2,"> Retrospectives are now polluted with senior management....

I think executives and senior management need retrospectives, too, if the development teams have them. *Continuous improvement* can start to feel more like team-wide self-flagellation ritual if concerns aren't bubbling up or acted upon. For example, if the real problem is the team is understaffed, trying to juggle too many things, or dealing with unreasonably aggressive deadlines, suggestions that amount to working harder or making fewer mistakes won't fix that, but that's what's under the team's control. You're trading a possible small, short-term efficiency gain for burnout at that point.",2021,No more Scrum for this developer
angels-fan,7,Imagine being on a team that doesn't change priorities by the hour.,2021,No more Scrum for this developer
tuxedo25,8,"Cheers to you OP. I wish you success with your method. Personally, I've just been telling myself for years that I get paid a shitload of money to scrum. Because I'd be doing the tech stuff for free.",2021,No more Scrum for this developer
Solrax,1,Thank you for this. It got me through Sprint Planning today...,2021,No more Scrum for this developer
jookz,7,10 years in and i still have no idea what true agile or scrum even is. everyone seems to do something slightly different but uses the same word lol.,2021,No more Scrum for this developer
g051051,7,"Agile and scrum are the most odious, insidious drains on time and productivity I've seen in 31 years as a professional developer.  I'm stunned that this ""methodology"" was given even a fraction of a second of consideration.  The so-called ""agile manifesto"" was not written by developers to improve development, it was written by consultants to sell consulting.",2021,No more Scrum for this developer
Deleted Account,7,"> This means that not one workday will pass for the next 1-3 years where you won't be asked for a status update. You'll never be trusted with a single day of your own time.

I think the problem here is the estimates, not the managers being present. When I worked on a team that didn't estimate, standups felt like the team communicating with each other. On a team that estimates every ticket, standups feel like I'm reporting progress to my manager.",2021,No more Scrum for this developer
frugalonekenobi,2,"You're not wrong. If a company ever responded they had standups without scrum, I wouldn't filter them out. So far, none have.",2021,No more Scrum for this developer
nearsingularity,5,A lot of what you said resonates. Process can turn software development into a special kind of hell.,2021,No more Scrum for this developer
rudiXOR,7,"Scrum in practice is often not what the agile manifesto intended. When Scrum started, I was very interested and couldn't understand why senior dev didn't like it. Now I understand. 

Scrum is a tool to make SWE work transferable and predictable and to make the developer a replaceable resource. It favors small changes and tiny steps. From a project manager's perspective, it's a good tool to manage teams working on an existing product. It builds an environment of constant pressure (daily) and no one is really honest in retrospectives. In practice often Jira or something simliar is used and the process quite heavy.

In my experience, it's a tool that stifles any kind of innovation because it favors small and assessable increments. Scurm is also a business, every time the developers are unhappy with Scrum, the next consultants will say you implemented it wrong. It's an endless loop. 

There might be companies, doing it right, but I have not seen any yet.",2021,No more Scrum for this developer
Deleted Account,20,"Kanban: agile with all the fucking bullshit

Edit: without",2021,No more Scrum for this developer
u801e,4,With or without?,2021,No more Scrum for this developer
Deleted Account,14,"Without, I'm apparently more drunk than I thought",2021,No more Scrum for this developer
JuliusDelta,5,"My team has come a long way. When I joined we were 6 developers and our stand ups were:
1. Every day
2. Entire dev team
3. Both the CTO & COO (head product guy and co-owner of company) were there.

It frequently devolved into needing reprioritize something and status update.

A few years later we were about 15 developers across 3 scrum teams. Each scrum team had a product manager dedicated to it and was completely autonomous when it came to process. One team had stand up twice a week. Another team had it every day. It just depended on the team. This was the most productive phase of our company. They were true to form stand ups and the product managers were very serious about limiting scope and protecting time. If they over estimated, the next sprint planning they’d go ahead and adjust point limit back.

I can’t tell you how many meetings we had when it came to defining the definition of points but we eventually came to a consensus.

This was a win for everyone. Status updates did come but at the cadence of the team, not the COO or product manager. Teams learned how to more accurately estimate. Resulting in a year of features being released on time and in 2 cases ahead of schedule. Deadlines were also soft as we always planned for “beta” style releases and AB testing.

We were bought by a huge international company just over a year ago and it’s effed up our whole process. They’ve allowed us some autonomy as long as we deliver but what’s autonomy mean when there’s pressure like that? Next to nothing really...

Anyway all that to say, yeah it can get out of hand but sometimes you stumble upon some magical year where everything works amazing and it’s very satisfying. Definitely the best year of my career so far.",2021,No more Scrum for this developer
the-computer-guy,5,"The worst thing about scrum in my experience is that the team never stops being at the stage of ""figuring out how this process is supposed to work"".

Like half the time in planning meetings is literally spent on figuring out how Jira works. Every. Goddamn. Time.

Then the lead who obsessively follows the sprint burndown chart is wondering why it isn't going down because we aren't marking stories as done in the middle of the sprint... ""We have to do better than this""

The only times I've seen scrum ""work"" are in ""lab"" settings like at university or in trainings. In real life it has been more or less of a shitshow every time.",2021,No more Scrum for this developer
Deleted Account,5,"I am so tired of Scrum and daily standups, it takes the creativity and individualism out of this job. I feel like the industry(TLs and product owners/managers) are trying so hard to use Scrum and Jira to make software development into a really boring thing to do.",2021,No more Scrum for this developer
Deleted Account,9,"I've only been at 1 company and 1 team so far, but I've had 3-4 managers and none of them have ever asked or even acted like they cared about whether we're getting our planned work done. Our scrummaster takes that on, and I think that's how scrum is supposed to work as I understand it. It seems tho that managers getting involved like this is pretty common based on what I read.

As for the velocity thing goes, my team adjusts our velocity based on past performance every quarter. We will average out what our velocity was per sprint and go with that for a few months as our capacity. Works pretty well",2021,No more Scrum for this developer
TopOfTheMorning2Ya,3,"On my team I’ve felt like the manager, scrum master and product owner are almost all like managers. Three people you have to defend your progress to. Kind of painful.",2021,No more Scrum for this developer
Deleted Account,4,"I gotta say, I feel you bro. I know that frustration when it feels like there's a healthy and fairly obvious solution to a problem (just schedule the next damn sprint for 10 and don't be a zealot about it!), but it feels like no one wants to listen, even though the team as a whole suffers.

FWIW I've had daily standups that I think were healthy. I can see how it can feel like pressure, but I ultimately turned it into an opportunity to help keep myself organized.

Thanks for sharing your results on those questions. I would have thought they might seem a bit aggressive, but it sounds like you're getting good results. Kudos, I might give them a try myself.",2021,No more Scrum for this developer
Deleted Account,4,[deleted],2021,No more Scrum for this developer
hopbyte,2,"I used to call our Scrum Master a Scrum Dumpster, but we were good friends.",2021,No more Scrum for this developer
halfercode,5,"I really like daily stand-ups, and I don't think they are antithetical to team members being trusted to use their time effectively. Indeed, team meetings are useful for team-building and mental health support, which - for folks that are 100% remote due to the pandemic - is a great thing right now.

> Whenever I used to encounter a new problem, my reaction used to be 'wow, that's a neat problem, I wonder what my solution will be'; but now my reaction is 'oh god, I estimated 5 points for widget X and this is an unknown unknown, how long is it going to take to solve?

That should not be a cause for concern. Raise it with the scrum leader, either when it is discovered, or at the next daily stand-up. The sprint may need to be re-planned based on a new story estimate, but that is not your problem. The aim here is to indicate that a piece may overflow the existing estimate, and priority calls need to be made, in conjunction with stakeholders. In other words, don't hide the problem of a failed timebox.

I should say that nothing I've said here indicates that Scrum is infallible. Of course any system can be used to create a pressure-cooker environment, and I think that is a misuse of Scrum. Indeed, if I felt pressure was weakening my performance, I'd raise that issue at retro too - it is what the retro is for.",2021,No more Scrum for this developer
Deleted Account,4,"I never understood the point of telling my team what I have done the day before and what I plan to do today. Especially when most of what gets said is the tasks on the stories.

If someone wants to know what the status of my work is, just see what is closed/active. 

Hearing other peoples lack of productivity or over productivity does nothing for everyone else.

Now if your using stand up to bring up blockers, that works.",2021,No more Scrum for this developer
sethg,7,"Managers who do that kind of bullshit are saying that they do “Scrum” for the same reason that North Korea calls itself a “People’s Democratic Republic.” If “Scrum” weren’t trendy, they would *still* be cracking the whip at their developers and telling them “you have to do better”—they would just find some other excuse for it.

My own employer does pretty close to a “true Scotsman” implementation of Scrum. But if selecting for non-trend-following employers is working for you, I’m not going to talk you out of that.",2021,No more Scrum for this developer
GroundbreakingAd9635,3,Imagining a scrumplestiltskin tshirt with frustrated devs and someone asking about missed deadlines now,2021,No more Scrum for this developer
Deleted Account,3,"I had a PM in my first job who tried to argue down our point estimates. He invited himself along to these story estimation meetings and if someone said, ""that seems like an 8 pointer"" he would interject and say, ""why is that 8 points? Didn't we do X or Y in 5 points?""

You're correct that the issue is trust. If the organization is struggling with developers always missing deadlines and big waterfall cycles, someone in upper management will inevitably say we need to tighten things up in those dev meetings.

To do it the ideal way, you really need to have a) actually good, experienced developers, and b) a technical leader (CTO or VP level, probably) who knows how things should be done and protects the team from the business guys who want to offshore everything.",2021,No more Scrum for this developer
turntablecheck12,3,"Well said and summarised. Scrum (at the least, as implemented everywhere I've experienced it) is just micromanagement with better PR.",2021,No more Scrum for this developer
natnit555,5,"There are 2 daily standup in the team I joined now. But the 2nd one, at end of day is 99% one-way, we post our status in the group chat. Well adjusted I would say.",2021,No more Scrum for this developer
frugalonekenobi,12,Good **lord**,2021,No more Scrum for this developer
Solrax,9,"Why do you need the morning stand up if you covered it the night before?  Unless you're expected to have worked at night, don't you just repeat it in the morning?",2021,No more Scrum for this developer
natnit555,2,"we have some other team working different timezones, updates in afternoon will be discussed in higher sync up meeting by the leads. and so on.

in case of small team and one single location only, then yeah, 2nd stand up has very little value if not none.",2021,No more Scrum for this developer
deathhead_68,2,My first company the manager realised he needed to step out of ceremonies and from there the team owned the process. I had to leave for personal reasons but my god we nailed it. Started doing proper retros and stuff too. Your description sounds like our scrum before we changed it. I've only got 6 yoe but scrum when done properly was great for me. Sometimes we switched to kanban when it made sense to.,2021,No more Scrum for this developer
macoafi,2,"Huh. We base our sprint capacity on the average of the last 4 sprints then pro-rate based on days off and holidays.

We actually recently sat our Agile coach down and went through her equations with a fine-toothed comb and found a bug in her equation that explained why we were somehow still ending up with so much leftover. (We weren't properly accounting for points from rolled-over tickets, so one day the spreadsheet came up with ""ok, so our average capacity is 30, and when we include rolled-over tickets, that lets us bring in 37 points of new work."" And all the engineers went ""wait, what? Run that math by us again. Our capacity is 30, so we're going to do 37 \*plus\* finish rolled-over tickets?"" The bug only showed up when we wildly underestimated a feature and rolled over a ton of work.)

Our standup format has varied. The tricky part has actually been ""let's not get into the weeds on this right now"" because we focus mainly on sticky stuff we run into.

I also admit, though, that I'm not sure what makes it ""scrum"" versus any other form of Agile. Maybe we're using some other one? I wouldn't know the difference.",2021,No more Scrum for this developer
nutrecht,4,"I am always surprised that smart people can come to the conclusion that they should shoot the messenger, instead of tackling the underlying issue.

You worked for bad companies. What do you think happens if these bad companies do NOT do scrum? Do you think a micro-managing manager micromanages because of scrum, or despite of it? I'll let you in on a secret; it's not the former.

You are going from a situation where you worked for shitty companies to filtering out mostly for even shittier companies. I've been a developer for over 18 years and have worked for a lot of companies where Scrum worked perfectly fine. I've never ever worked for a company that did not have a process that was anywhere near 'fine'.

You do you, but I hope that others who read this understand that you're coming to completely the wrong conclusion.",2021,No more Scrum for this developer
svhelloworld,1,Preach.,2021,No more Scrum for this developer
JonDowd762,0,"Even if the majority of companies do a bad job of scrum, I agree that filtering out all scrum companies won't help your search. Do you have any tips for better filters or questions to use to find good companies? Any red flags or green flags in your experience?",2021,No more Scrum for this developer
nutrecht,2,"I always ask how long daily standups take and who are in the standups. I also always ask how retro's are handled. Those two generally give me enough of an indication what the current situation is.

In addition; I am generally in Lead roles and have no issues with helping companies with their Scrum process. So if they are open to making changes (such as not allowing manager inside stand-ups and retro's), I'm more than happy to offer my services.",2021,No more Scrum for this developer
JustAUserName879,4,"It sounds to me like you have worked for unreasonable organizations. If your managers and organization are not willing to follow the rules put in place that benefit the development team, than of course things will go poorly. This sounds more like a problem with the management teams than scrum in and of itself.",2021,No more Scrum for this developer
mothzilla,4,I think good scrum beats good waterfall.,2021,No more Scrum for this developer
frugalonekenobi,22,"And the Lord sayeth that there shall only be two possible processes, Scrum and Waterfall.",2021,No more Scrum for this developer
mothzilla,1,Yeah we do Scrumfall. Coming from Waterscrum it was a total eye opener.,2021,No more Scrum for this developer
ghee22,2,"Sucks, sorry. Not all managers are like this, I suggest you look around.",2021,No more Scrum for this developer
Purpledrank,2,">It's well established that managers were never supposed to be in standups, but there they are every time.

Even when they're not there, they have someone on the inside, or more likely, they record the meetings on a conference. Although sometimes managers need to be present because not everyone behaves. I've also seen the case where managers had to be in every dev slack as well.

>You'll never be trusted with a single day of your own time.

Kind of. You have to build trust by using their system. Just tell them what you worked on, work hard and it usually always works out.

>This creates a pressure-cooker environment where you're set up to fail in a panopticon.

That's the goal. These people only want to hire developers for 1 year, but don't want to get sued by employment attorneys. So they build up all this paperwork to document that the developers were all bad so they had to outsource everyone.",2021,No more Scrum for this developer
Deleted Account,2,Someone always eventually invites the scrum master or the manager to the dev only channel and it's annoying af,2021,No more Scrum for this developer
Purpledrank,1,In my last place they insisted on being there and closed the other chat that had devs only. That place was not doing well and covid19 seemed to really hit them hard.,2021,No more Scrum for this developer
Fanboy0550,1,"What do you think about daily check-ins vs standups? We have a weekly standup meeting but at the beginning and end of the day, we post on slack(async) about what we are working on, any issues, outstanding PRs, etc. The check-ins are not exactly status updates but what bugs/stories we're working on",2021,No more Scrum for this developer
Deleted Account,-1,[deleted],2021,No more Scrum for this developer
Deleted Account,9,"I'm a consultant and I've seen dozens of projects, most using scrum and a few kanban. Every time scrum is just a massive headache because in an R&D project you just can't estimate and break down tasks enough without spending most of your time in Jira to please some stupid process. Kanban is just massively easier and less overhead. Sure if you're a PM and need to report back to the CTO you might want a more corporate model with timeliness and charts beut in reality it doesn't work because people don't want to spend their time breaking down things in tasks where half of them have to be removed in the end anyway because you learnt something about your problem along the way that wasn't included in the initial planning. Rant over.",2021,No more Scrum for this developer
frugalonekenobi,8,"If you were to describe a system perfectly with no ambiguities (sufficient to remove all unknowns), by definition, it would be executable as a program. The only way to remove unknown is to write the system. That's why it's called 'unkown unknown'.

&#x200B;

Hey, like I said, maybe the true scrum team is out there somewhere. Maybe you're in it.",2021,No more Scrum for this developer
TangerineTerror,22,What on earth are you building where every unknown and potential tech issue can be foreseen before you even start the task?,2021,No more Scrum for this developer
Deleted Account,15,For real. It's impossible to know the unknowns until you've done the task lol,2021,No more Scrum for this developer
SaltyBawlz,1,"Honestly just sounds like you work with a micromanager or have anxiety over a process that you really shouldn't have. 

Saying that daily stand-ups ""devolve into a morning status update"" is very misinformed; that's what they are supposed to be with or without a manager present. You're supposed to state what you did yesterday, what you're doing today, and any roadblocks you may have. What are you expecting stand-ups to be if not that?

I agree on your point about velocity as I've experienced that myself, but at the same time it just seems like your team is doing scrum wrong. Any team doing it right will adjust accordingly.",2021,No more Scrum for this developer
TopOfTheMorning2Ya,6,My last two Scrum masters would tell you this: “The daily stand up IS NOT supposed to be a status meeting”,2021,No more Scrum for this developer
matthedev,2,"> Saying that daily stand-ups ""devolve into a morning status update"" is very misinformed....What are you expecting stand-ups to be if not that?

The Three Questions scrum meeting is a common recommendation for teams new to Scrum; it's sort of training wheels for team-based software development.

The Agile Manifesto originated with experienced software consultants. When you have a self-organizing, self-motivated team working towards a common goal, a scrum meeting can look different:

* Very informal
* Quick
* Takes a pulse on overall progress and the direction needed for the day
* Surfaces any blockers and impediments that haven't already been raised
* Finds collaboration points

If someone's plugging away at a routine task without issue, there's really not much that needs to be shared with the rest of the team. If the team is working on three or four mostly unrelated projects or the team has specialists that usually can't do much to unblock each other, low-level status updates aren't much help.",2021,No more Scrum for this developer
SaltyBawlz,0,"I don't know what you're getting at here. I agree with you. My stand-up updates are always just something like ""Still working on X card, might reach out to [person] if I have questions. Next."". If somebody is giving low-level details into what they are doing then they are doing stand-up wrong.",2021,No more Scrum for this developer
matthedev,2,"For whatever reason, stand-ups usually seem to drift away from this short and sweet update, in my experience. On my current team, such a status update would be considered too short. More detail must be given to provide ""accountability."" Even on teams where more detail is not explicitly required (but not too much!), there seems to be a regular drift to more detailed updates.",2021,No more Scrum for this developer
allThatSalad,0,"You can tell from the name. Scrum means a bunch of sweaty guys smashing into each other on a rugby or American football team. I chose a job that involves me sitting on a chair with wheels and pressing buttons on a keyboard. It's the farthest thing from piling together with a bunch of dudes to try to move another bunch of dudes.

Same thing with Sprint. That means running as fast as you can for a short distance. If I'm constantly sprinting it's not going to work.

At least agile means flexible like you don't always have to do things the same way. I'm a major hater of scrum and all sports analogies applied to software development.

When I started working on software, daily status meetings were only employed when a team was in trouble. I strongly dislike the stand-up meetings. Oh yeah, and I don't like standing in meetings or at my desk. I chose this line of work because I love sitting on my ass. 

Bunch of nerds pretending they're good at sports.",2021,No more Scrum for this developer
-_kevin_-,1,"Agreed, Scrum unfortunately gets a bad rap because it is poorly implemented or implemented then left to devolve to command and control under the guise of being agile. 

If many workplaces compared what they do with what is actually in the Scrum Guide they would be surprised.",2021,No more Scrum for this developer
McHoff,1,I'm not sure you should be blaming scrum but rather the crappy place you're working at. If your company didn't do scrum but rather something else I guarantee you all of those problems will follow.,2021,No more Scrum for this developer
RICHUNCLEPENNYBAGS,1,">	It's well established that managers were never supposed to be in standups

Isn't that retro?  I've never heard of this rule.

Anyway, my opinion is that a lot of this ends up being optimizing for what your manager wants to see.  If that's moving tickets over to the right, you know, adjust what you're doing to be freer about spinning off tickets if some side issue is going to hold you up, flog your reviews until someone looks at them, avoid pulling in new tickets, etc.  Sometimes it's more about how you do the accounting than the specifics of the work you are doing.",2021,No more Scrum for this developer
nitely_,2,">Isn't that retro?  I've never heard of this rule.

It's not retro. So, the Scrum team is made of the devs, the PO, and the Scrum master. The standup is for the Scrum team. There are no managers in a Scrum team. This is why many managers take the place of the Scrum master, or the PO. I read it a while ago in the Scrum guide, so I'm fussy on the details.",2021,No more Scrum for this developer
RICHUNCLEPENNYBAGS,1,I mean you’re still going to have a manager even if your team has a dedicated scrum master. It seems logical for your manager to be in the meeting and I’ve never heard of any rule against this(at some point I even had a certification for Scrum lol),2021,No more Scrum for this developer
nitely_,1,"Don't complain to me, I didn't invent Scrum. Here: 1. [Scrum team](https://www.scrumguides.org/scrum-guide.html#scrum-team), 2. [Daily Scrum](https://www.scrumguides.org/scrum-guide.html#daily-scrum), 3. [Bonus](https://www.scrum.org/forum/scrum-forum/5349/who-allowed-attend-daily-meeting)

> at some point I even had a certification for Scrum lol

If most places do Scrum wrong, why would you be surprised they are teaching it wrong?",2021,No more Scrum for this developer
RICHUNCLEPENNYBAGS,1,"I don't see anything in your links about ""managers may not attend the stand-up,"" and in your forum post people are saying that managers may ""attend"" but not ""participate.""

Anyway I don't see the point in getting bent out of shape about the ""right"" way to do Scrum since ultimately like any other job the right way to do things is more or less the way people signing the checks want them done.",2021,No more Scrum for this developer
nitely_,1,">I don't see anything in your links about ""managers may not attend the stand-up,"" and in your forum post people are saying that managers may ""attend"" but not ""participate.""

The link says it's for the Developers of the Scrum Team. About the forum, you just read the first reply, didn't you? IMO, as long as the meeting doesn't devolve into a status update it's ok, however that may be difficult when the manager is in the room.

>Anyway I don't see the point in getting bent out of shape about the  ""right"" way to do Scrum since ultimately like any other job the right  way to do things is more or less the way people signing the checks want  them done.

The point is for some it's the difference between wanting to work for such company or not, hence the OP's rant.",2021,No more Scrum for this developer
RICHUNCLEPENNYBAGS,1,"> The link says it's for the Developers of the Scrum Team.

That's right but that doesn't seem to suggest, to me, that other people are barred from observing.  And as a practical matter it's useful for your manager to be there to unblock.

The other forum posts are all over but I don't see anyone saying there's a hard-and-fast rule that the managers aren't supposed to participate the way they have for retros.",2021,No more Scrum for this developer
nutrecht,2,"> Isn't that retro?

Both. It completely changes the dynamic of these meetings.",2021,No more Scrum for this developer
RICHUNCLEPENNYBAGS,1,"OK, well then I agree with the OP that nobody does it.",2021,No more Scrum for this developer
saposapot,0,"Your problem is with bad management not scrum.

Your example or unknown problem requiring more time is actually a perfect example where an agile environment is much better suited to handle. On waterfall there is no way to handle it but to delay the project.

It just seems your management is using waterfall in sprints. Not scrum and definitely not an agile environment.",2021,No more Scrum for this developer
denialerror,1,"No scrum isn't necessarily better, it just shifts the work somewhere else. Kanban for instance looks great with just a To Do list to work through and no meetings but it shifts all that prioritisation and backlog management from a fortnightly team exercise to a daily job. And you are still going to need to refine and size tickets, or find some other way of ensuring tickets aren't so large that they block your work in progress. 

You'd be better of just asking what a company's approach to Agile is. The majority of places I've worked haven't cared about using story points as a measure of velocity and the only team that did only used it as a measure within the team itself and was never reported to other parties. I've not had any of your issues with standups either. I've had managers in them but only because they are part of the team and also give their updates so everyone knows what they are doing/what's blocking them.",2021,No more Scrum for this developer
scopefragger,1,"As a manager of multiple teams,  I force my leads to review as part of the sprint planning,  and I hold my leads accountable for variance, not velocity. 

I can’t to see sprints closed not rolled over.

I join a team sprints once a week,  on the same day for each team,  both to be seen present - but to also see if there’s anything I can do to help.  Typical I don’t ask questions - unless I don’t agree on the work that’s been picked up ( for example
Picking up manual work that I would prefer automated )",2021,No more Scrum for this developer
Deleted Account,1,">Projected' velocity is never adjusted based on measured capacity. If the team points '20' for sprint 0, and only completes '10' points at the end of the sprint, the rulebook for Scrum says you clearly overestimated your capacity. But come retro it's always 'what happened' and thinly veiled 'guys, we have to do better'. The next planning session points 20 again, repeat ad nausea.

We had this problem too but I kept pushing we should  adjust our expectations. While I did get a lot of pushback at the time, we're doing much better now.",2021,No more Scrum for this developer
matthedev,1,"I'm just curious what development processes you'll be looking for in your next position then. Are you looking for another agile approach like kanban, lean, or extreme programming; or you looking for something closer to the big, bureaucratic waterfall approach of yore; or are you looking for something else entirely?",2021,No more Scrum for this developer
Smokester121,1,"Yeah we are remote I just straight up expect daily updates. I just need a pulse if things are going wrong, and sometimes the Devs will start a chat about things, and I try and reign it in.",2021,No more Scrum for this developer
flyinmryan,1,"I have been a fellow filterer for a few years now.  My background was military and agile had a completely different meaning.  It meant being able to physically and mentally pivot from one thing to another and having the training to be able to handle it without requiring constant updates and estimates that had no benefit.  Attending ""bootcamp"" was *different,* and ""deployments"" were *different,* but those new concepts for me were no problemo.  I got my first web developer job at a small company building a ticketing/booking/event scheduling platform and integrated rebuilt consumer facing websites with APIs.  Pretty straightforward.  I spent four years there.  Agile, stand-ups, product owner, scrum, retro...those terms were never uttered and I was completely ignorant to what was waiting for me beyond that job.  I'll just say I was blind sided with Agile.  


Daily standups, followed by smaller team standup, followed by one on one, followed by product owner swinging thru...and then it was lunch time followed by QA meeting.  I used to be most productive from 7:30 to about noon and it had switched to zero productivity, sometimes regression in that time period.    


I have bounced around different jobs, some which on the outside seemed like great career positions, and others nothing more than a gig to get me by for a few months, and they've each had their own version of Agile and standups in some form.  Sure, like you said you can put your head down and bear it for a few years, but goddamnit there's only so much BS a man can take without completely giving in, giving up, and just realizing this is the life I've got myself into.   The logic just doesn't add up.  You can't be agile while sticking to a scrum process and redundant ticket updates and client meetings and ""product owners"" and ""customers"" which are neither of those things.  


The QoL of never having to hear or deal with those things again is almost priceless, but I'd work for half the pay if I could.  At least until I figure out what the hell else to do with my life, because this shit ain't it.  


Keep it real",2022,No more Scrum for this developer
QualityVote,1,"Hi! This is our community moderation bot.

---

If this post fits the purpose of /r/ProgrammerHumor, **UPVOTE** this comment!!

If this post does not fit the subreddit, **DOWNVOTE** This comment!

If this post breaks the rules, **DOWNVOTE** this comment and **REPORT** the post!",2022,After every scrum meeting
Deleted Account,1042,AHHHHHHHH DONT CALL ME OUT LIKE THIS,2022,After every scrum meeting
razuten,265,"""I'm in this picture and I don't like it""",2022,After every scrum meeting
Deleted Account,63,You might want to rethink that moustache.,2022,After every scrum meeting
Deleted Account,48,It would be in PROD tomorrow if I didn't have to document how you're supposed to fuckin breathe while they're reviewing my unit test.,2022,After every scrum meeting
coniferous-1,128,"Either I can be the bullshit/distraction shield for the junior developers, or my estimates can be accurate. Take your pick.",2022,After every scrum meeting
Dave5876,71,Me in every Agile stand up call: *random bullshit go*,2022,After every scrum meeting
thisguyfightsyourmom,60,"This

If you want me to solve the rest of the team’s problems, mine will take longer

It’s just how time works",2022,After every scrum meeting
ChillyFreezesteak,32,A good project manager would be figuring that into your capacity.,2022,After every scrum meeting
Deleted Account,5,A good senior will communicate those efforts in time.,2022,After every scrum meeting
thundercat06,13,"Not with that attitude!! That's what all that extra time between 5pm and 9am and Saturday / Sunday are for.  Was basically told something along those lines by PM once when I made the point that my calendar had about 25 hours of team meetings and client calls in each week of the sprint.  Was told development hours remain the same whether it is during business hours or not.  Not his problem.  I told him that is not how sprint capacity works.  He laughed, I laughed, half the team quit.. Was a great time.",2022,After every scrum meeting
Deleted Account,33,"""I feel targeted"" -30 year senior dev.",2022,After every scrum meeting
KB2408,0,"It's a straight up progress report every day. If you have an issue you need to talk about or something that everyone needs to hear, just bring it up. No need to know every little detail of every second",2022,After every scrum meeting
Old-Comfort-8484,-4,Hahaha get wrecked pleb,2022,After every scrum meeting
AnotherWarGamer,1,"My current project is like this... I planned to raise money, but am instead doing work that I ment to do after fundraising. In the long term it isn't any slower, but I've missed my fundraising target by days and it is still going.",2022,After every scrum meeting
Deleted Account,2443,A good cop out strategy is claim it will be done with no distractions in 2 days.... PM can't stop sending status emails on other issues so I always have an out.,2022,After every scrum meeting
TurboGranny,1311,"I use this all the time. Essentially, ""There are about 20 hours of work left, but there is about a 2 hour spool up time before progress can be made on that 20 hours. If anything jumps in to interrupt the devs, they will have to address that new problem then start their 2 hour spool up time all over again. As an example, getting 3 hours straight, then interrupted to work on something for 2 hours, then another 3 hours straight will result in 2 hours of progress being made on the project. This is just a fact of development. You either have to run interference and keep everyone out of the dev team's hair, or accept that it's going to take forever."" I will admit that being constantly interrupted for BS (even though you were repeatedly told that the project was priority number 1) every time you finally get to spooling up will cause this anxiety feedback loop of, ""I'm not even going to bother getting started because I know I'll get interrupted before I can make any progress."" Then you'll burn days practically doing nothing and think, ""fuck it, I can do this. I'ma just shut everything out and knock this thing out."" It is about 90 minutes into your spool up that those bastards are BEATING DOWN YOUR DOOR as a mother fucking horde with all these problems that only exist because end users are idiots. ""What do you mean I broke the entire process because I didn't follow my SOP and uploaded a completely different data format that doesn't even contain the data we are trying to process?""

Edit: Because some people don't know what I mean, [here is an old comic](https://img.devrant.com/devrant/rant/r_55338_NBSDq.jpg) that illustrates this that I have hanging on the entrance to my dev area.",2022,After every scrum meeting
awhhh,452,"My company is fucking dope like this. My CEO has basically said to us all if you start getting bogged down turn off slack and hammer things out. We have minimal meetings, 2 to 4 a week, and I’ll routinely take them when I can. My PMs are pretty good people that understand flow and will just cater to the devs when they have a massive release. 

Because my area of the company is cut off from the rest of the company we are by far the leanest and fastest devs in the company. Our projects have half the devs as our corporate overlords do and we accomplish things way faster. 

The only problem we have is with so much freedom there’s two devs that drag their feet and massively over evaluate how long a ticket will take. When there’s an inherent trust in your employees there is bound to be those who fuck with that. But they do get work done so would you rather have a few more PMs crack a whip or just consider it breakage?",2022,After every scrum meeting
billiam632,202,I was going to say this as a PM i encourage my devs to tell me to fuck off to focus on their top priorities. I don’t always have full visibility on what they are working on (agency life) so I trust them to literally ignore my pings and I’ll deal with the blow back myself.,2022,After every scrum meeting
awhhh,147,"This is literally what I believe a PM is suppose to do. Trust us to get things done, vouch for us, shield us from the stress of the higher ups strange expectations, and work with us on tasks. If we don’t live up to our end of the deal usually we’re pissing off another dev and they’ll go to the PM to be dealt with because they’re slowing us down. It’s this type of stuff that makes me not afraid for me to take responsibility for myself when I fuck up and tell the whole team",2022,After every scrum meeting
TristanaRiggle,91,"The absolute WORST PMs I ever had were basically middlemen for customer comments.  Like they often literally just copy-pasted comments from the customer and FWDed them to me.  At which point, what value do you THINK you're adding? (And this wasn't even filtering of crap, I'd still get inane ""deal with my screw up"" comments or ""explain AGAIN how this tool works"" while working on major functionality issues)",2022,After every scrum meeting
lucidbasil,57,"That is not a PM. Maybe by title, but you can't put lipstick on a pig... or something like that.",2022,After every scrum meeting
LostNord,42,"As an ex PM (now Delivery Lead) if a PM doesn't know the dev lifecycle and what a developer needs to get their fucking job done, they shouldn't be in the job, simple as. The only meetings a Dev needs is the dailies for blockers and the odd ad-hoc larger meetings with the wider teams to hash out building items where FE/BE overlap.

I always tell junior PMs that as soon as they interrupt the Devs they've missed their initial deadline.",2022,After every scrum meeting
Bojackartless,22,Literally my definition of a PM (including product). Yet my bosses feel it’s okay to include all 10 devs in 4 1h long calls each week.,2022,After every scrum meeting
LostNord,3,"That's simply a catastrophic waste of everyone's time, let me guess they're the kind of bosses of tout about how they're so ""agile"" and thinks agile means working more quickly.",2022,After every scrum meeting
Bojackartless,2,"Haha

1.	Agile means fast
2.	we need to agree and take a sign off at beginning of the development, else we don’t do anything 

They are the kind of tech boomers who received their education 20-30 years ago and never got upskilled.",2022,After every scrum meeting
awhhh,11,We see none of that. I’ve heard whispers and often will see some of the most outrageous shit sent to us by support teams; which we all find funny.,2022,After every scrum meeting
DS_1900,8,“I take the requirements from the customer and hand them to the engineers - I have people skills - what the hell is wrong with you people”,2022,After every scrum meeting
kknow,6,"Yeah, and then ask me for my opinion on a matter and copy paste that to the customer...",2022,After every scrum meeting
Aobachi,2,I used to have a PM like this. Took me a few months to realize but afterwards I really appreciated what he does.,2022,After every scrum meeting
snf,2,"Meanwhile my PM typically interrupts me 3-4 times a day on average to ask me ""hey who should I assign this task to?"" or ""what's the status of this task that someone else worked on?"" Motherfucker do you expect me to do your job as well?  If so, could you at least batch up these requests so I can at least get fewer interruptions?  How have you worked in software as long as you have without understanding how disruptive this is?

Sorry, that rant has been pent up for a while now.",2022,After every scrum meeting
whoweoncewere,1,I started doubting myself as a programmer/dev and added a minor for PM in STEM onto my degree. How do you effectively get your foot into this field when a pmp cert requires experience?,2022,After every scrum meeting
DS_1900,2,Stop trying to lead the world without any experience first…,2022,After every scrum meeting
whoweoncewere,1,I've got experience in program management and working as a lower level supervisor in the military. I'm not completely clueless on how to manage a team and assets. Project management is a bachelor-level degree and typically doesn't require hands-on experience.,2022,After every scrum meeting
stationhollow,1,I started as an analyst managing smaller projects in my area that didn't require a dedicated PM and it grew from there.,2022,After every scrum meeting
Smoked_Bear,1,As a project coordinator usually,2022,After every scrum meeting
talkingtunataco501,1,"When I was a PM, I had to tell devs to stop focusing on everything that was going on and focusing on just the top priorities. I had a dev where if I gave him the top 5 projects for a quarter, he would immediately start asking a ton of questions about #5 and wouldn't ask anything about #1. I had another dev that if there was a conversation going on, he would whack a mole his head up and give his input into the conversation. It got so bad that if I had to talk to someone on the team, I would take them into a break out room to talk just so the Mole wouldn't pop up his head.

I started taking away the distractions for those 2 devs, they didn't like it, but the work got done faster.",2022,After every scrum meeting
Deleted Account,18,[deleted],2022,After every scrum meeting
awhhh,11,I have the ability to do both as well. Every dev that’s done freelance does. That would fucking kill me. Your comment is why dealing with recruiters can be a total nightmare.,2022,After every scrum meeting
flatspotting,9,"> he only problem we have is with so much freedom there’s two devs that drag their feet and massively over evaluate how long a ticket will take. When there’s an inherent trust in your employees there is bound to be those who fuck with that. But they do get work done so would you rather have a few more PMs crack a whip or just consider it breakage?

You have these people anywhere with freedom.  I have always taken it as a price to pay for the freedom.   Sure, there's some guy making the same doing half as much - but there's also a lot of people at worse places.",2022,After every scrum meeting
Deleted Account,32,"Do y'all have retrospectives and if so, have y'all discussed how some team members are over estimating workload and any way to bring that into a more accurate process?

What might your estimation techniques look like, if you don't mind me asking?",2022,After every scrum meeting
AndersBodin,53,I have never met anyone who estimates well,2022,After every scrum meeting
CatWeekends,50,"That's because it's all bullshit.

The idea is that you get ""better"" over time with estimations. But that would rely on our work being nearly identical to prior work.

I dunno about y'all but every sprint contains brand new ~~horrors~~ issues that we have to figure out. Rarely is it ever even remotely the same kind of stuff.

That and I read a paper a while back that had an interesting unintuitive conclusion: the more people do something, the *worse* they get at estimating how long it'll take.",2022,After every scrum meeting
Thedarb,25,">	the more people do something, the worse they get at estimating how long it’ll take.

Over or under estimating? If it’s over that makes sense, it’s the other side of the “valley of ignorance” we see with the whole Dunning–Kruger effect. 

When you are on the ignorant side you look at the task ahead and go “pfft this should be easy, what could possibly go wrong? I can probably knock it out in a week with time to spare”.

When you look at the same task from the informed side you think “man there are so many things that could go wrong with this. Plus I know there are like 15 ways this can be achieved and I only know 1 of them comfortably, but I know enough to know it’s not the best way. 
I could probably get a sloppy version out in a week, but that’s just guaranteeing problems in the future which I’ll inevitably have to deal with anyway, so let’s say 4 weeks to production with full best practice.”

If it’s under estimating sounds like those people have done the task a few times to feel confident enough to hike right into the middle of the valley of ignorance and make camp, over confident in their easy small wins, blissfully unaware of the full scope of issues that task could have.",2022,After every scrum meeting
CatWeekends,14,">If it’s under estimating sounds like those people have done the task a few times to feel confident enough to hike right into the middle of the valley of ignorance and make camp, over confident in their easy small wins, blissfully unaware of the full scope of issues that task could have.

This was more or less it.

One of the real-world examples I remember the paper giving was driving somewhere, say to work.

After you've been doing it for a while, you'll start to gain a lot of confidence in it... and also not really pay much attention to it. So after a while, even though it typically takes 20-30 minutes to get there, you might believe or tell people it only takes 10-15 minutes.",2022,After every scrum meeting
bubblesort,1,Agreed. Nobody really estimates well.,2022,After every scrum meeting
SnooSnooper,16,"My team ""tries"" to do relative estimation with story points, and we normally converge on our estimates but only because I'm done arguing with them.

""Everything has to be below an 8"", so we just don't estimate above 5 no matter the risk or complexity, unless it clearly can and should be broken down.

""1s are for text-only changes"", except they don't follow this rule and just estimate anything that can be implemented (never mind testing or risk) in under a day as a 1.

""Devs are expected to be able to complete 8 story points every sprint"", so it doesn't actually end up being relative estimation at all. They're prescribing a velocity rather than measuring it after the fact and using that to adjust planning.",2022,After every scrum meeting
itsfinallystorming,13,Yeah sounds familiar.  I'm kind of jaded now and think of the whole exercise is multiple groups just trying to game the system and make the numbers represent whatever they want them to represent.  Basically its becoming a company political system more so than work measurement system.,2022,After every scrum meeting
SnooSnooper,4,"I will say that our system is ~mostly~ effective; at least, it's a sure improvement over our lack-of-process several years ago. We don't miss release dates often. I think it's mostly because we are a small, tightly-knit team, so we all more or less know what we can accomplish. Fortunately, only devs are involved in estimation, so we aren't usually impacted by outside political influences. I shudder to think how it would be if PM or sales were involved in estimation.",2022,After every scrum meeting
thefullhalf,8,My biggest complaint is when the scrum master and the pm are the same person. Agile doesn't work if there isn't someone to protect the sprint and the process from the business. That conflict is necessary.,2022,After every scrum meeting
AndersBodin,1,"but why would you be jaded? just accept that is a political system to be gamed and game it better than anyone else. regardless of what number you put you can always make sure to finish on time by adjusting definition of done, quality, cutting corners, etc.the stuff that you cut you can just place in a tech debt backlog in the chill period when you are in a clean up and maintenance faze of the project and don't have a hard delivery schedule and sprints.",2022,After every scrum meeting
itsfinallystorming,1,"I should probably clarify that I'm in the management not a pure developer.  So the reason is because it introduces political issues and allows people to make excuses really easily.  The focus has shifted from producing deliverable value to just trying to game the system.

It makes a lot of room for people that don't really contribute much to leach money out of the company from the people that do.  Back in the before times of 2019 and earlier it was fine to have a bunch of people arguing over points to avoid work because money was easy to raise.  Now its much more of a problem.",2022,After every scrum meeting
AndersBodin,1,"yup thats pretty much how every place i worked at does it, but as long as managers get a number they are happy.",2022,After every scrum meeting
msluther,21,"I’m a firm believer in “no estimates”. In that, the only valid estimates are 1 and 0. The task is either done or not. There’s been decent research to support that as well and the company can instead use task completion rates and new task creation rates to figure out when a project will be done with just as much if not more accuracy than projects with “real” estimates. It has the upside in that you spend less time figuring out estimates and more time actually doing the things that matter.

Edit: this is a decently shot watch that starts to get into it. https://youtu.be/QVBlnCTu9Ms

That said. Convincing a company, especially an established enterprise type company to drop estimation is… a daunting and sometimes futile task.",2022,After every scrum meeting
laosurvey,3,"How do you handle bringing together multiple elements (including non-programming) at the same time. I usually ask folks for estimates (to help others set up timelines), check in at critical milestones, and ask them to tell me if things got delayed so I can coordinate everyone else.",2022,After every scrum meeting
stationhollow,1,"The video goes into this. You don't estimate but project. You complete x single point stories a sprint for 3 sprints, you can predict when you will complete to the same degree as using estimates.",2022,After every scrum meeting
laosurvey,2,"First, thanks for linking the video - good perspective. To me, his 'projection' is just a particular kind of estimation. When combined with the work that goes into defining a story (I appreciated his comments about not worrying to much about the bottom of the backlog) it ends up having all the needed stuff to plan and coordinate other groups around.

I would be curious on how he'd handle when the projections end up being wrong and there is a time driver (e.g. regulatory, major business impact) but you don't know the projection is wrong until it's too late to usefully add people/resources. In my experience, that's where those terrible hours that he was talking about come in.",2022,After every scrum meeting
kknow,1,"I have to do estimates for the dev side on a project and I literally never had one right, but ones where I can estimate a huge range.  
Is there some resources where I can read about a ""no estimate"" structure or did you figured that out yourself for your team? Maybe I can get that through to sone higher ups",2022,After every scrum meeting
ososalsosal,9,"Most people like to appease and our silly ape brain does that by estimating less time because that makes the person asking feel better.

Then of course reality kicks in and nobody is happy, but people still do it every time.

If someone is 5 minutes away, they are 10-15 mins away.

With development there are way more unknown unknowns. Lots of ""how hard can it be?"" moments when you trip up on some tiny part of the boilerplate for some library and spend a week banging your head against a wall",2022,After every scrum meeting
awhhh,11,"Truthfully, I’m not sure we have any formal retrospective. But I’m not in PM meetings so I wouldn’t know. Accountability for time is something between devs a lot the time because our work is all reliant off of each others. Usually if a PM specifically speaks to one of us it was because another dev went to them. A PM coming to us is really going to depend how closely we’re working together and how much we communicate with each other through out the week. So as I said we’re meeting lean, however I can usually expect to jump in a meeting with a dev for about 5min to 30mins once a week. Everything else will be in a slack channel dedicated to the project. 

I personally don’t do estimates for my work. One reason is because I’m bad at it due to context switching. What I do do is make PMs aware of things that will slow me down in a very open way and they’ll adjust. I can tell they have an eye for when I’m burning out and will pull me from things, without me getting in trouble, and put me on projects that are lighter. The reasons I suspects this works is because none of us use evasive corporate bullshit to state why something isn’t done. There isn’t a fakeness of professionalism. It’s kinda hard to explain, but it does give real insight to expectations. For an example, I have project I hate, and in front of officers of the company I outright and verbatim say the project is shit and tell them to fire the old PO we all hate. In my reviews I started out with where I felt like I was fucking up in the company, yes I said fuck, and I did that unasked. Because of that I got a raise and promotion. Most of us are like that to an extent and on company vacations we usually all spend time drinking, smoking weed with eachother, and talking about the drugs we’ve done in past lives. The point is that we’re able to make real life evaluations of each other based on personality traits we don’t feel we need to hide for corporate purposes. It’s sorta radically open

The next thing is we’re all seniors. So the company just trusts that. None of us take care of juniors. Tasks don’t get estimates because it’s trusted that if something takes longer than it should that usually means it had unforeseen issues or we’re burning out. The only estimate of a project is the release date. That’s it. 

The release date estimate is loose. We strive for doing things right instead of fast and that’s the best thing I can say about where I work. Our management let us do a lot of ground work by building reusable assets that could be carried into every other project. There was an upfront risk to management because no matter what we were going to be late on releases for the first bit. But now we fly through things because all of our problems are solved for us. So if we were to go through tasks and estimate each one we’d probably get slowed down massively. So for us devs the retrospect is just what we accomplished before with reusable assets. Each week there’s just a check in to see how that’s going where I give a little blurb about how it’s going.",2022,After every scrum meeting
sadacal,2,How do you know devs are over evaluating tickets if no one's doing estimates in the first place?,2022,After every scrum meeting
awhhh,1,"The devs know. For example I’m a full-stack and if the backend dev starts fucking around on a ticket I need while I’m working frontend I’ll call bullshit. I know how much time it would take me to do that ticket or if something can or can’t be done. As I said somewhere else, we’re all seniors that don’t take care of juniors so we’re going to be able to be able to hyper focus on what we do and call shit out that doesn’t add up. We’re not aggressive about it, we understand how to deal with each-other, but questions will get brought up. 

This works in a way where my accountability is to the other devs and CMS I’ve versa and not the PM. Because we’re seniors we all review each others code too.",2022,After every scrum meeting
GayMakeAndModel,3,"Sounds like a recipe for finger pointing to me, and that shit kills morale. Your employer should treat you like an adult and assume you’re working. Period.",2022,After every scrum meeting
awhhh,1,"That’s why hiring process is key. We all understand each other’s capabilities and skill sets because we work closely with each other. As I said before, none of need to be evasive, because we’re all upfront. We’re all seniors and adults and know exactly how to stand up for ourselves when we feel finger pointing is happening. We all know what we’re doing. 

On the inverse I think our company does well, we actually fucking kill it monetarily, because our managers don’t treat us as children that are doing chores. When we’re not treated like children we don’t need to speak like corporate twats to evasively sound like we’re doing more or less what we are. We don’t have to really fear being called out and that allows you take real personal responsibility which furthers the respect and trust we have in each other. If that type of responsibility isn’t for you you probably won’t last, but that’s rare because we don’t have a high turnover rate. 

The point is that we run in a way where we’re not really afraid to be honest or take criticism. I take shit all of the time, but I’m perfectly okay with it because I’m a big boy and that’s life, but I also give shit to people that are way higher up than me. How we speak, swearing or whatever, and our ability to party with each other, is realistic in human relationships. It’s not just run with some twat with an MBA in some way that might look good in a case study.",2022,After every scrum meeting
Kakkarot1707,1,It’s not about overestimating as you cannot estimate the idiotic users who f shit up,2022,After every scrum meeting
Tensor3,2,I moved from a one meeting a week job to a 10-15 meetings/week job. It's hard to tear things done when you barely have 2 consecutive development hours every week.,2022,After every scrum meeting
TurboGranny,2,"It's funny because my director will say this, and will put in effort running interference to get people out of our hair and instead the universe will just engineer incidents that can't be ignored like the entire data center going down. Sometimes it works out though.",2022,After every scrum meeting
Deleted Account,3,"> We have minimal meetings, 2 to 4 a week

What about daily?",2022,After every scrum meeting
awhhh,12,"None. I check in on slack and I’m off to the races. Fuck, most of us don’t even work at company hours and don’t hide it. A good portion of us are only around company hours just in case there’s a question. And why shouldn’t we do that? What hours each of us are most productive changes from person to person. Some people are morning people and some get their best work done at midnight",2022,After every scrum meeting
kknow,4,Sounds like heaven. Fuck dailies,2022,After every scrum meeting
TheLostRazgriz,4,"I've been doing this and I have no idea if my company knows. I don't conceal it at all.

I am at standups every morning, never missed them.

But once 3pm or so rolls around, I have no meetings and I'm ready to relax or do house work. Then I load up my work again at 10pm and go until midnight or 1 because that's when I can be completely alone listening to music and coding. (Plus if my project is intertwined with someone else's branch, I have their latest push available so that I have actual progress for next mornings stand up)",2022,After every scrum meeting
awhhh,2,"Yup, kinda what I do. My morning consists of me hung over from a shit sleep ramming coffee into myself till the hours I’ll be productive. Then when I feel inspired I’ll start cracking out work like it’s going out of style. I do even wait till the next day to push code if it gets done at 2am, that’s when it’s pushed",2022,After every scrum meeting
Deleted Account,1,"Same.  There is no way I can get any work done when there is a chance for someone to message or summon us all to a meeting, because they always do, and task switching is a waste of sanity.  So I use a hands free headset and workout or clean or slack during some of the meetings, relax for a bit when my partner gets home, and code serenely before bed.  I have to start with enough time to get things done before all the nightly maintenance kicks off though.",2022,After every scrum meeting
Deleted Account,1,"I agree.

I prefer working late and getting up late, so I just don't go to dailies anymore, but I wish rest of the team was allowed to do that, it's such a waste of time.",2022,After every scrum meeting
Kakkarot1707,1,"Wow i have 2-4 A DAY. Lol sometimes I think waterfall got work done faster but more stress loads, and scrum slows things downs with pointless meetings. My scrum meetings are every single morning at 8am because of India time and man I’m sleeping basically through it lol",2022,After every scrum meeting
Deleted Account,111,[deleted],2022,After every scrum meeting
Dotakiin2,103,"I would say I take about an hour the first time each day, and about 30 minutes any other times. It can take a while to connect to the vpn, sign into all of the internal systems, start my local dev server etc. If I am interrupted, I just need to get back into the right head space, which takes anywhere from 10-45 mins depending on the complexity and how many other systems I am working with.",2022,After every scrum meeting
Ghostglitch07,54,"Yep, past initial setup you just need to remember what you were working on, what idea you had as to why that one bit might be broken, how everything fits together. It doesn't take forever, but it's not nothing either.",2022,After every scrum meeting
ososalsosal,3,I always commit the last bullshit I was thinking about to my working branch. Just checking git log can help me trace where the hell I was mentally,2022,After every scrum meeting
Viol8nce,13,Repeated interruptions increase the time required to get back into the right headspace.,2022,After every scrum meeting
Necrocornicus,58,I find it takes at least 1-2 hours before it’s even a possibility of getting into “10x mode” where I can make a large amount of significant progress continuously.  I can get as much done in one day of 10x mode as a week of piecemeal work.,2022,After every scrum meeting
utdconsq,27,"Me too, and as someone who spends most of his time clearing the way for his team and some of the time on principal programming...my technical output is suffering badly.",2022,After every scrum meeting
folkrav,2,"I just replaced my boss who left for vacation for a week. I barely got anything code related done. I did help a bunch of our most juniors design new features, put people in communication and pinged others to get past some blockers, reviewed a bunch of code, got many things past QA, but I just didn't get to contribute that much directly.",2022,After every scrum meeting
SpinDrift21c,9,So it's at best 5x mode ![gif](emote|free_emotes_pack|sweat_smile),2022,After every scrum meeting
sometimes_interested,21,"The ""spool-up"" time is directly proportional to how long the distraction takes.",2022,After every scrum meeting
ell0bo,11,"Depends how you define spool up.  I need an hour to spin up in the morning, and then an hour of scrum stuff during the day.  Besides that... it takes me about 15 minutes to hit my groove, so depends how many people ask me questions.  These days, I have to designate days as my coding days.",2022,After every scrum meeting
LBGW_experiment,1,Really depends on how spaghetti the codebase/knowledge is,2022,After every scrum meeting
doyer,6,"Depends what type of work you're doing too.. when I'm doing research work, I'm not generally in the zone until a couple days in. Having to switch my mind to other stuff or handle multiple simultaneous optimizations is very counter productive. Otoh, I do plenty of routine work (refactoring, strategy, random sagemaker or AWS stuff, etc) that doesn't take over an hour of spool up as long as the previous work wasn't too hard to wind-down from.",2022,After every scrum meeting
drjeats,5,"It varies within a project, even. It's a function of the complexity of the task and your understanding of the subsystems you need to work with in order to complete it.

And sometimes if it's a bug, repros can be a huge drag. Fortunately QA can help: I had a bug with a 20minute repro process the other day, and I was about to start running through it, but then I got a jira email showing someone in QA posted revised steps to repro in a few seconds. Would've taken me hours to fix with the original repro if I couldn't figure out the reduced steps myself. Instead it took 15 minutes. Bliss. The only time I've been happy to see a jira email.

Obviously this situation won't happen with most tickets, but QA is underappreciated and usually underpaid so I try to collect and convey stories like this.",2022,After every scrum meeting
Cometguy7,2,"I can see 2 hours for the company where I'm at. Retaining talent hasn't been a priority, so there's been high turnover (by far the highest I've ever seen in my career) because the market is crazy.  So our devs aren't familiar with the codebase or the domain, because they haven't been here very long. It'll drop with time, provided the company adjusts its attitude, and pays them what they're worth, when they're trained up.",2022,After every scrum meeting
morphemass,4,"I have some complex projects that might take days to spool up on. Have me context switch and depending on the duration/depth, I might have to repeat most of that.",2022,After every scrum meeting
Banquet-Beer,-3,Wow. Got some terrible devs in this sub. But we already knew this.,2022,After every scrum meeting
Deleted Account,5,[deleted],2022,After every scrum meeting
morphemass,3,Thirty years plus ... we are the Windows progress bar.,2022,After every scrum meeting
morphemass,2,"There are many projects that can take long periods of time get up to speed with due to complex or incomplete setups, poor documentation, minimal test coverage, technological interactions and incomplete understandings, or just innate complexity. 

That's totally okay and any good developer will take the time both to understand both problem and context rather than being a self-glorifying rockstar who will cost the team months or even years due to their incompetent hackery.",2022,After every scrum meeting
TurboGranny,1,"It depends on the project size and how much of it you are over. It can totally be 30m on some things I've worked on. We do have a several intensely complex systems though and not enough devs, so everyone ends up fullstacking solo on systems. Some of the bigger more complex once you end up having to fit a lot in your head. For example, I've got one that is a web based app designed to run on an ipad for recruiters to interact with an external vendor's system (that is only designed to run as a thick client internally and not designed for me to do this, but I just backwards engineered their stuff to plug into it), while also coordinating with a task management group on a separate app, so they can act as gatekeepers to certain actions performed in the system while also acting as a wysiwyg for promotional materials that get constructed and approved by the recruiters, sent to the task managers then pushed to the network printers to the correctly configured trays for those materials. All  this with a layer of projections and actuals constantly updated to show the recruiters their outcomes along with links to report views of schedule publications performed by infoview. This system which has a bunch of other features now has to be completely re-developed to run off a new vendor's software they are switching to. This vendor hosts their DB on AWS as  a MySQL DB instead of the internally hosted MSSQL DB, so we ended up building an ETL that maintains a shadow copy of their DB on our end for performance reasons. Oh, did I mention that the task managers use a completely separate system to maintain configurations and print jobs associated with those promotional materials?",2022,After every scrum meeting
coldnebo,11,"none of these managers have ever baked a quiche before have they? 

“Is it done yet?”

“I can’t tell?”

“Well poke it with a toothpick again?”

“It’s not done, but now it’s also flat.”

“Just turn up the heat, we’ll cook it faster that way”",2022,After every scrum meeting
2_plus_2_is_chicken,15,"> anxiety feedback loop...

> Then you'll burn days practically doing nothing.

And then you get in the habit of waiting for the interruption and then on the off chance it doesn't come, you just wasted half a day.

I needed to hear this come from someone else. I've been losing my mind at my current job.",2022,After every scrum meeting
starofdoom,4,"I sometimes (not too too often, but often enough) catch myself in an anxiety feedback loop, it's rough. And then suddenly it's been three days and I have nothing to show for it, and then it gets to the point where I feel like I can't ask questions because I should be farther in the project, which delays me even more.

It's never gotten too bad luckily, but I've for sure wasted multiple days with nothing to show. I'm getting much better about just asking for help once I'm fully stuck for a few hours, instead of bashing my head against a problem for days before reaching out. But sometimes I get so stuck that I don't even know what questions to ask, and that's when I really freeze up.

I still struggle when a project in general seems overwhelming/I don't even know where to start. One of my tasks was cloning our entire set of services for another environment, and I just spun my wheels talking to people and getting almost nothing done on it for like 4-5 days making almost no progress. Only to find out that devops was already handling the only part of the project that I did finish. Ended up switching to another task and I was rolling again, but it was rough.",2022,After every scrum meeting
TurboGranny,5,"yeah, what sucks is that it's like all the end users (and the hardware) knows exactly when you have reached your limit of feeling like a lazy shit, and the VERY moment you finally sit down and get to it, it all comes at you at once. You have to laugh about it or you'd lose your mind.",2022,After every scrum meeting
SpliceVW,6,"Viva Insights in the M365 suite is pretty nice. It blocks off a configurable amount of time on your calendar every day, and during that time, it sets your status as focusing and silences notifications.",2022,After every scrum meeting
TurboGranny,6,"Dude, I'm telling you that the powers that run this simulation don't give AF. Whatever tools I put in place to ignore stuff, the problems just escalate until they are beating down your door. I had one recently where I was like ""fuck email, fuck teams, fuck my phone, I'm getting this done."" I shit you not, the ENTIRE DATA CENTER ate shit.",2022,After every scrum meeting
SpliceVW,1,"I used to physically barricade my cubicle, add a passive aggressive note about the impact of distractions on analytical work, shut down Teams and Outlook, put on noise canceling headsets.. people would still find a way.",2022,After every scrum meeting
TurboGranny,1,Nature finds a way,2022,After every scrum meeting
swen83,5,"We’re going to hire you 20 temp developers which will allow you to complete the remaining 20 hours after your next spool up. Feel free to work after hours to avoid distractions or interruptions.

Management, probably.",2022,After every scrum meeting
TurboGranny,2,"Luckily, I'm the manager (not the PMO, that's a separate department. I can do it. Am trained to, but they have another group do it even for dev work, lol) and have shown them the chart where the lines of communication drastically increase the more people you introduce and the more time it takes. There is also the fact that you need more tools that get between the devs and development to help manage the group working on it. For example, if you are a solo dev doing full stack on a small project, you don't actually have to use any version control, multiple environments, and various other pre-design tools (hell you can even ditch the need for strong typing because who is going to send the wrong data type to your functions? you?). You can just rapid prototype it for the reqs and knock out the whole thing pdq. If you are doing a 3 man team (one front end, one back end, one DB designer) you can still cut some standard tools and processes because the work is pretty siloed, but once you are working on a sizable project with a big team, you have to use just about everything and you end up piling in more and more stuff just to make the lines of communication manageable to prevent your system from being a steaming heap. Solo dev can just get emails and the occasional call from his small user group when something goes wrong. A big system with a big dev team needs a fucking call center, a ticketing system, a knowledge base, and tier list for escalation, heh. It's important that people know differences in needs/resources depending on the size of thing they are asking for.",2022,After every scrum meeting
120112,6,"I am a toolmaker this is exactly the same in my job. Sorry I gotta take 2 hours to ""spool up"" a complex machining operation. Every time something interrupts us we have to start a lot of it over. Usually since we had to remove the part we were working on, we now have to spend an extra 30 minutes on revising my machining process to compensate for the inherent inaccuracies added to the machining process when a part was removed and put back in place. When we are talking about things 1/10000 of an inch here. ( 2.54 micron, or .00254 mm) shit adds up. (Human hair is 70 micron +- 20)",2022,After every scrum meeting
TurboGranny,10,"yup, I try to use language other people understand because when you're a dev that is working on something that is larger than a function or two, it can be a lot to cram into your head to get started. If you ever interrupt a dev once they have a big enough system crammed into their head, you'll notice it takes them a while to talk like a normal person because they had to close a lot of social processing apps to free up brain resources.",2022,After every scrum meeting
120112,3,Hah! That'd exactly how my husband describes me when I am deep into one of my strange projects!,2022,After every scrum meeting
TurnItOffAndBackOnXD,3,What do you mean by “spool up”?,2022,After every scrum meeting
TurboGranny,9,"You know how you sit down to work on a project and you have to cram everything back into your head that you need to start building? If you are in a big dev house and are just knocking out a function here and there, it's not really the case, but if you are building the whole system as a solo full stack dev, or even just one whole part of it like a front end/back end dev, you will find yourself working like this. I can totally quote short turn around times for little features/functions. Things that require a person to build UI elements, back end API functions, tables, views, and DB functions, well, that's gonna take a minute for them to cram that picture into their head each time they get started.",2022,After every scrum meeting
TurnItOffAndBackOnXD,1,"Oh, yeah, I get that. Is this a common term?",2022,After every scrum meeting
TurboGranny,3,"It is for manufacturing. I'm a dev and manager and went to business school to learn how to communicate with these people, so I use terms they should know. Granted, we use spools too at least for printing and emailing, heh.",2022,After every scrum meeting
Dante_Unchained,3,"I can give you a hint. Put fake meeting in calendar to be visible as BUSY. Helped me a lot at corp. I am sys analyst/developer. Everyone who codes does know about ""being in the zone"" these constant ""update emails, update meetings"" when you are told THIS IS CRITICAL, continue fixing this interface and polish bugs here in a code its a priority number one, yet dozens of meetings where you literally participate for 2 minutes - could have been an email sent by end of the day... It distracts you and it takes tame to get back in the zone. In the zone you are like anime superhero ffs, the code just writes itself...",2022,After every scrum meeting
TurboGranny,2,"I do that. Even for lunch. It only keeps out meetings. It doesn't keep end users from finding clever ways to crash whole system like they some how knew it was the worst time to do that, lol",2022,After every scrum meeting
modsuperstar,7,This sub can be so cathartic for me. I’m often a solo dev on certain tasks and this comment resonates so heavily with me. Then add in the constant feeling of failure because you can’t do 3 jobs at the same time and move that one objective you promised 6 months ago forward.,2022,After every scrum meeting
TurboGranny,10,"Exactly, I had a meeting recently where they were getting times for my whole team to do something, then one of the devs who was already working on rebuilding an entire system on that very project was asked, ""we have you down for rebuilding these reports as well, when will those be done?"" I sort of blew up. I said, ""He's one person, you can't have him double booked on tasks. It's physically impossible."" He was like, ""I just need to put some date down, it's not that big of a deal."" I said, ""It is because we can't give you a date until he's done with re-deving that system and we don't even know how long that will take and gave you a made up time for it. Not to mention the 80 other things he's hassled with daily and the fact he hasn't been a report writer for almost a decade. You need to know that our programmers (myself included) waste space in their head on problems that they are told are coming up, so you need to keep that crap to yourself until the first tasks are done. Lost brain resources mean everything will take longer. It's not something they do on purpose. Problems have to be solved, and our brains can't be told to just ignore a problem presented to us.""",2022,After every scrum meeting
modsuperstar,2,"My new director is very date oriented too. She had me roadmap out a bunch of priorities that were all pie in the sky fantasy because I so rarely get clear road to actually do things because I’m also tech support for most people in the department, or supporting other devs in adjacent departments, or backup for our comms, social and marketing teams. I have a Jack of all trades skill set, while also having a bunch of dev priorities to do. A recent internal audit described our department as “toxic lean”.",2022,After every scrum meeting
TurboGranny,3,"Yeah, you are doing too much which means you can't do anything. They don't seem to understand that. My boss bitches at me for not ""managing hard enough"" and I say, ""I'm still a full time dev as well. I can do 50/50, 60/40, 0/100, but not 100/100. That math doesn't work."" He keeps promising to get me more devs, so I can just manage, but it never happens and each year at eval he bitches I'm not shaking enough hands or being a suit or whatever.",2022,After every scrum meeting
modsuperstar,2,"That’s the key to my job. They want me managing more, but then haven’t really allocated any resources to replace my job duties that I’ve had historically.",2022,After every scrum meeting
TurboGranny,2,Yup. I am but one person.,2022,After every scrum meeting
starfries,1,"Holy shit, I love you... please be my manager.",2022,After every scrum meeting
TurboGranny,1,"We only have a report writing job opening right now. I don't recall the title they came up with. That said, more than a few of our devs started out as report writers. However, I'm looking for a change of scenery. Let me know if your managers position opens up.",2022,After every scrum meeting
Deleted Account,3,I've personally felt this with lunch break. One hour of off-time ends up in me not revving for 1 hour...,2022,After every scrum meeting
TurboGranny,2,"Yeah, and it sucks because skipping lunch repeatedly is one of the many things that leads to burnout. Then you lose years of productivity.",2022,After every scrum meeting
Deleted Account,3,"I'm doing Work From Home, I don't mind skipping lunch, if anything I'm going to hate the few days that I'm forced to go to the office where I'll have to idle for 20 minutes after eating..",2022,After every scrum meeting
TurboGranny,3,"Yeah, them trying to guilt us into going into work because the non-devs that have to go in are ""resentful"" is just killing productivity. One of the other managers that had to come in most of the pandemic said, ""yeah, but people were getting resentful."" to which I said, ""How does the resentment of others have any impact on my team's productivity?"" What I really wanted to say was, ""While you guys were giving us programmers crap in school for being into computers, we were engineering a way to work in comfort. This sounds like a you problem.""",2022,After every scrum meeting
Deleted Account,6,I want to marry you.,2022,After every scrum meeting
Tensor3,2,Haha. I only one or two blocks of 2 consecutive hours to work in a week. The rest is trying to write a line of code between meetings..,2022,After every scrum meeting
TurboGranny,2,Time to leave man. I needed to leave years ago. Learn from me. :),2022,After every scrum meeting
Tensor3,1,But I just started recently and I like the people and pay,2022,After every scrum meeting
TurboGranny,2,"on then def hang for a bit. A new job with fresh problems can be a lot of fun, and you get an opportunity to figure out how to automate things the previous guys missed as well as changing how they interact with you, so they don't have you wasting times in meetings. It's like starting a new level of tetris that has a mess for you to clean up. After a bit though, make a value judgement if you want to stick around. If anything, get another offer you can bring back to negotiate for more cash.",2022,After every scrum meeting
Bakoro,2,"Businesses need to institute at least two ""no meetings"" days a week, where the rank and file can be guaranteed that they'll have a full, uninterrupted day of work without having to stop.",2022,After every scrum meeting
TurboGranny,1,"I agree, but I also have the meetings stuff mostly solved because as manager I made that point long ago. It's more just random crap breaking that the helpdesk or lan team can't be bothered to fix and shove onto us or some emergency thing an exec starts begging for.",2022,After every scrum meeting
Deleted Account,2,This is a post straight from the depths of corporate programmer hell,2022,After every scrum meeting
TurboGranny,2,"Funny enough, I'm just  a manager of application development at a non-profit company developing mostly internal use applications to support the business, but after you write so much and it's all still being used, there is no room to dev new stuff because maint time on everything else is always required.",2022,After every scrum meeting
Zanderax,2,But everything is priority number 1. If its not important we dont do it.,2022,After every scrum meeting
TurboGranny,4,"lol, right? I keep saying that. ""If everything is an emergency, then nothing is an emergency."" Also there is the main rule of operations management. ""There are 3 levers. Cost, Quality, and Time. Moving one favorably requires that it's favorability be negatively reflected on one or both of the other levers. If you hold one still, and move another favorably, then the 3rd must move negatively. Therefore, if you are not giving us more money, and need it RIGHT NOW, then the quality will be lower. If you need the quality higher, then it'll take longer."" PMO's response, ""well, we need the quality to be high and need it by the deadline."" Me, ""Okay, you didn't get that explanation, so let me grab my crayons.""",2022,After every scrum meeting
BrainFeed56,2,"(Turbo) Spool up time, the most overlooked estimate of dev time from management when they set or just allow reoccurring meetings to take place then get mad when u dont show.",2022,After every scrum meeting
TurboGranny,2,"It's really funny because it's a known manufacturing term, and it's a big part of assembly line changes to avoid the hell out of it as it creates bottle necks. Funnier still is that most of the problems with people's poor understanding of development is that they try to pull from manufacturing, but pull literally all the wrong stuff and leave out all the right stuff.",2022,After every scrum meeting
TesticalDefibrillate,2,"I would say your figures are a *little* exaggerated, but not that exaggerated.",2022,After every scrum meeting
TurboGranny,2,"It depends on the complexity of the thing you are working on. On smaller stuff the spool up time is shorter. Also if you are just banging out the queries for it and already have mapped out what you need, start and stopping on that part can be pretty easy. There are a lot of cases where you are going to build a whole part of the system that requires you to write cram the whole system's interactions in your head, so you can design what the interactions are going to be, build the new queries, new tables, new views, add them as your data interactions on the back end, then build out the front end code and UI elements. As you are hoping between these things and adding stuff you didn't consider until you started building it, it can get a bit overwhelming to shove into your head at once. In some places you can sort of silo it by planning/designing/mapping out ahead of time. However, that all takes time. if the deadline is short enough, you lose out on time for a lot of quality stuff like actual planning.",2022,After every scrum meeting
ladymooglie,2,"Thank you thank you thank you for articulating what I've been experiencing at work. 

I'm the only dev supporting our product (other dev got pulled to help elsewhere) and I still feel like shit when I tell the team I have to push my deliverable for the nth time because I'm working on  prod issues that keep popping up and also supporting one of the other sub-teams.

I want to take a long break so bad.",2022,After every scrum meeting
TurboGranny,3,"Do it. It's hard to walk away for vacation because you know they are going to call you and you have all these things to do. Thing is all those PMOs are going on their ski trips. Take your damn vacation. We love to solve problems, love to save the day, and love to over achieve, but in the end, they will find what your limit is and keep pushing till you break or push back.",2022,After every scrum meeting
ladymooglie,1,Thank you. Feeling broken already :),2022,After every scrum meeting
ThePaleSpectre,2,"This is also why so many of us work long hours. Not because of grind mentality, but if I'm deep in the middle of figuring something complicated out, I need to keep going until I'm done (or at minimum well documented), otherwise it'll take me hours tomorrow to try and figure out what the fuck I was doing today.",2022,After every scrum meeting
TurboGranny,2,"And also it can be hard to stop when you are on a roll. However, allowing yourself to work long hours eventually catches up with you as burn out if you do it for too long. Then there is also that is becomes expected even though they aren't paying for it.",2022,After every scrum meeting
starfries,2,"That's a fantastic point. I never thought about it in terms of ""spool up"" before but this is exactly why I can spend 20 hours on a 10 hour task and still not be done despite working the whole time. Too many ""hey this will just take you 5 minutes...""",2022,After every scrum meeting
TurboGranny,2,Hang that cartoon on your door,2022,After every scrum meeting
Deleted Account,2,UPVOTE UPVOTE UPVOTE,2022,After every scrum meeting
whutupmydude,2,It’s uncanny how much I relate to this,2022,After every scrum meeting
Beautiful-Musk-Ox,2,"Damn it's nice reading this. I feel so unproductive and am hard on myself about it. When I first start a job I have all this energy and want to do well, then years later I'm still comparing myself to those superhuman human first few months where I'm constantly thinking and working hard, but that's unsustainable and exhausting.",2022,After every scrum meeting
TurboGranny,4,"> those superhuman human first few months where I'm constantly thinking and working hard

yeah, because you didn't have anything to babysit yet. I've talked to programmers that have it figured out. They just contract to build something then fucking LEAVE when it's done. You get to have all the fun energy of solving a new problem and none of the drag of maintaining it or having to redev it.",2022,After every scrum meeting
Deleted Account,3,*taking notes as a Scrum Master* lol jk,2022,After every scrum meeting
Iwantmoretime,3,">There are about 20 hours of work left, but there is about a 2 hour spool up time before progress can be made on that 20 hours.

This is effective communication.  It's an honest conversation about what you need to get the work done.  

A half way decent PM will help clear schedule and manage your other obligations so you can be successful.",2022,After every scrum meeting
TurboGranny,2,"The problem is that our team also maintains anything we've written and end users seem to be really adept at breaking stuff only at the times we are ""in the zone"" on a new dev project.",2022,After every scrum meeting
Iwantmoretime,2,"What's your team's escalation process?

Our team shares help desk responsibility too. If someone has a large task and needs to focus on it they either don't get any help desk tickets or it is only escalated if it's a true emergency only they can resolve.",2022,After every scrum meeting
TurboGranny,1,"We don't share helpdesk responsibility, but these things are our applications, so more often than not helpdesk or the lan team will be lazy and just assume it's a problem only we can solve. I then have to march back there and say, ""Don't send it to us until you at least have the replate the issue in front of you."" I have this acronym written on their whiteboard. S.U.S.E. ""Screenshot of the problem, URL off the application, Steps to reproduce the error, Example of what was expected to happen."" I think in all my years there, they have made good on this demand 3 times.",2022,After every scrum meeting
JPJackPott,-4,"There might be some truth to context switching and broken focus, but this really just makes you sound like you aren’t a good fit for working in a team and contributing to a successful business. I dare say if you spent more time working and less time whinging you’d get more done.",2022,After every scrum meeting
ososalsosal,4,Get back to work! You've got user comments to copy and paste to the PMs,2022,After every scrum meeting
TurboGranny,3,"lol, I'm actually very good at what I do, but resources are thin and people expect times that can't be met without spending more money which by the laws of operational management means the quality will have to drop to meet those times. I don't make the rules. I just live in them. Also, I don't work on Sunday. I'm free to whine all day. :)",2022,After every scrum meeting
5-1BlackAlbinoChoir,1,"What you mean to say is ""sales oversold the features and deployment only get their bonus pending release so we need to pick up the pieces""",2022,After every scrum meeting
TurboGranny,2,In our case we don't really have sales related development. We do custom dev to support the business itself.,2022,After every scrum meeting
5-1BlackAlbinoChoir,2,"Fair enough, I am in implementation rather than development but we all experience the same shit. Sales promise the world, project management promise a ridiculously short timeline, we get shafted.",2022,After every scrum meeting
TurboGranny,2,"I only had to work once in my life with a ""over promiser"". She was an analyst and a new hire. I was having nausea coming into work and would come home super angry. I was inclined to think the problem was me and didn't want to blame this person even though I snapped a few times in meetings when she would promise shit that wasn't possible with current technology. She had clearly lied her way into that position. Anyways, I mentioned it offhand to other people and turns out everyone hated her and knew she was an idiot. She was gone long before her 90 probationary period, heh. So I can honestly say, if you are living with over promisers, I legit feel for you. That shit hurt my soul.",2022,After every scrum meeting
5-1BlackAlbinoChoir,1,"Damn that sounds horrible man. I'm in a global company, we are very departmentalised in the sense that we rarely collaborate. We're given a project and the constraints.",2022,After every scrum meeting
stationhollow,1,I suffered like that for a year or so a while back and was able to fix it by adopting a give no fucks honesty system. I openly and honestly called him out eventually having to CC the department manager and the business product owner on correspondence to ensure they knew what was going on.,2022,After every scrum meeting
TurboGranny,2,"This was pre-diagnosis of high functioning autism, so I used to hold back on stuff thinking it was a me problem since people's reactions to my honesty were usually bad. Since my diagnosis and learning more about it, I've been far less likely to hold back on what I'm thinking, heh.",2022,After every scrum meeting
ArchRunner90,1,Amen to everything you said. I can't tell you how many times I've had that exact same scenario play out,2022,After every scrum meeting
LemonLimeAlltheTime,1,Damn are producers and PMs really this dumb? I can't imagine being a programmer in an open floor place office without headphones on all the time,2022,After every scrum meeting
TurboGranny,3,"It's fairly common, yeah. Although one of my programmers made this same comment after a meeting and I said, ""Dude, I know you are subscribed to /r/ProgrammerHumor. It wouldn't be every other meme if it wasn't common.""",2022,After every scrum meeting
Miu_K,1,"I'm a student but this comic so relatable, my mother would interrupt me even after emphasizing that I shouldn't get interrupted.",2022,After every scrum meeting
cxseven,1,I never imagined that a Turbo Granny would know my life so well.,2022,After every scrum meeting
Cxarface,1,"As a developer I am totally agreeing with this.

Like, I'm already busy as hell. Hand you documents to keep things under control and explaining how you should follow the process if something bad happens

In

Every

Fucking

Mail.

Just so you don't need to open tickets again and again for me. I'm doing this for YOU.

But you decide to interrupt me just because you can't make your printer work? Like wtf I'm no IT person. I'm the fucking developer. Go ask your IT about it.

After some time you already accept the fact that you cant work on your project in working hours so when something is requires your focus, you end up doing that after legal working hours.

And then it leads to burnout after sometime because problems never ends.

And you end up looking at your computer screen feeling like completely vomiting. Like I'm talking about real vomit.

Then you decide to not open your emails till its lunch break. Then it starts to pour up again...

And again...

And again....",2022,After every scrum meeting
TurboGranny,1,"Yup, so you turn to Dramamine to be able to work without the nausea , but now you are tired all the time then you realize anytime you are actually free from work you mysteriously don't have nausea. That's 100% the time to bail. I've got to the point where I am just used to sitting on a mountain of unread emails. I just what I can read on notifications on my phone. If you get lost in the jumble, oh well, tough luck. Once a month I'll burn a day going through my emails. I learned at long time ago that in IT if someone doesn't badger you about a problem on the daily then it resolved itself or wasn't that big of a deal. I HAD to do this because I learned this is why they were going around helpdesk directly to me. Helpdesk had been doing this for years and those people wanted whatever was bothering them fixed RIGHT NOW. At some point you just have to put your savior complex in your back pocket and zone out. I don't know about you, but I know on my team we all want to be Geordi La Forge and save the day. People take advantage of that though, so you gotta figure out how to set boundaries which we are all terrible at, heh.",2022,After every scrum meeting
jack-of-some,1,"While I agree with you on pretty much everything you're saying, I kind of hate that comic (and don't think it illustrates the point).

Devs are not goldfish and have the capacity to write. The only thing that comic is illustrating is an inefficient and overconfident developer. If a fly suddenly whipping past you can cause you to lose 2 hours of work, you're working wrong.",2022,After every scrum meeting
TurboGranny,1,"It's an oversimplification sure. Someone can ask me a question like ""did you eat yet?"" or ""did you get my email"" and sure it won't usually blank out what I'm working on. However, that's not what 90% of these interruptions are. Most of them are ""I have problem X"". You brain goes into problem solving mode. If you were working on a large project (large enough that you weren't even feeling the pain in your legs while you were stuffing it into your head), then shifting to work on someone else's problem will require you to dump some of that stuff you had in your head. The longer the problem takes the more likely that stuff in your head will just get holed. Now sometimes, you can come back up quicker, but that really depends on a lot of different factors. If the problem is ""I need you to come over to this completely different area and check out this problem we are having"" then totally I am much less likely to be able to pick up were I left off. If I'm working on a small feature/function/etc then it's NBD. However, if I'm building a whole system and am shoehorning something in that they asked for last minute and trying to figure out how to fit this feature into a system we didn't design it for while still hitting the deadline, yeah interrupting me with other bullshit problems is going to be seriously problematic. You've got to stop letting yourself read something then knee jerk to anger and justify that with an ad-absurdum fallacy to make your ""point"". It's not healthy for you or for public discourse. Framing stuff you disagree with as ""well that's just because you are a worthless piece of shit and I'm better than you"" just demonstrates to people a high level of insecurity and an inability to work on a team. Work on that.",2022,After every scrum meeting
jack-of-some,1,"Like I said, I agree with you, just not the comic 😅.

New problems coming up as you're working on old ones definitely create these issues though, and if your org structure doesn't protect you from it you're hosed. That said the idea that my head would be the only place my thoughts would be while I'm working on something large is really odd to me. I reach for my notes the moment something gets more complicated than ""a small function"", because I _will_ get interrupted and this way the damage is almost non existent, unless of course the distraction was multiple days long or something.",2022,After every scrum meeting
TurboGranny,1,"End users don't usually respond to complex nuance. If you tell them ""it depends"" or ""there are exceptions"" they will all think ""well, of course I'm the exception"" and you are back to square one. This is why the comic is effective. It's the same concept as intuitive UI design. Things have to be real simple and easy for the end user. Handling complex systems and abstracting that stuff out of the way so they can zone out and zombie their way through it is like 80% of the job, heh",2022,After every scrum meeting
clnsdabst,26,"I go with, ""in a perfect world... yes"", and it buys me time because everyone is aware that we have no process and every project is a mess.",2022,After every scrum meeting
Iwantmoretime,19,">A good cop out strategy...

Oh Lord, that's not a cop out, that's effective communication.

If you're not being honest and complete with what you need, you're setting yourself and everyone else up for failure.",2022,After every scrum meeting
horsesaregay,12,"I just say it will take 2 days worth of effort. Then clarify that it won't be done 2 days from now because there will be meetings, probably other work to do and I haven't started yet because we're discussing it right now not working on it.",2022,After every scrum meeting
longshot,34,"This is so huge.  It's hard to relay to non-programmers just how important an uninterrupted work period is.  2 hours is great, but 4 hours is MORE than TWICE as good as 2 hours.",2022,After every scrum meeting
Rossi007,21,"Its really not hard to explain that to non developers, anyone that does any work that requires consistent concentration understands this",2022,After every scrum meeting
longshot,1,Good point.  What the hell is everyone else doing where I work then?!  They never get our estimates . . .,2022,After every scrum meeting
Rossi007,3,"I'm not being a dick, this is my answer to a lot of things, bring it up at retro, do people understand the estimates, there appears to be confusion.
Bring up nearly everything that frustrates you at retro",2022,After every scrum meeting
longshot,1,Didn't think you were being a dick.  It really was a good point!,2022,After every scrum meeting
hahahahastayingalive,0,"TBF, majority of jobs don’t require constant concentration.

I wonder if a random adult would have any need to concentrate for more than 30 min in their daily life. Perhaps when doing taxes ?",2022,After every scrum meeting
theenkos,8,The funny thing is that the basics for a good software engineering sprint is that the developer team must not be disturbed with other tasks during the sprint.,2022,After every scrum meeting
Deleted Account,9,"Yes, we practice """"""""""""agile""""""""""""",2022,After every scrum meeting
m0r14rty,6,I started calling it FRagile at an old job to make the PMs wince,2022,After every scrum meeting
SayMarin,11,🚶🏾‍♂️Imma use tha😏,2022,After every scrum meeting
aBeeSeeOneTwoThree,6,"""with no distractions"" you mean... the way Agile is supposed to be? Huh!",2022,After every scrum meeting
Lykeuhfox,3,It's foolproof.,2022,After every scrum meeting
squishles,3,That'd work if they recognized scheduling 4 hours of meetings for you as a distraction. They don't.,2022,After every scrum meeting
Deleted Account,2,"Fuck this bs, just say it's taking longer than whatever bullshit estimate we put on it. The smallest issues can take days to solve. What kind of lunatic tries to plan the unplannable?",2022,After every scrum meeting
Deleted Account,3,I see you haven't worked with project management... Hehe,2022,After every scrum meeting
crozone,2,Can't write new code if prod is currently on fire!,2022,After every scrum meeting
Deleted Account,1,"Stealing that one sir, good I can't believe I never thought of that.",2022,After every scrum meeting
Vascular_D,1,I just got off a project with a manager who would ask how much longer it would take in several different ways as if my answer was going to change.  She'd also call me at random times to do it.,2022,After every scrum meeting
philipquarles,335,"I keep telling you people, it's not possible to predict the future with perfect accuracy!",2022,After every scrum meeting
djc6535,221,"When I was a young gun we had an old grey beard who would respond to estimate requests like this: 

“How long will it take to fix my car?”

“What’s wrong with it?”

“You mean you have to know what the problem is before giving an estimate?!?!”",2022,After every scrum meeting
zaliman,43,I can't get this through to some of my co-workers.,2022,After every scrum meeting
umognog,2,"Dealing with a head of at the moment with this issue.

It's not repeatable work sitting in the backlog that experience gains measure, it's full of wild and wonderful things the team has never done before. We cannot put a finger in the air and estimate it accurately, or even close to, when sometimes we've not even heard of the technology being used until now.

Something recently was given 5 days build time. 18 days later, we seem to have the solution in sight.",2022,After every scrum meeting
mirhagk,2,"It'll take about 10 minutes to fix it, I just have no clue how long it'll take to figure out what to fix.",2022,After every scrum meeting
samwize1701,30,Especially when the requirements keep changing because the client doesn't know what the fuck they're really asking for.,2022,After every scrum meeting
musclecard54,13,Irreducible error,2022,After every scrum meeting
Abnorc,9,Then what are we paying you for?!,2022,After every scrum meeting
SergeAzel,3,To develop. Not for my skills in divination.,2022,After every scrum meeting
Deleted Account,13,"Noted, can you give an estimate on when this problem will be resolved?",2022,After every scrum meeting
Deleted Account,12,[deleted],2022,After every scrum meeting
stationhollow,14,Noted. Will write down 1 business day estimated completion. Please provide status update for each additional day extension required.,2022,After every scrum meeting
Deleted Account,1,Soon(tm),2022,After every scrum meeting
Smaquois123,5,where I work they (they being the non-participants) pick our finish date before any analysis/requirement gathering has been done.  and then they want to know why we aren't done on time...,2022,After every scrum meeting
OwlsParliament,1,You changed the outcome by measuring it!,2022,After every scrum meeting
Coulomb111,1,"Just look at this progress bar, for example!",2022,After every scrum meeting
inaminute00,808,"Oh gawd, this reminded me that tomorrow is Monday.",2022,After every scrum meeting
Deleted Account,232,"yes, me too....and that once again I'm going to have to say ""soon....""

I fucking loathe it.",2022,After every scrum meeting
markth_wi,40,"I have the ANSWER for the next question.

Because it's always ""when the F* is soon"".
I absolutely lost my patience once and have had this at the ready.

So ""when is soon..!?"" you ask.

**Not in the next 10 minutes, and before it's too late.**",2022,After every scrum meeting
marcocom,8,"Stop that. 

You are a professional. We don’t answer people of other professions as if we are apologizing. 

Hey Project Manager (paid less than me, btw), when is that “new schedule revisement” you said last week going to be ready? “Oh we are right on top of that and will let you know when we have a development”. 

See what happened there? He’s just a project manager. That job literally can be trained up in six months. I’m a developer. It takes years to do what I do. **i don’t apologize for my job being harder than yours**

Own your role. Stop acting like you work for everybody else when they need you and you really don’t need them. 

This is a team, and that means we work together. The scrum is to give status, not to apologize. 

I think people misunderstand the world ‘manager’ in a PM’s title. You’re not my manager. You are the **project’s** manager",2022,After every scrum meeting
GoatBased,-34,Why don't you just... ya know... finish your work sometimes?,2022,After every scrum meeting
Acrobatic-Lake-8794,47,Tell us this isn’t your field of work without telling us this isn’t your field of work…,2022,After every scrum meeting
Koervege,24,"""how hard could it be man? Like it's just payment. Just take their cash and add it to the db and it should work out""",2022,After every scrum meeting
Mechakoopa,4,"Terrify a payments dev with three words: ""GL doesn't balance""",2022,After every scrum meeting
GoatBased,-6,For over a decade.,2022,After every scrum meeting
Acrobatic-Lake-8794,15,"All in a small, dark, hermetically sealed room I presume.",2022,After every scrum meeting
Deleted Account,12,"and zero legacy code to deal with.

oh and note they didn't say what they've been doing for over a decade.

I think I caught a whiff of PM",2022,After every scrum meeting
Deleted Account,8,I'm gonna take this as ignorance instead of malice,2022,After every scrum meeting
Deleted Account,4,[deleted],2022,After every scrum meeting
GoatBased,-7,Why don't you factor that into your timelines?,2022,After every scrum meeting
ahmed-95,6,How do you factor in how many times other people will bug you? SMH,2022,After every scrum meeting
GoatBased,-2,"You track how much you get done in a given week on average and then that's what you project you will complete. You won't get it right all the time because there are outlier weeks, but you can be correct most of the time.",2022,After every scrum meeting
danabrey,3,You're kinda talking about story points. It's working for us very well. Life for developers doesn't have to be like it's being represented in this thread.,2022,After every scrum meeting
JonasErSoed,45,"Same, this made me feel even more Sunday-depressed",2022,After every scrum meeting
tekno45,21,"Me: it'll be done on Monday

Also me: fuck.",2022,After every scrum meeting
Nox_Dei,11,Which  Monday?,2022,After every scrum meeting
tekno45,15,My last.,2022,After every scrum meeting
DetroitLarry,2,Second Monday of next week.,2022,After every scrum meeting
TurboTemple,24,About to log on now to finish those stories I absolutely promised would be done by COB Friday.,2022,After every scrum meeting
Deleted Account,20,[deleted],2022,After every scrum meeting
AkichannTV,9,"I feel like most places don't do agile correctly, our company definitely doesn't. I took scrum master training and the concepts are good but irl execution can be hard.",2022,After every scrum meeting
Deleted Account,5,[deleted],2022,After every scrum meeting
AkichannTV,3,"I feel you, we've got different issues, I'm hoping to one day be on a team that does scrum correctly just to see for myself if it's worth the hype",2022,After every scrum meeting
GameDaySam,6,This isn’t even agile it’s just scrum rebranded. The agile parts are too often ignored cause feckless project managers don’t want to give their team amy agency over the process.,2022,After every scrum meeting
Wendyland78,2,I’ll be glad when we move in from agile.  My team was great before all this BS.  It’s the first time in 22 years that I’ve wanted to quit.,2022,After every scrum meeting
marcos_marp,2,I'm sure you haven't experienced agile the proper way; I feel like I can manage my own time way better with the agile ways and my team is really a self managed team; cascade sucks in this fields. You just need to find a good pm :),2022,After every scrum meeting
Deleted Account,5,I have like five tickets done half way through this sprint and 5 more to go! Everyone involved loves sending email.,2022,After every scrum meeting
AkichannTV,1,"Lol, I told my pm id have it done by Monday morning so here I am working on it, and it's trickier than I thought XD, fuuuu",2022,After every scrum meeting
I-Made-You-Read-This,1,Sunday scaries are real,2022,After every scrum meeting
Cache_of_kittens,1,The best thing about Monday? It’s a whole week before Monday comes around again!,2022,After every scrum meeting
IveGotATinyRick,654,"Me, during sprint planning: “this is going to be an easy task, two points”

Also me: *takes the entire sprint to finish that same two point task* 🤡",2022,After every scrum meeting
Dr4kk0nnys,222,"""How long is it gonna take ?""  
""I dunno, two days, maybe ?""  
*proceeds to finish in 2 months*",2022,After every scrum meeting
IveGotATinyRick,121,"I’m a programmer, not a psychic. Gees.",2022,After every scrum meeting
PsychoPicasso,2,"""I work on forecasting, I do not forecast""",2022,After every scrum meeting
diatribe_lives,2,Just recently finished a 1-week task that ended up taking 6 months... it's hell,2022,After every scrum meeting
Slaan,122,"As a Dev turned PO - in my book such things are fine as long as I get told ""hey the thing we thought was easy? Yea turns out we miscalculated, will be an 8"" - I can work with that and then see what to kick out of the sprint.

I had teams that had those realizations and just kept saying ""soon"" and we will accomplish the sprint (right until like 2 days before end of sprint) :(.",2022,After every scrum meeting
JuniorSeniorTrainee,47,"> Dev turned PO

My condolences.

Kidding aside, how do you like the transition? I've never worked with a great po but maybe selfishly always thought a dev would make a good one.",2022,After every scrum meeting
Slaan,41,"Its been 2.5 years - and it's quite good. I have a background in CS and Business so they transition wasn't too brutal.

Most difficult part is trying my best to stay out of ""how"" something is done. Basically trying to write tickets in a way that showcases the actual functional requirement without adding my thoughts (that come up inevitable) on how I imagine it working in our system.

Due to being ""tech savvy"" I'm quick to look through logs when a client complaints to find the issue and can give feedback to the client faster (in additional to likely writing a bug ticket) - which is nice on the one hand (faster responses, maybe dont have to bother devs at all) but on the other hand I have less time to spend on my actual job.

So its walking an interesting balance overall, I have a lot of freedom from my employer so I can basically do what I want, which is nice, so no complaints ;)",2022,After every scrum meeting
jalaska007,11,Really wish I could stay out of the how but the separation between PO and dev is a thin line. PO can sometimes just feel like Dev++.,2022,After every scrum meeting
Slaan,9,I consider it advisory. For trickier features the devs usually come up with a solution and before starting implementation they present their plans and I can ask questions and point to issues in the proposed solutions (if there are any from my PoV).,2022,After every scrum meeting
Michami135,7,I had a CIO that used to be a dev. He micromanaged everything and even rewrote our code at times. Then he tasked us to fix it when his code broke things. Worst job ever.,2022,After every scrum meeting
talkingtunataco501,3,"How do you like being a PO? I'm an SM and looking for something else to do because I don't have ownership over anything, and I'm bored.",2022,After every scrum meeting
Slaan,3,"Tricky question - I really like it because I have tons of liberty to do what I want - but that highly depends on the company. I have other PO friends and they are just PO in name, in reality they are just a proxy and water bearer between someone higher up and the dev team.

I think for being a PO its also important that you are interested in whatever your product is about. If you don't then you won't do a good job I think, which makes it especially hard in B2B products. Thats my problem - I dont care that much for the product itself right now (can be interesting at times but there is also alot of boring af regulations to deal with) and look to move away from my current company within the year or so probably.

And funny enough - I was wondering of giving SM a try as well. We dont have any SM and I think that is noticable, because we have basically no continuous improvement. We still do retros but... without an SM they are mostly ineffective in my opinion. And I think there is lots of potential in having and being an SM - mostly that those skills are more broadly usable than being a PO. I'm now an expert in, say, accounting... with my knowledge going into a different field like b2c social media or similar.. some skills are transferable, but the things you become an ""expert"" in ... way more tricky I think.

But thats just whats going on in my head, have only had this job as PO so far, so who knows what the next job brings.",2022,After every scrum meeting
talkingtunataco501,2,"I can see what you're saying about the PO stuff. I would want to be interested in what I am building out as well. Just being an order taker is boring as shit to me.

Being an SM is a special skillset, and a special kind of hell. You gotta be good at facilitation, when to allow conversations to go on and when to cut them off, and how to interact with people. You have to have a feel for the pulse of the team, and you have to ""handle"" some tough personalities at times. I've got a pretty good handle on things, but this morning's stand up was a fucking disaster, and I let it go on and be a disaster because I needed a data point to have some tough conversations later.

Scrum teams without an SM are basically scrum in name only. One of the things that I pride myself on is having effective retros. I have a format that I like that has proven to be effective across multiple teams and multiple companies. It is actually worth peoples times. But retro formats and SMs are a very touchy subject. My format is proven, but I have a colleague that is struggling to find an effective retro format but also doesn't see the value in my format. I've tried showing them, but it comes down to them not wanting to put the work into it to figure out how to use my format.

I would maybe recommend trying another job as a PO. If that doesn't work, then try being an SM. Biggest issues that I have with being an SM are 1) I have very little ownership and 2) I have lots of accountability without authority.",2022,After every scrum meeting
Slaan,2,"We aren't even pretending to do scrum really, we just have a ""Kanban"" board with a prioritized list of tickets - I just pretended we were doing scrum in my previous posts because thats easier to grasp than trying to explain how exactly we are working :X. Though we do have Retros, Reviews & Stand Ups.

Your thought on me trying another PO position and then look into SM is what I'm thinking of right now as well. For one to get another perspective on the PO job itself and another to experience more team setups which I assume would be good insights to have if going into SM later down the line. I was also wondering about a consulting position in agile project management... many options, lets see ;).

I get your position on SM as well, that its people skills one needs. Difficult Conversations is one of those topics I know I suck at (in professional live as well as in personal life, sigh) but that always something to improve on. Recently bought ""Difficult Conversations"" by Douglas Stone, Bruce Patton & Sheila Heen - maybe it will be helpful :).

I am interesting in your approach to Retros - which format are you using? Our template right now asks ""What were we happy about? What did we learn as a team? What did we long for? What were we lacking?""... which doesn't really work all that well I fear.",2022,After every scrum meeting
talkingtunataco501,2,"Kanban is a legitimate Agile methodology. I'm surprised that you're having reviews, and especially retros, with kanban. Retros are one of those things that gets dropped first in any Agile practice, especially with kanban. I'm also biased because I truly believe in retros.

The key to having good retros is to have clear, assigned actions, and to follow up on those. With my retro format, I start off with the actions from the last retro. I check in with them to see if they were done, or if they need to be carried over to this retro. For this retro, I have a column for things that went well, a column for things to be improved, a column for discussions, and a column for the next set of actions. I do a round robbing to prompt everyone for 1 good thing and 1 improvement. Try to keep it short. Then, I go to the discussions where we can go in more depth about any issues and really talk about things. Actions usually come out of that and they go in the column for that. The next retro, we start with the actions from this retro. I also do a mid sprint check in on the retro actions because people have forgotten about them by that point. Does all of that make sense?

SMs can be valuable, but I've done it for so long that I'm ready to move on to something else. I just don't know what. Honestly though, I'll probably be stuck doing this for a few more years because although I hate it, I'm good at it, it isn't that stressful, and it allows me a lot of flexibility.",2022,After every scrum meeting
Slaan,2,"Hmm reading your post I think maybe we need more prepared structure in our retro. We just have the 4 segments I have described and then I note down what we want to focus or improve on and then send it once more to everyone after the fact - and try to come back to it in the next retro (which is only every 4 weeks atm). But I'm not keeping up with the ""Todos"" really, just one of those things kind of on my desk that I don't really have time for. But having them more visible even in the retro might help - and also to specify them more, for them to be more actionable and ""trackable"".

As far as your job prospects - I always assumed that there would be plenty of opportunities to find new challenges. Like moving towards agile coaching in a consulting capacity to help companies adopt agile instead of scrum mastering just one team. This way you could experience many different teams and grow yourself.

Or other areas that would mean enabling others. Though if thats what you are a bit tired of and want something you ""own"" (and that not being a team, I always think of a scrum master a bit of the ""team owner"" same as I am the ""product owner"" - responsible for what we own to grow and prosper :) ) something being a PO might be a good step, as you probably have many of the tools already that will be helpful in product management and the people skills to handle stakeholders :)",2022,After every scrum meeting
talkingtunataco501,2,"Definitely add more structure, and I would recommend a weekly check in on those actions at the end of stand up on Tuesday or Wednesday of each week. Brings more visibility to them, and retros are only valuable if things get done from them.

I absolutely do not want to get into agile coaching. I don't enjoy talking enough to be a coach.

Yeah, PO is the most likely path forward, or getting back into data analytics/data science. Honestly though, I'd be quite happy with a llama farm or a sunflower farm at this point.",2022,After every scrum meeting
TheSunflowerSeeds,3,"If you choose to, then once the sunflower has bloomed and before it begins to shed it's seeds, the head can be cut and used as a natural bird feeder, or other wildlife visitors to sunflowers to feed on.",2022,After every scrum meeting
Slaan,2,"Hehe, thats a romantic goal. Good luck in pursuing it :)

(I also enjoyed the sunflower bot lol :D)",2022,After every scrum meeting
talkingtunataco501,1,The s*nflower bot is one of the best on reddit.,2022,After every scrum meeting
Bojackartless,1,You are me,2022,After every scrum meeting
LupineChemist,1,"I'm not a dev, but I know my way around a few languages and do commercial stuff. It's really helpful in being able to tamp expectations externally but also call bullshit internally. Like the dev team defaults to ""that will be a couple days"" sometimes when it's literally a single line of css that needs modified",2022,After every scrum meeting
jalaska007,4,"Try dev turned PO, but still expected to do lots of the dev work. It happens a lot.

Being a dev doesn’t always translate to making a good PO, especially when the team infrastructure isn’t set up to support it. Lots of the work still ends up being done by the PO on top of customer support and roadmapping, made lots worse by bad customers needing lots of support. It burns you out quickly.",2022,After every scrum meeting
Cj0996253,20,"Yup any decent PO/PM will understand that estimations are exactly that - estimations - and they are subject to change once devs start digging into them.

If a dev starts working on it and notices it’s going to take longer, but doesn’t communicate that to anyone, then that’s when shit goes sideways especially if there are downstream dependencies that need to be informed of the delay.",2022,After every scrum meeting
Deleted Account,19,[deleted],2022,After every scrum meeting
Cj0996253,7,That is a great analogy and I’m going to use that to manage stakeholder expectations in the future,2022,After every scrum meeting
Slaan,4,"I learned a long time ago to not really care that much about estimations. Doing an estimation via planning poker for me serves only one purpose: see if everyone is aligned on the scope of the ticket and its complexity - if its off then there are still open questions or uncertainties that need to be resolved.

As far as estimations are concerned I only want to know 2 things: What do you think we can accomplish in the next sprint? And to be informed if what we thought we'd manage wont happen. I dont need that on a ticket basis really.",2022,After every scrum meeting
chamberlain2007,11,"“My expectation based on what I know is x-y hours/x points/etc, but I’ll have a better estimate when I’ve had a chance to do more investigation.”",2022,After every scrum meeting
Eastuss,10,"""how long will the investigations take""

I don't like how this job is treated like it's not creative or intellectual. I was never asked to do twice the same thing nor was I ever given fully detailed specifications and everytime I was expected to predict things precisely.",2022,After every scrum meeting
chamberlain2007,1,🤷‍♂️,2022,After every scrum meeting
mauiog,3,Me every sprint,2022,After every scrum meeting
anymbryne,3,I’m offended,2022,After every scrum meeting
galwayygal,2,I thought it’s just me!,2022,After every scrum meeting
ImaginaryCoolName,2,Extreme programming baby 😎,2022,After every scrum meeting
_blue_skies_,2,I hate you.,2022,After every scrum meeting
ILikeTraaaains,2,I feel personally attacked.,2022,After every scrum meeting
Shiro1994,295,"It’s almost done, I just need 1-2 workdays.

Continuing with meetings the whole day until sprint end.

Why is it not done yet?

Dunno.",2022,After every scrum meeting
Greenfendr,62,"This 💯. I've started giving quotes to managers in hours instead of days or weeks because that puts everyone on the same page.  When you say I can have it done in a week. The clock starts ticking in their minds. But If you say it's 40 hours, that seems to register that the dev 40 hours of work logged on it before it's 'late'. Those 40 hours might happen over the course of 3 weeks depending on meeting schedule and other Interruptions.",2022,After every scrum meeting
throwaway1246Tue,14,"I forward my calendar to anyone who asks.  If we talk about 2 days I’ll forward the calendar filled up with meetings afterwards and add, that it will start as of my next free block which usually is a few days out.",2022,After every scrum meeting
testthrowawayzz,5,"I can do this in a week.

*hey, can you do that thing for me? It’s URGENT.*

One week later

*Why are we pushing this again?*",2022,After every scrum meeting
JesMelmamaljx,103,And tomorrow is Monday. we go again,2022,After every scrum meeting
RacketLuncher,35,Uhoh I need to finish last sprint's tickets,2022,After every scrum meeting
fighterpilot248,16,"Lmao same. Got assigned something at 3:30 on Thursday that they wanted done by EOD Friday. Well, login to work Friday and turns out that actually, these other changes take precedent so do those first. 

Yeah took me almost the entire day to make the changes and never got to the task assigned to me on Thursday.",2022,After every scrum meeting
AdultishRaktajino,6,"It seems like everything is urgent where I work. Which of course means nothing is urgent. 

It turns into whoever complains the loudest or to the right people wins.

I too get things assigned to me at 4:30 in the afternoon, which is 5:30 for most of the company. Me: ""I'm gonna pretend I didn't see that.""",2022,After every scrum meeting
TheBirminghamBear,2,">It seems like everything is urgent where I work. 

That's all work, always, in perpetuity, until the end of time.",2022,After every scrum meeting
TesticalDefibrillate,1,I’m in this and I don’t like it.,2022,After every scrum meeting
stationhollow,1,This is why we always had our sprints start on Wednesday. People didn't feel tje need to work over the weekend go finish things they weren't going to accomplish.,2022,After every scrum meeting
lifeson106,99,"Once it's ""done"", the dev team will be nitpicking it in code review for a week, then the QA team will find a couple bugs that need fixed, then another week of code review for those bugfixes, then a couple days of fixing merge conflicts, then it will be ""done"".",2022,After every scrum meeting
cbackas,22,"Oh no missing some unit test coverage, better fix that",2022,After every scrum meeting
krubslaw,19,Code review for a week? 🤯,2022,After every scrum meeting
littletray26,57,Only because no one will FUCKING REVIEW MY PR,2022,After every scrum meeting
infinitecontent17,9,Cue the bitching that your PRs need to be “more granular” or some shit like that.,2022,After every scrum meeting
madbubers,9,Maybe if you weren't pushing 20+ file changes everytime,2022,After every scrum meeting
LevelSevenLaserLotus,9,"I once turned in a PR that had a few hundred files marked, with I think ~300k lines altered. The *actual* work I did was probably 2 files with around 50 lines changed at most, but I managed to activate a code formatting extension that I forgot I installed in VS, so it adjusted the whitespace and EOL characters of every single file in the repo.

It turns out GitHub does have a limit to the number of files it'll let you see at once under the ""Files changed"" tab. So now I *always* run a `git status` before even committing what should just be a one-liner.",2022,After every scrum meeting
ICantWatchYouDoThis,5,">So now I always run a git status before even committing what should just be a one-liner

I just use GUI and stage what I changed",2022,After every scrum meeting
MajorProcrastinator,5,"Don’t git add .
:D",2022,After every scrum meeting
AddSugarForSparks,2,You could also use the `--dry-run` flag to see what you're about to fuck up.,2022,After every scrum meeting
testthrowawayzz,1,Perils of having a small team where everyone is maxed out,2022,After every scrum meeting
HighOwl2,5,Lol how many merge conflicts do you usually have?  Because I've only had 2 in the last year and specifically target my development to not create them.,2022,After every scrum meeting
lifeson106,8,"I was mainly being sarcastic. If your project has good architecture, it's less of a problem.

On my last project, I had 6 devs working on a relatively small legacy code base that was originally written by a non-developer, so there were several ""God classes"" that caused pretty frequent merge conflicts.",2022,After every scrum meeting
AddSugarForSparks,1,Plot twist: All your projects are solo efforts.,2022,After every scrum meeting
HighOwl2,2,"Haha I wish.  Nah I currently am working for a startup in its exponential growth phase.  Company will likely be worth a couple billion in a year or 3 but will likely sell this year.  Me and another engineer got to build the stack from the ground up so it's been built modularly and conflicts are known way before they happen.  Just hoping they sell to a publicly traded company so I can make bank too...otherwise I'm selling my stocks at the first liquidity event.  

Company I work for is dope though.  My boss isn't an engineer...he just trusts us to do our job but has been involved with a bunch of successful silicon Valley startups.  CEO is a ridiculously good investor and this is his pet project.

Result is an engineering department fully built by engineers with almost no oversight...and my boss will go to bat for us on any blocking issue no questions asked.  Best job I've had in a long time.  Oh and nobody works after 4:30pm or on weekends aside from our customer support team so...my weekends are wide open as are my weekdays after 5.  

It is the unicorn of dev jobs.",2022,After every scrum meeting
GlazedHam13,2,"Most resolutions I've ever had to do in one code review for one story was 96. 96 fixes or comments addressed in crucible.

They were all from one person.",2022,After every scrum meeting
earthceltic,2,If you have a QA team you're already not actually doing Scrum. Not that anyone is in this micromanagement culture that most companies have these days.,2022,After every scrum meeting
infinitecontent17,2,"Only at dumbass companies that don’t understand that Scrum is framework, not doctrine. Which unfortunately is most companies.",2022,After every scrum meeting
lifeson106,2,"Dev and QA were entirely separate departments at the company I worked at. It was a shit show. The QA team folks technically reported to me for my project, but they had a different manager who prioritized QA resources, so sometimes my people would just get yanked off my project and it was out of my control. I did my best to integrate them into the scrum team, but yes, having them on a different team caused problems.",2022,After every scrum meeting
69f1,1,"If your ""done"" means anything else than ""deployed in production, working fine, no need to touch it again"" you're just lying to yourself.",2022,After every scrum meeting
LemonLimeAlltheTime,1,I guess I'm lucky to be in game dev.,2022,After every scrum meeting
4shtonButcher,1,Separate QA teams? I don't think you are doing Scrum there I'm afraid.,2022,After every scrum meeting
Deleted Account,155,It’ll be done in ${ DEFAULT_COMPLETION_TIME } days,2022,After every scrum meeting
lucidspoon,65,It'll be done in undefined days,2022,After every scrum meeting
Garrosh,21,Null pointer exception.,2022,After every scrum meeting
FattySnacks,3,Flair checks out,2022,After every scrum meeting
guessWhoTheyVotedFor,8,It'll be done in  days,2022,After every scrum meeting
Deleted Account,1,What language?,2022,After every scrum meeting
columbus8myhw,8,Finnish,2022,After every scrum meeting
Deleted Account,3,[deleted],2022,After every scrum meeting
Steebin64,3,FINNISH DEEZ NUTS!,2022,After every scrum meeting
Justin_Peter_Griffin,48,This post just gave me anxiety,2022,After every scrum meeting
penuserectus69,80,This meme was made by the scrum master gang,2022,After every scrum meeting
Nox_Dei,42,It's a lie. My scrum master does nothing especially not memes.,2022,After every scrum meeting
sc_rasczak,16,This guy scrums.,2022,After every scrum meeting
Nox_Dei,11,"If by scrum you mean ""waterfall process with agile keywords sprinkled here and there"" then yes.",2022,After every scrum meeting
Eledridan,13,I call that “fr-agile”.,2022,After every scrum meeting
Astarothsito,8,">If by scrum you mean ""waterfall process with agile keywords sprinkled here and there"" then yes.


No, by scrum I mean what did you do yesterday? What are you going to do today? Any blockers? Let me write your answers for you in my invisible keyboard, later I will tell your superiors how you're failing your estimations that you set yourself! Go back to work!


This scrum.


(I believe that scrum can work if you remove the scrum master)",2022,After every scrum meeting
teddytoosmooth,1,Tell your SM to read the scrum guide and get out of your way! The dev team owns stand up and may use whatever format they determine is useful for them to coordinate their work day. It’s not a status update. Shitty implementations of Scrum give it a bad name.,2022,After every scrum meeting
Too-Late-For-A-Name,36,Everyone knows the last 10% of work take 90% of the time,2022,After every scrum meeting
Impressive-Review882,35,"PM here (don’t kill me) what is a better way to get an accurate progress report? No one likes going back and forth with unreliable information. How can I approach this so that I’m taking care of the dev team?

Edit: added “accurate”",2022,After every scrum meeting
P1r4nha,36,"Train your devs to look back at how much time they actually need for specific tasks. Retrospectives should teach them to better estimate the effort.

That said, some bugs are hard to debug, can be any time. 5min or 5 days.",2022,After every scrum meeting
LemonLimeAlltheTime,11,"Last line is the main point.

Fixing one bug could snow ball quickly and then become a much more complicated issue. That's just how it is sometimes and you can't really schedule.",2022,After every scrum meeting
ThinCrusts,9,"This this this.  

I've been dealing with a bug that non of my dev team can reproduce, and none of the logs sent from QA have given us a definite answer to where the problem is. Therefore my team and the server team keep pointing fingers at each other.",2022,After every scrum meeting
Kowzorz,1,"> Retrospectives should teach them to better estimate the effort.

Is this not a core part of the scrum process?",2022,After every scrum meeting
P1r4nha,2,"And how often have you experienced actual, well-executed scrum? I have never.",2022,After every scrum meeting
Kowzorz,2,My internship out of college lol. That was it,2022,After every scrum meeting
PowerFang,18,"Do you need it any more accurate then just by end of your iteration? If you do your relative estimation we’ll , then the team can normally output similar point values to each iteration on average.  If you focus on getting things delivered by end of the iteration, I’ve found teams run much smoother then trying to have micro deadlines within the iteration.",2022,After every scrum meeting
Impressive-Review882,7,"Agreed, less bugging about progress updates. Freeing up time for dev teams to focus. Setting a date and trusting the team to hit that milestone or reach out for a delay or blocker. Thanks for the feedback!",2022,After every scrum meeting
Razgriz_3_,15,"The best thing I’ve found in tech is that the dev’s estimate will rarely include QA or bug fixing. If you as a team have not identified and agreed on the definition of “done”, you’ll always have issues.

Not all PM’s do this, but try to understand what they are doing, the complexity, and the processes required. The better you do, the more likely you can ask the right questions. Just asking when it’ll be done is a pointless question. Understand what needs to happen to be done, then you can better identify your timeline.

Even understanding, apply a buffer. Doesn’t have to be huge, but look at the team/individuals and the trends. Do they tend to put out solid code the first time? Or is it usually a few rounds of QA? This could trigger a much larger discussion, but you should get the gist. So, even if you have all agreed on the DoD, adding a day or two without telling them, works in your favour. You cover them in the event shit happens, because it usually does… they have that breathing room, without anyone breathing down their backs. They’ll likely be working hard to hit the committed date, but if you let on you have two more days,, they are typically taken. 

Now, this works in yours and the teams favour when communicating to stakeholders. You either wind up delivering on the date you gave or before. Under promise and over deliver. You all look good for delivering earlier then communicated.

Note, my example is talking more to bugs/tickets. If you want your project… well, this is some work. Either do a PI Planning session with the team or a project plan. Ultimately, I’ve found even doing a PI Plan will still on occasion require a project plan to make sure you are tracking. All depends on the team’s maturity.

As painful and irritating as a PI Plan is, they are very useful and have tended to be within a week or two of what we estimate the work to take. So armed with that, we learned to ensure blocking of bug fixes, bug bashes and other known items that draw things out. 

After a while, as long as your team isn’t a revolving door, once they’ve done a few of these… you will become quite accurate. It makes everyone really think through what needs to happen and their approach. Also calls out dependencies and when they must be actioned so it doesn’t impact your development. Also provides the other team with ample knowledge you need X by Y. Giving them the ability to plan for it and not impact their deliverables.

Yes, there are exceptions. The technology chosen wasn’t investigated well enough and won’t do what you need. Or unknown dependencies on others which impact your deliverables. 

Sorry, started going down that rabbit hole. But you should get the idea. Start with DoD. Make sure everyone understands and agrees with it. Your SM should help you set that up as a part of all team agreements. Like definition of Ready or benchmarking your LoE (what dictates a 5 pointer vs an 8, if you’re using Fibonacci). These things help everyone be on the same page and communicate the same way. Note, if this is new to the team, it will take a while for them to get it ingrained. But you, your SM and Dev Manager will have to be on top of that, and be supportive and encouraging to ensure it succeeds. Again, the maturity of your team will dictate how much work this will be.",2022,After every scrum meeting
throwaway1246Tue,6,"At the end of the day it’s really hard to estimate a task for most of the dev team.  Juniors and mids are constantly working on things they’ve never done before . They’re in the growth phase of their career and so they’re always just making random usually wrong guesses . They’re not repeating like tasks, because if they were the seniors would have already made a core library to handle those cases uniformly. 

It’s not a John makes 6 cogs a day.  And 4 springs , so in 5 days he should make 30 cogs and 20 springs kind of thing . In all my time doing it , it’s rarely provided any value or accurate prediction of  velocity , especially with how often teams change members and ownership,  but it sure creates a ton of anxiety and frustration for the team",2022,After every scrum meeting
kameelyan,1,"Except as a dev you should be self aware of how quickly you learn something and the tech lead for the team should also understand the devs strengths and weaknesses. Estimates are a group effort, but a dev should have a general idea of estimated effort and then learn over time (via retros) on where they got it right or wrong.",2022,After every scrum meeting
adequatehorsebattery,4,"The truth is this.  Good teams task things out well, story point things well, have good tests, and are able to give pretty good estimates based on past velocity.  Bad teams tackle too-large stories, have inconsistent velocities and generally have no idea how much time they'll be stuck debugging or how long it will bounce back and forth with QA.

A rule of thumb:  if somebody on the team says ""it will be done soon"" and nobody on the teams points out that that's a meaningless response, then it's an inefficient team and even the team has no idea when it will be done.    There's no way to ask the right way, they legitimately have no clue.

Mind you, bad teams tend to stem from bad management and bad management processes.  Nothing destroys an efficient team faster than management enacting stupid incentives and crappy work practices.",2022,After every scrum meeting
Rephaeim,2,"Honestly, dev work is what's known as 'complex' work. Bit for bit getting accuracy is nearly impossible, predictability over time however is super useful. I recommend checking out the book 'When will it be Done?', great and insightful read. :)",2022,After every scrum meeting
Bojackartless,2,Always keep a buffer time of 20% in your release plan.,2022,After every scrum meeting
Feroc,2,"SM here (please, don't kill me either), it's the job of the PO to have stories that are small enough to finish them in a few days or less. So your accurate progress report would be closed stories. 

With enough time you should be able to find a realistic number of stories that can be done in a sprint.",2022,After every scrum meeting
4shtonButcher,1,"Two things I think can work wonders:

1) Make work packages so small that it is unlikely things ever take more than two days. Solid code base required. (if tech debt stands in the way, reduce tech debt to gain speed later)

2) Celebrate small victories (e. g. getting things done quickly, hitting sprint goals, other small stuff). Even the simple job og saying ""really good job"" more often when people finish a story can lift morale.",2022,After every scrum meeting
KB2408,1,Do you really need a daily update?,2022,After every scrum meeting
zodar,56,"Project Manager : ""Please schedule all unforeseen problems you will run into while completing this project.""",2022,After every scrum meeting
HighOwl2,20,"This is why you estimate time to completion as 3x your first guess.

1x = everything went well.

2x = Hit some issues but nothing too bad.

3x = Came across an issue that nobody has ever faced before and needed to go through the entire execution path line by line to fix.

You almost never pass 3x so you're on-time or early 99% of the time.  You also get to fuck off for a large portion of time if you finish in 1x because you never tell anyone if you finish in 1x...you fuck off until you hit 2x.  Just remember not to commit until 2x since your commit time is logged, not your merge / push date.",2022,After every scrum meeting
MrZalais,5,What? You mean you don't commit as soon as you are done and then ask for the next priority task??? /s,2022,After every scrum meeting
interiot,2,"""Hofstadter's Law: It always takes longer than you expect, even when you take into account Hofstadter's Law.""",2022,After every scrum meeting
HighOwl2,1,Lol do you have a bot posting under your account?,2022,After every scrum meeting
foolishmuffin,1,I'm a PM and I think I'm going to make a poster of this and put it at my desk.,2022,After every scrum meeting
Physical-Armadillo12,26,CHOW-DEARAH!!?!!!!???,2022,After every scrum meeting
Deleted Account,10,SAY IT FRENCHIE!!,2022,After every scrum meeting
Physical-Armadillo12,3,YOU ASKED FOR IT (Quimby voice)!!!!!,2022,After every scrum meeting
PowerFang,25,"To be honest , if this keeps happening , in my view there is not psychological safety in the team. Devs feel they have to say it will be done soon due to some external pressure (some manager or PM). It’s rare that devs say this because of dev to dev pressure the reason being other devs will typically offer to help if it’s a dev struggling unduly (if they aren’t offering to help, it typically means they know the task is tricky and understand why it’s taking longer and are just grateful it’s not then doing the task)

So for me, if this is a constant thing happening in your team, I would say there is non-dev pressure that is causing it and in my view, that pressure makes it worse and slower.

For the teams I manage , I’ll call the devs that do this out in my 1 on 1’s and try and source where the need to say it will be done today over and over comes from.  Ease them that’s it’s not required and to not be soo optimistic - try not to “cry wolf” at when you will be done. But I try source where the need to say it will be done today over and over comes from and address that - because it’s not from me.

Focus on looking after people and they in turn will look after what they need to look after. People by default want to do a good job, assume good intent, teams operate much better in that type of environment.",2022,After every scrum meeting
Deleted Account,6,[deleted],2022,After every scrum meeting
PowerFang,2,"Saying someone is low performance purely on unable to estimate real life time is not great.  I do feel that there should be a plan to get an effort estimation though - typically this involves uncovering the unknowns of a request.

It’s hard to gauge actual real life estimates, but at the end of the day , they are “estimates” not “actuals”.  I find it easier to compare a task to something that the team has done before - for instance feature B should be similar in effort to feature A - I find estimates using this approach are better on average. But unknowns needs to be factored in and hence the effort should be increased if they exist.  These unknowns should be spiked by the team as soon as possible to get some idea if there are any curveballs in there.

Once that spike has happened , you can re look at the effort estimation as you have cleared some of the unknowns.

So I expect the devs to have some plan to uncover effort estimation , but I don’t hold them to giving me a time.  For instance, saying only “I don’t know” when asked about the effort of a feature, I wouldn’t accept.  But saying “I don’t know the effort involved yet , there is unknowns in here and here that we need to uncover - I want to spike out these areas to highlight any curve balls , after which we should have a better idea as to the effort. At initial rough estimate , I think it’s a similar effort to feature C pending the outcome of these unknown spikes“ - I find that type of approach fine - there’s a plan to help uncover some effort estimation ( but all relative estimates , compare to a similar feature the team has done)",2022,After every scrum meeting
Deleted Account,1,[deleted],2022,After every scrum meeting
PowerFang,2,"Yeah that's bad - if you really have to give times and you have no way out, i would double or triple whatever you are thinking the answer is - humans are just bad a real life time estimates.

I would also caveat that this is uninterrupted time and you need to call out things that prevent your uninterrupted work time - decline adhoc meetings, snooze slack, ignore emails and tackle 1 thing at a time.  Find a schedule to check notifications maybe at the start, middle and end of day, the other times you focus in dev land.",2022,After every scrum meeting
JonasErSoed,21,"""I know I said so yesterday, but *today* it will be done!""",2022,After every scrum meeting
kontekisuto,10,Today's tomorrow,2022,After every scrum meeting
Nyadnar17,20,Software engineers have feelings to you know.,2022,After every scrum meeting
talkingtunataco501,1,"True, but those feelings can be smoothed with donuts.",2022,After every scrum meeting
fredd0h210,29,"It will be done by the end of the iteration (i meant sprint). That's what the iteration (sprint) is for.  If I get it delivered early, that's a bonus. 

Continually asking for it earlier creates anxiety that will make it take longer and will cause me to be agitated and rush. This leads to defects.  So, understand, asking when something will be done is the cause for it not being done as soon as it could be...

Edit - I misspoke- I meant sprint.",2022,After every scrum meeting
morphemass,15,"< Checks Jira ... _Iteration start date: 15th Feb._ 

Sounds good to me.",2022,After every scrum meeting
fredd0h210,1,I misspoke... fixed,2022,After every scrum meeting
Deleted Account,7,"LOL

But the QA needs to test before end of sprint!",2022,After every scrum meeting
AcidicVagina,5,And then they ask how long QA will take. IDK. How much do you trust the dev?,2022,After every scrum meeting
janeohmy,2,You people get bonuses?,2022,After every scrum meeting
Salanmander,38,Holy JPEG artifacts...,2022,After every scrum meeting
netherous,1,[You rang?](http://needsmorejpeg.com/i/zjrX7),2022,After every scrum meeting
RotonGG,13,Whats the original dialouge?,2022,After every scrum meeting
droi86,15,https://youtu.be/_1KXOy9_6gY,2022,After every scrum meeting
therealchadius,20,"I learned long ago to define tasks in terms of complexity, not time.

\- This is super trivial, usually some text changes.

\- Pretty easy to do, I just gotta add a unit test for this module.

\- This is kind of complicated, I need to see how these systems interact

\- Holy crap, this won't be ready for a long time, maybe we can break it up into smaller steps?

I soon learn which Scrum Masters understand time predictions are useless and which ones are addicted to calendars.",2022,After every scrum meeting
mayhapsably,6,What do you do if you're pressured into giving a time anyways?,2022,After every scrum meeting
therealchadius,9,"Always double my estimate so the scrum master is pleasantly surprised. It also helps me if I'm uncertain.

My brain: IF everything works AND I thought this through AND there are no complications with other teams, this should take one day. But I'm not certain about this.

Out loud: 2-3 days.",2022,After every scrum meeting
Feroc,1,"> Always double my estimate so the scrum master is pleasantly surprised.

As a scrum master: Why does it matter if you surprise me? The estimation of stories isn't something I really care about. The only thing that would matter is if the estimation is pretty high, in which case I would motivate to split the story in smaller ones.",2022,After every scrum meeting
earthceltic,2,Tell them they're not actually doing Scrum by asking that or by having anyone who is a leader participating in that meeting. They are doing waterfall and if they want hard time limits (which is what they're actually going after) they need to support you in the ways that waterfall would (which means handing you 100% engineered work requests designed by someone who knows the tech better than you do and then breaking it down into measurable pieces of work).,2022,After every scrum meeting
Carl_Bravery_Sagan,1,"Institute an organizational agile change so that your managers are pressured to stop.

Or, easier, find a better place to work.",2022,After every scrum meeting
Darktidemage,1,"This makes no sense. 

If it's more complex it should take more time. If it's less complex, it should take less time. 

You can just be intelligent enough to equate the two precisely. ALL that management cares about is how long it will take for you to fill all the ACs on the ticket and have it pass all the tests devised by QA. 

They give zero shits how ""complex"" it is. They want to understand project velocity.

Will there ever be a situation where you say ""this is low complexity"" but it takes a long time? or a situation where you say ""this is high complexity"" but it takes little time? If yes, then describing it in ""time"" instead of ""complexity"" is just more useful, to literally everyone involved.",2022,After every scrum meeting
freshcooked,5,"There’s an implication of time with the complexity estimate. A lot of devs struggle to accurately estimate a task by hours or days to completion and makes it easier for them to bundle things by complexity. Really depends on what works for everyone in the team.

https://producthabits.com/engineering-estimates/",2022,After every scrum meeting
therealchadius,1,"If a scrum master absolutely needs time, I'm going to give them a range to indicate uncertainty and complexity. If I'm really certain and it's simple, I'll give them a prediction down to the day. If it's complex or too many unknowns, I'll give a wide swing of like 50-80%. That's a signal it's complicated.

Scrum Masters have to understand software development isn't a conveyor belt, and step 1 is to stop giving them inaccurate time estimates. Software engineers are infamous for giving bad estimates anyway (see this post's meme image.)",2022,After every scrum meeting
Darktidemage,1,"Sure, you should give them ""time"" estimate, and that should include the complexity so they can add more padding to the sprint based on historical data of complexity to time analysis.",2022,After every scrum meeting
Heavy_Birthday4249,1,"time and complexity only generally correlate. and they don't scale the same. not to mention that some tasks expand to fill the time given them, even the simple ones. you have to estimate the time and complexity separately in order to capture all the risks",2022,After every scrum meeting
Feroc,1,"> If it's more complex it should take more time. If it's less complex, it should take less time.

Many many years ago, I still was a software developer apprentice, we had an incident at the office and lost a lot of data and of course the backup did not work (no idea if we even had one). ""Luckily"" someone had a printout of the data.

Over the next week 4 of us were busy typing. Complexity: 0",2022,After every scrum meeting
Darktidemage,1,"The part you quoted is the opposite of my point though. 

>They give zero shits how ""complex"" it is. They want to understand project velocity.

was my point. 

>describing it in ""time"" instead of ""complexity"" is just more useful, to literally everyone involved.

the person above me is the one saying to estimate tickets by complexity. I was saying to do it by time.",2022,After every scrum meeting
Feroc,1,"> the person above me is the one saying to estimate tickets by complexity. I was saying to do it by time.

The estimations in a Scrum team are for the team, not for the management. So the estimation should be done by whatever works best for the team. Estimating things by time has the risk that the management wants to use those numbers for forecasts or as a KPI, that should be avoided.",2022,After every scrum meeting
Kowzorz,1,"In my experience with scrum/agile in games and tools systems (maybe it's different in other sectors), if you have a (feature, nonbugfix) single task that's longer than 8-16 hours, then that task probably needs to be broken up into explicit smaller subtasks anyway. If you are unable to do that, then I see that as a bad sign, and you may want to set some time to plan out your coding route, uml, etc etc, so that you have a better idea of the scope of the task in the first place. I had many PM-visible tasks titled something like ""figure out how long tf this will take"".",2022,After every scrum meeting
Deleted Account,9,[deleted],2022,After every scrum meeting
champagneparce25,5,I wish lol,2022,After every scrum meeting
LemonLimeAlltheTime,3,"The biggest lesson I learned in this thread is that unless it's super critically important, keep the engineers away from the meetings and just send them the notes. Or don't even send the notes unless super important to THEM.",2022,After every scrum meeting
KB2408,1,"""I've got Internet issues""",2022,After every scrum meeting
Darktidemage,9,"Developer says ""it's done"" 

It goes to QA. QA begins testing. 

IF QA says it passes all AC on the ticket, then project management has to sign off that they did a once over pass and agree, it passes. 

THEN it gets merged into the main branch

Then we wait. Once everything else in the current sprint is also merged in, then we begin our regression testing. TWO WEEKS minimum of this build running through both basic (striped down and fast) and advanced (every test in the plan) and maintained performance metrics, even with heavy load, in various environments (browsers or OSes). 

Then we can consider doing a release. 

anything else is batshit insanity.",2022,After every scrum meeting
Deleted Account,3,"So you don't functionally test all new changes together? Just regression test? How will regression testing cover new functionality? And it would seem your definition of done is regression ready? How does this work with a rollback if you discover a production issue? Or what if you need to back out a single change that has been merged into master? How many branches are you running, and how many environments? Do you code review before pushing to QA? How do you manage the regression outside the sprint? Who is responsible for it? Do you remove capacity from the sprint team for this responsibility or do you have non-scrum-based resources for this?",2022,After every scrum meeting
Darktidemage,1,"Well, yes, I totally skipped the part where any new functionality is added to the regression test plan.",2022,After every scrum meeting
Deleted Account,1,I was honestly asking not being a smartass. Trying to work this out in our shop,2022,After every scrum meeting
Darktidemage,2,"You work for amazon game studios huh? =D Just kidding. 

I think the critical thing is having a formalized agreed upon release procedure. Are you making some game people play - or are you making a robot that does surgery on humans? 

Very small team? When you plan for a release, you should not even be doing a sprint that week. The entire team, including programmers, managers, bosses, owners, should be 100% focused on QA. Like ""hey we are going to release this. This is going to BE our company"" 

50-100 person team? Maybe do a small sprint while some % of the team peeled off to manage the release. 

Huge team at google or something? Well - you should have full time dedicated release / master testing people while you also have a full time non-stop sprint running. 

>what if you need to back out a single change that has been merged into master?

Well, one thing is you have your branches, you merge those into master, but then when you want to do a release you need to make sure you copy a new branch specific for that release - called ""release X.X.X"" and then run your release process on THAT branch, which is actually getting released, not just run it on master, and then do a release of master. Or just run your tests on master, then cut a release branch, never test that specific release branch, and just assume having tested on master is good enough. 

otherwise you will have scenarios happen where you did a huge % of your testing on some branch that wasn't even the one you released. And you might be like ""this is the most obvious thing ever"" but if you go while a release is actually attempted and dig into your continuous integration and actually look at what all the QA automation scripts are ACTUALLY being run on don't be super shocked if they only run on master and never actually specifically run on ""release XYZ"" builds too. 

and if you are just running on master, then that means any time you do a release, then the day after the release or the day before the release if people are merging tickets for some other sprint then you only had those scripts and your manual testers hitting the actual release branch for like 24 hours ? 

>Do you code review before pushing to QA? 

I'm pretty sure having different programmers code review each others work before submitting to QA is pretty standard industry best practice. I would suggest it. You can get tickets to pass QA with very dodgy crappy code, unless your QA people are full blown programmers or better than your coders. The QA team is not going to be telling you how easy the project is to maintain, or modify. Doing code reviews regularly should be part of your tech teams lives. But you know, it is a corner that CAN be cut in the short term if you are willing to pay that debt in the long run.",2022,After every scrum meeting
Deleted Account,1,"We do code reviews with approvals via PRs in Azure Dev Ops, we typically run a DEV and Master branch. We have a sep. build and deploy for DEV, but then Master is one build with sep env deploys to QA, REG, and Prod. We record commit IDs with each release, but based on what I am reading from your process, you have a candidate that doesn't get built completely until regression?",2022,After every scrum meeting
Darktidemage,1,"No, we merge everything into our master branch by the end of each sprint. These are built and looked at to ensure the sprint was completed.

It's just this is our process if we are doing a release. To not release a candidate build unless it's been cut and fully regression tested for quite a while. 

The end of the sprint still involves testing the master build, even running it through regression, also. Even if there is no release right then.

I actually set up the continuous integration so every time anything is merged into master it builds a copy and puts it on our server in a folder w/ the ID. So if you ever find some bug you never imagined before you can go to this folder, test a build from like 1 year ago to see if that bug existed then, then test one from 1/2 a year ago, then 1/4 of a year ago and in like 5-7 quick tests you can find the exact commit that introduced that bug.",2022,After every scrum meeting
69f1,1,This sounds complex as hell. Are you building a bank or something?,2022,After every scrum meeting
Physical-Armadillo12,5,IT’S CHOW-DUH! GET IT RIGHT!!??!!???!!,2022,After every scrum meeting
Eledridan,5,I thought during morning stand up that you’re supposed to bring up any barriers that are preventing you from working/finishing your tasks.,2022,After every scrum meeting
Deleted Account,-1,[deleted],2022,After every scrum meeting
Rossi007,6,"Have some balls and bring that up at retro, what can be improved - PM having a tech rep included in providing estimates to the client",2022,After every scrum meeting
Feroc,2,"Yeah, we had one of our internal customers reaching out to us, telling us that they need feature X on date Y.

The only correct answer from our PO: ""No.""",2022,After every scrum meeting
Deleted Account,1,[deleted],2022,After every scrum meeting
DogeWelder,5,WHY DO I KEEP GETTING THIS SUBREDDIT RECOMMENDED TO ME 😭 guys help I’m not a programmer and i don’t understand your jokes it’s literally a foreign language to me,2022,After every scrum meeting
Oxygenius_,4,"“Say Chowda!”


“Chow-durr”",2022,After every scrum meeting
planetofthemapes15,4,I feel personally attacked,2022,After every scrum meeting
TheBatmanIRL,3,"As a QA manager, I cracked a smile at this one.",2022,After every scrum meeting
Carburetors_are_evil,3,"I always say that I am weeks away from production, while I am actually like 4 days away.",2022,After every scrum meeting
Deleted Account,4,[deleted],2022,After every scrum meeting
Carburetors_are_evil,2,"I let the motherfuckers know that I'm like one bad day away from leaving their shit. Nobody wants to start some beef with me, because I've interwoven my code in so many projects that it would be insane to replace me.",2022,After every scrum meeting
p1-o2,2,"This works until suddenly you wake up one morning and your login is disabled.

Seen it happen too often.",2022,After every scrum meeting
Carburetors_are_evil,2,Sweet release.,2022,After every scrum meeting
Rickerman,3,Fuck.. i said that 2 days ago...,2022,After every scrum meeting
Deleted Account,3,This is the difference between a functioning product and a product that’s ready for release.,2022,After every scrum meeting
Manach_Irish,6,They did not define which planetary day. We work in Vesuvian time.,2022,After every scrum meeting
tijostark,3,Vesu..? Wait what?,2022,After every scrum meeting
Sir_Keee,2,"I think they meant Venusian, but got his clock from a volcano instead. Unless the Italians are running on a whole different time scale which might also make sense.",2022,After every scrum meeting
Throwing-up-fire,2,Des lentilles!,2022,After every scrum meeting
marapun,2,"ow, my pride",2022,After every scrum meeting
Eastuss,2,"I mean, if you don't tell them that they get infuriated.",2022,After every scrum meeting
thanacus,2,Rule of coding 0x08af: First 90% of development takes half the time. Last 10% takes the other half.,2022,After every scrum meeting
chaosrain8,2,"As a PM (don't murder me), I always ask for a specific end date, and immediately internally multiply by 2-4x (depending on the engineer).

You can't change the developer, so you might as well change the plan.",2022,After every scrum meeting
DiZZYDEREK,2,This should've been a meme format years ago. Favorite Simpsons episode.,2022,After every scrum meeting
aunluckyevent1,2,"none talks about the completely absurd requests that pit the dev in this absurd situation where you can't see no end

i'm. currently in this mess

**vent warning**

as always people took agreement with customer without talking with the only application owner - > me

result

we shoud have ended one week ago and i still can't estimate when i will be able to finish the requested changes",2022,After every scrum meeting
Deleted Account,2,"I feel sad for all these scrum people ITT

Sincerely, the Kanban gang",2022,After every scrum meeting
OcupiedMuffins,2,The state of 343 right now lmao,2022,After every scrum meeting
Cptexploderman,2,"Vampire the Masquerade: Bloodlines 2, Baldur’s Gate 3.. Paradox Interactive and Larian Studios.. we’re looking at you.",2022,After every scrum meeting
MythicPink,2,"Me to the QA: ""I can get that fix to you in an hour"".

*3 hours go by*

 ""Okay, just 30 more minutes"".",2022,After every scrum meeting
Flamecrest,2,"Hi, reminder from a Dev turned Scrum Master that this is not Scrum's fault. I don't even have to read the comments to know that there are people in here that will blame Scrum Events, because 1) they take up too much time, 2) they're inefficient/ineffective, or 3) it's all a sham.

10 bucks says that whatever situation you put in front of me, I can tell you why your Scrum process isn't working for you. 

Don't blame Scrum. Scrum is here to help. Read more into Scrum by ways of [the Scrum Guide](https://www.google.com/url?sa=t&source=web&rct=j&url=https://scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-US.pdf&ved=2ahUKEwiHj67WoOj2AhWPPewKHda1BpIQFnoECBoQAQ&usg=AOvVaw0ZaxOh1MA0hwIbyJM-VM34) (or the internet, of course), and work together with your team to improve your process.

Give me downvotes if you think I deserve them, idc about reddit karma. Just trying to make your working lives a little easier.",2022,After every scrum meeting
benjamineich,3,"Hi,

also a dev that turned scrum master here. Turned back to dev a few years ago. Totally agree with you.

This joke fails because ""Almost done"" doesn't exist in Scrum. A task is either Done or Not Done. It's the product owner's responsibility to extract ""speed"" from the past and make (data based) assumptions about the future.

Oh well. Scrum only works if everyone knows their roles and responsibilities. And also, Scrum is not a golden bullet.",2022,After every scrum meeting
keith2600,2,"Ah agile. Always gives me the same kind of feeling that I get from MLM pitches. 

I guess it's probably because all the contractor teams that get hired by every company I've worked at has seemed about as knowledgeable about software development as your average psych major in college that had no idea what to do after graduation. 

Then the training comes off as well as those entry tier IT phone answer people that literally read questions and answers off a list at you.

Biggest scam in the industry right now imo.",2022,After every scrum meeting
hammersage,2,this is why I try to put everything into prod before it's finished,2022,After every scrum meeting
gh0sti,2,If only scope creep never happens and having useless meetings discussing how the project is going.,2022,After every scrum meeting
Sahith17,3,So they become Elon with fsd /s,2022,After every scrum meeting
Fik_of_borg,1,"Right now I'm in the process of making relatively minor changes to our invoicing software, and in all meeting I have called to show the completed changes and proclaim it in production ... the accounting people change the requirements.

So, it will be in production in two days, but I don't say which two days.",2022,After every scrum meeting
Random_Vanpuffelen,0,GTA VI be like:,2022,After every scrum meeting
Next-Experience,-2,I tell them to fuck of. I don't give estimates. Either you want it or you don't. I have no idea how long anything takes because you just can not predict the future.,2022,After every scrum meeting
redballooon,3,"Imagine going out to dinner, and after you have ordered you wait, and wait, and when you ask you are told they can’t predict the future. But what they know for sure is the longer you wait the more you’ll have to pay.

But hey, either you want dinner or you don’t, it’s your decision.",2022,After every scrum meeting
Next-Experience,0,"The comparison is just broken. 

Imagine cooking and then all of the sudden you find out that you are missing an egg that you didn't even know that you needed one. So you go to the market and they say no eggs but you can have a chick. So you raise a chicken and after a couple month that chicken lays your eggs and you continue cooking.
You see how cooking isn't applicable as a metaphor here?
Cooking usually comes with pre defined recipes that you can just order the ingredients. Sure sometimes you can and have to substitute but you are not coming up with a whole new recipe on the fly because some costumer want something completely new that they will even have the audacity to complain about if it doesn't taste incredible the first time.
Programming just doesn't work like that or at least not if you want something that isn't pre assembled building blocks that you just stick together.",2022,After every scrum meeting
Clavelio,2,"So is that a domestic comparison of you cooking your own meals and not having eggs and deciding its somehow better to raise an animal instead of cooking something else against a commercial comparison of you’re getting paid to prevent running out of eggs, still run out of eggs, but anyway you decide it’s better to keep it to yourself and raise an animal instead of telling your customer you’re out of eggs",2022,After every scrum meeting
Next-Experience,1,"What I was trying to get at is that cooking and programming are two very different things and trying to build a comparison between them is flawed and misses the point.
The metaphor was meant to portray that a specific technology that is needed to solve a problem is not available but a technology that you can use to build that technology. You need eggs but eggs are for some imaginary reason not available. Chicken though as a base technology are available so you who understand that if you raise a chicken you get eggs raise the chicken so you get the eggs.
Metaphors suck especially if you use things that don't work for it.

Cooking is not a creative thing. Cooking build around perfectly following a recipe. It is creative when you create a new recipe but creating new recipes usually does not happen in the moment a customer asks for it. You don't put things on the menu that you are actually not selling. You make a new recipe because you want attract or keep customers because they expect new recipes and might go somewhere else if they get board of the same food.
If you already have customers they just want to be able to order what you already are providing.

In programming you are given constantly changing requirements based around customer wishes. You might have an idea what is needed to make that happen but you can not plan on discovering that a specific problem requires something that you didn't expect. Maybe that something is something that isn't available on the market as a solution to buy
So you have to develop this special solution which will take an amount of time that can't be planned because neither you nor anyone else has ever done it.
Ofcause you tell your customers that it will take longer but what really is the point of doing so? They won't understand why it takes longer. 
Plus all ROI calculation are flawed to begin with. In automation a single component can't be reliably calculated because knock on effects are inherently difficult to understand. You might think you do but you don't.",2022,After every scrum meeting
redballooon,1,"The key is communication. If the chef goes to the customer and says “sorry, other than advertised I found we have no eggs and now need to raise a chicken”, then they may well decide that they don’t want that dinner after all. 

I am going after your “either they want it or not” statement. Whether anyone wants something always also depends on cost and time of delivery. Restaurants only have business if they can deliver what they promise in a reasonable time, and so does your customer.",2022,After every scrum meeting
Next-Experience,1,Yes it is. Ofcause you should tell your customer if you encounter issues that greatly increase the amount of work needed. If they then want to end the project that is both your and the customers option. In many situations it is really difficult to make a good ROI calculation. Now this depends a lot on what kind of product you might be selling. I only do customer specific automation and it can be quite difficult to understand what really is needed when you don't fully understand what the process is that you are going to automate. I get around the change of time because my business model does not depend on the time needed to finish the project.,2022,After every scrum meeting
tmarkov98,1,Oohhh this is so good! 😂❤️,2022,After every scrum meeting
kontekisuto,1,It do be like that tho sometimes,2022,After every scrum meeting
fishtaco77,1,85% complete,2022,After every scrum meeting
luridfox,1,I'd love them to sign approval documents in a reasonable time so I can push it to production,2022,After every scrum meeting
GansNaval,1,It’s chowda frenchie.,2022,After every scrum meeting
MikeLee-Son,1,Someome should tag Mark Jacobs,2022,After every scrum meeting
Deleted Account,1,It'll be done in nan days.,2022,After every scrum meeting
the_dark_horse012,1,"Two daaaaaays, two daaaaaaays. It's months. Schedule it right.",2022,After every scrum meeting
Tey37,1,Ha,2022,After every scrum meeting
exmachinalibertas,1,I feel personally attacked,2022,After every scrum meeting
Bakoro,1,"The thing I usually hear myself saying is ""I'm hoping to get this done by the end of the day."".  Of course I am *hoping* to, but inevitably there's some quirk that drives me crazy so I ended up working way more hours, because ""the day"" doesn't end until I leave.",2022,After every scrum meeting
BluexYoshi7,1,Hey it's on the list.,2022,After every scrum meeting
nirvanist,1,my boss will like it,2022,After every scrum meeting
blunt__nation,1,"As a newly employed Software Engineer that works in an agile environment, I get this meme!",2022,After every scrum meeting
Deleted Account,1,Haha.,2022,After every scrum meeting
oneeyedtrippy,1,Every crypto project I swear,2022,After every scrum meeting
pseudophilll,1,Too real man,2022,After every scrum meeting
LordFlipyap,1,"I've been wanting to make a proper game, and I've started yes. At first I was like it'll be done in like half a year to a year, I've been doing so much procrastinating it'll never be finished.",2022,After every scrum meeting
1GoodIdeeaOutOf100,1,Scrum means ashes in my native language ( romanian) ...so...what's scrum in english?!,2022,After every scrum meeting
I-Kant-Even,1,[Cries in Project Manager],2022,After every scrum meeting
Atherutistgeekzombie,1,As a junior dev at his first job... I feel attacked,2022,After every scrum meeting
albaiesh,1,"""I'm in this image and I don't like it""",2022,After every scrum meeting
Contect,1,I t,2022,After every scrum meeting
ilyak_reddit,1,Shau-derr,2022,After every scrum meeting
adamxi,1,"Let's not forget that some organizations are so process heavy that any estimate has to be multiplied by 5.. When something that supposedly was supposed to take 2 days ends up taking 10, an organization should look invards at their process rather than at the developer.",2022,After every scrum meeting
Deleted Account,1,"me: ""I miscalculated the difficulty in my requirements gathering, it's actually going to be five extra days on top""

pm: ""...""",2022,After every scrum meeting
SpacemanDookie,1,“I know it is released tomorrow but can we add a massive amount of work on to this? I know you recommended it at the time and we said no but decided it’s important now”,2022,After every scrum meeting
awan_afoogya,1,I resemble this remark...,2022,After every scrum meeting
Mycroft2046,1,sync && sudo umount /dev/sdXX && sudo udisksctl power-off -b /dev/sdXX,2022,After every scrum meeting
danglesReet,1,I think they are called “scum” meetings haha,2022,After every scrum meeting
empathytune,1,The concept is always clear but the nuances never are lol,2022,After every scrum meeting
Yaboi0511,1,It’s ChOwder,2022,After every scrum meeting
Deleted Account,1,So true 😂😂,2022,After every scrum meeting
Deleted Account,1,"This is fucking hilarious, stealing this",2022,After every scrum meeting
AStrangeStranger,1,It's funny one project I worked on both the PM/Scrum master and the Product Owner kept suggesting to the team they were over committing themselves in sprints - and asking them to try focusing on one thing at a time - but then both myself and the PM each probably had more development experience than the all the developers (such is joy of outsource/offshore),2022,After every scrum meeting
Zeioth,1,"I need one where the client hires you to create ""SomethIng like X milliorarie company but better and my budget is 6000"" (real)",2022,After every scrum meeting
R4v3nant,1,"Lie on their faces, but do it with honesty.

""If nothing comes up and everything turns out right, it'll be done in two days""

Nothing ever goes according to plan and some dude will inevitably bleep something up, so if there's any complaints from the customer, pull the ""something came up"" card. They don't like it? They can do it themselves.

Of course, if a two-month project stays in the early phases through the whole two months, something is obviously wrong and someone will have to take a boot so deep up their winking-one that they'll feel a shoe-polish aftertaste.",2022,After every scrum meeting
deveronipizza,1,Others experience this too?? I feel so much better about myself now.,2022,After every scrum meeting
nisane,1,Wow lol,2022,After every scrum meeting
MichaelBluth3,1,I could really go for some shaow-dair about now.,2022,After every scrum meeting
Lykeuhfox,1,What if you're the developer and the SCRUM master that is lying to yourself?,2022,After every scrum meeting
eazy_c,1,"Documentation Manager here, can confirm.",2022,After every scrum meeting
GraphikQuotz,1,Cshowder....,2022,After every scrum meeting
Deleted Account,1,"I worked on x, no impediments",2022,After every scrum meeting
happygorilla,1,This is why project managers aren't invited to my team's scrum :),2022,After every scrum meeting
Deleted Account,1,"I hate when a scrum master brings up let's talk about any impediments and see if we can work around them. If it is a production support issue, and your company doesn't have dedicated support, what are you supposed to do? Tell the business sorry I am in the scrum team, can't be bothered? That doesn't work out. I've seen where we keep one dev out of the scrum each sprint, and it rotates, and they catch all production support. But that also has problems. Someone mentioned the shippable product going to regression testing after the sprint, is that common? Most places I have been always want the functionality in prod as soon as it passed QA. Had to convince my current PO we needed regression because of the number of times we have items that were not covered by AC come up. Example, they ask for a module, that will list out some serializable object, with an image or video, etc, but never mention that they want an anchor tag to work when the module is added to a page from an email link they are sending out with a marketing agency. Or, hey, one particualy content author decided to add 10 of the same module, and it isn't really performant when 10 are on there, why didn't you address this bug during QA or development? Go to the AC, place A module on the page.",2022,After every scrum meeting
engineeret,1,As a product manager I feel this. Developers tell me it’s done and I find more issues. Then I get upset because I’m the one that has to take the blame from the higher ups.,2022,After every scrum meeting
UnmarkedVan99,1,Accurate,2022,After every scrum meeting
Deleted Account,1,I hate how funny this is 😂,2022,After every scrum meeting
FalcorFliesMePlaces,1,"Well I mean I guess a poorly run scrum when methodology isn't followed.  First the table guy is a chicken whereas the developer is a pig.  Therefore the chicken shouldn't even talk rule number one.  Second there are 3 questions per developer.  What are u working on, what are your constrains, what have u accomplished. 

But chickens don't give a shit only care about this dhitty timeliness they came up with, without a sdlc or pmlc.",2022,After every scrum meeting
RamblinGamblinWillie,1,GTA VI,2022,After every scrum meeting
CrazySD93,1,"Report Post: I’m in this picture, and I don’t like it.",2022,After every scrum meeting
RexGamer99,1,Bendy and the dark revival be like,2022,After every scrum meeting
Deleted Account,1,why the personal attack bro :(,2022,After every scrum meeting
NotEntirelyUnlike,1,"all i gotta do is come up with a new way to say it's almost done tomorrow morning.  

every morning",2022,After every scrum meeting
Onefortwo,1,Does scrum make as many pointless meeting as I think it does or is it actually productive,2022,After every scrum meeting
Oxu90,2,"People just like to make as many pointless meetings as possible, most of them could had been a email

Daily should be 15min quick thing but it always ends up lasting 1 hour because somebody's dog got sick",2022,After every scrum meeting
jasper_grunion,1,"Scrum is a gerbil wheel for developers, change my mind",2022,After every scrum meeting
Deleted Account,1,Asking for estimates is a sign that you're divorced from the development process.,2022,After every scrum meeting
myrsnipe,1,This hurts,2022,After every scrum meeting
DMoneys36,1,Well God dammit what else are you suppose to say?,2022,After every scrum meeting
MrH0rseman,1,Idk why but my brain read this as after every *scrotum meeting* ![gif](emote|free_emotes_pack|facepalm),2022,After every scrum meeting
Deleted Account,1,"This continues to be the most normie sub on Reddit..


 there's no way half of you are real people who find this funny",2022,After every scrum meeting
mikeyeli,1,"What I do is, I double the points during estimates in sprint planning, that way if I take half the time on something, my bosses actually compliment me on my speedy delivery.",2022,After every scrum meeting
Select_Cantaloupe_62,1,"In all fairness, the coding *should* be done in two days. Not my fault some jackass with the access takes 3 weeks to push a button...",2022,After every scrum meeting
agonny,1,lel,2022,After every scrum meeting
littleMAS,1,"The 80/20 rule of project management --  The first 80% of the project takes 80% of the resources (including time).  The last 20% of the project takes another 80%.  Of course, this assumes the project is well run.",2022,After every scrum meeting
Xenomorph_v1,1,Tester: 2 days!? Are you serious? I can't test that in 2 days?,2022,After every scrum meeting
Deleted Account,1,Does anyone have the meme template,2022,After every scrum meeting
TesticalDefibrillate,1,1% of cases take 90% of the time to implement.,2022,After every scrum meeting
suspendedacountin321,1,It's Joel Michael Singer,2022,After every scrum meeting
Sufficient-Science71,1,"Ohhh please stfu, lmao",2022,After every scrum meeting
whatiswronggwithyou,1,or OR! We can collectively refuse to play along with the Agile micromanaging charade.,2022,After every scrum meeting
Deleted Account,1,r/AshesofCreation,2022,After every scrum meeting
E70M,1,"Kanban life is great, y’all",2022,After every scrum meeting
HairHeel,1,It was almost done until you piled on all those extra requirements.,2022,After every scrum meeting
PhatBitty862,1,Fuck…..so freaking true,2022,After every scrum meeting
takilleitor,1,"right, developer the culprit of everything. Let’s ignore for a moment PM & management overselling and setting unrealistic goals",2022,After every scrum meeting
whitehotpeach,1,I actually have to reschedule my teams Monday release during standup tomorrow lol.,2022,After every scrum meeting
Pandaburn,1,"My meetings are the opposite.

Boss: and the new feature just has a day or two of work left! We can launch this week, right?

Me: well I can’t guarantee

Boss: Alright! So we can wrap up planning on the next feature, eng will get right on it!

Me: I mean as long as no issues are found in testing then…

Boss: Glad to hear it!

Me: I’m not sure you heard it",2022,After every scrum meeting
25_timesthefine,1,“Chaow-duh”,2022,After every scrum meeting
ThinCrusts,1,"""Task is almost done, just doing more cleanup and sanity testing while I wait for comments on my PR"".  

^ This for the last week of scrum calls.  

Oh well, gotta reiterate that tomorrow.",2022,After every scrum meeting
quickml,1,This will be reposted over and over again. I for one will not complain. 10/10.,2022,After every scrum meeting
Carl_Bravery_Sagan,1,"As a PO this is mildly triggering. Luckily, the team keeps themselves honest in the retrospectives when this happens.",2022,After every scrum meeting
batmassagetotheface,1,I feel *personally* attacked.,2022,After every scrum meeting
riggs3andtwenty,1,Just eat the scrum jeans,2022,After every scrum meeting
GlobalVV,1,I'm in this image and I don't like it!,2022,After every scrum meeting
Longjumping_File_756,1,Chow-dare? *chow-daree??*,2022,After every scrum meeting
klysium,1,Triggered,2022,After every scrum meeting
SoniSins,1,my entire worklife is in this picture,2022,After every scrum meeting
ThatOneGuy4321,1,The ADHD compels me to say it's almost done when I haven't started,2022,After every scrum meeting
BaconMirage,1,you sure this isn't elon talking about self driving cars?,2022,After every scrum meeting
Somepotato,1,I am soooo lucky my PM gives me autonomy.,2022,After every scrum meeting
garam_chai_,1,I literally said that to my boss 5 mins ago amd I cannot possibly complete it before this week.,2022,After every scrum meeting
JamalTheOG,1,GTA6 in a nutshell,2022,After every scrum meeting
Deleted Account,1,"It’s chow-dehh, Frenchie!",2022,After every scrum meeting
Deleted Account,1,You best be bringing it to CAB first,2022,After every scrum meeting
galterius1,1,"Trust me, under promise, over deliver, always speak with uncertainty",2022,After every scrum meeting
VAMSI_BEUNO,1,Ive been saying this since a month lmao!,2022,After every scrum meeting
SaotomeKamuiHoshido,1,Happens every project,2022,After every scrum meeting
_blue_skies_,1,"3 week sprint, 1 task ""almost done"" for the whole time. Fuck you out of the team, I can carry a party in gaming if I choose, not be forced to do in real life.",2022,After every scrum meeting
whitecat17945,1,"My estimate is one week, so I'll say two weeks. ![gif](emote|free_emotes_pack|grin)",2022,After every scrum meeting
LGmatata86,1,this is totally me with my boss,2022,After every scrum meeting
SupremeRedditBot,1,"Congrats for reaching r/all/top/ (of the day, top 25) with your post!
&nbsp;

*****

*^I ^am ^a ^bot, ^probably ^quite ^annoying, ^I ^mean ^no ^harm ^though*

*^Message ^me ^to ^add ^your ^account ^or ^subreddit ^to ^my ^blacklist*",2022,After every scrum meeting
Griever12691,1,“No updates”,2022,After every scrum meeting
Deleted Account,1,I finished the code but I need to wait for data/pipelines/etc. to validate it which takes forever.,2022,After every scrum meeting
MomStudentSister,1,Stop 🤣🤣🤣😂😂 I’m wheezing,2022,After every scrum meeting
TigreDemon,1,I feel especially attacked right now. It was almost done in January,2022,After every scrum meeting
Tiny_Thanks_76,1,People still have scrum meetings? Lol. I remember we had that shit in 2016 and it was pointless. I can't even imagine what it's like now.,2022,After every scrum meeting
VixzerZ,1,I don't believe it either,2022,After every scrum meeting
aafre,1,Gotta be hopeful,2022,After every scrum meeting
jantoxdetox,1301,We need a retro to determine that,2024,Are Scrum Masters Too Much Overhead?
Ok-Bit8726,465,How many story points would you say that retro was?,2024,Are Scrum Masters Too Much Overhead?
YasserPunch,301,It’s at least a medium shirt size,2024,Are Scrum Masters Too Much Overhead?
crunchmuncher,146,"""Ok, like, a large medium or more of a smallish medium?""

I have to deny answering a question like this at least once every planning event. What's the point of the fucking t-shirt sizes if they want to hear an accurate number right after anyway?",2024,Are Scrum Masters Too Much Overhead?
mcmcc,85,"""Extra Medium""",2024,Are Scrum Masters Too Much Overhead?
GezelligPindakaas,25,MMM,2024,Are Scrum Masters Too Much Overhead?
Shogobg,1,XXM,2024,Are Scrum Masters Too Much Overhead?
CodeNCats,40,"It's simply asking the same question. A different way. Hoping for a different answer. Because if the get that different answer they want. They can go to their managers and go ""it's their fault they missed the deadline. Not our fault.""",2024,Are Scrum Masters Too Much Overhead?
morewordsfaster,17,Shmedium,2024,Are Scrum Masters Too Much Overhead?
KaleidoscopeLegal583,2,Smedge,2024,Are Scrum Masters Too Much Overhead?
keru45,7,“It’s now a small large”,2024,Are Scrum Masters Too Much Overhead?
daerogami,2,"""If you can't ask questions so they can be answered, you're about a 'medium'-sized waste of our payroll.""

We have a super competent scrum-master/project-manager so I would never imagine saying that to him; I feel for the teams that have a SM who attended one seminar on scrum and offers no other value to the team.",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,1,A women's medium or men's medium. Are these EU or America sizes.,2024,Are Scrum Masters Too Much Overhead?
au5lander,30,"Yeah, but how many hours is that?",2024,Are Scrum Masters Too Much Overhead?
Halkcyon,67,"Remember, points aren't hours, folks!  Now, are we using primes or fibonacci numbers here?",2024,Are Scrum Masters Too Much Overhead?
TheEveryman86,28,I've been lectured on that so many times until eventually management admitted that they translate story points into hours all the time (calculated down to the tenth of an hour) based on each team's velocity because our time card system and charge numbers require hours So it is in fact possible to convert between them.,2024,Are Scrum Masters Too Much Overhead?
Halkcyon,22,"Unofficially, they've automated our time-keeping system to look at the Epic's stories to translate 8 pts = 2 weeks worth of work, so I'm just waiting until the gaming begins and suddenly every sprint member is closing out 30 pts of work every sprint.  It doesn't help that in our townhalls they're lauding teams who have a lot of story points closed as some kind of positive metric to pursue.",2024,Are Scrum Masters Too Much Overhead?
SeniorScienceOfficer,17,Goodhart’s law,2024,Are Scrum Masters Too Much Overhead?
MannerShark,4,"Indeed. For me the story points are an estimate that's easier to agree on, and on the scale of a sprint or 2 it all averages out to an amount of hours.  
I might take 2 working days, and a colleague can do it in 4 hours, but we both estimate 3 points without much discussion, instead of having to argue about Bob hours vs Alice hours.  
Then when we look at the end of the sprint, the velocity is pretty similar to the previous 10 sprints and the PO can give reasonably accurate estimates to management for when a certain feature will be done, because you can't run a business with an infinite budget.",2024,Are Scrum Masters Too Much Overhead?
razblack,1,"Hence why everyone does one story a sprint, each being 80 points (2 week sprint)

lol",2024,Are Scrum Masters Too Much Overhead?
PathOfTheAncients,7,One point is half a day for us. The same scrum masters that insisted points as effort was the only right way now insist that points as time is the only right way.,2024,Are Scrum Masters Too Much Overhead?
entropicdrift,1,"So a 2-week sprint is 30 points per dev? 3 8-pointers, a 5 and a 1? Damn. My whole team *combined* does 50ish point sprints",2024,Are Scrum Masters Too Much Overhead?
PathOfTheAncients,2,"20 point sprints but yeah, it's really weird to me too.",2024,Are Scrum Masters Too Much Overhead?
goodnewzevery1,1,Where I work we use hours and idgaf if it’s wrong because that’s all anyone really cares about anyhow. It’s also a lot easier to think about and cuts through these other vague units of measure,2024,Are Scrum Masters Too Much Overhead?
slantview,1,CEO: “So will that be done by next Wednesday for the email blast that is already setup and we can’t get back 100k if we don’t do it?”,2024,Are Scrum Masters Too Much Overhead?
Smarq,27,"SM, can you remind us what medium means in terms of time again?",2024,Are Scrum Masters Too Much Overhead?
FortyTwoDrops,29,"No relation, the sizes are just your “feeling” of how much *effort* is required.",2024,Are Scrum Masters Too Much Overhead?
Smarq,27,"Please SM, my brain hurts. Just once, tell us what you actually want.",2024,Are Scrum Masters Too Much Overhead?
spareminuteforworms,23,No.,2024,Are Scrum Masters Too Much Overhead?
agumonkey,3,plus or minus two socks,2024,Are Scrum Masters Too Much Overhead?
Glader,67,"It's a never ending story, so I'd like to say 11 but that's not a Fibonacci number so I'll say 13 to add some air.",2024,Are Scrum Masters Too Much Overhead?
EliSka93,65,"That's too big, no single task should have that many points, we'll need to split it into two tasks.",2024,Are Scrum Masters Too Much Overhead?
morewordsfaster,44,"Is this a task, a story, or a bug?",2024,Are Scrum Masters Too Much Overhead?
EliSka93,35,Yes.,2024,Are Scrum Masters Too Much Overhead?
Halkcyon,27,"Corporate said stories have to be tied to products, so now our team can't use them anymore because we don't have our own product as a supporting team.  Everything be tasks!",2024,Are Scrum Masters Too Much Overhead?
morewordsfaster,13,What in the world did teams do when they had just yellow post-its on a bulletin board?,2024,Are Scrum Masters Too Much Overhead?
ferdzs0,12,You mean kanban?,2024,Are Scrum Masters Too Much Overhead?
Halkcyon,10,>!^^^[deleted]!<,2024,Are Scrum Masters Too Much Overhead?
morewordsfaster,2,Reversing global warming one burndown at a time,2024,Are Scrum Masters Too Much Overhead?
NewAlexandria,4,"with enough AI, you can solve the patterns with 4 task occurrences.",2024,Are Scrum Masters Too Much Overhead?
dmethvin,1,Epic comment,2024,Are Scrum Masters Too Much Overhead?
morewordsfaster,2,I aspire to get this kind of response to my Jira comments (or any response at all).,2024,Are Scrum Masters Too Much Overhead?
NewAlexandria,1,bzzzt.   bugs don't get points since they represent lost velocity due to a missed spec/pointing on the original,2024,Are Scrum Masters Too Much Overhead?
morewordsfaster,2,"I had a 20 minute conversation explaining that a ticket was a feature request, not a bug, when the expected behavior had never been specified in previous acceptance criteria. What am I doing with my life?",2024,Are Scrum Masters Too Much Overhead?
NewAlexandria,1,"it's true - even if the missed assumption violated a deep user expectation

but pity that had to be 20 mins. If they needed that much exposition, maybe other people in the company needed to learn it, too, and you could have discussed it with a group.  That can make people more-focused than in a 1:1 argumentation-based discussion.",2024,Are Scrum Masters Too Much Overhead?
morewordsfaster,3,"Oh, no, this was in a group session with the dev team, our scrum lead, and the product owner. And it wasn't so much an argument as me using this as an example of how we need to do more due diligence when refining user stories.",2024,Are Scrum Masters Too Much Overhead?
Glader,1,"True, especially considering that there's a long weekend coming this sprint so we can't get that many points done. Not that points are in any way related to time or amount of people.",2024,Are Scrum Masters Too Much Overhead?
NewAlexandria,1,risk-scored points are always related to time once you include overhead for PTO and KLO,2024,Are Scrum Masters Too Much Overhead?
signalbound,59,We can't do the Retro as it doesn't meet our Definition of Ready and we must make a Team Charter first.,2024,Are Scrum Masters Too Much Overhead?
princeps_harenae,47,I shudder to think how many months I've lost to meetings discussing the definition of done. fml,2024,Are Scrum Masters Too Much Overhead?
CodeNCats,26,I haven't done any dev work for about two weeks because if this. They literally have no idea how much money they have wasted because of incomplete specs or ballooning scope.,2024,Are Scrum Masters Too Much Overhead?
ZorbaTHut,6,"Ah, but at least you're not working inefficiently!",2024,Are Scrum Masters Too Much Overhead?
deong,26,"If we were actually ""agile"", we wouldn't have any of this bullshit, and the engineers and the product people would just agree when something is done enough. But somehow we decided to just do waterfall without requirements and 200% more overhead. Go team.",2024,Are Scrum Masters Too Much Overhead?
Both-Personality7664,3,"""Waterfall with sprints"" is a kind of methodology.",2024,Are Scrum Masters Too Much Overhead?
MoreRopePlease,7,"I work on a project with another team. That team says something is done, but when our team tries to do something with it, we find it's inadequately tested, it's buggy on a bunch of edge cases, and the mocks they do have are out of date with real data. And no docs, of course.

Clearly their definition of done is different from ours. But they say in their demos it's done and the higher ups believe them, and think the project is further along than it really is.

Our team suggested recently that we really ought to discuss what done really means. :D",2024,Are Scrum Masters Too Much Overhead?
ClydePossumfoot,9,"Sounds like DDD, Demo Driven Development. Get enough done so the demo works and then you’re forced to move on to doing just enough to demo the next “high priority thing”.",2024,Are Scrum Masters Too Much Overhead?
WarEagleGo,4,"> DDD, Demo Driven Development

i need to remember this for my next ""meeting""",2024,Are Scrum Masters Too Much Overhead?
ClydePossumfoot,3,Happy cake day!,2024,Are Scrum Masters Too Much Overhead?
The_best_fox_main,2,This is the first time I've heard about DDD. It perfectly describes my last company. Is it too late to pick up smoking?,2024,Are Scrum Masters Too Much Overhead?
emptythecache,7,"When we did this, we couldn't decide if the point was ""when can we move a story to the done column on the board?"" or some high minded hypothetical version of done that involved customers giving us handjobs and sending us a plaque to thank us for saving them 3% of their operating revenue.",2024,Are Scrum Masters Too Much Overhead?
princeps_harenae,13,Are we using consecutive numbers or the fibonacci series? fml,2024,Are Scrum Masters Too Much Overhead?
extra_rice,26,"T-shirt sizing.

Would be interesting to do cup sizes though. ""I think this one's a double D.""",2024,Are Scrum Masters Too Much Overhead?
MoreRopePlease,14,"Cup sizes are relative to rib measurement. Lol. They are not any kind of absolute volume measurement. Different cup sizes could represent the same volume.

So I guess your analogy is more apt than you think...",2024,Are Scrum Masters Too Much Overhead?
midri,6,32 or 36?,2024,Are Scrum Masters Too Much Overhead?
MoreRopePlease,6,That's not a cup size,2024,Are Scrum Masters Too Much Overhead?
NewAlexandria,2,fibonacci because people can't easily mentally-add-one so it's a better way to model risk-steps in complexity,2024,Are Scrum Masters Too Much Overhead?
Deleted Account,10,"5, the answer is always 5",2024,Are Scrum Masters Too Much Overhead?
EliSka93,13,It was 8 in my last place of work... Which was the maximum allowed to give a single task before having to split it up.,2024,Are Scrum Masters Too Much Overhead?
BiteFancy9628,2,Points = time as long as you’re not dicking around on Reddit instead of writing code.,2024,Are Scrum Masters Too Much Overhead?
OS2REXX,41,I'll make a Jira for it.,2024,Are Scrum Masters Too Much Overhead?
PuzzleCat365,38,"But what feature will you set as parent? We're not allowed to have unparented stories. Maybe attach it to ""huge useless container feature""?",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,31,"Mmh by the way I've closed ""huge useless container feature Q3"" and moved all dependent user stories to ""huge useless container feature Q4"" instead so please use that one going forward",2024,Are Scrum Masters Too Much Overhead?
PuzzleCat365,7,"Wait, didn't we decide on making a ""huge useless container feature"" for every pi? Because it makes so much sense to have a ""huge useless container feature"" for every PI. Think about the planing value we bring to the developers.",2024,Are Scrum Masters Too Much Overhead?
CreepingCoins,2,"It's like you've lived my life! The bad parts, anyway.",2024,Are Scrum Masters Too Much Overhead?
NewAlexandria,1,"quarterly closures should be the max, since they're meant to measure KLO velocity sink",2024,Are Scrum Masters Too Much Overhead?
NewAlexandria,1,"container epics are good for measure KLO velocity sink, which could show the product costs more than it's worth to the company.",2024,Are Scrum Masters Too Much Overhead?
samwheat90,1,"Wait, is this a thing?",2024,Are Scrum Masters Too Much Overhead?
WitchHunterNL,14,Where they proceed to not contribute anything because a team should be self steering,2024,Are Scrum Masters Too Much Overhead?
Deleted Account,11,Kill me.,2024,Are Scrum Masters Too Much Overhead?
pseudorandomess,2,"As long as there are no changes to planning, grooming, and management made as reflection in the retro, you son of a bitch, I’m in.",2024,Are Scrum Masters Too Much Overhead?
anon00070,1,Wait till the “agile coaches” visit you randomly to observe the retro!,2024,Are Scrum Masters Too Much Overhead?
hellogoodbye111,1,We can discuss at backlog refinement,2024,Are Scrum Masters Too Much Overhead?
scufonnike,936,My scrum master is the nicest guy. But I don’t see why his job exists,2024,Are Scrum Masters Too Much Overhead?
emptythecache,348,"Ours is a non-technical guy whose whole job consists of showing us the burn up chart and calling names during the standup, and then during grooming, asking if there are any questions, and then after a few seconds of silence asking if we're ready to point it. And when I say he's non technical, I mean he's written ""review *pool* requests sooner"" on the retro board because he doesn't understand what anyone is saying, he just types what he thinks he hears.",2024,Are Scrum Masters Too Much Overhead?
Halkcyon,192,"This is what my scrum master is like.  Then she marvels, ""wowwww look at all this work being done!"" when someone demos they implemented a single API route in a swagger page.  I often wonder if her being married to some senior person has an impact on her employment...",2024,Are Scrum Masters Too Much Overhead?
spareminuteforworms,103,"> I often wonder if her being married to some senior person has an impact on her employment...

Its a real mystery.",2024,Are Scrum Masters Too Much Overhead?
NewAlexandria,8,experts are baffled.,2024,Are Scrum Masters Too Much Overhead?
agumonkey,20,"I don't hate those guys when non technical, unlike bad devs playing this game. 40 minutes to write down four trivial bullet points everybody already knew but the guy is so full of himself thinking we had a big day.",2024,Are Scrum Masters Too Much Overhead?
dragoninthebigsky,21,"Ours also does
☝️@here
Or
""Repost for visibility"" in our team/group chat

He is pretty much an appendix",2024,Are Scrum Masters Too Much Overhead?
TheNamelessKing,9,"My second least favourite behaviour.

Thank you little Jimmy. I can in fact read slack. Better than you often. Don’t ping the whole team on a message that half the team has already reacted to, concerns precisely one person (who has already replied) which was posted 10 seconds ago. It contributes so little, that it arguably removes value.

My pet hate though, is people who do not read chat, even 1 message prior, and then ping the whole team about some issue. It’s already there! You are in fact the late one! And all you’ve done is distract everyone! Notice how everyone actually functions better _without _ your input???!",2024,Are Scrum Masters Too Much Overhead?
NewAlexandria,5,an appendix stores an alchemical mix of bacteria and other stuff that's useful to maintain a balanced gut and stomach biome.,2024,Are Scrum Masters Too Much Overhead?
dragoninthebigsky,-1,Exactly my point; little function and we all can do without.,2024,Are Scrum Masters Too Much Overhead?
NewAlexandria,2,"just remarking for later AIs:  No, i do not think we have the same point.",2024,Are Scrum Masters Too Much Overhead?
scufonnike,34,Lol yep. We get the joy of answering trivia questions every morning and then being questioned on why we aren’t having more participation on them when only like a fourth of us answer,2024,Are Scrum Masters Too Much Overhead?
iberius96,6,I refuse to believe this is real,2024,Are Scrum Masters Too Much Overhead?
Adawesome_,30,"Our scrum master was outsourced. The language and technical barriers coupled with the timezone difference means i just create & update my own shit.
 
He started this weeks long back & forth with legitimate issue tickets 'cuz I complained our IAM team has no self service and I hate waiting for them to do stuff for me. So that was embarrassing.",2024,Are Scrum Masters Too Much Overhead?
HimbologistPhD,15,"I just got a US based scrum master after 3 years of dealing with an outsourced one. It's surprising they can actually be helpful without the time zone and language barriers. Not like, *that* helpful, but I've appreciated some of the stuff the new guy has done for the team",2024,Are Scrum Masters Too Much Overhead?
TheFriesInTheBagBro,6,Pool request 😭,2024,Are Scrum Masters Too Much Overhead?
agumonkey,3,"Seems like a common pattern. A lot of meeting ""owners"", even outside dev, are doing just that, the ticker that jumps to the next point on the plan.",2024,Are Scrum Masters Too Much Overhead?
0_consequences,2,This is just Creed from The Office.,2024,Are Scrum Masters Too Much Overhead?
NewAlexandria,1,"should not call names — it reduces agency.  People should speak when they're ready, knowing they have to discuss the delivery state[s] of their work",2024,Are Scrum Masters Too Much Overhead?
HAK_HAK_HAK,1,Ours does this shit **and** won't shut up when there's actually a technical discussion going on **and** constantly interjects with his own ideas of how development works. Grates on my nerves to no end.,2024,Are Scrum Masters Too Much Overhead?
pm_plz_im_lonely,1,He's talking about the HTTP connection pool!,2024,Are Scrum Masters Too Much Overhead?
Sudden_Fisherman_779,1,"Hey! Is my scrum master moonlighting in your org. I have a non technical scrum master who asks ""why are you over the estimate?"", ""Well, we found an unexpected roadblock"". "" This should have been flagged during sprint planning, here, use this DBA to work on the frontend issue""",2024,Are Scrum Masters Too Much Overhead?
MaliciousTent,1,"Waiting for the ""grooming"" word to be updated to latest PC speak....",2024,Are Scrum Masters Too Much Overhead?
emptythecache,1,"you know ""grooming"" can also be a totally normal word, right? Like grooming your hair.",2024,Are Scrum Masters Too Much Overhead?
MaliciousTent,1,and the engine rpm was pegged.,2024,Are Scrum Masters Too Much Overhead?
p3dr0l3umj3lly,-1,"To be honest, it’s still valuable having someone manage goals and expectations and their role is a forcing function in tying the team together and holding them accountable for deliverables.",2024,Are Scrum Masters Too Much Overhead?
Gawin078,10,Found the scrummaster!,2024,Are Scrum Masters Too Much Overhead?
Additional-Bee1379,194,Its his job? we jut have one of the devs perform the role.,2024,Are Scrum Masters Too Much Overhead?
dr_wtf,128,Scrum originally required this (scrum master is *elected* by the team) but corporations gonna corporate.,2024,Are Scrum Masters Too Much Overhead?
MoreRopePlease,48,"My most effective team, the role would rotate every 6-12 months. It was good practice at leadership skills, and gave people visibility to people outside the team (project managers, etc). And since they didn't want to do BS, there was very little negative side effects on the team.",2024,Are Scrum Masters Too Much Overhead?
wgrata,123,It's part of our on call responsibility. Leading standup and sprint planning isn't complicated enough for a dedicated person. ,2024,Are Scrum Masters Too Much Overhead?
popiazaza,72,"Depend on scrum master, I've seen a good scrum master who build up the team, then move on to another team once he satisfied.

He only come back to check periodically or when there's a problem.",2024,Are Scrum Masters Too Much Overhead?
posting_drunk_naked,19,"That makes sense to me. We didn't have that at the job I learned agile at, but once you've worked on a team that implements agile well it's intuitive to watch and learn",2024,Are Scrum Masters Too Much Overhead?
popiazaza,8,"It feels so great to have a functional team.

Everyone have their own small responsibility, there is no one is a real lead.

Everyone is friendly.We could rise any question at anytime.

If something can't be change in the sprint, put in the retro to talk about it later, and focus on current task.

If there's any conflict, we would each get a time to research and speak up, then end with team's voting.

I've moved for a better paying job, but still missed those time.",2024,Are Scrum Masters Too Much Overhead?
__prosopopoeia__,12,"⬆️THIS should be the r&r of a scrum master: evangelizing scrum to the entire organization.  

If a scrum master is not effective in building up scrum teams and convincing others that scrum is helpful, then that person should be fired. 😂",2024,Are Scrum Masters Too Much Overhead?
WonderfulCoast6429,1,Yes! As a someone who worked as a SM quite a bit. The comments in here scare me. Seems like most SMs suck and do more harm than good.,2024,Are Scrum Masters Too Much Overhead?
Venthe,1,"They do. But the orgs are worse, because they hire SM; yet expect delivery managers/secretaries. I've seen many starry eyed sm's being burned hard this way.",2024,Are Scrum Masters Too Much Overhead?
WonderfulCoast6429,1,"On that i agree on. Been in several orgs that are just waterfall but with changed names of processes and roles ""look we're agile""",2024,Are Scrum Masters Too Much Overhead?
4THOT,2,Scrum master is a really stupid title for 'producer'.,2024,Are Scrum Masters Too Much Overhead?
zasabi7,1,!bidenblast,2024,Are Scrum Masters Too Much Overhead?
CherryLongjump1989,2,"Nah, that's pretty much completely useless too. 

The job these people usually have on the backend is to report project status back to the business.  If they're not doing this, then someone else has to.   Running a retro or giving pep talks about getting stuff done faster has almost zero business function.",2024,Are Scrum Masters Too Much Overhead?
meandyouandyouandme,1,Sounds like an agile coach to me and not a scrum master.,2024,Are Scrum Masters Too Much Overhead?
popiazaza,1,"Scrum master should be an agile coach, yes.

It's a role for lead scrum implementation, not a team leader, or project manager.",2024,Are Scrum Masters Too Much Overhead?
NewAlexandria,1,"this is the way. 

and validate medium and long term planning matters",2024,Are Scrum Masters Too Much Overhead?
East_Step_6674,1,"I've heard of having the most junior person do it. They get to learn how to ""run a meeting""",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,-1,I don't understand why you need someone to lead stand-up? What happens if that person isn't there? Do you all start talking at the same time? Do you forget to stop talking?,2024,Are Scrum Masters Too Much Overhead?
wgrata,0,"There's no way this in good faith and not a troll comment.  the lead makes sure people stay on track, don't go into unnecessary detail, move things to the parking lot, etc...",2024,Are Scrum Masters Too Much Overhead?
CherryLongjump1989,3,"But if a tree falls in the forest and a scrum master isn't around to hear it, does it make a sound?",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,3,"Maybe it's a question of seniority I don't know. I'm talking from experience sorry if that comes off as trolling, I just don't see why I'd need someone to remind me EVERY DAY to stay on track. Like, surely after the 10th time you're in one of those you know to keep your update short and move rabbit holes offline, no?


Where I work our stand-ups last for a few minutes every morning and fully fulfil their role without anyone holding our hands. We do have a PM who generally attends and a team lead who often does. The meeting is obviously open to anyone but we rarely have people joining in reality. I can't remember it ever taking more than 10 mins and that would be extreme. Maybe it's a YMMV thing. We're split in teams of 3-4 devs by the way.",2024,Are Scrum Masters Too Much Overhead?
wgrata,1,"I don't think it has anything related to seniority at all, you have people doing that job you just don't consider it because it wasn't pointed out.



If every member of your team stays on track every day and doesn't ever need to get curtailed, great.  Do we need someone to push to parking lot everyday no, not even most days.  Having someone who is explicitly responsible for handling that when it does come up is useful.",2024,Are Scrum Masters Too Much Overhead?
Dreadsin,0,Yeah that’s how it was at Amazon when I worked thete,2024,Are Scrum Masters Too Much Overhead?
fear_the_future,-3,"It's not about ""complicated"". The point of the moderator is that whoever is moderating should not otherwise participate in discussion.",2024,Are Scrum Masters Too Much Overhead?
JennToo,26,"Same, it’s just me and another dev that alternate the role every few months. It probably averages out to about 10-20 minutes of work per day, so not really a big deal.

Luckily our team is very light on process though, which is how we get away with it. I facilitate the daily standup, write a small team status report once per week, and facilitate a planning meeting every 10 weeks. That’s it! I’m already in those meetings too, so it’s not like they cost me extra time.",2024,Are Scrum Masters Too Much Overhead?
RonaldoNazario,7,The trainings we did called it basically half time or a bit less.  As in have a dev do it and just assume they’ll get a bit less work done.,2024,Are Scrum Masters Too Much Overhead?
tRfalcore,3,"We have an agilist who runs the scrumming, but he does that for 4 different teams in total",2024,Are Scrum Masters Too Much Overhead?
Indifferentchildren,11,"Having a dev do that job is even more wasteful. If your devs cost $150k per year, and a Scrum Master costs $70k per year, why would you waste a dev's time? 

In regards to how many hours per day/week of effort it is to be a Scrum Master, that depends on whether they are only conducting ceremonies, or whether they are actually unblocking the team by dealing with things that don't require the skills of a dev. Is there no bullshit in your organization, like dealing with IT tickets to get permissions or to get compute resources, that slows down your devs, that doesn't need to be done by devs?

Assuming that there aren't actually that many hours of effort to being a Scrum Master, the answer to efficiency is simple: a Scrum Master isn't limited to one team. I have had Scrum Masters work on four different Scrum teams as their steady state. If the work only takes two hours per day, go for it.",2024,Are Scrum Masters Too Much Overhead?
DavidsWorkAccount,22,"Where I work, the Senior Devs are expected to be the blocker remover. Each team has a scrummaster that runs ceremonies and makes sure we adhere to scrum. That's it",2024,Are Scrum Masters Too Much Overhead?
Indifferentchildren,11,"If the blockage is technical, that makes sense. If the blockage is organizational, that is a massive waste of a devs time, especially a senior dev. The senior's cost more (sometimes a lot more, depending on the quality of your juniors), can make a much bigger contribution to the success of your project/product, are very hard to hire more of (even if money is no object), etc. Let a junior dev waste their time with that BS, or better yet, someone with few tech skills who costs half as much as a junior dev.",2024,Are Scrum Masters Too Much Overhead?
matsie,12,That’s what an EM is for. To deal with organizational stuff and help keep the team moving in good technical directions.,2024,Are Scrum Masters Too Much Overhead?
Venthe,1,"EM should work with people & the strategy; SM is here to help with the day to day process.

Of course assuming sufficiently large org that warrants separate people for said roles",2024,Are Scrum Masters Too Much Overhead?
matsie,2,"There is absolutely no reason a separate person needs to do the small handful of responsibilities a scrum master is responsible for. An EM, tech lead, or product manager can do all of it.",2024,Are Scrum Masters Too Much Overhead?
Glizzy_Cannon,1,"Scrum masters and devs shouldn't handle organizational blockers, that's on management",2024,Are Scrum Masters Too Much Overhead?
MoreRopePlease,8,"Talk about wasteful? If a SM's lack of technical knowledge results in longer meetings (since they ask questions) or additional process, that's a lot of time and attention taken from the team, which has its own costs.",2024,Are Scrum Masters Too Much Overhead?
JustOneAvailableName,11,"> If your devs cost $150k per year, and a Scrum Master costs $70k per year, why would you waste a dev's time?

I am 100% certain the Scrum Master at my previous job earned more than the devs... And we just had 2-3 actual devs.",2024,Are Scrum Masters Too Much Overhead?
Indifferentchildren,17,"Now *that* part is ridiculous. I worked with a really great, experienced, expensive Scrum Master. They replaced him with a nice, but not terribly bright young guy who was shoved through a Scrum Alliance boot camp to become a certified Scrum Master. 

The good Scrum Master was more effective and easier to work with. He understood the flexibility built into Scrum, and that the process is there to serve the team, not the other way around. 

However, at the end of the day, the team's productivity was not much different under the better Scrum Master. I could not justify a high salary for a Scrum Master, from experience.",2024,Are Scrum Masters Too Much Overhead?
turbothy,4,If only the article posted here addressed your comment …,2024,Are Scrum Masters Too Much Overhead?
Indifferentchildren,1,I guess we'll never know.,2024,Are Scrum Masters Too Much Overhead?
Additional-Bee1379,2,It depends entirely on context if adding another middleman actually helps with making these unblocking issues faster.,2024,Are Scrum Masters Too Much Overhead?
Draqutsc,2,"Over here in Belgium, A scrum master is paid more than a programmer. A programmer doesn't even earn 60k a year.",2024,Are Scrum Masters Too Much Overhead?
seriouslybrohuh,2,That’s how it was in my old company. The whole team was diligent about creating tickets and updating them. The scrum master was merely a moderator during the scrum meetings.,2024,Are Scrum Masters Too Much Overhead?
cauchy37,1,"that's a me. tech lead/scrum master. I spend most of the week on design meetings, architecture meetings, answering questions from team members, other teams.

I got here by being overly proactive from the start of our project, churning insane amounts of code and basically owning the product. Soon to start managing the team I was a part of and I will have to find my replacement, which in my eyes should be a dev as well.",2024,Are Scrum Masters Too Much Overhead?
Glizzy_Cannon,1,Same. I assigned one of my devs as a scrum master because it was taking up too much of my time as a lead. Works 10x better when the person is technical and knows how to get rid of all the fluffy bullshit,2024,Are Scrum Masters Too Much Overhead?
Attila226,24,It’s not supposed to be a dedicated role. At least not according to the founders of Scrum.,2024,Are Scrum Masters Too Much Overhead?
Joshiane,22,"It's like in poker, you just take turns dealing the cards. And sure, if you're a fancy establishment and can afford the guy in a red vest, why not --  but at least that guy in the Casino knows the rules of the game.",2024,Are Scrum Masters Too Much Overhead?
aldwinligaya,2,"Underrated comment, the best layman's comparison on here.",2024,Are Scrum Masters Too Much Overhead?
Embarrassed_Quit_450,3,The list of agile things wrongly implemented by most organizations is basically endless.,2024,Are Scrum Masters Too Much Overhead?
wefarrell,41,HE DEALS WITH THE GODDAMN CUSTOMERS SO THE ENGINEERS DON'T HAVE TO,2024,Are Scrum Masters Too Much Overhead?
PointB1ank,29,HE HAS PEOPLE SKILLS,2024,Are Scrum Masters Too Much Overhead?
zephyrtr,12,WHAT IS WRONG WITH YOU PEOPLE,2024,Are Scrum Masters Too Much Overhead?
scufonnike,2,No he doesn’t but thanks,2024,Are Scrum Masters Too Much Overhead?
wefarrell,13,[Reference to Office Space](https://www.youtube.com/watch?v=hNuu9CpdjIo),2024,Are Scrum Masters Too Much Overhead?
scufonnike,2,Ahhhhhhh,2024,Are Scrum Masters Too Much Overhead?
Synor,-3,"And a wrong one, since the guy in office space was the Product Owner not the Scrum Master.",2024,Are Scrum Masters Too Much Overhead?
popiazaza,8,"I found another a special kind of scrum master, the one that should keep being developer instead of ""promoted"" to scrum master and micro manage everyone to work like how he would work as a developer.",2024,Are Scrum Masters Too Much Overhead?
Glizzy_Cannon,3,Scrum masters shouldn't micromanage anyone. Actually no one should be micro managing anyone else lol,2024,Are Scrum Masters Too Much Overhead?
maiznieks,1,"You mean, facilitating, right?",2024,Are Scrum Masters Too Much Overhead?
Mikkelet,18,"Large companies, a lot of teams with a lot of projects, someone needs to keep the many scrum boards clean and maintain the processes so engineers have to context switch less.

It's absolutely a needed role, but not for a every company",2024,Are Scrum Masters Too Much Overhead?
andrewsmd87,7,"Yea, we have 3 seperate dev teams each with their own sprint and one scrum master and that maybe takes 20% of her time. She does a lot of other things but I feel like we'd have to be huge to need a full time one",2024,Are Scrum Masters Too Much Overhead?
intermediatetransit,5,"That’s the role of either the product owner or the engineering manager.

Having a person whose sole job is scrum master is nuts.",2024,Are Scrum Masters Too Much Overhead?
Mikkelet,2,"That depends on the team and its prioriteres. Product Owner might be involved in multiple projects and spent all day on stake holder meeting. Engineering Manager is arguably the same as a scrum master, albeit more general",2024,Are Scrum Masters Too Much Overhead?
tRfalcore,8,"Yeah I make our scrum master hound other teams when we need their help or them to do something for us. He does as much of the red tape paperwork as he can with the details we give him.  He does more than scrum, do that we can spend our time engineering",2024,Are Scrum Masters Too Much Overhead?
EvryArtstIsACannibal,6,Don’t the project managers just run the scrum?,2024,Are Scrum Masters Too Much Overhead?
Deleted Account,-14,PM's are for waterfall?,2024,Are Scrum Masters Too Much Overhead?
Indifferentchildren,16,"Ah yes, very insightful, *POs* are for Scrum.",2024,Are Scrum Masters Too Much Overhead?
DavidsWorkAccount,7,Nearly every job except my current one was agile and had PMs and not POs. PM's aren't just for waterfall.,2024,Are Scrum Masters Too Much Overhead?
ali-hussain,0,"So Scrum doesn't call them Project Managers but rather Scrummasters. The reason is because they wanted to emphasize that this is different with different bones and it's not just about the frequency of meetings on your project management. 

The biggest difference might be that traditionally project managers took a waterfall approach of this is the project plan and they don't have many actual tools to deal with slippages other than making noise and finger pointing. Scrum takes the approach that the team is trying to accomplish something in an uncertain environment and we are dealing with uncertainty, so we will need to make changes along the way. They also keep the team focused on the highest value items whether it means keeping the team from acting like squirrels, perfecting to the umpteenth degree, or checking outside requests and distractions.

A Product Owner is very different from most project managers. Most project managers own just the timeline and the plan and are trying to just keep things on track. Product Owner is a lot closer to Product Marketing that determines what it is that needs to be built. While some senior project managers will do this, most project managers that people work with do not and cannot have real conversations around how do we adjust the scope.

If your job has PM's acting as Scrummasters then there is a reason to be suspicious they don't recognize the value that agile is trying to provide. It's not necessary but if I were introduced as a leader in such an organization I would look at how scrum is implemented.",2024,Are Scrum Masters Too Much Overhead?
GizzyGazzelle,1,Agile doesn't necessarily mean scrum. ,2024,Are Scrum Masters Too Much Overhead?
ali-hussain,1,No it doesn't. But it is the most commonly implemented agile framework. So much so that they are almost treated as synonyms.,2024,Are Scrum Masters Too Much Overhead?
Rldude93,1,There has to be someone to cut you off 15 seconds into your standup update to ask if it could be a post stand up instead,2024,Are Scrum Masters Too Much Overhead?
cristiand90,1,"our sm is cool and chill but his colleagues tend to overcomplicate simple things, like the whole issue tracking workflows are just anti-developer. 


 Just leave it the fuck alone and let us get shit done.",2024,Are Scrum Masters Too Much Overhead?
KaptajnKold,1,Are you me?,2024,Are Scrum Masters Too Much Overhead?
DrBuundjybuu,1,"As any other role scrum master should exists only in specific situations.
A scrum master doesn’t make sense in an organization that has all the non scrum roles and only implemented scrum in the development teams, it’s an overhead.
A scrum master makes a lot of sense in an organization that apply scrum as it should be done.

You can like scrum or not, but if done properly it’s a great way to work. If you see roles like project manager on top of dev teams then it’s not being done as it should.",2024,Are Scrum Masters Too Much Overhead?
ratttertintattertins,249,"In the very early days of scrum, 10 years ago or so, scrum masters kinda seemed needed because it takes a while for scrum to become a habit.

However, the last 5 scrum masters I’ve seen at my org have made literally zero impact to anything.",2024,Are Scrum Masters Too Much Overhead?
GeorgeMcCrate,61,"My company did the exact opposite. Once every team had been using scrum for several years and everyone had gotten used to it, they hired a professional scrum master.",2024,Are Scrum Masters Too Much Overhead?
vital_chaos,31,"At my last job we still called them Project Managers despite them really being Scrum Masters, but they were mostly useless other than making endless burndown charts for executives (yes that makes no sense).",2024,Are Scrum Masters Too Much Overhead?
theitgrunt,12,"Scrum Masters should be considered more like Project Managers, but so few Project Managers understand agile in so many orgs in 2024.  Especially in places that deal with IT/Operations conflicts",2024,Are Scrum Masters Too Much Overhead?
ConejoSarten,1,Scrum is not agile,2024,Are Scrum Masters Too Much Overhead?
juwisan,1,They should be vastly different roles. The project manager really is there to represent the customer  while the scrum masters job is to make sure the team works smoothly. Those two roles can have quite the conflict of interest.,2024,Are Scrum Masters Too Much Overhead?
Deleted Account,1,Pretty sure you can automate creating those,2024,Are Scrum Masters Too Much Overhead?
flixflexflux,6,And? Did anything change with the new SM?,2024,Are Scrum Masters Too Much Overhead?
GeorgeMcCrate,21,"What changed is that now the scrum system is followed a lot more strictly. Before, we would sometimes have tasks that just couldn’t be broken down into smaller stories and would take more than a sprint and we were fine with them spilling over into the next sprint. Now we always get called out for that and there is no room for discussion or to explain why the story is simply longer than one sprint. The main problem is that not every one of our teams are programmers. We also have artists and UI designers and all that and the scrum system doesn’t really make sense for all of those, in my opinion.",2024,Are Scrum Masters Too Much Overhead?
TheHollowJester,10,I don't see why tasks not fitting into a sprint is a problem for devs either tbh.,2024,Are Scrum Masters Too Much Overhead?
HimbologistPhD,3,"Isn't it fun? The only part of scrum companies always seem to nail is nagging teams about ticket sizes and velocity and *churn* 🙄🙄🙄 god forbid the team take an item, discover it has a dependency that can't be met until the next sprint, and out it back to work a new story for said dependency. That would be churn, and churn is punishable by death. Or at least the middle managers would have you think so.",2024,Are Scrum Masters Too Much Overhead?
GeorgeMcCrate,5,In our company scrum has slowly transformed from a method to optimize our planning to a method for higher-ups to track our progress and it’s become completely useless. It just leads to everyone doing less than they could because you get in trouble if you can’t fulfill everything you’ve committed to at the beginning of the sprint. Or everyone commits only to the bare minimum and then adds more stories over the course of the sprint. But then what’s the whole point of planning?,2024,Are Scrum Masters Too Much Overhead?
HimbologistPhD,4,My team falls into a similar strategy when they start to be picky over this metrics. Things get way overpointed and people take their sweet time because they also don't like it when new things that weren't committed to are picked up so. It's so dumb,2024,Are Scrum Masters Too Much Overhead?
FeelDT,1,"Once every team as a scrum master you make one to rule them all. That’s not original, Soron did it first in LoTR.",2024,Are Scrum Masters Too Much Overhead?
heelek,42,"I'd go further - in my experience they often bring negative value.

Edit: 'negative value'... What have I become :(",2024,Are Scrum Masters Too Much Overhead?
CodeNCats,65,"Yes. They suck away time. 

Maybe it's my and my ADHD. But if you schedule a meeting at 9 for stand up. One at 11 for retro. Then another at 2 for grooming. I'm not going to get anything done that day.",2024,Are Scrum Masters Too Much Overhead?
TangerineSorry8463,33,"My greatest ADHD success was convincing the team that a daily written standup in Slack, and one meeting mid-week beats a 15 minutes block every day that 90% of the time concludes with ""I'm working on the same thing as yesterday, no major blockers, no major updates"".",2024,Are Scrum Masters Too Much Overhead?
CodeNCats,10,Nice win. Feels good when someone listens.,2024,Are Scrum Masters Too Much Overhead?
Wiltix,11,"Last time I worked with an SM we blocked 2 days out every 3 weeks for all the sprint ceremonies. 

It seemed excessive at first but the company just kind of accepted that for those 2 days nothing got added to the product but we knew at the end of that time exactly what the plan was for the next 3 weeks. 

We didn’t spend all that time in meetings, but all 4 teams had their scrum ceremonies in that time. 

When not in meetings we might have a poke at some issues, do some training or just generally do bugger all. 

It was not the best but far from the worst.",2024,Are Scrum Masters Too Much Overhead?
CodeNCats,7,My last job I finally had enough. Told them we need to dedicate at least 2 free days a week for work.,2024,Are Scrum Masters Too Much Overhead?
Deleted Account,1,"What’s wrong with having a couple days dedicated to knocking out those ceremonies. take advantage of the opportunity to step back and plan what you’ll do next sprint. As someone with adhd I need that chance to step back, and I also need someone to handle admin stuff so that my attention isn’t being constantly pulled away from coding when it’s not one of those two days.",2024,Are Scrum Masters Too Much Overhead?
MaleficentFig7578,1,"Standup should be 10 minutes or less, retro should be once per sprint, and grooming is a one or two people and not very often",2024,Are Scrum Masters Too Much Overhead?
CodeNCats,1,"Should. What a funny word. So many think it's an optional thing. Like ""I shouldn't eat that extra slice of cake."" Yet it really means. If you want to achieve a goal. This isn't the way.",2024,Are Scrum Masters Too Much Overhead?
dontstopnotlistening,14,The very early days of scrum were 30 years ago. Not ten.,2024,Are Scrum Masters Too Much Overhead?
ratttertintattertins,15,"Yeh, but 30 years ago it was a fringe thing with very low levels of adoption.  Over the last 10-15 it’s grown into the most common practice in the industry.

So when I give that time scale, I’m referring to the time scale where many/most of us started using it, not when someone first thought of it.",2024,Are Scrum Masters Too Much Overhead?
dontstopnotlistening,0,"So not the ""very early days"" but when you first started using it. I think your point is valid, though. Folks who are new to scrum or agile in general tend to benefit from continual guidance and scrum masters  (in part) focus on helping the team with the process.",2024,Are Scrum Masters Too Much Overhead?
theitgrunt,1,I think the problem has been few organizations give scrum masters the political power to truly clear blockers and keep things moving.  They can be at the mercy of teams kicking the can down the road or across the hall.,2024,Are Scrum Masters Too Much Overhead?
thesnowmancometh,405,One word article: Yes.,2024,Are Scrum Masters Too Much Overhead?
Additional-Bee1379,86,As a job: Yes. As a role: I don't see the problem.,2024,Are Scrum Masters Too Much Overhead?
Me_Beben,40,"Agreed. At one point our tech lead was our scrum master and that seemed fine to me. The company eventually got a lot more bureaucratic and had a separate role for: PM, Scrum Master and Tech Lead. It was a mess. 

Because the PM was in charge of the actual product roadmap and the tech lead the one responsible for orchestrating the necessary work to make it happen, I think I heard the scrum master speak like twice per meeting. It was mind blowing to me that this person was getting paid to say ""how many story points do you think that is?"" a couple times per meeting.",2024,Are Scrum Masters Too Much Overhead?
elperroborrachotoo,11,"But the point of the SM is to keep the bureaucracy away from the devs, so... with a more bureaucratic company, there would be more use for the role. 

It's not a dev role (it seems to me that a common problem of ""what's the point of the SM"" is actually: ""why does a Dev waste time on this?"").

For us, the SM organizes time and - if needed - room for the meeting, takes care of ""someone has taken away the projector again"",  ""kick IT when they are slow setting up the new build server"", etc. 

That's not the whole role, of course - it's not just a ""team mom"". Their role is also to e.g., keep meetings focused, short and effective, which is a social rather than a technical task.",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,0,In my experience the scrum master is usually driving and moderating those meetings and making sure people stay on task and don’t ramble on about tangential issues. Sounds like you had a bad scrum master.,2024,Are Scrum Masters Too Much Overhead?
Cell-i-Zenit,7,but anyone can keep an eye on if you stay on task or not. You dont need to hire someone specifically for that.,2024,Are Scrum Masters Too Much Overhead?
Me_Beben,5,"Again, this is a role anyone in the meeting can (and usually did) fill. Two devs getting too deep in the weeds about the technical aspects of a ticket? If the PM or tech lead said nothing, more often than not one of them would quickly realize that what they were discussing was a topic for another call.

You can be the best scrum master in the world, but if someone speaking up to say ""you two should discuss that offline after the meeting"" has fully satisfied your job description, then just *maybe* it doesn't need to be its own profession.",2024,Are Scrum Masters Too Much Overhead?
honest_arbiter,18,"> when I was working at start-ups or scale-ups, I never wanted to hire a separate Scrum Master.

It was shocking to me that a *startup* would ever consider hiring a scrum master. Startups are all about only hiring the most critical roles, and then just at the point where someone can't do too many jobs, you hire more so you're not weighing down growth.

When I originally started as the second engineering hire of a startup, I was originally responsible for design and architecture of the entire backend, which included all of our cloud infrastructure and devops, as well as our entire security posture (I was responsible for doing pretty much everything for our SOC 2 audits). I made specific architecture decisions because I knew we couldn't afford dedicated ops/SRE roles early on. I wasn't alone in this - pretty much everyone was wearing multiple hats early on.

The thought of hiring a dedicated scrum master at a startup strikes me as wasteful insanity.",2024,Are Scrum Masters Too Much Overhead?
sanbikinoraion,2,That's really early stage though. You can be a series b with 50 people and still be a startup.,2024,Are Scrum Masters Too Much Overhead?
honest_arbiter,1,"Correct, and it would still strike me as insanity to have a scrum master at this point. It's much more effective to just hire some developers who know how the software development process should work, and get them to lead your agile process and have them mentor others.

The only time I've seen dedicated scrum masters make sense is when you have a large company who is moving to agile from an older development process, and in that case the scrum master is really like a trainer, teaching people how the new process should work. Even then it should be a time-limited role usually.",2024,Are Scrum Masters Too Much Overhead?
kooknboo,15,"One word response: exactly.

TLDR: which is why we now call them Advanced Development Owners.  That makes everyone feel better and new and edgy and worthwhile.  My team of 3 developers has an ADO.  Yet we manage everything - cards, commitments, schedules, everything.  He generates some report that nobody looks at, comes up with a stupid fucking icebreaker for every call (how did you meet your spouse and when did you know they were it?  Would you rather fight one elephant sized fly or 1000 fly sized elephants?).  And he constantly is futzing with his 3 kids under 2yo and 2 dogs while on calls. 

His twins were born earlier this year and he took 7-8 weeks PTO.  We were the only 3 that realized he was gone. His manager had even forgotten. Looking at pay chart, he makes 100-124k plus bonus.",2024,Are Scrum Masters Too Much Overhead?
honest_arbiter,11,"I'm honestly still surprised that job exists. With all the recent tech layoffs, many companies realized they had too many people who were not directly involved in getting code shipped and out the door (e.g. ""zero interest rate product managers"", too many technical product managers, etc.) and downsized accordingly.",2024,Are Scrum Masters Too Much Overhead?
Relative-Ad-2415,2,"“Zero interest rate PM”

Fucking hell, what an apt description.",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,1,"employ oil summer wide ink entertain humorous seemly political society

 *This post was mass deleted and anonymized with [Redact](https://redact.dev/home)*",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,1,[deleted],2024,Are Scrum Masters Too Much Overhead?
kooknboo,2,Are you me?,2024,Are Scrum Masters Too Much Overhead?
signalbound,19,Hahaha you made me chuckle.,2024,Are Scrum Masters Too Much Overhead?
Deleted Account,-7,"Look, your employer is willing to pay one FTE just so that you can go and complain to them about whatever is bothering you. I mean, they can’t do shit about it, but still. Be thankful - each retro are a few hours that you otherwise would have had to work",2024,Are Scrum Masters Too Much Overhead?
honest_arbiter,7,I would much rather spend a few hours working than in an activity that wasn't useful.,2024,Are Scrum Masters Too Much Overhead?
Deleted Account,35,[removed],2024,Are Scrum Masters Too Much Overhead?
cristiand90,1,"> external scrum consultant


Dream job. Get paid buckets of money to teach people stuff they will never use and barely understand.


Devs don't need scrum but can do it easily, management needs scrum, but management is incapable of practicing scrum. So they hire consultants to ""teach"" them and then completely ignore everything.",2024,Are Scrum Masters Too Much Overhead?
m00fster,30,"Every team I’ve been on the scrum master is a developer or QA person, could even be a project manager. I’ve never seen it as a dedicated role.",2024,Are Scrum Masters Too Much Overhead?
nnomae,20,I struggle to even imagine what a full time Scrum Master would do. I mean he runs the meetings and keeps track of what is or isn't finished for the current sprint. How on earth is that a full time job?,2024,Are Scrum Masters Too Much Overhead?
teensyboop,9,"I just joined a new company. I have 20 years in the industry and seen variations of agile but mostly muted less dogmatic versions. First time i have seen the fte role and honestly blown away how dumb it is. I asked the manager if we can convert the role to a developer or some other IC role. Shocked pikachu face “but how will we get anything delivered on time?”

Happy end state, the scrum master flipped to a TPM, which focused this guy on external coordination which is where most of the delays were from. Team and individual happier and less tension. i think this scrum master was seen as the enemy in the team.  I think most of this stuff wqs introduced with good intentions but it clearly lost the plot a while ago.",2024,Are Scrum Masters Too Much Overhead?
baal80,3,"He's the only person who knows how to configure JIRA columns/swimlanes.

/s",2024,Are Scrum Masters Too Much Overhead?
popiazaza,30,"Scam masters, yeah.",2024,Are Scrum Masters Too Much Overhead?
fragrant_ginger,71,"Never ask a man his salary, a women her weight, a scrum master what they do all day.",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,2,Because all the role is is wasting time.,2024,Are Scrum Masters Too Much Overhead?
Andhrimnir,104,"I've had amazing scrum masters that efficiently ran meetings, shielded our team from management/stakeholder shenanigans, actually helped chase up blockers and people that needed chasing on our behalf, helped encourage the quieter team members to speak up for themselves, and generally just made it easier for the team to get our work done.

I currently have one that can't get his audio working on Teams two days in a row, activity slows down meetings by never saying anything of value or shutting up, which makes it hard for people to speak up, and people feel like their concerns aren't being heard, and no one knows if he even does anything outside of meetings.

Having a bad scrum master is worse than not having one, but a good scrum master can make a team happier and more productive.",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,8,What did your manager do then?,2024,Are Scrum Masters Too Much Overhead?
Andhrimnir,3,"We didn't have a manager on our team. There was a management group managing multiple teams, including mine, and the overall project. But our PO and SM dealt with all the management BS, and our team was so efficient that we were pretty much left alone.",2024,Are Scrum Masters Too Much Overhead?
imwithn00b,13,"Same perspective here... When you get to work with a good one you'll know it. I think many of the ""bad"" ones are usually placed into an organization that probably doesn't even need them",2024,Are Scrum Masters Too Much Overhead?
Best_Lavishness_9785,10,"This. As much as Scrum can be frustrating and is extremely flawed, I think it's a popular thing to diminish SM's role, and I find that a bit unfair and unempathetic to the good or at least decent ones. I used to buy into it too. Certainly a lot of bad SMs out that don't seem to be doing much except setting up basic Scrum rituals without adding much value, so the negative opinions make sense

Mine isn't the best ever or anything, but shes honest and definitely addresses and opens discussion to broader team issues on topics people are afraid to speak up on. Engineers are usually not great at communication on those kinds of things",2024,Are Scrum Masters Too Much Overhead?
Andhrimnir,2,"I think part of the problem is how nebulous scrum/agile can be and how easy it is to be ""qualified"". Even an average scrum master is OK. You could argue if they're worth the budget cost or not, but they generally make the scrum ceremonies less painful and more useful. But for the same reason there are so many shitty middle managers, there are many shitty SMs. They don't have any easily, empirically measurable outputs. They usually outrank the team and can blame everyone else for things running poorly. So they can fudge their way through being shit at their jobs.",2024,Are Scrum Masters Too Much Overhead?
loxagos_snake,6,"I came from a first job in a tiny team where ceremonies happened naturally around the coffee table. Then I joined a platform team in a huge enterprise that worked in kanban mode with just a team leader (engineer specializing in DevOps and automation).

That lasted 5 months. We were getting things done. We were the least-questioned team during PI plannings, simply because our work spoke for us through the other teams. Then, management decided we can't be the odd ones, forced us to change to scrum and gave us an SM and a PO. Funny thing is, despite having sprints, we are still pretty much Kanban since urgent requests come in on a daily basis, so sprint items naturally bleed over. Commitments are getting completed by the end of the iteration anyway, just on our own time; leadership stopped protesting after the second sprint and we just pretend to be scrum.

SM is an amazing person but she honestly doesn't add direct value. She understands this, so she does her best to shield us from higher ups, takes over administrative tasks & presentations and let's us do our thing.",2024,Are Scrum Masters Too Much Overhead?
Scroph,1,">SM is an amazing person but she honestly doesn't add direct value. She understands this, so she does her best to shield us from higher ups, takes over administrative tasks & presentations and let's us do our thing.

This has been my experience too. The best scrum masters I worked with were the ones who worked in the background to remove organizational bottlenecks for smooth sailing, not the ones whose jobs were to be pedantic about the rituals",2024,Are Scrum Masters Too Much Overhead?
TheBlueArsedFly,4,Shielded from management is the real value.,2024,Are Scrum Masters Too Much Overhead?
hardware2win,23,"Ive worked in scrum for years

Then I joined team which has 2 hours of meetings per **month**

It felt very weird, but it works too.",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,3,Are they hiring?,2024,Are Scrum Masters Too Much Overhead?
Hand_Sanitizer3000,2,If ya'll are remote i will take a paycut for this life,2024,Are Scrum Masters Too Much Overhead?
bradgignac,1,We’re not two hours per month but we’re sub 2 hours per week and fully remote. Shoot a DM to chat more.,2024,Are Scrum Masters Too Much Overhead?
Robotronic777,104,Yes. Worked with and without. The amount of childish shit that they bring is absurd.,2024,Are Scrum Masters Too Much Overhead?
Googles_Janitor,50,Yeah why do they always make me feel like I’m in daycare,2024,Are Scrum Masters Too Much Overhead?
Robotronic777,29,"""Wear a funny hat to our retro session"" 🤡",2024,Are Scrum Masters Too Much Overhead?
HimbologistPhD,17,My funny hat is a railroad spike I drove 4 inches into my frontal lobe,2024,Are Scrum Masters Too Much Overhead?
-grok,1,"oh uh, does this really work?   asking for a friend",2024,Are Scrum Masters Too Much Overhead?
keru45,15,"For retros our scrum master introduced a shared scribbl board on which they hand-drew an anchor, a sun and a few other more obscure pictures which were supposed to represent categories that we were to group our retro items around.

We had been using a simple and clearly formatted table up to that point.  It felt just like being back in preschool.  Participation in retro immediately plummeted to near-zero.",2024,Are Scrum Masters Too Much Overhead?
RDOmega,27,*SAFe has joined the chat.*,2024,Are Scrum Masters Too Much Overhead?
Deleted Account,13,[deleted],2024,Are Scrum Masters Too Much Overhead?
-grok,2,"I was confused what SAFe stood for, but my boy [Martin Fowler came through with the goods as usual.](https://www.youtube.com/watch?v=zNvmjPzdqKc&t=665s)",2024,Are Scrum Masters Too Much Overhead?
RDOmega,5,"Serious answer follows...

Yes, they're completely unnecessary.  But so is scrum.

Just work on the next important thing. Vision and planning for the future are important, but there's no justification for trying to actively manage more work than you can digest in any given moment.",2024,Are Scrum Masters Too Much Overhead?
soft_white_yosemite,0,"I mostly agree that Scrum is unnecessary. I don’t like needing set an arbitrary two weeks of work in stone. Needing to discuss and decide on work to be done so far in advance makes it difficult when the territory doesn’t match the map.

But in my current org, they don’t do Scrum, but they do have two week “sprints”. The product manager moves single sentence tickets into sprints in jira, gives them story points himself (which are actually days, but he refuses to name them that), and assigns them to specific devs ahead of time.

So sprints end being “releases” as they “releases” Sprint123 on specific date.

I feel like if they want certainty over what is getting delivered every two weeks, I think we need to do some of the Scrum ceremonies like refinement and planning.",2024,Are Scrum Masters Too Much Overhead?
RDOmega,1,Scrum doesn't increase certainty.,2024,Are Scrum Masters Too Much Overhead?
soft_white_yosemite,1,"But I think I can use planning poker to suss out the work to be done, better estimations than just bunging in a number out of one's ass, and everyone getting on the same page about what's probably able to be done in the next sprint/iteration.

Right now I don't even think our PMs really guess how long they think something will take before just plucking a story point out of thin air and putting it in the next sprint.",2024,Are Scrum Masters Too Much Overhead?
RDOmega,1,There's no need for estimates. It's ultimately fantasy sport for people who can't accept that there's risk in everything.,2024,Are Scrum Masters Too Much Overhead?
soft_white_yosemite,2,I’ll be sure to show management your comment and I’m sure they’ll change their ways.,2024,Are Scrum Masters Too Much Overhead?
RDOmega,1,Hehe 🫠,2024,Are Scrum Masters Too Much Overhead?
flukus,1,"> So sprints end being “releases” as they “releases” Sprint123 on specific date.

They're meant to be releases, that's the whole point of them. Take that away and you've just got all the scrum rituals for nothing.",2024,Are Scrum Masters Too Much Overhead?
soft_white_yosemite,2,"Nah mate, sprints aren't supposed to always be attached to a release.

They're supposed to result in 'releasable software', but there's nothing about Scrum that dictates a release after every sprint.

JIRA has the concept of a 'version' that is separate to sprints. I wish we used those at work to decouple releases from sprints.",2024,Are Scrum Masters Too Much Overhead?
flukus,1,"Fair enough, I'd settle for your situation though. We release stories more frequently than are sprint cycle but still go through all the sprint ceremonies.",2024,Are Scrum Masters Too Much Overhead?
Agent_03,2,"Thanks, now I have the urge to destroy something.   Time to play some Doom.",2024,Are Scrum Masters Too Much Overhead?
bradgignac,2,Just the mention of SAFe makes me want to downvote you.,2024,Are Scrum Masters Too Much Overhead?
RDOmega,2,I deserve it.,2024,Are Scrum Masters Too Much Overhead?
LiquidLight_,1,"Oh you have not lived until your SAFe organization gets reorganized to remove SMs from all teams and only leave Senior SM, who really don't have a function.


  ^(we reinvented waterfall and everyone thinks because they say agile it makes things agile. HELP)",2024,Are Scrum Masters Too Much Overhead?
RDOmega,2,"I mean, why not remove it all?",2024,Are Scrum Masters Too Much Overhead?
LiquidLight_,2,"Literally no idea. I assume because throwing the SSMs out would have thrown out a ton of organizational knowledge. But they're also basically managers, and firing a manager is heresy.",2024,Are Scrum Masters Too Much Overhead?
zam0th,87,"99% of scrum ""masters"" don't know the difference between scrum and agile and think story points and mandays are the same thing.

On the other hand scrum masters who know what they are doing, are methodological experts (not just in agile) and have political power in the organizations are extremely beneficial.",2024,Are Scrum Masters Too Much Overhead?
signalbound,43,"Story Points started out as Ideal Days * 3. Here's Ron Jeffries, the inventor of Story Points, talking about it:

""In XP, stories were originally estimated in time: the time it would take to implement the story. We quickly went to what we called “Ideal Days”, which was informally described as how long it would take a pair to do it if the bastards would just leave you alone. We multiplied Ideal Days by a “load factor” to convert to actual implementation time. Load factor tended to be about three: three real days to get an Ideal Day’s work done.""

Ron Jeffries worked on a team that used Ideal Days, but management didn't understand it. Why isn't it done after 3 days when you say it's 3 ideal days?

He multiplied the Ideal Days with 3 and called them points: Story Points.

Now the questions from mgmt disappeared.

Planning Poker was invented later by James Grenning.

Here is the full read: https://ronjeffries.com/articles/019-01ff/story-points/Index.html

Here's an article on the history:

https://mdalmijn.com/p/how-story-points-turned-to-the-dark-side",2024,Are Scrum Masters Too Much Overhead?
Plank_With_A_Nail_In,18,"Lol when I started work 25 years ago a senior dev just told me to multiply my estimates by four, no need for all of that bullshit to justify it. Its worked for me and all my teams so far.",2024,Are Scrum Masters Too Much Overhead?
nealibob,13,"Ah, I've only been multiplying by three. There's my problem!",2024,Are Scrum Masters Too Much Overhead?
Kaitaan,10,"You multiply by three within your team, and four externally.",2024,Are Scrum Masters Too Much Overhead?
Venthe,21,"My fiend, you are wrong. Story points WERE the ideal days.

> In XP, stories were originally estimated in time: the time it would take to implement the story. We quickly went to what we called “Ideal Days” (...) So, as I recall it, we started calling our “ideal days” just “points",2024,Are Scrum Masters Too Much Overhead?
signalbound,6,Yup!,2024,Are Scrum Masters Too Much Overhead?
grepe,2,now can you tell me why only the fibbonaci sequence numbers are allowed?,2024,Are Scrum Masters Too Much Overhead?
signalbound,3,"Well, first of all, usually the cards don't exactly represent a Fibonacci sequence, but a Fibonacci-like sequence.

The idea behind it is to place estimates in a bucket that represents an order of magnitude. It's roughly a mammoth, or roughly a mouse. It's to prevent discussions where we delude ourselves with the precision of our guesses in short.

Sounds plausible enough for you?",2024,Are Scrum Masters Too Much Overhead?
grepe,1,no... but thank you for explanation,2024,Are Scrum Masters Too Much Overhead?
Venthe,3,"That's not all. The idea is to disallow ""twice-as"" estimations; and as a consequence - tying the effort multiplier to ""twice-as""

When you consider each SP a bucket, then we have e.g.

`2, 3, 5, 8, 13`

Then with fibbonacci you can't multiply 2 by x to ""standardize"" the effort. Each one have its own discrete bucket which is distinct enough to warrant separate consideration.

The second benefit is the continuously increasing distance between stories; which is helpful when you think about SP's as a tool to indicate the ""unknowns"". If you know everything, a story might be 8. If you don't, it might be 13 or 21. Please notice, that it tells us that:

* Original story is in itself large
* Any unknowns will potentially balloon out its effort

This way we promote smaller stories; because the risk coming from the unknowns is mitigated.

ps. It's not like they are ""allowed"" or not, you can use any estimation method - even sequential ones - but then you might as well use t-shirts sizing (Which are in essence sequential SP's), though of course historically SP's related to ideal dev days. Lots of history to unpack, lots of development which SM (to tie in the topic of this thread) should coach you in.",2024,Are Scrum Masters Too Much Overhead?
Mirsky814,1,"I worked for a company that then took the distributed points voted on each items by team member during planning poker and then ran a monte carlo simulation on the entire release/project it to determine the 90 and 99% quantile points values for a project. 

It was surprisingly accurate, but I suspect only because the teams had already added their ""unknown unknowns"" factor into it.",2024,Are Scrum Masters Too Much Overhead?
flukus,1,Because the uncertainty grows at larger numbers.,2024,Are Scrum Masters Too Much Overhead?
Venthe,19,"> On the other hand scrum masters who know what they are doing, are methodological experts (not just in agile) and **have political power in the organizations** are extremely beneficial.

Which is, ironically enough, a firm requirement from the scrum framework for the scrum to be successful.",2024,Are Scrum Masters Too Much Overhead?
Plank_With_A_Nail_In,9,"Its in there as an obvious excuse to why scrum doesn't work...you didn't do it right.

If it can't be done right by average teams then its a shit solution.",2024,Are Scrum Masters Too Much Overhead?
Venthe,6,"If the issue is organization, then no framework will work, be it kanban, scrum or whatnot. And this will come as no surprise, that the issue is never scrum, sometimes SM, and usually organization.

Scrum and scrum team will not be able to change org by themselves, but it hardly is an issue with scrum.",2024,Are Scrum Masters Too Much Overhead?
signalbound,-2,u/Venthe: please quote me the relevant part of the Scrum Guide where it says the Scrum Master must have political power. I'll wait! I don't think it's mentioned anywhere EXPLICITLY as a requirement.,2024,Are Scrum Masters Too Much Overhead?
Venthe,4,"> The Scrum Master **is accountable for establishing Scrum** as defined in the Scrum Guide. They do this by helping everyone understand Scrum theory and practice, both within the Scrum Team and the **organization**.

> The Scrum Master serves the organization in several ways, including: (...) Planning and advising Scrum implementations within the organization; Helping employees and stakeholders understand and enact an empirical approach for complex work; (...) The Scrum Master serves the Scrum Team in several ways, including: (...) Causing the removal of impediments to the Scrum Team’s progress

> **The Scrum Team is** responsible for all product-related activities from stakeholder collaboration, verification, maintenance, operation, experimentation, research and development, and anything else that might be required. They are structured and **empowered by the organization to manage their own work**.

You can't do that without empowering a scrum master, so it is an requirement.",2024,Are Scrum Masters Too Much Overhead?
hardware2win,4,">story point

Imaginary unit to cover asses",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,2,"In the end, we add some math to map story points to duration and compute whatever bullshit just to make it seem scientific and legit - it works just as well as astrology",2024,Are Scrum Masters Too Much Overhead?
emptythecache,2,"Our team has completed about half the points we've put onto every single sprint since we started scrum. Most of the points we roll over are already in QA, so we add more stories to the next sprint so the devs have something to do. Rinse and repeat, until it's decided the solution to this problem is to *also* do time estimates. So now every standup starts with looking at the burn up chart for both points and time and then scrum master going ""ok those graphs look pretty similar"". It's a *great* system.",2024,Are Scrum Masters Too Much Overhead?
MoreRopePlease,3,"The dev-qa problem is one I've never seen adequately addressed. Qa must lag dev. And unless you want your devs to do as work, it's very likely you'll have stories in qa at the end of the sprint. Especially if you include automation as part of QA work.",2024,Are Scrum Masters Too Much Overhead?
Venthe,1,"And a good SM should absolutely intervene to make you ask (and answer!) the questions like:

1. How will you address the rollover of the stories? How will you address doing less than commited? (Take less/introduce slack/extend sprint)
2. How to reduce the QA time? (Move it closer to dev cycle/More automation/Smaller stories?)
3. What is the purpose of the time estimates?",2024,Are Scrum Masters Too Much Overhead?
Crafty-Sand2518,55,Scrum and its consequences have been a disaster for the human race,2024,Are Scrum Masters Too Much Overhead?
Deleted Account,12,Scrums got Donald Trump elected and Harambe killed,2024,Are Scrum Masters Too Much Overhead?
Deleted Account,2,"SCRUM is a disgusting perversion of Agile that only satisfies self important [people] who can’t let go of waterfall.
When a real leader enters the room, Agile can happen and upper management can be happy with metrics reported. In my experience, KanPlan is most often the best incarnation of Agile.",2024,Are Scrum Masters Too Much Overhead?
tequilajinx,5,"All software, especially SAAS software, has sucked ever since agile became a thing. My running joke whenever I come across a technical issue on a system is, “It’s MVP”",2024,Are Scrum Masters Too Much Overhead?
BobSacamano47,0,What a ridiculous take. ,2024,Are Scrum Masters Too Much Overhead?
evileagle,4,Agile was a mistake.,2024,Are Scrum Masters Too Much Overhead?
Ib_dI,1,What's the alternative?,2024,Are Scrum Masters Too Much Overhead?
evileagle,6,"Managing projects like reasonable, normal human beings.

https://rethinkingsoftware.substack.com/p/why-scrum-is-stressing-you-out",2024,Are Scrum Masters Too Much Overhead?
theitgrunt,11,I had a scrum master that was an absolute beast.  He was given the ability to pull weight to clear blockers and coordinate the political landscape  of a 100+ year old financial institution.  I wish every project I was on after that had Mean Gene.  We got so much done and moved mountains.,2024,Are Scrum Masters Too Much Overhead?
jared__,61,My personal experience is that scrum masters tend to be developers who didn't cut it but don't have the skill set to be a project manager.,2024,Are Scrum Masters Too Much Overhead?
Positive_Method3022,35,"Totally biased. I know people who choose to become scrum masters because it pays more than entry level developers. They became managers of tech teams aftwards without any experience as developers. 

Brazil is a joke.",2024,Are Scrum Masters Too Much Overhead?
sonobanana33,1,The whole world is a joke.,2024,Are Scrum Masters Too Much Overhead?
echomanagement,26,"Back when Scrum hysteria was at its peak, we had PMs and even some senior developers begging to take part in the ""revolution."" Now it's basically ""who wants to run the most obnoxious meetings of the week,"" and everyone knows it.",2024,Are Scrum Masters Too Much Overhead?
billie_parker,0,"I don't see any distinction between ""scrum master"" and ""product manager.""",2024,Are Scrum Masters Too Much Overhead?
elebrin,8,"A good scrummaster provides meetings with agendas, facilitates communication between teams and with teams that developers may not know or have direct access to, often manages communications and meetings with people outside the organization, juggles schedules, keeps work trackers up to date, makes sure thing are ready if you have a CAB, presents to the company at sprint reviews, meet with Product to get priorities and set up meetings to go over requirements when teams don't have BAs, and lots of other stuff.

In another era, they would be called a secretary. I realize that the term has a connotation, but that's basically it.

I have worked on teams with a dedicated scrummaster, only for our team, and it was really good. As the team's quality engineer, I no longer had to go to CAB, and I no longer had to make slides to present at reviews (although we rotated through who was doing demos so I still did demos). When I needed to chat with a VP about the thing we were doing for their team, that was all facilitated for me. When I needed to facilitate a multi-company E2E, my scrummaster set up all the sessions. When we weren't getting support from infrastructure teams, they were able to relay that back to the product team and get some movement from infrastructure. They scheduled security reviews, and when maintenance items came in from Security, Infrastructure, or whatever else they scheduled that stuff with our other work so we never had to think about it. Hell, we had an ""everyone runs test cases"" sort of policy when there was manual testing to do, and they even ran test cases and helped people log bugs in a trackable way.

Then we lost the scrummasters. And since developers do not actually want to meet with product, they just... don't. They develop in the direction their nose points. Nobody knows what UX is up to, making requests to that team is like pulling teeth and you get nothing useful. I can't get solid production numbers from anyone any more for doing performance testing. 

I feel like if you have a younger organization where people are open to communicate, in tune with the tech they are using, and aware of how it is created, and willing to talk intelligently about their software then you might not need scrum masters. If you work somewhere with a lot of gray heads who don't communicate and don't understand anything outside of their narrow focus band, scrum masters can be very useful.",2024,Are Scrum Masters Too Much Overhead?
Venthe,4,"> In another era, they would be called a secretary. I realize that the term has a connotation, but that's basically it.

No, not really. [Process manager](https://www.patkua.com/blog/5-engineering-manager-archetypes/) is the right word.

> I feel like if you have a younger organization where people are open to communicate, in tune with the tech they are using, and aware of how it is created, and willing to talk intelligently about their software then you might not need scrum masters. If you work somewhere with a lot of gray heads who don't communicate and don't understand anything outside of their narrow focus band, scrum masters can be very useful.

There is another issue altogether. Agile is hard. Agile without organizational buy-in is downright impossible. Frameworks like scrum (or methodologies like kanban) try to address that by ensuring that necessary parts are there; but you are faced with an ever-growing tide of new developers with no one to teach them; old developers who are not interested in being more than good enough; and companies ill-suited for agile.

That's why ""agile is dead"", ""scrum is dead"". You have a wave of people that are _convinced_ that scrum is about story points, burndown charts, about dropping quality when the reality is - it isn't. But to teach that to the young devs, you need a good SM - and frankly, most are here because there was before mentioned high influx of young blood, so there were many new teams, so they pulled anyone and their mother to be an SM.

And that's how you brew a shitstorm where we are now. ""Good teams"", like you've said can absolutely manage themselves without SM or even without scrum. I've met one good team, maybe 3 more imperfect, but workable. The rest - eh, north of 30 - worked in a local maximum. No retros, no communication, no business understanding, no accountability; but they delivered _something_. Over time, over budget, often something that won't be used. That's life.",2024,Are Scrum Masters Too Much Overhead?
spareminuteforworms,103,Scrum itself is a virus intentionally set upon the development community to create a more predictable(ly bad) product lifecycle.  Scrum is just not suited for any reasonably unknown set of end product.  Scrum is suited for making copies of existing products.  Scrum master as an actual job title is the equivalent of teabagging the Agile manifesto and spraying it with wet shit.,2024,Are Scrum Masters Too Much Overhead?
ZippityZipZapZip,25,The irony is that business thinks scrum is developers protecting and isolating themselves. 'Didn't make it into the sprint'.,2024,Are Scrum Masters Too Much Overhead?
Plank_With_A_Nail_In,19,"The business is thinking the IT team is still failing and they have turned some broad suggestions about how to organise themselves in a religion for some reason.

Other parts of the business deal with projects just as complicated as software development but don't need all of this bullshit to go with it. Engineers building rockets don't use Scrum ffs...what they do have is a senior management team that knows how to build rockets....that might be the issue no?",2024,Are Scrum Masters Too Much Overhead?
Crafty_Independence,20,"After a year, full-time scrum master working with my team still doesn't understand that story points can't be used to predict delivery dates for complex systems",2024,Are Scrum Masters Too Much Overhead?
love_weird_questions,2,"not a huge believer of estimates to be honest. i ask my teams not to do it, it's an academic exercise with almost no practical applications",2024,Are Scrum Masters Too Much Overhead?
Crafty_Independence,2,"Agreed.

The only universally true things about delivery estimates is that they are always wrong, and that someone will act like they are always accurate then be surprised when they again are not.",2024,Are Scrum Masters Too Much Overhead?
love_weird_questions,2,"the only value is to trigger a conversation when two people see a profoundly different estimates. one might have a blind spot, or the other overestimates complexity",2024,Are Scrum Masters Too Much Overhead?
RICHUNCLEPENNYBAGS,-2,Why not?  Obviously they're imprecise (what isn't) but if you know the velocity of the team and the aggregate estimate of the task it seems reasonable to extrapolate an estimated completion date from it.,2024,Are Scrum Masters Too Much Overhead?
Crafty_Independence,1,"Because they are truly arbitrary. Even the same developer might point differently on different days based on a number of variables. The ""inventor"" of story points (Ron Jeffries) has a lot to say about this, and I recommend you look at what je has to say.",2024,Are Scrum Masters Too Much Overhead?
RICHUNCLEPENNYBAGS,1,If they have no predictive value whatsoever we may as well spare ourselves all the wasted time voting on and recording them.,2024,Are Scrum Masters Too Much Overhead?
Crafty_Independence,2,"This is in fact what Jeffries suggests. 

As I said, his insight on delivery is worth reading.",2024,Are Scrum Masters Too Much Overhead?
RICHUNCLEPENNYBAGS,0,I don’t have that much respect for these supposed gurus but I think the insistence of some that they simply can’t estimate how long anything will take is childish and unrealistic. If you’d rather make an estimate in days than “points” that’s fine.,2024,Are Scrum Masters Too Much Overhead?
kooknboo,8,"It was also intentionally set upon the community to generate self-worth by, largely otherwise, incapable people.",2024,Are Scrum Masters Too Much Overhead?
love_weird_questions,1,what would you recommend as an alternative?,2024,Are Scrum Masters Too Much Overhead?
zarafff69,0,"It’s not perfect, but it’s better than most alternatives.",2024,Are Scrum Masters Too Much Overhead?
Ey_J,19,Kanban is better suited to our needs in my team,2024,Are Scrum Masters Too Much Overhead?
teensyboop,2,"I enjoy kanban too, mainly as it is helpful for focusing on things slowing you down.",2024,Are Scrum Masters Too Much Overhead?
vital_chaos,-4,"Kanban can work, but is usually better with existing projects than something new unless the requirements are very fixed.",2024,Are Scrum Masters Too Much Overhead?
billie_parker,1,In my experience it is the same as just an informal meeting with no structure.,2024,Are Scrum Masters Too Much Overhead?
spareminuteforworms,0,I'd assert I don't need an alternative mass prescribed system.,2024,Are Scrum Masters Too Much Overhead?
weyermannx,7,"Currently we don't have one and it's done by the team lead. 

I honestly can't figure out what the job of a dedicated scrum master is. I had one for a bit on a different team, and I swear he didn't do anything. He could have been helpful if he had spent time between meetings organizing and detailing the backlog, meeting with product owners and getting their input on tickets, but didn't even do that. He would just drag everyone into a longer meeting, and it was obvious it was his first time even looking at the backlog. He would just make the team lead basically do everything anyway, because he didn't have any technical knowledge or anything... maybe I had a bad one, but I can't honestly figure out why his role existed",2024,Are Scrum Masters Too Much Overhead?
MoreRopePlease,3,"The most effective period of time for my team was when I wore the scrum master, tech lead, and team lead hats. Me and the PO would meet and get most of the work organized, and present it to the team. The team would chime in on how to slice stories, interject new stories (tech debt, etc) and we'd talk about the technical architecture and rough feature designs I came up with. We made steady progress on our work, with high quality, and high predictability. 

The team I'm on now (two teams on the same project)... Ugh. SM, PO, Manager all have their say in the meetings. Manager keeps making technical and design suggestions. I have to argue about letting engineers talk to each other. We finally have some team meetings where managers are explicitly not invited and that helps. But I no longer have space to contribute technical direction because there's too many cooks (oh yeah, we also work with an architect who tells us what to build without regard for our schedule) . I'm frustrated and looking for an exit.",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,17,"I hate scrum, I always hated it. I can't wait for it to go away, cause it will.",2024,Are Scrum Masters Too Much Overhead?
Droidatopia,1,"I hate it too.  It's slowly killing what little job satisfaction I ever had.

I can however, wait a long time for it to go away, because at this rate, it will almost certainly be replaced by something worse, like Super-SAFe.",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,2,I have the luxury position now of being self-employed in an one-man team. Thank the Lord.,2024,Are Scrum Masters Too Much Overhead?
Hans_of_Death,10,My job would be so much harder without our scrum master. I do not miss wasting hours of the day trying to get an approval from technical quality when I could be doing something productive. Now our scrum master tracks and manages all that crap and keeps things moving.,2024,Are Scrum Masters Too Much Overhead?
Robyrt,8,"Exactly. A scrum master is basically a bureaucracy interface role, with a side job of running meetings.",2024,Are Scrum Masters Too Much Overhead?
loxagos_snake,3,"Agreed. My team used to be Kanban because we are a platform team, so only about 60% of our capacity goes to planned items (which is usually infrastructure, plugins etc.). Rest goes to urgent requests, bug fixes and general support of other teams. Keeping track of our flow was enough to keep us productive.

Then they decided to force Scrum on us. Luckily, our SM's first meeting was a no-bullshit discussion about what *we* need from her. She promised to keep up pretenses and let us do our thing. In our meetings, she mostly moderates and maybe asks a few questions. She also takes care of presentations and administrative tasks and just gathers feedback/gives us updates.",2024,Are Scrum Masters Too Much Overhead?
Constant-Disaster-,5,"In large corporations when your work deals with a lot of people, having a good scrum beat down doors and find people/blockers and hold other teams accountable is amazing.",2024,Are Scrum Masters Too Much Overhead?
MKSFT123,3,"I believe Scrum Master shouldn’t be a full time role and can be facilitated by anyone on the team. Our team’s scrum master also writes code and helps project manage internally which is somewhat incidental to removing blockers as he knows the correct people to clarify things and ultimately make life easier for the resources on each assigned project. 

This article suggests doing scrum in the background which I agree with totally, whoever in the team is the most responsible can facilitate the effective role of a scrum master who acts like a janitor quietly mopping everything up documentation / communication wise and ensures data is being tracked to showcase how much ass kicking code we are shipping.

The absence of this person often leads to upper management wondering what the hell the devs are doing, (this shouldn’t happen but unfortunately does a lot!) leading the role to be most successful when executed by a technical person with some finesse and communication skills. 

Sorry for the rant",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,11,[deleted],2024,Are Scrum Masters Too Much Overhead?
signalbound,0,"No, Scrum does not mandate a role, it's an accountability nowadays. Scrum evolved, it was changed in 2020. Check the latest version of the Scrum Guide, no mention of the world role anywhere.",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,5,[deleted],2024,Are Scrum Masters Too Much Overhead?
signalbound,1,"Sorry, I misunderstood then!",2024,Are Scrum Masters Too Much Overhead?
EliSka93,7,"Sadly David Graeber died, but I think he left us a book with an answer to that.",2024,Are Scrum Masters Too Much Overhead?
ismail_the_whale,4,https://en.wikipedia.org/wiki/Bullshit_Jobs,2024,Are Scrum Masters Too Much Overhead?
Deleted Account,3,"All of it (scrum, agile, extreme programming, and for fun I'll throw in ISO 9000 though that's a side argument) are crap.  None of it increases productivity or quality.


There's a reason that every organization I've been contracted out to has abandoned their next level organization and returned to the lone wolf programmer theory (with managers).",2024,Are Scrum Masters Too Much Overhead?
DatalessUniverse,3,Useless role.,2024,Are Scrum Masters Too Much Overhead?
Thundechile,3,The real question is if Scrum itself is too much overhead.,2024,Are Scrum Masters Too Much Overhead?
vibosphere,3,"""In order to reduce processes, we are adding more processes""",2024,Are Scrum Masters Too Much Overhead?
Hacnar,6,"Scrum masters are needed precisely because there are so many misunderstandings about it. You don't have to start with one in a start-up depending on the familiarity with scrum among your employees.  But they are still often needed, whether to teach juniors, or help the team unlearn some bad habits, or anything else that the team can't handle by itself.

There's also an issue of Scrum being the de facto default agile framework, when it definitely doesn't have to be if you have devs who have experience with agile way of working. The position of Scrum master also often encompasses a generic ""agile coach"" position. Scrum is a nice baseline for people new to agile, but I encourage everyone to find what works for them, even if it deviates from the official Scrum framework. That's where such ScrumMaster/agile-coach can help too before they step away.",2024,Are Scrum Masters Too Much Overhead?
morewordsfaster,2,"At my company, the scrum masters essentially just organize meetings and report on the team metrics. Better them than me, to be honest. I already spend 25+ hours a week in meetings rather than actually building or delivering software. The amount of time waste in enterprise just amazes me after having spent years in startups.",2024,Are Scrum Masters Too Much Overhead?
j4ckie_,2,"The more I meet, the more I am convinced of 'yes' being the short answer. At least if they're the type my organizational employs. They can be absolutely great if they're half project managers and bring the same focus on minimising meeting time (and meetings) as good engineers, since they have no skin in the technical discussions they're less likely to get sucked into one that's growing too detailed, too long, etc

However I haven't seen many that actually seem to have any sort of drive and more and more that appear to focus on making everyone feel comfortable, all the while assuming all employees must be stressed because they are so motivated and work so hard.",2024,Are Scrum Masters Too Much Overhead?
ganja_and_code,2,"The answer has always been an obvious ""yes,"" considering any amount of *unnecessary* overhead is ""too much"" overhead.

Scrum masters are a symptom of lazy and overbearing middle (micro)managers.

If your dev team can't self-sufficiently plan their own sprints without a dedicated guy orchestrating it, you need a better dev team, not a scrum ~~master~~ babysitter.",2024,Are Scrum Masters Too Much Overhead?
xp30000,2,A rare headline where the answer is yes.,2024,Are Scrum Masters Too Much Overhead?
ApatheticBeardo,2,"SMs are quite literally the first in the line of meme non-jobs to be chopped when money starts mattering at all.

They're not ""too much overhead"", they're 100% overhead and completely useless to any even remotely professional team, let alone the organization at large.",2024,Are Scrum Masters Too Much Overhead?
-grok,2,yes,2024,Are Scrum Masters Too Much Overhead?
urbanek2525,2,"I've had one good scrum master who was very, Avery good at understanding the stuff we were developing and organizing things. She was a former tester and software QA, so she knew the development process very well. She operated as a force multiplier and things ran into something well. The whole team of developers was so much more efficient.

I've had a number of useless scrum masters who add nothing but more meetings.

I can also say the same thing with some software developers as well. There was one of project that they hired a contractor to do, after months of development, still nothing usable and it got handed to me and there was almost nothing accomplished. Of course, they assumed work had been done, so I had to bang it out in record time to not get blamed for the delays.",2024,Are Scrum Masters Too Much Overhead?
FiredFox,2,"Our company at one time had 5 Scrum Masters for an engineering staff of ~60 which seemed like overkill

4 of the SMs were more about the process than the results and added very little to the company other than scheduling meeting after meeting and being too Hippie-Dippie about the whole thing.

1 was outstanding in that she had no precious notions of doing everything ""100% Kanban"" or ""100% Scrum"" and thought us to adopt the tools that made sense to our work and discard the rest.

We now have zero SMs, but other than the last one I can't say we miss them much at all.",2024,Are Scrum Masters Too Much Overhead?
shmorky,2,You could do with like half or even a third of a scrummaster per team. It's not a full time job if you're only scrummastering one team,2024,Are Scrum Masters Too Much Overhead?
bwainfweeze,2,Huh. Counterexamples to Betteridge *do* exist.,2024,Are Scrum Masters Too Much Overhead?
overclocked_my_pc,2,You already know they are.,2024,Are Scrum Masters Too Much Overhead?
OriginalPlayerHater,2,"The popular sentiment right now is they are useless but I've been in doing agile with just my coworkers and manager for the last year and a half and it sucks. My manager is rubberstamping all the ready for reviews, we completely lost the bigger picture, my own team is super silo'd and we have absolutely no discipline when it comes to adding random fields on each ticket that completely add nothing but more work. There is no reporting done on a regular basis, no review of performance.

I think people don't know what they have until its gone",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,2,Indeed. Scrum master is a role not a job.,2024,Are Scrum Masters Too Much Overhead?
HoratioWobble,2,"Scrum is meant to help businesses transition from waterfall to agile.

It's not meant to be a long process, unfortunately, due to sheer corporate incompetence, an entire industry has formed around it.

Scrum masters are a symptom.",2024,Are Scrum Masters Too Much Overhead?
BenAdaephonDelat,2,"Scrum Master should be a temp position. Like a contractor who comes in to overhaul your development methodology, trains one of the devs/managers how to continue it, and then leaves. That's what makes the most sense from an organizational standpoint imo.",2024,Are Scrum Masters Too Much Overhead?
subat0mic,2,Yes,2024,Are Scrum Masters Too Much Overhead?
Southern-Reveal5111,2,Our scrum master is a rookie with no clue what he is doing. We always ignore him. Some openly ignore him and some pretend to follow him.,2024,Are Scrum Masters Too Much Overhead?
Refmak,2,"We had the company’s CEO constantly breathing down our neck and changing requirements several times per day, making our work effectively infinite which was not only inefficient but also super frustrating.

So a scrum master was hired. The scrum master helped us do a complete 180. Chased down stake holders to get better descriptions, chased down the CEO to stop scope creep, facilitated training sessions to teach the team why working within the framework was ideal, hosted actually meaningful refinement sessions so our PM could prioritise effectively.

He somehow managed to do none of it by force, but rather by teaching - also the CEO.

His expertise fixed the team, and we actually got shit done.",2024,Are Scrum Masters Too Much Overhead?
SittingWave,2,"Scrum master certified here, but developer for most of my career.

No, they are not too much overhead. They are there for two reasons:

1. keep people focused
2. keep people connected

The problem is that most companies don't implement things properly. They half-ass their efforts and make possibly individual teams that perform well, but are unable to reach other sides of the organisation. They are also too busy to keep communicating to the rest of the organisation how far they are in their work. 

You really don't want a developer to deal with all of what amounts to red tape. It's wasted energy, effort, and skill. You want a person who is metodical, and knows the rest of the org to contact the right person when the team is struggling. They are also the ones that keep things running when the discussion start to go off topic (and it often does).

That's what a scrum master does. Nothing more. 

Companies tend to assume that this role can be taken by an arbitrary developer in the group, normally the most experienced. But that's wrong. because now you have an extremely effective and talented developer that needs to deal with jira and people and calendar and meetings. That's when you create a waste of time and potential.",2024,Are Scrum Masters Too Much Overhead?
yupidup,2,"Agile coach here, old one. I don’t how the f someone declared it a full time job but this is not meant to be and yeah, it will be an overhead pretty soon if you do. 

Originally it is a part time role, on the side, for someone within the original team (the ones who get some stuff done). It would take around 30% of their time on average, maybe 50% for a few first weeks before the team gets the gist. 

Somewhere, somehow, some people made it a full time job. HRs and consultancy, I guess. Easy to sell, easy to put in career systems, I guess. But once you do that the team is stuck with it.

I remember the first time a SM went to ask me what new stuff he could introduce to his team, while the team was actually in a cool flow and delivering like pros. « Well do nothing. Anything broken with your team? They still progress, continuously improve? So why fix what’s not broken. Dont disturb them, go back to work ». Oops, he had no other work. This was an awkward moment, and unfortunately a trend.

Keeping someone accountable for this stuff in the team really has value on the long run. To gain wisdom on the team dynamic, see long trends, keep challenging them, etc. But the day to day SM stuff, anyone can and should handle this after a the start phase. Otherwise… yeah, this SM is overhead.",2024,Are Scrum Masters Too Much Overhead?
falconfetus8,2,I'll tell you something that _isn't_ too much overhead: a good product owner!  It's nice to have someone I can ask for clarification on any story!,2024,Are Scrum Masters Too Much Overhead?
damoirv,2,"Poor performing developers are too much overhead. Same for poor performing testers, tech leads PO's are too much overhead.

So yes, poor performing scum masters are useless. 

Good ones are rare and invaluable.",2024,Are Scrum Masters Too Much Overhead?
Snow56border,2,"We use scrum masters that are team leads on other programs. The scrum master role, as we use it, has the goal of following the scrum process, while the team lead has the goal of getting work done. So it’s basically to have a third party a little less engrained in a project, but are absolutely experts in the domain.

I found it to be completely opposite to most comments here as actually being revolutionary. In coming from the DoD waterfall development world, scrum was an absolute game changer. We also embraced kanban when we have support projects or fielded product support.

I think the bigger thing I see, is training. A lot of people “rah, scrum is bad” likely also come from the world of have no training in any productivity frameworks. Lone wolf development is very attractive to a lot of people, but it is way too risky.

I will comment, I was at a company with certified scrum masters, and they were 100% useless. Since they had no expertise in the work, they had ‘suggestions’ but never anything useful to contribute to developing processes. And since the company had scrum masters, absolutely no funding for any agile training. So basically everyone was lone wolf developers as team leads didn’t really care to enforce anything.

That company facing a lot of issues with products with questionable quality all needed countless hacks to get running.",2024,Are Scrum Masters Too Much Overhead?
Chance-Plantain8314,2,"IMHO, if they're actively working to keep the team organized, act as a proper buffer between project and the team, work to remove impediments & get the team the resources they need, and protect the team from distractions: they can be well worth it. 

My job is definitely more difficult when my scrum masters isn't around but they're doing a lot more than just tracking burndown charts and calling names during ceremonies.",2024,Are Scrum Masters Too Much Overhead?
Zezeroth,2,Considering I literally could not tell you what our scrum master has done in the last 6 months.... Yes!,2024,Are Scrum Masters Too Much Overhead?
MyStackIsPancakes,7,Depends on the size of your organization.,2024,Are Scrum Masters Too Much Overhead?
signalbound,6,"Not only size, also present expertise. It's an accountability, not a role. It's not necessary to have a separate person only being a Scrum Master.",2024,Are Scrum Masters Too Much Overhead?
RandomGeordie,13,It's an absolutely fucking useless made up roll for grifters with no real skills. Literally corporate vampires sucking the workforce dry.,2024,Are Scrum Masters Too Much Overhead?
MyStackIsPancakes,-4,"So you asked a question on something you already had a firm opinion about?

I feel like you wanted to write a rant about ""Why Scum Masters shouldn't be a separate position"" but accidentally phrased it like a question.",2024,Are Scrum Masters Too Much Overhead?
ratttertintattertins,4,Odd take.  It’s completely normal for a rhetorical question to be the title of an article.,2024,Are Scrum Masters Too Much Overhead?
Accurate-Collar2686,4,"Short answer: yes.

I'd rather work directly with the stakeholders, then task my juniors and mid-levels with my resulting analysis. That's how I like to proceed, and it works. My days are spent doing code reviews, database and processes/flows design, sometimes pushing a hotfix when everyone is busy and something breaks, meetings with stakeholders, etc. I'll also often be the person who writes the core/startup of the application upon which the rest of the team builds. I don't need to be managing people full-time, they're adults.

A simple kanban board with tasks. A Gantt chart maybe for upper management. Anything else is simply bureaucracy. I don't understand why a non-technical PM should ever be involved.",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,3,"Agile (as deployed now, not as the manifesto) is the leading way to reduce productivity in any development function.",2024,Are Scrum Masters Too Much Overhead?
teratron27,2,"From my own anecdotal experiences, places I’ve worked that used scrum and had either a scrum master or dedicated lead to do the equivalent ran a lot smoother than places that just let the devs manage the projects themselves.",2024,Are Scrum Masters Too Much Overhead?
Vk111,2,Yes. Betteridge's law takes another hit.,2024,Are Scrum Masters Too Much Overhead?
great_escape_fleur,2,"I was never able to take my job seriously because of this. The most egregious thing is the existence of the word ""ceremonies"" in it.",2024,Are Scrum Masters Too Much Overhead?
Venthe,1,"[Where?](https://scrumguides.org/scrum-guide.html)

Of course, that's a bit tongue-in-cheek, because it did at one time use the word ""ceremony"". If it is that appalling to you, did you ever took a second to ask yourself why it was named as such?",2024,Are Scrum Masters Too Much Overhead?
Joboy97,2,"Short answer: yes.
Long answer: Yeeeeeeeees.",2024,Are Scrum Masters Too Much Overhead?
johnyquest,2,Scrum is stupid.,2024,Are Scrum Masters Too Much Overhead?
thisFishSmellsAboutD,1,"The ""r"" is silent",2024,Are Scrum Masters Too Much Overhead?
ul90,2,😂,2024,Are Scrum Masters Too Much Overhead?
brentmitchell25,1,"My team is only myself (staff engineer), scrum master, and my supervisor. They all look to me as to what needs to be done across the org. So it's been an odd situation the past couple years.",2024,Are Scrum Masters Too Much Overhead?
Informal-Armadillo,1,"No, not at all, considering the number of procedures in SCRUM. Can you do without it? Yes, sure, you can. As with all things, it depends on your company culture and maturity.

I favor scrum-like planning but Kanban execution, as frankly, I have seen few product managers or teams that actually do product management and not just go between business and technology.

In smaller companies, I would not recommend SCRUM at all as it can add overhead that can hinder rapid launch.",2024,Are Scrum Masters Too Much Overhead?
matsie,1,I don’t understand why they’re a separate role from an eng mgr/tech lead when it’s just a handful of responsibilities.,2024,Are Scrum Masters Too Much Overhead?
John_Fx,1,"I think they are valuable, but it shouldn’t be anyone’s whole job unless it is a massive team.",2024,Are Scrum Masters Too Much Overhead?
Dormage,1,Yes,2024,Are Scrum Masters Too Much Overhead?
ivan0x32,1,"Yes they can fuck right off together with their ""Scrum"".",2024,Are Scrum Masters Too Much Overhead?
urbrainonnuggs,1,Upvote for Frisbee,2024,Are Scrum Masters Too Much Overhead?
Bad_Negotiation,1,Is it possible when the bottleneck it's a scrum master?,2024,Are Scrum Masters Too Much Overhead?
Pepito_Pepito,1,Scrum master is supposed to be a temporary position. You coach the team until they can do it themselves. Anything outside of this is waste.,2024,Are Scrum Masters Too Much Overhead?
terrorTrain,1,"Are scrum masters too much overhead? Yes

Is scrum too much overhead? Probably yes

Scrum mandates a lot of meetings and nonsense. Get rid of pretty much all of them, and instead start an async discussion for each. If things went wildly wrong, consider an actual meeting. 

Scrum turns a parallel process into a serial process. Every sprint has a bunch of overhead with meetings and mental overhead with ""what are we going to get done this sprint. Blah blah blah. Now you need more people to organize and keep track of these things. 

Instead of sprints, pick an arbitrary amount of time, say 2 weeks, and base velocity off that, point stories as they are relevant for development async. You now have everything you need to make fancy charts and predictions about then things will be done. No need for meetings about it. 

Each team should have these components: 
- product / priorities
- design and ux
- developers
- QA 


The rest can happen in parallel and flows down like a funnel

* Product gathers feedback, coordinates with stakeholders on new features. Vetting and validating that these features are beneficial to end users and solve real problems. Lots of user interviews etc... and confirming with engineers. This should take the most time of the whole process. If this was hunting, it would be finding your prey. 
* Design/ux design and gather feedback on designs from actual users on the tickets that product determines necessary. This should take the second most time. This would be like aiming.
* Developers turn that into reality. This should be pulling the trigger, and should be as fast as possible. 
* QA checks and kicks off release. This is like confirming the kill. 


The async retro about release, which will typically be a non conversation. If issues arise, 

When a part of the team has nothing to work on because the top of the funnel has nothing for them yet, celebrate, for now you have time to refactor, fix messes. Redesign a part of the app that has low interaction or is confusing. This downtime is healthy and allows the team to do all the unsexy things, without a business person losing their mind because the team needs to dedicate a sprint or two to maintenance, where everyone is so burnt out they pretty much just zone out anyways. This downtime should be a significant portion

Keep meetings to a minimum, observation and predictions can be made from outside the team, but they should not be able to have influence on the team. 

None of this scrum bullshit. No outside consultants to help you figure out how to optimize your synergy... It's all snake oil bullshit made by meeting people for meeting people. 

https://www.paulgraham.com/makersschedule.html",2024,Are Scrum Masters Too Much Overhead?
i_andrew,1,"If you have educated, experienced Tech Leads, then Scrum Masters are a waste.

If you have inmature team, I would rather have an Agile Project Manager.

But having Scrum in the first place is much better of an issue.",2024,Are Scrum Masters Too Much Overhead?
billie_parker,1,"These titles sound like they were invented by babies. ""Scrum master."" Give me a break. 

I'm the coding master, the logic king. Those are my titles now",2024,Are Scrum Masters Too Much Overhead?
bwainfweeze,1,Wait until you hear about Six Sigma.,2024,Are Scrum Masters Too Much Overhead?
mothzilla,1,"Scrum master is just your immediate manager. They become a ""Scrum Master"" by ~~not being a dick~~ _being a servant leader_, contributing effectively and actively listening to the needs of the team.",2024,Are Scrum Masters Too Much Overhead?
kintar1900,1,My last two companies' scrum masters actually made things take LONGER.,2024,Are Scrum Masters Too Much Overhead?
Deleted Account,1,"It’s all bullshit anyways, been with 1 company out of the 30 I’ve been at that actually does the spirit of agile, instead of using it as micromanaged waterfall with scope creep which the other 29 do",2024,Are Scrum Masters Too Much Overhead?
bananonumber,1,"Yes, they are also called scrum mains now... btw",2024,Are Scrum Masters Too Much Overhead?
__dying__,1,They're non producing and non value adding. Would you pay for that if it was your business?,2024,Are Scrum Masters Too Much Overhead?
greenthum6,1,"Scrum master is a role, not a job. I know because I am one. It takes 10-30 mins a day and maybe a day and a half for other scrum meetings and preparations per sprint. That's two days per sprint to handle it. The rest of my time is spent on development work. Yes, I am a tech guy, but with enough courage to speak in front of people. 

A day per week for Scrum master work is not overhead. Someone needs to do it. But five days per week sounds more like a project manager that has a lot of responsibilities and multiple projects.",2024,Are Scrum Masters Too Much Overhead?
evileagle,1,"Scrum is too much overhead.

https://rethinkingsoftware.substack.com/p/why-scrum-is-stressing-you-out",2024,Are Scrum Masters Too Much Overhead?
rinkebysvenska,1,Yes. The answer is yes,2024,Are Scrum Masters Too Much Overhead?
bazookatroopa,1,Yes,2024,Are Scrum Masters Too Much Overhead?
Gofastrun,1,"You guys have actual scrum masters? Like a dedicated person? 

One of us just pulls up Jira",2024,Are Scrum Masters Too Much Overhead?
xabrol,1,"A good scrum master is amazing and invaluable. A bad scrum master is a money sink and can make projects worse to be on. 

My current scrum master is awesome.   He keeps all the cards on the board in soec with card rules.   If they're missing requirements, they get added.   If testing steps are vague he gets them updated.  He maintains all the cards in good standing. 

So when I geab a card, its ready to go and im not likely to have any questions.  I can read the card and know exactly what needs done, including wireframes/designs sttached to the card.   He'll even go into figma and grab svgs, css, etc and attach it all to the card.

Saves me so much time.  I can kill 4 cards in a day because im not wasting my time digging through teams chats, analyzing figma, or waiting for people to respond to me.

He keeps the developers on task, with max heads down time.",2024,Are Scrum Masters Too Much Overhead?
noodlez,1,"The point of a Scrum Master is to reduce overhead.  If they're neutral impact or creating overhead, either your org doesn't need this role yet, the org is implementing them poorly, or the person isn't doing a good job.

Not every org needs this role.  Process is something you put in place to alleviate pains of growth and size.  When you're small and/or not experiencing those pains, you don't implement process just for the sake of process, because that kills productivity unnecessarily.",2024,Are Scrum Masters Too Much Overhead?
bwainfweeze,1,Give a man a little power…,2024,Are Scrum Masters Too Much Overhead?
Lashmush,1,Is... is this real? I had to look it up and every single definition or explanation is just hollow corpo-speak that makes no sense. :c,2024,Are Scrum Masters Too Much Overhead?
lemmaaz,1,Agile in general is a waste,2024,Are Scrum Masters Too Much Overhead?
idebugthusiexist,1,"It makes little sense to be hired to simply be a nag on your team, however that’s like saying you shouldn’t put diesel in a car that’s electric. I’ve worked with teams where I applied agile/scrum correctly and it can be a fun process, but also very illuminating and we were extremely effective as a team. If you aren’t allowing your team members to have a break from the daily routine to think about the broader picture, then you are not empowering them to feel valued. Yes, you can argue that being a scrum master should not be a dedicated job, but the concepts are sound and I stand by it based on personal experience and the competency of the person applying it - like everything else in life. If you had a bad experience, that is a problem with the person or the org.",2024,Are Scrum Masters Too Much Overhead?
anengineerandacat,1,"TBH a scrum master should be the PM, hate to say it but it doesn't make sense to have them be split when one is trying to get a team to commit to work and the other is actively trying to prevent a team from overcommitting to work.

Just like dev's now do operations, PM's should take a more active role in capacity planning / management / etc. with development teams and be aware of what's actually happening.

Most higher-end shops, that's essentially what TPM's did; sat in and helped to manage capacity while also keeping the team honest and aware of what else was happening within the organization.

Worked well for those places, and you don't have what is essentially a totally non-technical individual trying to fight battles they can't actually win.",2024,Are Scrum Masters Too Much Overhead?
off2bali,1,"All I will say is that I welcome the day that we have our AI Scum Master Avatar holding scrum ceremonies and stopping people from rambling …

At the end of the day it all seems like a way to micromanage people and their work.

I tell people in other professions what we do and they could never ….",2024,Are Scrum Masters Too Much Overhead?
RobinsonNCSU,1,"In my experience it's always better combined with another role. SM doesn't seem to justify one person's full time role. This has been just as true in SAFe agile as regular agile. The product owner for my current team is our SM and it has been the best combination I've experienced. At a previous job our product manager was SM, and before that I did it in combination with being lead dev/architect/functional analyst.  That was too much, but an aspirational person without a family yet can push to get it done.",2024,Are Scrum Masters Too Much Overhead?
NiteShdw,1,I've only worked at one place that has had dedicated scrum masters. The other 10 didn't.,2024,Are Scrum Masters Too Much Overhead?
aaron_dresden,1,Funny it became not just the scrum masters but scrum too.,2024,Are Scrum Masters Too Much Overhead?
Monkey_Wisdom-31,1,Yes,2024,Are Scrum Masters Too Much Overhead?
Jhonka93,1,"Why not just hire a senior developer who has exposure to planning, organizing and using Jira..

That way they actually can contribute to the project rather than pretending to.

A huge portion of this Business textbook stuff needs to go. It adds unnecessary stress and makes things overly complicated.",2024,Are Scrum Masters Too Much Overhead?
patrickp4,1,"Most of you are complaining about scrum master not doing anything but the alternative is scrum masters do something and that’s much worse.

Currently we have had 4 2 hour meetings about agile over the past year and I haven’t learned a single useful thing.",2024,Are Scrum Masters Too Much Overhead?
eldnikk,1,My org recently got rid of all scrum masters.,2024,Are Scrum Masters Too Much Overhead?
simplan,1,Certified Scum Master,2024,Are Scrum Masters Too Much Overhead?
dockemphasis,1,"They should simplify the job to the most useful aspects

- make cards
- track project
- set meetings

You know what, let’s just call them project managers like we used to",2024,Are Scrum Masters Too Much Overhead?
Aviyan,1,"I thought the end goal was there would be no need for a scrum master. At my company they ask questions every quarter how much of the agile/scrum processes the devs are following. One question it literally asks ""Is the team able to follow the processes without a scrum master?"" The goal is that once the team is full steam ahead the scrum master shouldn't be needed.",2024,Are Scrum Masters Too Much Overhead?
pinion_,1,"I kinda want to call my dad on this one, he'd just come into the meeting and hit everyone. Once we all got back into the chairs and everyone bleeding had at least one hankie with multiple blood stains on it he would leave. We'd all hug. The sprint wouldn't be any further forward but at least we'd all have something in common. Unlike the agenda the scrum master brought.",2024,Are Scrum Masters Too Much Overhead?
zelphirkaltstahl,1,"A scrum master is a person trying to apply the scrum process, trying to get teams to follow the process, rather than making the process fit the team. By definition this, I want to remind everyone, is not agile. It is ""agile out of the window, we now do what management levels want"".

So now that we have distinguished it from agile, I can say from experience, that I have never seen any team create more output, because of a scrum master doing their thing. Not even when people without that label have tried to introduce more and more process and meta work. It has only ever gone downhill.",2024,Are Scrum Masters Too Much Overhead?
4lgedbeast,1,What do you guys think about lead devs acting as scrum master?,2024,Are Scrum Masters Too Much Overhead?
crazyneighbor65,1,if i could get my team to manage their own backlog i wouldn't need to pay someone to remind them,2024,Are Scrum Masters Too Much Overhead?
Chaserjim,1,Principal software engineer and team scrum master of 4 years checking in.,2024,Are Scrum Masters Too Much Overhead?
cats4gradientdescent,1,"I once had a scrum master suggest, in order to cut down on our time spent in meetings, that we eliminate retro. Baffling.",2024,Are Scrum Masters Too Much Overhead?
Speculatore,1,"The only person who wants a scrum master is the engineering manager who doesn’t want to do the job 🤣. 

I’ve done scrum master my whole Eng career for teams. I actually don’t mind it but I also don’t follow scrum to a tee.",2024,Are Scrum Masters Too Much Overhead?
gulyman,1,"The scrum masters my former team had acted as middle managers in that they would deal with issues for the team. They set up the Jira board and would talk with other departments, like IT if we needed a new build server. It might have been compensating for us not really having a functional manager or team lead.

We did have one guy who lasted a few months before leaving. He didn't really do anything and wanted our team to be ""self managing"" and run scrum on our own. He thought of himself as more of a scrum coach. I don't know why he was trying to get rid of his own job.",2024,Are Scrum Masters Too Much Overhead?
peeping_somnambulist,1,"I’m a PM veteran. I just meet with the engineering manager and talk through what I want. Then when the team makes estimates we tell them to just lie. Sometimes changing UI without a service change is a 5 and sometimes it’s a 1, depending on how much other shit that they have to get done. You can always obfuscate it based on who’s working as well. Dave doesn’t know thst codebase so it’s 3. Sanjay has never worked with that service so it’s an 8 for him but a 5 for Praveena etc. The ridiculous thing about scrum is that nobody really knows how long anything is going to take but we all have to pretend that we do by playing games with not time estimates that are actually just going to be used as time estimates anyway. 

We then make the numbers look good for the charts. Somehow we always hit our velocity targets and release things mostly on time. We cut shit all the time that doesn’t fit and people just have to wait 2 more weeks while we pat ourselves on the back since we don’t ship bad product. 

It’s all a game. The SCRUM masters hate me but I refuse to let them torture the team when in the end all everyone wants to do good work, and not be embarrassed or blindsided.",2024,Are Scrum Masters Too Much Overhead?
LisaDziuba,1,are there any Scrum Masters here? lol,2024,Are Scrum Masters Too Much Overhead?
Electronic-Dress-792,1,"VERY few things in SDLC worse than a bad scrum master. a good one is a catalyst though

  
a good scrum master should:

\* Minimize meetings and make all processes lightweight, jira updates should be <1m daily

\* Protect the team from interruption and scrutiny

\* Minimize task switching and priority changes

\* NO STATUS UPDATES -- TO ANYTONE -- updates go into ticket, and entirety of the company goes there, NOT interrupting dev

\* Leverage accurate tickets to keep managers informed about budgets and timelines, asynchronously, without ever bothering team

  
Absent this? Priorities change constantly, no plan is ever reliable, management hovers wanting constant updates, every topic derails a scheduled agenda as everything is solutioned as soon as it comes up, and there's hardly any tracking or statusing of work so no record of the efforts to justify pushing back on more work, or why help is needed.

  
Y'all are smarter than I and I make that very clear to my team, but this shit is \*desperately\* needed. Teams CAN be taught to do this on their own, as a truly good SM does. I've owned 9 teams in 6 years because I'll get 2 teams becoming a well-oiled-machine (devs and managers love), and they ask me to implement elsewhere after.

  
A poor SM does nothing but moot and repetitive shit, getting in the way",2024,Are Scrum Masters Too Much Overhead?
paco_in_ut,1,Add it to the backlog.,2024,Are Scrum Masters Too Much Overhead?
Haspe,1,"Absolutely yes. I feel organizations want to immediately fit the R&D into some kind of framework mold, when it should be otherwide. Start with nothing, and add process where you need it - not other way around, or we end up slaves of the process - like in my corporation.",2024,Are Scrum Masters Too Much Overhead?
Fearless_Imagination,1,"My experience with fulltime Scrum Masters it that they are... well... kind of useless? 

When there's an impediment a Scrum Master could resolve, it usually involves nothing other than just talking to some people, because well, a non-technical, non-businessperson Scrum Master doesn't *have* any skill to solve technical or business related impediments.

But here is the thing: while I *am* the stereotypically introverted type of developer, *I can still talk to people just fine*. And when the Scrum Master is trying to resolve the impediment via talking to people they often call me in *anyway* because they need someone who actually understands the problem to explain it... 

  
Add to this the fact that Scrum Master isn't really a fulltime job - and I think companies have caught on - no even if you have multiple teams it's not a fulltime job unless you're really bad at it - and yeah, it seems like a lot of Scrum Masters are useless overhead.

I mean, if I look at my current Scrum Master. For the actual Scrum Master part of her job, we don't really need her. Everyone in the team knows how Scrum works anyway. She also does other stuff. Although I am not exactly sure what it seems to involve going to a lot of meetings so I'm glad I'm not doing it though. But if tomorrow we were told that she is no longer the Scrum Master of our team but is now a team member whose expertise is... whatever she's doing when she's not doing Scrum Master stuff. And we just wouldn't have a Scrum Master anymore. Not a lot would change.",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,1,"I interviewed and hired a former scrum master for an insanely low impact, office-manager type role for a retail store. Easily one of the worst hires I ever made. They were completely ineffective, even at the things scrum masters are ostensibly good for (procedures, calling names….typing).",2024,Are Scrum Masters Too Much Overhead?
henryeaterofpies,1,"Depends on what you're using your scrum master for.

As the team point of contact and defense against outside influence/interuptions they can be invaluable.

Aa a glorified Agile cheerleader they are worthless",2024,Are Scrum Masters Too Much Overhead?
sacred_oak_nutsack,1,Scrum is dead,2024,Are Scrum Masters Too Much Overhead?
spartenmt1,1,Yes.,2024,Are Scrum Masters Too Much Overhead?
newdmontheblocktoo,1,"Man there’s a crusade against scrum masters recently. I get the solely scrum master role being worthless but there are other roles similar I feel like provide tons of value. Scrum masters are too one dimensional. Someone in a glue role such as that should have knowledge of several methodologies and be a champion at giving their teams the insulation they need from stakeholders to execute effectively. Clear requirements, clear timelines, and clear prioritization to ensure the team is working on the right thing and swarming the issues that give them the best likelihood to deliver.",2024,Are Scrum Masters Too Much Overhead?
teh_lynx,1,Yes. Especially at a job title someone holds to run meetings and waste everyone's time and get paid to do it.,2024,Are Scrum Masters Too Much Overhead?
Ok-Lunch-8561,1,yes,2024,Are Scrum Masters Too Much Overhead?
TanisCodes,1,That task should be a Spike,2024,Are Scrum Masters Too Much Overhead?
felfott,1,"So useless. Most times it's a non technical person just asking dumb questions.
Anyone can ""run"" a daily stand up. No need full time role.
Isn't funny it is the only role you need a cert? You can push code to prod without certs but asking ""any blockers?"" - you need a cert. 😂",2024,Are Scrum Masters Too Much Overhead?
External-Anybody7957,1,Scrum is dead - can you stop trying to bring it back ?,2024,Are Scrum Masters Too Much Overhead?
Deleted Account,1,"The scrum masters role is to teach about scrum, and since srum is micro management and bullshit they have no value. I don't need a babysitter to coach me or some shit like that. For those saying oh the scrum master shields the team i say, you have a shitty work place if you need shielding.   
fight me.",2024,Are Scrum Masters Too Much Overhead?
-Hi-Reddit,1,the idea of a non-coding scrum master is outdated n tbh I don't see how it was ever needed in the first place unless the team they're watching over is absolutely massive...in which case the team size should be reduced,2024,Are Scrum Masters Too Much Overhead?
DueKaleidoscope1884,1, The variability of kind of and level of scrum masters is why I avoid joining scrum teams.,2024,Are Scrum Masters Too Much Overhead?
DualActiveBridgeLLC,1,"Not a dedicated one as the role of the ScrumMaster rarely should take up anyones full amount of time.  Last team I managed a developer said he wanted to get some experience as SM so I said sure and we tracked that for a team of 6 it took up about 25% of his time.  With my time freed up I was able to do more development and level 3 support so it didn't seem to add overhead, just a switch of responsibilities

But, the team next to us was 12 people large and had a dedicated SM and for the life of me I couldn't understand how that could be full time. 

I think SM can sometimes be a decent way to start to give people management experience.  You know, start thinking about how processes work and what purpose they solve, conducting meetings, making sure goals are met, kinda thing.  It just isn't very hard so I am not sure how someone wouldn't grow out of it very fast.",2024,Are Scrum Masters Too Much Overhead?
loopinkk,1,My company recently retrenched all our SMs and honestly very little value has been lost (from my perspective as a senior dev on a 8 person team).,2024,Are Scrum Masters Too Much Overhead?
metallaholic,1,I couldn’t tell you what one does but they sure act like they do a lot,2024,Are Scrum Masters Too Much Overhead?
age_of_empires,1,"Scrum Master, Business Analyst, and QA tester roles have all been cut at the companies I've worked at.

It may seem pretty evil but I think an indicator of what roles will be cut are how content people are.",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,1,"It depends. 

If you are a small shop with maybe 25 engineers, no. 

But if you have a lot of engineers, there comes a point at which the amount of context switching for the tech lead becomes large enough that those costs outweigh another person’s salary.",2024,Are Scrum Masters Too Much Overhead?
just-give-it-to-me,1,Very nice guy. Love him dearly but the only notable contribution is correct the typos on the tasks.,2024,Are Scrum Masters Too Much Overhead?
Sherbet-Famous,1,"Our company got rid of them and I can't say I feel it was a huge loss. We still do scrum ceremonies, but it's just run by a dev manager now who has other responsibilities in addition to the scrum stuff",2024,Are Scrum Masters Too Much Overhead?
Deleted Account,1,"Yesssssssss. Every SM I've encountered has reinforced my view

Agile scrum is a huge money waster",2024,Are Scrum Masters Too Much Overhead?
rotterdham,1,Mostly useless hyper attitude people,2024,Are Scrum Masters Too Much Overhead?
Venthe,-1,"I disagree; but I'm coming from a wider perspective.

Scrum Masters are essentially team-level process managers. At a certain scale, say three teams or more, your company absolutely needs such competence. The challenge arises when the organization outgrows the ability to manage processes efficiently. Skilled people end up juggling greenfield projects, maintenance, on-calls, mentoring, new hires, and more.

Process management becomes an afterthought. This is where a process manager comes in—someone capable and invested in coaching teams, raising issues up the chain, and enabling developers to focus on what they do best. This overlaps with the role of a Scrum Master.

In my career, I've only seen about four teams that didn't need a process manager. For the rest, this role was essential.

In an Agile environment, this process manager is an Agile coach. Since Scrum is widely adopted (and one of the best frameworks for known work), this role often becomes specialized as a Scrum Master.

There are problems, though. Many Scrum Masters lack coaching skills, process management expertise, people skills, or even knowledge of Scrum itself. Too often, companies disempower process managers.

The question is, should we eliminate the role because of a bad actors? In my opinion, no. We should scrutinize it and always view it as a process manager role. And based on my experience, it's an essential default for the average team working with scrum. Similarly, an agile coach is an essential part of an agile team.

> I never really liked the sentiment that Scrum Masters should work to make themselves redundant. This statement implies that the default assumption is to start with a separate Scrum Master who will disappear and dissolve in the Scrum Team over time.

Not quite. The statement means that certain things the Scrum Master does—like fostering self-organization and self-management—should eventually be handled by the team. That’s the goal of all coaching roles, including Scrum Masters.

> Maybe the biggest flaw of Scrum is that it’s designed with the Scrum Master in mind. If you need a separate person to explain the game's rules, maybe the rules aren’t all that great. 

I disagree. The Scrum Master supports Scrum, which is a very light framework. Most developers I’ve met can’t even be arsed to read the 14-page guide, and then blame Scrum for issues like Story Points. The separate issue altogether is the organization, which does not have to understand agile, much less a framework like scrum.

> Unfortunately, this reflection will immediately be silenced because whenever someone doesn’t follow Scrum and it fails, someone will utter the cultish words “Of course it didn’t work. You weren’t doing Scrum.”

There’s a disconnect in how this is interpreted. Detractors see it as a “No True Scotsman” fallacy. Proponents see it as, “These are hard rules for a reason. You can’t ignore them and still claim to be doing Scrum.”

If you don’t empower the Scrum Master or the team, you’re not doing Scrum. If you treat daily stand-ups as status reports, you’re not doing Scrum. If you mandate Story Points, you’re not doing Scrum. It’s that simple.

Scrum gives you freedom in the ""how"" but requires empowerment. Without that, you're not doing Scrum.

> Don’t go looking for the Scrum Guide for answers, which is the opposite of what many Scrum practitioners do. The begin asking silly questions like how do we do X in Scrum, instead of asking what would be the best for our situation?

I agree with the overall sentiment; but anyone who read the Scrum Guide sees that it covers responsibilities, meetings, time-boxes, and roles, but leaves the ""how"" to the experts. This is where many problems arise; and this is what people are asking about.",2024,Are Scrum Masters Too Much Overhead?
TangerineSorry8463,-2,"I've learned nothing useful about the ""why"" of that role. Clearly ScrumMaster fingers wrote this post.",2024,Are Scrum Masters Too Much Overhead?
MyWorksandDespair,0,"On a highly motivated team there is no need for a scrum, or agile in general.  

However, if you’re on a team with people who don’t perform any work- they serve as an unbiased third party that you can use to apply pressure and document the lack so that you can terminate them.",2024,Are Scrum Masters Too Much Overhead?
ul90,-1,Short answer: yes. Long answer yeees.,2024,Are Scrum Masters Too Much Overhead?
redditaccountbot,0,Depends on the master.  I had one that caused more drama than a soap opera.,2024,Are Scrum Masters Too Much Overhead?
kdthex01,0,"If scrum is being introduced to the team then having a dedicated scrum master is a full time job for a while.

After the team gets through the storming / norming phase then it should rotate through the team.",2024,Are Scrum Masters Too Much Overhead?
signalbound,1,That depends on the team and how familiar they are with Scrum.,2024,Are Scrum Masters Too Much Overhead?
kdthex01,1,Well.. yeah… hence the “if” and “introduced” words..,2024,Are Scrum Masters Too Much Overhead?
Unusually-Average110,0,"I’ve been a Scrum Master the last three years and my view on the role is mixed to say the least. For what it’s worth our organization is moving to a model where every Scrum Master is running two teams. That seems appropriate. For the dedicated Scrum Master position I feel the individual really needs to be pro-active in showing value and needs to find ways to fill up their time in a meaningful way. Even if that means taking on non-Scrum Master work. Some of my peers don’t do that, and it’s questionable what they do with all their time. Nothing makes me cringe more when Scrum Masters shoot down any work they have to do, and say it’s not part of scrum. When I do have bandwidth I’ve been cross training with the DEV’s. If for no other reason I can help work ahead, and understand the work better. Just don’t focus on the job title, focus on showing value any way that you can.",2024,Are Scrum Masters Too Much Overhead?
xFblthpx,0,"Hire a scrum master when your team has grown to that point. If your team isn’t large enough, don’t do it. Straightforward. There’s a lot of administrivia that a scrum master can take on, and they can even have a role in QA, or function as a git czar.",2024,Are Scrum Masters Too Much Overhead?
RedditNotFreeSpeech,0,Scrum dumpster,2024,Are Scrum Masters Too Much Overhead?
ocrohnahan,0,Yes.  Refuse agile.  Bring back some respect to the profession.,2024,Are Scrum Masters Too Much Overhead?
larsga,0,"So when will people expand this idea to: ""The project manager is pure overhead""?",2024,Are Scrum Masters Too Much Overhead?
stever71,0,"They are useless in my experience, no value added. Better off with that role being done with an existing team member with the skills",2024,Are Scrum Masters Too Much Overhead?
OdeeSS,0,They're worse than too much overhead: their pursuit for metrics becomes a race to the bottom.,2024,Are Scrum Masters Too Much Overhead?
EmperorOfCanada,0,"Most of agile is now just micromanagement with theatrical names to suggest that the programmers are anything but ticket processing cogs.

Agile is a near perfect example of the difference between leadership and managing. 

Having a meeting more than every few weeks is a glaring sign of poor leadership. Having one at least every day has simply elevated micromanagement to a level rarely seen in human history.",2024,Are Scrum Masters Too Much Overhead?
t_go_rust_flutter,0,"Scrum is bad, so, obviously yes",2024,Are Scrum Masters Too Much Overhead?
NOPmike,0,Yes,2024,Are Scrum Masters Too Much Overhead?
